e features are only available in nightly channel.
Warning: the `fn_args_layout` option is deprecated. Use `fn_params_layout`. instead
Warning: can't set `wrap_comments = true`, unstable features are only available in nightly channel.
Warning: can't set `format_code_in_doc_comments = true`, unstable features are only available in nightly channel.
Warning: can't set `normalize_comments = true`, unstable features are only available in nightly channel.
Warning: can't set `normalize_doc_attributes = true`, unstable features are only available in nightly channel.
Warning: can't set `format_strings = true`, unstable features are only available in nightly channel.
Warning: can't set `format_macro_matchers = true`, unstable features are only available in nightly channel.
Warning: can't set `format_macro_bodies = true`, unstable features are only available in nightly channel.
Warning: can't set `imports_layout = HorizontalVertical`, unstable features are only available in nightly channel.
Warning: can't set `imports_granularity = Crate`, unstable features are only available in nightly channel.
Warning: can't set `group_imports = StdExternalCrate`, unstable features are only available in nightly channel.
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/advanced_features.rs:269:
         ];
 
         for space in &unicode_spaces {
-            let input = format!(
-                "{space}{{{space}key{space}: {space}value{space}}}{space}"
-            );
+            let input = format!("{space}{{{space}key{space}: {space}value{space}}}{space}");
             let result = parse(&input);
             // Some unicode spaces might not be recognized, but shouldn't crash
             if result.is_ok() {
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comma_handling.rs:40:
             println!("vexy_json parsed object newline as: {other:?}");
         }
         Err(e) => {
-            println!(
-                "vexy_json doesn't support newlines as separators in objects: {e:?}"
+            println!("vexy_json doesn't support newlines as separators in objects: {e:?}");
     }
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comma_handling.rs:58:
             println!("vexy_json parsed array newline as: {other:?}");
-                "vexy_json doesn't support newlines as separators in arrays: {e:?}"
+            println!("vexy_json doesn't support newlines as separators in arrays: {e:?}");
 }
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comma_handling.rs:116:
             assert_eq!(obj.get("b").and_then(|v| v.as_f64()), Some(2.0));
         Ok(other) => {
-                "vexy_json parsed implicit object with newlines as: {other:?}"
+            println!("vexy_json parsed implicit object with newlines as: {other:?}");
-                "vexy_json doesn't support implicit objects with newlines: {e:?}"
+            println!("vexy_json doesn't support implicit objects with newlines: {e:?}");
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comma_handling.rs:137:
             assert_eq!(arr[2].as_f64(), Some(3.0));
-                "vexy_json parsed implicit array with newlines as: {other:?}"
+            println!("vexy_json parsed implicit array with newlines as: {other:?}");
-                "vexy_json doesn't support implicit arrays with newlines: {e:?}"
+            println!("vexy_json doesn't support implicit arrays with newlines: {e:?}");
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comma_handling.rs:165:
             println!("vexy_json parsed string sequence as: {other:?}");
-                "vexy_json doesn't support string sequences with newlines: {e:?}"
+            println!("vexy_json doesn't support string sequences with newlines: {e:?}");
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comma_handling.rs:187:
             println!("vexy_json parsed trailing comma array as: {other:?}");
-                "vexy_json doesn't support trailing commas in arrays: {e:?}"
+            println!("vexy_json doesn't support trailing commas in arrays: {e:?}");
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comma_handling.rs:204:
             println!("vexy_json parsed trailing comma object as: {other:?}");
-                "vexy_json doesn't support trailing commas in objects: {e:?}"
+            println!("vexy_json doesn't support trailing commas in objects: {e:?}");
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comma_handling.rs:409:
             println!("vexy_json parsed {{a:1}}, as implicit array: {arr:?}");
         Ok(Value::Object(obj)) => {
-                "vexy_json parsed {{a:1}}, as object (ignored trailing comma): {obj:?}"
+            println!("vexy_json parsed {{a:1}}, as object (ignored trailing comma): {obj:?}");
             println!("vexy_json parsed {{a:1}}, as: {other:?}");
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comma_handling.rs:433:
             println!("vexy_json parsed space-separated as: {other:?}");
-                "vexy_json doesn't support space-separated properties: {e:?}"
+            println!("vexy_json doesn't support space-separated properties: {e:?}");
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/error_handling.rs:115:
 fn test_valid_edge_cases() {
     // Test what vexy_json actually supports
-    // vexy_json may not support implicit null 
+    // vexy_json may not support implicit null
     assert!(
         parse(",]").is_err(),
         "Implicit null in array not supported in vexy_json"
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/feature_tests.rs:336:
     for (input, description) in test_cases {
         match parse(input) {
             Ok(val) => {
-                println!(
-                    "⚠ Error case {description} unexpectedly succeeded: {val:?}"
-                );
+                println!("⚠ Error case {description} unexpectedly succeeded: {val:?}");
                 // Some malformed input might be handled gracefully
             }
             Err(err) => {
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/forgiving_features.rs:186:
     // These should fail with strict options
     match parse_with_options("// comment\n42", options.clone()) {
-        Ok(v) => panic!(
-            "Comments should fail with allow_comments=false, but got: {v:?}"
-        ),
+        Ok(v) => panic!("Comments should fail with allow_comments=false, but got: {v:?}"),
         Err(e) => eprintln!("Comments correctly failed: {e:?}"),
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/forgiving_features.rs:195:
     match parse_with_options("[1, 2,]", options.clone()) {
-            "Trailing comma should fail with allow_trailing_commas=false, but got: {v:?}"
+        Ok(v) => {
+            panic!("Trailing comma should fail with allow_trailing_commas=false, but got: {v:?}")
+        }
         Err(e) => eprintln!("Trailing comma correctly failed: {e:?}"),
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/forgiving_features.rs:202:
     match parse_with_options("{key: 1}", options.clone()) {
-            "Unquoted keys should fail with allow_unquoted_keys=false, but got: {v:?}"
+        Ok(v) => panic!("Unquoted keys should fail with allow_unquoted_keys=false, but got: {v:?}"),
         Err(e) => eprintln!("Unquoted keys correctly failed: {e:?}"),
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/forgiving_features.rs:209:
     match parse_with_options("'string'", options.clone()) {
-            "Single quotes should fail with allow_single_quotes=false, but got: {v:?}"
+        Ok(v) => panic!("Single quotes should fail with allow_single_quotes=false, but got: {v:?}"),
         Err(e) => eprintln!("Single quotes correctly failed: {e:?}"),
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/forgiving_features.rs:216:
     match parse_with_options("a: 1", options.clone()) {
-            "Implicit top-level should fail with implicit_top_level=false, but got: {v:?}"
+            panic!("Implicit top-level should fail with implicit_top_level=false, but got: {v:?}")
         Err(e) => eprintln!("Implicit top-level correctly failed: {e:?}"),
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/number_formats.rs:4:
 use vexy_json::{parse, Value};
 /// Tests for extended number format support including hex, octal, binary, and underscore separators.
-/// These formats are commonly used in configuration files 
+/// These formats are commonly used in configuration files
 #[test]
 fn test_underscore_separators() {
Diff in /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/string_handling.rs:191:
                 assert!(!s.is_empty(), "String should not be empty");
             Ok(other) => {
-                panic!(
-                    "Expected string or error for {description}, got: {other:?}"
+                panic!("Expected string or error for {description}, got: {other:?}");
             Err(_) => {
-                    "vexy_json errors on {description} - that's valid behavior"
+                println!("vexy_json errors on {description} - that's valid behavior");
❌ Check code formatting failed
[2025-07-12 20:48:02] Running fuzz tests (quick run)...
[2025-07-12 20:48:02] Running: Quick fuzz testing
error: failed to run `rustc` to learn about target-specific information

Caused by:
  process didn't exit successfully: `/Users/adam/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rustc - --crate-name ___ --print=file-names -Cpasses=sancov-module -Cllvm-args=-sanitizer-coverage-level=4 -Cllvm-args=-sanitizer-coverage-inline-8bit-counters -Cllvm-args=-sanitizer-coverage-pc-table -Cllvm-args=-sanitizer-coverage-trace-compares --cfg fuzzing -Cllvm-args=-simplifycfg-branch-fold-threshold=0 -Zsanitizer=address -Cdebug-assertions -Ccodegen-units=1 --target x86_64-apple-darwin --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print=sysroot --print=split-debuginfo --print=crate-name --print=cfg -Wwarnings` (exit status: 1)
  --- stderr
  error: the option `Z` is only accepted on the nightly compiler
  help: consider switching to a nightly toolchain: `rustup default nightly`
  note: selecting a toolchain with `+toolchain` arguments require a rustup proxy; see <https://rust-lang.github.io/rustup/concepts/index.html>
  note: for more information about Rust's stability policy, see <https://doc.rust-lang.org/book/appendix-07-nightly-rust.html#unstable-features>
  error: 1 nightly option were parsed
Error: failed to build fuzz script: ASAN_OPTIONS="detect_odr_violation=0" RUSTFLAGS=" -Cpasses=sancov-module -Cllvm-args=-sanitizer-coverage-level=4 -Cllvm-args=-sanitizer-coverage-inline-8bit-counters -Cllvm-args=-sanitizer-coverage-pc-table -Cllvm-args=-sanitizer-coverage-trace-compares --cfg fuzzing -Cllvm-args=-simplifycfg-branch-fold-threshold=0 -Zsanitizer=address -Cdebug-assertions -Ccodegen-units=1" "cargo" "build" "--manifest-path" "/Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/Cargo.toml" "--target" "x86_64-apple-darwin" "--release" "--config" "profile.release.debug=\"line-tables-only\"" "--bin" "comments"
Error: failed to build fuzz script: ASAN_OPTIONS="detect_odr_violation=0" RUSTFLAGS=" -Cpasses=sancov-module -Cllvm-args=-sanitizer-coverage-level=4 -Cllvm-args=-sanitizer-coverage-inline-8bit-counters -Cllvm-args=-sanitizer-coverage-pc-table -Cllvm-args=-sanitizer-coverage-trace-compares --cfg fuzzing -Cllvm-args=-simplifycfg-branch-fold-threshold=0 -Zsanitizer=address -Cdebug-assertions -Ccodegen-units=1" "cargo" "build" "--manifest-path" "/Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/Cargo.toml" "--target" "x86_64-apple-darwin" "--release" "--config" "profile.release.debug=\"line-tables-only\"" "--bin" "fuzz_target_1"
Error: failed to build fuzz script: ASAN_OPTIONS="detect_odr_violation=0" RUSTFLAGS=" -Cpasses=sancov-module -Cllvm-args=-sanitizer-coverage-level=4 -Cllvm-args=-sanitizer-coverage-inline-8bit-counters -Cllvm-args=-sanitizer-coverage-pc-table -Cllvm-args=-sanitizer-coverage-trace-compares --cfg fuzzing -Cllvm-args=-simplifycfg-branch-fold-threshold=0 -Zsanitizer=address -Cdebug-assertions -Ccodegen-units=1" "cargo" "build" "--manifest-path" "/Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/Cargo.toml" "--target" "x86_64-apple-darwin" "--release" "--config" "profile.release.debug=\"line-tables-only\"" "--bin" "json_structure"
✅ Quick fuzz testing completed
[2025-07-12 20:48:05] Running: Build all examples
   Compiling vexy-json-core v1.5.0 (/Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core)
   Compiling vexy-json v1.5.0 (/Users/adam/Developer/vcs/github.vexyart/vexy-json)
   Compiling vexy-json-serde v1.5.0 (/Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/serde)
    Finished `release` profile [optimized] target(s) in 3m 59s
✅ Build all examples completed
✅ All tests passed
[2025-07-12 20:52:05] Building Rust artifacts...
[2025-07-12 20:52:05] Running: Create build directory
✅ Create build directory completed
[2025-07-12 20:52:05] Running: Build release CLI binary
error: no bin target named `vexy-json` in default-run packages
help: available bin in `vexy-json-cli` package:
    vexy-json
❌ Build release CLI binary failed
[2025-07-12 20:52:07] Running: Build release library
    Finished `release` profile [optimized] target(s) in 1m 26s
✅ Build release library completed
[2025-07-12 20:53:34] Running: Generate documentation
    Blocking waiting for file lock on build directory
    Checking vexy-json-core v1.5.0 (/Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core)
    Checking vexy-json-serde v1.5.0 (/Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/serde)
 Documenting vexy-json v1.5.0 (/Users/adam/Developer/vcs/github.vexyart/vexy-json)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 34.85s
   Generated /Users/adam/Developer/vcs/github.vexyart/vexy-json/target/doc/vexy_json/index.html
✅ Generate documentation completed
✅ Rust artifacts built
[2025-07-12 20:54:10] Building WebAssembly module...
[2025-07-12 20:54:10] Running: Build WASM for web
[INFO]: 🎯  Checking for the Wasm target...
[INFO]: 🌀  Compiling to Wasm...
   Compiling vexy-json-wasm v1.5.0 (/Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/wasm)
    Building [=========================> ] 74/76: vexy-js...