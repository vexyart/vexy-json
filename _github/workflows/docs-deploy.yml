name: Deploy Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'src_docs/**'
      - 'docs-src/**'
      - 'mkdocs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job for MkDocs (new structure)
  build-mkdocs:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'src_docs/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install MkDocs
      run: |
        pip install mkdocs mkdocs-material mkdocs-minify-plugin
    
    - name: Build with MkDocs
      run: |
        cd src_docs
        mkdocs build --clean --strict
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: ./docs

  # Build job for existing Jekyll (fallback)
  build-jekyll:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.modified, 'src_docs/')"
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        working-directory: docs-src
    
    - name: Setup Pages
      id: pages
      uses: actions/configure-pages@v3
    
    - name: Build with Jekyll
      run: |
        cd docs-src
        bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
      env:
        JEKYLL_ENV: production
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: ./docs-src/_site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    runs-on: ubuntu-latest
    needs: [build-mkdocs]
    if: always() && (needs.build-mkdocs.result == 'success' || needs.build-jekyll.result == 'success')
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
    
    - name: Summary
      run: |
        echo "üöÄ Documentation deployed successfully!"
        echo "üìñ URL: ${{ steps.deployment.outputs.page_url }}"
        echo "‚è∞ Deployed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"