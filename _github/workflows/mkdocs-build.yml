name: Build MkDocs Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src_docs/**'
      - '_github/workflows/mkdocs-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src_docs/**'
      - '_github/workflows/mkdocs-build.yml'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements-docs.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mkdocs-minify-plugin
        # Install additional plugins if needed
        if [ -f requirements-docs.txt ]; then
          pip install -r requirements-docs.txt
        fi
    
    - name: Verify MkDocs configuration
      run: |
        cd src_docs
        mkdocs config
    
    - name: Build documentation
      run: |
        cd src_docs
        mkdocs build --clean --strict
        
        # Verify build output
        if [ ! -d "../docs" ]; then
          echo "Error: docs directory not created"
          exit 1
        fi
        
        if [ ! -f "../docs/index.html" ]; then
          echo "Error: index.html not generated"
          exit 1
        fi
        
        echo "✅ Documentation built successfully"
        echo "📁 Output directory: docs/"
        echo "📄 Generated files:"
        find ../docs -type f -name "*.html" | head -10
    
    - name: Add .nojekyll file
      run: |
        if [ ! -f docs/.nojekyll ]; then
          touch docs/.nojekyll
          echo "✅ Created .nojekyll file"
        else
          echo "✅ .nojekyll file already exists"
        fi
    
    - name: Commit and push changes
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add the built documentation
        git add docs/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "docs: update MkDocs documentation
          
          Auto-generated from src_docs/
          
          📝 Generated by: ${{ github.workflow }}
          🔗 Triggered by: ${{ github.sha }}
          ⏰ Build time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          git push
          echo "✅ Documentation committed and pushed"
        fi
    
    - name: Upload documentation artifact
      uses: actions/upload-artifact@v3
      with:
        name: mkdocs-documentation
        path: docs/
        retention-days: 30
    
    - name: Deploy to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        force_orphan: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: |
          Deploy MkDocs documentation
          
          Auto-generated from commit ${{ github.sha }}
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comment } = await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `📚 **Documentation Preview**
            
            The MkDocs documentation has been built successfully from this PR.
            
            🔧 **Build Details:**
            - **Commit:** \`${{ github.sha }}\`
            - **Workflow:** [\`${{ github.workflow }}\`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - **Build Time:** $(new Date().toISOString())
            
            📁 **Generated Files:** 
            - Documentation site built in \`docs/\` directory
            - Ready for deployment to GitHub Pages
            
            ✅ **Status:** Build completed successfully`
          });

  validate:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download documentation artifact
      uses: actions/download-artifact@v3
      with:
        name: mkdocs-documentation
        path: docs/
    
    - name: Validate HTML
      run: |
        # Install HTML5 validator
        pip install html5validator
        
        # Validate generated HTML files
        html5validator --root docs/ --also-check-css --format text
        
        echo "✅ HTML validation completed"
    
    - name: Check links
      run: |
        # Install link checker
        npm install -g markdown-link-check
        
        # Check internal links in generated documentation
        find docs/ -name "*.html" -exec grep -l "href=" {} \; | head -5 | while read file; do
          echo "Checking links in: $file"
          # Basic link validation could be added here
        done
        
        echo "✅ Link checking completed"
    
    - name: Performance audit
      run: |
        # Check file sizes
        echo "📊 Documentation file sizes:"
        find docs/ -type f -exec du -h {} + | sort -rh | head -10
        
        # Check for large files that might slow down loading
        large_files=$(find docs/ -type f -size +1M)
        if [ -n "$large_files" ]; then
          echo "⚠️  Large files detected (>1MB):"
          echo "$large_files"
        else
          echo "✅ No large files detected"
        fi