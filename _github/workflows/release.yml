name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 2.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update version numbers
        shell: bash
        run: |
          # Make scripts executable (skip on Windows)
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            chmod +x scripts/get-version.sh scripts/update-versions.sh
          fi
          # Update all version numbers to match git tag
          bash ./scripts/update-versions.sh

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: VEXY_JSON v${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: false
          body: |
            # VEXY_JSON v${{ steps.get_version.outputs.version }}

            ## Highlights

            - SIMD-accelerated parsing for 2-3x performance improvement
            - Memory Pool V3 with 80% reduction in allocations
            - Parallel processing for large files
            - Streaming capability for gigabyte-scale files
            - Plugin system for extensibility
            - ML-based error recovery with actionable suggestions

            ## Installation

            ### macOS
            ```bash
            # Using Homebrew
            brew install vexy_json

            # Or download the installer
            # Download vexy_json-${{ steps.get_version.outputs.version }}-macos.dmg below
            ```

            ### Linux
            ```bash
            # Download and extract
            curl -L https://github.com/vexyart/vexy-json/releases/download/v${{ steps.get_version.outputs.version }}/vexy_json-${{ steps.get_version.outputs.version }}-linux-x86_64.tar.gz | tar xz
            sudo mv vexy_json /usr/local/bin/
            ```

            ### Windows
            ```powershell
            # Download vexy_json-${{ steps.get_version.outputs.version }}-windows-x86_64.zip below
            # Extract and add to PATH
            ```

            ### Cargo
            ```bash
            cargo install vexy_json-cli
            ```

            ## What's Changed

            See [CHANGELOG.md](https://github.com/vexyart/vexy-json/blob/v${{ steps.get_version.outputs.version }}/CHANGELOG.md) for details.

            ## Assets

            - **macOS**: `vexy_json-${{ steps.get_version.outputs.version }}-macos.dmg` - Installer with PKG
            - **macOS**: `vexy_json-${{ steps.get_version.outputs.version }}-macos.zip` - Standalone binary
            - **Linux**: `vexy_json-${{ steps.get_version.outputs.version }}-linux-x86_64.tar.gz` - x86_64 binary
            - **Linux**: `vexy_json-${{ steps.get_version.outputs.version }}-linux-aarch64.tar.gz` - ARM64 binary
            - **Windows**: `vexy_json-${{ steps.get_version.outputs.version }}-windows-x86_64.zip` - x86_64 binary
            - **Source**: `vexy_json-${{ steps.get_version.outputs.version }}.tar.gz` - Source code

  build-binaries:
    name: Build ${{ matrix.target }}
    needs: create-release
    strategy:
      matrix:
        include:
          # macOS targets
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64

          # Linux targets
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-aarch64

          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Update version numbers
        shell: bash
        run: |
          # Make scripts executable (skip on Windows)
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            chmod +x scripts/get-version.sh scripts/update-versions.sh
          fi
          # Update all version numbers to match git tag
          bash ./scripts/update-versions.sh

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }} --bin vexy_json

      - name: Package Binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip vexy_json.exe
          else
            tar czf ../../../vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz vexy_json
          fi

      - name: Upload Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_name: vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}

  build-macos-installer:
    name: Build macOS Installer
    needs: create-release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update version numbers
        shell: bash
        run: |
          # Make scripts executable (skip on Windows)
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            chmod +x scripts/get-version.sh scripts/update-versions.sh
          fi
          # Update all version numbers to match git tag
          bash ./scripts/update-versions.sh

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin

      - uses: Swatinem/rust-cache@v2

      - name: Build Universal Binary
        run: |
          cargo build --release --target x86_64-apple-darwin --bin vexy_json
          cargo build --release --target aarch64-apple-darwin --bin vexy_json
          lipo -create -output vexy_json \
            target/x86_64-apple-darwin/release/vexy_json \
            target/aarch64-apple-darwin/release/vexy_json
          chmod +x vexy_json

      - name: Create macOS ZIP
        run: |
          zip -9 vexy_json-${{ needs.create-release.outputs.version }}-macos.zip vexy_json

      - name: Create macOS Installer
        run: |
          ./scripts/package-macos.sh ${{ needs.create-release.outputs.version }}

      - name: Upload macOS ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./vexy_json-${{ needs.create-release.outputs.version }}-macos.zip
          asset_name: vexy_json-${{ needs.create-release.outputs.version }}-macos.zip
          asset_content_type: application/zip

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/vexy_json-${{ needs.create-release.outputs.version }}.dmg
          asset_name: vexy_json-${{ needs.create-release.outputs.version }}-macos.dmg
          asset_content_type: application/x-apple-diskimage

  build-wasm:
    name: Build WASM
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update version numbers
        shell: bash
        run: |
          # Make scripts executable (skip on Windows)
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            chmod +x scripts/get-version.sh scripts/update-versions.sh
          fi
          # Update all version numbers to match git tag
          bash ./scripts/update-versions.sh

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build WASM
        run: ./scripts/build-wasm.sh

      - name: Package WASM
        run: |
          cd crates/wasm
          tar czf ../../vexy_json-wasm-${{ needs.create-release.outputs.version }}.tar.gz pkg/

      - name: Upload WASM Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./vexy_json-wasm-${{ needs.create-release.outputs.version }}.tar.gz
          asset_name: vexy_json-wasm-${{ needs.create-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  publish-crates:
    name: Publish to crates.io
    needs: [create-release, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update version numbers
        shell: bash
        run: |
          # Make scripts executable (skip on Windows)
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            chmod +x scripts/get-version.sh scripts/update-versions.sh
          fi
          # Update all version numbers to match git tag
          bash ./scripts/update-versions.sh

      - uses: dtolnay/rust-toolchain@stable

      - name: Publish crates
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Publish in dependency order
          cargo publish -p vexy_json-core
          sleep 30
          cargo publish -p vexy_json-cli
          sleep 30
          cargo publish -p vexy_json-wasm

  publish-npm:
    name: Publish to NPM
    needs: [create-release, build-wasm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update version numbers
        shell: bash
        run: |
          # Make scripts executable (skip on Windows)
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            chmod +x scripts/get-version.sh scripts/update-versions.sh
          fi
          # Update all version numbers to match git tag
          bash ./scripts/update-versions.sh

      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Build WASM
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          ./scripts/build-wasm.sh

      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd crates/wasm/pkg
          npm publish

  update-homebrew:
    name: Update Homebrew Formula
    needs: [create-release, build-macos-installer]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update Homebrew Formula
        env:
          HOMEBREW_GITHUB_TOKEN: ${{ secrets.HOMEBREW_GITHUB_TOKEN }}
        run: |
          # This would typically create a PR to homebrew-core
          echo "Homebrew formula update would go here"

  finalize-release:
    name: Finalize Release
    needs: [build-binaries, build-macos-installer, build-wasm, publish-crates]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Publish Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release edit v${{ needs.create-release.outputs.version }} --draft=false
