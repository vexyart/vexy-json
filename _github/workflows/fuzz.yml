# this_file: .github/workflows/fuzz.yml

name: Daily Fuzzing

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual trigger with custom parameters
    inputs:
      duration:
        description: 'Fuzzing duration in seconds (default: 3600)'
        required: false
        default: '3600'
      target:
        description: 'Specific fuzz target to run (leave empty for all)'
        required: false
        default: ''

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  fuzz:
    name: Fuzz ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: 
          - json_structure
          - strings
          - numbers
          - comments
          - unquoted_keys
          - unicode
          - repair
          - streaming
          # Note: fuzz_target_1 is a template, not included
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: crates/core -> target
      
      - name: Cache fuzz corpus
        uses: actions/cache@v4
        with:
          path: fuzz/corpus
          key: ${{ runner.os }}-fuzz-corpus-${{ matrix.target }}-${{ github.run_number }}
          restore-keys: |
            ${{ runner.os }}-fuzz-corpus-${{ matrix.target }}-
      
      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz
        
      - name: Run fuzzer (1 hour)
        run: |
          cd fuzz
          # Use input duration or default to 1 hour (3600 seconds)
          DURATION=${{ github.event.inputs.duration || '3600' }}
          TARGET=${{ github.event.inputs.target || matrix.target }}
          
          # Skip non-selected targets if specific target requested
          if [ -n "${{ github.event.inputs.target }}" ] && [ "$TARGET" != "${{ matrix.target }}" ]; then
            echo "Skipping ${{ matrix.target }} as specific target $TARGET was requested"
            exit 0
          fi
          
          # Run fuzzing
          echo "Fuzzing ${{ matrix.target }} for $DURATION seconds..."
          cargo +nightly fuzz run ${{ matrix.target }} -- -max_total_time=$DURATION -print_final_stats=1
        continue-on-error: true
      
      - name: Check for crashes
        id: check-crashes
        run: |
          cd fuzz
          if [ -d "artifacts/${{ matrix.target }}" ] && [ "$(ls -A artifacts/${{ matrix.target }})" ]; then
            echo "::error::Crashes found during fuzzing of ${{ matrix.target }}!"
            echo "has_crashes=true" >> $GITHUB_OUTPUT
            
            # Show crash details
            for crash in artifacts/${{ matrix.target }}/*; do
              echo "===== Crash: $(basename $crash) ====="
              hexdump -C "$crash" | head -20
              echo "====="
            done
          else
            echo "No crashes found for ${{ matrix.target }}"
            echo "has_crashes=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload crashes
        if: steps.check-crashes.outputs.has_crashes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: fuzz-crashes-${{ matrix.target }}-${{ github.run_number }}
          path: fuzz/artifacts/${{ matrix.target }}/
          retention-days: 30
          
      - name: Upload corpus
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz-corpus-${{ matrix.target }}-${{ github.run_number }}
          path: fuzz/corpus/${{ matrix.target }}/
          retention-days: 7

  summary:
    name: Fuzzing Summary
    runs-on: ubuntu-latest
    needs: fuzz
    if: always()
    
    steps:
      - name: Create summary
        run: |
          echo "# Daily Fuzzing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Duration:** ${{ github.event.inputs.duration || '3600' }} seconds" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job statuses
          if [ "${{ needs.fuzz.result }}" == "success" ]; then
            echo "✅ **Status:** All fuzzing targets completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Some fuzzing targets failed or found crashes" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Targets Tested" >> $GITHUB_STEP_SUMMARY
          echo "- json_structure" >> $GITHUB_STEP_SUMMARY
          echo "- strings" >> $GITHUB_STEP_SUMMARY
          echo "- numbers" >> $GITHUB_STEP_SUMMARY
          echo "- comments" >> $GITHUB_STEP_SUMMARY
          echo "- unquoted_keys" >> $GITHUB_STEP_SUMMARY
          echo "- unicode" >> $GITHUB_STEP_SUMMARY
          echo "- repair" >> $GITHUB_STEP_SUMMARY
          echo "- streaming" >> $GITHUB_STEP_SUMMARY