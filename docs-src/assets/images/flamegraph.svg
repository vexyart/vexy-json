<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="756"><g><title>0x7ff8169164d4 (1 samples, 0.13%)</title><rect x="0.0000%" y="405" width="0.1323%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>0x7ff816933433 (1 samples, 0.13%)</title><rect x="0.0000%" y="389" width="0.1323%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>0x7ff816933eb9 (1 samples, 0.13%)</title><rect x="0.0000%" y="373" width="0.1323%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>0x7ff81693195c (1 samples, 0.13%)</title><rect x="0.0000%" y="357" width="0.1323%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>0x7ff816931a12 (1 samples, 0.13%)</title><rect x="0.0000%" y="341" width="0.1323%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>dyld3::kdebug_trace_dyld_image(unsigned int, char const*, unsigned char const (*) [16], fsobj_id, fsid, void const*, unsigned int) (1 samples, 0.13%)</title><rect x="0.1323%" y="373" width="0.1323%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.3823%" y="383.50"></text></g><g><title>__kdebug_trace64 (1 samples, 0.13%)</title><rect x="0.1323%" y="357" width="0.1323%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.3823%" y="367.50"></text></g><g><title>__malloc_init (1 samples, 0.13%)</title><rect x="0.2646%" y="213" width="0.1323%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.5146%" y="223.50"></text></g><g><title>create_scalable_szone (1 samples, 0.13%)</title><rect x="0.2646%" y="197" width="0.1323%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.5146%" y="207.50"></text></g><g><title>rack_init (1 samples, 0.13%)</title><rect x="0.2646%" y="181" width="0.1323%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.5146%" y="191.50"></text></g><g><title>mvm_allocate_pages_plat (1 samples, 0.13%)</title><rect x="0.2646%" y="165" width="0.1323%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.5146%" y="175.50"></text></g><g><title>__mprotect (1 samples, 0.13%)</title><rect x="0.2646%" y="149" width="0.1323%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.5146%" y="159.50"></text></g><g><title>_libxpc_initializer (1 samples, 0.13%)</title><rect x="0.3968%" y="213" width="0.1323%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="0.6468%" y="223.50"></text></g><g><title>_xpc_collect_images (1 samples, 0.13%)</title><rect x="0.3968%" y="197" width="0.1323%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.6468%" y="207.50"></text></g><g><title>xpc_bundle_copy_services (1 samples, 0.13%)</title><rect x="0.3968%" y="181" width="0.1323%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.6468%" y="191.50"></text></g><g><title>_xpc_bundle_resolve (1 samples, 0.13%)</title><rect x="0.3968%" y="165" width="0.1323%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="0.6468%" y="175.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.13%)</title><rect x="0.3968%" y="149" width="0.1323%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="0.6468%" y="159.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.13%)</title><rect x="0.3968%" y="133" width="0.1323%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="0.6468%" y="143.50"></text></g><g><title>___xpc_bundle_resolve_block_invoke (1 samples, 0.13%)</title><rect x="0.3968%" y="117" width="0.1323%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="0.6468%" y="127.50"></text></g><g><title>_xpc_bundle_resolve_sync (1 samples, 0.13%)</title><rect x="0.3968%" y="101" width="0.1323%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="0.6468%" y="111.50"></text></g><g><title>_xpc_asprintf (1 samples, 0.13%)</title><rect x="0.3968%" y="85" width="0.1323%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="0.6468%" y="95.50"></text></g><g><title>_vasprintf (1 samples, 0.13%)</title><rect x="0.3968%" y="69" width="0.1323%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="0.6468%" y="79.50"></text></g><g><title>__vfprintf (1 samples, 0.13%)</title><rect x="0.3968%" y="53" width="0.1323%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="0.6468%" y="63.50"></text></g><g><title>localeconv_l (1 samples, 0.13%)</title><rect x="0.3968%" y="37" width="0.1323%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="0.6468%" y="47.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (3 samples, 0.40%)</title><rect x="0.2646%" y="373" width="0.3968%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="3"/><text x="0.5146%" y="383.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (3 samples, 0.40%)</title><rect x="0.2646%" y="357" width="0.3968%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="3"/><text x="0.5146%" y="367.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (3 samples, 0.40%)</title><rect x="0.2646%" y="341" width="0.3968%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="3"/><text x="0.5146%" y="351.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (3 samples, 0.40%)</title><rect x="0.2646%" y="325" width="0.3968%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="3"/><text x="0.5146%" y="335.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (3 samples, 0.40%)</title><rect x="0.2646%" y="309" width="0.3968%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="3"/><text x="0.5146%" y="319.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (3 samples, 0.40%)</title><rect x="0.2646%" y="293" width="0.3968%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="3"/><text x="0.5146%" y="303.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (3 samples, 0.40%)</title><rect x="0.2646%" y="277" width="0.3968%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="3"/><text x="0.5146%" y="287.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (3 samples, 0.40%)</title><rect x="0.2646%" y="261" width="0.3968%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="3"/><text x="0.5146%" y="271.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (3 samples, 0.40%)</title><rect x="0.2646%" y="245" width="0.3968%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="3"/><text x="0.5146%" y="255.50"></text></g><g><title>libSystem_initializer (3 samples, 0.40%)</title><rect x="0.2646%" y="229" width="0.3968%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="3"/><text x="0.5146%" y="239.50"></text></g><g><title>libdispatch_init (1 samples, 0.13%)</title><rect x="0.5291%" y="213" width="0.1323%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="1"/><text x="0.7791%" y="223.50"></text></g><g><title>_os_object_init (1 samples, 0.13%)</title><rect x="0.5291%" y="197" width="0.1323%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="1"/><text x="0.7791%" y="207.50"></text></g><g><title>_objc_init (1 samples, 0.13%)</title><rect x="0.5291%" y="181" width="0.1323%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="1"/><text x="0.7791%" y="191.50"></text></g><g><title>objc::DenseMap&lt;DisguisedPtr&lt;objc_class&gt;, objc::category_list, objc::DenseMapValueInfo&lt;objc::category_list&gt;, objc::DenseMapInfo&lt;DisguisedPtr&lt;objc_class&gt;&gt;, objc::detail::DenseMapPair&lt;DisguisedPtr&lt;objc_class&gt;, objc::category_list&gt;&gt;::init(unsigned int) (1 samples, 0.13%)</title><rect x="0.5291%" y="165" width="0.1323%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="1"/><text x="0.7791%" y="175.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="0.5291%" y="149" width="0.1323%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1"/><text x="0.7791%" y="159.50"></text></g><g><title>small_malloc_should_clear (1 samples, 0.13%)</title><rect x="0.5291%" y="133" width="0.1323%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1"/><text x="0.7791%" y="143.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (1 samples, 0.13%)</title><rect x="0.6614%" y="373" width="0.1323%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="1"/><text x="0.9114%" y="383.50"></text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="357" width="0.1323%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="1"/><text x="0.9114%" y="367.50"></text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="341" width="0.1323%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1"/><text x="0.9114%" y="351.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="325" width="0.1323%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1"/><text x="0.9114%" y="335.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="309" width="0.1323%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1"/><text x="0.9114%" y="319.50"></text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="293" width="0.1323%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1"/><text x="0.9114%" y="303.50"></text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="277" width="0.1323%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="1"/><text x="0.9114%" y="287.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="261" width="0.1323%" height="15" fill="rgb(250,191,14)" fg:x="5" fg:w="1"/><text x="0.9114%" y="271.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="245" width="0.1323%" height="15" fill="rgb(239,60,40)" fg:x="5" fg:w="1"/><text x="0.9114%" y="255.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 0.13%)</title><rect x="0.6614%" y="229" width="0.1323%" height="15" fill="rgb(206,27,48)" fg:x="5" fg:w="1"/><text x="0.9114%" y="239.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (6 samples, 0.79%)</title><rect x="0.1323%" y="405" width="0.7937%" height="15" fill="rgb(225,35,8)" fg:x="1" fg:w="6"/><text x="0.3823%" y="415.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (6 samples, 0.79%)</title><rect x="0.1323%" y="389" width="0.7937%" height="15" fill="rgb(250,213,24)" fg:x="1" fg:w="6"/><text x="0.3823%" y="399.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="373" width="0.1323%" height="15" fill="rgb(247,123,22)" fg:x="6" fg:w="1"/><text x="1.0437%" y="383.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="357" width="0.1323%" height="15" fill="rgb(231,138,38)" fg:x="6" fg:w="1"/><text x="1.0437%" y="367.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="341" width="0.1323%" height="15" fill="rgb(231,145,46)" fg:x="6" fg:w="1"/><text x="1.0437%" y="351.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="325" width="0.1323%" height="15" fill="rgb(251,118,11)" fg:x="6" fg:w="1"/><text x="1.0437%" y="335.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="309" width="0.1323%" height="15" fill="rgb(217,147,25)" fg:x="6" fg:w="1"/><text x="1.0437%" y="319.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="293" width="0.1323%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="1"/><text x="1.0437%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="277" width="0.1323%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="1"/><text x="1.0437%" y="287.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="261" width="0.1323%" height="15" fill="rgb(227,1,9)" fg:x="6" fg:w="1"/><text x="1.0437%" y="271.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="245" width="0.1323%" height="15" fill="rgb(248,47,43)" fg:x="6" fg:w="1"/><text x="1.0437%" y="255.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="229" width="0.1323%" height="15" fill="rgb(221,10,30)" fg:x="6" fg:w="1"/><text x="1.0437%" y="239.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="213" width="0.1323%" height="15" fill="rgb(210,229,1)" fg:x="6" fg:w="1"/><text x="1.0437%" y="223.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="197" width="0.1323%" height="15" fill="rgb(222,148,37)" fg:x="6" fg:w="1"/><text x="1.0437%" y="207.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="181" width="0.1323%" height="15" fill="rgb(234,67,33)" fg:x="6" fg:w="1"/><text x="1.0437%" y="191.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="165" width="0.1323%" height="15" fill="rgb(247,98,35)" fg:x="6" fg:w="1"/><text x="1.0437%" y="175.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="149" width="0.1323%" height="15" fill="rgb(247,138,52)" fg:x="6" fg:w="1"/><text x="1.0437%" y="159.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="133" width="0.1323%" height="15" fill="rgb(213,79,30)" fg:x="6" fg:w="1"/><text x="1.0437%" y="143.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="117" width="0.1323%" height="15" fill="rgb(246,177,23)" fg:x="6" fg:w="1"/><text x="1.0437%" y="127.50"></text></g><g><title>dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&amp;, unsigned int, mach_o::LinkedDylibAttributes*) const (1 samples, 0.13%)</title><rect x="0.7937%" y="101" width="0.1323%" height="15" fill="rgb(230,62,27)" fg:x="6" fg:w="1"/><text x="1.0437%" y="111.50"></text></g><g><title>__fcntl (1 samples, 0.13%)</title><rect x="0.9259%" y="373" width="0.1323%" height="15" fill="rgb(216,154,8)" fg:x="7" fg:w="1"/><text x="1.1759%" y="383.50"></text></g><g><title>_free (1 samples, 0.13%)</title><rect x="1.0582%" y="325" width="0.1323%" height="15" fill="rgb(244,35,45)" fg:x="8" fg:w="1"/><text x="1.3082%" y="335.50"></text></g><g><title>_szone_free (2 samples, 0.26%)</title><rect x="1.3228%" y="309" width="0.2646%" height="15" fill="rgb(251,115,12)" fg:x="10" fg:w="2"/><text x="1.5728%" y="319.50"></text></g><g><title>_free (1 samples, 0.13%)</title><rect x="2.1164%" y="293" width="0.1323%" height="15" fill="rgb(240,54,50)" fg:x="16" fg:w="1"/><text x="2.3664%" y="303.50"></text></g><g><title>_szone_free (4 samples, 0.53%)</title><rect x="2.2487%" y="293" width="0.5291%" height="15" fill="rgb(233,84,52)" fg:x="17" fg:w="4"/><text x="2.4987%" y="303.50"></text></g><g><title>_free (3 samples, 0.40%)</title><rect x="3.5714%" y="277" width="0.3968%" height="15" fill="rgb(207,117,47)" fg:x="27" fg:w="3"/><text x="3.8214%" y="287.50"></text></g><g><title>_szone_free (1 samples, 0.13%)</title><rect x="3.9683%" y="277" width="0.1323%" height="15" fill="rgb(249,43,39)" fg:x="30" fg:w="1"/><text x="4.2183%" y="287.50"></text></g><g><title>DYLD-STUB$$_platform_memset (3 samples, 0.40%)</title><rect x="4.7619%" y="261" width="0.3968%" height="15" fill="rgb(209,38,44)" fg:x="36" fg:w="3"/><text x="5.0119%" y="271.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="5.1587%" y="261" width="0.1323%" height="15" fill="rgb(236,212,23)" fg:x="39" fg:w="1"/><text x="5.4087%" y="271.50"></text></g><g><title>_szone_free (5 samples, 0.66%)</title><rect x="5.2910%" y="261" width="0.6614%" height="15" fill="rgb(242,79,21)" fg:x="40" fg:w="5"/><text x="5.5410%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (1 samples, 0.13%)</title><rect x="5.9524%" y="261" width="0.1323%" height="15" fill="rgb(211,96,35)" fg:x="45" fg:w="1"/><text x="6.2024%" y="271.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="8.4656%" y="245" width="0.1323%" height="15" fill="rgb(253,215,40)" fg:x="64" fg:w="1"/><text x="8.7156%" y="255.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="8.5979%" y="245" width="0.1323%" height="15" fill="rgb(211,81,21)" fg:x="65" fg:w="1"/><text x="8.8479%" y="255.50"></text></g><g><title>get_tiny_previous_free_msize (3 samples, 0.40%)</title><rect x="8.7302%" y="245" width="0.3968%" height="15" fill="rgb(208,190,38)" fg:x="66" fg:w="3"/><text x="8.9802%" y="255.50"></text></g><g><title>tiny_free_list_add_ptr (5 samples, 0.66%)</title><rect x="11.1111%" y="229" width="0.6614%" height="15" fill="rgb(235,213,38)" fg:x="84" fg:w="5"/><text x="11.3611%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (61 samples, 8.07%)</title><rect x="4.1005%" y="277" width="8.0688%" height="15" fill="rgb(237,122,38)" fg:x="31" fg:w="61"/><text x="4.3505%" y="287.50">core::ptr::..</text></g><g><title>free_tiny (46 samples, 6.08%)</title><rect x="6.0847%" y="261" width="6.0847%" height="15" fill="rgb(244,218,35)" fg:x="46" fg:w="46"/><text x="6.3347%" y="271.50">free_tiny</text></g><g><title>tiny_free_no_lock (23 samples, 3.04%)</title><rect x="9.1270%" y="245" width="3.0423%" height="15" fill="rgb(240,68,47)" fg:x="69" fg:w="23"/><text x="9.3770%" y="255.50">tin..</text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.40%)</title><rect x="11.7725%" y="229" width="0.3968%" height="15" fill="rgb(210,16,53)" fg:x="89" fg:w="3"/><text x="12.0225%" y="239.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="14.2857%" y="261" width="0.1323%" height="15" fill="rgb(235,124,12)" fg:x="108" fg:w="1"/><text x="14.5357%" y="271.50"></text></g><g><title>tiny_free_list_add_ptr (10 samples, 1.32%)</title><rect x="16.9312%" y="245" width="1.3228%" height="15" fill="rgb(224,169,11)" fg:x="128" fg:w="10"/><text x="17.1812%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (123 samples, 16.27%)</title><rect x="2.7778%" y="293" width="16.2698%" height="15" fill="rgb(250,166,2)" fg:x="21" fg:w="123"/><text x="3.0278%" y="303.50">core::ptr::drop_in_place&lt;..</text></g><g><title>free_tiny (52 samples, 6.88%)</title><rect x="12.1693%" y="277" width="6.8783%" height="15" fill="rgb(242,216,29)" fg:x="92" fg:w="52"/><text x="12.4193%" y="287.50">free_tiny</text></g><g><title>tiny_free_no_lock (35 samples, 4.63%)</title><rect x="14.4180%" y="261" width="4.6296%" height="15" fill="rgb(230,116,27)" fg:x="109" fg:w="35"/><text x="14.6680%" y="271.50">tiny_..</text></g><g><title>tiny_free_list_remove_ptr (6 samples, 0.79%)</title><rect x="18.2540%" y="245" width="0.7937%" height="15" fill="rgb(228,99,48)" fg:x="138" fg:w="6"/><text x="18.5040%" y="255.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="20.2381%" y="277" width="0.1323%" height="15" fill="rgb(253,11,6)" fg:x="153" fg:w="1"/><text x="20.4881%" y="287.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.13%)</title><rect x="20.3704%" y="277" width="0.1323%" height="15" fill="rgb(247,143,39)" fg:x="154" fg:w="1"/><text x="20.6204%" y="287.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.53%)</title><rect x="22.0899%" y="261" width="0.5291%" height="15" fill="rgb(236,97,10)" fg:x="167" fg:w="4"/><text x="22.3399%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (168 samples, 22.22%)</title><rect x="1.5873%" y="309" width="22.2222%" height="15" fill="rgb(233,208,19)" fg:x="12" fg:w="168"/><text x="1.8373%" y="319.50">core::ptr::drop_in_place&lt;vexy_json_core..</text></g><g><title>free_tiny (36 samples, 4.76%)</title><rect x="19.0476%" y="293" width="4.7619%" height="15" fill="rgb(216,164,2)" fg:x="144" fg:w="36"/><text x="19.2976%" y="303.50">free_t..</text></g><g><title>tiny_free_no_lock (25 samples, 3.31%)</title><rect x="20.5026%" y="277" width="3.3069%" height="15" fill="rgb(220,129,5)" fg:x="155" fg:w="25"/><text x="20.7526%" y="287.50">tin..</text></g><g><title>tiny_free_list_remove_ptr (9 samples, 1.19%)</title><rect x="22.6190%" y="261" width="1.1905%" height="15" fill="rgb(242,17,10)" fg:x="171" fg:w="9"/><text x="22.8690%" y="271.50"></text></g><g><title>free (2 samples, 0.26%)</title><rect x="23.8095%" y="309" width="0.2646%" height="15" fill="rgb(242,107,0)" fg:x="180" fg:w="2"/><text x="24.0595%" y="319.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.26%)</title><rect x="25.1323%" y="277" width="0.2646%" height="15" fill="rgb(251,28,31)" fg:x="190" fg:w="2"/><text x="25.3823%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (186 samples, 24.60%)</title><rect x="1.1905%" y="325" width="24.6032%" height="15" fill="rgb(233,223,10)" fg:x="9" fg:w="186"/><text x="1.4405%" y="335.50">core::ptr::drop_in_place&lt;vexy_json_core::as..</text></g><g><title>free_tiny (13 samples, 1.72%)</title><rect x="24.0741%" y="309" width="1.7196%" height="15" fill="rgb(215,21,27)" fg:x="182" fg:w="13"/><text x="24.3241%" y="319.50"></text></g><g><title>tiny_free_no_lock (9 samples, 1.19%)</title><rect x="24.6032%" y="293" width="1.1905%" height="15" fill="rgb(232,23,21)" fg:x="186" fg:w="9"/><text x="24.8532%" y="303.50"></text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.40%)</title><rect x="25.3968%" y="277" width="0.3968%" height="15" fill="rgb(244,5,23)" fg:x="192" fg:w="3"/><text x="25.6468%" y="287.50"></text></g><g><title>free_tiny (1 samples, 0.13%)</title><rect x="25.7937%" y="325" width="0.1323%" height="15" fill="rgb(226,81,46)" fg:x="195" fg:w="1"/><text x="26.0437%" y="335.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.13%)</title><rect x="27.2487%" y="261" width="0.1323%" height="15" fill="rgb(247,70,30)" fg:x="206" fg:w="1"/><text x="27.4987%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="27.9101%" y="245" width="0.3968%" height="15" fill="rgb(212,68,19)" fg:x="211" fg:w="3"/><text x="28.1601%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.13%)</title><rect x="28.1746%" y="229" width="0.1323%" height="15" fill="rgb(240,187,13)" fg:x="213" fg:w="1"/><text x="28.4246%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="28.7037%" y="229" width="0.3968%" height="15" fill="rgb(223,113,26)" fg:x="217" fg:w="3"/><text x="28.9537%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.26%)</title><rect x="28.8360%" y="213" width="0.2646%" height="15" fill="rgb(206,192,2)" fg:x="218" fg:w="2"/><text x="29.0860%" y="223.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="29.2328%" y="213" width="0.1323%" height="15" fill="rgb(241,108,4)" fg:x="221" fg:w="1"/><text x="29.4828%" y="223.50"></text></g><g><title>free_tiny (6 samples, 0.79%)</title><rect x="29.1005%" y="229" width="0.7937%" height="15" fill="rgb(247,173,49)" fg:x="220" fg:w="6"/><text x="29.3505%" y="239.50"></text></g><g><title>tiny_free_no_lock (4 samples, 0.53%)</title><rect x="29.3651%" y="213" width="0.5291%" height="15" fill="rgb(224,114,35)" fg:x="222" fg:w="4"/><text x="29.6151%" y="223.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.13%)</title><rect x="29.7619%" y="197" width="0.1323%" height="15" fill="rgb(245,159,27)" fg:x="225" fg:w="1"/><text x="30.0119%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (22 samples, 2.91%)</title><rect x="27.3810%" y="261" width="2.9101%" height="15" fill="rgb(245,172,44)" fg:x="207" fg:w="22"/><text x="27.6310%" y="271.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 1.98%)</title><rect x="28.3069%" y="245" width="1.9841%" height="15" fill="rgb(236,23,11)" fg:x="214" fg:w="15"/><text x="28.5569%" y="255.50">h..</text></g><g><title>szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="29.8942%" y="229" width="0.3968%" height="15" fill="rgb(205,117,38)" fg:x="226" fg:w="3"/><text x="30.1442%" y="239.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="29.8942%" y="213" width="0.3968%" height="15" fill="rgb(237,72,25)" fg:x="226" fg:w="3"/><text x="30.1442%" y="223.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="30.1587%" y="197" width="0.1323%" height="15" fill="rgb(244,70,9)" fg:x="228" fg:w="1"/><text x="30.4087%" y="207.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="30.5556%" y="245" width="0.1323%" height="15" fill="rgb(217,125,39)" fg:x="231" fg:w="1"/><text x="30.8056%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.26%)</title><rect x="30.6878%" y="245" width="0.2646%" height="15" fill="rgb(235,36,10)" fg:x="232" fg:w="2"/><text x="30.9378%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (14 samples, 1.85%)</title><rect x="30.2910%" y="261" width="1.8519%" height="15" fill="rgb(251,123,47)" fg:x="229" fg:w="14"/><text x="30.5410%" y="271.50">z..</text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (9 samples, 1.19%)</title><rect x="30.9524%" y="245" width="1.1905%" height="15" fill="rgb(221,13,13)" fg:x="234" fg:w="9"/><text x="31.2024%" y="255.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.13%)</title><rect x="32.6720%" y="245" width="0.1323%" height="15" fill="rgb(238,131,9)" fg:x="247" fg:w="1"/><text x="32.9220%" y="255.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.13%)</title><rect x="33.4656%" y="229" width="0.1323%" height="15" fill="rgb(211,50,8)" fg:x="253" fg:w="1"/><text x="33.7156%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.13%)</title><rect x="33.5979%" y="229" width="0.1323%" height="15" fill="rgb(245,182,24)" fg:x="254" fg:w="1"/><text x="33.8479%" y="239.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (3 samples, 0.40%)</title><rect x="33.9947%" y="213" width="0.3968%" height="15" fill="rgb(242,14,37)" fg:x="257" fg:w="3"/><text x="34.2447%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.53%)</title><rect x="34.3915%" y="213" width="0.5291%" height="15" fill="rgb(246,228,12)" fg:x="260" fg:w="4"/><text x="34.6415%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.26%)</title><rect x="34.6561%" y="197" width="0.2646%" height="15" fill="rgb(213,55,15)" fg:x="262" fg:w="2"/><text x="34.9061%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="34.9206%" y="197" width="0.1323%" height="15" fill="rgb(209,9,3)" fg:x="264" fg:w="1"/><text x="35.1706%" y="207.50"></text></g><g><title>free_tiny (3 samples, 0.40%)</title><rect x="34.9206%" y="213" width="0.3968%" height="15" fill="rgb(230,59,30)" fg:x="264" fg:w="3"/><text x="35.1706%" y="223.50"></text></g><g><title>tiny_free_no_lock (2 samples, 0.26%)</title><rect x="35.0529%" y="197" width="0.2646%" height="15" fill="rgb(209,121,21)" fg:x="265" fg:w="2"/><text x="35.3029%" y="207.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.26%)</title><rect x="35.0529%" y="181" width="0.2646%" height="15" fill="rgb(220,109,13)" fg:x="265" fg:w="2"/><text x="35.3029%" y="191.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="35.3175%" y="197" width="0.1323%" height="15" fill="rgb(232,18,1)" fg:x="267" fg:w="1"/><text x="35.5675%" y="207.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.13%)</title><rect x="35.7143%" y="181" width="0.1323%" height="15" fill="rgb(215,41,42)" fg:x="270" fg:w="1"/><text x="35.9643%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 3.17%)</title><rect x="32.8042%" y="245" width="3.1746%" height="15" fill="rgb(224,123,36)" fg:x="248" fg:w="24"/><text x="33.0542%" y="255.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 2.25%)</title><rect x="33.7302%" y="229" width="2.2487%" height="15" fill="rgb(240,125,3)" fg:x="255" fg:w="17"/><text x="33.9802%" y="239.50">h..</text></g><g><title>szone_malloc_should_clear (5 samples, 0.66%)</title><rect x="35.3175%" y="213" width="0.6614%" height="15" fill="rgb(205,98,50)" fg:x="267" fg:w="5"/><text x="35.5675%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (4 samples, 0.53%)</title><rect x="35.4497%" y="197" width="0.5291%" height="15" fill="rgb(205,185,37)" fg:x="268" fg:w="4"/><text x="35.6997%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="35.8466%" y="181" width="0.1323%" height="15" fill="rgb(238,207,15)" fg:x="271" fg:w="1"/><text x="36.0966%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (4 samples, 0.53%)</title><rect x="36.7725%" y="229" width="0.5291%" height="15" fill="rgb(213,199,42)" fg:x="278" fg:w="4"/><text x="37.0225%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="37.3016%" y="229" width="0.1323%" height="15" fill="rgb(235,201,11)" fg:x="282" fg:w="1"/><text x="37.5516%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (14 samples, 1.85%)</title><rect x="35.9788%" y="245" width="1.8519%" height="15" fill="rgb(207,46,11)" fg:x="272" fg:w="14"/><text x="36.2288%" y="255.50">z..</text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (3 samples, 0.40%)</title><rect x="37.4339%" y="229" width="0.3968%" height="15" fill="rgb(241,35,35)" fg:x="283" fg:w="3"/><text x="37.6839%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.13%)</title><rect x="38.3598%" y="229" width="0.1323%" height="15" fill="rgb(243,32,47)" fg:x="290" fg:w="1"/><text x="38.6098%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.13%)</title><rect x="38.3598%" y="213" width="0.1323%" height="15" fill="rgb(247,202,23)" fg:x="290" fg:w="1"/><text x="38.6098%" y="223.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="38.3598%" y="197" width="0.1323%" height="15" fill="rgb(219,102,11)" fg:x="290" fg:w="1"/><text x="38.6098%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.13%)</title><rect x="38.3598%" y="181" width="0.1323%" height="15" fill="rgb(243,110,44)" fg:x="290" fg:w="1"/><text x="38.6098%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="38.3598%" y="165" width="0.1323%" height="15" fill="rgb(222,74,54)" fg:x="290" fg:w="1"/><text x="38.6098%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="38.6243%" y="213" width="0.1323%" height="15" fill="rgb(216,99,12)" fg:x="292" fg:w="1"/><text x="38.8743%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="38.7566%" y="213" width="0.1323%" height="15" fill="rgb(226,22,26)" fg:x="293" fg:w="1"/><text x="39.0066%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.53%)</title><rect x="38.4921%" y="229" width="0.5291%" height="15" fill="rgb(217,163,10)" fg:x="291" fg:w="4"/><text x="38.7421%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="38.8889%" y="213" width="0.1323%" height="15" fill="rgb(213,25,53)" fg:x="294" fg:w="1"/><text x="39.1389%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (17 samples, 2.25%)</title><rect x="37.8307%" y="245" width="2.2487%" height="15" fill="rgb(252,105,26)" fg:x="286" fg:w="17"/><text x="38.0807%" y="255.50">z..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (8 samples, 1.06%)</title><rect x="39.0212%" y="229" width="1.0582%" height="15" fill="rgb(220,39,43)" fg:x="295" fg:w="8"/><text x="39.2712%" y="239.50"></text></g><g><title>vexy_json_core::parser::unescape_string (8 samples, 1.06%)</title><rect x="39.0212%" y="213" width="1.0582%" height="15" fill="rgb(229,68,48)" fg:x="295" fg:w="8"/><text x="39.2712%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.79%)</title><rect x="39.2857%" y="197" width="0.7937%" height="15" fill="rgb(252,8,32)" fg:x="297" fg:w="6"/><text x="39.5357%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.79%)</title><rect x="39.2857%" y="181" width="0.7937%" height="15" fill="rgb(223,20,43)" fg:x="297" fg:w="6"/><text x="39.5357%" y="191.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.79%)</title><rect x="39.2857%" y="165" width="0.7937%" height="15" fill="rgb(229,81,49)" fg:x="297" fg:w="6"/><text x="39.5357%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.66%)</title><rect x="39.4180%" y="149" width="0.6614%" height="15" fill="rgb(236,28,36)" fg:x="298" fg:w="5"/><text x="39.6680%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.53%)</title><rect x="39.5503%" y="133" width="0.5291%" height="15" fill="rgb(249,185,26)" fg:x="299" fg:w="4"/><text x="39.8003%" y="143.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="39.9471%" y="117" width="0.1323%" height="15" fill="rgb(249,174,33)" fg:x="302" fg:w="1"/><text x="40.1971%" y="127.50"></text></g><g><title>szone_good_size (1 samples, 0.13%)</title><rect x="41.2698%" y="149" width="0.1323%" height="15" fill="rgb(233,201,37)" fg:x="312" fg:w="1"/><text x="41.5198%" y="159.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="41.4021%" y="133" width="0.1323%" height="15" fill="rgb(221,78,26)" fg:x="313" fg:w="1"/><text x="41.6521%" y="143.50"></text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="41.5344%" y="133" width="0.1323%" height="15" fill="rgb(250,127,30)" fg:x="314" fg:w="1"/><text x="41.7844%" y="143.50"></text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="41.5344%" y="117" width="0.1323%" height="15" fill="rgb(230,49,44)" fg:x="314" fg:w="1"/><text x="41.7844%" y="127.50"></text></g><g><title>_malloc_zone_realloc (5 samples, 0.66%)</title><rect x="41.2698%" y="165" width="0.6614%" height="15" fill="rgb(229,67,23)" fg:x="312" fg:w="5"/><text x="41.5198%" y="175.50"></text></g><g><title>szone_realloc (4 samples, 0.53%)</title><rect x="41.4021%" y="149" width="0.5291%" height="15" fill="rgb(249,83,47)" fg:x="313" fg:w="4"/><text x="41.6521%" y="159.50"></text></g><g><title>tiny_try_realloc_in_place (2 samples, 0.26%)</title><rect x="41.6667%" y="133" width="0.2646%" height="15" fill="rgb(215,43,3)" fg:x="315" fg:w="2"/><text x="41.9167%" y="143.50"></text></g><g><title>_realloc (10 samples, 1.32%)</title><rect x="41.0053%" y="181" width="1.3228%" height="15" fill="rgb(238,154,13)" fg:x="310" fg:w="10"/><text x="41.2553%" y="191.50"></text></g><g><title>szone_size (3 samples, 0.40%)</title><rect x="41.9312%" y="165" width="0.3968%" height="15" fill="rgb(219,56,2)" fg:x="317" fg:w="3"/><text x="42.1812%" y="175.50"></text></g><g><title>tiny_size (3 samples, 0.40%)</title><rect x="41.9312%" y="149" width="0.3968%" height="15" fill="rgb(233,0,4)" fg:x="317" fg:w="3"/><text x="42.1812%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (25 samples, 3.31%)</title><rect x="40.0794%" y="245" width="3.3069%" height="15" fill="rgb(235,30,7)" fg:x="303" fg:w="25"/><text x="40.3294%" y="255.50">zzs..</text></g><g><title>vexy_json_core::parser::unescape_string (24 samples, 3.17%)</title><rect x="40.2116%" y="229" width="3.1746%" height="15" fill="rgb(250,79,13)" fg:x="304" fg:w="24"/><text x="40.4616%" y="239.50">zzs..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 2.65%)</title><rect x="40.7407%" y="213" width="2.6455%" height="15" fill="rgb(211,146,34)" fg:x="308" fg:w="20"/><text x="40.9907%" y="223.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 2.38%)</title><rect x="41.0053%" y="197" width="2.3810%" height="15" fill="rgb(228,22,38)" fg:x="310" fg:w="18"/><text x="41.2553%" y="207.50">al..</text></g><g><title>szone_malloc_should_clear (8 samples, 1.06%)</title><rect x="42.3280%" y="181" width="1.0582%" height="15" fill="rgb(235,168,5)" fg:x="320" fg:w="8"/><text x="42.5780%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (8 samples, 1.06%)</title><rect x="42.3280%" y="165" width="1.0582%" height="15" fill="rgb(221,155,16)" fg:x="320" fg:w="8"/><text x="42.5780%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.53%)</title><rect x="42.8571%" y="149" width="0.5291%" height="15" fill="rgb(215,215,53)" fg:x="324" fg:w="4"/><text x="43.1071%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.13%)</title><rect x="43.3862%" y="245" width="0.1323%" height="15" fill="rgb(223,4,10)" fg:x="328" fg:w="1"/><text x="43.6362%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (3 samples, 0.40%)</title><rect x="43.5185%" y="213" width="0.3968%" height="15" fill="rgb(234,103,6)" fg:x="329" fg:w="3"/><text x="43.7685%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (4 samples, 0.53%)</title><rect x="43.5185%" y="245" width="0.5291%" height="15" fill="rgb(227,97,0)" fg:x="329" fg:w="4"/><text x="43.7685%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.53%)</title><rect x="43.5185%" y="229" width="0.5291%" height="15" fill="rgb(234,150,53)" fg:x="329" fg:w="4"/><text x="43.7685%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="43.9153%" y="213" width="0.1323%" height="15" fill="rgb(228,201,54)" fg:x="332" fg:w="1"/><text x="44.1653%" y="223.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.13%)</title><rect x="51.0582%" y="213" width="0.1323%" height="15" fill="rgb(222,22,37)" fg:x="386" fg:w="1"/><text x="51.3082%" y="223.50"></text></g><g><title>_realloc (1 samples, 0.13%)</title><rect x="51.1905%" y="213" width="0.1323%" height="15" fill="rgb(237,53,32)" fg:x="387" fg:w="1"/><text x="51.4405%" y="223.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.13%)</title><rect x="51.5873%" y="197" width="0.1323%" height="15" fill="rgb(233,25,53)" fg:x="390" fg:w="1"/><text x="51.8373%" y="207.50"></text></g><g><title>szone_good_size (1 samples, 0.13%)</title><rect x="52.5132%" y="165" width="0.1323%" height="15" fill="rgb(210,40,34)" fg:x="397" fg:w="1"/><text x="52.7632%" y="175.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="52.9101%" y="149" width="0.1323%" height="15" fill="rgb(241,220,44)" fg:x="400" fg:w="1"/><text x="53.1601%" y="159.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="53.0423%" y="149" width="0.1323%" height="15" fill="rgb(235,28,35)" fg:x="401" fg:w="1"/><text x="53.2923%" y="159.50"></text></g><g><title>szone_size (11 samples, 1.46%)</title><rect x="53.1746%" y="149" width="1.4550%" height="15" fill="rgb(210,56,17)" fg:x="402" fg:w="11"/><text x="53.4246%" y="159.50"></text></g><g><title>tiny_size (11 samples, 1.46%)</title><rect x="53.1746%" y="133" width="1.4550%" height="15" fill="rgb(224,130,29)" fg:x="402" fg:w="11"/><text x="53.4246%" y="143.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.26%)</title><rect x="55.8201%" y="133" width="0.2646%" height="15" fill="rgb(235,212,8)" fg:x="422" fg:w="2"/><text x="56.0701%" y="143.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.26%)</title><rect x="56.0847%" y="133" width="0.2646%" height="15" fill="rgb(223,33,50)" fg:x="424" fg:w="2"/><text x="56.3347%" y="143.50"></text></g><g><title>_malloc_zone_realloc (34 samples, 4.50%)</title><rect x="52.2487%" y="181" width="4.4974%" height="15" fill="rgb(219,149,13)" fg:x="395" fg:w="34"/><text x="52.4987%" y="191.50">_mall..</text></g><g><title>szone_realloc (31 samples, 4.10%)</title><rect x="52.6455%" y="165" width="4.1005%" height="15" fill="rgb(250,156,29)" fg:x="398" fg:w="31"/><text x="52.8955%" y="175.50">szon..</text></g><g><title>tiny_try_realloc_in_place (16 samples, 2.12%)</title><rect x="54.6296%" y="149" width="2.1164%" height="15" fill="rgb(216,193,19)" fg:x="413" fg:w="16"/><text x="54.8796%" y="159.50">t..</text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.40%)</title><rect x="56.3492%" y="133" width="0.3968%" height="15" fill="rgb(216,135,14)" fg:x="426" fg:w="3"/><text x="56.5992%" y="143.50"></text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="56.7460%" y="181" width="0.1323%" height="15" fill="rgb(241,47,5)" fg:x="429" fg:w="1"/><text x="56.9960%" y="191.50"></text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="56.7460%" y="165" width="0.1323%" height="15" fill="rgb(233,42,35)" fg:x="429" fg:w="1"/><text x="56.9960%" y="175.50"></text></g><g><title>_realloc (40 samples, 5.29%)</title><rect x="51.7196%" y="197" width="5.2910%" height="15" fill="rgb(231,13,6)" fg:x="391" fg:w="40"/><text x="51.9696%" y="207.50">_reall..</text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="56.8783%" y="181" width="0.1323%" height="15" fill="rgb(207,181,40)" fg:x="430" fg:w="1"/><text x="57.1283%" y="191.50"></text></g><g><title>rack_get_thread_index (2 samples, 0.26%)</title><rect x="57.0106%" y="181" width="0.2646%" height="15" fill="rgb(254,173,49)" fg:x="431" fg:w="2"/><text x="57.2606%" y="191.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.13%)</title><rect x="57.2751%" y="181" width="0.1323%" height="15" fill="rgb(221,1,38)" fg:x="433" fg:w="1"/><text x="57.5251%" y="191.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="58.3333%" y="165" width="0.1323%" height="15" fill="rgb(206,124,46)" fg:x="441" fg:w="1"/><text x="58.5833%" y="175.50"></text></g><g><title>szone_malloc_should_clear (16 samples, 2.12%)</title><rect x="57.0106%" y="197" width="2.1164%" height="15" fill="rgb(249,21,11)" fg:x="431" fg:w="16"/><text x="57.2606%" y="207.50">s..</text></g><g><title>tiny_malloc_should_clear (13 samples, 1.72%)</title><rect x="57.4074%" y="181" width="1.7196%" height="15" fill="rgb(222,201,40)" fg:x="434" fg:w="13"/><text x="57.6574%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.66%)</title><rect x="58.4656%" y="165" width="0.6614%" height="15" fill="rgb(235,61,29)" fg:x="442" fg:w="5"/><text x="58.7156%" y="175.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.26%)</title><rect x="58.8624%" y="149" width="0.2646%" height="15" fill="rgb(219,207,3)" fg:x="445" fg:w="2"/><text x="59.1124%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (205 samples, 27.12%)</title><rect x="32.1429%" y="261" width="27.1164%" height="15" fill="rgb(222,56,46)" fg:x="243" fg:w="205"/><text x="32.3929%" y="271.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (115 samples, 15.21%)</title><rect x="44.0476%" y="245" width="15.2116%" height="15" fill="rgb(239,76,54)" fg:x="333" fg:w="115"/><text x="44.2976%" y="255.50">vexy_json_core::parser::une..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (64 samples, 8.47%)</title><rect x="50.7937%" y="229" width="8.4656%" height="15" fill="rgb(231,124,27)" fg:x="384" fg:w="64"/><text x="51.0437%" y="239.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::finish_grow (60 samples, 7.94%)</title><rect x="51.3228%" y="213" width="7.9365%" height="15" fill="rgb(249,195,6)" fg:x="388" fg:w="60"/><text x="51.5728%" y="223.50">alloc::raw_..</text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="59.1270%" y="197" width="0.1323%" height="15" fill="rgb(237,174,47)" fg:x="447" fg:w="1"/><text x="59.3770%" y="207.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.40%)</title><rect x="59.7884%" y="229" width="0.3968%" height="15" fill="rgb(206,201,31)" fg:x="452" fg:w="3"/><text x="60.0384%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (8 samples, 1.06%)</title><rect x="59.2593%" y="261" width="1.0582%" height="15" fill="rgb(231,57,52)" fg:x="448" fg:w="8"/><text x="59.5093%" y="271.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (5 samples, 0.66%)</title><rect x="59.6561%" y="245" width="0.6614%" height="15" fill="rgb(248,177,22)" fg:x="451" fg:w="5"/><text x="59.9061%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="60.1852%" y="229" width="0.1323%" height="15" fill="rgb(215,211,37)" fg:x="455" fg:w="1"/><text x="60.4352%" y="239.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="60.8466%" y="229" width="0.1323%" height="15" fill="rgb(241,128,51)" fg:x="460" fg:w="1"/><text x="61.0966%" y="239.50"></text></g><g><title>szone_good_size (1 samples, 0.13%)</title><rect x="60.9788%" y="181" width="0.1323%" height="15" fill="rgb(227,165,31)" fg:x="461" fg:w="1"/><text x="61.2288%" y="191.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.26%)</title><rect x="60.9788%" y="197" width="0.2646%" height="15" fill="rgb(228,167,24)" fg:x="461" fg:w="2"/><text x="61.2288%" y="207.50"></text></g><g><title>szone_realloc (1 samples, 0.13%)</title><rect x="61.1111%" y="181" width="0.1323%" height="15" fill="rgb(228,143,12)" fg:x="462" fg:w="1"/><text x="61.3611%" y="191.50"></text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="61.1111%" y="165" width="0.1323%" height="15" fill="rgb(249,149,8)" fg:x="462" fg:w="1"/><text x="61.3611%" y="175.50"></text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="61.1111%" y="149" width="0.1323%" height="15" fill="rgb(243,35,44)" fg:x="462" fg:w="1"/><text x="61.3611%" y="159.50"></text></g><g><title>_realloc (3 samples, 0.40%)</title><rect x="60.9788%" y="213" width="0.3968%" height="15" fill="rgb(246,89,9)" fg:x="461" fg:w="3"/><text x="61.2288%" y="223.50"></text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="61.2434%" y="197" width="0.1323%" height="15" fill="rgb(233,213,13)" fg:x="463" fg:w="1"/><text x="61.4934%" y="207.50"></text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="61.2434%" y="181" width="0.1323%" height="15" fill="rgb(233,141,41)" fg:x="463" fg:w="1"/><text x="61.4934%" y="191.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.13%)</title><rect x="61.6402%" y="181" width="0.1323%" height="15" fill="rgb(239,167,4)" fg:x="466" fg:w="1"/><text x="61.8902%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (271 samples, 35.85%)</title><rect x="26.0582%" y="293" width="35.8466%" height="15" fill="rgb(209,217,16)" fg:x="197" fg:w="271"/><text x="26.3082%" y="303.50">vexy_json_core::parser::Parser::parse_array</text></g><g><title>vexy_json_core::parser::Parser::parse_value (271 samples, 35.85%)</title><rect x="26.0582%" y="277" width="35.8466%" height="15" fill="rgb(219,88,35)" fg:x="197" fg:w="271"/><text x="26.3082%" y="287.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (12 samples, 1.59%)</title><rect x="60.3175%" y="261" width="1.5873%" height="15" fill="rgb(220,193,23)" fg:x="456" fg:w="12"/><text x="60.5675%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8 samples, 1.06%)</title><rect x="60.8466%" y="245" width="1.0582%" height="15" fill="rgb(230,90,52)" fg:x="460" fg:w="8"/><text x="61.0966%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.93%)</title><rect x="60.9788%" y="229" width="0.9259%" height="15" fill="rgb(252,106,19)" fg:x="461" fg:w="7"/><text x="61.2288%" y="239.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.53%)</title><rect x="61.3757%" y="213" width="0.5291%" height="15" fill="rgb(206,74,20)" fg:x="464" fg:w="4"/><text x="61.6257%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (4 samples, 0.53%)</title><rect x="61.3757%" y="197" width="0.5291%" height="15" fill="rgb(230,138,44)" fg:x="464" fg:w="4"/><text x="61.6257%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="61.7725%" y="181" width="0.1323%" height="15" fill="rgb(235,182,43)" fg:x="467" fg:w="1"/><text x="62.0225%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.13%)</title><rect x="61.7725%" y="165" width="0.1323%" height="15" fill="rgb(242,16,51)" fg:x="467" fg:w="1"/><text x="62.0225%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.13%)</title><rect x="62.4339%" y="261" width="0.1323%" height="15" fill="rgb(248,9,4)" fg:x="472" fg:w="1"/><text x="62.6839%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="62.6984%" y="245" width="0.3968%" height="15" fill="rgb(210,31,22)" fg:x="474" fg:w="3"/><text x="62.9484%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.40%)</title><rect x="62.6984%" y="229" width="0.3968%" height="15" fill="rgb(239,54,39)" fg:x="474" fg:w="3"/><text x="62.9484%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 1.06%)</title><rect x="62.1693%" y="277" width="1.0582%" height="15" fill="rgb(230,99,41)" fg:x="470" fg:w="8"/><text x="62.4193%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.66%)</title><rect x="62.5661%" y="261" width="0.6614%" height="15" fill="rgb(253,106,12)" fg:x="473" fg:w="5"/><text x="62.8161%" y="271.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="63.0952%" y="245" width="0.1323%" height="15" fill="rgb(213,46,41)" fg:x="477" fg:w="1"/><text x="63.3452%" y="255.50"></text></g><g><title>small_malloc_should_clear (1 samples, 0.13%)</title><rect x="63.0952%" y="229" width="0.1323%" height="15" fill="rgb(215,133,35)" fg:x="477" fg:w="1"/><text x="63.3452%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.53%)</title><rect x="63.2275%" y="277" width="0.5291%" height="15" fill="rgb(213,28,5)" fg:x="478" fg:w="4"/><text x="63.4775%" y="287.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.26%)</title><rect x="63.4921%" y="261" width="0.2646%" height="15" fill="rgb(215,77,49)" fg:x="480" fg:w="2"/><text x="63.7421%" y="271.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (1 samples, 0.13%)</title><rect x="63.7566%" y="277" width="0.1323%" height="15" fill="rgb(248,100,22)" fg:x="482" fg:w="1"/><text x="64.0066%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (1 samples, 0.13%)</title><rect x="64.0212%" y="261" width="0.1323%" height="15" fill="rgb(208,67,9)" fg:x="484" fg:w="1"/><text x="64.2712%" y="271.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="64.0212%" y="245" width="0.1323%" height="15" fill="rgb(219,133,21)" fg:x="484" fg:w="1"/><text x="64.2712%" y="255.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.26%)</title><rect x="64.1534%" y="261" width="0.2646%" height="15" fill="rgb(246,46,29)" fg:x="485" fg:w="2"/><text x="64.4034%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.53%)</title><rect x="64.6825%" y="245" width="0.5291%" height="15" fill="rgb(246,185,52)" fg:x="489" fg:w="4"/><text x="64.9325%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.26%)</title><rect x="64.9471%" y="229" width="0.2646%" height="15" fill="rgb(252,136,11)" fg:x="491" fg:w="2"/><text x="65.1971%" y="239.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="65.3439%" y="213" width="0.1323%" height="15" fill="rgb(219,138,53)" fg:x="494" fg:w="1"/><text x="65.5939%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 1.46%)</title><rect x="64.4180%" y="261" width="1.4550%" height="15" fill="rgb(211,51,23)" fg:x="487" fg:w="11"/><text x="64.6680%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.66%)</title><rect x="65.2116%" y="245" width="0.6614%" height="15" fill="rgb(247,221,28)" fg:x="493" fg:w="5"/><text x="65.4616%" y="255.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.53%)</title><rect x="65.3439%" y="229" width="0.5291%" height="15" fill="rgb(251,222,45)" fg:x="494" fg:w="4"/><text x="65.5939%" y="239.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="65.4762%" y="213" width="0.3968%" height="15" fill="rgb(217,162,53)" fg:x="495" fg:w="3"/><text x="65.7262%" y="223.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.26%)</title><rect x="65.6085%" y="197" width="0.2646%" height="15" fill="rgb(229,93,14)" fg:x="496" fg:w="2"/><text x="65.8585%" y="207.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="65.7407%" y="181" width="0.1323%" height="15" fill="rgb(209,67,49)" fg:x="497" fg:w="1"/><text x="65.9907%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="66.1376%" y="245" width="0.1323%" height="15" fill="rgb(213,87,29)" fg:x="500" fg:w="1"/><text x="66.3876%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.53%)</title><rect x="65.8730%" y="261" width="0.5291%" height="15" fill="rgb(205,151,52)" fg:x="498" fg:w="4"/><text x="66.1230%" y="271.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="66.2698%" y="245" width="0.1323%" height="15" fill="rgb(253,215,39)" fg:x="501" fg:w="1"/><text x="66.5198%" y="255.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="66.7989%" y="197" width="0.1323%" height="15" fill="rgb(221,220,41)" fg:x="505" fg:w="1"/><text x="67.0489%" y="207.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="67.0635%" y="181" width="0.1323%" height="15" fill="rgb(218,133,21)" fg:x="507" fg:w="1"/><text x="67.3135%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.66%)</title><rect x="66.6667%" y="245" width="0.6614%" height="15" fill="rgb(221,193,43)" fg:x="504" fg:w="5"/><text x="66.9167%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.66%)</title><rect x="66.6667%" y="229" width="0.6614%" height="15" fill="rgb(240,128,52)" fg:x="504" fg:w="5"/><text x="66.9167%" y="239.50"></text></g><g><title>szone_malloc_should_clear (5 samples, 0.66%)</title><rect x="66.6667%" y="213" width="0.6614%" height="15" fill="rgb(253,114,12)" fg:x="504" fg:w="5"/><text x="66.9167%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="66.9312%" y="197" width="0.3968%" height="15" fill="rgb(215,223,47)" fg:x="506" fg:w="3"/><text x="67.1812%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="67.1958%" y="181" width="0.1323%" height="15" fill="rgb(248,225,23)" fg:x="508" fg:w="1"/><text x="67.4458%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (4 samples, 0.53%)</title><rect x="67.5926%" y="229" width="0.5291%" height="15" fill="rgb(250,108,0)" fg:x="511" fg:w="4"/><text x="67.8426%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (8 samples, 1.06%)</title><rect x="67.3280%" y="245" width="1.0582%" height="15" fill="rgb(228,208,7)" fg:x="509" fg:w="8"/><text x="67.5780%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.26%)</title><rect x="68.1217%" y="229" width="0.2646%" height="15" fill="rgb(244,45,10)" fg:x="515" fg:w="2"/><text x="68.3717%" y="239.50"></text></g><g><title>__rustc::__rust_dealloc (1 samples, 0.13%)</title><rect x="68.9153%" y="229" width="0.1323%" height="15" fill="rgb(207,125,25)" fg:x="521" fg:w="1"/><text x="69.1653%" y="239.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.13%)</title><rect x="69.0476%" y="229" width="0.1323%" height="15" fill="rgb(210,195,18)" fg:x="522" fg:w="1"/><text x="69.2976%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.93%)</title><rect x="69.8413%" y="213" width="0.9259%" height="15" fill="rgb(249,80,12)" fg:x="528" fg:w="7"/><text x="70.0913%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.13%)</title><rect x="70.6349%" y="197" width="0.1323%" height="15" fill="rgb(221,65,9)" fg:x="534" fg:w="1"/><text x="70.8849%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17 samples, 2.25%)</title><rect x="69.1799%" y="229" width="2.2487%" height="15" fill="rgb(235,49,36)" fg:x="523" fg:w="17"/><text x="69.4299%" y="239.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.66%)</title><rect x="70.7672%" y="213" width="0.6614%" height="15" fill="rgb(225,32,20)" fg:x="535" fg:w="5"/><text x="71.0172%" y="223.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="71.0317%" y="197" width="0.3968%" height="15" fill="rgb(215,141,46)" fg:x="537" fg:w="3"/><text x="71.2817%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="71.0317%" y="181" width="0.3968%" height="15" fill="rgb(250,160,47)" fg:x="537" fg:w="3"/><text x="71.2817%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="71.2963%" y="165" width="0.1323%" height="15" fill="rgb(216,222,40)" fg:x="539" fg:w="1"/><text x="71.5463%" y="175.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="71.4286%" y="229" width="0.1323%" height="15" fill="rgb(234,217,39)" fg:x="540" fg:w="1"/><text x="71.6786%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (4 samples, 0.53%)</title><rect x="71.9577%" y="213" width="0.5291%" height="15" fill="rgb(207,178,40)" fg:x="544" fg:w="4"/><text x="72.2077%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.26%)</title><rect x="72.4868%" y="213" width="0.2646%" height="15" fill="rgb(221,136,13)" fg:x="548" fg:w="2"/><text x="72.7368%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (12 samples, 1.59%)</title><rect x="71.5608%" y="229" width="1.5873%" height="15" fill="rgb(249,199,10)" fg:x="541" fg:w="12"/><text x="71.8108%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (3 samples, 0.40%)</title><rect x="72.7513%" y="213" width="0.3968%" height="15" fill="rgb(249,222,13)" fg:x="550" fg:w="3"/><text x="73.0013%" y="223.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="73.6772%" y="213" width="0.1323%" height="15" fill="rgb(244,185,38)" fg:x="557" fg:w="1"/><text x="73.9272%" y="223.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2 samples, 0.26%)</title><rect x="73.8095%" y="213" width="0.2646%" height="15" fill="rgb(236,202,9)" fg:x="558" fg:w="2"/><text x="74.0595%" y="223.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.13%)</title><rect x="73.9418%" y="197" width="0.1323%" height="15" fill="rgb(250,229,37)" fg:x="559" fg:w="1"/><text x="74.1918%" y="207.50"></text></g><g><title>free_tiny (5 samples, 0.66%)</title><rect x="74.0741%" y="213" width="0.6614%" height="15" fill="rgb(206,174,23)" fg:x="560" fg:w="5"/><text x="74.3241%" y="223.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="74.7354%" y="197" width="0.1323%" height="15" fill="rgb(211,33,43)" fg:x="565" fg:w="1"/><text x="74.9854%" y="207.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.79%)</title><rect x="74.7354%" y="213" width="0.7937%" height="15" fill="rgb(245,58,50)" fg:x="565" fg:w="6"/><text x="74.9854%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.66%)</title><rect x="74.8677%" y="197" width="0.6614%" height="15" fill="rgb(244,68,36)" fg:x="566" fg:w="5"/><text x="75.1177%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.26%)</title><rect x="75.2646%" y="181" width="0.2646%" height="15" fill="rgb(232,229,15)" fg:x="569" fg:w="2"/><text x="75.5146%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (2 samples, 0.26%)</title><rect x="75.5291%" y="213" width="0.2646%" height="15" fill="rgb(254,30,23)" fg:x="571" fg:w="2"/><text x="75.7791%" y="223.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.40%)</title><rect x="76.1905%" y="149" width="0.3968%" height="15" fill="rgb(235,160,14)" fg:x="576" fg:w="3"/><text x="76.4405%" y="159.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.13%)</title><rect x="76.9841%" y="133" width="0.1323%" height="15" fill="rgb(212,155,44)" fg:x="582" fg:w="1"/><text x="77.2341%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (37 samples, 4.89%)</title><rect x="73.1481%" y="229" width="4.8942%" height="15" fill="rgb(226,2,50)" fg:x="553" fg:w="37"/><text x="73.3981%" y="239.50">vexy_json_..</text></g><g><title>vexy_json_core::parser::unescape_string (17 samples, 2.25%)</title><rect x="75.7937%" y="213" width="2.2487%" height="15" fill="rgb(234,177,6)" fg:x="573" fg:w="17"/><text x="76.0437%" y="223.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (15 samples, 1.98%)</title><rect x="76.0582%" y="197" width="1.9841%" height="15" fill="rgb(217,24,9)" fg:x="575" fg:w="15"/><text x="76.3082%" y="207.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 1.98%)</title><rect x="76.0582%" y="181" width="1.9841%" height="15" fill="rgb(220,13,46)" fg:x="575" fg:w="15"/><text x="76.3082%" y="191.50">a..</text></g><g><title>szone_malloc_should_clear (14 samples, 1.85%)</title><rect x="76.1905%" y="165" width="1.8519%" height="15" fill="rgb(239,221,27)" fg:x="576" fg:w="14"/><text x="76.4405%" y="175.50">s..</text></g><g><title>tiny_malloc_should_clear (11 samples, 1.46%)</title><rect x="76.5873%" y="149" width="1.4550%" height="15" fill="rgb(222,198,25)" fg:x="579" fg:w="11"/><text x="76.8373%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (7 samples, 0.93%)</title><rect x="77.1164%" y="133" width="0.9259%" height="15" fill="rgb(211,99,13)" fg:x="583" fg:w="7"/><text x="77.3664%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (1 samples, 0.13%)</title><rect x="78.0423%" y="229" width="0.1323%" height="15" fill="rgb(232,111,31)" fg:x="590" fg:w="1"/><text x="78.2923%" y="239.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="78.7037%" y="197" width="0.1323%" height="15" fill="rgb(245,82,37)" fg:x="595" fg:w="1"/><text x="78.9537%" y="207.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.40%)</title><rect x="79.3651%" y="165" width="0.3968%" height="15" fill="rgb(227,149,46)" fg:x="600" fg:w="3"/><text x="79.6151%" y="175.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="80.9524%" y="149" width="0.1323%" height="15" fill="rgb(218,36,50)" fg:x="612" fg:w="1"/><text x="81.2024%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (113 samples, 14.95%)</title><rect x="66.4021%" y="261" width="14.9471%" height="15" fill="rgb(226,80,48)" fg:x="502" fg:w="113"/><text x="66.6521%" y="271.50">vexy_json_core::parser::Par..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (98 samples, 12.96%)</title><rect x="68.3862%" y="245" width="12.9630%" height="15" fill="rgb(238,224,15)" fg:x="517" fg:w="98"/><text x="68.6362%" y="255.50">vexy_json_core::parser:..</text></g><g><title>vexy_json_core::parser::unescape_string (24 samples, 3.17%)</title><rect x="78.1746%" y="229" width="3.1746%" height="15" fill="rgb(241,136,10)" fg:x="591" fg:w="24"/><text x="78.4246%" y="239.50">zzs..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (21 samples, 2.78%)</title><rect x="78.5714%" y="213" width="2.7778%" height="15" fill="rgb(208,32,45)" fg:x="594" fg:w="21"/><text x="78.8214%" y="223.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 2.51%)</title><rect x="78.8360%" y="197" width="2.5132%" height="15" fill="rgb(207,135,9)" fg:x="596" fg:w="19"/><text x="79.0860%" y="207.50">al..</text></g><g><title>szone_malloc_should_clear (18 samples, 2.38%)</title><rect x="78.9683%" y="181" width="2.3810%" height="15" fill="rgb(206,86,44)" fg:x="597" fg:w="18"/><text x="79.2183%" y="191.50">sz..</text></g><g><title>tiny_malloc_should_clear (12 samples, 1.59%)</title><rect x="79.7619%" y="165" width="1.5873%" height="15" fill="rgb(245,177,15)" fg:x="603" fg:w="12"/><text x="80.0119%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.26%)</title><rect x="81.0847%" y="149" width="0.2646%" height="15" fill="rgb(206,64,50)" fg:x="613" fg:w="2"/><text x="81.3347%" y="159.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="81.2169%" y="133" width="0.1323%" height="15" fill="rgb(234,36,40)" fg:x="614" fg:w="1"/><text x="81.4669%" y="143.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.13%)</title><rect x="81.6138%" y="245" width="0.1323%" height="15" fill="rgb(213,64,8)" fg:x="617" fg:w="1"/><text x="81.8638%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (1 samples, 0.13%)</title><rect x="81.6138%" y="229" width="0.1323%" height="15" fill="rgb(210,75,36)" fg:x="617" fg:w="1"/><text x="81.8638%" y="239.50"></text></g><g><title>_tlv_get_addr (1 samples, 0.13%)</title><rect x="81.7460%" y="245" width="0.1323%" height="15" fill="rgb(229,88,21)" fg:x="618" fg:w="1"/><text x="81.9960%" y="255.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.13%)</title><rect x="81.8783%" y="245" width="0.1323%" height="15" fill="rgb(252,204,47)" fg:x="619" fg:w="1"/><text x="82.1283%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.26%)</title><rect x="82.2751%" y="229" width="0.2646%" height="15" fill="rgb(208,77,27)" fg:x="622" fg:w="2"/><text x="82.5251%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.93%)</title><rect x="82.0106%" y="245" width="0.9259%" height="15" fill="rgb(221,76,26)" fg:x="620" fg:w="7"/><text x="82.2606%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.40%)</title><rect x="82.5397%" y="229" width="0.3968%" height="15" fill="rgb(225,139,18)" fg:x="624" fg:w="3"/><text x="82.7897%" y="239.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="82.5397%" y="213" width="0.3968%" height="15" fill="rgb(230,137,11)" fg:x="624" fg:w="3"/><text x="82.7897%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="82.5397%" y="197" width="0.3968%" height="15" fill="rgb(212,28,1)" fg:x="624" fg:w="3"/><text x="82.7897%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="82.8042%" y="181" width="0.1323%" height="15" fill="rgb(248,164,17)" fg:x="626" fg:w="1"/><text x="83.0542%" y="191.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.53%)</title><rect x="82.9365%" y="245" width="0.5291%" height="15" fill="rgb(222,171,42)" fg:x="627" fg:w="4"/><text x="83.1865%" y="255.50"></text></g><g><title>tiny_malloc_should_clear (4 samples, 0.53%)</title><rect x="82.9365%" y="229" width="0.5291%" height="15" fill="rgb(243,84,45)" fg:x="627" fg:w="4"/><text x="83.1865%" y="239.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.40%)</title><rect x="83.0688%" y="213" width="0.3968%" height="15" fill="rgb(252,49,23)" fg:x="628" fg:w="3"/><text x="83.3188%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (8 samples, 1.06%)</title><rect x="83.9947%" y="229" width="1.0582%" height="15" fill="rgb(215,19,7)" fg:x="635" fg:w="8"/><text x="84.2447%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="85.0529%" y="229" width="0.1323%" height="15" fill="rgb(238,81,41)" fg:x="643" fg:w="1"/><text x="85.3029%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (15 samples, 1.98%)</title><rect x="83.4656%" y="245" width="1.9841%" height="15" fill="rgb(210,199,37)" fg:x="631" fg:w="15"/><text x="83.7156%" y="255.50">z..</text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (2 samples, 0.26%)</title><rect x="85.1852%" y="229" width="0.2646%" height="15" fill="rgb(244,192,49)" fg:x="644" fg:w="2"/><text x="85.4352%" y="239.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.13%)</title><rect x="85.7143%" y="229" width="0.1323%" height="15" fill="rgb(226,211,11)" fg:x="648" fg:w="1"/><text x="85.9643%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="85.7143%" y="213" width="0.1323%" height="15" fill="rgb(236,162,54)" fg:x="648" fg:w="1"/><text x="85.9643%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.26%)</title><rect x="85.8466%" y="229" width="0.2646%" height="15" fill="rgb(220,229,9)" fg:x="649" fg:w="2"/><text x="86.0966%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.26%)</title><rect x="85.8466%" y="213" width="0.2646%" height="15" fill="rgb(250,87,22)" fg:x="649" fg:w="2"/><text x="86.0966%" y="223.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.26%)</title><rect x="85.8466%" y="197" width="0.2646%" height="15" fill="rgb(239,43,17)" fg:x="649" fg:w="2"/><text x="86.0966%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.26%)</title><rect x="85.8466%" y="181" width="0.2646%" height="15" fill="rgb(231,177,25)" fg:x="649" fg:w="2"/><text x="86.0966%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="85.9788%" y="165" width="0.1323%" height="15" fill="rgb(219,179,1)" fg:x="650" fg:w="1"/><text x="86.2288%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.13%)</title><rect x="86.2434%" y="213" width="0.1323%" height="15" fill="rgb(238,219,53)" fg:x="652" fg:w="1"/><text x="86.4934%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="86.2434%" y="197" width="0.1323%" height="15" fill="rgb(232,167,36)" fg:x="652" fg:w="1"/><text x="86.4934%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.93%)</title><rect x="86.7725%" y="181" width="0.9259%" height="15" fill="rgb(244,19,51)" fg:x="656" fg:w="7"/><text x="87.0225%" y="191.50"></text></g><g><title>szone_malloc_should_clear (7 samples, 0.93%)</title><rect x="86.7725%" y="165" width="0.9259%" height="15" fill="rgb(224,6,22)" fg:x="656" fg:w="7"/><text x="87.0225%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.79%)</title><rect x="86.9048%" y="149" width="0.7937%" height="15" fill="rgb(224,145,5)" fg:x="657" fg:w="6"/><text x="87.1548%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.26%)</title><rect x="87.4339%" y="133" width="0.2646%" height="15" fill="rgb(234,130,49)" fg:x="661" fg:w="2"/><text x="87.6839%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (18 samples, 2.38%)</title><rect x="85.4497%" y="245" width="2.3810%" height="15" fill="rgb(254,6,2)" fg:x="646" fg:w="18"/><text x="85.6997%" y="255.50">zz..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (13 samples, 1.72%)</title><rect x="86.1111%" y="229" width="1.7196%" height="15" fill="rgb(208,96,46)" fg:x="651" fg:w="13"/><text x="86.3611%" y="239.50"></text></g><g><title>vexy_json_core::parser::unescape_string (11 samples, 1.46%)</title><rect x="86.3757%" y="213" width="1.4550%" height="15" fill="rgb(239,3,39)" fg:x="653" fg:w="11"/><text x="86.6257%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (10 samples, 1.32%)</title><rect x="86.5079%" y="197" width="1.3228%" height="15" fill="rgb(233,210,1)" fg:x="654" fg:w="10"/><text x="86.7579%" y="207.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="87.6984%" y="181" width="0.1323%" height="15" fill="rgb(244,137,37)" fg:x="663" fg:w="1"/><text x="87.9484%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="88.2275%" y="213" width="0.3968%" height="15" fill="rgb(240,136,2)" fg:x="667" fg:w="3"/><text x="88.4775%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.40%)</title><rect x="88.2275%" y="197" width="0.3968%" height="15" fill="rgb(239,18,37)" fg:x="667" fg:w="3"/><text x="88.4775%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="88.6243%" y="197" width="0.1323%" height="15" fill="rgb(218,185,22)" fg:x="670" fg:w="1"/><text x="88.8743%" y="207.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="88.7566%" y="181" width="0.1323%" height="15" fill="rgb(225,218,4)" fg:x="671" fg:w="1"/><text x="89.0066%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 1.06%)</title><rect x="87.9630%" y="229" width="1.0582%" height="15" fill="rgb(230,182,32)" fg:x="665" fg:w="8"/><text x="88.2130%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.40%)</title><rect x="88.6243%" y="213" width="0.3968%" height="15" fill="rgb(242,56,43)" fg:x="670" fg:w="3"/><text x="88.8743%" y="223.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.26%)</title><rect x="88.7566%" y="197" width="0.2646%" height="15" fill="rgb(233,99,24)" fg:x="671" fg:w="2"/><text x="89.0066%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.13%)</title><rect x="88.8889%" y="181" width="0.1323%" height="15" fill="rgb(234,209,42)" fg:x="672" fg:w="1"/><text x="89.1389%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (3 samples, 0.40%)</title><rect x="89.8148%" y="213" width="0.3968%" height="15" fill="rgb(227,7,12)" fg:x="679" fg:w="3"/><text x="90.0648%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (11 samples, 1.46%)</title><rect x="89.0212%" y="229" width="1.4550%" height="15" fill="rgb(245,203,43)" fg:x="673" fg:w="11"/><text x="89.2712%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.26%)</title><rect x="90.2116%" y="213" width="0.2646%" height="15" fill="rgb(238,205,33)" fg:x="682" fg:w="2"/><text x="90.4616%" y="223.50"></text></g><g><title>free_tiny (2 samples, 0.26%)</title><rect x="90.6085%" y="213" width="0.2646%" height="15" fill="rgb(231,56,7)" fg:x="685" fg:w="2"/><text x="90.8585%" y="223.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.26%)</title><rect x="90.8730%" y="213" width="0.2646%" height="15" fill="rgb(244,186,29)" fg:x="687" fg:w="2"/><text x="91.1230%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.26%)</title><rect x="90.8730%" y="197" width="0.2646%" height="15" fill="rgb(234,111,31)" fg:x="687" fg:w="2"/><text x="91.1230%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="91.0053%" y="181" width="0.1323%" height="15" fill="rgb(241,149,10)" fg:x="688" fg:w="1"/><text x="91.2553%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (6 samples, 0.79%)</title><rect x="90.4762%" y="229" width="0.7937%" height="15" fill="rgb(249,206,44)" fg:x="684" fg:w="6"/><text x="90.7262%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.13%)</title><rect x="91.1376%" y="213" width="0.1323%" height="15" fill="rgb(251,153,30)" fg:x="689" fg:w="1"/><text x="91.3876%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (1 samples, 0.13%)</title><rect x="91.2698%" y="229" width="0.1323%" height="15" fill="rgb(239,152,38)" fg:x="690" fg:w="1"/><text x="91.5198%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.13%)</title><rect x="91.2698%" y="213" width="0.1323%" height="15" fill="rgb(249,139,47)" fg:x="690" fg:w="1"/><text x="91.5198%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="91.2698%" y="197" width="0.1323%" height="15" fill="rgb(244,64,35)" fg:x="690" fg:w="1"/><text x="91.5198%" y="207.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="92.1958%" y="197" width="0.1323%" height="15" fill="rgb(216,46,15)" fg:x="697" fg:w="1"/><text x="92.4458%" y="207.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.26%)</title><rect x="92.3280%" y="165" width="0.2646%" height="15" fill="rgb(250,74,19)" fg:x="698" fg:w="2"/><text x="92.5780%" y="175.50"></text></g><g><title>szone_realloc (2 samples, 0.26%)</title><rect x="92.3280%" y="149" width="0.2646%" height="15" fill="rgb(249,42,33)" fg:x="698" fg:w="2"/><text x="92.5780%" y="159.50"></text></g><g><title>szone_size (2 samples, 0.26%)</title><rect x="92.3280%" y="133" width="0.2646%" height="15" fill="rgb(242,149,17)" fg:x="698" fg:w="2"/><text x="92.5780%" y="143.50"></text></g><g><title>tiny_size (2 samples, 0.26%)</title><rect x="92.3280%" y="117" width="0.2646%" height="15" fill="rgb(244,29,21)" fg:x="698" fg:w="2"/><text x="92.5780%" y="127.50"></text></g><g><title>_realloc (4 samples, 0.53%)</title><rect x="92.3280%" y="181" width="0.5291%" height="15" fill="rgb(220,130,37)" fg:x="698" fg:w="4"/><text x="92.5780%" y="191.50"></text></g><g><title>szone_size (2 samples, 0.26%)</title><rect x="92.5926%" y="165" width="0.2646%" height="15" fill="rgb(211,67,2)" fg:x="700" fg:w="2"/><text x="92.8426%" y="175.50"></text></g><g><title>tiny_size (2 samples, 0.26%)</title><rect x="92.5926%" y="149" width="0.2646%" height="15" fill="rgb(235,68,52)" fg:x="700" fg:w="2"/><text x="92.8426%" y="159.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="92.8571%" y="165" width="0.1323%" height="15" fill="rgb(246,142,3)" fg:x="702" fg:w="1"/><text x="93.1071%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (45 samples, 5.95%)</title><rect x="87.8307%" y="245" width="5.9524%" height="15" fill="rgb(241,25,7)" fg:x="664" fg:w="45"/><text x="88.0807%" y="255.50">vexy_json_co..</text></g><g><title>vexy_json_core::parser::unescape_string (18 samples, 2.38%)</title><rect x="91.4021%" y="229" width="2.3810%" height="15" fill="rgb(242,119,39)" fg:x="691" fg:w="18"/><text x="91.6521%" y="239.50">zz..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 1.59%)</title><rect x="92.1958%" y="213" width="1.5873%" height="15" fill="rgb(241,98,45)" fg:x="697" fg:w="12"/><text x="92.4458%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 1.46%)</title><rect x="92.3280%" y="197" width="1.4550%" height="15" fill="rgb(254,28,30)" fg:x="698" fg:w="11"/><text x="92.5780%" y="207.50"></text></g><g><title>szone_malloc_should_clear (7 samples, 0.93%)</title><rect x="92.8571%" y="181" width="0.9259%" height="15" fill="rgb(241,142,54)" fg:x="702" fg:w="7"/><text x="93.1071%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.79%)</title><rect x="92.9894%" y="165" width="0.7937%" height="15" fill="rgb(222,85,15)" fg:x="703" fg:w="6"/><text x="93.2394%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.53%)</title><rect x="93.2540%" y="149" width="0.5291%" height="15" fill="rgb(210,85,47)" fg:x="705" fg:w="4"/><text x="93.5040%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.13%)</title><rect x="93.7831%" y="245" width="0.1323%" height="15" fill="rgb(224,206,25)" fg:x="709" fg:w="1"/><text x="94.0331%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="93.9153%" y="213" width="0.1323%" height="15" fill="rgb(243,201,19)" fg:x="710" fg:w="1"/><text x="94.1653%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.40%)</title><rect x="94.0476%" y="213" width="0.3968%" height="15" fill="rgb(236,59,4)" fg:x="711" fg:w="3"/><text x="94.2976%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (5 samples, 0.66%)</title><rect x="93.9153%" y="245" width="0.6614%" height="15" fill="rgb(254,179,45)" fg:x="710" fg:w="5"/><text x="94.1653%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (5 samples, 0.66%)</title><rect x="93.9153%" y="229" width="0.6614%" height="15" fill="rgb(226,14,10)" fg:x="710" fg:w="5"/><text x="94.1653%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="94.4444%" y="213" width="0.1323%" height="15" fill="rgb(244,27,41)" fg:x="714" fg:w="1"/><text x="94.6944%" y="223.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.13%)</title><rect x="95.1058%" y="181" width="0.1323%" height="15" fill="rgb(235,35,32)" fg:x="719" fg:w="1"/><text x="95.3558%" y="191.50"></text></g><g><title>_realloc (3 samples, 0.40%)</title><rect x="95.1058%" y="197" width="0.3968%" height="15" fill="rgb(218,68,31)" fg:x="719" fg:w="3"/><text x="95.3558%" y="207.50"></text></g><g><title>szone_size (2 samples, 0.26%)</title><rect x="95.2381%" y="181" width="0.2646%" height="15" fill="rgb(207,120,37)" fg:x="720" fg:w="2"/><text x="95.4881%" y="191.50"></text></g><g><title>tiny_size (2 samples, 0.26%)</title><rect x="95.2381%" y="165" width="0.2646%" height="15" fill="rgb(227,98,0)" fg:x="720" fg:w="2"/><text x="95.4881%" y="175.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="95.6349%" y="181" width="0.1323%" height="15" fill="rgb(207,7,3)" fg:x="723" fg:w="1"/><text x="95.8849%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (115 samples, 15.21%)</title><rect x="81.3492%" y="261" width="15.2116%" height="15" fill="rgb(206,98,19)" fg:x="615" fg:w="115"/><text x="81.5992%" y="271.50">vexy_json_core::parser::Par..</text></g><g><title>vexy_json_core::parser::unescape_string (15 samples, 1.98%)</title><rect x="94.5767%" y="245" width="1.9841%" height="15" fill="rgb(217,5,26)" fg:x="715" fg:w="15"/><text x="94.8267%" y="255.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 1.59%)</title><rect x="94.9735%" y="229" width="1.5873%" height="15" fill="rgb(235,190,38)" fg:x="718" fg:w="12"/><text x="95.2235%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 1.59%)</title><rect x="94.9735%" y="213" width="1.5873%" height="15" fill="rgb(247,86,24)" fg:x="718" fg:w="12"/><text x="95.2235%" y="223.50"></text></g><g><title>szone_malloc_should_clear (8 samples, 1.06%)</title><rect x="95.5026%" y="197" width="1.0582%" height="15" fill="rgb(205,101,16)" fg:x="722" fg:w="8"/><text x="95.7526%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.79%)</title><rect x="95.7672%" y="181" width="0.7937%" height="15" fill="rgb(246,168,33)" fg:x="724" fg:w="6"/><text x="96.0172%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.66%)</title><rect x="95.8995%" y="165" width="0.6614%" height="15" fill="rgb(231,114,1)" fg:x="725" fg:w="5"/><text x="96.1495%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="96.5608%" y="229" width="0.1323%" height="15" fill="rgb(207,184,53)" fg:x="730" fg:w="1"/><text x="96.8108%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="96.6931%" y="229" width="0.1323%" height="15" fill="rgb(224,95,51)" fg:x="731" fg:w="1"/><text x="96.9431%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (3 samples, 0.40%)</title><rect x="96.5608%" y="261" width="0.3968%" height="15" fill="rgb(212,188,45)" fg:x="730" fg:w="3"/><text x="96.8108%" y="271.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.40%)</title><rect x="96.5608%" y="245" width="0.3968%" height="15" fill="rgb(223,154,38)" fg:x="730" fg:w="3"/><text x="96.8108%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="96.8254%" y="229" width="0.1323%" height="15" fill="rgb(251,22,52)" fg:x="732" fg:w="1"/><text x="97.0754%" y="239.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.26%)</title><rect x="97.2222%" y="229" width="0.2646%" height="15" fill="rgb(229,209,22)" fg:x="735" fg:w="2"/><text x="97.4722%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (265 samples, 35.05%)</title><rect x="63.8889%" y="277" width="35.0529%" height="15" fill="rgb(234,138,34)" fg:x="483" fg:w="265"/><text x="64.1389%" y="287.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (15 samples, 1.98%)</title><rect x="96.9577%" y="261" width="1.9841%" height="15" fill="rgb(212,95,11)" fg:x="733" fg:w="15"/><text x="97.2077%" y="271.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 1.72%)</title><rect x="97.2222%" y="245" width="1.7196%" height="15" fill="rgb(240,179,47)" fg:x="735" fg:w="13"/><text x="97.4722%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 1.46%)</title><rect x="97.4868%" y="229" width="1.4550%" height="15" fill="rgb(240,163,11)" fg:x="737" fg:w="11"/><text x="97.7368%" y="239.50"></text></g><g><title>szone_malloc_should_clear (8 samples, 1.06%)</title><rect x="97.8836%" y="213" width="1.0582%" height="15" fill="rgb(236,37,12)" fg:x="740" fg:w="8"/><text x="98.1336%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (7 samples, 0.93%)</title><rect x="98.0159%" y="197" width="0.9259%" height="15" fill="rgb(232,164,16)" fg:x="741" fg:w="7"/><text x="98.2659%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.40%)</title><rect x="98.5450%" y="181" width="0.3968%" height="15" fill="rgb(244,205,15)" fg:x="745" fg:w="3"/><text x="98.7950%" y="191.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="98.8095%" y="165" width="0.1323%" height="15" fill="rgb(223,117,47)" fg:x="747" fg:w="1"/><text x="99.0595%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.13%)</title><rect x="98.9418%" y="277" width="0.1323%" height="15" fill="rgb(244,107,35)" fg:x="748" fg:w="1"/><text x="99.1918%" y="287.50"></text></g><g><title>_realloc (2 samples, 0.26%)</title><rect x="99.3386%" y="229" width="0.2646%" height="15" fill="rgb(205,140,8)" fg:x="751" fg:w="2"/><text x="99.5886%" y="239.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.26%)</title><rect x="99.3386%" y="213" width="0.2646%" height="15" fill="rgb(228,84,46)" fg:x="751" fg:w="2"/><text x="99.5886%" y="223.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="99.6032%" y="213" width="0.1323%" height="15" fill="rgb(254,188,9)" fg:x="753" fg:w="1"/><text x="99.8532%" y="223.50"></text></g><g><title>all (756 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(206,112,54)" fg:x="0" fg:w="756"/><text x="0.2500%" y="447.50"></text></g><g><title>start (756 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(216,84,49)" fg:x="0" fg:w="756"/><text x="0.2500%" y="431.50">start</text></g><g><title>main (749 samples, 99.07%)</title><rect x="0.9259%" y="405" width="99.0741%" height="15" fill="rgb(214,194,35)" fg:x="7" fg:w="749"/><text x="1.1759%" y="415.50">main</text></g><g><title>std::rt::lang_start_internal (749 samples, 99.07%)</title><rect x="0.9259%" y="389" width="99.0741%" height="15" fill="rgb(249,28,3)" fg:x="7" fg:w="749"/><text x="1.1759%" y="399.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (748 samples, 98.94%)</title><rect x="1.0582%" y="373" width="98.9418%" height="15" fill="rgb(222,56,52)" fg:x="8" fg:w="748"/><text x="1.3082%" y="383.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (748 samples, 98.94%)</title><rect x="1.0582%" y="357" width="98.9418%" height="15" fill="rgb(245,217,50)" fg:x="8" fg:w="748"/><text x="1.3082%" y="367.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>profile_parser::main (748 samples, 98.94%)</title><rect x="1.0582%" y="341" width="98.9418%" height="15" fill="rgb(213,201,24)" fg:x="8" fg:w="748"/><text x="1.3082%" y="351.50">profile_parser::main</text></g><g><title>vexy_json_core::parser::parse (560 samples, 74.07%)</title><rect x="25.9259%" y="325" width="74.0741%" height="15" fill="rgb(248,116,28)" fg:x="196" fg:w="560"/><text x="26.1759%" y="335.50">vexy_json_core::parser::parse</text></g><g><title>vexy_json_core::parser::Parser::parse (560 samples, 74.07%)</title><rect x="25.9259%" y="309" width="74.0741%" height="15" fill="rgb(219,72,43)" fg:x="196" fg:w="560"/><text x="26.1759%" y="319.50">vexy_json_core::parser::Parser::parse</text></g><g><title>vexy_json_core::parser::Parser::parse_value (288 samples, 38.10%)</title><rect x="61.9048%" y="293" width="38.0952%" height="15" fill="rgb(209,138,14)" fg:x="468" fg:w="288"/><text x="62.1548%" y="303.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (7 samples, 0.93%)</title><rect x="99.0741%" y="277" width="0.9259%" height="15" fill="rgb(222,18,33)" fg:x="749" fg:w="7"/><text x="99.3241%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.66%)</title><rect x="99.3386%" y="261" width="0.6614%" height="15" fill="rgb(213,199,7)" fg:x="751" fg:w="5"/><text x="99.5886%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.66%)</title><rect x="99.3386%" y="245" width="0.6614%" height="15" fill="rgb(250,110,10)" fg:x="751" fg:w="5"/><text x="99.5886%" y="255.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="99.6032%" y="229" width="0.3968%" height="15" fill="rgb(248,123,6)" fg:x="753" fg:w="3"/><text x="99.8532%" y="239.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.26%)</title><rect x="99.7354%" y="213" width="0.2646%" height="15" fill="rgb(206,91,31)" fg:x="754" fg:w="2"/><text x="99.9854%" y="223.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="99.8677%" y="197" width="0.1323%" height="15" fill="rgb(211,154,13)" fg:x="755" fg:w="1"/><text x="100.1177%" y="207.50"></text></g></svg></svg>