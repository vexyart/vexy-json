debug_lexer_test.rs:use vexy_json::*;
debug_lexer_test.rs-fn main() {
debug_lexer_test.rs-    let input = r#""\u12345""#;
debug_lexer_test.rs-    println!("Testing: {:?}", input);
--
README.md:# vexy_json Documentation & Web Tool
README.md-
README.md:This directory contains the documentation website and interactive web tool for vexy_json.
README.md-
README.md-## Recent Updates
README.md-
--
README.md-- **Real-time parsing** with debounced input
README.md-- **Syntax highlighting** for JSON input
README.md-- **Error highlighting** with position indicators
README.md:- **Example library** showcasing vexy_json features
README.md-- **Download functionality** for parsed results
README.md-- **Share URLs** for collaboration
README.md-- **Performance metrics** display
--
src/lib.rs-// this_file: src/lib.rs
src/lib.rs:// Main vexy_json library that re-exports core functionality
src/lib.rs-
src/lib.rs://! # vexy_json
src/lib.rs-//!
src/lib.rs-//! A Rust port of the JavaScript library `jsonic`, a forgiving JSON parser.
src/lib.rs-//!
--
src/lib.rs-//! ## Quick Start
src/lib.rs-//!
src/lib.rs-//! ```rust
src/lib.rs://! use vexy_json::parse;
src/lib.rs-//!
src/lib.rs-//! let result = parse(r#"{"key": "value"}"#).unwrap();
src/lib.rs-//! ```
src/lib.rs-
src/lib.rs-// Re-export core functionality
src/lib.rs:pub use vexy_json_core::{parse, parse_with_options, Error, Lexer, ParserOptions, Result};
src/lib.rs-
src/lib.rs-// Re-export streaming functionality
src/lib.rs:pub use vexy_json_core::{
src/lib.rs-    NdJsonParser, SimpleStreamingLexer, StreamingEvent, StreamingParser, StreamingValueBuilder,
src/lib.rs-};
src/lib.rs-
src/lib.rs-// Re-export AST types
src/lib.rs:pub use vexy_json_core::ast::{Number, Token, Value};
src/lib.rs-
src/lib.rs-// Re-export error types
src/lib.rs:pub use vexy_json_core::error::{Error as ParseError, Result as ParseResult, Span};
src/lib.rs-
src/lib.rs-// Re-export serde functionality if feature is enabled
src/lib.rs-#[cfg(feature = "serde")]
src/lib.rs:pub use vexy_json_serde::*;
--
AGENTS.md-
AGENTS.md-## 1. Project Overview
AGENTS.md-
AGENTS.md:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
AGENTS.md-
AGENTS.md-## 2. Development Status
AGENTS.md-
--
AGENTS.md-    -   `crates/core/examples/error_reporting.rs`: Example for error reporting.
AGENTS.md--   `crates/cli`: The command-line interface.
AGENTS.md-    -   `src/main.rs`: The entry point for the CLI binary.
AGENTS.md:-   `crates/c-api`: Provides C and C++ bindings, including `examples/`, `include/` (with `vexy_json.h` and `vexy_json.hpp`), and `src/lib.rs`.
AGENTS.md:-   `crates/python`: Provides Python bindings, including `python/vexy_json/__init__.py`, `src/lib.rs`, and `tests/`.
AGENTS.md:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`, with `src/lib.rs`.
AGENTS.md:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments, including `src/lib.rs` and `test.mjs`.
AGENTS.md--   `crates/test-utils`: Utility functions for testing, with `src/lib.rs`.
AGENTS.md-
AGENTS.md-### 3.2. Core Features
--
AGENTS.md-    -   Property-based tests are implemented using `proptest` in `tests/property_tests.rs`.
AGENTS.md--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
AGENTS.md--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json`.
AGENTS.md:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
AGENTS.md-
AGENTS.md-## 4. Development Workflow
AGENTS.md-
--
debug_test5.rs:use vexy_json::parse;
debug_test5.rs-
debug_test5.rs-fn main() {
debug_test5.rs-    // Test if the # is being treated as a comment
--
debug_test9.rs:use vexy_json::parse;
debug_test9.rs-
debug_test9.rs-fn main() {
debug_test9.rs-    // Test if the basic newline-separated object works
--
TODO.md-
TODO.md-## Phase 1: jsonic References Removal (IMMEDIATE)
TODO.md-
TODO.md:- [ ] Rename test files: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
TODO.md-- [ ] Update documentation: Remove "jsonic" from HTML, markdown files
TODO.md:- [ ] Clean code references: Replace "jsonic" with "vexy_json" in comments/variables
TODO.md-- [ ] Update configurations: Clean pyproject.toml and Cargo.toml references
TODO.md-- [ ] Verify completeness: Re-run grep to ensure no "jsonic" references remain
TODO.md-
--
docs/json-repair.md-### Simple Usage
docs/json-repair.md-
docs/json-repair.md-```rust
docs/json-repair.md:use vexy_json_core::repair::JsonRepairer;
docs/json-repair.md-
docs/json-repair.md-let mut repairer = JsonRepairer::new(10); // Max 10 repairs
docs/json-repair.md-let malformed = r#"{"key": "value", "missing": "quote}"#;
--
docs/json-repair.md-### Configuration
docs/json-repair.md-
docs/json-repair.md-```rust
docs/json-repair.md:use vexy_json_core::repair::advanced::{AdvancedJsonRepairer, TypeCoercionRules};
docs/json-repair.md-
docs/json-repair.md-let mut repairer = AdvancedJsonRepairer::new()
docs/json-repair.md-    .with_confidence_threshold(0.7)
--
docs/json-repair.md-Each repair strategy has a confidence score:
docs/json-repair.md-
docs/json-repair.md-```rust
docs/json-repair.md:use vexy_json_core::repair::advanced::RepairConfidence;
docs/json-repair.md-
docs/json-repair.md-let (fixed, strategies) = repairer.repair(input)?;
docs/json-repair.md-
--
docs/json-repair.md-### Detailed Repair Tracking
docs/json-repair.md-
docs/json-repair.md-```rust
docs/json-repair.md:use vexy_json_core::parser::parse_with_detailed_repair_tracking;
docs/json-repair.md-
docs/json-repair.md-let result = parse_with_detailed_repair_tracking(input, options)?;
docs/json-repair.md-
--
docs/json-repair.md-3. **Repair Tier**: Automatic repair for malformed JSON
docs/json-repair.md-
docs/json-repair.md-```rust
docs/json-repair.md:use vexy_json_core::parser::parse_with_fallback;
docs/json-repair.md-
docs/json-repair.md-let result = parse_with_fallback(input, options);
docs/json-repair.md-// Automatically tries all three tiers
--
docs/json-repair.md-### Tracking Repair History
docs/json-repair.md-
docs/json-repair.md-```rust
docs/json-repair.md:use vexy_json_core::repair::advanced::AdvancedJsonRepairer;
docs/json-repair.md-
docs/json-repair.md-let mut repairer = AdvancedJsonRepairer::new();
docs/json-repair.md-
--
docs/json-repair.md-### Implementing Custom Repairs
docs/json-repair.md-
docs/json-repair.md-```rust
docs/json-repair.md:use vexy_json_core::repair::advanced::{RepairStrategy, RepairAction, RepairType, RepairConfidence};
docs/json-repair.md-
docs/json-repair.md-fn create_custom_repair(input: &str) -> Option<RepairStrategy> {
docs/json-repair.md-    // Custom logic to detect and fix specific issues
--
docs/json-repair.md-### Automatic Repair During Parsing
docs/json-repair.md-
docs/json-repair.md-```rust
docs/json-repair.md:use vexy_json_core::{parse_with_options, ParserOptions};
docs/json-repair.md-
docs/json-repair.md-let options = ParserOptions {
docs/json-repair.md-    enable_repair: true,
--
docs/json-repair.md-### Repair-First Parsing
docs/json-repair.md-
docs/json-repair.md-```rust
docs/json-repair.md:use vexy_json_core::parser::parse_with_fallback;
docs/json-repair.md-
docs/json-repair.md-// Always try repair if normal parsing fails
docs/json-repair.md-let result = parse_with_fallback(input, options);
--
docs/json-repair.md-### Repair Failures
docs/json-repair.md-
docs/json-repair.md-```rust
docs/json-repair.md:use vexy_json_core::repair::JsonRepairer;
docs/json-repair.md-
docs/json-repair.md-let mut repairer = JsonRepairer::new(5);
docs/json-repair.md-match repairer.repair(input) {
--
CLAUDE.md-
CLAUDE.md-## 1. Project Overview
CLAUDE.md-
CLAUDE.md:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
CLAUDE.md-
CLAUDE.md-## 2. Development Status
CLAUDE.md-
--
CLAUDE.md-    -   `crates/core/examples/error_reporting.rs`: Example for error reporting.
CLAUDE.md--   `crates/cli`: The command-line interface.
CLAUDE.md-    -   `src/main.rs`: The entry point for the CLI binary.
CLAUDE.md:-   `crates/c-api`: Provides C and C++ bindings, including `examples/`, `include/` (with `vexy_json.h` and `vexy_json.hpp`), and `src/lib.rs`.
CLAUDE.md:-   `crates/python`: Provides Python bindings, including `python/vexy_json/__init__.py`, `src/lib.rs`, and `tests/`.
CLAUDE.md:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`, with `src/lib.rs`.
CLAUDE.md:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments, including `src/lib.rs` and `test.mjs`.
CLAUDE.md--   `crates/test-utils`: Utility functions for testing, with `src/lib.rs`.
CLAUDE.md-
CLAUDE.md-### 3.2. Core Features
--
CLAUDE.md-    -   Property-based tests are implemented using `proptest` in `tests/property_tests.rs`.
CLAUDE.md--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
CLAUDE.md--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json`.
CLAUDE.md:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
CLAUDE.md-
CLAUDE.md-## 4. Development Workflow
CLAUDE.md-
--
PLAN.md-1. **Old Naming References**: Only 2 files contain "zzson" - both in documentation (PLAN.md and issue 610.txt)
PLAN.md-2. **Python Bindings**: Test file previously used `VexyJSONParser` but was fixed to `VexyJsonParser`
PLAN.md-3. **Naming Conventions**: Generally consistent across languages:
PLAN.md:   - Rust: `vexy_json-*` (crate names), `VexyJson*` (types)
PLAN.md-   - C/C++: `VexyJson*` (types)
PLAN.md:   - Python: `vexy_json` (package), `VexyJson*` (classes)
PLAN.md-   - JavaScript: `VexyJson*` (classes)
PLAN.md-   - Documentation: "Vexy JSON" (with space)
PLAN.md-
--
PLAN.md-## Implementation Plan
PLAN.md-
PLAN.md-### Phase 1: jsonic References Removal (Immediate - 2-3 hours)
PLAN.md:1. **Rename test files**: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
PLAN.md-2. **Update documentation**: Remove "jsonic" from HTML, markdown, and tool descriptions
PLAN.md:3. **Clean code references**: Replace "jsonic" with "vexy_json" in comments and variable names
PLAN.md-4. **Update configurations**: Clean pyproject.toml and Cargo.toml references
PLAN.md-5. **Verify completeness**: Re-run grep to ensure no "jsonic" references remain
PLAN.md-
--
src/bin/test_strict_comment.rs:use vexy_json::{parse_with_options, ParserOptions};
src/bin/test_strict_comment.rs-
src/bin/test_strict_comment.rs-fn main() {
src/bin/test_strict_comment.rs-    println!("Testing strict parsing of '//comment':");
--
debug_test2.rs:use vexy_json::{parse_with_options, ParserOptions};
debug_test2.rs-
debug_test2.rs-fn main() {
debug_test2.rs-    let options = ParserOptions {
--
examples/debug_comma_one.rs:use vexy_json::parse;
examples/debug_comma_one.rs-
examples/debug_comma_one.rs-fn main() {
examples/debug_comma_one.rs-    println!("Testing: \",1\"");
--
oss-fuzz/build.sh-source $HOME/.cargo/env
oss-fuzz/build.sh-
oss-fuzz/build.sh-# Navigate to the project directory
oss-fuzz/build.sh:cd $SRC/vexy_json
oss-fuzz/build.sh-
oss-fuzz/build.sh-# Build the project
oss-fuzz/build.sh-cargo build --release
--
src/bin/test_full_parse.rs:use vexy_json_core::{parse, lexer::{Lexer, JsonLexer}, parser::{Parser, ParserOptions}};
src/bin/test_full_parse.rs-
src/bin/test_full_parse.rs-fn main() {
src/bin/test_full_parse.rs-    let input = "1.";
--
debug_test.rs:use vexy_json::parse;
debug_test.rs-
debug_test.rs-fn main() {
debug_test.rs-    let result = parse("a /* comment */ b");
--
debug_test10.rs:use vexy_json::parse;
debug_test10.rs-
debug_test10.rs-fn main() {
debug_test10.rs-    // Test the exact failing case
--
issues/602.txt:Read the @llms.txt code snapshot and into `vexify.txt` record all occurrences of all case variants of `vexy_json` found in the codebase. 
issues/602.txt-
issues/602.txt:Write a `vexify.py` tool that will generally replace both in the current codebase and in the entire git history the name `vexy_json` with `vexy json` but in a smart way: 
issues/602.txt-
issues/602.txt:- In filenames, it should replace `vexy_json` with `vexy_json`
issues/602.txt:- In code, it should replace `vexy_json` with `vexy_json` when it is used as a variable or function name, not in comments or strings.
issues/602.txt-- In documentation, comments and UI strings (like in HTML) it should replace the all-uppercase `Vexy JSON` with `Vexy JSON`.
issues/602.txt-- Cases like `VexyJSONConfig`, `VexyJSONWrapper` or so should become `VexyJSONConfig`, `VexyJSONWrapper`
issues/602.txt:- It should report all changes made, including filenames, code changes, and documentation updates, and then report the places where `vexy_json` still occurs.
issues/602.txt-
issues/602.txt-Make it Fire CLI. If `--deep` is given, it should also rewrite the git history. Without `--deep`, it should only modify the current state of the codebase.
--
docs/plugin-development.md-Let's create a simple plugin that converts all string values to uppercase:
docs/plugin-development.md-
docs/plugin-development.md-```rust
docs/plugin-development.md:use vexy_json_core::plugin::ParserPlugin;
docs/plugin-development.md:use vexy_json_core::ast::Value;
docs/plugin-development.md:use vexy_json_core::error::Result;
docs/plugin-development.md-use std::any::Any;
docs/plugin-development.md-
docs/plugin-development.md-pub struct UppercasePlugin;
--
docs/plugin-development.md-A plugin that validates data against business rules:
docs/plugin-development.md-
docs/plugin-development.md-```rust
docs/plugin-development.md:use vexy_json_core::error::Error;
docs/plugin-development.md-
docs/plugin-development.md-pub struct ValidationPlugin {
docs/plugin-development.md-    rules: Vec<ValidationRule>,
--
docs/plugin-development.md-#[cfg(test)]
docs/plugin-development.md-mod tests {
docs/plugin-development.md-    use super::*;
docs/plugin-development.md:    use vexy_json::parse;
docs/plugin-development.md-
docs/plugin-development.md-    #[test]
docs/plugin-development.md-    fn test_uppercase_plugin() {
--
docs/plugin-development.md-```rust
docs/plugin-development.md-#[test]
docs/plugin-development.md-fn test_plugin_integration() {
docs/plugin-development.md:    use vexy_json::{parse_with_options, ParserOptions};
docs/plugin-development.md-    
docs/plugin-development.md-    let json = r#"{"name": "john", "age": 25}"#;
docs/plugin-development.md-    let mut plugin = UppercasePlugin;
--
docs/plugin-development.md-    MacroError { macro_name: String },
docs/plugin-development.md-}
docs/plugin-development.md-
docs/plugin-development.md:impl From<PluginError> for vexy_json_core::error::Error {
docs/plugin-development.md-    fn from(err: PluginError) -> Self {
docs/plugin-development.md:        vexy_json_core::error::Error::Custom(err.to_string())
docs/plugin-development.md-    }
docs/plugin-development.md-}
docs/plugin-development.md-```
--
docs/plugin-development.md-
docs/plugin-development.md-```toml
docs/plugin-development.md-[package]
docs/plugin-development.md:name = "vexy_json-plugin-myplugin"
docs/plugin-development.md-version = "0.1.0"
docs/plugin-development.md-edition = "2021"
docs/plugin-development.md-
docs/plugin-development.md-[dependencies]
docs/plugin-development.md:vexy_json-core = "2.0"
docs/plugin-development.md-```
docs/plugin-development.md-
docs/plugin-development.md-## Best Practices Summary
--
src/bin/test_point_zero.rs:use vexy_json::{parse, Value, Number};
src/bin/test_point_zero.rs-
src/bin/test_point_zero.rs-fn main() {
src/bin/test_point_zero.rs-    let test_cases = vec!["1.0", "-1.0", "0.0", "+1.0"];
--
examples/test_single_brace.rs:use vexy_json::{parse, Value};
examples/test_single_brace.rs-
examples/test_single_brace.rs-fn main() {
examples/test_single_brace.rs-    println!("Testing single opening brace '{{'");
--
oss-fuzz/Dockerfile-    && rm -rf /var/lib/apt/lists/*
oss-fuzz/Dockerfile-
oss-fuzz/Dockerfile-# Copy the project source
oss-fuzz/Dockerfile:COPY . $SRC/vexy_json
oss-fuzz/Dockerfile-
oss-fuzz/Dockerfile-# Set the working directory
oss-fuzz/Dockerfile:WORKDIR $SRC/vexy_json
oss-fuzz/Dockerfile-
oss-fuzz/Dockerfile-# Copy the build script
oss-fuzz/Dockerfile-COPY oss-fuzz/build.sh $SRC/build.sh
--
examples/test_inline_comment.rs:use vexy_json::parse;
examples/test_inline_comment.rs-
examples/test_inline_comment.rs-fn main() {
examples/test_inline_comment.rs-    let test_cases = vec![
--
examples/test_comment_with_value.rs:use vexy_json::parse;
examples/test_comment_with_value.rs-
examples/test_comment_with_value.rs-fn main() {
examples/test_comment_with_value.rs-    let test_cases = vec![
--
bindings/python/src/vexy_json/__init__.py-"""
bindings/python/src/vexy_json/__init__.py:vexy_json - A forgiving JSON parser for Python
bindings/python/src/vexy_json/__init__.py-
bindings/python/src/vexy_json/__init__.py-This module provides a fast, forgiving JSON parser that can handle:
bindings/python/src/vexy_json/__init__.py-- Comments (// and /* */)
--
bindings/python/src/vexy_json/__init__.py-- Automatic error repair
bindings/python/src/vexy_json/__init__.py-
bindings/python/src/vexy_json/__init__.py-Example:
bindings/python/src/vexy_json/__init__.py:    >>> import vexy_json
bindings/python/src/vexy_json/__init__.py:    >>> data = vexy_json.parse('{ unquoted: true, /* comment */ trailing: "comma", }')
bindings/python/src/vexy_json/__init__.py-    >>> print(data)
bindings/python/src/vexy_json/__init__.py-    {'unquoted': True, 'trailing': 'comma'}
bindings/python/src/vexy_json/__init__.py-"""
bindings/python/src/vexy_json/__init__.py-
bindings/python/src/vexy_json/__init__.py:from .vexy_json import (
bindings/python/src/vexy_json/__init__.py-    parse,
bindings/python/src/vexy_json/__init__.py-    parse_with_options,
bindings/python/src/vexy_json/__init__.py-    dumps,
--
oss-fuzz/README.md-To set up OSS-Fuzz integration:
oss-fuzz/README.md-
oss-fuzz/README.md-1. Fork the [OSS-Fuzz repository](https://github.com/google/oss-fuzz)
oss-fuzz/README.md:2. Create a new directory under `projects/vexy_json/`
oss-fuzz/README.md:3. Copy the files from this directory to `projects/vexy_json/`
oss-fuzz/README.md-4. Submit a pull request to the OSS-Fuzz repository
oss-fuzz/README.md-
oss-fuzz/README.md-## Testing Locally
--
oss-fuzz/README.md-cd oss-fuzz
oss-fuzz/README.md-
oss-fuzz/README.md-# Copy project files
oss-fuzz/README.md:cp -r /path/to/vexy_json/oss-fuzz projects/vexy_json/
oss-fuzz/README.md-
oss-fuzz/README.md-# Build the project
oss-fuzz/README.md:python infra/helper.py build_image vexy_json
oss-fuzz/README.md:python infra/helper.py build_fuzzers vexy_json
oss-fuzz/README.md-
oss-fuzz/README.md-# Run fuzzers
oss-fuzz/README.md:python infra/helper.py run_fuzzer vexy_json json_structure
oss-fuzz/README.md-```
oss-fuzz/README.md-
oss-fuzz/README.md-## Fuzzing Targets
--
oss-fuzz/README.md-## Coverage
oss-fuzz/README.md-
oss-fuzz/README.md-Coverage reports are automatically generated and can be viewed at:
oss-fuzz/README.md:https://storage.googleapis.com/oss-fuzz-coverage/vexy_json/latest/index.html
oss-fuzz/README.md-
oss-fuzz/README.md-## Bug Reports
oss-fuzz/README.md-
--
issues/610.txt:Read the @llms.txt codebase snapshot. Note: recently we have renamed the project from `ZZSON` to `Vexy JSON`. We have search-replaced many strings like `zzson` to `vexy_json`, but mistakes may have been made. Please review all files, check if the changes have been performed consistently. . Run build scripts. Then into @PLAN.md write a detailed plan to improve and fix the code, and then into @TODO.md write a linearized version of that. Then /work on it. 
--
examples/test_comment.rs:use vexy_json::{parse, parse_with_options, Error, Lexer, ParserOptions, Token};
examples/test_comment.rs:use vexy_json_core::lexer::JsonLexer;
examples/test_comment.rs-
examples/test_comment.rs-fn main() {
examples/test_comment.rs-    let input = "a#b";
--
examples/debug_lookahead.rs:use vexy_json::{Lexer, Token};
examples/debug_lookahead.rs:use vexy_json_core::lexer::JsonLexer;
examples/debug_lookahead.rs-
examples/debug_lookahead.rs-fn main() {
examples/debug_lookahead.rs-    let input = "/*a:1*/\nb:2";
--
docs/feedback.md-
docs/feedback.md-# Feedback & Support
docs/feedback.md-
docs/feedback.md:We value your feedback and are committed to improving vexy_json based on user experiences. This page explains how to report issues, request features, and get support.
docs/feedback.md-
docs/feedback.md-## 🔧 Web Tool Feedback
docs/feedback.md-
docs/feedback.md:The [vexy_json web tool](tool.html) includes a built-in feedback system that makes it easy to report issues and suggest improvements.
docs/feedback.md-
docs/feedback.md-### How to Use the Feedback System
docs/feedback.md-
--
docs/feedback.md-
docs/feedback.md-## 📋 GitHub Issues
docs/feedback.md-
docs/feedback.md:For detailed bug reports and feature requests, use our [GitHub Issues](https://github.com/twardoch/vexy_json/issues):
docs/feedback.md-
docs/feedback.md-### Bug Reports
docs/feedback.md-
docs/feedback.md:Use the [Bug Report Template](https://github.com/twardoch/vexy_json/issues/new?template=bug_report.md) and include:
docs/feedback.md-
docs/feedback.md-- **Clear description** of the bug
docs/feedback.md-- **Steps to reproduce** the issue
--
docs/feedback.md-
docs/feedback.md-### Feature Requests
docs/feedback.md-
docs/feedback.md:Use the [Feature Request Template](https://github.com/twardoch/vexy_json/issues/new?template=feature_request.md) and include:
docs/feedback.md-
docs/feedback.md-- **Problem description** - What need does this address?
docs/feedback.md-- **Proposed solution** - What would you like to see?
--
docs/feedback.md-
docs/feedback.md-### Performance Issues
docs/feedback.md-
docs/feedback.md:Use the [Performance Issue Template](https://github.com/twardoch/vexy_json/issues/new?template=performance_issue.md) and include:
docs/feedback.md-
docs/feedback.md-- **Performance problem** description
docs/feedback.md-- **Input characteristics** (size, complexity)
--
docs/feedback.md-
docs/feedback.md-## 💬 Community Discussion
docs/feedback.md-
docs/feedback.md:For questions, ideas, and general discussion, use [GitHub Discussions](https://github.com/twardoch/vexy_json/discussions):
docs/feedback.md-
docs/feedback.md-- **Q&A** - Ask questions about usage
docs/feedback.md-- **Ideas** - Share feature ideas and get feedback
docs/feedback.md:- **Show and Tell** - Share how you're using vexy_json
docs/feedback.md-- **General** - Any other discussion
docs/feedback.md-
docs/feedback.md-## 📧 Direct Contact
docs/feedback.md-
docs/feedback.md-For security issues or private matters, you can contact the maintainer directly:
docs/feedback.md-
docs/feedback.md:- **Email**: adam+vexy_json@twardoch.com
docs/feedback.md-- **Security**: Please use responsible disclosure for security issues
docs/feedback.md-
docs/feedback.md-## 🎯 What Makes Good Feedback
--
docs/feedback.md-
docs/feedback.md----
docs/feedback.md-
docs/feedback.md:**Thank you for helping make vexy_json better!** Your feedback drives improvements and helps us build a tool that works well for everyone.
--
src/bin/debug_number.rs:use vexy_json::parse;
src/bin/debug_number.rs-
src/bin/debug_number.rs-fn main() {
src/bin/debug_number.rs-    let test_cases = vec!["1_000_000", "0x10", "0o77", "0b1010"];
--
oss-fuzz/project.yaml-# this_file: oss-fuzz/project.yaml
oss-fuzz/project.yaml-
oss-fuzz/project.yaml:homepage: "https://github.com/twardoch/pub/vexy_json"
oss-fuzz/project.yaml-language: rust
oss-fuzz/project.yaml-primary_contact: "adam@twardoch.com"
oss-fuzz/project.yaml-auto_ccs:
--
oss-fuzz/project.yaml-coverage_extra_args: "--target-dir=/tmp/coverage"
oss-fuzz/project.yaml-
oss-fuzz/project.yaml-# Additional configuration
oss-fuzz/project.yaml:main_repo: "https://github.com/twardoch/pub/vexy_json"
oss-fuzz/project.yaml-file_github_issue: true
--
issues/611.txt:Read @grep.txt (the result of running `rg -C 3 "vexy" > grep.txt`) to see a list of occurrences of the phrase `vexy`. Our project is called "Vexy JSON". Review where we should use `Vexy JSON` and were `VEXYJSON` and where `vexy_json` and where `vexy-json` etc. Then into @TODO.md write a VERY DETAILED plan that will discuss in which occurrences we should keep the current spelling, and in which occurrences we need to change it and how. 
--
Formula/vexy_json.rb-class VexyJson < Formula
Formula/vexy_json.rb-  desc "Forgiving JSON parser for Rust - a port of the JavaScript library jsonic"
Formula/vexy_json.rb:  homepage "https://github.com/twardoch/vexy_json"
Formula/vexy_json.rb:  url "https://github.com/twardoch/vexy_json/archive/refs/tags/v2.0.0.tar.gz"
Formula/vexy_json.rb-  sha256 "ce66e4af1e0aeb4f35456eb44aa82d5052e1a26c33adbaa1969284a5aa8c24ab"
Formula/vexy_json.rb-  license any_of: ["MIT", "Apache-2.0"]
Formula/vexy_json.rb:  head "https://github.com/twardoch/vexy_json.git", branch: "main"
Formula/vexy_json.rb-
Formula/vexy_json.rb-  depends_on "rust" => :build
Formula/vexy_json.rb-
--
Formula/vexy_json.rb-
Formula/vexy_json.rb-  test do
Formula/vexy_json.rb-    # Test basic JSON parsing
Formula/vexy_json.rb:    assert_equal '{"key":"value"}', pipe_output("#{bin}/vexy_json", '{"key": "value"}').chomp
Formula/vexy_json.rb-
Formula/vexy_json.rb-    # Test forgiving JSON features
Formula/vexy_json.rb-    forgiving_json = '{ unquoted: true, trailing: "comma", }'
Formula/vexy_json.rb:    output = pipe_output("#{bin}/vexy_json", forgiving_json)
Formula/vexy_json.rb-    assert_match /"unquoted":true/, output
Formula/vexy_json.rb-    assert_match /"trailing":"comma"/, output
Formula/vexy_json.rb-
Formula/vexy_json.rb-    # Test error repair
Formula/vexy_json.rb-    broken_json = '{ "broken": '
Formula/vexy_json.rb:    output = pipe_output("#{bin}/vexy_json --repair", broken_json)
Formula/vexy_json.rb-    assert_match /"broken":null/, output
Formula/vexy_json.rb-
Formula/vexy_json.rb-    # Test version
Formula/vexy_json.rb:    assert_match version.to_s, shell_output("#{bin}/vexy_json --version")
Formula/vexy_json.rb-  end
Formula/vexy_json.rb-end
--
benches/comparison.rs-use criterion::{criterion_group, criterion_main, BenchmarkId, Criterion};
benches/comparison.rs-use std::fs;
benches/comparison.rs-use std::hint::black_box;
benches/comparison.rs:use vexy_json::parse;
benches/comparison.rs-
benches/comparison.rs-fn get_json_data(name: &str) -> String {
benches/comparison.rs-    fs::read_to_string(format!("benches/data/{}.json", name)).expect("Unable to read file")
--
benches/comparison.rs-
benches/comparison.rs-    for &case in test_cases {
benches/comparison.rs-        let json_data = get_json_data(case);
benches/comparison.rs:        group.bench_with_input(BenchmarkId::new("vexy_json", case), &json_data, |b, data| {
benches/comparison.rs-            b.iter(|| parse(black_box(data)))
benches/comparison.rs-        });
benches/comparison.rs-    }
--
src/bin/test_parse.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
src/bin/test_parse.rs-
src/bin/test_parse.rs-fn main() {
src/bin/test_parse.rs-    println!("Testing parse('1.'):");
--
scripts/verify_features.js-
scripts/verify_features.js-/**
scripts/verify_features.js- * Verification script to test all forgiving JSON features
scripts/verify_features.js: * This tests the core vexy_json functionality to ensure everything works correctly
scripts/verify_features.js- */
scripts/verify_features.js-
scripts/verify_features.js-const { exec } = require('child_process');
--
scripts/verify_features.js-        name: 'Complex Mixed Features',
scripts/verify_features.js-        input: `{
scripts/verify_features.js-  // Configuration with comments
scripts/verify_features.js:  name: 'vexy_json',           // Unquoted key, single quotes
scripts/verify_features.js-  version: "1.1.0",        /* Version string */
scripts/verify_features.js-  features: [
scripts/verify_features.js-    "comments",
--
scripts/verify_features.js-];
scripts/verify_features.js-
scripts/verify_features.js-/**
scripts/verify_features.js: * Run a test case using the vexy_json binary
scripts/verify_features.js- */
scripts/verify_features.js-function runTest(testCase) {
scripts/verify_features.js-    return new Promise((resolve) => {
scripts/verify_features.js-        try {
scripts/verify_features.js-            // Instead of writing to file, pipe directly to the binary
scripts/verify_features.js:            const command = `echo '${testCase.input.replace(/'/g, "'\\''")}' | cargo run --bin vexy_json`;
scripts/verify_features.js-
scripts/verify_features.js:            // Run vexy_json with piped input
scripts/verify_features.js-            exec(command, (error, stdout, stderr) => {
scripts/verify_features.js-
scripts/verify_features.js-                const result = {
--
scripts/verify_features.js- * Run all tests and generate report
scripts/verify_features.js- */
scripts/verify_features.js-async function runAllTests() {
scripts/verify_features.js:    console.log('🧪 Running vexy_json Feature Verification Tests');
scripts/verify_features.js-    console.log('='.repeat(60));
scripts/verify_features.js-
scripts/verify_features.js-    const results = [];
--
issues/104.txt:Analyze the entire codebase. Then in ./IDEAS.md write an extensive spec that will describe in minute detail step-by-step how to extend the vexy_json parser with the functionality of INTELLIGENT completion of opening or closing braces. Right now our tolerant and forgiving JSON-esque parser can fix various things but it cannot overcome the situation of a braces mismatch. The original reference jsonic parser written in JS, of which vexy_json is a Rust port, does not have that functionality. But I want it.
issues/104.txt-
--
src/bin/test_positive_numbers.rs:use vexy_json::parse;
src/bin/test_positive_numbers.rs-
src/bin/test_positive_numbers.rs-fn main() {
src/bin/test_positive_numbers.rs-    let test_cases = vec!["+1", "+1.", "+1.0", "+123", "+0", "+0.9"];
--
src/bin/test_trailing_decimal.rs:use vexy_json::{parse, Value, Number};
src/bin/test_trailing_decimal.rs-
src/bin/test_trailing_decimal.rs-fn main() {
src/bin/test_trailing_decimal.rs-    let test_cases = vec!["1.", "-1.", "+1.", "0.", "123."];
--
examples/profile_parser.rs-// this_file: examples/profile_parser.rs
examples/profile_parser.rs-
examples/profile_parser.rs:use vexy_json::parse;
examples/profile_parser.rs-
examples/profile_parser.rs-fn main() {
examples/profile_parser.rs-    // Heavy workload for profiling
--
src/bin/test_dot_numbers.rs:use vexy_json::parse;
src/bin/test_dot_numbers.rs-
src/bin/test_dot_numbers.rs-fn main() {
src/bin/test_dot_numbers.rs-    let test_cases = vec![".1", "-.1", "+.1", ".0", ".123"];
--
bindings/python/src/lib.rs-use pyo3::types::{PyDict, PyList};
bindings/python/src/lib.rs-use pythonize::{depythonize, pythonize};
bindings/python/src/lib.rs-use serde_json::Value as JsonValue;
bindings/python/src/lib.rs:use vexy_json_core::{
bindings/python/src/lib.rs-    parse as core_parse, parse_with_options as core_parse_with_options, Parser, ParserOptions,
bindings/python/src/lib.rs-    RepairMode,
bindings/python/src/lib.rs-};
--
bindings/python/src/lib.rs-    }
bindings/python/src/lib.rs-}
bindings/python/src/lib.rs-
bindings/python/src/lib.rs:/// Parser options for configuring vexy_json behavior
bindings/python/src/lib.rs-#[pyclass]
bindings/python/src/lib.rs-#[derive(Clone)]
bindings/python/src/lib.rs-struct Options {
--
bindings/python/src/lib.rs-    repairs: Vec<Repair>,
bindings/python/src/lib.rs-}
bindings/python/src/lib.rs-
bindings/python/src/lib.rs:/// vexy_json parser instance
bindings/python/src/lib.rs-#[pyclass]
bindings/python/src/lib.rs-struct Parser {
bindings/python/src/lib.rs:    parser: vexy_json_core::Parser,
bindings/python/src/lib.rs-}
bindings/python/src/lib.rs-
bindings/python/src/lib.rs-#[pymethods]
--
bindings/python/src/lib.rs-    fn new(options: Option<Options>) -> Self {
bindings/python/src/lib.rs-        let opts = options.map(|o| o.inner).unwrap_or_default();
bindings/python/src/lib.rs-        Parser {
bindings/python/src/lib.rs:            parser: vexy_json_core::Parser::new(opts),
bindings/python/src/lib.rs-        }
bindings/python/src/lib.rs-    }
bindings/python/src/lib.rs-
--
bindings/python/src/lib.rs-    Ok(())
bindings/python/src/lib.rs-}
bindings/python/src/lib.rs-
bindings/python/src/lib.rs:/// Get vexy_json version
bindings/python/src/lib.rs-#[pyfunction]
bindings/python/src/lib.rs-fn version() -> &'static str {
bindings/python/src/lib.rs-    env!("CARGO_PKG_VERSION")
--
bindings/python/src/lib.rs-    pythonize(py, value).map_err(|e| PyValueError::new_err(format!("Conversion error: {}", e)))
bindings/python/src/lib.rs-}
bindings/python/src/lib.rs-
bindings/python/src/lib.rs:/// vexy_json - A forgiving JSON parser for Python
bindings/python/src/lib.rs-#[pymodule]
bindings/python/src/lib.rs:fn vexy_json(m: &Bound<'_, PyModule>) -> PyResult<()> {
bindings/python/src/lib.rs-    m.add_class::<ParseError>()?;
bindings/python/src/lib.rs-    m.add_class::<Repair>()?;
bindings/python/src/lib.rs-    m.add_class::<Options>()?;
--
examples/debug_implicit_array.rs:use vexy_json::parse;
examples/debug_implicit_array.rs-
examples/debug_implicit_array.rs-fn main() {
examples/debug_implicit_array.rs-    let input = "'a', 'b', 'c'";
--
src/bin/trace_parse.rs:use vexy_json_core::parse;
src/bin/trace_parse.rs-
src/bin/trace_parse.rs-fn main() {
src/bin/trace_parse.rs-    let input = r#"{"a": 1
--
WORK.md-#### Phase 0: Critical Fixes (Completed)
WORK.md-
WORK.md-1. **Fixed C API struct naming mismatch**
WORK.md:   - Changed `vexy_json_parser_options` to `VexyJsonParserOptions` in vexy_json.h:135
WORK.md-   - This prevents C/C++ linking failures
WORK.md-
WORK.md-2. **Fixed Python test naming issues**
WORK.md:   - Updated test_vexy_json.py to use `VexyJSON` instead of `VEXYJSON`
WORK.md-   - Fixed imports: `VEXYJSONParser` → `VexyJSONParser`, `VEXYJSONConfig` → `VexyJSONConfig`
WORK.md-   - Fixed class name: `VEXYJSONWrapper` → `VexyJSONWrapper`
WORK.md-
--
WORK.md-### Build Output Summary
WORK.md-
WORK.md-```
WORK.md:cargo build --package vexy_json-core --package vexy_json-cli
WORK.md-Finished `dev` profile [unoptimized + debuginfo] target(s) in 9.59s
WORK.md:warning: `vexy_json-core` (lib) generated 24 warnings
WORK.md-```
WORK.md-
WORK.md-### 🔄 Current Work Items
--
Formula/README.md:# Homebrew Formula for vexy_json
Formula/README.md-
Formula/README.md:This directory contains the Homebrew formula for installing vexy_json on macOS.
Formula/README.md-
Formula/README.md-## Installation
Formula/README.md-
Formula/README.md:To install vexy_json using this formula:
Formula/README.md-
Formula/README.md-```bash
Formula/README.md-# Add this tap (once the formula is in a tap repository)
Formula/README.md:brew tap twardoch/vexy_json
Formula/README.md-
Formula/README.md:# Install vexy_json
Formula/README.md:brew install vexy_json
Formula/README.md-```
Formula/README.md-
Formula/README.md-Or install directly from the formula file:
Formula/README.md-
Formula/README.md-```bash
Formula/README.md:brew install ./Formula/vexy_json.rb
Formula/README.md-```
Formula/README.md-
Formula/README.md-## Testing the Formula
--
Formula/README.md-To test the formula locally:
Formula/README.md-
Formula/README.md-```bash
Formula/README.md:brew install --build-from-source ./Formula/vexy_json.rb
Formula/README.md:brew test vexy_json
Formula/README.md:brew audit --strict vexy_json
Formula/README.md-```
Formula/README.md-
Formula/README.md-## Updating the Formula
--
Formula/README.md-1. Update the `url` to point to the new release tag
Formula/README.md-2. Update the SHA256 checksum:
Formula/README.md-   ```bash
Formula/README.md:   curl -sL https://github.com/twardoch/vexy_json/archive/refs/tags/vX.Y.Z.tar.gz | shasum -a 256
Formula/README.md-   ```
Formula/README.md-3. Test the formula thoroughly
Formula/README.md-4. Submit to Homebrew or update your tap
--
examples/streaming_example.rs-
examples/streaming_example.rs-//! Example demonstrating the streaming parser capabilities.
examples/streaming_example.rs-
examples/streaming_example.rs:use vexy_json::{NdJsonParser, StreamingEvent, StreamingParser};
examples/streaming_example.rs-
examples/streaming_example.rs-fn main() -> Result<(), Box<dyn std::error::Error>> {
examples/streaming_example.rs-    println!("=== Streaming Parser Example ===\n");
--
examples/simple.rs:use vexy_json::{parse, parse_with_options, Lexer, ParserOptions, Token};
examples/simple.rs-
examples/simple.rs-fn debug_string_positions(input: &str) {
examples/simple.rs-    println!("\nString positions in: {:?}", input);
--
benches/real_world_benchmarks.rs-
benches/real_world_benchmarks.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
benches/real_world_benchmarks.rs-use std::fs;
benches/real_world_benchmarks.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
benches/real_world_benchmarks.rs-
benches/real_world_benchmarks.rs-fn collect_benchmark_files() -> Vec<(String, String, String)> {
benches/real_world_benchmarks.rs-    let mut files = Vec::new();
--
src/bin/test_implicit.rs:use vexy_json_core::{parse, parse_with_options, ParserOptions};
src/bin/test_implicit.rs-
src/bin/test_implicit.rs-fn main() {
src/bin/test_implicit.rs-    // Test with default options (implicit top level enabled)
--
scripts/release.sh-    run_cmd "mkdir -p '$BUILD_DIR'" "Create build directory"
scripts/release.sh-    
scripts/release.sh-    # Build release binary
scripts/release.sh:    run_cmd "cargo build --release --bin vexy_json" "Build release CLI binary"
scripts/release.sh-    
scripts/release.sh-    # Build library
scripts/release.sh-    run_cmd "cargo build --release --lib" "Build release library"
--
scripts/release.sh-    
scripts/release.sh-    # Copy artifacts
scripts/release.sh-    if [ "$DRY_RUN" = false ]; then
scripts/release.sh:        if [[ -f "target/release/vexy_json" ]]; then
scripts/release.sh:            cp "target/release/vexy_json" "$BUILD_DIR/vexy_json-$VERSION-$(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]')"
scripts/release.sh-        else
scripts/release.sh:            warning "Release binary not found at target/release/vexy_json"
scripts/release.sh-        fi
scripts/release.sh-    fi
scripts/release.sh-    
--
scripts/release.sh-    
scripts/release.sh-    log "Building macOS installer..."
scripts/release.sh-    
scripts/release.sh:    local app_name="vexy_json"
scripts/release.sh-    local installer_dir="$BUILD_DIR/macos-installer"
scripts/release.sh:    local dmg_name="vexy_json-$VERSION-macos.dmg"
scripts/release.sh-    
scripts/release.sh-    run_cmd "mkdir -p '$installer_dir/pkg-root/usr/local/bin'" "Create installer structure"
scripts/release.sh-    
scripts/release.sh-    # Copy binary
scripts/release.sh-    if [ "$DRY_RUN" = false ]; then
scripts/release.sh:        cp "target/release/vexy_json" "$installer_dir/pkg-root/usr/local/bin/"
scripts/release.sh-    fi
scripts/release.sh-    
scripts/release.sh-    # Create package
scripts/release.sh:    run_cmd "pkgbuild --root '$installer_dir/pkg-root' --identifier 'com.twardoch.vexy_json' --version '$VERSION' --install-location '/' '$installer_dir/$app_name.pkg'" "Create pkg installer"
scripts/release.sh-    
scripts/release.sh-    # Create DMG
scripts/release.sh-    local dmg_temp_dir="$installer_dir/dmg-temp"
--
scripts/release.sh-        cat > "$dmg_temp_dir/README.txt" << EOF
scripts/release.sh-VEXY_JSON v$VERSION
scripts/release.sh-
scripts/release.sh:This package will install the vexy_json command-line tool to /usr/local/bin.
scripts/release.sh-
scripts/release.sh:After installation, you can use vexy_json from the command line:
scripts/release.sh:  echo '{"key": "value"}' | vexy_json
scripts/release.sh-
scripts/release.sh:For more information, visit: https://github.com/twardoch/vexy_json
scripts/release.sh-EOF
scripts/release.sh-    fi
scripts/release.sh-    
--
scripts/release.sh-    
scripts/release.sh-    # Build static binary for Linux
scripts/release.sh-    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
scripts/release.sh:        run_cmd "cargo build --release --target x86_64-unknown-linux-musl --bin vexy_json" "Build static Linux binary"
scripts/release.sh-        
scripts/release.sh-        if [ "$DRY_RUN" = false ]; then
scripts/release.sh:            cp "target/x86_64-unknown-linux-musl/release/vexy_json" "$BUILD_DIR/vexy_json-$VERSION-x86_64-linux-musl"
scripts/release.sh-        fi
scripts/release.sh-    else
scripts/release.sh-        warning "Skipping Linux builds (not on Linux)"
--
scripts/release.sh-create_release_archive() {
scripts/release.sh-    log "Creating release archives..."
scripts/release.sh-    
scripts/release.sh:    local archive_dir="$BUILD_DIR/vexy_json-$VERSION"
scripts/release.sh-    run_cmd "mkdir -p '$archive_dir'" "Create archive directory"
scripts/release.sh-    
scripts/release.sh-    if [ "$DRY_RUN" = false ]; then
--
scripts/release.sh-        done
scripts/release.sh-        
scripts/release.sh-        # Copy built artifacts
scripts/release.sh:        if [[ -f "target/release/vexy_json" ]]; then
scripts/release.sh:            cp "target/release/vexy_json" "$archive_dir/" || warning "Failed to copy binary"
scripts/release.sh-        else
scripts/release.sh-            warning "No release binary found to include in archive"
scripts/release.sh-        fi
scripts/release.sh-        
scripts/release.sh-        # Create source archive
scripts/release.sh:        git archive --format=tar.gz --prefix="vexy_json-$VERSION-src/" HEAD > "$BUILD_DIR/vexy_json-$VERSION-src.tar.gz" || {
scripts/release.sh-            warning "Failed to create source archive"
scripts/release.sh-        }
scripts/release.sh-        
scripts/release.sh-        # Create binary archive if we have files
scripts/release.sh-        if [[ -d "$archive_dir" ]] && [[ -n $(ls -A "$archive_dir") ]]; then
scripts/release.sh-            cd "$BUILD_DIR"
scripts/release.sh:            tar -czf "vexy_json-$VERSION-$(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]').tar.gz" "vexy_json-$VERSION" || {
scripts/release.sh-                warning "Failed to create binary archive"
scripts/release.sh-            }
scripts/release.sh-            cd "$PROJECT_ROOT"
--
scripts/release.sh-    
scripts/release.sh-    if ! command -v gh &> /dev/null; then
scripts/release.sh-        warning "GitHub CLI not found, skipping automated release creation"
scripts/release.sh:        info "Manually create release at: https://github.com/twardoch/vexy_json/releases/new?tag=v$VERSION"
scripts/release.sh-        return 0
scripts/release.sh-    fi
scripts/release.sh-    
--
scripts/release.sh-## 📦 Installation
scripts/release.sh-
scripts/release.sh-```bash
scripts/release.sh:cargo install vexy_json --version 2.0.0
scripts/release.sh-```
scripts/release.sh-
scripts/release.sh-Or download pre-built binaries from the assets below.
scripts/release.sh-
scripts/release.sh----
scripts/release.sh-
scripts/release.sh:**Full Changelog**: https://github.com/twardoch/vexy_json/compare/v1.5.27...v2.0.0
scripts/release.sh-EOF
scripts/release.sh-    fi
scripts/release.sh-    
scripts/release.sh-    # Collect assets
scripts/release.sh-    local assets=()
scripts/release.sh:    if [[ -f "$BUILD_DIR/vexy_json-$VERSION-macos.dmg" ]]; then
scripts/release.sh:        assets+=("$BUILD_DIR/vexy_json-$VERSION-macos.dmg")
scripts/release.sh-    fi
scripts/release.sh-    
scripts/release.sh-    # Find all tar.gz files
--
scripts/release.sh-    
scripts/release.sh-    warning "Crates.io publishing requires manual intervention"
scripts/release.sh-    info "Run the following commands to publish:"
scripts/release.sh:    info "  cargo publish -p vexy_json-test-utils"
scripts/release.sh:    info "  cargo publish -p vexy_json-core"
scripts/release.sh:    info "  cargo publish -p vexy_json-serde"
scripts/release.sh:    info "  cargo publish -p vexy_json-cli"
scripts/release.sh:    info "  cargo publish -p vexy_json-wasm"
scripts/release.sh:    info "  cargo publish -p vexy_json-c-api"
scripts/release.sh:    info "  cargo publish -p vexy_json"
scripts/release.sh-    
scripts/release.sh-    if [ "$DRY_RUN" = false ]; then
scripts/release.sh-        read -p "Publish to crates.io now? (y/N): " -n 1 -r
scripts/release.sh-        echo
scripts/release.sh-        if [[ $REPLY =~ ^[Yy]$ ]]; then
scripts/release.sh-            # Publish in dependency order
scripts/release.sh:            run_cmd "cargo publish -p vexy_json-test-utils" "Publish vexy_json-test-utils"
scripts/release.sh-            sleep 10  # Wait for crates.io to process
scripts/release.sh:            run_cmd "cargo publish -p vexy_json-core" "Publish vexy_json-core"
scripts/release.sh-            sleep 10
scripts/release.sh:            run_cmd "cargo publish -p vexy_json-serde" "Publish vexy_json-serde"
scripts/release.sh-            sleep 10
scripts/release.sh:            run_cmd "cargo publish -p vexy_json-cli" "Publish vexy_json-cli"
scripts/release.sh-            sleep 10
scripts/release.sh:            run_cmd "cargo publish -p vexy_json-wasm" "Publish vexy_json-wasm"
scripts/release.sh-            sleep 10
scripts/release.sh:            run_cmd "cargo publish -p vexy_json-c-api" "Publish vexy_json-c-api"
scripts/release.sh-            sleep 10
scripts/release.sh:            run_cmd "cargo publish -p vexy_json" "Publish main vexy_json crate"
scripts/release.sh-            
scripts/release.sh-            success "All crates published to crates.io"
scripts/release.sh-        fi
--
scripts/release.sh-    echo -e "${BLUE}Release artifacts created in: $BUILD_DIR${NC}"
scripts/release.sh-    echo -e "${BLUE}Git tag created and pushed: v$VERSION${NC}"
scripts/release.sh-    echo -e "${BLUE}Next steps:${NC}"
scripts/release.sh:    echo "  1. Verify GitHub release: https://github.com/twardoch/vexy_json/releases"
scripts/release.sh-    echo "  2. Update documentation websites"
scripts/release.sh-    echo "  3. Announce the release"
scripts/release.sh-    echo
--
docs/assets/js/examples.js-// this_file: docs/assets/js/examples.js
docs/assets/js/examples.js-
docs/assets/js/examples.js-/**
docs/assets/js/examples.js: * Comprehensive examples system for the vexy_json web tool
docs/assets/js/examples.js- * Showcases all forgiving JSON parsing features
docs/assets/js/examples.js- */
docs/assets/js/examples.js-
--
docs/assets/js/examples.js-    category: 'Standard',
docs/assets/js/examples.js-    description: 'Standard JSON parsing according to RFC 8259',
docs/assets/js/examples.js-    content: `{
docs/assets/js/examples.js:  "name": "vexy_json",
docs/assets/js/examples.js-  "version": "%%VEXY_JSON_VERSION%%",
docs/assets/js/examples.js-  "description": "A forgiving JSON parser for Rust",
docs/assets/js/examples.js-  "features": ["forgiving", "fast", "rust"],
--
docs/assets/js/examples.js-  advanced: {
docs/assets/js/examples.js-    title: 'All Features Combined',
docs/assets/js/examples.js-    category: 'Advanced',
docs/assets/js/examples.js:    description: 'Showcase of all vexy_json forgiving features together',
docs/assets/js/examples.js-    content: `// Advanced configuration example
docs/assets/js/examples.js:// Shows all vexy_json features working together
docs/assets/js/examples.js-
docs/assets/js/examples.js-name: "Advanced Demo"           // Unquoted key
docs/assets/js/examples.js-version: '%%VEXY_JSON_VERSION%%'               // Single quotes
--
Cargo.toml-
Cargo.toml-
Cargo.toml-[package]
Cargo.toml:name = "vexy_json"
Cargo.toml-version = "1.0.0"
Cargo.toml-edition = "2021"
Cargo.toml-description = "A forgiving JSON parser that accepts non-standard JSON formats"
Cargo.toml-license = "MIT OR Apache-2.0"
Cargo.toml:repository = "https://github.com/twardoch/pub/vexy_json"
Cargo.toml:homepage = "https://github.com/twardoch/pub/vexy_json"
Cargo.toml-keywords = [ "json", "parser", "forgiving", "relaxed", "lenient" ]
Cargo.toml-categories = [ "parsing", "data-structures", "web-programming" ]
Cargo.toml-
Cargo.toml-
Cargo.toml:[dependencies.vexy_json-core]
Cargo.toml-path = "crates/core"
Cargo.toml-
Cargo.toml-
Cargo.toml:[dependencies.vexy_json-serde]
Cargo.toml-path = "crates/serde"
Cargo.toml-optional = true
Cargo.toml-
Cargo.toml-
Cargo.toml-[features]
Cargo.toml-default = [ "serde" ]
Cargo.toml:serde = [ "vexy_json-serde" ]
Cargo.toml-
Cargo.toml-
Cargo.toml-[dev-dependencies]
--
issues/105.txt-Analyze the entire `./llms.txt` codebase snapshot. 
issues/105.txt-
issues/105.txt:Our code, `vexy_json` is a Rust port of the `jsonic` parser written in JS. Neither of the tolerant and forgiving JSON-esque parsers (our `vexy_json` or the original `jsonic`) can overcome the problem of mismatching brackets or braces. 
issues/105.txt-
issues/105.txt-It would be very useful if this were possible. 
issues/105.txt-
--
issues/105.txt-3. The parse continues after the object. The AST now has the `"bar"` key mapped to an array node that is marked incomplete/error, but the `"foo":123` entry remains intact, and the overall AST is a top-level object node (rather than nothing).
issues/105.txt-4. The IDE can highlight the error at the position of `}` and possibly at end-of-file (saying one brace was inserted implicitly). But crucially, it can still allow navigation of the AST (e.g. the user can fold the object, see both keys, etc.).
issues/105.txt-
issues/105.txt:To implement similar features in a **Rust-based tolerant JSON parser** (like extending `vexy_json` or `jsonic` with mismatch recovery), one can combine these approaches:
issues/105.txt-
issues/105.txt-* **Insert error nodes** on-the-fly in the parser: e.g. if expecting `]` but got `}`, push an error and treat it as the end of the array. If end-of-file reached but stack isn’t empty, auto-insert the needed `]` or `}` tokens (recording errors for each).
issues/105.txt-* **Use a recovery combinator or manual check** after a failed parse: e.g. if a value parser fails inside an array, skip forward until a `]` or `}` is found, or until a comma that indicates the next element, then continue. This could be done by a loop scanning the char stream or by a higher-level library feature.
--
issues/105.txt-
issues/105.txt-Error-tolerant parsing is an active area of language tooling research and development. Techniques range from simple heuristics (skip to next `}`) to sophisticated grammar transformations that guarantee a parse for any input. **State-of-the-art academic work** (like PEG labeled failures or minimal edit algorithms) has started to find its way into practical tools, meaning library authors no longer have to choose between strict compliance and usability. Open-source libraries such as **Chumsky** (Rust) and **LPegLabel** (Lua) demonstrate that we can recover from errors while still using high-level parser definitions. And specialized JSON fixers like **`json_repair`**, **JSON5/JSONC parsers**, and **tolerantjson** for Python show concrete strategies to handle unbalanced delimiters, missing commas, and more in real JSON inputs.
issues/105.txt-
issues/105.txt:For implementing a tolerant parser in Rust (as with `vexy_json` or similar), a combined approach is recommended:
issues/105.txt-
issues/105.txt-* Use a **stack-based mechanism** or parser combinator to detect and auto-correct bracket mismatches in one pass.
issues/105.txt-* Represent the parse result in a way that **retains malformed parts** (e.g. an `Enum Value { Valid(...), Error(...) }`), so that no information is lost.
--
issues/105.txt-
issues/105.txt-Into `./issues/106.txt` write an extensive spec that will describe in minute detail step-by-step how to incorporate https://docs.rs/json-repair/ into our project. 
issues/105.txt-
issues/105.txt:The general idea is that it should be an option, and we should have a parser that parses using the fastest method first, then falls back to our core `vexy_json` slower one, and only if that fails falls back to `json-repair`. 
issues/105.txt-
--
examples/debug_comma_one_tokens.rs:use vexy_json::{Lexer, Token};
examples/debug_comma_one_tokens.rs:use vexy_json_core::lexer::JsonLexer;
examples/debug_comma_one_tokens.rs-
examples/debug_comma_one_tokens.rs-fn main() {
examples/debug_comma_one_tokens.rs-    let input = ",1";
--
src/bin/debug_comment_line_endings.rs:use vexy_json::{parse, Value};
src/bin/debug_comment_line_endings.rs-
src/bin/debug_comment_line_endings.rs-fn main() {
src/bin/debug_comment_line_endings.rs-    let inputs = vec![
--
examples/test_single_quote.rs:use vexy_json::Lexer;
examples/test_single_quote.rs:use vexy_json_core::lexer::JsonLexer;
examples/test_single_quote.rs-
examples/test_single_quote.rs-fn main() {
examples/test_single_quote.rs-    let mut lexer = Lexer::new("'hello'");
--
bindings/python/examples/config_parser.py-#!/usr/bin/env python3
bindings/python/examples/config_parser.py:"""Example: Using vexy_json for configuration files"""
bindings/python/examples/config_parser.py-
bindings/python/examples/config_parser.py:import vexy_json
bindings/python/examples/config_parser.py-import sys
bindings/python/examples/config_parser.py-
bindings/python/examples/config_parser.py-# Example configuration with forgiving JSON features
--
bindings/python/examples/config_parser.py-    """Load configuration from file or use default template"""
bindings/python/examples/config_parser.py-    if filename:
bindings/python/examples/config_parser.py-        try:
bindings/python/examples/config_parser.py:            config = vexy_json.load(filename)
bindings/python/examples/config_parser.py-            print(f"Loaded configuration from: {filename}")
bindings/python/examples/config_parser.py-        except Exception as e:
bindings/python/examples/config_parser.py-            print(f"Error loading config file: {e}")
bindings/python/examples/config_parser.py-            sys.exit(1)
bindings/python/examples/config_parser.py-    else:
bindings/python/examples/config_parser.py-        print("Using default configuration template")
bindings/python/examples/config_parser.py:        config = vexy_json.parse(CONFIG_TEMPLATE)
bindings/python/examples/config_parser.py-
bindings/python/examples/config_parser.py-    return config
bindings/python/examples/config_parser.py-
--
bindings/python/examples/config_parser.py-
bindings/python/examples/config_parser.py-
bindings/python/examples/config_parser.py-def main():
bindings/python/examples/config_parser.py:    print("vexy_json Configuration Parser Example")
bindings/python/examples/config_parser.py-    print("=" * 50)
bindings/python/examples/config_parser.py-
bindings/python/examples/config_parser.py-    # Load configuration
--
bindings/python/examples/config_parser.py-    # Example: Save configuration
bindings/python/examples/config_parser.py-    if not config_file:
bindings/python/examples/config_parser.py-        output_file = "config_example.json"
bindings/python/examples/config_parser.py:        vexy_json.dump(config, output_file, indent=2)
bindings/python/examples/config_parser.py-        print(f"\nSaved example configuration to: {output_file}")
bindings/python/examples/config_parser.py-
bindings/python/examples/config_parser.py-
--
scripts/package.json-{
scripts/package.json:    "name": "vexy_json-testing-scripts",
scripts/package.json-    "version": "1.0.0",
scripts/package.json:    "description": "Testing and monitoring scripts for vexy_json project",
scripts/package.json-    "main": "cross-browser-test.js",
scripts/package.json-    "scripts": {
scripts/package.json-        "test:browser": "node cross-browser-test.js",
--
scripts/package.json-        "testing",
scripts/package.json-        "cross-browser",
scripts/package.json-        "performance",
scripts/package.json:        "vexy_json"
scripts/package.json-    ],
scripts/package.json:    "author": "vexy_json team",
scripts/package.json-    "license": "MIT"
scripts/package.json-}
--
examples/test_implicit_objects.rs:use vexy_json::parse;
examples/test_implicit_objects.rs-
examples/test_implicit_objects.rs-fn main() {
examples/test_implicit_objects.rs-    let test_cases = vec![
--
docs/assets/js/browser-compatibility.js-// this_file: docs/assets/js/browser-compatibility.js
docs/assets/js/browser-compatibility.js:// Browser compatibility and feature detection for vexy_json web tool
docs/assets/js/browser-compatibility.js-
docs/assets/js/browser-compatibility.js-/**
docs/assets/js/browser-compatibility.js- * Browser compatibility utility class
--
crates/c-api/src/lib.rs://! C API for the vexy_json JSON parser.
crates/c-api/src/lib.rs-//!
crates/c-api/src/lib.rs-//! This crate provides a C-compatible API that can be used from C/C++
crates/c-api/src/lib.rs-//! applications and for creating language bindings.
--
crates/c-api/src/lib.rs-use libc::{c_char, size_t};
crates/c-api/src/lib.rs-use std::ffi::{CStr, CString};
crates/c-api/src/lib.rs-use std::ptr;
crates/c-api/src/lib.rs:use vexy_json_core::ast::Value;
crates/c-api/src/lib.rs:use vexy_json_core::{parse, parse_with_options, ParserOptions};
crates/c-api/src/lib.rs-
crates/c-api/src/lib.rs:/// Parser options for configuring vexy_json behavior
crates/c-api/src/lib.rs-#[repr(C)]
crates/c-api/src/lib.rs-pub struct VexyJsonParserOptions {
crates/c-api/src/lib.rs-    pub allow_comments: bool,
--
crates/c-api/src/lib.rs-    options: ParserOptions,
crates/c-api/src/lib.rs-}
crates/c-api/src/lib.rs-
crates/c-api/src/lib.rs:/// Get the version of the vexy_json library
crates/c-api/src/lib.rs-#[no_mangle]
crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_version() -> *const c_char {
crates/c-api/src/lib.rs-    static VERSION: &str = concat!(env!("CARGO_PKG_VERSION"), "\0");
crates/c-api/src/lib.rs-    VERSION.as_ptr() as *const c_char
crates/c-api/src/lib.rs-}
crates/c-api/src/lib.rs-
crates/c-api/src/lib.rs-/// Parse JSON with default options
crates/c-api/src/lib.rs-#[no_mangle]
crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parse(input: *const c_char) -> VexyJsonParseResult {
crates/c-api/src/lib.rs-    if input.is_null() {
crates/c-api/src/lib.rs-        return VexyJsonParseResult {
crates/c-api/src/lib.rs-            json: ptr::null_mut(),
--
crates/c-api/src/lib.rs-
crates/c-api/src/lib.rs-/// Parse JSON with custom options
crates/c-api/src/lib.rs-#[no_mangle]
crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parse_with_options(
crates/c-api/src/lib.rs-    input: *const c_char,
crates/c-api/src/lib.rs-    options: *const VexyJsonParserOptions,
crates/c-api/src/lib.rs-) -> VexyJsonParseResult {
--
crates/c-api/src/lib.rs-    }
crates/c-api/src/lib.rs-
crates/c-api/src/lib.rs-    if options.is_null() {
crates/c-api/src/lib.rs:        return vexy_json_parse(input);
crates/c-api/src/lib.rs-    }
crates/c-api/src/lib.rs-
crates/c-api/src/lib.rs-    let input_str = unsafe {
--
crates/c-api/src/lib.rs-
crates/c-api/src/lib.rs-/// Parse JSON and get detailed information including repairs
crates/c-api/src/lib.rs-#[no_mangle]
crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parse_detailed(
crates/c-api/src/lib.rs-    input: *const c_char,
crates/c-api/src/lib.rs-    options: *const VexyJsonParserOptions,
crates/c-api/src/lib.rs-) -> VexyJsonDetailedResult {
crates/c-api/src/lib.rs-    // For now, we'll implement this as a simple parse without repair tracking
crates/c-api/src/lib.rs-    // TODO: Implement actual repair tracking
crates/c-api/src/lib.rs-    let result = if options.is_null() {
crates/c-api/src/lib.rs:        vexy_json_parse(input)
crates/c-api/src/lib.rs-    } else {
crates/c-api/src/lib.rs:        vexy_json_parse_with_options(input, options)
crates/c-api/src/lib.rs-    };
crates/c-api/src/lib.rs-
crates/c-api/src/lib.rs-    VexyJsonDetailedResult {
--
crates/c-api/src/lib.rs-
crates/c-api/src/lib.rs-/// Create a new parser instance
crates/c-api/src/lib.rs-#[no_mangle]
crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parser_new(
crates/c-api/src/lib.rs-    options: *const VexyJsonParserOptions,
crates/c-api/src/lib.rs-) -> *mut VexyJsonParser {
crates/c-api/src/lib.rs-    let rust_options = if options.is_null() {
--
crates/c-api/src/lib.rs-
crates/c-api/src/lib.rs-/// Parse JSON using a parser instance
crates/c-api/src/lib.rs-#[no_mangle]
crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parser_parse(
crates/c-api/src/lib.rs-    parser: *mut VexyJsonParser,
crates/c-api/src/lib.rs-    input: *const c_char,
crates/c-api/src/lib.rs-) -> VexyJsonParseResult {
--
crates/c-api/src/lib.rs-
crates/c-api/src/lib.rs-/// Free a parser instance
crates/c-api/src/lib.rs-#[no_mangle]
crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parser_free(parser: *mut VexyJsonParser) {
crates/c-api/src/lib.rs-    if !parser.is_null() {
crates/c-api/src/lib.rs-        unsafe {
crates/c-api/src/lib.rs-            let _ = Box::from_raw(parser);
--
crates/c-api/src/lib.rs-
crates/c-api/src/lib.rs-/// Free a parse result
crates/c-api/src/lib.rs-#[no_mangle]
crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_free_result(result: VexyJsonParseResult) {
crates/c-api/src/lib.rs-    if !result.json.is_null() {
crates/c-api/src/lib.rs-        unsafe {
crates/c-api/src/lib.rs-            let _ = CString::from_raw(result.json);
--
crates/c-api/src/lib.rs-
crates/c-api/src/lib.rs-/// Free a detailed result
crates/c-api/src/lib.rs-#[no_mangle]
crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_free_detailed_result(result: VexyJsonDetailedResult) {
crates/c-api/src/lib.rs-    if !result.json.is_null() {
crates/c-api/src/lib.rs-        unsafe {
crates/c-api/src/lib.rs-            let _ = CString::from_raw(result.json);
--
crates/c-api/src/lib.rs-
crates/c-api/src/lib.rs-/// Get default parser options
crates/c-api/src/lib.rs-#[no_mangle]
crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_default_options() -> VexyJsonParserOptions {
crates/c-api/src/lib.rs-    let rust_options = ParserOptions::default();
crates/c-api/src/lib.rs-    rust_options_to_c(&rust_options)
crates/c-api/src/lib.rs-}
--
issues/107.txt:$ ./target/release/vexy_json --help
issues/107.txt-A forgiving JSON parser - Rust port of jsonic
issues/107.txt-
issues/107.txt:Usage: vexy_json
issues/107.txt-
issues/107.txt-Options:
issues/107.txt-  -h, --help     Print help
issues/107.txt-  -V, --version  Print version
issues/107.txt:(.venv) ~/Developer/vcs/github.twardoch/pub/vexy_json
issues/107.txt:[14:53:12] $ ./target/release/vexy_json-cli --help
issues/107.txt:Usage: vexy_json-cli
issues/107.txt-
issues/107.txt-Options:
issues/107.txt-  -h, --help     Print help
issues/107.txt-  -V, --version  Print version
issues/107.txt-
issues/107.txt-
issues/107.txt:——— why two executables? (vexy_json and vexy_json-cli) 
--
bindings/python/examples/basic_usage.py-#!/usr/bin/env python3
bindings/python/examples/basic_usage.py:"""Basic usage examples for vexy_json"""
bindings/python/examples/basic_usage.py-
bindings/python/examples/basic_usage.py:import vexy_json
bindings/python/examples/basic_usage.py-
bindings/python/examples/basic_usage.py-
bindings/python/examples/basic_usage.py-def main():
bindings/python/examples/basic_usage.py:    print("vexy_json - Forgiving JSON Parser Examples")
bindings/python/examples/basic_usage.py-    print("=" * 50)
bindings/python/examples/basic_usage.py-
bindings/python/examples/basic_usage.py-    # Example 1: Basic parsing
bindings/python/examples/basic_usage.py-    print("\n1. Basic JSON parsing:")
bindings/python/examples/basic_usage.py-    json_str = '{"name": "Alice", "age": 30}'
bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_str)
bindings/python/examples/basic_usage.py-    print(f"Input:  {json_str}")
bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
bindings/python/examples/basic_usage.py-
--
bindings/python/examples/basic_usage.py-        "city": "New York"
bindings/python/examples/basic_usage.py-    }
bindings/python/examples/basic_usage.py-    """
bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_with_comments)
bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
bindings/python/examples/basic_usage.py-
bindings/python/examples/basic_usage.py-    # Example 3: Trailing commas
bindings/python/examples/basic_usage.py-    print("\n3. JSON with trailing commas:")
bindings/python/examples/basic_usage.py-    json_trailing = '{"items": [1, 2, 3,], "total": 3,}'
bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_trailing)
bindings/python/examples/basic_usage.py-    print(f"Input:  {json_trailing}")
bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
bindings/python/examples/basic_usage.py-
bindings/python/examples/basic_usage.py-    # Example 4: Unquoted keys
bindings/python/examples/basic_usage.py-    print("\n4. JSON with unquoted keys:")
bindings/python/examples/basic_usage.py-    json_unquoted = '{name: "Charlie", age: 35, active: true}'
bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_unquoted)
bindings/python/examples/basic_usage.py-    print(f"Input:  {json_unquoted}")
bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
bindings/python/examples/basic_usage.py-
bindings/python/examples/basic_usage.py-    # Example 5: Single quotes
bindings/python/examples/basic_usage.py-    print("\n5. JSON with single quotes:")
bindings/python/examples/basic_usage.py-    json_single = "{'name': 'David', 'language': 'Python'}"
bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_single)
bindings/python/examples/basic_usage.py-    print(f"Input:  {json_single}")
bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
bindings/python/examples/basic_usage.py-
bindings/python/examples/basic_usage.py-    # Example 6: Implicit object
bindings/python/examples/basic_usage.py-    print("\n6. Implicit top-level object:")
bindings/python/examples/basic_usage.py-    json_implicit = 'name: "Eve", role: "developer", experience: 5'
bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_implicit)
bindings/python/examples/basic_usage.py-    print(f"Input:  {json_implicit}")
bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
bindings/python/examples/basic_usage.py-
--
bindings/python/examples/basic_usage.py-        }
bindings/python/examples/basic_usage.py-    }
bindings/python/examples/basic_usage.py-    """
bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_mixed)
bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
bindings/python/examples/basic_usage.py-
bindings/python/examples/basic_usage.py-    # Example 8: Using Options
bindings/python/examples/basic_usage.py-    print("\n8. Using custom options (strict mode):")
bindings/python/examples/basic_usage.py:    strict_opts = vexy_json.Options.strict()
bindings/python/examples/basic_usage.py-    try:
bindings/python/examples/basic_usage.py-        # This will fail with strict options
bindings/python/examples/basic_usage.py:        vexy_json.parse_with_options("{unquoted: true}", strict_opts)
bindings/python/examples/basic_usage.py-    except ValueError as e:
bindings/python/examples/basic_usage.py-        print(f"Expected error with strict mode: {e}")
bindings/python/examples/basic_usage.py-
bindings/python/examples/basic_usage.py-    # Example 9: Serialization
bindings/python/examples/basic_usage.py-    print("\n9. Serializing Python objects:")
bindings/python/examples/basic_usage.py-    data = {"users": ["Alice", "Bob"], "count": 2, "active": True}
bindings/python/examples/basic_usage.py:    json_output = vexy_json.dumps(data, indent=2)
bindings/python/examples/basic_usage.py-    print(f"Serialized:\n{json_output}")
bindings/python/examples/basic_usage.py-
bindings/python/examples/basic_usage.py-    # Example 10: Parser instance
bindings/python/examples/basic_usage.py-    print("\n10. Using Parser instance:")
bindings/python/examples/basic_usage.py:    parser = vexy_json.Parser()
bindings/python/examples/basic_usage.py-    results = []
bindings/python/examples/basic_usage.py-    for json_str in ['{"a": 1}', "[1, 2, 3]", '"hello"']:
bindings/python/examples/basic_usage.py-        results.append(parser.parse(json_str))
--
VERSIONING.md-- `/docs/pkg/package.json` - For web distribution
VERSIONING.md-
VERSIONING.md-### Other Files
VERSIONING.md:- `/Formula/vexy_json.rb` - Homebrew formula (releases only)
VERSIONING.md-- CLI `--version` output
VERSIONING.md-- API version info methods
VERSIONING.md-
--
scripts/cross-browser-test.js-// this_file: scripts/cross-browser-test.js
scripts/cross-browser-test.js-
scripts/cross-browser-test.js-/**
scripts/cross-browser-test.js: * Cross-Browser Testing Script for vexy_json Web Tool
scripts/cross-browser-test.js- * 
scripts/cross-browser-test.js: * This script provides automated cross-browser testing capabilities for the vexy_json web tool.
scripts/cross-browser-test.js- * It systematically tests functionality across different browsers and generates comprehensive reports.
scripts/cross-browser-test.js- * 
scripts/cross-browser-test.js- * Usage:
--
scripts/cross-browser-test.js-        }
scripts/cross-browser-test.js-    });
scripts/cross-browser-test.js-
scripts/cross-browser-test.js:    console.log('🚀 Starting Cross-Browser Testing for vexy_json Web Tool');
scripts/cross-browser-test.js-    console.log(`🎯 Target URL: ${TEST_CONFIG.url}`);
scripts/cross-browser-test.js-
scripts/cross-browser-test.js-    const allResults = [];
--
examples/trace_comment_parse.rs:use vexy_json::{parse_with_options, ParserOptions};
examples/trace_comment_parse.rs-
examples/trace_comment_parse.rs-fn main() {
examples/trace_comment_parse.rs-    let input = "// comment\n42";
--
examples/debug_test.rs:use vexy_json::parse;
examples/debug_test.rs-
examples/debug_test.rs-fn main() {
examples/debug_test.rs-    println!("Testing: /*a:1*/\nb:2");
--
docs/assets/js/tool.js-// this_file: docs/assets/js/tool.js
docs/assets/js/tool.js:// Main JavaScript for vexy_json web tool
docs/assets/js/tool.js-import init, {
docs/assets/js/tool.js-    parse_json,
docs/assets/js/tool.js-    parse_json_with_options,
--
docs/assets/js/tool.js-    get_parser_options,
docs/assets/js/tool.js-    stringify_value,
docs/assets/js/tool.js-    get_version_info
docs/assets/js/tool.js:} from '../../pkg/vexy_json_wasm.js';
docs/assets/js/tool.js-
docs/assets/js/tool.js-// Import enhanced components
docs/assets/js/tool.js-import { EXAMPLES, getExample } from './examples.js';
--
docs/assets/js/tool.js-                    respectDNT: true,
docs/assets/js/tool.js-                    anonymizeIPs: true,
docs/assets/js/tool.js-                    consentRequired: false, // Implicit consent for basic usage analytics
docs/assets/js/tool.js:                    trackingId: 'vexy_json-web-tool'
docs/assets/js/tool.js-                });
docs/assets/js/tool.js-            }
docs/assets/js/tool.js-        } catch (error) {
--
docs/assets/js/tool.js-
docs/assets/js/tool.js-            // Get version info and display it
docs/assets/js/tool.js-            const versionInfo = get_version_info();
docs/assets/js/tool.js:            console.log(`vexy_json ${versionInfo.version} loaded successfully`);
docs/assets/js/tool.js-            console.log(`Browser compatibility score: ${support.score}/100`);
docs/assets/js/tool.js-
docs/assets/js/tool.js-            // Hide loading, show interface
--
crates/wasm/src/lib.rs-use serde_json::Value;
crates/wasm/src/lib.rs-use wasm_bindgen::prelude::*;
crates/wasm/src/lib.rs:use vexy_json_core::{parse, parse_with_options, ParserOptions};
crates/wasm/src/lib.rs-
crates/wasm/src/lib.rs-#[wasm_bindgen]
crates/wasm/src/lib.rs-extern "C" {
--
crates/wasm/src/lib.rs-/// Stringify a JSON value with pretty printing
crates/wasm/src/lib.rs-#[wasm_bindgen]
crates/wasm/src/lib.rs-pub fn stringify_value(input: &str, indent: Option<u32>) -> Result<String, JsValue> {
crates/wasm/src/lib.rs:    // First parse with vexy_json to handle forgiving syntax
crates/wasm/src/lib.rs-    let value = parse(input).map_err(|e| JsValue::from_str(&e.to_string()))?;
crates/wasm/src/lib.rs-
crates/wasm/src/lib.rs-    // Convert to serde_json::Value
--
crates/c-api/examples/cpp_example.cpp-/**
crates/c-api/examples/cpp_example.cpp- * @file cpp_example.cpp
crates/c-api/examples/cpp_example.cpp: * @brief Example usage of the vexy_json C++ header-only wrapper
crates/c-api/examples/cpp_example.cpp- */
crates/c-api/examples/cpp_example.cpp-
crates/c-api/examples/cpp_example.cpp-#include <iostream>
crates/c-api/examples/cpp_example.cpp-#include <string>
crates/c-api/examples/cpp_example.cpp:#include "../include/vexy_json.hpp"
crates/c-api/examples/cpp_example.cpp-
crates/c-api/examples/cpp_example.cpp-int main() {
crates/c-api/examples/cpp_example.cpp-    // Example 1: Basic parsing with default options
crates/c-api/examples/cpp_example.cpp-    try {
crates/c-api/examples/cpp_example.cpp:        std::string json = vexy_json::parse(R"({"name": "John", "age": 30})");
crates/c-api/examples/cpp_example.cpp-        std::cout << "Example 1 - Basic parsing:\n" << json << "\n\n";
crates/c-api/examples/cpp_example.cpp:    } catch (const vexy_json::ParseError& e) {
crates/c-api/examples/cpp_example.cpp-        std::cerr << "Parse error: " << e.what() << "\n";
crates/c-api/examples/cpp_example.cpp-    }
crates/c-api/examples/cpp_example.cpp-    
--
crates/c-api/examples/cpp_example.cpp-            trailing: "comma",
crates/c-api/examples/cpp_example.cpp-        })";
crates/c-api/examples/cpp_example.cpp-        
crates/c-api/examples/cpp_example.cpp:        auto options = vexy_json::ParserOptions()
crates/c-api/examples/cpp_example.cpp-            .allowComments()
crates/c-api/examples/cpp_example.cpp-            .allowUnquotedKeys()
crates/c-api/examples/cpp_example.cpp-            .allowSingleQuotes()
crates/c-api/examples/cpp_example.cpp-            .allowTrailingCommas();
crates/c-api/examples/cpp_example.cpp-            
crates/c-api/examples/cpp_example.cpp:        std::string result = vexy_json::parse(forgiving_json, options);
crates/c-api/examples/cpp_example.cpp-        std::cout << "Example 2 - Forgiving JSON parsing:\n" << result << "\n\n";
crates/c-api/examples/cpp_example.cpp:    } catch (const vexy_json::ParseError& e) {
crates/c-api/examples/cpp_example.cpp-        std::cerr << "Parse error: " << e.what() << "\n";
crates/c-api/examples/cpp_example.cpp-    }
crates/c-api/examples/cpp_example.cpp-    
crates/c-api/examples/cpp_example.cpp-    // Example 3: Using a parser instance for multiple parses
crates/c-api/examples/cpp_example.cpp-    try {
crates/c-api/examples/cpp_example.cpp:        auto options = vexy_json::ParserOptions()
crates/c-api/examples/cpp_example.cpp-            .allowComments()
crates/c-api/examples/cpp_example.cpp-            .allowTrailingCommas()
crates/c-api/examples/cpp_example.cpp-            .enableRepair();
crates/c-api/examples/cpp_example.cpp-            
crates/c-api/examples/cpp_example.cpp:        vexy_json::Parser parser(options);
crates/c-api/examples/cpp_example.cpp-        
crates/c-api/examples/cpp_example.cpp-        std::vector<std::string> inputs = {
crates/c-api/examples/cpp_example.cpp-            R"({"valid": true})",
--
crates/c-api/examples/cpp_example.cpp-                std::string result = parser.parseToString(input);
crates/c-api/examples/cpp_example.cpp-                std::cout << "Input:  " << input << "\n";
crates/c-api/examples/cpp_example.cpp-                std::cout << "Output: " << result << "\n\n";
crates/c-api/examples/cpp_example.cpp:            } catch (const vexy_json::ParseError& e) {
crates/c-api/examples/cpp_example.cpp-                std::cout << "Failed to parse: " << e.what() << "\n\n";
crates/c-api/examples/cpp_example.cpp-            }
crates/c-api/examples/cpp_example.cpp-        }
--
crates/c-api/examples/cpp_example.cpp-            "city": 
crates/c-api/examples/cpp_example.cpp-        })";
crates/c-api/examples/cpp_example.cpp-        
crates/c-api/examples/cpp_example.cpp:        auto options = vexy_json::ParserOptions()
crates/c-api/examples/cpp_example.cpp-            .enableRepair()
crates/c-api/examples/cpp_example.cpp-            .reportRepairs();
crates/c-api/examples/cpp_example.cpp-            
crates/c-api/examples/cpp_example.cpp:        auto result = vexy_json::parseDetailed(broken_json, options);
crates/c-api/examples/cpp_example.cpp-        
crates/c-api/examples/cpp_example.cpp-        std::cout << "Example 4 - Detailed parsing with repairs:\n";
crates/c-api/examples/cpp_example.cpp-        std::cout << "Output: " << result.json() << "\n";
--
crates/c-api/examples/cpp_example.cpp-            }
crates/c-api/examples/cpp_example.cpp-        }
crates/c-api/examples/cpp_example.cpp-        std::cout << "\n";
crates/c-api/examples/cpp_example.cpp:    } catch (const vexy_json::ParseError& e) {
crates/c-api/examples/cpp_example.cpp-        std::cerr << "Parse error: " << e.what() << "\n";
crates/c-api/examples/cpp_example.cpp-    }
crates/c-api/examples/cpp_example.cpp-    
--
crates/c-api/examples/cpp_example.cpp-        auto invalid_json = R"({"unclosed": )";
crates/c-api/examples/cpp_example.cpp-        
crates/c-api/examples/cpp_example.cpp-        // This will throw
crates/c-api/examples/cpp_example.cpp:        auto options = vexy_json::ParserOptions(); // Repair disabled by default
crates/c-api/examples/cpp_example.cpp:        std::string result = vexy_json::parse(invalid_json, options);
crates/c-api/examples/cpp_example.cpp-        
crates/c-api/examples/cpp_example.cpp:    } catch (const vexy_json::ParseError& e) {
crates/c-api/examples/cpp_example.cpp-        std::cout << "Caught expected error: " << e.what() << "\n\n";
crates/c-api/examples/cpp_example.cpp-    }
crates/c-api/examples/cpp_example.cpp-    
crates/c-api/examples/cpp_example.cpp-    // Example 6: Version information
crates/c-api/examples/cpp_example.cpp-    std::cout << "Example 6 - Version information:\n";
crates/c-api/examples/cpp_example.cpp:    std::cout << "vexy_json version: " << vexy_json::version() << "\n";
crates/c-api/examples/cpp_example.cpp-    
crates/c-api/examples/cpp_example.cpp-    return 0;
crates/c-api/examples/cpp_example.cpp-}
--
examples/plugin_examples.rs-//! This example shows how to use the built-in plugins to extend
examples/plugin_examples.rs-//! Vexy JSON's parsing capabilities.
examples/plugin_examples.rs-
examples/plugin_examples.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
examples/plugin_examples.rs:use vexy_json_core::plugin::plugins::{
examples/plugin_examples.rs-    SchemaValidationPlugin,
examples/plugin_examples.rs-    DateTimePlugin,
examples/plugin_examples.rs-    CustomNumberFormatPlugin,
examples/plugin_examples.rs-    CommentPreservationPlugin,
examples/plugin_examples.rs-};
examples/plugin_examples.rs:use vexy_json_core::plugin::ParserPlugin;
examples/plugin_examples.rs-
examples/plugin_examples.rs-fn main() -> Result<(), Box<dyn std::error::Error>> {
examples/plugin_examples.rs-    println!("🔌 Vexy JSON Plugin Examples");
--
debug_test6.rs:use vexy_json::parse;
debug_test6.rs-
debug_test6.rs-fn main() {
debug_test6.rs-    // Test the pattern step by step
--
issues/106.txt:# JSON Repair Integration Specification for vexy_json
issues/106.txt-
issues/106.txt-## Executive Summary
issues/106.txt-
issues/106.txt:This document provides a detailed specification for integrating the `json-repair` crate into the vexy_json project to handle mismatched brackets and braces - a limitation that neither our `vexy_json` nor the original `jsonic` parser can currently overcome. The integration will implement a three-tier parsing approach with performance-optimized fallback chains.
issues/106.txt-
issues/106.txt-## 1. Problem Statement
issues/106.txt-
issues/106.txt-### Current Limitations
issues/106.txt:- Both `vexy_json` and `jsonic` fail on mismatched brackets/braces (e.g., `{key: "value"]`, `[1, 2, 3}`)
issues/106.txt-- No error recovery mechanism for structural delimiter mismatches
issues/106.txt-- Complete parsing failure rather than partial recovery with error reporting
issues/106.txt-- Missing brackets at end-of-input cause total failure
--
issues/106.txt-
issues/106.txt-```
issues/106.txt-Input JSON → Tier 1: Fast Path → Tier 2: Forgiving Path → Tier 3: Repair Path → Output
issues/106.txt:             (serde_json)      (vexy_json core)         (json-repair)
issues/106.txt-```
issues/106.txt-
issues/106.txt-**Tier 1: Fast Path (serde_json)**
--
issues/106.txt-- Zero-copy optimization where possible
issues/106.txt-- Immediate failure on any syntax error
issues/106.txt-
issues/106.txt:**Tier 2: Forgiving Path (vexy_json core)**
issues/106.txt:- Current vexy_json parser with all forgiving features
issues/106.txt-- Handles comments, trailing commas, unquoted keys, etc.
issues/106.txt-- Fails on bracket mismatches
issues/106.txt-
--
issues/106.txt-
issues/106.txt-### Version Compatibility
issues/106.txt-- `json-repair` 0.2.x: Stable API, bracket balancing, minimal dependencies
issues/106.txt:- Compatible with current `vexy_json` dependency stack
issues/106.txt-- No conflicting dependencies identified
issues/106.txt-
issues/106.txt-## 4. Core Implementation
--
issues/106.txt-#[derive(Debug, Clone)]
issues/106.txt-pub enum ParsingTier {
issues/106.txt-    Fast,      // serde_json succeeded
issues/106.txt:    Forgiving, // vexy_json succeeded
issues/106.txt-    Repair,    // json-repair succeeded
issues/106.txt-}
issues/106.txt-
--
issues/106.txt-        };
issues/106.txt-    }
issues/106.txt-
issues/106.txt:    // Tier 2: Forgiving Path - vexy_json core
issues/106.txt-    match parse_with_options(input, options) {
issues/106.txt-        Ok(value) => {
issues/106.txt-            return ParseResult {
--
issues/106.txt-            // Track what repairs were made
issues/106.txt-            repairs.extend(detect_repairs(input, &repaired_json));
issues/106.txt-
issues/106.txt:            // Parse the repaired JSON with vexy_json
issues/106.txt-            match parse_with_options(&repaired_json, options) {
issues/106.txt-                Ok(value) => ParseResult {
issues/106.txt-                    value,
--
issues/106.txt-```rust
issues/106.txt-// In crates/cli/src/main.rs
issues/106.txt-#[derive(Parser)]
issues/106.txt:#[command(name = "vexy_json")]
issues/106.txt-struct Cli {
issues/106.txt-    // ... existing options ...
issues/106.txt-    
--
issues/106.txt-// In tests/repair_integration.rs
issues/106.txt-#[cfg(test)]
issues/106.txt-mod integration_tests {
issues/106.txt:    use vexy_json::{parse_with_fallback, ParserOptions, ParsingTier};
issues/106.txt-    
issues/106.txt-    #[test]
issues/106.txt-    fn test_complex_bracket_mismatch() {
--
issues/106.txt-```rust
issues/106.txt-// In benches/repair_benchmark.rs
issues/106.txt-use criterion::{black_box, criterion_group, criterion_main, Criterion};
issues/106.txt:use vexy_json::{parse_with_fallback, ParserOptions};
issues/106.txt-
issues/106.txt-fn bench_parsing_tiers(c: &mut Criterion) {
issues/106.txt-    let mut group = c.benchmark_group("parsing_tiers");
--
issues/106.txt-```markdown
issues/106.txt-## Enhanced Error Recovery
issues/106.txt-
issues/106.txt:vexy_json now features advanced error recovery capabilities that can handle mismatched brackets and braces:
issues/106.txt-
issues/106.txt-```rust
issues/106.txt:use vexy_json::{parse_with_fallback, ParserOptions};
issues/106.txt-
issues/106.txt-// This will now succeed with automatic repair
issues/106.txt-let broken_json = r#"{"key": "value"]"#;
--
issues/106.txt-### Three-Tier Parsing
issues/106.txt-
issues/106.txt-1. **Fast Tier**: Uses `serde_json` for maximum performance on valid JSON
issues/106.txt:2. **Forgiving Tier**: Uses vexy_json's forgiving features for relaxed JSON syntax
issues/106.txt-3. **Repair Tier**: Uses `json-repair` for automatic bracket balancing and error correction
issues/106.txt-```
issues/106.txt-
--
issues/106.txt-///
issues/106.txt-/// This function implements a three-tier parsing strategy:
issues/106.txt-/// 1. Fast path using `serde_json` for valid JSON
issues/106.txt:/// 2. Forgiving path using vexy_json's tolerant parsing
issues/106.txt-/// 3. Repair path using `json-repair` for bracket mismatches
issues/106.txt-///
issues/106.txt-/// # Examples
issues/106.txt-///
issues/106.txt-/// ```rust
issues/106.txt:/// use vexy_json::{parse_with_fallback, ParserOptions};
issues/106.txt-///
issues/106.txt-/// // Valid JSON - uses fast path
issues/106.txt-/// let valid = r#"{"key": "value"}"#;
--
issues/106.txt-
issues/106.txt-```rust
issues/106.txt-// This still works exactly as before
issues/106.txt:let value = vexy_json::parse(r#"{"key": "value"}"#)?;
issues/106.txt-```
issues/106.txt-
issues/106.txt-### 11.2 New Features Adoption
issues/106.txt-
issues/106.txt-```rust
issues/106.txt-// Opt into new features gradually
issues/106.txt:use vexy_json::{parse_with_fallback, ParserOptions};
issues/106.txt-
issues/106.txt-// Enable repair with configuration
issues/106.txt-let options = ParserOptions {
--
issues/106.txt-
issues/106.txt-## 15. Conclusion
issues/106.txt-
issues/106.txt:This specification provides a comprehensive roadmap for integrating `json-repair` into vexy_json while maintaining backward compatibility and performance. The three-tier parsing approach ensures optimal performance for valid JSON while providing robust error recovery for malformed input.
issues/106.txt-
issues/106.txt:The implementation will significantly expand vexy_json's capabilities while maintaining its core design principles of being fast, forgiving, and user-friendly.
--
docs/assets/js/analytics.js:// Analytics placeholder for vexy_json web tool
docs/assets/js/analytics.js-// This file provides a basic analytics interface to prevent 404 errors
docs/assets/js/analytics.js-// and allows for future analytics implementation
docs/assets/js/analytics.js-
--
scripts/release-github.sh-    log_info "GitHub Actions release workflow triggered!"
scripts/release-github.sh-    echo
scripts/release-github.sh-    echo "You can monitor the release progress at:"
scripts/release-github.sh:    echo "https://github.com/twardoch/vexy_json/actions"
scripts/release-github.sh-    echo
scripts/release-github.sh-    echo "Or watch it here:"
scripts/release-github.sh-    
--
scripts/release-github.sh-    RUN_ID=$(gh run list --workflow=release.yml --limit 1 --json databaseId --jq '.[0].databaseId')
scripts/release-github.sh-    
scripts/release-github.sh-    if [ -n "$RUN_ID" ]; then
scripts/release-github.sh:        echo "Workflow run: https://github.com/twardoch/vexy_json/actions/runs/$RUN_ID"
scripts/release-github.sh-        echo
scripts/release-github.sh-        echo "Watching workflow progress..."
scripts/release-github.sh-        gh run watch "$RUN_ID"
--
crates/c-api/examples/Makefile:# Makefile for vexy_json C++ examples
crates/c-api/examples/Makefile-
crates/c-api/examples/Makefile-CXX = g++
crates/c-api/examples/Makefile-CXXFLAGS = -std=c++17 -Wall -Wextra -O2
crates/c-api/examples/Makefile:LDFLAGS = -L../../../target/release -lvexy_json
crates/c-api/examples/Makefile-INCLUDES = -I../include
crates/c-api/examples/Makefile-
crates/c-api/examples/Makefile-# For macOS, add rpath to find the library
--
examples/debug_trailing_comma.rs:use vexy_json::{parse, Lexer, Token};
examples/debug_trailing_comma.rs:use vexy_json_core::lexer::JsonLexer;
examples/debug_trailing_comma.rs-
examples/debug_trailing_comma.rs-fn main() {
examples/debug_trailing_comma.rs-    let input = "[1, 2, 3,]";
--
bindings/python/README.md:# vexy_json Python Bindings
bindings/python/README.md-
bindings/python/README.md-Fast, forgiving JSON parser for Python - a port of the JavaScript library jsonic.
bindings/python/README.md-
--
bindings/python/README.md-## Installation
bindings/python/README.md-
bindings/python/README.md-```bash
bindings/python/README.md:pip install vexy_json
bindings/python/README.md-```
bindings/python/README.md-
bindings/python/README.md-### Building from source
--
bindings/python/README.md-## Quick Start
bindings/python/README.md-
bindings/python/README.md-```python
bindings/python/README.md:import vexy_json
bindings/python/README.md-
bindings/python/README.md-# Parse forgiving JSON
bindings/python/README.md:data = vexy_json.parse('''
bindings/python/README.md-{
bindings/python/README.md-    // Comments are allowed
bindings/python/README.md-    name: "John",        // Unquoted keys
--
bindings/python/README.md-Parse a JSON string with default forgiving options.
bindings/python/README.md-
bindings/python/README.md-```python
bindings/python/README.md:data = vexy_json.parse('{"key": "value"}')
bindings/python/README.md-```
bindings/python/README.md-
bindings/python/README.md-#### `parse_with_options(input: str, options: Options) -> Any`
bindings/python/README.md-Parse a JSON string with custom options.
bindings/python/README.md-
bindings/python/README.md-```python
bindings/python/README.md:opts = vexy_json.Options(allow_comments=False)
bindings/python/README.md:data = vexy_json.parse_with_options(json_str, opts)
bindings/python/README.md-```
bindings/python/README.md-
bindings/python/README.md-#### `dumps(obj: Any, indent: int = None, sort_keys: bool = False) -> str`
bindings/python/README.md-Serialize a Python object to JSON string.
bindings/python/README.md-
bindings/python/README.md-```python
bindings/python/README.md:json_str = vexy_json.dumps({"key": "value"}, indent=2)
bindings/python/README.md-```
bindings/python/README.md-
bindings/python/README.md-#### `load(filename: str, options: Options = None) -> Any`
bindings/python/README.md-Load JSON from a file.
bindings/python/README.md-
bindings/python/README.md-```python
bindings/python/README.md:data = vexy_json.load("config.json")
bindings/python/README.md-```
bindings/python/README.md-
bindings/python/README.md-#### `dump(obj: Any, filename: str, indent: int = None, sort_keys: bool = False)`
bindings/python/README.md-Save Python object as JSON to a file.
bindings/python/README.md-
bindings/python/README.md-```python
bindings/python/README.md:vexy_json.dump(data, "output.json", indent=2)
bindings/python/README.md-```
bindings/python/README.md-
bindings/python/README.md-### Classes
--
bindings/python/README.md-Parser configuration options.
bindings/python/README.md-
bindings/python/README.md-```python
bindings/python/README.md:opts = vexy_json.Options(
bindings/python/README.md-    allow_comments=True,         # Allow // and /* */ comments
bindings/python/README.md-    allow_trailing_commas=True,  # Allow trailing commas
bindings/python/README.md-    allow_unquoted_keys=True,    # Allow unquoted object keys
--
bindings/python/README.md-Reusable parser instance for better performance when parsing multiple documents.
bindings/python/README.md-
bindings/python/README.md-```python
bindings/python/README.md:parser = vexy_json.Parser(options)
bindings/python/README.md-data = parser.parse(json_str)
bindings/python/README.md-```
bindings/python/README.md-
--
bindings/python/README.md-
bindings/python/README.md-### Configuration Files
bindings/python/README.md-
bindings/python/README.md:vexy_json is perfect for configuration files that need to be human-friendly:
bindings/python/README.md-
bindings/python/README.md-```python
bindings/python/README.md:config = vexy_json.parse('''
bindings/python/README.md-{
bindings/python/README.md-    // Server configuration
bindings/python/README.md-    server: {
--
bindings/python/README.md-
bindings/python/README.md-### Error Recovery
bindings/python/README.md-
bindings/python/README.md:vexy_json can automatically fix common JSON errors:
bindings/python/README.md-
bindings/python/README.md-```python
bindings/python/README.md-# Missing commas
bindings/python/README.md:fixed = vexy_json.parse('{"a": 1 "b": 2}')  # {'a': 1, 'b': 2}
bindings/python/README.md-
bindings/python/README.md-# Unclosed strings
bindings/python/README.md:fixed = vexy_json.parse('{"name": "John')   # {'name': 'John'}
bindings/python/README.md-
bindings/python/README.md-# Trailing commas
bindings/python/README.md:fixed = vexy_json.parse('[1, 2, 3,]')       # [1, 2, 3]
bindings/python/README.md-```
bindings/python/README.md-
bindings/python/README.md-### Strict Mode
--
bindings/python/README.md-For standard JSON compliance:
bindings/python/README.md-
bindings/python/README.md-```python
bindings/python/README.md:strict_parser = vexy_json.Parser(vexy_json.Options.strict())
bindings/python/README.md-
bindings/python/README.md-# This will raise an error
bindings/python/README.md-try:
--
bindings/python/README.md-
bindings/python/README.md-## Performance
bindings/python/README.md-
bindings/python/README.md:vexy_json is built with Rust and is designed to be fast:
bindings/python/README.md-
bindings/python/README.md-- Written in Rust for native performance
bindings/python/README.md-- Efficient memory usage
--
scripts/package-lock.json-{
scripts/package-lock.json:    "name": "vexy_json-testing-scripts",
scripts/package-lock.json-    "version": "1.0.0",
scripts/package-lock.json-    "lockfileVersion": 3,
scripts/package-lock.json-    "requires": true,
scripts/package-lock.json-    "packages": {
scripts/package-lock.json-        "": {
scripts/package-lock.json:            "name": "vexy_json-testing-scripts",
scripts/package-lock.json-            "version": "1.0.0",
scripts/package-lock.json-            "license": "MIT",
scripts/package-lock.json-            "dependencies": {
--
crates/wasm/test.mjs-const __dirname = dirname(__filename);
crates/wasm/test.mjs-
crates/wasm/test.mjs-// Dynamically import the WASM module
crates/wasm/test.mjs:const wasmModule = await import(join(__dirname, 'pkg', 'vexy_json_wasm.js'));
crates/wasm/test.mjs-const { default: init, parse_js, parse_with_options_js, is_valid, format } = wasmModule;
crates/wasm/test.mjs-
crates/wasm/test.mjs-// Initialize WASM with the WASM file path
crates/wasm/test.mjs:const wasmPath = join(__dirname, 'pkg', 'vexy_json_wasm_bg.wasm');
crates/wasm/test.mjs-const wasmBytes = readFileSync(wasmPath);
crates/wasm/test.mjs-await init(wasmBytes);
crates/wasm/test.mjs-
crates/wasm/test.mjs:console.log('Testing vexy_json WASM module...\n');
crates/wasm/test.mjs-
crates/wasm/test.mjs-// Test 1: Basic parsing
crates/wasm/test.mjs-console.log('Test 1: Basic parsing');
--
examples/recursive_parser.rs-
examples/recursive_parser.rs-//! Example demonstrating the recursive descent parser
examples/recursive_parser.rs-
examples/recursive_parser.rs:use vexy_json_core::parser::recursive::parse_recursive;
examples/recursive_parser.rs:use vexy_json_core::parser::ParserOptions;
examples/recursive_parser.rs:use vexy_json_core::ast::{Value, Number};
examples/recursive_parser.rs-
examples/recursive_parser.rs-fn main() -> Result<(), Box<dyn std::error::Error>> {
examples/recursive_parser.rs-    println!("🧮 Recursive Descent Parser Demo");
--
docs/assets/js/editor.js-
docs/assets/js/editor.js-/**
docs/assets/js/editor.js- * Enhanced editor functionality using CodeMirror for better syntax highlighting
docs/assets/js/editor.js: * and editing experience in the vexy_json web tool.
docs/assets/js/editor.js- */
docs/assets/js/editor.js-
docs/assets/js/editor.js-// CodeMirror imports from CDN - loaded via HTML script tags
--
docs/assets/js/editor.js-                }
docs/assets/js/editor.js-                return null;
docs/assets/js/editor.js-            }),
docs/assets/js/editor.js:            // Custom styling for vexy_json features
docs/assets/js/editor.js-            EditorView.theme({
docs/assets/js/editor.js-                '.cm-editor': {
docs/assets/js/editor.js-                    fontSize: '14px',
--
crates/c-api/README_CPP.md:# vexy_json C++ Header-Only Wrapper
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md:This directory contains a modern C++ header-only wrapper for the vexy_json JSON parser, providing an idiomatic C++ interface with RAII, exceptions, and STL integration.
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md-## Features
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md:- **Header-only**: Just include `vexy_json.hpp` - no additional C++ files to compile
crates/c-api/README_CPP.md-- **RAII**: Automatic memory management with smart pointers
crates/c-api/README_CPP.md-- **Exception safety**: Strong exception guarantee with proper error handling
crates/c-api/README_CPP.md-- **Modern C++**: Uses C++17 features like `std::string_view` and `std::optional`
--
crates/c-api/README_CPP.md-## Requirements
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md-- C++17 or later compiler
crates/c-api/README_CPP.md:- The vexy_json C library (linked separately)
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md-## Installation
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md:1. Include the `vexy_json.hpp` header in your project
crates/c-api/README_CPP.md:2. Link against the vexy_json C library
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md-## Quick Start
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md-```cpp
crates/c-api/README_CPP.md:#include "vexy_json.hpp"
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md-// Simple parsing
crates/c-api/README_CPP.md:std::string json = vexy_json::parse(R"({"key": "value"})");
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md-// Parsing with options
crates/c-api/README_CPP.md:auto options = vexy_json::ParserOptions()
crates/c-api/README_CPP.md-    .allowComments()
crates/c-api/README_CPP.md-    .allowTrailingCommas()
crates/c-api/README_CPP.md-    .enableRepair();
crates/c-api/README_CPP.md-    
crates/c-api/README_CPP.md:std::string result = vexy_json::parse(input, options);
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md-// Using a parser instance
crates/c-api/README_CPP.md:vexy_json::Parser parser(options);
crates/c-api/README_CPP.md-std::string result = parser.parseToString(input);
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md-// Detailed parsing with repair information
crates/c-api/README_CPP.md:auto detailed = vexy_json::parseDetailed(input, options);
crates/c-api/README_CPP.md-std::cout << "JSON: " << detailed.json() << "\n";
crates/c-api/README_CPP.md-for (const auto& repair : detailed.repairs()) {
crates/c-api/README_CPP.md-    std::cout << "Repair: " << repair.description << "\n";
--
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md-## API Reference
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md:### Namespace `vexy_json`
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md:All C++ wrapper functionality is in the `vexy_json` namespace.
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md-### Classes
crates/c-api/README_CPP.md-
--
crates/c-api/README_CPP.md-- `parse(std::string_view)` - Quick parse with default options
crates/c-api/README_CPP.md-- `parse(std::string_view, const ParserOptions&)` - Quick parse with options
crates/c-api/README_CPP.md-- `parseDetailed(std::string_view, const ParserOptions&)` - Parse with repair info
crates/c-api/README_CPP.md:- `version()` - Get vexy_json library version
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md-## Examples
crates/c-api/README_CPP.md-
--
crates/c-api/README_CPP.md-## Building the Examples
crates/c-api/README_CPP.md-
crates/c-api/README_CPP.md-```bash
crates/c-api/README_CPP.md:# Assuming you have built the vexy_json C library
crates/c-api/README_CPP.md:g++ -std=c++17 examples/cpp_example.cpp -lvexy_json -o cpp_example
crates/c-api/README_CPP.md-./cpp_example
crates/c-api/README_CPP.md-```
crates/c-api/README_CPP.md-
--
crates/wasm/Cargo.toml-[package]
crates/wasm/Cargo.toml:name = "vexy_json-wasm"
crates/wasm/Cargo.toml-version = "1.0.0"
crates/wasm/Cargo.toml-edition = "2021"
crates/wasm/Cargo.toml:description = "WebAssembly bindings for vexy_json - a forgiving JSON parser"
crates/wasm/Cargo.toml:repository = "https://github.com/twardoch/vexy_json"
crates/wasm/Cargo.toml-license = "MIT OR Apache-2.0"
crates/wasm/Cargo.toml-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
crates/wasm/Cargo.toml-
--
crates/wasm/Cargo.toml-features = [ "derive" ]
crates/wasm/Cargo.toml-
crates/wasm/Cargo.toml-
crates/wasm/Cargo.toml:[dependencies.vexy_json-core]
crates/wasm/Cargo.toml-path = "../core"
crates/wasm/Cargo.toml-features = [ "serde" ]
crates/wasm/Cargo.toml-
--
examples/test_number_types.rs:use vexy_json::{parse, Value};
examples/test_number_types.rs-
examples/test_number_types.rs-fn main() {
examples/test_number_types.rs-    let test_cases = vec![
--
examples/test_number_types.rs-    for (input, expected_type) in test_cases {
examples/test_number_types.rs-        print!("Testing {:?} (expecting {}): ", input, expected_type);
examples/test_number_types.rs-        match parse(input) {
examples/test_number_types.rs:            Ok(Value::Number(vexy_json::Number::Integer(i))) => {
examples/test_number_types.rs-                println!("Integer({})", i);
examples/test_number_types.rs-            }
examples/test_number_types.rs:            Ok(Value::Number(vexy_json::Number::Float(f))) => {
examples/test_number_types.rs-                println!("Float({})", f);
examples/test_number_types.rs-            }
examples/test_number_types.rs-            Ok(other) => {
--
issues/103.txt-In @docs we have @docs/tool.html
issues/103.txt-
issues/103.txt-1. We want that page to share navigation with the remaining Jekyll site, somehow. 
issues/103.txt:2. More importantly, we want a "sister web page" with the identical design which will allow the end-user to use the `jsonic` library (analogous to our `vexy_json` in @docs/tool.html)
issues/103.txt-
issues/103.txt-Into @PLAN.md develop a very detailed and specific plan for the above. 
issues/103.txt-
--
scripts/build.sh-# Exit immediately if a command exits with a non-zero status.
scripts/build.sh-set -e
scripts/build.sh-cd "$(dirname "$0")/.."
scripts/build.sh:echo "Starting build process for vexy_json..."
scripts/build.sh-
scripts/build.sh-{
scripts/build.sh:    echo "Building the vexy_json project..."
scripts/build.sh-    # Build the project in release mode for optimized binaries
scripts/build.sh-    /Users/adam/.cargo/bin/cargo build --release
scripts/build.sh-
--
scripts/build.sh-
scripts/build.sh-    echo "Build and verification complete."
scripts/build.sh-    echo ""
scripts/build.sh:    echo "Library built at: ./target/release/libvexy_json.rlib"
scripts/build.sh:    echo "Documentation at: ./target/doc/vexy_json/index.html"
scripts/build.sh-    echo ""
scripts/build.sh:    echo "To use vexy_json in your project, add to Cargo.toml:"
scripts/build.sh:    echo '  vexy_json = { path = "'$(pwd)'" }'
scripts/build.sh-    echo ""
scripts/build.sh-    echo "Example usage:"
scripts/build.sh:    echo "  use vexy_json::parse;"
scripts/build.sh-    echo "  let value = parse(\"'hello', 'world'\").unwrap();"
scripts/build.sh-
scripts/build.sh-} >build.log.txt 2>&1
--
build.sh-#!/bin/bash
build.sh:# Master build script for vexy_json project
build.sh-# This script runs all build processes in the correct order
build.sh-
build.sh-set -e
--
build.sh-BLUE='\033[0;34m'
build.sh-NC='\033[0m' # No Color
build.sh-
build.sh:echo -e "${BLUE}🚀 vexy_json Master Build Script${NC}"
build.sh-echo "=============================================="
build.sh-echo
build.sh-
--
build.sh-echo -e "${GREEN}🎉 All build steps completed successfully!${NC}"
build.sh-echo
build.sh-echo -e "${BLUE}Build artifacts:${NC}"
build.sh:echo "  • Rust library: target/release/libvexy_json.rlib"
build.sh:echo "  • CLI binary: target/release/vexy_json"
build.sh:echo "  • WebAssembly: docs/pkg/vexy_json_wasm_bg.wasm"
build.sh:echo "  • Documentation: target/doc/vexy_json/index.html"
build.sh-
build.sh-if [[ "$OSTYPE" == "darwin"* ]]; then
build.sh:    echo "  • macOS installer: vexy_json-${VERSION}-macos.dmg"
build.sh-fi
build.sh-
build.sh-echo
--
scripts/cross-platform/build-macos-installer.sh-PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
scripts/cross-platform/build-macos-installer.sh-VERSION="${VERSION:-$(grep '^version' "$PROJECT_ROOT/Cargo.toml" | head -1 | cut -d'"' -f2)}"
scripts/cross-platform/build-macos-installer.sh-BUILD_DIR="$PROJECT_ROOT/target/macos-installer"
scripts/cross-platform/build-macos-installer.sh:APP_NAME="vexy_json"
scripts/cross-platform/build-macos-installer.sh:BUNDLE_ID="com.twardoch.vexy_json"
scripts/cross-platform/build-macos-installer.sh:DMG_NAME="vexy_json-$VERSION-macos.dmg"
scripts/cross-platform/build-macos-installer.sh-
scripts/cross-platform/build-macos-installer.sh-# Utility functions
scripts/cross-platform/build-macos-installer.sh-log() {
--
scripts/cross-platform/build-macos-installer.sh-    
scripts/cross-platform/build-macos-installer.sh-    # Build for Intel
scripts/cross-platform/build-macos-installer.sh-    log "Building for Intel (x86_64)..."
scripts/cross-platform/build-macos-installer.sh:    cargo build --release --bin vexy_json --target x86_64-apple-darwin
scripts/cross-platform/build-macos-installer.sh-    
scripts/cross-platform/build-macos-installer.sh-    # Build for Apple Silicon
scripts/cross-platform/build-macos-installer.sh-    log "Building for Apple Silicon (aarch64)..."
scripts/cross-platform/build-macos-installer.sh:    cargo build --release --bin vexy_json --target aarch64-apple-darwin
scripts/cross-platform/build-macos-installer.sh-    
scripts/cross-platform/build-macos-installer.sh-    # Create universal binary
scripts/cross-platform/build-macos-installer.sh-    log "Creating universal binary..."
scripts/cross-platform/build-macos-installer.sh-    mkdir -p "$PROJECT_ROOT/target/release"
scripts/cross-platform/build-macos-installer.sh:    lipo -create -output "$PROJECT_ROOT/target/release/vexy_json" \
scripts/cross-platform/build-macos-installer.sh:        "$PROJECT_ROOT/target/x86_64-apple-darwin/release/vexy_json" \
scripts/cross-platform/build-macos-installer.sh:        "$PROJECT_ROOT/target/aarch64-apple-darwin/release/vexy_json"
scripts/cross-platform/build-macos-installer.sh-    
scripts/cross-platform/build-macos-installer.sh-    # Verify the universal binary
scripts/cross-platform/build-macos-installer.sh:    if lipo -info "$PROJECT_ROOT/target/release/vexy_json" | grep -q "x86_64 arm64"; then
scripts/cross-platform/build-macos-installer.sh-        success "Universal binary created successfully"
scripts/cross-platform/build-macos-installer.sh-    else
scripts/cross-platform/build-macos-installer.sh-        error "Failed to create universal binary"
--
scripts/cross-platform/build-macos-installer.sh-    mkdir -p "$pkg_root/usr/local/bin"
scripts/cross-platform/build-macos-installer.sh-    
scripts/cross-platform/build-macos-installer.sh-    # Copy the universal binary
scripts/cross-platform/build-macos-installer.sh:    cp "$PROJECT_ROOT/target/release/vexy_json" "$pkg_root/usr/local/bin/"
scripts/cross-platform/build-macos-installer.sh:    chmod +x "$pkg_root/usr/local/bin/vexy_json"
scripts/cross-platform/build-macos-installer.sh-    
scripts/cross-platform/build-macos-installer.sh-    # Create scripts directory for pre/post install scripts
scripts/cross-platform/build-macos-installer.sh-    mkdir -p "$BUILD_DIR/scripts"
--
scripts/cross-platform/build-macos-installer.sh-done
scripts/cross-platform/build-macos-installer.sh-
scripts/cross-platform/build-macos-installer.sh-# Verify installation
scripts/cross-platform/build-macos-installer.sh:if command -v vexy_json &> /dev/null; then
scripts/cross-platform/build-macos-installer.sh-    echo "Vexy JSON installed successfully!"
scripts/cross-platform/build-macos-installer.sh:    echo "Version: $(vexy_json --version 2>/dev/null || echo 'Unknown')"
scripts/cross-platform/build-macos-installer.sh:    echo "You may need to restart your terminal or run 'source ~/.bashrc' (or similar) to use vexy_json."
scripts/cross-platform/build-macos-installer.sh-else
scripts/cross-platform/build-macos-installer.sh:    echo "Installation completed, but vexy_json may not be in your PATH."
scripts/cross-platform/build-macos-installer.sh-    echo "Try restarting your terminal or adding /usr/local/bin to your PATH."
scripts/cross-platform/build-macos-installer.sh-fi
scripts/cross-platform/build-macos-installer.sh-
--
scripts/cross-platform/build-macos-installer.sh-    cat > "$dmg_temp_dir/README.txt" << EOF
scripts/cross-platform/build-macos-installer.sh-VEXY_JSON v$VERSION - High-Performance JSON Parser
scripts/cross-platform/build-macos-installer.sh-
scripts/cross-platform/build-macos-installer.sh:This installer will install the vexy_json command-line tool to /usr/local/bin.
scripts/cross-platform/build-macos-installer.sh-
scripts/cross-platform/build-macos-installer.sh-Installation Instructions:
scripts/cross-platform/build-macos-installer.sh:1. Double-click on vexy_json.pkg to run the installer
scripts/cross-platform/build-macos-installer.sh-2. Follow the installation prompts
scripts/cross-platform/build-macos-installer.sh-3. Restart your terminal or run 'source ~/.bashrc' to update your PATH
scripts/cross-platform/build-macos-installer.sh-
scripts/cross-platform/build-macos-installer.sh:After installation, you can use vexy_json from the command line:
scripts/cross-platform/build-macos-installer.sh:  echo '{"key": "value"}' | vexy_json
scripts/cross-platform/build-macos-installer.sh:  vexy_json --help
scripts/cross-platform/build-macos-installer.sh-
scripts/cross-platform/build-macos-installer.sh-Features:
scripts/cross-platform/build-macos-installer.sh-• SIMD-accelerated parsing (2-3x faster)
--
scripts/cross-platform/build-macos-installer.sh-• Enhanced error recovery with suggestions
scripts/cross-platform/build-macos-installer.sh-
scripts/cross-platform/build-macos-installer.sh-For more information:
scripts/cross-platform/build-macos-installer.sh:  Website: https://github.com/twardoch/vexy_json
scripts/cross-platform/build-macos-installer.sh:  Documentation: https://twardoch.github.io/vexy_json/
scripts/cross-platform/build-macos-installer.sh-
scripts/cross-platform/build-macos-installer.sh-License: MIT OR Apache-2.0
scripts/cross-platform/build-macos-installer.sh-EOF
--
scripts/cross-platform/build-macos-installer.sh-        log "DMG size: $dmg_size"
scripts/cross-platform/build-macos-installer.sh-        
scripts/cross-platform/build-macos-installer.sh-        # Verify DMG can be mounted
scripts/cross-platform/build-macos-installer.sh:        if hdiutil attach "$final_dmg" -readonly -nobrowse -mountpoint "/tmp/vexy_json-verify-$$"; then
scripts/cross-platform/build-macos-installer.sh-            log "DMG verification: mountable ✓"
scripts/cross-platform/build-macos-installer.sh:            hdiutil detach "/tmp/vexy_json-verify-$$" || true
scripts/cross-platform/build-macos-installer.sh-        else
scripts/cross-platform/build-macos-installer.sh-            warning "DMG verification failed - may not be mountable"
scripts/cross-platform/build-macos-installer.sh-        fi
--
scripts/cross-platform/build-macos-installer.sh-    log "Creating ZIP alternative..."
scripts/cross-platform/build-macos-installer.sh-    
scripts/cross-platform/build-macos-installer.sh-    local zip_dir="$BUILD_DIR/zip-package"
scripts/cross-platform/build-macos-installer.sh:    local zip_file="$PROJECT_ROOT/vexy_json-$VERSION-macos.zip"
scripts/cross-platform/build-macos-installer.sh-    
scripts/cross-platform/build-macos-installer.sh-    mkdir -p "$zip_dir"
scripts/cross-platform/build-macos-installer.sh-    
scripts/cross-platform/build-macos-installer.sh-    # Copy binary
scripts/cross-platform/build-macos-installer.sh:    cp "$PROJECT_ROOT/target/release/vexy_json" "$zip_dir/"
scripts/cross-platform/build-macos-installer.sh-    
scripts/cross-platform/build-macos-installer.sh-    # Create installation script
scripts/cross-platform/build-macos-installer.sh-    cat > "$zip_dir/install.sh" << 'EOF'
--
scripts/cross-platform/build-macos-installer.sh-# Check if we have write permissions
scripts/cross-platform/build-macos-installer.sh-if [[ ! -w "/usr/local/bin" ]]; then
scripts/cross-platform/build-macos-installer.sh-    echo "Note: You may be prompted for your password to install to /usr/local/bin"
scripts/cross-platform/build-macos-installer.sh:    sudo cp vexy_json /usr/local/bin/
scripts/cross-platform/build-macos-installer.sh:    sudo chmod +x /usr/local/bin/vexy_json
scripts/cross-platform/build-macos-installer.sh-else
scripts/cross-platform/build-macos-installer.sh:    cp vexy_json /usr/local/bin/
scripts/cross-platform/build-macos-installer.sh:    chmod +x /usr/local/bin/vexy_json
scripts/cross-platform/build-macos-installer.sh-fi
scripts/cross-platform/build-macos-installer.sh-
scripts/cross-platform/build-macos-installer.sh-echo "Vexy JSON installed successfully!"
scripts/cross-platform/build-macos-installer.sh:echo "Try: vexy_json --help"
scripts/cross-platform/build-macos-installer.sh-EOF
scripts/cross-platform/build-macos-installer.sh-    
scripts/cross-platform/build-macos-installer.sh-    chmod +x "$zip_dir/install.sh"
--
scripts/cross-platform/build-macos-installer.sh-    cat > "$zip_dir/README.txt" << EOF
scripts/cross-platform/build-macos-installer.sh-VEXY_JSON v$VERSION - Simple ZIP Installation
scripts/cross-platform/build-macos-installer.sh-
scripts/cross-platform/build-macos-installer.sh:This is a simple ZIP package containing the vexy_json binary.
scripts/cross-platform/build-macos-installer.sh-
scripts/cross-platform/build-macos-installer.sh-Installation:
scripts/cross-platform/build-macos-installer.sh-1. Run: ./install.sh
scripts/cross-platform/build-macos-installer.sh-   OR
scripts/cross-platform/build-macos-installer.sh:2. Manually copy 'vexy_json' to a directory in your PATH
scripts/cross-platform/build-macos-installer.sh-
scripts/cross-platform/build-macos-installer.sh-Usage:
scripts/cross-platform/build-macos-installer.sh:  echo '{"key": "value"}' | vexy_json
scripts/cross-platform/build-macos-installer.sh:  vexy_json --help
scripts/cross-platform/build-macos-installer.sh-
scripts/cross-platform/build-macos-installer.sh-For the full installer experience, download the .dmg file instead.
scripts/cross-platform/build-macos-installer.sh-EOF
--
scripts/cross-platform/build-macos-installer.sh-    log "Verifying installation components..."
scripts/cross-platform/build-macos-installer.sh-    
scripts/cross-platform/build-macos-installer.sh-    # Check if binary works
scripts/cross-platform/build-macos-installer.sh:    if "$PROJECT_ROOT/target/release/vexy_json" --version &> /dev/null; then
scripts/cross-platform/build-macos-installer.sh-        success "Binary verification: working ✓"
scripts/cross-platform/build-macos-installer.sh-    else
scripts/cross-platform/build-macos-installer.sh-        error "Binary verification failed"
--
scripts/cross-platform/build-macos-installer.sh-    fi
scripts/cross-platform/build-macos-installer.sh-    
scripts/cross-platform/build-macos-installer.sh-    # Check package contents
scripts/cross-platform/build-macos-installer.sh:    if pkgutil --payload-files "$BUILD_DIR/$APP_NAME.pkg" | grep -q "usr/local/bin/vexy_json"; then
scripts/cross-platform/build-macos-installer.sh-        success "Package verification: contains binary ✓"
scripts/cross-platform/build-macos-installer.sh-    else
scripts/cross-platform/build-macos-installer.sh-        error "Package verification failed"
--
scripts/cross-platform/build-macos-installer.sh-    echo
scripts/cross-platform/build-macos-installer.sh-    echo -e "${BLUE}Generated files:${NC}"
scripts/cross-platform/build-macos-installer.sh-    echo "  📦 DMG Installer: $DMG_NAME"
scripts/cross-platform/build-macos-installer.sh:    if [[ -f "$PROJECT_ROOT/vexy_json-$VERSION-macos.zip" ]]; then
scripts/cross-platform/build-macos-installer.sh:        echo "  📁 ZIP Package: vexy_json-$VERSION-macos.zip"
scripts/cross-platform/build-macos-installer.sh-    fi
scripts/cross-platform/build-macos-installer.sh-    echo "  🔧 PKG Installer: $BUILD_DIR/$APP_NAME.pkg"
scripts/cross-platform/build-macos-installer.sh:    echo "  🔨 Universal Binary: $PROJECT_ROOT/target/release/vexy_json"
scripts/cross-platform/build-macos-installer.sh-    echo
scripts/cross-platform/build-macos-installer.sh-    
scripts/cross-platform/build-macos-installer.sh-    echo -e "${BLUE}Installation instructions for users:${NC}"
scripts/cross-platform/build-macos-installer.sh-    echo "  1. Download and open $DMG_NAME"
scripts/cross-platform/build-macos-installer.sh:    echo "  2. Double-click vexy_json.pkg to install"
scripts/cross-platform/build-macos-installer.sh-    echo "  3. Follow the installer prompts"
scripts/cross-platform/build-macos-installer.sh-    echo "  4. Restart terminal or run 'source ~/.bashrc'"
scripts/cross-platform/build-macos-installer.sh-    echo
scripts/cross-platform/build-macos-installer.sh-    
scripts/cross-platform/build-macos-installer.sh-    echo -e "${BLUE}Binary details:${NC}"
scripts/cross-platform/build-macos-installer.sh:    lipo -info "$PROJECT_ROOT/target/release/vexy_json" | sed 's/^/  /'
scripts/cross-platform/build-macos-installer.sh-    echo
scripts/cross-platform/build-macos-installer.sh-    
scripts/cross-platform/build-macos-installer.sh-    echo -e "${BLUE}Next steps:${NC}"
--
examples/parser_comparison.rs-
examples/parser_comparison.rs-//! Example comparing different parser implementations
examples/parser_comparison.rs-
examples/parser_comparison.rs:use vexy_json_core::{
examples/parser_comparison.rs-    parse_with_options,
examples/parser_comparison.rs-    parse_optimized_with_options,
examples/parser_comparison.rs-    parse_optimized_v2_with_options,
--
examples/parser_comparison.rs-    parse_iterative,
examples/parser_comparison.rs-    ParserOptions,
examples/parser_comparison.rs-};
examples/parser_comparison.rs:use vexy_json_core::ast::{Value, Number};
examples/parser_comparison.rs-use std::time::Instant;
examples/parser_comparison.rs-
examples/parser_comparison.rs-fn main() -> Result<(), Box<dyn std::error::Error>> {
--
examples/parser_comparison.rs-        println!("JSON: {}", json);
examples/parser_comparison.rs-        
examples/parser_comparison.rs-        // Test all parsers
examples/parser_comparison.rs:        let parsers: Vec<(&str, fn(&str, ParserOptions) -> Result<Value, vexy_json_core::Error>)> = vec![
examples/parser_comparison.rs-            ("Original", parse_with_options),
examples/parser_comparison.rs-            ("Optimized", parse_optimized_with_options),
examples/parser_comparison.rs-            ("Optimized V2", parse_optimized_v2_with_options),
--
examples/parser_comparison.rs-        println!("JSON: {}", invalid_json);
examples/parser_comparison.rs-        
examples/parser_comparison.rs-        // Test error handling across parsers
examples/parser_comparison.rs:        let parsers: Vec<(&str, fn(&str, ParserOptions) -> Result<Value, vexy_json_core::Error>)> = vec![
examples/parser_comparison.rs-            ("Recursive", parse_recursive),
examples/parser_comparison.rs-            ("Iterative", parse_iterative),
examples/parser_comparison.rs-        ];
--
examples/parser_comparison.rs-    println!("Testing large JSON with 1000 key-value pairs");
examples/parser_comparison.rs-    println!("JSON size: {} bytes", large_json.len());
examples/parser_comparison.rs-    
examples/parser_comparison.rs:    let parsers: Vec<(&str, fn(&str, ParserOptions) -> Result<Value, vexy_json_core::Error>)> = vec![
examples/parser_comparison.rs-        ("Recursive", parse_recursive),
examples/parser_comparison.rs-        ("Iterative", parse_iterative),
examples/parser_comparison.rs-    ];
--
examples/test_unquoted.rs:use vexy_json::{Lexer, Token};
examples/test_unquoted.rs:use vexy_json_core::lexer::JsonLexer;
examples/test_unquoted.rs-
examples/test_unquoted.rs-fn main() {
examples/test_unquoted.rs-    let mut lexer = Lexer::new("{a: 1}");
--
bindings/python/tests/test_vexy_json.py:"""Tests for vexy_json Python bindings"""
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-import pytest
bindings/python/tests/test_vexy_json.py:import vexy_json
bindings/python/tests/test_vexy_json.py-import json
bindings/python/tests/test_vexy_json.py-import tempfile
bindings/python/tests/test_vexy_json.py-import os
--
bindings/python/tests/test_vexy_json.py-    """Test basic JSON parsing functionality"""
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_parse_simple_object(self):
bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('{"name": "John", "age": 30}')
bindings/python/tests/test_vexy_json.py-        assert result == {"name": "John", "age": 30}
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_parse_simple_array(self):
bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('[1, 2, 3, "hello"]')
bindings/python/tests/test_vexy_json.py-        assert result == [1, 2, 3, "hello"]
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_parse_nested_structure(self):
--
bindings/python/tests/test_vexy_json.py-            "total": 2
bindings/python/tests/test_vexy_json.py-        }
bindings/python/tests/test_vexy_json.py-        """
bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse(input_json)
bindings/python/tests/test_vexy_json.py-        expected = {
bindings/python/tests/test_vexy_json.py-            "users": [{"name": "Alice", "age": 25}, {"name": "Bob", "age": 30}],
bindings/python/tests/test_vexy_json.py-            "total": 2,
--
bindings/python/tests/test_vexy_json.py-        assert result == expected
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_parse_primitives(self):
bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse("true") is True
bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse("false") is False
bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse("null") is None
bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse("42") == 42
bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse("3.14") == 3.14
bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse('"hello"') == "hello"
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-class TestForgivingFeatures:
--
bindings/python/tests/test_vexy_json.py-            "value": 42
bindings/python/tests/test_vexy_json.py-        }
bindings/python/tests/test_vexy_json.py-        """
bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse(input_json)
bindings/python/tests/test_vexy_json.py-        assert result == {"name": "Test", "value": 42}
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_trailing_commas(self):
bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('{"a": 1, "b": 2,}')
bindings/python/tests/test_vexy_json.py-        assert result == {"a": 1, "b": 2}
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse("[1, 2, 3,]")
bindings/python/tests/test_vexy_json.py-        assert result == [1, 2, 3]
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_unquoted_keys(self):
bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('{name: "John", age: 30}')
bindings/python/tests/test_vexy_json.py-        assert result == {"name": "John", "age": 30}
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_single_quotes(self):
bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse("{'name': 'John', 'city': 'NYC'}")
bindings/python/tests/test_vexy_json.py-        assert result == {"name": "John", "city": "NYC"}
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_implicit_object(self):
bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('name: "John", age: 30')
bindings/python/tests/test_vexy_json.py-        assert result == {"name": "John", "age": 30}
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_newline_as_comma(self):
--
bindings/python/tests/test_vexy_json.py-            "c": 3
bindings/python/tests/test_vexy_json.py-        }
bindings/python/tests/test_vexy_json.py-        """
bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse(input_json)
bindings/python/tests/test_vexy_json.py-        assert result == {"a": 1, "b": 2, "c": 3}
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_mixed_forgiving_features(self):
--
bindings/python/tests/test_vexy_json.py-            }
bindings/python/tests/test_vexy_json.py-        }
bindings/python/tests/test_vexy_json.py-        """
bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse(input_json)
bindings/python/tests/test_vexy_json.py-        expected = {
bindings/python/tests/test_vexy_json.py-            "server": "localhost",
bindings/python/tests/test_vexy_json.py-            "port": 8080,
--
bindings/python/tests/test_vexy_json.py-    """Test parser options"""
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_default_options(self):
bindings/python/tests/test_vexy_json.py:        opts = vexy_json.Options.default()
bindings/python/tests/test_vexy_json.py-        assert opts.allow_comments is True
bindings/python/tests/test_vexy_json.py-        assert opts.allow_trailing_commas is True
bindings/python/tests/test_vexy_json.py-        assert opts.allow_unquoted_keys is True
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_strict_options(self):
bindings/python/tests/test_vexy_json.py:        opts = vexy_json.Options.strict()
bindings/python/tests/test_vexy_json.py-        assert opts.allow_comments is False
bindings/python/tests/test_vexy_json.py-        assert opts.allow_trailing_commas is False
bindings/python/tests/test_vexy_json.py-        assert opts.allow_unquoted_keys is False
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_custom_options(self):
bindings/python/tests/test_vexy_json.py:        opts = vexy_json.Options(
bindings/python/tests/test_vexy_json.py-            allow_comments=False, allow_trailing_commas=True, max_depth=50
bindings/python/tests/test_vexy_json.py-        )
bindings/python/tests/test_vexy_json.py-        assert opts.allow_comments is False
--
bindings/python/tests/test_vexy_json.py-        assert opts.max_depth == 50
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_parse_with_strict_options(self):
bindings/python/tests/test_vexy_json.py:        opts = vexy_json.Options.strict()
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-        # Valid JSON should work
bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse_with_options('{"valid": true}', opts)
bindings/python/tests/test_vexy_json.py-        assert result == {"valid": True}
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-        # Invalid JSON should fail with strict options
bindings/python/tests/test_vexy_json.py-        with pytest.raises(ValueError):
bindings/python/tests/test_vexy_json.py:            vexy_json.parse_with_options("{unquoted: true}", opts)
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-class TestParser:
bindings/python/tests/test_vexy_json.py-    """Test Parser class"""
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_parser_creation(self):
bindings/python/tests/test_vexy_json.py:        parser = vexy_json.Parser()
bindings/python/tests/test_vexy_json.py-        assert parser is not None
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_parser_with_options(self):
bindings/python/tests/test_vexy_json.py:        opts = vexy_json.Options(allow_comments=False)
bindings/python/tests/test_vexy_json.py:        parser = vexy_json.Parser(opts)
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-        # Should parse valid JSON
bindings/python/tests/test_vexy_json.py-        result = parser.parse('{"valid": true}')
bindings/python/tests/test_vexy_json.py-        assert result == {"valid": True}
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_parser_reuse(self):
bindings/python/tests/test_vexy_json.py:        parser = vexy_json.Parser()
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-        # Parse multiple inputs with same parser
bindings/python/tests/test_vexy_json.py-        results = []
--
bindings/python/tests/test_vexy_json.py-            temp_path = f.name
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-        try:
bindings/python/tests/test_vexy_json.py:            data = vexy_json.load(temp_path)
bindings/python/tests/test_vexy_json.py-            assert data == {"test": True, "value": 42}
bindings/python/tests/test_vexy_json.py-        finally:
bindings/python/tests/test_vexy_json.py-            os.unlink(temp_path)
--
bindings/python/tests/test_vexy_json.py-            temp_path = f.name
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-        try:
bindings/python/tests/test_vexy_json.py:            vexy_json.dump(data, temp_path)
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-            # Read back with standard json to verify
bindings/python/tests/test_vexy_json.py-            with open(temp_path, "r") as f:
--
bindings/python/tests/test_vexy_json.py-            temp_path = f.name
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-        try:
bindings/python/tests/test_vexy_json.py:            vexy_json.dump(data, temp_path, indent=2)
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-            with open(temp_path, "r") as f:
bindings/python/tests/test_vexy_json.py-                content = f.read()
--
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_dumps_basic(self):
bindings/python/tests/test_vexy_json.py-        data = {"name": "Test", "value": 42}
bindings/python/tests/test_vexy_json.py:        json_str = vexy_json.dumps(data)
bindings/python/tests/test_vexy_json.py-        # Parse it back to verify
bindings/python/tests/test_vexy_json.py-        assert json.loads(json_str) == data
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_dumps_with_indent(self):
bindings/python/tests/test_vexy_json.py-        data = {"a": 1, "b": 2}
bindings/python/tests/test_vexy_json.py:        json_str = vexy_json.dumps(data, indent=2)
bindings/python/tests/test_vexy_json.py-        assert "\n" in json_str  # Should have newlines
bindings/python/tests/test_vexy_json.py-        assert json.loads(json_str) == data
bindings/python/tests/test_vexy_json.py-
--
bindings/python/tests/test_vexy_json.py-            "list": [1, 2, 3],
bindings/python/tests/test_vexy_json.py-            "dict": {"nested": True},
bindings/python/tests/test_vexy_json.py-        }
bindings/python/tests/test_vexy_json.py:        json_str = vexy_json.dumps(data)
bindings/python/tests/test_vexy_json.py-        assert json.loads(json_str) == data
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-
--
bindings/python/tests/test_vexy_json.py-    def test_parse_error(self):
bindings/python/tests/test_vexy_json.py-        # Completely invalid JSON
bindings/python/tests/test_vexy_json.py-        with pytest.raises(ValueError):
bindings/python/tests/test_vexy_json.py:            opts = vexy_json.Options(enable_repair=False)
bindings/python/tests/test_vexy_json.py:            vexy_json.parse_with_options("{{{invalid}}}", opts)
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_repair_mode(self):
bindings/python/tests/test_vexy_json.py-        # With repair enabled (default), should handle some errors
bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('{"broken":')
bindings/python/tests/test_vexy_json.py-        # Should repair to something valid
bindings/python/tests/test_vexy_json.py-        assert isinstance(result, dict)
bindings/python/tests/test_vexy_json.py-
--
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_loads_alias(self):
bindings/python/tests/test_vexy_json.py-        # loads should be an alias for parse
bindings/python/tests/test_vexy_json.py:        result = vexy_json.loads('{"test": true}')
bindings/python/tests/test_vexy_json.py-        assert result == {"test": True}
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-    def test_version(self):
bindings/python/tests/test_vexy_json.py-        # Should have version info
bindings/python/tests/test_vexy_json.py:        assert vexy_json.version() is not None
bindings/python/tests/test_vexy_json.py:        assert vexy_json.__version__ is not None
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-
bindings/python/tests/test_vexy_json.py-if __name__ == "__main__":
--
scripts/update-versions.sh-
scripts/update-versions.sh-# Update workspace dependencies
scripts/update-versions.sh-echo "Updating workspace dependencies..."
scripts/update-versions.sh:update_file "Cargo.toml" 'vexy_json-core = { version = ".*"' "s/vexy_json-core = { version = \".*\"/vexy_json-core = { version = \"$VERSION\"/"
scripts/update-versions.sh:update_file "Cargo.toml" 'vexy_json = { version = ".*"' "s/vexy_json = { version = \".*\"/vexy_json = { version = \"$VERSION\"/"
scripts/update-versions.sh-
scripts/update-versions.sh-# Update Python bindings
scripts/update-versions.sh-echo "Updating Python bindings..."
--
scripts/update-versions.sh-
scripts/update-versions.sh-# Update Homebrew formula (only the version, not the URL)
scripts/update-versions.sh-echo "Updating Homebrew formula..."
scripts/update-versions.sh:if [ -f "Formula/vexy_json.rb" ]; then
scripts/update-versions.sh-    # Only update if this looks like a release version (not -dev)
scripts/update-versions.sh-    if [[ ! "$VERSION" =~ -dev$ ]]; then
scripts/update-versions.sh:        update_file "Formula/vexy_json.rb" 'version ".*"' "s/version \".*\"/version \"$VERSION\"/"
scripts/update-versions.sh-        # Note: The URL in the formula should be updated during release
scripts/update-versions.sh-    else
scripts/update-versions.sh-        echo -e "${YELLOW}⚠${NC} Skipping Homebrew formula update for dev version"
--
examples/test_implicit_array.rs:use vexy_json::parse;
examples/test_implicit_array.rs-
examples/test_implicit_array.rs-fn main() {
examples/test_implicit_array.rs-    let test_cases = vec![
--
docs/assets/js/jsonic-tool.js-    }
docs/assets/js/jsonic-tool.js-
docs/assets/js/jsonic-tool.js-    getParserOptions() {
docs/assets/js/jsonic-tool.js:        // Jsonic uses a different options format than vexy_json
docs/assets/js/jsonic-tool.js-        const options = {};
docs/assets/js/jsonic-tool.js-
docs/assets/js/jsonic-tool.js:        // Note: Jsonic doesn't have as many granular options as vexy_json
docs/assets/js/jsonic-tool.js-        // Most features are enabled by default
docs/assets/js/jsonic-tool.js-        const strictMode = document.getElementById('jsonic-strict')?.checked || false;
docs/assets/js/jsonic-tool.js-
--
bindings/python/pyproject.toml-
bindings/python/pyproject.toml-
bindings/python/pyproject.toml-[project]
bindings/python/pyproject.toml:name = "vexy_json"
bindings/python/pyproject.toml-version = "1.0.0"
bindings/python/pyproject.toml-description = "A forgiving JSON parser for Python - port of the JavaScript library jsonic"
bindings/python/pyproject.toml-readme = "README.md"
--
bindings/python/pyproject.toml-
bindings/python/pyproject.toml-
bindings/python/pyproject.toml-[project.urls]
bindings/python/pyproject.toml:Homepage = "https://github.com/twardoch/vexy_json"
bindings/python/pyproject.toml:Repository = "https://github.com/twardoch/vexy_json"
bindings/python/pyproject.toml:Issues = "https://github.com/twardoch/vexy_json/issues"
bindings/python/pyproject.toml-
bindings/python/pyproject.toml-
bindings/python/pyproject.toml-[tool.maturin]
bindings/python/pyproject.toml-python-source = "src"
bindings/python/pyproject.toml:module-name = "vexy_json.vexy_json"
bindings/python/pyproject.toml-features = [ "pyo3/extension-module" ]
--
examples/debug_comment_tokens.rs:use vexy_json::{Lexer, Token};
examples/debug_comment_tokens.rs:use vexy_json_core::lexer::JsonLexer;
examples/debug_comment_tokens.rs-
examples/debug_comment_tokens.rs-fn main() {
examples/debug_comment_tokens.rs-    let input = "// comment\n42";
--
crates/c-api/include/vexy_json.h-/**
crates/c-api/include/vexy_json.h: * @file vexy_json.h
crates/c-api/include/vexy_json.h: * @brief C API for the vexy_json JSON parser
crates/c-api/include/vexy_json.h- *
crates/c-api/include/vexy_json.h: * This header provides a C-compatible API for the vexy_json JSON parser,
crates/c-api/include/vexy_json.h- * allowing integration with C/C++ applications and other language bindings.
crates/c-api/include/vexy_json.h- */
crates/c-api/include/vexy_json.h-
--
crates/c-api/include/vexy_json.h-#endif
crates/c-api/include/vexy_json.h-
crates/c-api/include/vexy_json.h-/**
crates/c-api/include/vexy_json.h: * @brief Parser options for configuring vexy_json behavior
crates/c-api/include/vexy_json.h- */
crates/c-api/include/vexy_json.h-typedef struct VexyJsonParserOptions {
crates/c-api/include/vexy_json.h-    bool allow_comments;
--
crates/c-api/include/vexy_json.h-typedef void* VexyJsonParser;
crates/c-api/include/vexy_json.h-
crates/c-api/include/vexy_json.h-/**
crates/c-api/include/vexy_json.h: * @brief Get the version of the vexy_json library
crates/c-api/include/vexy_json.h- * @return Version string (do not free)
crates/c-api/include/vexy_json.h- */
crates/c-api/include/vexy_json.h:const char* vexy_json_version(void);
crates/c-api/include/vexy_json.h-
crates/c-api/include/vexy_json.h-/**
crates/c-api/include/vexy_json.h- * @brief Parse JSON with default options
crates/c-api/include/vexy_json.h- * @param input The JSON string to parse
crates/c-api/include/vexy_json.h: * @return Parse result (must be freed with vexy_json_free_result)
crates/c-api/include/vexy_json.h- */
crates/c-api/include/vexy_json.h:VexyJsonParseResult vexy_json_parse(const char* input);
crates/c-api/include/vexy_json.h-
crates/c-api/include/vexy_json.h-/**
crates/c-api/include/vexy_json.h- * @brief Parse JSON with custom options
crates/c-api/include/vexy_json.h- * @param input The JSON string to parse
crates/c-api/include/vexy_json.h- * @param options Parser options
crates/c-api/include/vexy_json.h: * @return Parse result (must be freed with vexy_json_free_result)
crates/c-api/include/vexy_json.h- */
crates/c-api/include/vexy_json.h:VexyJsonParseResult vexy_json_parse_with_options(const char* input, const VexyJsonParserOptions* options);
crates/c-api/include/vexy_json.h-
crates/c-api/include/vexy_json.h-/**
crates/c-api/include/vexy_json.h- * @brief Parse JSON and get detailed information including repairs
crates/c-api/include/vexy_json.h- * @param input The JSON string to parse
crates/c-api/include/vexy_json.h- * @param options Parser options
crates/c-api/include/vexy_json.h: * @return Detailed result (must be freed with vexy_json_free_detailed_result)
crates/c-api/include/vexy_json.h- */
crates/c-api/include/vexy_json.h:VexyJsonDetailedResult vexy_json_parse_detailed(const char* input, const VexyJsonParserOptions* options);
crates/c-api/include/vexy_json.h-
crates/c-api/include/vexy_json.h-/**
crates/c-api/include/vexy_json.h- * @brief Create a new parser instance
crates/c-api/include/vexy_json.h- * @param options Parser options
crates/c-api/include/vexy_json.h: * @return Parser handle (must be freed with vexy_json_parser_free)
crates/c-api/include/vexy_json.h- */
crates/c-api/include/vexy_json.h:VexyJsonParser vexy_json_parser_new(const VexyJsonParserOptions* options);
crates/c-api/include/vexy_json.h-
crates/c-api/include/vexy_json.h-/**
crates/c-api/include/vexy_json.h- * @brief Parse JSON using a parser instance
crates/c-api/include/vexy_json.h- * @param parser Parser handle
crates/c-api/include/vexy_json.h- * @param input The JSON string to parse
crates/c-api/include/vexy_json.h: * @return Parse result (must be freed with vexy_json_free_result)
crates/c-api/include/vexy_json.h- */
crates/c-api/include/vexy_json.h:VexyJsonParseResult vexy_json_parser_parse(VexyJsonParser parser, const char* input);
crates/c-api/include/vexy_json.h-
crates/c-api/include/vexy_json.h-/**
crates/c-api/include/vexy_json.h- * @brief Free a parser instance
crates/c-api/include/vexy_json.h- * @param parser Parser handle
crates/c-api/include/vexy_json.h- */
crates/c-api/include/vexy_json.h:void vexy_json_parser_free(VexyJsonParser parser);
crates/c-api/include/vexy_json.h-
crates/c-api/include/vexy_json.h-/**
crates/c-api/include/vexy_json.h- * @brief Free a parse result
crates/c-api/include/vexy_json.h- * @param result Parse result to free
crates/c-api/include/vexy_json.h- */
crates/c-api/include/vexy_json.h:void vexy_json_free_result(VexyJsonParseResult result);
crates/c-api/include/vexy_json.h-
crates/c-api/include/vexy_json.h-/**
crates/c-api/include/vexy_json.h- * @brief Free a detailed result
crates/c-api/include/vexy_json.h- * @param result Detailed result to free
crates/c-api/include/vexy_json.h- */
crates/c-api/include/vexy_json.h:void vexy_json_free_detailed_result(VexyJsonDetailedResult result);
crates/c-api/include/vexy_json.h-
crates/c-api/include/vexy_json.h-/**
crates/c-api/include/vexy_json.h- * @brief Get default parser options
crates/c-api/include/vexy_json.h- * @return Default options
crates/c-api/include/vexy_json.h- */
crates/c-api/include/vexy_json.h:VexyJsonParserOptions vexy_json_default_options(void);
crates/c-api/include/vexy_json.h-
crates/c-api/include/vexy_json.h-#ifdef __cplusplus
crates/c-api/include/vexy_json.h-}
--
issues/101.txt-
issues/101.txt-## http://127.0.0.1:8081/debug-pages/test-wasm.html
issues/101.txt-
issues/101.txt:vexy_json WebAssembly Test Page
issues/101.txt:Testing the vexy_json WASM module functionality...
issues/101.txt-
issues/101.txt-WASM Module Initialization
issues/101.txt-✅ Module loaded successfully
issues/101.txt-Version Info
issues/101.txt:vexy_json vundefined
issues/101.txt-undefined
issues/101.txt-Basic JSON Parsing
issues/101.txt-Input: {"key": "value"}
--
scripts/cross-platform/build-all.sh-    local output_dir="$PROJECT_ROOT/target/$target/release"
scripts/cross-platform/build-all.sh-    mkdir -p "$output_dir"
scripts/cross-platform/build-all.sh-    
scripts/cross-platform/build-all.sh:    if $build_cmd build --release --bin vexy_json --target "$target"; then
scripts/cross-platform/build-all.sh-        # Copy binary to build directory
scripts/cross-platform/build-all.sh:        local binary_name="vexy_json"
scripts/cross-platform/build-all.sh-        if [[ "$target" == *"windows"* ]]; then
scripts/cross-platform/build-all.sh:            binary_name="vexy_json.exe"
scripts/cross-platform/build-all.sh-        fi
scripts/cross-platform/build-all.sh-        
scripts/cross-platform/build-all.sh:        local output_name="vexy_json-$VERSION-$target"
scripts/cross-platform/build-all.sh-        if [[ "$target" == *"windows"* ]]; then
scripts/cross-platform/build-all.sh-            output_name="$output_name.exe"
scripts/cross-platform/build-all.sh-        fi
--
scripts/cross-platform/build-all.sh-    
scripts/cross-platform/build-all.sh-    # Create archives
scripts/cross-platform/build-all.sh-    cd "$BUILD_DIR"
scripts/cross-platform/build-all.sh:    tar -czf "vexy_json-$VERSION-wasm-web.tar.gz" wasm-web/
scripts/cross-platform/build-all.sh:    tar -czf "vexy_json-$VERSION-wasm-nodejs.tar.gz" wasm-nodejs/
scripts/cross-platform/build-all.sh-    cd "$PROJECT_ROOT"
scripts/cross-platform/build-all.sh-    
scripts/cross-platform/build-all.sh-    return 0
--
scripts/cross-platform/build-all.sh-create_universal_macos() {
scripts/cross-platform/build-all.sh-    log "Creating universal macOS binary..."
scripts/cross-platform/build-all.sh-    
scripts/cross-platform/build-all.sh:    local intel_binary="$BUILD_DIR/vexy_json-$VERSION-x86_64-apple-darwin"
scripts/cross-platform/build-all.sh:    local arm_binary="$BUILD_DIR/vexy_json-$VERSION-aarch64-apple-darwin"
scripts/cross-platform/build-all.sh:    local universal_binary="$BUILD_DIR/vexy_json-$VERSION-universal-apple-darwin"
scripts/cross-platform/build-all.sh-    
scripts/cross-platform/build-all.sh-    if [[ -f "$intel_binary" && -f "$arm_binary" ]]; then
scripts/cross-platform/build-all.sh-        if command -v lipo &> /dev/null; then
--
scripts/cross-platform/build-all.sh-    cd "$BUILD_DIR"
scripts/cross-platform/build-all.sh-    
scripts/cross-platform/build-all.sh-    # Create individual archives for each binary
scripts/cross-platform/build-all.sh:    for file in vexy_json-$VERSION-*; do
scripts/cross-platform/build-all.sh-        if [[ -f "$file" && "$file" != *.tar.gz && "$file" != *.zip ]]; then
scripts/cross-platform/build-all.sh-            local archive_name="${file}.tar.gz"
scripts/cross-platform/build-all.sh-            tar -czf "$archive_name" "$file"
--
scripts/cross-platform/build-all.sh-    done
scripts/cross-platform/build-all.sh-    
scripts/cross-platform/build-all.sh-    # Create a comprehensive archive with all binaries
scripts/cross-platform/build-all.sh:    tar -czf "vexy_json-$VERSION-all-platforms.tar.gz" vexy_json-$VERSION-*
scripts/cross-platform/build-all.sh:    success "Created comprehensive archive: vexy_json-$VERSION-all-platforms.tar.gz"
scripts/cross-platform/build-all.sh-    
scripts/cross-platform/build-all.sh-    cd "$PROJECT_ROOT"
scripts/cross-platform/build-all.sh-}
--
scripts/cross-platform/build-all.sh-    
scripts/cross-platform/build-all.sh-    # Generate SHA256 checksums
scripts/cross-platform/build-all.sh-    if command -v sha256sum &> /dev/null; then
scripts/cross-platform/build-all.sh:        sha256sum vexy_json-$VERSION-* > checksums.sha256
scripts/cross-platform/build-all.sh-    elif command -v shasum &> /dev/null; then
scripts/cross-platform/build-all.sh:        shasum -a 256 vexy_json-$VERSION-* > checksums.sha256
scripts/cross-platform/build-all.sh-    else
scripts/cross-platform/build-all.sh-        warning "No SHA256 utility found, skipping checksum generation"
scripts/cross-platform/build-all.sh-        cd "$PROJECT_ROOT"
--
scripts/cross-platform/build-all.sh-    
scripts/cross-platform/build-all.sh-    if [[ -d "$BUILD_DIR" ]]; then
scripts/cross-platform/build-all.sh-        echo -e "${BLUE}Generated files:${NC}"
scripts/cross-platform/build-all.sh:        ls -la "$BUILD_DIR" | grep -E "(vexy_json-|checksums)" | while read -r line; do
scripts/cross-platform/build-all.sh-            echo "  $line"
scripts/cross-platform/build-all.sh-        done
scripts/cross-platform/build-all.sh-    fi
--
scripts/package-macos.sh-#!/bin/bash
scripts/package-macos.sh-# this_file: scripts/package-macos.sh
scripts/package-macos.sh:# Package vexy_json for macOS as a .pkg inside a .dmg
scripts/package-macos.sh-
scripts/package-macos.sh-set -e
scripts/package-macos.sh-
scripts/package-macos.sh-# Configuration
scripts/package-macos.sh:BINARY_NAME="vexy_json"
scripts/package-macos.sh-VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
scripts/package-macos.sh:BUNDLE_ID="com.twardoch.vexy_json"
scripts/package-macos.sh-INSTALL_LOCATION="/usr/local/bin"
scripts/package-macos.sh-BUILD_DIR="target/macos-package"
scripts/package-macos.sh-PKG_NAME="${BINARY_NAME}-${VERSION}.pkg"
scripts/package-macos.sh-DMG_NAME="${BINARY_NAME}-${VERSION}-macos.dmg"
scripts/package-macos.sh-
scripts/package-macos.sh:echo "Building vexy_json v${VERSION} for macOS..."
scripts/package-macos.sh-
scripts/package-macos.sh-# Clean and create build directory
scripts/package-macos.sh-rm -rf "${BUILD_DIR}"
--
scripts/package-macos.sh-# Create postinstall script to set permissions
scripts/package-macos.sh-cat > "${BUILD_DIR}/scripts/postinstall" << 'EOF'
scripts/package-macos.sh-#!/bin/bash
scripts/package-macos.sh:chmod 755 /usr/local/bin/vexy_json
scripts/package-macos.sh-exit 0
scripts/package-macos.sh-EOF
scripts/package-macos.sh-chmod +x "${BUILD_DIR}/scripts/postinstall"
--
scripts/package-macos.sh-cat > "${BUILD_DIR}/distribution.xml" << EOF
scripts/package-macos.sh-<?xml version="1.0" encoding="UTF-8"?>
scripts/package-macos.sh-<installer-gui-script minSpecVersion="1">
scripts/package-macos.sh:    <title>vexy_json ${VERSION}</title>
scripts/package-macos.sh-    <organization>com.twardoch</organization>
scripts/package-macos.sh-    <domains enable_anywhere="true"/>
scripts/package-macos.sh-    <installation-check script="pm_install_check();"/>
--
scripts/package-macos.sh-    function pm_install_check() {
scripts/package-macos.sh-        if(system.compareVersions(system.version.ProductVersion,'10.10') &lt; 0) {
scripts/package-macos.sh-            my.result.title = 'Failure';
scripts/package-macos.sh:            my.result.message = 'You need at least macOS 10.10 to install vexy_json.';
scripts/package-macos.sh-            my.result.type = 'Fatal';
scripts/package-macos.sh-            return false;
scripts/package-macos.sh-        }
--
scripts/package-macos.sh-
scripts/package-macos.sh-# Create README for DMG
scripts/package-macos.sh-cat > "${BUILD_DIR}/dmg/README.txt" << EOF
scripts/package-macos.sh:vexy_json ${VERSION} for macOS
scripts/package-macos.sh-========================
scripts/package-macos.sh-
scripts/package-macos.sh-A forgiving JSON parser - Rust port of jsonic
scripts/package-macos.sh-
scripts/package-macos.sh-Installation:
scripts/package-macos.sh-1. Double-click on ${PKG_NAME} to install
scripts/package-macos.sh:2. The 'vexy_json' command will be installed to /usr/local/bin
scripts/package-macos.sh-3. You may need to restart your terminal after installation
scripts/package-macos.sh-
scripts/package-macos.sh-Usage:
scripts/package-macos.sh:  echo '{"foo": "bar",}' | vexy_json
scripts/package-macos.sh-
scripts/package-macos.sh-For more information, visit:
scripts/package-macos.sh:https://github.com/twardoch/vexy_json
scripts/package-macos.sh-
scripts/package-macos.sh-EOF
scripts/package-macos.sh-
scripts/package-macos.sh-# Create the DMG
scripts/package-macos.sh-echo "Creating DMG..."
scripts/package-macos.sh:hdiutil create -volname "vexy_json ${VERSION}" \
scripts/package-macos.sh-    -srcfolder "${BUILD_DIR}/dmg" \
scripts/package-macos.sh-    -ov -format UDZO \
scripts/package-macos.sh-    "${DMG_NAME}"
--
scripts/package-macos.sh-
scripts/package-macos.sh-echo "✅ Successfully created ${DMG_NAME}"
scripts/package-macos.sh-echo "   Package contains ${PKG_NAME} installer"
scripts/package-macos.sh:echo "   Will install vexy_json to ${INSTALL_LOCATION}"
--
crates/python/src/lib.rs-// this_file: crates/python/src/lib.rs
crates/python/src/lib.rs-
crates/python/src/lib.rs://! Python bindings for vexy_json - a forgiving JSON parser.
crates/python/src/lib.rs-//!
crates/python/src/lib.rs://! This module provides Python bindings for the vexy_json library using PyO3,
crates/python/src/lib.rs-//! allowing Python users to parse forgiving JSON with the same capabilities
crates/python/src/lib.rs-//! as the Rust library.
crates/python/src/lib.rs-
crates/python/src/lib.rs-use pyo3::prelude::*;
crates/python/src/lib.rs-use pyo3::types::{PyDict, PyList};
crates/python/src/lib.rs-use pyo3::exceptions::{PyValueError, PyTypeError};
crates/python/src/lib.rs:use vexy_json_core::{parse, parse_with_options, ParserOptions};
crates/python/src/lib.rs:use vexy_json_core::ast::Value;
crates/python/src/lib.rs-use rustc_hash::FxHashMap;
crates/python/src/lib.rs-
crates/python/src/lib.rs:/// Convert a vexy_json Value to a Python object
crates/python/src/lib.rs-fn value_to_python(py: Python, value: &Value) -> PyResult<PyObject> {
crates/python/src/lib.rs-    match value {
crates/python/src/lib.rs-        Value::Null => Ok(py.None()),
crates/python/src/lib.rs-        Value::Bool(b) => Ok(b.to_object(py)),
crates/python/src/lib.rs-        Value::Number(num) => match num {
crates/python/src/lib.rs:            vexy_json_core::ast::Number::Integer(i) => Ok(i.to_object(py)),
crates/python/src/lib.rs:            vexy_json_core::ast::Number::Float(f) => Ok(f.to_object(py)),
crates/python/src/lib.rs-        },
crates/python/src/lib.rs-        Value::String(s) => Ok(s.to_object(py)),
crates/python/src/lib.rs-        Value::Array(arr) => {
--
crates/python/src/lib.rs-    }
crates/python/src/lib.rs-}
crates/python/src/lib.rs-
crates/python/src/lib.rs:/// Convert a Python object to a vexy_json Value
crates/python/src/lib.rs-fn python_to_value(py: Python, obj: &Bound<'_, PyAny>) -> PyResult<Value> {
crates/python/src/lib.rs-    if obj.is_none() {
crates/python/src/lib.rs-        Ok(Value::Null)
crates/python/src/lib.rs-    } else if let Ok(b) = obj.extract::<bool>() {
crates/python/src/lib.rs-        Ok(Value::Bool(b))
crates/python/src/lib.rs-    } else if let Ok(i) = obj.extract::<i64>() {
crates/python/src/lib.rs:        Ok(Value::Number(vexy_json_core::ast::Number::Integer(i)))
crates/python/src/lib.rs-    } else if let Ok(f) = obj.extract::<f64>() {
crates/python/src/lib.rs:        Ok(Value::Number(vexy_json_core::ast::Number::Float(f)))
crates/python/src/lib.rs-    } else if let Ok(s) = obj.extract::<String>() {
crates/python/src/lib.rs-        Ok(Value::String(s))
crates/python/src/lib.rs-    } else if let Ok(list) = obj.downcast::<PyList>() {
--
crates/python/src/lib.rs-        Ok(Value::Object(map))
crates/python/src/lib.rs-    } else {
crates/python/src/lib.rs-        Err(PyTypeError::new_err(format!(
crates/python/src/lib.rs:            "Cannot convert Python object of type {} to vexy_json Value",
crates/python/src/lib.rs-            obj.get_type().name()?
crates/python/src/lib.rs-        )))
crates/python/src/lib.rs-    }
--
crates/python/src/lib.rs-///     ValueError: If the input is not valid JSON
crates/python/src/lib.rs-///
crates/python/src/lib.rs-/// Example:
crates/python/src/lib.rs:///     >>> import vexy_json
crates/python/src/lib.rs:///     >>> result = vexy_json.parse('{"key": "value", trailing: true,}')
crates/python/src/lib.rs-///     >>> print(result)
crates/python/src/lib.rs-///     {'key': 'value', 'trailing': True}
crates/python/src/lib.rs-#[pyfunction]
--
crates/python/src/lib.rs-///     ValueError: If the input is not valid JSON
crates/python/src/lib.rs-///
crates/python/src/lib.rs-/// Example:
crates/python/src/lib.rs:///     >>> import vexy_json
crates/python/src/lib.rs:///     >>> result = vexy_json.parse_with_options('key: value', implicit_top_level=True)
crates/python/src/lib.rs-///     >>> print(result)
crates/python/src/lib.rs-///     {'key': 'value'}
crates/python/src/lib.rs-#[pyfunction]
--
crates/python/src/lib.rs-///     bool: True if the input is valid, False otherwise
crates/python/src/lib.rs-///
crates/python/src/lib.rs-/// Example:
crates/python/src/lib.rs:///     >>> import vexy_json
crates/python/src/lib.rs:///     >>> vexy_json.is_valid('{"valid": true}')
crates/python/src/lib.rs-///     True
crates/python/src/lib.rs:///     >>> vexy_json.is_valid('invalid json')
crates/python/src/lib.rs-///     False
crates/python/src/lib.rs-#[pyfunction]
crates/python/src/lib.rs-fn is_valid(input: &str) -> bool {
--
crates/python/src/lib.rs-///     TypeError: If the object cannot be serialized to JSON
crates/python/src/lib.rs-///
crates/python/src/lib.rs-/// Example:
crates/python/src/lib.rs:///     >>> import vexy_json
crates/python/src/lib.rs-///     >>> data = {'key': 'value', 'number': 42}
crates/python/src/lib.rs:///     >>> vexy_json.dumps(data)
crates/python/src/lib.rs-///     '{"key":"value","number":42}'
crates/python/src/lib.rs:///     >>> vexy_json.dumps(data, indent=2)
crates/python/src/lib.rs-///     '{\n  "key": "value",\n  "number": 42\n}'
crates/python/src/lib.rs-#[pyfunction]
crates/python/src/lib.rs-#[pyo3(signature = (obj, indent = None))]
--
crates/python/src/lib.rs-        Value::Null => "null".to_string(),
crates/python/src/lib.rs-        Value::Bool(b) => b.to_string(),
crates/python/src/lib.rs-        Value::Number(num) => match num {
crates/python/src/lib.rs:            vexy_json_core::ast::Number::Integer(i) => i.to_string(),
crates/python/src/lib.rs:            vexy_json_core::ast::Number::Float(f) => f.to_string(),
crates/python/src/lib.rs-        },
crates/python/src/lib.rs-        Value::String(s) => format!("\"{}\"", s.replace("\"", "\\\"")),
crates/python/src/lib.rs-        Value::Array(arr) => {
--
crates/python/src/lib.rs-///     ValueError: If the content is not valid JSON
crates/python/src/lib.rs-///
crates/python/src/lib.rs-/// Example:
crates/python/src/lib.rs:///     >>> import vexy_json
crates/python/src/lib.rs-///     >>> with open('data.json', 'r') as f:
crates/python/src/lib.rs:///     ...     result = vexy_json.load(f)
crates/python/src/lib.rs-#[pyfunction]
crates/python/src/lib.rs-#[pyo3(signature = (fp, **kwargs))]
crates/python/src/lib.rs-fn load(py: Python, fp: &Bound<'_, PyAny>, kwargs: Option<&Bound<'_, PyDict>>) -> PyResult<PyObject> {
--
crates/python/src/lib.rs-///     TypeError: If the object cannot be serialized
crates/python/src/lib.rs-///
crates/python/src/lib.rs-/// Example:
crates/python/src/lib.rs:///     >>> import vexy_json
crates/python/src/lib.rs-///     >>> data = {'key': 'value'}
crates/python/src/lib.rs-///     >>> with open('output.json', 'w') as f:
crates/python/src/lib.rs:///     ...     vexy_json.dump(data, f, indent=2)
crates/python/src/lib.rs-#[pyfunction]
crates/python/src/lib.rs-#[pyo3(signature = (obj, fp, indent = None))]
crates/python/src/lib.rs-fn dump(py: Python, obj: &Bound<'_, PyAny>, fp: &Bound<'_, PyAny>, indent: Option<usize>) -> PyResult<()> {
--
crates/python/src/lib.rs-/// JSON files or streams.
crates/python/src/lib.rs-///
crates/python/src/lib.rs-/// Example:
crates/python/src/lib.rs:///     >>> import vexy_json
crates/python/src/lib.rs:///     >>> with vexy_json.StreamingParser() as parser:
crates/python/src/lib.rs-///     ...     for item in parser.parse_stream(file_handle):
crates/python/src/lib.rs-///     ...         print(item)
crates/python/src/lib.rs-#[pyclass]
--
crates/python/src/lib.rs-    ///     Iterator of parsed JSON objects
crates/python/src/lib.rs-    ///
crates/python/src/lib.rs-    /// Example:
crates/python/src/lib.rs:    ///     >>> with vexy_json.StreamingParser() as parser:
crates/python/src/lib.rs-    ///     ...     for item in parser.parse_stream(file_handle):
crates/python/src/lib.rs-    ///     ...         process(item)
crates/python/src/lib.rs-    fn parse_stream(&mut self, _py: Python, fp: &Bound<'_, PyAny>) -> PyResult<StreamingIterator> {
--
crates/python/src/lib.rs-    ///     Iterator of parsed JSON objects
crates/python/src/lib.rs-    ///
crates/python/src/lib.rs-    /// Example:
crates/python/src/lib.rs:    ///     >>> with vexy_json.StreamingParser() as parser:
crates/python/src/lib.rs-    ///     ...     for item in parser.parse_lines(file_handle):
crates/python/src/lib.rs-    ///     ...         process(item)
crates/python/src/lib.rs-    fn parse_lines(&mut self, _py: Python, fp: &Bound<'_, PyAny>) -> PyResult<LineIterator> {
--
crates/python/src/lib.rs-///     ImportError: If NumPy is not available
crates/python/src/lib.rs-///
crates/python/src/lib.rs-/// Example:
crates/python/src/lib.rs:///     >>> import vexy_json
crates/python/src/lib.rs:///     >>> arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
crates/python/src/lib.rs-///     >>> print(type(arr))
crates/python/src/lib.rs-///     <class 'numpy.ndarray'>
crates/python/src/lib.rs-#[pyfunction]
--
crates/python/src/lib.rs-                // Fast path for numeric arrays
crates/python/src/lib.rs-                let numbers: Vec<f64> = arr.iter().map(|v| {
crates/python/src/lib.rs-                    match v {
crates/python/src/lib.rs:                        Value::Number(vexy_json_core::ast::Number::Integer(i)) => *i as f64,
crates/python/src/lib.rs:                        Value::Number(vexy_json_core::ast::Number::Float(f)) => *f,
crates/python/src/lib.rs-                        _ => 0.0, // Should not happen due to all_numbers check
crates/python/src/lib.rs-                    }
crates/python/src/lib.rs-                }).collect();
--
crates/python/src/lib.rs-///     numpy.ndarray: The parsed array with zero-copy optimization when possible
crates/python/src/lib.rs-///
crates/python/src/lib.rs-/// Example:
crates/python/src/lib.rs:///     >>> import vexy_json
crates/python/src/lib.rs:///     >>> arr = vexy_json.loads_numpy_zerocopy('[1.0, 2.0, 3.0]', dtype='float64')
crates/python/src/lib.rs-#[pyfunction]
crates/python/src/lib.rs-#[pyo3(signature = (input, dtype = None))]
crates/python/src/lib.rs-fn loads_numpy_zerocopy(py: Python, input: &str, dtype: Option<&str>) -> PyResult<PyObject> {
--
crates/python/src/lib.rs-            
crates/python/src/lib.rs-            for item in &arr {
crates/python/src/lib.rs-                match item {
crates/python/src/lib.rs:                    Value::Number(vexy_json_core::ast::Number::Integer(_)) => {
crates/python/src/lib.rs-                        all_floats = false;
crates/python/src/lib.rs-                    }
crates/python/src/lib.rs:                    Value::Number(vexy_json_core::ast::Number::Float(_)) => {
crates/python/src/lib.rs-                        all_integers = false;
crates/python/src/lib.rs-                    }
crates/python/src/lib.rs-                    _ => {
--
crates/python/src/lib.rs-                // Zero-copy path for integers
crates/python/src/lib.rs-                let integers: Vec<i64> = arr.iter().map(|v| {
crates/python/src/lib.rs-                    match v {
crates/python/src/lib.rs:                        Value::Number(vexy_json_core::ast::Number::Integer(i)) => *i,
crates/python/src/lib.rs-                        _ => 0, // Should not happen
crates/python/src/lib.rs-                    }
crates/python/src/lib.rs-                }).collect();
--
crates/python/src/lib.rs-                // Zero-copy path for floats or mixed numbers
crates/python/src/lib.rs-                let floats: Vec<f64> = arr.iter().map(|v| {
crates/python/src/lib.rs-                    match v {
crates/python/src/lib.rs:                        Value::Number(vexy_json_core::ast::Number::Integer(i)) => *i as f64,
crates/python/src/lib.rs:                        Value::Number(vexy_json_core::ast::Number::Float(f)) => *f,
crates/python/src/lib.rs-                        _ => 0.0, // Should not happen
crates/python/src/lib.rs-                    }
crates/python/src/lib.rs-                }).collect();
--
crates/python/src/lib.rs-///     pandas.DataFrame: The parsed JSON as a DataFrame
crates/python/src/lib.rs-///
crates/python/src/lib.rs-/// Example:
crates/python/src/lib.rs:///     >>> import vexy_json
crates/python/src/lib.rs:///     >>> df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
crates/python/src/lib.rs-///     >>> print(type(df))
crates/python/src/lib.rs-///     <class 'pandas.core.frame.DataFrame'>
crates/python/src/lib.rs-#[pyfunction]
--
crates/python/src/lib.rs-
crates/python/src/lib.rs-/// A Python module for parsing forgiving JSON
crates/python/src/lib.rs-#[pymodule]
crates/python/src/lib.rs:fn _vexy_json(m: &Bound<'_, PyModule>) -> PyResult<()> {
crates/python/src/lib.rs-    m.add_function(wrap_pyfunction!(parse_json, m)?)?;
crates/python/src/lib.rs-    m.add_function(wrap_pyfunction!(parse_with_options_py, m)?)?;
crates/python/src/lib.rs-    m.add_function(wrap_pyfunction!(is_valid, m)?)?;
--
crates/python/src/lib.rs-    // Add version information
crates/python/src/lib.rs-    m.add("__version__", env!("VEXY_JSON_VERSION", env!("CARGO_PKG_VERSION")))?;
crates/python/src/lib.rs-    m.add("__author__", "Adam Twardoch")?;
crates/python/src/lib.rs:    m.add("__description__", "A forgiving JSON parser - Python bindings for vexy_json")?;
crates/python/src/lib.rs-    
crates/python/src/lib.rs-    Ok(())
crates/python/src/lib.rs-}
--
bindings/python/Cargo.toml-[package]
bindings/python/Cargo.toml:name = "vexy_json-python"
bindings/python/Cargo.toml-version = "1.0.0"
bindings/python/Cargo.toml-edition = "2021"
bindings/python/Cargo.toml-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
bindings/python/Cargo.toml-license = "MIT OR Apache-2.0"
bindings/python/Cargo.toml:description = "Python bindings for vexy_json - a forgiving JSON parser"
bindings/python/Cargo.toml:repository = "https://github.com/twardoch/vexy_json"
bindings/python/Cargo.toml-keywords = [ "json", "parser", "forgiving", "repair", "python" ]
bindings/python/Cargo.toml-categories = [ "encoding", "parser-implementations" ]
bindings/python/Cargo.toml-
bindings/python/Cargo.toml-
bindings/python/Cargo.toml-[lib]
bindings/python/Cargo.toml:name = "vexy_json"
bindings/python/Cargo.toml-crate-type = [ "cdylib" ]
bindings/python/Cargo.toml-
bindings/python/Cargo.toml-
--
bindings/python/Cargo.toml-serde_json = "1.0"
bindings/python/Cargo.toml-
bindings/python/Cargo.toml-
bindings/python/Cargo.toml:[dependencies.vexy_json-core]
bindings/python/Cargo.toml-path = "../../crates/core"
bindings/python/Cargo.toml-version = "2.0.0"
bindings/python/Cargo.toml-
--
docs/assets/js/feedback.js-// this_file: docs/assets/js/feedback.js
docs/assets/js/feedback.js-
docs/assets/js/feedback.js-/**
docs/assets/js/feedback.js: * Feedback System for vexy_json Web Tool
docs/assets/js/feedback.js- * 
docs/assets/js/feedback.js- * Provides user feedback collection functionality including:
docs/assets/js/feedback.js- * - Feedback widget with different categories
--
docs/assets/js/feedback.js-    constructor() {
docs/assets/js/feedback.js-        this.isInitialized = false;
docs/assets/js/feedback.js-        this.feedbackData = {};
docs/assets/js/feedback.js:        this.rateLimitKey = 'vexy_json_feedback_rate_limit';
docs/assets/js/feedback.js:        this.feedbackStorageKey = 'vexy_json_feedback_history';
docs/assets/js/feedback.js-        this.maxFeedbackPerDay = 5; // Rate limiting
docs/assets/js/feedback.js-
docs/assets/js/feedback.js-        // GitHub repository info for issue creation
docs/assets/js/feedback.js:        this.githubRepo = 'twardoch/vexy_json';
docs/assets/js/feedback.js-        this.githubIssueUrl = `https://github.com/${this.githubRepo}/issues/new`;
docs/assets/js/feedback.js-
docs/assets/js/feedback.js-        this.init();
--
docs/assets/js/feedback.js-            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-4 h-4">
docs/assets/js/feedback.js-              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
docs/assets/js/feedback.js-            </svg>
docs/assets/js/feedback.js:            <span>This feedback will be used to improve vexy_json. Technical information helps us debug issues. No personal data is collected unless you provide it.</span>
docs/assets/js/feedback.js-          </div>
docs/assets/js/feedback.js-        </div>
docs/assets/js/feedback.js-        
--
docs/assets/js/feedback.js-            }
docs/assets/js/feedback.js-        }
docs/assets/js/feedback.js-
docs/assets/js/feedback.js:        body += `\n---\n*This issue was created via the vexy_json web tool feedback system.*`;
docs/assets/js/feedback.js-
docs/assets/js/feedback.js-        return {
docs/assets/js/feedback.js-            title: `${typeEmojis[data.type]} ${data.subject}`,
--
scripts/build-wasm.sh-#!/bin/bash
scripts/build-wasm.sh-# this_file: build-wasm.sh
scripts/build-wasm.sh-
scripts/build-wasm.sh:# WebAssembly Build Script for vexy_json
scripts/build-wasm.sh-# Automated build script using wasm-pack with configurable dev/release modes
scripts/build-wasm.sh-# Outputs to docs/pkg/ directory for web integration
scripts/build-wasm.sh-
--
scripts/build-wasm.sh-BLUE='\033[0;34m'
scripts/build-wasm.sh-NC='\033[0m' # No Color
scripts/build-wasm.sh-
scripts/build-wasm.sh:echo -e "${BLUE}🔧 vexy_json WebAssembly Build Script${NC}"
scripts/build-wasm.sh-echo "=================================================="
scripts/build-wasm.sh-echo -e "Build mode: ${YELLOW}$BUILD_MODE${NC}"
scripts/build-wasm.sh-echo -e "Output directory: ${YELLOW}$OUTPUT_DIR${NC}"
--
scripts/build-wasm.sh-fi
scripts/build-wasm.sh-
scripts/build-wasm.sh-# Additional optimization with wasm-opt if available
scripts/build-wasm.sh:if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" ] && command -v wasm-opt &>/dev/null; then
scripts/build-wasm.sh-    echo -e "${BLUE}🔧 Optimizing WASM bundle with wasm-opt...${NC}"
scripts/build-wasm.sh:    ORIGINAL_SIZE=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
scripts/build-wasm.sh:    wasm-opt -Oz "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" -o "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt"
scripts/build-wasm.sh:    if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt" ]; then
scripts/build-wasm.sh:        mv "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt" "$OUTPUT_DIR/vexy_json_wasm_bg.wasm"
scripts/build-wasm.sh:        OPTIMIZED_SIZE=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
scripts/build-wasm.sh-        REDUCTION=$((ORIGINAL_SIZE - OPTIMIZED_SIZE))
scripts/build-wasm.sh-        echo -e "${GREEN}✅ Additional optimization saved ${YELLOW}$REDUCTION bytes${NC}"
scripts/build-wasm.sh-    fi
scripts/build-wasm.sh-fi
scripts/build-wasm.sh-
scripts/build-wasm.sh-# Report bundle size
scripts/build-wasm.sh:if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" ]; then
scripts/build-wasm.sh:    WASM_SIZE=$(du -h "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" | cut -f1)
scripts/build-wasm.sh-    echo -e "${GREEN}📦 Final WASM bundle size: ${YELLOW}$WASM_SIZE${NC}"
scripts/build-wasm.sh-
scripts/build-wasm.sh-    # Size warnings
scripts/build-wasm.sh:    WASM_SIZE_BYTES=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
scripts/build-wasm.sh-    if [ "$WASM_SIZE_BYTES" -gt 1048576 ]; then # 1MB
scripts/build-wasm.sh-        echo -e "${YELLOW}⚠️  Warning: WASM bundle is larger than 1MB${NC}"
scripts/build-wasm.sh-        echo "   Consider optimizing for web deployment"
--
scripts/build-wasm.sh-echo
scripts/build-wasm.sh-echo -e "${BLUE}Example usage in HTML:${NC}"
scripts/build-wasm.sh-echo "  <script type=\"module\">"
scripts/build-wasm.sh:echo "    import init, { parse_json } from './pkg/vexy_json.js';"
scripts/build-wasm.sh-echo "    await init();"
scripts/build-wasm.sh-echo "    const result = parse_json('{\"test\": true}');"
scripts/build-wasm.sh-echo "  </script>"
--
crates/c-api/include/vexy_json.hpp-/**
crates/c-api/include/vexy_json.hpp: * @file vexy_json.hpp
crates/c-api/include/vexy_json.hpp: * @brief C++ header-only wrapper for the vexy_json JSON parser
crates/c-api/include/vexy_json.hpp- *
crates/c-api/include/vexy_json.hpp: * This header provides a modern C++ interface for the vexy_json JSON parser,
crates/c-api/include/vexy_json.hpp- * with RAII, exceptions, and STL container support.
crates/c-api/include/vexy_json.hpp- */
crates/c-api/include/vexy_json.hpp-
--
crates/c-api/include/vexy_json.hpp-#include <string_view>
crates/c-api/include/vexy_json.hpp-#include <utility>
crates/c-api/include/vexy_json.hpp-
crates/c-api/include/vexy_json.hpp:#include "vexy_json.h"
crates/c-api/include/vexy_json.hpp-
crates/c-api/include/vexy_json.hpp:namespace vexy_json {
crates/c-api/include/vexy_json.hpp-
crates/c-api/include/vexy_json.hpp-/**
crates/c-api/include/vexy_json.hpp: * @brief Exception thrown by vexy_json operations
crates/c-api/include/vexy_json.hpp- */
crates/c-api/include/vexy_json.hpp-class ParseError : public std::runtime_error {
crates/c-api/include/vexy_json.hpp-public:
crates/c-api/include/vexy_json.hpp-    explicit ParseError(const std::string& message) 
crates/c-api/include/vexy_json.hpp:        : std::runtime_error("vexy_json parse error: " + message) {}
crates/c-api/include/vexy_json.hpp-};
crates/c-api/include/vexy_json.hpp-
crates/c-api/include/vexy_json.hpp-/**
--
crates/c-api/include/vexy_json.hpp- */
crates/c-api/include/vexy_json.hpp-class ParserOptions {
crates/c-api/include/vexy_json.hpp-public:
crates/c-api/include/vexy_json.hpp:    ParserOptions() : options_(vexy_json_default_options()) {}
crates/c-api/include/vexy_json.hpp-    
crates/c-api/include/vexy_json.hpp-    ParserOptions& allowComments(bool value = true) {
crates/c-api/include/vexy_json.hpp-        options_.allow_comments = value;
--
crates/c-api/include/vexy_json.hpp-        return *this;
crates/c-api/include/vexy_json.hpp-    }
crates/c-api/include/vexy_json.hpp-    
crates/c-api/include/vexy_json.hpp:    const vexy_json_parser_options* get() const { return &options_; }
crates/c-api/include/vexy_json.hpp-    
crates/c-api/include/vexy_json.hpp-private:
crates/c-api/include/vexy_json.hpp:    vexy_json_parser_options options_;
crates/c-api/include/vexy_json.hpp-};
crates/c-api/include/vexy_json.hpp-
crates/c-api/include/vexy_json.hpp-/**
--
crates/c-api/include/vexy_json.hpp-public:
crates/c-api/include/vexy_json.hpp-    ParseResult() = default;
crates/c-api/include/vexy_json.hpp-    
crates/c-api/include/vexy_json.hpp:    explicit ParseResult(vexy_json_parse_result result) 
crates/c-api/include/vexy_json.hpp:        : result_(std::make_unique<vexy_json_parse_result>(result)) {
crates/c-api/include/vexy_json.hpp-        if (result.error) {
crates/c-api/include/vexy_json.hpp-            error_ = result.error;
crates/c-api/include/vexy_json.hpp-        }
--
crates/c-api/include/vexy_json.hpp-    
crates/c-api/include/vexy_json.hpp-    ~ParseResult() {
crates/c-api/include/vexy_json.hpp-        if (result_) {
crates/c-api/include/vexy_json.hpp:            vexy_json_free_result(*result_);
crates/c-api/include/vexy_json.hpp-        }
crates/c-api/include/vexy_json.hpp-    }
crates/c-api/include/vexy_json.hpp-    
--
crates/c-api/include/vexy_json.hpp-    }
crates/c-api/include/vexy_json.hpp-    
crates/c-api/include/vexy_json.hpp-private:
crates/c-api/include/vexy_json.hpp:    std::unique_ptr<vexy_json_parse_result> result_;
crates/c-api/include/vexy_json.hpp-    std::optional<std::string> json_;
crates/c-api/include/vexy_json.hpp-    std::optional<std::string> error_;
crates/c-api/include/vexy_json.hpp-};
--
crates/c-api/include/vexy_json.hpp-public:
crates/c-api/include/vexy_json.hpp-    DetailedParseResult() = default;
crates/c-api/include/vexy_json.hpp-    
crates/c-api/include/vexy_json.hpp:    explicit DetailedParseResult(vexy_json_detailed_result result) 
crates/c-api/include/vexy_json.hpp:        : result_(std::make_unique<vexy_json_detailed_result>(result)) {
crates/c-api/include/vexy_json.hpp-        if (result.error) {
crates/c-api/include/vexy_json.hpp-            error_ = result.error;
crates/c-api/include/vexy_json.hpp-        }
--
crates/c-api/include/vexy_json.hpp-    
crates/c-api/include/vexy_json.hpp-    ~DetailedParseResult() {
crates/c-api/include/vexy_json.hpp-        if (result_) {
crates/c-api/include/vexy_json.hpp:            vexy_json_free_detailed_result(*result_);
crates/c-api/include/vexy_json.hpp-        }
crates/c-api/include/vexy_json.hpp-    }
crates/c-api/include/vexy_json.hpp-    
--
crates/c-api/include/vexy_json.hpp-    const std::vector<Repair>& repairs() const { return repairs_; }
crates/c-api/include/vexy_json.hpp-    
crates/c-api/include/vexy_json.hpp-private:
crates/c-api/include/vexy_json.hpp:    std::unique_ptr<vexy_json_detailed_result> result_;
crates/c-api/include/vexy_json.hpp-    std::optional<std::string> json_;
crates/c-api/include/vexy_json.hpp-    std::optional<std::string> error_;
crates/c-api/include/vexy_json.hpp-    std::vector<Repair> repairs_;
--
crates/c-api/include/vexy_json.hpp-    Parser() : Parser(ParserOptions{}) {}
crates/c-api/include/vexy_json.hpp-    
crates/c-api/include/vexy_json.hpp-    explicit Parser(const ParserOptions& options) 
crates/c-api/include/vexy_json.hpp:        : parser_(vexy_json_parser_new(options.get())) {
crates/c-api/include/vexy_json.hpp-        if (!parser_) {
crates/c-api/include/vexy_json.hpp:            throw std::runtime_error("Failed to create vexy_json parser");
crates/c-api/include/vexy_json.hpp-        }
crates/c-api/include/vexy_json.hpp-    }
crates/c-api/include/vexy_json.hpp-    
--
crates/c-api/include/vexy_json.hpp-    Parser& operator=(Parser&& other) noexcept {
crates/c-api/include/vexy_json.hpp-        if (this != &other) {
crates/c-api/include/vexy_json.hpp-            if (parser_) {
crates/c-api/include/vexy_json.hpp:                vexy_json_parser_free(parser_);
crates/c-api/include/vexy_json.hpp-            }
crates/c-api/include/vexy_json.hpp-            parser_ = other.parser_;
crates/c-api/include/vexy_json.hpp-            other.parser_ = nullptr;
--
crates/c-api/include/vexy_json.hpp-    
crates/c-api/include/vexy_json.hpp-    ~Parser() {
crates/c-api/include/vexy_json.hpp-        if (parser_) {
crates/c-api/include/vexy_json.hpp:            vexy_json_parser_free(parser_);
crates/c-api/include/vexy_json.hpp-        }
crates/c-api/include/vexy_json.hpp-    }
crates/c-api/include/vexy_json.hpp-    
crates/c-api/include/vexy_json.hpp-    ParseResult parse(std::string_view input) const {
crates/c-api/include/vexy_json.hpp-        std::string input_str(input);
crates/c-api/include/vexy_json.hpp:        return ParseResult(vexy_json_parser_parse(parser_, input_str.c_str()));
crates/c-api/include/vexy_json.hpp-    }
crates/c-api/include/vexy_json.hpp-    
crates/c-api/include/vexy_json.hpp-    std::string parseToString(std::string_view input) const {
--
crates/c-api/include/vexy_json.hpp-    }
crates/c-api/include/vexy_json.hpp-    
crates/c-api/include/vexy_json.hpp-private:
crates/c-api/include/vexy_json.hpp:    vexy_json_parser parser_;
crates/c-api/include/vexy_json.hpp-};
crates/c-api/include/vexy_json.hpp-
crates/c-api/include/vexy_json.hpp-/**
--
crates/c-api/include/vexy_json.hpp- */
crates/c-api/include/vexy_json.hpp-inline std::string parse(std::string_view input) {
crates/c-api/include/vexy_json.hpp-    std::string input_str(input);
crates/c-api/include/vexy_json.hpp:    auto result = ParseResult(vexy_json_parse(input_str.c_str()));
crates/c-api/include/vexy_json.hpp-    return result.json();
crates/c-api/include/vexy_json.hpp-}
crates/c-api/include/vexy_json.hpp-
crates/c-api/include/vexy_json.hpp-inline std::string parse(std::string_view input, const ParserOptions& options) {
crates/c-api/include/vexy_json.hpp-    std::string input_str(input);
crates/c-api/include/vexy_json.hpp:    auto result = ParseResult(vexy_json_parse_with_options(input_str.c_str(), options.get()));
crates/c-api/include/vexy_json.hpp-    return result.json();
crates/c-api/include/vexy_json.hpp-}
crates/c-api/include/vexy_json.hpp-
crates/c-api/include/vexy_json.hpp-inline DetailedParseResult parseDetailed(std::string_view input, const ParserOptions& options) {
crates/c-api/include/vexy_json.hpp-    std::string input_str(input);
crates/c-api/include/vexy_json.hpp:    return DetailedParseResult(vexy_json_parse_detailed(input_str.c_str(), options.get()));
crates/c-api/include/vexy_json.hpp-}
crates/c-api/include/vexy_json.hpp-
crates/c-api/include/vexy_json.hpp-/**
crates/c-api/include/vexy_json.hpp: * @brief Get the version of the vexy_json library
crates/c-api/include/vexy_json.hpp- */
crates/c-api/include/vexy_json.hpp-inline std::string version() {
crates/c-api/include/vexy_json.hpp:    return vexy_json_version();
crates/c-api/include/vexy_json.hpp-}
crates/c-api/include/vexy_json.hpp-
crates/c-api/include/vexy_json.hpp:} // namespace vexy_json
crates/c-api/include/vexy_json.hpp-
crates/c-api/include/vexy_json.hpp-#endif // VEXY_JSON_HPP
--
benches/performance_comparison.rs-// this_file: benches/performance_comparison.rs
benches/performance_comparison.rs-
benches/performance_comparison.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
benches/performance_comparison.rs:use vexy_json::parse as vexy_json_parse;
benches/performance_comparison.rs-
benches/performance_comparison.rs-fn benchmark_parser_comparison(c: &mut Criterion) {
benches/performance_comparison.rs-    let mut group = c.benchmark_group("parser_comparison");
--
benches/performance_comparison.rs-
benches/performance_comparison.rs-    // Benchmark simple JSON
benches/performance_comparison.rs-    group.bench_with_input(
benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "simple"),
benches/performance_comparison.rs-        &simple_json,
benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
benches/performance_comparison.rs-    );
benches/performance_comparison.rs-
benches/performance_comparison.rs-    group.bench_with_input(
--
benches/performance_comparison.rs-
benches/performance_comparison.rs-    // Benchmark nested JSON
benches/performance_comparison.rs-    group.bench_with_input(
benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "nested"),
benches/performance_comparison.rs-        &nested_json,
benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
benches/performance_comparison.rs-    );
benches/performance_comparison.rs-
benches/performance_comparison.rs-    group.bench_with_input(
--
benches/performance_comparison.rs-
benches/performance_comparison.rs-    // Benchmark large array
benches/performance_comparison.rs-    group.bench_with_input(
benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "large_array"),
benches/performance_comparison.rs-        &large_array_json,
benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
benches/performance_comparison.rs-    );
benches/performance_comparison.rs-
benches/performance_comparison.rs-    group.bench_with_input(
--
benches/performance_comparison.rs-fn benchmark_forgiving_features(c: &mut Criterion) {
benches/performance_comparison.rs-    let mut group = c.benchmark_group("forgiving_features");
benches/performance_comparison.rs-
benches/performance_comparison.rs:    // Test vexy_json's forgiving features (serde_json can't parse these)
benches/performance_comparison.rs-    let forgiving_json = r#"{
benches/performance_comparison.rs-        // Comment
benches/performance_comparison.rs-        name: 'John',
--
benches/performance_comparison.rs-    let standard_json = r#"{"name": "John", "age": 30, "tags": ["rust", "json"]}"#;
benches/performance_comparison.rs-
benches/performance_comparison.rs-    group.bench_with_input(
benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "forgiving"),
benches/performance_comparison.rs-        &forgiving_json,
benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
benches/performance_comparison.rs-    );
benches/performance_comparison.rs-
benches/performance_comparison.rs-    group.bench_with_input(
benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "standard"),
benches/performance_comparison.rs-        &standard_json,
benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
benches/performance_comparison.rs-    );
benches/performance_comparison.rs-
benches/performance_comparison.rs-    group.bench_with_input(
--
benches/performance_comparison.rs-    let string_heavy = generate_string_heavy_json();
benches/performance_comparison.rs-
benches/performance_comparison.rs-    group.bench_with_input(
benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "string_heavy"),
benches/performance_comparison.rs-        &string_heavy,
benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
benches/performance_comparison.rs-    );
benches/performance_comparison.rs-
benches/performance_comparison.rs-    group.bench_with_input(
--
benches/performance_comparison.rs-        .map(|i| format!(r#"{{"id": {}, "name": "item{}", "active": true}}"#, i, i))
benches/performance_comparison.rs-        .collect();
benches/performance_comparison.rs-
benches/performance_comparison.rs:    group.bench_function("vexy_json_small_objects", |b| {
benches/performance_comparison.rs-        b.iter(|| {
benches/performance_comparison.rs-            for obj in &small_objects {
benches/performance_comparison.rs:                let _ = vexy_json_parse(black_box(obj));
benches/performance_comparison.rs-            }
benches/performance_comparison.rs-        })
benches/performance_comparison.rs-    });
--
crates/core/new_benchmark_results.txt-50 |     pub const BG_WHITE: &'static str = "\x1b[47m";
crates/core/new_benchmark_results.txt-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
crates/core/new_benchmark_results.txt-
crates/core/new_benchmark_results.txt:warning: `vexy_json-core` (lib) generated 58 warnings (run `cargo fix --lib -p vexy_json-core` to apply 1 suggestion)
crates/core/new_benchmark_results.txt-warning: returned pointer of `as_ptr` call is never null, so checking it for null will always return false
crates/core/new_benchmark_results.txt-   --> crates/core/src/optimization/memory_pool.rs:380:18
crates/core/new_benchmark_results.txt-    |
--
crates/core/new_benchmark_results.txt-    |
crates/core/new_benchmark_results.txt-    = note: `#[warn(useless_ptr_null_checks)]` on by default
crates/core/new_benchmark_results.txt-
crates/core/new_benchmark_results.txt:   Compiling vexy_json-core v0.2.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/crates/core)
crates/core/new_benchmark_results.txt:warning: `vexy_json-core` (lib test) generated 59 warnings (58 duplicates)
crates/core/new_benchmark_results.txt:error[E0432]: unresolved imports `vexy_json_core::parse_optimized_v2`, `vexy_json_core::parse_optimized_v2_with_options`, `vexy_json_core::parse_v2_with_stats`
crates/core/new_benchmark_results.txt-  --> crates/core/benches/parser_benchmarks.rs:12:18
crates/core/new_benchmark_results.txt-   |
crates/core/new_benchmark_results.txt-12 |                  parse_optimized_v2, parse_optimized_v2_with_options, parse_v2_with_stats, ParserOptions};
--
crates/core/new_benchmark_results.txt-   |
crates/core/new_benchmark_results.txt-
crates/core/new_benchmark_results.txt-For more information about this error, try `rustc --explain E0432`.
crates/core/new_benchmark_results.txt:error: could not compile `vexy_json-core` (bench "parser_benchmarks") due to 1 previous error
--
scripts/performance-monitor.js-// this_file: scripts/performance-monitor.js
scripts/performance-monitor.js-
scripts/performance-monitor.js-/**
scripts/performance-monitor.js: * Performance Monitoring Script for vexy_json WebAssembly Tool
scripts/performance-monitor.js- * 
scripts/performance-monitor.js- * This script sets up comprehensive performance monitoring for the deployed
scripts/performance-monitor.js: * vexy_json web tool, tracking key metrics like parsing performance, bundle loading,
scripts/performance-monitor.js- * user interactions, and system health.
scripts/performance-monitor.js- * 
scripts/performance-monitor.js- * Features:
--
scripts/performance-monitor.js-     * Monitor bundle size and loading performance
scripts/performance-monitor.js-     */
scripts/performance-monitor.js-    async monitorBundleMetrics() {
scripts/performance-monitor.js:        const baseUrl = 'https://twardoch.github.io/vexy_json';
scripts/performance-monitor.js-        const files = [
scripts/performance-monitor.js:            '/pkg/vexy_json.js',
scripts/performance-monitor.js:            '/pkg/vexy_json_bg.wasm',
scripts/performance-monitor.js-            '/tool.html',
scripts/performance-monitor.js-            '/assets/js/tool.js',
scripts/performance-monitor.js-            '/assets/css/tool.css'
--
scripts/performance-monitor.js-            {
scripts/performance-monitor.js-                name: 'forgiving', input: `{
scripts/performance-monitor.js-                // Comments test
scripts/performance-monitor.js:                name: 'vexy_json',  // single quotes
scripts/performance-monitor.js-                features: [
scripts/performance-monitor.js-                    'comments',
scripts/performance-monitor.js-                    'trailing commas', // trailing comma
--
scripts/performance-monitor.js-     * Run complete performance monitoring
scripts/performance-monitor.js-     */
scripts/performance-monitor.js-    async run() {
scripts/performance-monitor.js:        console.log('🚀 Starting vexy_json performance monitoring...\n');
scripts/performance-monitor.js-
scripts/performance-monitor.js-        try {
scripts/performance-monitor.js-            await this.monitorBundleMetrics();
--
benches/stack_overflow_test.rs-//! should outperform recursive parsers by avoiding stack overflow issues.
benches/stack_overflow_test.rs-
benches/stack_overflow_test.rs-use criterion::{black_box, criterion_group, criterion_main, Criterion, BenchmarkId};
benches/stack_overflow_test.rs:use vexy_json_core::{
benches/stack_overflow_test.rs-    parse_recursive,
benches/stack_overflow_test.rs-    parse_iterative,
benches/stack_overflow_test.rs-    ParserOptions,
--
debug_test8.rs:use vexy_json::parse;
debug_test8.rs-
debug_test8.rs-fn main() {
debug_test8.rs-    println!("Testing: 'a:1\\nb:2'");
--
benches/profiling.rs-// this_file: benches/profiling.rs
benches/profiling.rs-
benches/profiling.rs-use criterion::{black_box, criterion_group, criterion_main, Criterion};
benches/profiling.rs:use vexy_json::parse;
benches/profiling.rs-
benches/profiling.rs-fn profiling_heavy_workload(c: &mut Criterion) {
benches/profiling.rs-    // Create a large, complex JSON that will stress the parser
--
crates/c-api/Cargo.toml-[package]
crates/c-api/Cargo.toml:name = "vexy_json-c-api"
crates/c-api/Cargo.toml-version = "1.0.0"
crates/c-api/Cargo.toml-authors = [ "Vexy JSON Contributors" ]
crates/c-api/Cargo.toml-edition = "2021"
crates/c-api/Cargo.toml-license = "MIT OR Apache-2.0"
crates/c-api/Cargo.toml:description = "C API for the vexy_json JSON parser"
crates/c-api/Cargo.toml:repository = "https://github.com/twardoch/pub-vexy_json"
crates/c-api/Cargo.toml-
crates/c-api/Cargo.toml-
crates/c-api/Cargo.toml-[lib]
crates/c-api/Cargo.toml:name = "vexy_json_c_api"
crates/c-api/Cargo.toml-crate-type = [ "cdylib", "staticlib" ]
crates/c-api/Cargo.toml-
crates/c-api/Cargo.toml-
--
crates/c-api/Cargo.toml-serde_json = "1.0"
crates/c-api/Cargo.toml-
crates/c-api/Cargo.toml-
crates/c-api/Cargo.toml:[dependencies.vexy_json-core]
crates/c-api/Cargo.toml-path = "../core"
crates/c-api/Cargo.toml-features = [ "serde" ]
crates/c-api/Cargo.toml-
--
crates/python/README.md-# this_file: crates/python/README.md
crates/python/README.md-
crates/python/README.md:# vexy_json Python Bindings
crates/python/README.md-
crates/python/README.md:Python bindings for the vexy_json library - a forgiving JSON parser written in Rust.
crates/python/README.md-
crates/python/README.md-## Installation
crates/python/README.md-
crates/python/README.md-```bash
crates/python/README.md:pip install vexy_json
crates/python/README.md-```
crates/python/README.md-
crates/python/README.md-## Usage
crates/python/README.md-
crates/python/README.md-```python
crates/python/README.md:import vexy_json
crates/python/README.md-
crates/python/README.md-# Parse forgiving JSON
crates/python/README.md:result = vexy_json.parse('{"key": "value", trailing: true,}')
crates/python/README.md-print(result)  # {'key': 'value', 'trailing': True}
crates/python/README.md-
crates/python/README.md-# Use NumPy integration
crates/python/README.md-import numpy as np
crates/python/README.md:arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
crates/python/README.md-print(type(arr))  # <class 'numpy.ndarray'>
crates/python/README.md-```
crates/python/README.md-
--
crates/python/README.md-- pandas DataFrame integration
crates/python/README.md-- JSON repair functionality
crates/python/README.md-
crates/python/README.md:For more information, see the [main vexy_json documentation](https://github.com/twardoch/vexy_json).
--
debug_comment_colon.rs:use vexy_json::*;
debug_comment_colon.rs-
debug_comment_colon.rs-fn main() {
debug_comment_colon.rs-    let input = "a:#comment\nb:2";
--
benches/comprehensive_comparison.rs-#[derive(Debug, Clone)]
benches/comprehensive_comparison.rs-struct BenchmarkResult {
benches/comprehensive_comparison.rs-    name: String,
benches/comprehensive_comparison.rs:    vexy_json_time: Option<Duration>,
benches/comprehensive_comparison.rs:    vexy_json_success: bool,
benches/comprehensive_comparison.rs:    vexy_json_error: Option<String>,
benches/comprehensive_comparison.rs-    jsonic_time: Option<Duration>,
benches/comprehensive_comparison.rs-    jsonic_success: bool,
benches/comprehensive_comparison.rs-    jsonic_error: Option<String>,
--
benches/comprehensive_comparison.rs-        }
benches/comprehensive_comparison.rs-    }
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs:    fn run_vexy_json_benchmark(
benches/comprehensive_comparison.rs-        &self,
benches/comprehensive_comparison.rs-        _name: &str,
benches/comprehensive_comparison.rs-        content: &str,
benches/comprehensive_comparison.rs-    ) -> (Option<Duration>, bool, Option<String>) {
benches/comprehensive_comparison.rs-        let start = Instant::now();
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs:        match vexy_json::parse(content) {
benches/comprehensive_comparison.rs-            Ok(_) => (Some(start.elapsed()), true, None),
benches/comprehensive_comparison.rs-            Err(e) => (Some(start.elapsed()), false, Some(e.to_string())),
benches/comprehensive_comparison.rs-        }
--
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-        // Run multiple iterations for better accuracy
benches/comprehensive_comparison.rs-        const ITERATIONS: usize = 100;
benches/comprehensive_comparison.rs:        let mut vexy_json_times = Vec::new();
benches/comprehensive_comparison.rs-        let mut jsonic_times = Vec::new();
benches/comprehensive_comparison.rs:        let mut vexy_json_successes = 0;
benches/comprehensive_comparison.rs-        let mut jsonic_successes = 0;
benches/comprehensive_comparison.rs:        let mut vexy_json_last_error = None;
benches/comprehensive_comparison.rs-        let mut jsonic_last_error = None;
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-        // Warm up
benches/comprehensive_comparison.rs-        for _ in 0..10 {
benches/comprehensive_comparison.rs:            let _ = self.run_vexy_json_benchmark(name, &content);
benches/comprehensive_comparison.rs-            let _ = self.run_jsonic_benchmark(name, &content);
benches/comprehensive_comparison.rs-        }
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs:        // Benchmark vexy_json
benches/comprehensive_comparison.rs-        for _ in 0..ITERATIONS {
benches/comprehensive_comparison.rs:            let (time, success, error) = self.run_vexy_json_benchmark(name, &content);
benches/comprehensive_comparison.rs-            if let Some(t) = time {
benches/comprehensive_comparison.rs:                vexy_json_times.push(t);
benches/comprehensive_comparison.rs-            }
benches/comprehensive_comparison.rs-            if success {
benches/comprehensive_comparison.rs:                vexy_json_successes += 1;
benches/comprehensive_comparison.rs-            }
benches/comprehensive_comparison.rs-            if let Some(e) = error {
benches/comprehensive_comparison.rs:                vexy_json_last_error = Some(e);
benches/comprehensive_comparison.rs-            }
benches/comprehensive_comparison.rs-        }
benches/comprehensive_comparison.rs-
--
benches/comprehensive_comparison.rs-        }
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-        // Calculate averages
benches/comprehensive_comparison.rs:        let vexy_json_avg = if !vexy_json_times.is_empty() {
benches/comprehensive_comparison.rs:            Some(vexy_json_times.iter().sum::<Duration>() / vexy_json_times.len() as u32)
benches/comprehensive_comparison.rs-        } else {
benches/comprehensive_comparison.rs-            None
benches/comprehensive_comparison.rs-        };
--
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-        let result = BenchmarkResult {
benches/comprehensive_comparison.rs-            name: name.to_string(),
benches/comprehensive_comparison.rs:            vexy_json_time: vexy_json_avg,
benches/comprehensive_comparison.rs:            vexy_json_success: vexy_json_successes > ITERATIONS / 2,
benches/comprehensive_comparison.rs:            vexy_json_error: vexy_json_last_error,
benches/comprehensive_comparison.rs-            jsonic_time: jsonic_avg,
benches/comprehensive_comparison.rs-            jsonic_success: jsonic_successes > ITERATIONS / 2,
benches/comprehensive_comparison.rs-            jsonic_error: jsonic_last_error,
--
benches/comprehensive_comparison.rs-        };
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-        println!(
benches/comprehensive_comparison.rs:            "  vexy_json: {:?} (success: {})",
benches/comprehensive_comparison.rs:            result.vexy_json_time, result.vexy_json_success
benches/comprehensive_comparison.rs-        );
benches/comprehensive_comparison.rs-        println!(
benches/comprehensive_comparison.rs-            "  jsonic: {:?} (success: {})",
--
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-        // Title and introduction
benches/comprehensive_comparison.rs-        markdown.push_str("# Benchmark Results\n\n");
benches/comprehensive_comparison.rs:        markdown.push_str("Comprehensive performance comparison between vexy_json (Rust) and jsonic (JavaScript) parsers.\n\n");
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-        // Metadata
benches/comprehensive_comparison.rs-        markdown.push_str("## Test Environment\n\n");
--
benches/comprehensive_comparison.rs-        // Summary statistics
benches/comprehensive_comparison.rs-        markdown.push_str("## Summary\n\n");
benches/comprehensive_comparison.rs-        let total_tests = self.results.len();
benches/comprehensive_comparison.rs:        let vexy_json_successes = self.results.iter().filter(|r| r.vexy_json_success).count();
benches/comprehensive_comparison.rs-        let jsonic_successes = self.results.iter().filter(|r| r.jsonic_success).count();
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-        markdown.push_str(&format!("- **Total test cases**: {}\n", total_tests));
benches/comprehensive_comparison.rs-        markdown.push_str(&format!(
benches/comprehensive_comparison.rs:            "- **vexy_json success rate**: {:.1}% ({}/{})\n",
benches/comprehensive_comparison.rs:            (vexy_json_successes as f64 / total_tests as f64) * 100.0,
benches/comprehensive_comparison.rs:            vexy_json_successes,
benches/comprehensive_comparison.rs-            total_tests
benches/comprehensive_comparison.rs-        ));
benches/comprehensive_comparison.rs-        markdown.push_str(&format!(
--
benches/comprehensive_comparison.rs-        ));
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-        // Performance comparison
benches/comprehensive_comparison.rs:        let mut vexy_json_faster_count = 0;
benches/comprehensive_comparison.rs-        let mut jsonic_faster_count = 0;
benches/comprehensive_comparison.rs-        let mut speed_ratios = Vec::new();
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-        for result in &self.results {
benches/comprehensive_comparison.rs:            if let (Some(vexy_json_time), Some(jsonic_time)) =
benches/comprehensive_comparison.rs:                (result.vexy_json_time, result.jsonic_time)
benches/comprehensive_comparison.rs-            {
benches/comprehensive_comparison.rs:                if vexy_json_time < jsonic_time {
benches/comprehensive_comparison.rs:                    vexy_json_faster_count += 1;
benches/comprehensive_comparison.rs-                } else {
benches/comprehensive_comparison.rs-                    jsonic_faster_count += 1;
benches/comprehensive_comparison.rs-                }
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs:                let ratio = jsonic_time.as_nanos() as f64 / vexy_json_time.as_nanos() as f64;
benches/comprehensive_comparison.rs-                speed_ratios.push(ratio);
benches/comprehensive_comparison.rs-            }
benches/comprehensive_comparison.rs-        }
--
benches/comprehensive_comparison.rs-        if !speed_ratios.is_empty() {
benches/comprehensive_comparison.rs-            let avg_speedup = speed_ratios.iter().sum::<f64>() / speed_ratios.len() as f64;
benches/comprehensive_comparison.rs-            markdown.push_str(&format!(
benches/comprehensive_comparison.rs:                "- **Average vexy_json speedup**: {:.2}x\n",
benches/comprehensive_comparison.rs-                avg_speedup
benches/comprehensive_comparison.rs-            ));
benches/comprehensive_comparison.rs-            markdown.push_str(&format!(
benches/comprehensive_comparison.rs:                "- **vexy_json faster in**: {}/{} cases\n",
benches/comprehensive_comparison.rs:                vexy_json_faster_count,
benches/comprehensive_comparison.rs-                speed_ratios.len()
benches/comprehensive_comparison.rs-            ));
benches/comprehensive_comparison.rs-        }
--
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-        // Detailed results table
benches/comprehensive_comparison.rs-        markdown.push_str("## Detailed Results\n\n");
benches/comprehensive_comparison.rs:        markdown.push_str("| Test Case | Input Size | vexy_json Time | vexy_json Success | jsonic Time | jsonic Success | Speedup |\n");
benches/comprehensive_comparison.rs-        markdown.push_str("|-----------|------------|------------|---------------|-------------|----------------|----------|\n");
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-        for result in &self.results {
benches/comprehensive_comparison.rs:            let vexy_json_time_str = match result.vexy_json_time {
benches/comprehensive_comparison.rs-                Some(time) => format!("{:.3}ms", time.as_secs_f64() * 1000.0),
benches/comprehensive_comparison.rs-                None => "N/A".to_string(),
benches/comprehensive_comparison.rs-            };
--
benches/comprehensive_comparison.rs-                None => "N/A".to_string(),
benches/comprehensive_comparison.rs-            };
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs:            let speedup_str = match (result.vexy_json_time, result.jsonic_time) {
benches/comprehensive_comparison.rs:                (Some(vexy_json), Some(jsonic)) => {
benches/comprehensive_comparison.rs:                    let ratio = jsonic.as_nanos() as f64 / vexy_json.as_nanos() as f64;
benches/comprehensive_comparison.rs-                    format!("{:.2}x", ratio)
benches/comprehensive_comparison.rs-                }
benches/comprehensive_comparison.rs-                _ => "N/A".to_string(),
benches/comprehensive_comparison.rs-            };
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs:            let vexy_json_success_icon = if result.vexy_json_success {
benches/comprehensive_comparison.rs-                "✅"
benches/comprehensive_comparison.rs-            } else {
benches/comprehensive_comparison.rs-                "❌"
--
benches/comprehensive_comparison.rs-                "| {} | {} bytes | {} | {} | {} | {} | {} |\n",
benches/comprehensive_comparison.rs-                result.name,
benches/comprehensive_comparison.rs-                result.input_size,
benches/comprehensive_comparison.rs:                vexy_json_time_str,
benches/comprehensive_comparison.rs:                vexy_json_success_icon,
benches/comprehensive_comparison.rs-                jsonic_time_str,
benches/comprehensive_comparison.rs-                jsonic_success_icon,
benches/comprehensive_comparison.rs-                speedup_str
--
benches/comprehensive_comparison.rs-        markdown.push_str("\n");
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-        // Error analysis
benches/comprehensive_comparison.rs:        let vexy_json_errors: Vec<_> = self
benches/comprehensive_comparison.rs-            .results
benches/comprehensive_comparison.rs-            .iter()
benches/comprehensive_comparison.rs:            .filter(|r| !r.vexy_json_success && r.vexy_json_error.is_some())
benches/comprehensive_comparison.rs-            .collect();
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-        let jsonic_errors: Vec<_> = self
--
benches/comprehensive_comparison.rs-            .filter(|r| !r.jsonic_success && r.jsonic_error.is_some())
benches/comprehensive_comparison.rs-            .collect();
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs:        if !vexy_json_errors.is_empty() || !jsonic_errors.is_empty() {
benches/comprehensive_comparison.rs-            markdown.push_str("## Error Analysis\n\n");
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs:            if !vexy_json_errors.is_empty() {
benches/comprehensive_comparison.rs:                markdown.push_str("### vexy_json Errors\n\n");
benches/comprehensive_comparison.rs:                for result in vexy_json_errors {
benches/comprehensive_comparison.rs-                    markdown.push_str(&format!(
benches/comprehensive_comparison.rs-                        "**{}**: {}\n\n",
benches/comprehensive_comparison.rs-                        result.name,
benches/comprehensive_comparison.rs:                        result.vexy_json_error.as_ref().unwrap()
benches/comprehensive_comparison.rs-                    ));
benches/comprehensive_comparison.rs-                }
benches/comprehensive_comparison.rs-            }
--
benches/comprehensive_comparison.rs-        markdown.push_str("## Methodology\n\n");
benches/comprehensive_comparison.rs-        markdown.push_str("- Each test case is run 100 times after 10 warm-up runs\n");
benches/comprehensive_comparison.rs-        markdown.push_str("- Times are averaged across all successful runs\n");
benches/comprehensive_comparison.rs:        markdown.push_str("- vexy_json is tested via direct Rust function calls\n");
benches/comprehensive_comparison.rs-        markdown.push_str(&format!(
benches/comprehensive_comparison.rs-            "- jsonic is tested via `{} --bun {} < input`\n",
benches/comprehensive_comparison.rs-            format!("{}/.bun/bin/bun", std::env::var("HOME").unwrap_or_default()),
benches/comprehensive_comparison.rs-            "/usr/local/bin/jsonic"
benches/comprehensive_comparison.rs-        ));
benches/comprehensive_comparison.rs:        markdown.push_str("- Speedup is calculated as `jsonic_time / vexy_json_time`\n");
benches/comprehensive_comparison.rs-        markdown
benches/comprehensive_comparison.rs-            .push_str("- Success is determined by whether parsing completes without errors\n\n");
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-        markdown.push_str("---\n\n");
benches/comprehensive_comparison.rs-        markdown.push_str(
benches/comprehensive_comparison.rs:            "*This report was automatically generated by the vexy_json benchmark suite.*\n",
benches/comprehensive_comparison.rs-        );
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-        markdown
benches/comprehensive_comparison.rs-    }
benches/comprehensive_comparison.rs-}
benches/comprehensive_comparison.rs-fn main() {
benches/comprehensive_comparison.rs:    println!("Running comprehensive vexy_json vs jsonic benchmark...");
benches/comprehensive_comparison.rs-
benches/comprehensive_comparison.rs-    let mut suite = BenchmarkSuite::new();
benches/comprehensive_comparison.rs-
--
benches/benchmark.rs-
benches/benchmark.rs-struct BenchmarkResult {
benches/benchmark.rs-    case: String,
benches/benchmark.rs:    vexy_json_ns: f64,
benches/benchmark.rs-}
--
benches/simd_benchmarks.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
benches/simd_benchmarks.rs:use vexy_json_core::optimization::simd::*;
benches/simd_benchmarks.rs-
benches/simd_benchmarks.rs-fn generate_test_strings() -> Vec<(&'static str, String)> {
benches/simd_benchmarks.rs-    vec![
--
benches/lexer_microbenchmarks.rs-// this_file: benches/lexer_microbenchmarks.rs
benches/lexer_microbenchmarks.rs-
benches/lexer_microbenchmarks.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
benches/lexer_microbenchmarks.rs:use vexy_json_core::lexer::{FastLexer, JsonLexer, LexerConfig, LexerMode};
benches/lexer_microbenchmarks.rs-
benches/lexer_microbenchmarks.rs-fn bench_tokenize_simple_json(c: &mut Criterion) {
benches/lexer_microbenchmarks.rs-    let mut group = c.benchmark_group("tokenize simple json");
--
docs/assets/js/error-highlighting.js-// this_file: docs/assets/js/error-highlighting.js
docs/assets/js/error-highlighting.js-
docs/assets/js/error-highlighting.js-/**
docs/assets/js/error-highlighting.js: * Error highlighting system for the vexy_json web tool
docs/assets/js/error-highlighting.js- * Provides position-aware error display with line/column detection
docs/assets/js/error-highlighting.js- */
docs/assets/js/error-highlighting.js-
--
docs/assets/js/error-highlighting.js-    }
docs/assets/js/error-highlighting.js-
docs/assets/js/error-highlighting.js-    /**
docs/assets/js/error-highlighting.js:     * Parse vexy_json error message to extract position
docs/assets/js/error-highlighting.js-     * @param {string} errorMessage - Raw error message
docs/assets/js/error-highlighting.js-     * @returns {object} Parsed error information
docs/assets/js/error-highlighting.js-     */
--
crates/core/benches/parser_benchmarks.rs://! Comprehensive benchmark suite for vexy_json parser performance.
crates/core/benches/parser_benchmarks.rs-//!
crates/core/benches/parser_benchmarks.rs-//! This benchmark suite measures various aspects of parser performance including:
crates/core/benches/parser_benchmarks.rs-//! - Basic parsing speed
--
crates/core/benches/parser_benchmarks.rs-
crates/core/benches/parser_benchmarks.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
crates/core/benches/parser_benchmarks.rs-use std::fs;
crates/core/benches/parser_benchmarks.rs:use vexy_json_core::{
crates/core/benches/parser_benchmarks.rs-    parse, parse_optimized, parse_optimized_v2,
crates/core/benches/parser_benchmarks.rs-    parse_optimized_with_options, parse_v2_with_stats, parse_with_stats, ParserOptions,
crates/core/benches/parser_benchmarks.rs-};
--
GEMINI.md-
GEMINI.md-## 1. Project Overview
GEMINI.md-
GEMINI.md:`vexy_json` is a forgiving JSON parser implemented in Rust. A reference JavaScript implementation is located in the `ref/jsonic/` directory.
GEMINI.md-
GEMINI.md-## 2. Development Status
GEMINI.md-
--
GEMINI.md-    -   `crates/core/examples/error_reporting.rs`: Example for error reporting.
GEMINI.md--   `crates/cli`: The command-line interface.
GEMINI.md-    -   `src/main.rs`: The entry point for the CLI binary.
GEMINI.md:-   `crates/c-api`: Provides C and C++ bindings, including `examples/`, `include/` (with `vexy_json.h` and `vexy_json.hpp`), and `src/lib.rs`.
GEMINI.md:-   `crates/python`: Provides Python bindings, including `python/vexy_json/__init__.py`, `src/lib.rs`, and `tests/`.
GEMINI.md:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`, with `src/lib.rs`.
GEMINI.md:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments, including `src/lib.rs` and `test.mjs`.
GEMINI.md--   `crates/test-utils`: Utility functions for testing, with `src/lib.rs`.
GEMINI.md-
GEMINI.md-### 3.2. Core Features
--
GEMINI.md-    -   Property-based tests are implemented using `proptest` in `tests/property_tests.rs`.
GEMINI.md--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
GEMINI.md--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json`.
GEMINI.md:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
GEMINI.md-
GEMINI.md-## 4. Development Workflow
GEMINI.md-
--
debug_test3.rs:use vexy_json::parse;
debug_test3.rs-
debug_test3.rs-fn main() {
debug_test3.rs-    let input = "a:#comment\nb:2";
--
benches/parser_comparison.rs-//! - Stack-based iterative parser (iterative)
benches/parser_comparison.rs-
benches/parser_comparison.rs-use criterion::{black_box, criterion_group, criterion_main, Criterion, BenchmarkId};
benches/parser_comparison.rs:use vexy_json_core::{
benches/parser_comparison.rs-    parse_with_options, 
benches/parser_comparison.rs-    parse_optimized_with_options,
benches/parser_comparison.rs-    parse_optimized_v2_with_options,
--
benches/parsing.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
benches/parsing.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
benches/parsing.rs-
benches/parsing.rs-fn benchmark_simple_object(c: &mut Criterion) {
benches/parsing.rs-    let json = r#"{"name": "John", "age": 30, "active": true}"#;
--
benches/memory_benchmarks.rs-use std::alloc::{GlobalAlloc, Layout, System};
benches/memory_benchmarks.rs-use std::sync::atomic::{AtomicUsize, Ordering};
benches/memory_benchmarks.rs-use std::sync::Arc;
benches/memory_benchmarks.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
benches/memory_benchmarks.rs-
benches/memory_benchmarks.rs-/// A tracking allocator that wraps the system allocator
benches/memory_benchmarks.rs-/// to monitor memory allocations during benchmarks
--
fuzz/Cargo.toml-[package]
fuzz/Cargo.toml:name = "vexy_json-core-fuzz"
fuzz/Cargo.toml-version = "0.0.0"
fuzz/Cargo.toml-publish = false
fuzz/Cargo.toml-edition = "2021"
--
fuzz/Cargo.toml-libfuzzer-sys = "0.4"
fuzz/Cargo.toml-
fuzz/Cargo.toml-
fuzz/Cargo.toml:[dependencies.vexy_json-core]
fuzz/Cargo.toml-path = "../crates/core"
fuzz/Cargo.toml-
fuzz/Cargo.toml-
fuzz/Cargo.toml:[dependencies.vexy_json]
fuzz/Cargo.toml-path = ".."
fuzz/Cargo.toml-
fuzz/Cargo.toml-
--
debug_test7.rs:use vexy_json::parse;
debug_test7.rs-
debug_test7.rs-fn main() {
debug_test7.rs-    // Test the exact failing case
--
crates/python/tests/test_vexy_json.py-#!/usr/bin/env python3
crates/python/tests/test_vexy_json.py:# Test file for vexy_json renaming
crates/python/tests/test_vexy_json.py-
crates/python/tests/test_vexy_json.py:import vexy_json
crates/python/tests/test_vexy_json.py:from vexy_json import VexyJSONParser, VexyJSONConfig
crates/python/tests/test_vexy_json.py-
crates/python/tests/test_vexy_json.py-
crates/python/tests/test_vexy_json.py-class VexyJSONWrapper:
--
crates/python/tests/test_vexy_json.py-        self.config = VexyJSONConfig()
crates/python/tests/test_vexy_json.py-
crates/python/tests/test_vexy_json.py-    def parse(self, data):
crates/python/tests/test_vexy_json.py:        # Parse vexy_json data
crates/python/tests/test_vexy_json.py-        return self.parser.parse(data)
crates/python/tests/test_vexy_json.py-
crates/python/tests/test_vexy_json.py-
crates/python/tests/test_vexy_json.py:# Test with a string that contains "vexy_json"
crates/python/tests/test_vexy_json.py:test_string = "This is a vexy_json parser"
crates/python/tests/test_vexy_json.py:print(f"Vexy JSON version: {vexy_json.__version__}")
--
benches/parser_microbenchmarks.rs-// this_file: benches/parser_microbenchmarks.rs
benches/parser_microbenchmarks.rs-
benches/parser_microbenchmarks.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
benches/parser_microbenchmarks.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
benches/parser_microbenchmarks.rs:use vexy_json_core::lexer::{FastLexer, JsonLexer, LexerConfig};
benches/parser_microbenchmarks.rs-
benches/parser_microbenchmarks.rs-fn bench_parse_small_object(c: &mut Criterion) {
benches/parser_microbenchmarks.rs-    let mut group = c.benchmark_group("parse small object");
--
crates/serde/src/lib.rs-use serde::{Deserialize, Serialize};
crates/serde/src/lib.rs:use vexy_json_core::ast::Value;
crates/serde/src/lib.rs-
crates/serde/src/lib.rs-// This is a placeholder for Serde integration.
crates/serde/src/lib.rs:// Actual implementation would involve implementing Serialize/Deserialize for vexy_json_core::Value
crates/serde/src/lib.rs-// or providing helper functions for conversion.
crates/serde/src/lib.rs-
crates/serde/src/lib.rs-#[derive(Debug, PartialEq, Serialize, Deserialize)]
--
fuzz/fuzz_targets/json_structure.rs-#![no_main]
fuzz/fuzz_targets/json_structure.rs-
fuzz/fuzz_targets/json_structure.rs-use libfuzzer_sys::fuzz_target;
fuzz/fuzz_targets/json_structure.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
fuzz/fuzz_targets/json_structure.rs-
fuzz/fuzz_targets/json_structure.rs-fuzz_target!(|data: &[u8]| {
fuzz/fuzz_targets/json_structure.rs-    if let Ok(s) = std::str::from_utf8(data) {
--
crates/core/Cargo.toml-[package]
crates/core/Cargo.toml:name = "vexy_json-core"
crates/core/Cargo.toml-version = "1.0.0"
crates/core/Cargo.toml-edition = "2021"
crates/core/Cargo.toml-
--
crates/serde/Cargo.toml-[package]
crates/serde/Cargo.toml:name = "vexy_json-serde"
crates/serde/Cargo.toml-version = "1.0.0"
crates/serde/Cargo.toml-edition = "2021"
crates/serde/Cargo.toml-
--
crates/serde/Cargo.toml-path = "src/lib.rs"
crates/serde/Cargo.toml-
crates/serde/Cargo.toml-
crates/serde/Cargo.toml:[dependencies.vexy_json-core]
crates/serde/Cargo.toml-path = "../core"
crates/serde/Cargo.toml-features = [ "serde" ]
crates/serde/Cargo.toml-
--
fuzz/fuzz_targets/unicode.rs-#![no_main]
fuzz/fuzz_targets/unicode.rs-
fuzz/fuzz_targets/unicode.rs-use libfuzzer_sys::fuzz_target;
fuzz/fuzz_targets/unicode.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
fuzz/fuzz_targets/unicode.rs-
fuzz/fuzz_targets/unicode.rs-fuzz_target!(|data: &[u8]| {
fuzz/fuzz_targets/unicode.rs-    // Test with raw bytes (may include invalid UTF-8)
--
crates/core/examples/advanced_repair.rs:use vexy_json_core::repair::{AdvancedJsonRepairer, TypeCoercionRules};
crates/core/examples/advanced_repair.rs-
crates/core/examples/advanced_repair.rs-fn main() {
crates/core/examples/advanced_repair.rs-    println!("=== Vexy JSON Advanced Repair Examples ===\n");
--
crates/core/src/error/result.rs-
crates/core/src/error/result.rs-use super::types::Error;
crates/core/src/error/result.rs-
crates/core/src/error/result.rs:/// Convenience type alias for Results using vexy_json's Error type.
crates/core/src/error/result.rs-///
crates/core/src/error/result.rs-/// This makes function signatures more concise throughout the codebase
crates/core/src/error/result.rs-/// while maintaining type safety. Most parsing functions return this type.
--
crates/core/final_benchmark_results.txt:   Compiling vexy_json-core v0.2.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/crates/core)
crates/core/final_benchmark_results.txt-warning: unnecessary qualification
crates/core/final_benchmark_results.txt-   --> crates/core/src/optimization/memory_pool.rs:157:34
crates/core/final_benchmark_results.txt-    |
--
crates/core/final_benchmark_results.txt-    |
crates/core/final_benchmark_results.txt-    = note: `#[warn(useless_ptr_null_checks)]` on by default
crates/core/final_benchmark_results.txt-
crates/core/final_benchmark_results.txt:warning: `vexy_json-core` (lib) generated 58 warnings (run `cargo fix --lib -p vexy_json-core` to apply 1 suggestion)
crates/core/final_benchmark_results.txt-warning: unused import: `parse_optimized_v2_with_options`
crates/core/final_benchmark_results.txt-  --> crates/core/benches/parser_benchmarks.rs:12:38
crates/core/final_benchmark_results.txt-   |
--
crates/core/final_benchmark_results.txt-55 |     pub const MALFORMED_JSON: &str = r#"{'name': 'John', age: 30, "items": [1, 2, 3,]}"#;
crates/core/final_benchmark_results.txt-   |               ^^^^^^^^^^^^^^
crates/core/final_benchmark_results.txt-
crates/core/final_benchmark_results.txt:warning: `vexy_json-core` (lib test) generated 59 warnings (58 duplicates)
crates/core/final_benchmark_results.txt:warning: `vexy_json-core` (bench "parser_benchmarks") generated 3 warnings (run `cargo fix --bench "parser_benchmarks"` to apply 1 suggestion)
crates/core/final_benchmark_results.txt-    Finished `bench` profile [optimized] target(s) in 1m 06s
crates/core/final_benchmark_results.txt:     Running unittests src/lib.rs (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/target/release/deps/vexy_json_core-61b1bad5e05d5e9e)
crates/core/final_benchmark_results.txt-
crates/core/final_benchmark_results.txt-running 100 tests
crates/core/final_benchmark_results.txt-test error::recovery::tests::test_number_format_fix ... ignored
--
crates/core/final_benchmark_results.txt-
crates/core/final_benchmark_results.txt-test result: ok. 0 passed; 0 failed; 100 ignored; 0 measured; 0 filtered out; finished in 0.00s
crates/core/final_benchmark_results.txt-
crates/core/final_benchmark_results.txt:     Running benches/parser_benchmarks.rs (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/target/release/deps/parser_benchmarks-6ba04f7e4c288a89)
crates/core/final_benchmark_results.txt-Gnuplot not found, using plotters backend
crates/core/final_benchmark_results.txt-Benchmarking basic_parsing/simple_object
crates/core/final_benchmark_results.txt-Benchmarking basic_parsing/simple_object: Warming up for 3.0000 s
--
docs/assets/images/flamegraph_detailed.svg-function format_percent(n) {
docs/assets/images/flamegraph_detailed.svg-    return n.toFixed(4) + "%";
docs/assets/images/flamegraph_detailed.svg-}
docs/assets/images/flamegraph_detailed.svg:]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="1195"><g><title>0x110953383 (1 samples, 0.08%)</title><rect x="0.0000%" y="341" width="0.0837%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>0x110953712 (1 samples, 0.08%)</title><rect x="0.0000%" y="325" width="0.0837%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>0x1109874d4 (1 samples, 0.08%)</title><rect x="0.0000%" y="309" width="0.0837%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>0x1109a4433 (1 samples, 0.08%)</title><rect x="0.0000%" y="293" width="0.0837%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>0x1109a4c89 (1 samples, 0.08%)</title><rect x="0.0000%" y="277" width="0.0837%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>0x11097a980 (1 samples, 0.08%)</title><rect x="0.0000%" y="261" width="0.0837%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>dyld4::ProcessConfig::ProcessConfig(dyld4::KernelArgs const*, dyld4::SyscallDelegate&amp;, lsl::Allocator&amp;) (1 samples, 0.08%)</title><rect x="0.0837%" y="309" width="0.0837%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.3337%" y="319.50"></text></g><g><title>dyld4::ProcessConfig::DyldCache::DyldCache(dyld4::ProcessConfig::Process&amp;, dyld4::ProcessConfig::Security const&amp;, dyld4::ProcessConfig::Logging const&amp;, dyld4::SyscallDelegate&amp;, lsl::Allocator&amp;, dyld4::ProcessConfig const&amp;) (1 samples, 0.08%)</title><rect x="0.0837%" y="293" width="0.0837%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.3337%" y="303.50"></text></g><g><title>dyld4::CacheFinder::CacheFinder(dyld4::ProcessConfig::Process const&amp;, dyld4::ProcessConfig::Logging const&amp;, dyld4::SyscallDelegate&amp;) (1 samples, 0.08%)</title><rect x="0.0837%" y="277" width="0.0837%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.3337%" y="287.50"></text></g><g><title>ignite (1 samples, 0.08%)</title><rect x="0.0837%" y="261" width="0.0837%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.3337%" y="271.50"></text></g><g><title>boot_boot (1 samples, 0.08%)</title><rect x="0.0837%" y="245" width="0.0837%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.3337%" y="255.50"></text></g><g><title>stage_fire (1 samples, 0.08%)</title><rect x="0.0837%" y="229" width="0.0837%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.3337%" y="239.50"></text></g><g><title>_graft_fetch_fire (1 samples, 0.08%)</title><rect x="0.0837%" y="213" width="0.0837%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.3337%" y="223.50"></text></g><g><title>__openat (1 samples, 0.08%)</title><rect x="0.0837%" y="197" width="0.0837%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.3337%" y="207.50"></text></g><g><title>dyld4::ExternallyViewableState::setLibSystemInitialized() (1 samples, 0.08%)</title><rect x="0.1674%" y="277" width="0.0837%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="0.4174%" y="287.50"></text></g><g><title>dyld4::ExternallyViewableState::setDyldState(unsigned char) (1 samples, 0.08%)</title><rect x="0.1674%" y="261" width="0.0837%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.4174%" y="271.50"></text></g><g><title>lsl::Allocator::~Allocator() (1 samples, 0.08%)</title><rect x="0.1674%" y="245" width="0.0837%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.4174%" y="255.50"></text></g><g><title>mach_vm_deallocate (1 samples, 0.08%)</title><rect x="0.1674%" y="229" width="0.0837%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.4174%" y="239.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.08%)</title><rect x="0.1674%" y="213" width="0.0837%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.4174%" y="223.50"></text></g><g><title>__libkernel_init (1 samples, 0.08%)</title><rect x="0.2510%" y="133" width="0.0837%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="0.5010%" y="143.50"></text></g><g><title>mach_init_doit (1 samples, 0.08%)</title><rect x="0.2510%" y="117" width="0.0837%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="0.5010%" y="127.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (3 samples, 0.25%)</title><rect x="0.1674%" y="293" width="0.2510%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="3"/><text x="0.4174%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (2 samples, 0.17%)</title><rect x="0.2510%" y="277" width="0.1674%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="2"/><text x="0.5010%" y="287.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (2 samples, 0.17%)</title><rect x="0.2510%" y="261" width="0.1674%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="2"/><text x="0.5010%" y="271.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (2 samples, 0.17%)</title><rect x="0.2510%" y="245" width="0.1674%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="2"/><text x="0.5010%" y="255.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (2 samples, 0.17%)</title><rect x="0.2510%" y="229" width="0.1674%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="2"/><text x="0.5010%" y="239.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (2 samples, 0.17%)</title><rect x="0.2510%" y="213" width="0.1674%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="2"/><text x="0.5010%" y="223.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (2 samples, 0.17%)</title><rect x="0.2510%" y="197" width="0.1674%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="2"/><text x="0.5010%" y="207.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (2 samples, 0.17%)</title><rect x="0.2510%" y="181" width="0.1674%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="2"/><text x="0.5010%" y="191.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (2 samples, 0.17%)</title><rect x="0.2510%" y="165" width="0.1674%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="2"/><text x="0.5010%" y="175.50"></text></g><g><title>libSystem_initializer (2 samples, 0.17%)</title><rect x="0.2510%" y="149" width="0.1674%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="2"/><text x="0.5010%" y="159.50"></text></g><g><title>libdispatch_init (1 samples, 0.08%)</title><rect x="0.3347%" y="133" width="0.0837%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="1"/><text x="0.5847%" y="143.50"></text></g><g><title>_os_object_init (1 samples, 0.08%)</title><rect x="0.3347%" y="117" width="0.0837%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="1"/><text x="0.5847%" y="127.50"></text></g><g><title>DYLD-STUB$$std::set_terminate(void (*)()) (1 samples, 0.08%)</title><rect x="0.3347%" y="101" width="0.0837%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="1"/><text x="0.5847%" y="111.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (1 samples, 0.08%)</title><rect x="0.4184%" y="293" width="0.0837%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="0.6684%" y="303.50"></text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="277" width="0.0837%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="1"/><text x="0.6684%" y="287.50"></text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="261" width="0.0837%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="1"/><text x="0.6684%" y="271.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="245" width="0.0837%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="1"/><text x="0.6684%" y="255.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="229" width="0.0837%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="1"/><text x="0.6684%" y="239.50"></text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="213" width="0.0837%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="1"/><text x="0.6684%" y="223.50"></text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="197" width="0.0837%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="1"/><text x="0.6684%" y="207.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="181" width="0.0837%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="1"/><text x="0.6684%" y="191.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="165" width="0.0837%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1"/><text x="0.6684%" y="175.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 0.08%)</title><rect x="0.4184%" y="149" width="0.0837%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1"/><text x="0.6684%" y="159.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.08%)</title><rect x="0.4184%" y="133" width="0.0837%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1"/><text x="0.6684%" y="143.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.08%)</title><rect x="0.4184%" y="117" width="0.0837%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1"/><text x="0.6684%" y="127.50"></text></g><g><title>dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&amp;, unsigned int, mach_o::LinkedDylibAttributes*) const (1 samples, 0.08%)</title><rect x="0.4184%" y="101" width="0.0837%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="1"/><text x="0.6684%" y="111.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (6 samples, 0.50%)</title><rect x="0.0837%" y="325" width="0.5021%" height="15" fill="rgb(250,191,14)" fg:x="1" fg:w="6"/><text x="0.3337%" y="335.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (5 samples, 0.42%)</title><rect x="0.1674%" y="309" width="0.4184%" height="15" fill="rgb(239,60,40)" fg:x="2" fg:w="5"/><text x="0.4174%" y="319.50"></text></g><g><title>dyld4::RuntimeState::partitionDelayLoads(std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt;, std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt;, lsl::Vector&lt;dyld4::Loader const*&gt;*) (1 samples, 0.08%)</title><rect x="0.5021%" y="293" width="0.0837%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="1"/><text x="0.7521%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::isDelayInit(dyld4::RuntimeState&amp;) const (1 samples, 0.08%)</title><rect x="0.5021%" y="277" width="0.0837%" height="15" fill="rgb(225,35,8)" fg:x="6" fg:w="1"/><text x="0.7521%" y="287.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="0.5858%" y="245" width="0.0837%" height="15" fill="rgb(250,213,24)" fg:x="7" fg:w="1"/><text x="0.8358%" y="255.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.08%)</title><rect x="0.6695%" y="229" width="0.0837%" height="15" fill="rgb(247,123,22)" fg:x="8" fg:w="1"/><text x="0.9195%" y="239.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="0.7531%" y="229" width="0.0837%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="1"/><text x="1.0031%" y="239.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="1.5063%" y="197" width="0.0837%" height="15" fill="rgb(231,145,46)" fg:x="18" fg:w="1"/><text x="1.7563%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 1.00%)</title><rect x="0.6695%" y="245" width="1.0042%" height="15" fill="rgb(251,118,11)" fg:x="8" fg:w="12"/><text x="0.9195%" y="255.50"></text></g><g><title>free_tiny (10 samples, 0.84%)</title><rect x="0.8368%" y="229" width="0.8368%" height="15" fill="rgb(217,147,25)" fg:x="10" fg:w="10"/><text x="1.0868%" y="239.50"></text></g><g><title>tiny_free_no_lock (7 samples, 0.59%)</title><rect x="1.0879%" y="213" width="0.5858%" height="15" fill="rgb(247,81,37)" fg:x="13" fg:w="7"/><text x="1.3379%" y="223.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="1.5900%" y="197" width="0.0837%" height="15" fill="rgb(209,12,38)" fg:x="19" fg:w="1"/><text x="1.8400%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.08%)</title><rect x="1.6736%" y="245" width="0.0837%" height="15" fill="rgb(227,1,9)" fg:x="20" fg:w="1"/><text x="1.9236%" y="255.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.08%)</title><rect x="1.7573%" y="229" width="0.0837%" height="15" fill="rgb(248,47,43)" fg:x="21" fg:w="1"/><text x="2.0073%" y="239.50"></text></g><g><title>_free (1 samples, 0.08%)</title><rect x="1.8410%" y="229" width="0.0837%" height="15" fill="rgb(221,10,30)" fg:x="22" fg:w="1"/><text x="2.0910%" y="239.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="1.9247%" y="229" width="0.1674%" height="15" fill="rgb(210,229,1)" fg:x="23" fg:w="2"/><text x="2.1747%" y="239.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="2.0921%" y="213" width="0.1674%" height="15" fill="rgb(222,148,37)" fg:x="25" fg:w="2"/><text x="2.3421%" y="223.50"></text></g><g><title>tiny_free_list_add_ptr (3 samples, 0.25%)</title><rect x="3.1799%" y="181" width="0.2510%" height="15" fill="rgb(234,67,33)" fg:x="38" fg:w="3"/><text x="3.4299%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 1.51%)</title><rect x="2.0921%" y="229" width="1.5063%" height="15" fill="rgb(247,98,35)" fg:x="25" fg:w="18"/><text x="2.3421%" y="239.50"></text></g><g><title>free_tiny (16 samples, 1.34%)</title><rect x="2.2594%" y="213" width="1.3389%" height="15" fill="rgb(247,138,52)" fg:x="27" fg:w="16"/><text x="2.5094%" y="223.50"></text></g><g><title>tiny_free_no_lock (11 samples, 0.92%)</title><rect x="2.6778%" y="197" width="0.9205%" height="15" fill="rgb(213,79,30)" fg:x="32" fg:w="11"/><text x="2.9278%" y="207.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="3.4310%" y="181" width="0.1674%" height="15" fill="rgb(246,177,23)" fg:x="41" fg:w="2"/><text x="3.6810%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (2 samples, 0.17%)</title><rect x="3.5983%" y="229" width="0.1674%" height="15" fill="rgb(230,62,27)" fg:x="43" fg:w="2"/><text x="3.8483%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.08%)</title><rect x="3.7657%" y="229" width="0.0837%" height="15" fill="rgb(216,154,8)" fg:x="45" fg:w="1"/><text x="4.0157%" y="239.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::checked_add (1 samples, 0.08%)</title><rect x="3.8494%" y="229" width="0.0837%" height="15" fill="rgb(244,35,45)" fg:x="46" fg:w="1"/><text x="4.0994%" y="239.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.08%)</title><rect x="3.9331%" y="213" width="0.0837%" height="15" fill="rgb(251,115,12)" fg:x="47" fg:w="1"/><text x="4.1831%" y="223.50"></text></g><g><title>__rustc::__rdl_dealloc (2 samples, 0.17%)</title><rect x="4.0167%" y="213" width="0.1674%" height="15" fill="rgb(240,54,50)" fg:x="48" fg:w="2"/><text x="4.2667%" y="223.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="4.1841%" y="213" width="0.0837%" height="15" fill="rgb(233,84,52)" fg:x="50" fg:w="1"/><text x="4.4341%" y="223.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="4.2678%" y="197" width="0.0837%" height="15" fill="rgb(207,117,47)" fg:x="51" fg:w="1"/><text x="4.5178%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="5.1046%" y="181" width="0.0837%" height="15" fill="rgb(249,43,39)" fg:x="61" fg:w="1"/><text x="5.3546%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="5.4393%" y="165" width="0.1674%" height="15" fill="rgb(209,38,44)" fg:x="65" fg:w="2"/><text x="5.6893%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 1.42%)</title><rect x="4.2678%" y="213" width="1.4226%" height="15" fill="rgb(236,212,23)" fg:x="51" fg:w="17"/><text x="4.5178%" y="223.50"></text></g><g><title>free_tiny (16 samples, 1.34%)</title><rect x="4.3515%" y="197" width="1.3389%" height="15" fill="rgb(242,79,21)" fg:x="52" fg:w="16"/><text x="4.6015%" y="207.50"></text></g><g><title>tiny_free_no_lock (6 samples, 0.50%)</title><rect x="5.1883%" y="181" width="0.5021%" height="15" fill="rgb(211,96,35)" fg:x="62" fg:w="6"/><text x="5.4383%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="5.6067%" y="165" width="0.0837%" height="15" fill="rgb(253,215,40)" fg:x="67" fg:w="1"/><text x="5.8567%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.08%)</title><rect x="5.6904%" y="213" width="0.0837%" height="15" fill="rgb(211,81,21)" fg:x="68" fg:w="1"/><text x="5.9404%" y="223.50"></text></g><g><title>_free (1 samples, 0.08%)</title><rect x="5.7741%" y="197" width="0.0837%" height="15" fill="rgb(208,190,38)" fg:x="69" fg:w="1"/><text x="6.0241%" y="207.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="5.8577%" y="197" width="0.0837%" height="15" fill="rgb(235,213,38)" fg:x="70" fg:w="1"/><text x="6.1077%" y="207.50"></text></g><g><title>free_tiny (6 samples, 0.50%)</title><rect x="5.9414%" y="181" width="0.5021%" height="15" fill="rgb(237,122,38)" fg:x="71" fg:w="6"/><text x="6.1914%" y="191.50"></text></g><g><title>tiny_free_no_lock (3 samples, 0.25%)</title><rect x="6.1925%" y="165" width="0.2510%" height="15" fill="rgb(244,218,35)" fg:x="74" fg:w="3"/><text x="6.4425%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="6.3598%" y="149" width="0.0837%" height="15" fill="rgb(240,68,47)" fg:x="76" fg:w="1"/><text x="6.6098%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.59%)</title><rect x="5.9414%" y="197" width="0.5858%" height="15" fill="rgb(210,16,53)" fg:x="71" fg:w="7"/><text x="6.1914%" y="207.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="6.4435%" y="181" width="0.0837%" height="15" fill="rgb(235,124,12)" fg:x="77" fg:w="1"/><text x="6.6935%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.08%)</title><rect x="6.5272%" y="197" width="0.0837%" height="15" fill="rgb(224,169,11)" fg:x="78" fg:w="1"/><text x="6.7772%" y="207.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="6.6946%" y="181" width="0.0837%" height="15" fill="rgb(250,166,2)" fg:x="80" fg:w="1"/><text x="6.9446%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.7782%" y="181" width="0.0837%" height="15" fill="rgb(242,216,29)" fg:x="81" fg:w="1"/><text x="7.0282%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (15 samples, 1.26%)</title><rect x="6.6109%" y="197" width="1.2552%" height="15" fill="rgb(230,116,27)" fg:x="79" fg:w="15"/><text x="6.8609%" y="207.50"></text></g><g><title>free_tiny (12 samples, 1.00%)</title><rect x="6.8619%" y="181" width="1.0042%" height="15" fill="rgb(228,99,48)" fg:x="82" fg:w="12"/><text x="7.1119%" y="191.50"></text></g><g><title>tiny_free_no_lock (5 samples, 0.42%)</title><rect x="7.4477%" y="165" width="0.4184%" height="15" fill="rgb(253,11,6)" fg:x="89" fg:w="5"/><text x="7.6977%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="7.6987%" y="149" width="0.1674%" height="15" fill="rgb(247,143,39)" fg:x="92" fg:w="2"/><text x="7.9487%" y="159.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="8.5356%" y="181" width="0.1674%" height="15" fill="rgb(236,97,10)" fg:x="102" fg:w="2"/><text x="8.7856%" y="191.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="8.7029%" y="181" width="0.0837%" height="15" fill="rgb(233,208,19)" fg:x="104" fg:w="1"/><text x="8.9529%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (3 samples, 0.25%)</title><rect x="9.0377%" y="165" width="0.2510%" height="15" fill="rgb(216,164,2)" fg:x="108" fg:w="3"/><text x="9.2877%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (43 samples, 3.60%)</title><rect x="5.7741%" y="213" width="3.5983%" height="15" fill="rgb(220,129,5)" fg:x="69" fg:w="43"/><text x="6.0241%" y="223.50">core..</text></g><g><title>free_tiny (18 samples, 1.51%)</title><rect x="7.8661%" y="197" width="1.5063%" height="15" fill="rgb(242,17,10)" fg:x="94" fg:w="18"/><text x="8.1161%" y="207.50"></text></g><g><title>tiny_free_no_lock (7 samples, 0.59%)</title><rect x="8.7866%" y="181" width="0.5858%" height="15" fill="rgb(242,107,0)" fg:x="105" fg:w="7"/><text x="9.0366%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="9.2887%" y="165" width="0.0837%" height="15" fill="rgb(251,28,31)" fg:x="111" fg:w="1"/><text x="9.5387%" y="175.50"></text></g><g><title>_free (2 samples, 0.17%)</title><rect x="9.3724%" y="197" width="0.1674%" height="15" fill="rgb(233,223,10)" fg:x="112" fg:w="2"/><text x="9.6224%" y="207.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.08%)</title><rect x="9.5397%" y="181" width="0.0837%" height="15" fill="rgb(215,21,27)" fg:x="114" fg:w="1"/><text x="9.7897%" y="191.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="9.6234%" y="181" width="0.1674%" height="15" fill="rgb(232,23,21)" fg:x="115" fg:w="2"/><text x="9.8734%" y="191.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="10.3766%" y="165" width="0.0837%" height="15" fill="rgb(244,5,23)" fg:x="124" fg:w="1"/><text x="10.6266%" y="175.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="10.4603%" y="165" width="0.0837%" height="15" fill="rgb(226,81,46)" fg:x="125" fg:w="1"/><text x="10.7103%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.33%)</title><rect x="11.8828%" y="149" width="0.3347%" height="15" fill="rgb(247,70,30)" fg:x="142" fg:w="4"/><text x="12.1328%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (37 samples, 3.10%)</title><rect x="9.5397%" y="197" width="3.0962%" height="15" fill="rgb(212,68,19)" fg:x="114" fg:w="37"/><text x="9.7897%" y="207.50">all..</text></g><g><title>free_tiny (34 samples, 2.85%)</title><rect x="9.7908%" y="181" width="2.8452%" height="15" fill="rgb(240,187,13)" fg:x="117" fg:w="34"/><text x="10.0408%" y="191.50">fr..</text></g><g><title>tiny_free_no_lock (25 samples, 2.09%)</title><rect x="10.5439%" y="165" width="2.0921%" height="15" fill="rgb(223,113,26)" fg:x="126" fg:w="25"/><text x="10.7939%" y="175.50">t..</text></g><g><title>tiny_free_list_remove_ptr (5 samples, 0.42%)</title><rect x="12.2176%" y="149" width="0.4184%" height="15" fill="rgb(206,192,2)" fg:x="146" fg:w="5"/><text x="12.4676%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (3 samples, 0.25%)</title><rect x="12.6360%" y="197" width="0.2510%" height="15" fill="rgb(241,108,4)" fg:x="151" fg:w="3"/><text x="12.8860%" y="207.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::overflowing_mul (1 samples, 0.08%)</title><rect x="12.8870%" y="197" width="0.0837%" height="15" fill="rgb(247,173,49)" fg:x="154" fg:w="1"/><text x="13.1370%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (3 samples, 0.25%)</title><rect x="12.9707%" y="181" width="0.2510%" height="15" fill="rgb(224,114,35)" fg:x="155" fg:w="3"/><text x="13.2207%" y="191.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="13.7238%" y="165" width="0.0837%" height="15" fill="rgb(245,159,27)" fg:x="164" fg:w="1"/><text x="13.9738%" y="175.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="13.8075%" y="165" width="0.0837%" height="15" fill="rgb(245,172,44)" fg:x="165" fg:w="1"/><text x="14.0575%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="13.8912%" y="165" width="0.0837%" height="15" fill="rgb(236,23,11)" fg:x="166" fg:w="1"/><text x="14.1412%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="14.3096%" y="149" width="0.1674%" height="15" fill="rgb(205,117,38)" fg:x="171" fg:w="2"/><text x="14.5596%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (20 samples, 1.67%)</title><rect x="12.9707%" y="197" width="1.6736%" height="15" fill="rgb(237,72,25)" fg:x="155" fg:w="20"/><text x="13.2207%" y="207.50"></text></g><g><title>free_tiny (17 samples, 1.42%)</title><rect x="13.2218%" y="181" width="1.4226%" height="15" fill="rgb(244,70,9)" fg:x="158" fg:w="17"/><text x="13.4718%" y="191.50"></text></g><g><title>tiny_free_no_lock (8 samples, 0.67%)</title><rect x="13.9749%" y="165" width="0.6695%" height="15" fill="rgb(217,125,39)" fg:x="167" fg:w="8"/><text x="14.2249%" y="175.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="14.4770%" y="149" width="0.1674%" height="15" fill="rgb(235,36,10)" fg:x="173" fg:w="2"/><text x="14.7270%" y="159.50"></text></g><g><title>free (1 samples, 0.08%)</title><rect x="14.6444%" y="197" width="0.0837%" height="15" fill="rgb(251,123,47)" fg:x="175" fg:w="1"/><text x="14.8944%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="15.0628%" y="181" width="0.0837%" height="15" fill="rgb(221,13,13)" fg:x="180" fg:w="1"/><text x="15.3128%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.33%)</title><rect x="15.7322%" y="165" width="0.3347%" height="15" fill="rgb(238,131,9)" fg:x="188" fg:w="4"/><text x="15.9822%" y="175.50"></text></g><g><title>free_tiny (19 samples, 1.59%)</title><rect x="14.7280%" y="197" width="1.5900%" height="15" fill="rgb(211,50,8)" fg:x="176" fg:w="19"/><text x="14.9780%" y="207.50"></text></g><g><title>tiny_free_no_lock (14 samples, 1.17%)</title><rect x="15.1464%" y="181" width="1.1715%" height="15" fill="rgb(245,182,24)" fg:x="181" fg:w="14"/><text x="15.3964%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.25%)</title><rect x="16.0669%" y="165" width="0.2510%" height="15" fill="rgb(242,14,37)" fg:x="192" fg:w="3"/><text x="16.3169%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (84 samples, 7.03%)</title><rect x="9.3724%" y="213" width="7.0293%" height="15" fill="rgb(246,228,12)" fg:x="112" fg:w="84"/><text x="9.6224%" y="223.50">core::ptr..</text></g><g><title>szone_try_free_default (1 samples, 0.08%)</title><rect x="16.3180%" y="197" width="0.0837%" height="15" fill="rgb(213,55,15)" fg:x="195" fg:w="1"/><text x="16.5680%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (158 samples, 13.22%)</title><rect x="3.9331%" y="229" width="13.2218%" height="15" fill="rgb(209,9,3)" fg:x="47" fg:w="158"/><text x="4.1831%" y="239.50">core::ptr::drop_in_p..</text></g><g><title>free_tiny (9 samples, 0.75%)</title><rect x="16.4017%" y="213" width="0.7531%" height="15" fill="rgb(230,59,30)" fg:x="196" fg:w="9"/><text x="16.6517%" y="223.50"></text></g><g><title>tiny_free_no_lock (6 samples, 0.50%)</title><rect x="16.6527%" y="197" width="0.5021%" height="15" fill="rgb(209,121,21)" fg:x="199" fg:w="6"/><text x="16.9027%" y="207.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="16.9874%" y="181" width="0.1674%" height="15" fill="rgb(220,109,13)" fg:x="203" fg:w="2"/><text x="17.2374%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (3 samples, 0.25%)</title><rect x="17.1548%" y="229" width="0.2510%" height="15" fill="rgb(232,18,1)" fg:x="205" fg:w="3"/><text x="17.4048%" y="239.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="17.2385%" y="213" width="0.1674%" height="15" fill="rgb(215,41,42)" fg:x="206" fg:w="2"/><text x="17.4885%" y="223.50"></text></g><g><title>tiny_free_no_lock (2 samples, 0.17%)</title><rect x="17.2385%" y="197" width="0.1674%" height="15" fill="rgb(224,123,36)" fg:x="206" fg:w="2"/><text x="17.4885%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="17.5732%" y="213" width="0.1674%" height="15" fill="rgb(240,125,3)" fg:x="210" fg:w="2"/><text x="17.8232%" y="223.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="17.7406%" y="213" width="0.0837%" height="15" fill="rgb(205,98,50)" fg:x="212" fg:w="1"/><text x="17.9906%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (197 samples, 16.49%)</title><rect x="1.7573%" y="245" width="16.4854%" height="15" fill="rgb(205,185,37)" fg:x="21" fg:w="197"/><text x="2.0073%" y="255.50">core::ptr::drop_in_place&lt;..</text></g><g><title>free_tiny (10 samples, 0.84%)</title><rect x="17.4059%" y="229" width="0.8368%" height="15" fill="rgb(238,207,15)" fg:x="208" fg:w="10"/><text x="17.6559%" y="239.50"></text></g><g><title>tiny_free_no_lock (5 samples, 0.42%)</title><rect x="17.8243%" y="213" width="0.4184%" height="15" fill="rgb(213,199,42)" fg:x="213" fg:w="5"/><text x="18.0743%" y="223.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="18.1590%" y="197" width="0.0837%" height="15" fill="rgb(235,201,11)" fg:x="217" fg:w="1"/><text x="18.4090%" y="207.50"></text></g><g><title>_free (1 samples, 0.08%)</title><rect x="18.2427%" y="229" width="0.0837%" height="15" fill="rgb(207,46,11)" fg:x="218" fg:w="1"/><text x="18.4927%" y="239.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="18.3264%" y="213" width="0.0837%" height="15" fill="rgb(241,35,35)" fg:x="219" fg:w="1"/><text x="18.5764%" y="223.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="18.9958%" y="197" width="0.0837%" height="15" fill="rgb(243,32,47)" fg:x="227" fg:w="1"/><text x="19.2458%" y="207.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="19.0795%" y="197" width="0.0837%" height="15" fill="rgb(247,202,23)" fg:x="228" fg:w="1"/><text x="19.3295%" y="207.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="19.7490%" y="181" width="0.1674%" height="15" fill="rgb(219,102,11)" fg:x="236" fg:w="2"/><text x="19.9990%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 1.76%)</title><rect x="18.3264%" y="229" width="1.7573%" height="15" fill="rgb(243,110,44)" fg:x="219" fg:w="21"/><text x="18.5764%" y="239.50"></text></g><g><title>free_tiny (20 samples, 1.67%)</title><rect x="18.4100%" y="213" width="1.6736%" height="15" fill="rgb(222,74,54)" fg:x="220" fg:w="20"/><text x="18.6600%" y="223.50"></text></g><g><title>tiny_free_no_lock (11 samples, 0.92%)</title><rect x="19.1632%" y="197" width="0.9205%" height="15" fill="rgb(216,99,12)" fg:x="229" fg:w="11"/><text x="19.4132%" y="207.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="19.9163%" y="181" width="0.1674%" height="15" fill="rgb(226,22,26)" fg:x="238" fg:w="2"/><text x="20.1663%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.08%)</title><rect x="20.0837%" y="229" width="0.0837%" height="15" fill="rgb(217,163,10)" fg:x="240" fg:w="1"/><text x="20.3337%" y="239.50"></text></g><g><title>_free (2 samples, 0.17%)</title><rect x="20.1674%" y="213" width="0.1674%" height="15" fill="rgb(213,25,53)" fg:x="241" fg:w="2"/><text x="20.4174%" y="223.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="20.3347%" y="213" width="0.0837%" height="15" fill="rgb(252,105,26)" fg:x="243" fg:w="1"/><text x="20.5847%" y="223.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="20.8368%" y="181" width="0.0837%" height="15" fill="rgb(220,39,43)" fg:x="249" fg:w="1"/><text x="21.0868%" y="191.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="20.9205%" y="181" width="0.0837%" height="15" fill="rgb(229,68,48)" fg:x="250" fg:w="1"/><text x="21.1705%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="21.6736%" y="165" width="0.0837%" height="15" fill="rgb(252,8,32)" fg:x="259" fg:w="1"/><text x="21.9236%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 1.67%)</title><rect x="20.4184%" y="213" width="1.6736%" height="15" fill="rgb(223,20,43)" fg:x="244" fg:w="20"/><text x="20.6684%" y="223.50"></text></g><g><title>free_tiny (20 samples, 1.67%)</title><rect x="20.4184%" y="197" width="1.6736%" height="15" fill="rgb(229,81,49)" fg:x="244" fg:w="20"/><text x="20.6684%" y="207.50"></text></g><g><title>tiny_free_no_lock (13 samples, 1.09%)</title><rect x="21.0042%" y="181" width="1.0879%" height="15" fill="rgb(236,28,36)" fg:x="251" fg:w="13"/><text x="21.2542%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (4 samples, 0.33%)</title><rect x="21.7573%" y="165" width="0.3347%" height="15" fill="rgb(249,185,26)" fg:x="260" fg:w="4"/><text x="22.0073%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.08%)</title><rect x="22.0921%" y="213" width="0.0837%" height="15" fill="rgb(249,174,33)" fg:x="264" fg:w="1"/><text x="22.3421%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.08%)</title><rect x="22.1757%" y="213" width="0.0837%" height="15" fill="rgb(233,201,37)" fg:x="265" fg:w="1"/><text x="22.4257%" y="223.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="22.2594%" y="197" width="0.1674%" height="15" fill="rgb(221,78,26)" fg:x="266" fg:w="2"/><text x="22.5094%" y="207.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.08%)</title><rect x="22.4268%" y="181" width="0.0837%" height="15" fill="rgb(250,127,30)" fg:x="268" fg:w="1"/><text x="22.6768%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="23.1799%" y="149" width="0.1674%" height="15" fill="rgb(230,49,44)" fg:x="277" fg:w="2"/><text x="23.4299%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (12 samples, 1.00%)</title><rect x="22.4268%" y="197" width="1.0042%" height="15" fill="rgb(229,67,23)" fg:x="268" fg:w="12"/><text x="22.6768%" y="207.50"></text></g><g><title>free_tiny (11 samples, 0.92%)</title><rect x="22.5105%" y="181" width="0.9205%" height="15" fill="rgb(249,83,47)" fg:x="269" fg:w="11"/><text x="22.7605%" y="191.50"></text></g><g><title>tiny_free_no_lock (8 samples, 0.67%)</title><rect x="22.7615%" y="165" width="0.6695%" height="15" fill="rgb(215,43,3)" fg:x="272" fg:w="8"/><text x="23.0115%" y="175.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="23.3473%" y="149" width="0.0837%" height="15" fill="rgb(238,154,13)" fg:x="279" fg:w="1"/><text x="23.5973%" y="159.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (3 samples, 0.25%)</title><rect x="23.7657%" y="181" width="0.2510%" height="15" fill="rgb(219,56,2)" fg:x="284" fg:w="3"/><text x="24.0157%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (3 samples, 0.25%)</title><rect x="24.5188%" y="165" width="0.2510%" height="15" fill="rgb(233,0,4)" fg:x="293" fg:w="3"/><text x="24.7688%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (32 samples, 2.68%)</title><rect x="22.2594%" y="213" width="2.6778%" height="15" fill="rgb(235,30,7)" fg:x="266" fg:w="32"/><text x="22.5094%" y="223.50">co..</text></g><g><title>free_tiny (18 samples, 1.51%)</title><rect x="23.4310%" y="197" width="1.5063%" height="15" fill="rgb(250,79,13)" fg:x="280" fg:w="18"/><text x="23.6810%" y="207.50"></text></g><g><title>tiny_free_no_lock (11 samples, 0.92%)</title><rect x="24.0167%" y="181" width="0.9205%" height="15" fill="rgb(211,146,34)" fg:x="287" fg:w="11"/><text x="24.2667%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="24.7699%" y="165" width="0.1674%" height="15" fill="rgb(228,22,38)" fg:x="296" fg:w="2"/><text x="25.0199%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (1 samples, 0.08%)</title><rect x="24.9372%" y="213" width="0.0837%" height="15" fill="rgb(235,168,5)" fg:x="298" fg:w="1"/><text x="25.1872%" y="223.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="25.6067%" y="197" width="0.0837%" height="15" fill="rgb(221,155,16)" fg:x="306" fg:w="1"/><text x="25.8567%" y="207.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="25.6904%" y="197" width="0.0837%" height="15" fill="rgb(215,215,53)" fg:x="307" fg:w="1"/><text x="25.9404%" y="207.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="25.7741%" y="197" width="0.0837%" height="15" fill="rgb(223,4,10)" fg:x="308" fg:w="1"/><text x="26.0241%" y="207.50"></text></g><g><title>free_tiny (20 samples, 1.67%)</title><rect x="25.0209%" y="213" width="1.6736%" height="15" fill="rgb(234,103,6)" fg:x="299" fg:w="20"/><text x="25.2709%" y="223.50"></text></g><g><title>tiny_free_no_lock (10 samples, 0.84%)</title><rect x="25.8577%" y="197" width="0.8368%" height="15" fill="rgb(227,97,0)" fg:x="309" fg:w="10"/><text x="26.1077%" y="207.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.33%)</title><rect x="26.3598%" y="181" width="0.3347%" height="15" fill="rgb(234,150,53)" fg:x="315" fg:w="4"/><text x="26.6098%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (79 samples, 6.61%)</title><rect x="20.1674%" y="229" width="6.6109%" height="15" fill="rgb(228,201,54)" fg:x="241" fg:w="79"/><text x="20.4174%" y="239.50">core::ptr..</text></g><g><title>szone_try_free_default (1 samples, 0.08%)</title><rect x="26.6946%" y="213" width="0.0837%" height="15" fill="rgb(222,22,37)" fg:x="319" fg:w="1"/><text x="26.9446%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;[vexy_json_core::ast::value::Value]&gt; (108 samples, 9.04%)</title><rect x="18.2427%" y="245" width="9.0377%" height="15" fill="rgb(237,53,32)" fg:x="218" fg:w="108"/><text x="18.4927%" y="255.50">core::ptr::dr..</text></g><g><title>free_tiny (6 samples, 0.50%)</title><rect x="26.7782%" y="229" width="0.5021%" height="15" fill="rgb(233,25,53)" fg:x="320" fg:w="6"/><text x="27.0282%" y="239.50"></text></g><g><title>tiny_free_no_lock (3 samples, 0.25%)</title><rect x="27.0293%" y="213" width="0.2510%" height="15" fill="rgb(210,40,34)" fg:x="323" fg:w="3"/><text x="27.2793%" y="223.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="27.1967%" y="197" width="0.0837%" height="15" fill="rgb(241,220,44)" fg:x="325" fg:w="1"/><text x="27.4467%" y="207.50"></text></g><g><title>free_small (2 samples, 0.17%)</title><rect x="27.2803%" y="245" width="0.1674%" height="15" fill="rgb(235,28,35)" fg:x="326" fg:w="2"/><text x="27.5303%" y="255.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (1 samples, 0.08%)</title><rect x="27.3640%" y="229" width="0.0837%" height="15" fill="rgb(210,56,17)" fg:x="327" fg:w="1"/><text x="27.6140%" y="239.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="27.4477%" y="245" width="0.1674%" height="15" fill="rgb(224,130,29)" fg:x="328" fg:w="2"/><text x="27.6977%" y="255.50"></text></g><g><title>tiny_free_no_lock (2 samples, 0.17%)</title><rect x="27.4477%" y="229" width="0.1674%" height="15" fill="rgb(235,212,8)" fg:x="328" fg:w="2"/><text x="27.6977%" y="239.50"></text></g><g><title>_tlv_get_addr (1 samples, 0.08%)</title><rect x="27.6151%" y="213" width="0.0837%" height="15" fill="rgb(223,33,50)" fg:x="330" fg:w="1"/><text x="27.8651%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.17%)</title><rect x="27.8661%" y="197" width="0.1674%" height="15" fill="rgb(219,149,13)" fg:x="333" fg:w="2"/><text x="28.1161%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.17%)</title><rect x="27.8661%" y="181" width="0.1674%" height="15" fill="rgb(250,156,29)" fg:x="333" fg:w="2"/><text x="28.1161%" y="191.50"></text></g><g><title>_realloc (2 samples, 0.17%)</title><rect x="27.8661%" y="165" width="0.1674%" height="15" fill="rgb(216,193,19)" fg:x="333" fg:w="2"/><text x="28.1161%" y="175.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.17%)</title><rect x="27.8661%" y="149" width="0.1674%" height="15" fill="rgb(216,135,14)" fg:x="333" fg:w="2"/><text x="28.1161%" y="159.50"></text></g><g><title>szone_realloc (2 samples, 0.17%)</title><rect x="27.8661%" y="133" width="0.1674%" height="15" fill="rgb(241,47,5)" fg:x="333" fg:w="2"/><text x="28.1161%" y="143.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="27.8661%" y="117" width="0.1674%" height="15" fill="rgb(233,42,35)" fg:x="333" fg:w="2"/><text x="28.1161%" y="127.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="27.9498%" y="101" width="0.0837%" height="15" fill="rgb(231,13,6)" fg:x="334" fg:w="1"/><text x="28.1998%" y="111.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="27.9498%" y="85" width="0.0837%" height="15" fill="rgb(207,181,40)" fg:x="334" fg:w="1"/><text x="28.1998%" y="95.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="28.0335%" y="197" width="0.2510%" height="15" fill="rgb(254,173,49)" fg:x="335" fg:w="3"/><text x="28.2835%" y="207.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.17%)</title><rect x="28.1172%" y="181" width="0.1674%" height="15" fill="rgb(221,1,38)" fg:x="336" fg:w="2"/><text x="28.3672%" y="191.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="28.6192%" y="181" width="0.0837%" height="15" fill="rgb(206,124,46)" fg:x="342" fg:w="1"/><text x="28.8692%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.08%)</title><rect x="28.6192%" y="165" width="0.0837%" height="15" fill="rgb(249,21,11)" fg:x="342" fg:w="1"/><text x="28.8692%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.33%)</title><rect x="29.4561%" y="165" width="0.3347%" height="15" fill="rgb(222,201,40)" fg:x="352" fg:w="4"/><text x="29.7061%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.17%)</title><rect x="29.6234%" y="149" width="0.1674%" height="15" fill="rgb(235,61,29)" fg:x="354" fg:w="2"/><text x="29.8734%" y="159.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="30.2092%" y="149" width="0.0837%" height="15" fill="rgb(219,207,3)" fg:x="361" fg:w="1"/><text x="30.4592%" y="159.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="30.2929%" y="149" width="0.0837%" height="15" fill="rgb(222,56,46)" fg:x="362" fg:w="1"/><text x="30.5429%" y="159.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="30.3766%" y="149" width="0.0837%" height="15" fill="rgb(239,76,54)" fg:x="363" fg:w="1"/><text x="30.6266%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.42%)</title><rect x="30.4603%" y="149" width="0.4184%" height="15" fill="rgb(231,124,27)" fg:x="364" fg:w="5"/><text x="30.7103%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.17%)</title><rect x="30.7113%" y="133" width="0.1674%" height="15" fill="rgb(249,195,6)" fg:x="367" fg:w="2"/><text x="30.9613%" y="143.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="30.8787%" y="149" width="0.1674%" height="15" fill="rgb(237,174,47)" fg:x="369" fg:w="2"/><text x="31.1287%" y="159.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="30.9623%" y="133" width="0.0837%" height="15" fill="rgb(206,201,31)" fg:x="370" fg:w="1"/><text x="31.2123%" y="143.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="30.9623%" y="117" width="0.0837%" height="15" fill="rgb(231,57,52)" fg:x="370" fg:w="1"/><text x="31.2123%" y="127.50"></text></g><g><title>set_tiny_meta_header_in_use (2 samples, 0.17%)</title><rect x="31.2971%" y="117" width="0.1674%" height="15" fill="rgb(248,177,22)" fg:x="374" fg:w="2"/><text x="31.5471%" y="127.50"></text></g><g><title>szone_malloc_should_clear (7 samples, 0.59%)</title><rect x="31.0460%" y="149" width="0.5858%" height="15" fill="rgb(215,211,37)" fg:x="371" fg:w="7"/><text x="31.2960%" y="159.50"></text></g><g><title>tiny_malloc_should_clear (7 samples, 0.59%)</title><rect x="31.0460%" y="133" width="0.5858%" height="15" fill="rgb(241,128,51)" fg:x="371" fg:w="7"/><text x="31.2960%" y="143.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="31.4644%" y="117" width="0.1674%" height="15" fill="rgb(227,165,31)" fg:x="376" fg:w="2"/><text x="31.7144%" y="127.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="31.5481%" y="101" width="0.0837%" height="15" fill="rgb(228,167,24)" fg:x="377" fg:w="1"/><text x="31.7981%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (36 samples, 3.01%)</title><rect x="28.7029%" y="181" width="3.0126%" height="15" fill="rgb(228,143,12)" fg:x="343" fg:w="36"/><text x="28.9529%" y="191.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 1.92%)</title><rect x="29.7908%" y="165" width="1.9247%" height="15" fill="rgb(249,149,8)" fg:x="356" fg:w="23"/><text x="30.0408%" y="175.50">h..</text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="31.6318%" y="149" width="0.0837%" height="15" fill="rgb(243,35,44)" fg:x="378" fg:w="1"/><text x="31.8818%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (4 samples, 0.33%)</title><rect x="32.2176%" y="165" width="0.3347%" height="15" fill="rgb(246,89,9)" fg:x="385" fg:w="4"/><text x="32.4676%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.08%)</title><rect x="32.5523%" y="165" width="0.0837%" height="15" fill="rgb(233,213,13)" fg:x="389" fg:w="1"/><text x="32.8023%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (39 samples, 3.26%)</title><rect x="31.7155%" y="181" width="3.2636%" height="15" fill="rgb(233,141,41)" fg:x="379" fg:w="39"/><text x="31.9655%" y="191.50">zzs..</text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (28 samples, 2.34%)</title><rect x="32.6360%" y="165" width="2.3431%" height="15" fill="rgb(239,167,4)" fg:x="390" fg:w="28"/><text x="32.8860%" y="175.50">&lt;..</text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.08%)</title><rect x="35.7322%" y="165" width="0.0837%" height="15" fill="rgb(209,217,16)" fg:x="427" fg:w="1"/><text x="35.9822%" y="175.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="35.8159%" y="165" width="0.0837%" height="15" fill="rgb(219,88,35)" fg:x="428" fg:w="1"/><text x="36.0659%" y="175.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="36.0669%" y="149" width="0.0837%" height="15" fill="rgb(220,193,23)" fg:x="431" fg:w="1"/><text x="36.3169%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.17%)</title><rect x="36.1506%" y="149" width="0.1674%" height="15" fill="rgb(230,90,52)" fg:x="432" fg:w="2"/><text x="36.4006%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="36.2343%" y="133" width="0.0837%" height="15" fill="rgb(252,106,19)" fg:x="433" fg:w="1"/><text x="36.4843%" y="143.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="36.4854%" y="133" width="0.0837%" height="15" fill="rgb(206,74,20)" fg:x="436" fg:w="1"/><text x="36.7354%" y="143.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="36.5690%" y="133" width="0.1674%" height="15" fill="rgb(230,138,44)" fg:x="437" fg:w="2"/><text x="36.8190%" y="143.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="36.7364%" y="133" width="0.0837%" height="15" fill="rgb(235,182,43)" fg:x="439" fg:w="1"/><text x="36.9864%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.25%)</title><rect x="36.8201%" y="133" width="0.2510%" height="15" fill="rgb(242,16,51)" fg:x="440" fg:w="3"/><text x="37.0701%" y="143.50"></text></g><g><title>free_tiny (4 samples, 0.33%)</title><rect x="37.0711%" y="133" width="0.3347%" height="15" fill="rgb(248,9,4)" fg:x="443" fg:w="4"/><text x="37.3211%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 2.01%)</title><rect x="35.8996%" y="165" width="2.0084%" height="15" fill="rgb(210,31,22)" fg:x="429" fg:w="24"/><text x="36.1496%" y="175.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (19 samples, 1.59%)</title><rect x="36.3180%" y="149" width="1.5900%" height="15" fill="rgb(239,54,39)" fg:x="434" fg:w="19"/><text x="36.5680%" y="159.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.50%)</title><rect x="37.4059%" y="133" width="0.5021%" height="15" fill="rgb(230,99,41)" fg:x="447" fg:w="6"/><text x="37.6559%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.50%)</title><rect x="37.4059%" y="117" width="0.5021%" height="15" fill="rgb(253,106,12)" fg:x="447" fg:w="6"/><text x="37.6559%" y="127.50"></text></g><g><title>set_tiny_meta_header_in_use (2 samples, 0.17%)</title><rect x="37.7406%" y="101" width="0.1674%" height="15" fill="rgb(213,46,41)" fg:x="451" fg:w="2"/><text x="37.9906%" y="111.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (3 samples, 0.25%)</title><rect x="38.3264%" y="149" width="0.2510%" height="15" fill="rgb(215,133,35)" fg:x="458" fg:w="3"/><text x="38.5764%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="38.5774%" y="149" width="0.2510%" height="15" fill="rgb(213,28,5)" fg:x="461" fg:w="3"/><text x="38.8274%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (14 samples, 1.17%)</title><rect x="37.9079%" y="165" width="1.1715%" height="15" fill="rgb(215,77,49)" fg:x="453" fg:w="14"/><text x="38.1579%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (3 samples, 0.25%)</title><rect x="38.8285%" y="149" width="0.2510%" height="15" fill="rgb(248,100,22)" fg:x="464" fg:w="3"/><text x="39.0785%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.25%)</title><rect x="39.4142%" y="149" width="0.2510%" height="15" fill="rgb(208,67,9)" fg:x="471" fg:w="3"/><text x="39.6642%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.17%)</title><rect x="39.4979%" y="133" width="0.1674%" height="15" fill="rgb(219,133,21)" fg:x="472" fg:w="2"/><text x="39.7479%" y="143.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="39.4979%" y="117" width="0.1674%" height="15" fill="rgb(246,46,29)" fg:x="472" fg:w="2"/><text x="39.7479%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="39.4979%" y="101" width="0.1674%" height="15" fill="rgb(246,185,52)" fg:x="472" fg:w="2"/><text x="39.7479%" y="111.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.08%)</title><rect x="39.5816%" y="85" width="0.0837%" height="15" fill="rgb(252,136,11)" fg:x="473" fg:w="1"/><text x="39.8316%" y="95.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.33%)</title><rect x="39.6653%" y="149" width="0.3347%" height="15" fill="rgb(219,138,53)" fg:x="474" fg:w="4"/><text x="39.9153%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (2 samples, 0.17%)</title><rect x="39.8326%" y="133" width="0.1674%" height="15" fill="rgb(211,51,23)" fg:x="476" fg:w="2"/><text x="40.0826%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.08%)</title><rect x="40.2510%" y="133" width="0.0837%" height="15" fill="rgb(247,221,28)" fg:x="481" fg:w="1"/><text x="40.5010%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="40.2510%" y="117" width="0.0837%" height="15" fill="rgb(251,222,45)" fg:x="481" fg:w="1"/><text x="40.5010%" y="127.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.17%)</title><rect x="40.5858%" y="101" width="0.1674%" height="15" fill="rgb(217,162,53)" fg:x="485" fg:w="2"/><text x="40.8358%" y="111.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.25%)</title><rect x="40.9205%" y="69" width="0.2510%" height="15" fill="rgb(229,93,14)" fg:x="489" fg:w="3"/><text x="41.1705%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.84%)</title><rect x="40.7531%" y="101" width="0.8368%" height="15" fill="rgb(209,67,49)" fg:x="487" fg:w="10"/><text x="41.0031%" y="111.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.84%)</title><rect x="40.7531%" y="85" width="0.8368%" height="15" fill="rgb(213,87,29)" fg:x="487" fg:w="10"/><text x="41.0031%" y="95.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.42%)</title><rect x="41.1715%" y="69" width="0.4184%" height="15" fill="rgb(205,151,52)" fg:x="492" fg:w="5"/><text x="41.4215%" y="79.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.42%)</title><rect x="41.1715%" y="53" width="0.4184%" height="15" fill="rgb(253,215,39)" fg:x="492" fg:w="5"/><text x="41.4215%" y="63.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (31 samples, 2.59%)</title><rect x="39.0795%" y="165" width="2.5941%" height="15" fill="rgb(221,220,41)" fg:x="467" fg:w="31"/><text x="39.3295%" y="175.50">zz..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (20 samples, 1.67%)</title><rect x="40.0000%" y="149" width="1.6736%" height="15" fill="rgb(218,133,21)" fg:x="478" fg:w="20"/><text x="40.2500%" y="159.50"></text></g><g><title>vexy_json_core::parser::unescape_string (16 samples, 1.34%)</title><rect x="40.3347%" y="133" width="1.3389%" height="15" fill="rgb(221,193,43)" fg:x="482" fg:w="16"/><text x="40.5847%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 1.09%)</title><rect x="40.5858%" y="117" width="1.0879%" height="15" fill="rgb(240,128,52)" fg:x="485" fg:w="13"/><text x="40.8358%" y="127.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="41.5900%" y="101" width="0.0837%" height="15" fill="rgb(253,114,12)" fg:x="497" fg:w="1"/><text x="41.8400%" y="111.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="41.7573%" y="149" width="0.2510%" height="15" fill="rgb(215,223,47)" fg:x="499" fg:w="3"/><text x="42.0073%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="41.9247%" y="133" width="0.0837%" height="15" fill="rgb(248,225,23)" fg:x="501" fg:w="1"/><text x="42.1747%" y="143.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.08%)</title><rect x="42.4268%" y="117" width="0.0837%" height="15" fill="rgb(250,108,0)" fg:x="507" fg:w="1"/><text x="42.6768%" y="127.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="42.5105%" y="117" width="0.0837%" height="15" fill="rgb(228,208,7)" fg:x="508" fg:w="1"/><text x="42.7605%" y="127.50"></text></g><g><title>szone_size (1 samples, 0.08%)</title><rect x="42.9289%" y="53" width="0.0837%" height="15" fill="rgb(244,45,10)" fg:x="513" fg:w="1"/><text x="43.1789%" y="63.50"></text></g><g><title>tiny_size (1 samples, 0.08%)</title><rect x="42.9289%" y="37" width="0.0837%" height="15" fill="rgb(207,125,25)" fg:x="513" fg:w="1"/><text x="43.1789%" y="47.50"></text></g><g><title>_malloc_zone_realloc (5 samples, 0.42%)</title><rect x="42.8452%" y="85" width="0.4184%" height="15" fill="rgb(210,195,18)" fg:x="512" fg:w="5"/><text x="43.0952%" y="95.50"></text></g><g><title>szone_realloc (4 samples, 0.33%)</title><rect x="42.9289%" y="69" width="0.3347%" height="15" fill="rgb(249,80,12)" fg:x="513" fg:w="4"/><text x="43.1789%" y="79.50"></text></g><g><title>tiny_try_realloc_in_place (3 samples, 0.25%)</title><rect x="43.0126%" y="53" width="0.2510%" height="15" fill="rgb(221,65,9)" fg:x="514" fg:w="3"/><text x="43.2626%" y="63.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="43.1799%" y="37" width="0.0837%" height="15" fill="rgb(235,49,36)" fg:x="516" fg:w="1"/><text x="43.4299%" y="47.50"></text></g><g><title>szone_realloc (1 samples, 0.08%)</title><rect x="43.2636%" y="85" width="0.0837%" height="15" fill="rgb(225,32,20)" fg:x="517" fg:w="1"/><text x="43.5136%" y="95.50"></text></g><g><title>_realloc (8 samples, 0.67%)</title><rect x="42.7615%" y="101" width="0.6695%" height="15" fill="rgb(215,141,46)" fg:x="511" fg:w="8"/><text x="43.0115%" y="111.50"></text></g><g><title>tiny_size (1 samples, 0.08%)</title><rect x="43.3473%" y="85" width="0.0837%" height="15" fill="rgb(250,160,47)" fg:x="518" fg:w="1"/><text x="43.5973%" y="95.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="43.4310%" y="85" width="0.0837%" height="15" fill="rgb(216,222,40)" fg:x="519" fg:w="1"/><text x="43.6810%" y="95.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.84%)</title><rect x="43.4310%" y="101" width="0.8368%" height="15" fill="rgb(234,217,39)" fg:x="519" fg:w="10"/><text x="43.6810%" y="111.50"></text></g><g><title>tiny_malloc_should_clear (9 samples, 0.75%)</title><rect x="43.5146%" y="85" width="0.7531%" height="15" fill="rgb(207,178,40)" fg:x="520" fg:w="9"/><text x="43.7646%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.42%)</title><rect x="43.8494%" y="69" width="0.4184%" height="15" fill="rgb(221,136,13)" fg:x="524" fg:w="5"/><text x="44.0994%" y="79.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="44.1841%" y="53" width="0.0837%" height="15" fill="rgb(249,199,10)" fg:x="528" fg:w="1"/><text x="44.4341%" y="63.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (32 samples, 2.68%)</title><rect x="41.6736%" y="165" width="2.6778%" height="15" fill="rgb(249,222,13)" fg:x="498" fg:w="32"/><text x="41.9236%" y="175.50">zz..</text></g><g><title>vexy_json_core::parser::unescape_string (28 samples, 2.34%)</title><rect x="42.0084%" y="149" width="2.3431%" height="15" fill="rgb(244,185,38)" fg:x="502" fg:w="28"/><text x="42.2584%" y="159.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (25 samples, 2.09%)</title><rect x="42.2594%" y="133" width="2.0921%" height="15" fill="rgb(236,202,9)" fg:x="505" fg:w="25"/><text x="42.5094%" y="143.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (21 samples, 1.76%)</title><rect x="42.5941%" y="117" width="1.7573%" height="15" fill="rgb(250,229,37)" fg:x="509" fg:w="21"/><text x="42.8441%" y="127.50"></text></g><g><title>szone_size (1 samples, 0.08%)</title><rect x="44.2678%" y="101" width="0.0837%" height="15" fill="rgb(206,174,23)" fg:x="529" fg:w="1"/><text x="44.5178%" y="111.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.17%)</title><rect x="44.4351%" y="133" width="0.1674%" height="15" fill="rgb(211,33,43)" fg:x="531" fg:w="2"/><text x="44.6851%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.08%)</title><rect x="44.6025%" y="133" width="0.0837%" height="15" fill="rgb(245,58,50)" fg:x="533" fg:w="1"/><text x="44.8525%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (5 samples, 0.42%)</title><rect x="44.3515%" y="165" width="0.4184%" height="15" fill="rgb(244,68,36)" fg:x="530" fg:w="5"/><text x="44.6015%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (5 samples, 0.42%)</title><rect x="44.3515%" y="149" width="0.4184%" height="15" fill="rgb(232,229,15)" fg:x="530" fg:w="5"/><text x="44.6015%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.08%)</title><rect x="44.6862%" y="133" width="0.0837%" height="15" fill="rgb(254,30,23)" fg:x="534" fg:w="1"/><text x="44.9362%" y="143.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.08%)</title><rect x="50.2929%" y="133" width="0.0837%" height="15" fill="rgb(235,160,14)" fg:x="601" fg:w="1"/><text x="50.5429%" y="143.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="50.3766%" y="133" width="0.0837%" height="15" fill="rgb(212,155,44)" fg:x="602" fg:w="1"/><text x="50.6266%" y="143.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="52.1339%" y="69" width="0.1674%" height="15" fill="rgb(226,2,50)" fg:x="623" fg:w="2"/><text x="52.3839%" y="79.50"></text></g><g><title>set_tiny_meta_header_in_use (2 samples, 0.17%)</title><rect x="52.3013%" y="69" width="0.1674%" height="15" fill="rgb(234,177,6)" fg:x="625" fg:w="2"/><text x="52.5513%" y="79.50"></text></g><g><title>szone_size (4 samples, 0.33%)</title><rect x="52.4686%" y="69" width="0.3347%" height="15" fill="rgb(217,24,9)" fg:x="627" fg:w="4"/><text x="52.7186%" y="79.50"></text></g><g><title>tiny_size (4 samples, 0.33%)</title><rect x="52.4686%" y="53" width="0.3347%" height="15" fill="rgb(220,13,46)" fg:x="627" fg:w="4"/><text x="52.7186%" y="63.50"></text></g><g><title>tiny_size (1 samples, 0.08%)</title><rect x="52.8033%" y="69" width="0.0837%" height="15" fill="rgb(239,221,27)" fg:x="631" fg:w="1"/><text x="53.0533%" y="79.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.25%)</title><rect x="55.1464%" y="53" width="0.2510%" height="15" fill="rgb(222,198,25)" fg:x="659" fg:w="3"/><text x="55.3964%" y="63.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.33%)</title><rect x="55.3975%" y="53" width="0.3347%" height="15" fill="rgb(211,99,13)" fg:x="662" fg:w="4"/><text x="55.6475%" y="63.50"></text></g><g><title>szone_realloc (56 samples, 4.69%)</title><rect x="51.4644%" y="85" width="4.6862%" height="15" fill="rgb(232,111,31)" fg:x="615" fg:w="56"/><text x="51.7144%" y="95.50">szone..</text></g><g><title>tiny_try_realloc_in_place (39 samples, 3.26%)</title><rect x="52.8870%" y="69" width="3.2636%" height="15" fill="rgb(245,82,37)" fg:x="632" fg:w="39"/><text x="53.1370%" y="79.50">tin..</text></g><g><title>tiny_free_list_remove_ptr (5 samples, 0.42%)</title><rect x="55.7322%" y="53" width="0.4184%" height="15" fill="rgb(227,149,46)" fg:x="666" fg:w="5"/><text x="55.9822%" y="63.50"></text></g><g><title>_malloc_zone_realloc (60 samples, 5.02%)</title><rect x="51.2134%" y="101" width="5.0209%" height="15" fill="rgb(218,36,50)" fg:x="612" fg:w="60"/><text x="51.4634%" y="111.50">_mallo..</text></g><g><title>tiny_try_realloc_in_place (1 samples, 0.08%)</title><rect x="56.1506%" y="85" width="0.0837%" height="15" fill="rgb(226,80,48)" fg:x="671" fg:w="1"/><text x="56.4006%" y="95.50"></text></g><g><title>_realloc (75 samples, 6.28%)</title><rect x="50.7950%" y="117" width="6.2762%" height="15" fill="rgb(238,224,15)" fg:x="607" fg:w="75"/><text x="51.0450%" y="127.50">_realloc</text></g><g><title>szone_size (10 samples, 0.84%)</title><rect x="56.2343%" y="101" width="0.8368%" height="15" fill="rgb(241,136,10)" fg:x="672" fg:w="10"/><text x="56.4843%" y="111.50"></text></g><g><title>tiny_size (9 samples, 0.75%)</title><rect x="56.3180%" y="85" width="0.7531%" height="15" fill="rgb(208,32,45)" fg:x="673" fg:w="9"/><text x="56.5680%" y="95.50"></text></g><g><title>rack_get_thread_index (2 samples, 0.17%)</title><rect x="57.0711%" y="101" width="0.1674%" height="15" fill="rgb(207,135,9)" fg:x="682" fg:w="2"/><text x="57.3211%" y="111.50"></text></g><g><title>szone_malloc_should_clear (19 samples, 1.59%)</title><rect x="57.0711%" y="117" width="1.5900%" height="15" fill="rgb(206,86,44)" fg:x="682" fg:w="19"/><text x="57.3211%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (17 samples, 1.42%)</title><rect x="57.2385%" y="101" width="1.4226%" height="15" fill="rgb(245,177,15)" fg:x="684" fg:w="17"/><text x="57.4885%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (7 samples, 0.59%)</title><rect x="58.0753%" y="85" width="0.5858%" height="15" fill="rgb(206,64,50)" fg:x="694" fg:w="7"/><text x="58.3253%" y="95.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="58.5774%" y="69" width="0.0837%" height="15" fill="rgb(234,36,40)" fg:x="700" fg:w="1"/><text x="58.8274%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (100 samples, 8.37%)</title><rect x="50.4603%" y="133" width="8.3682%" height="15" fill="rgb(213,64,8)" fg:x="603" fg:w="100"/><text x="50.7103%" y="143.50">alloc::raw_v..</text></g><g><title>szone_size (2 samples, 0.17%)</title><rect x="58.6611%" y="117" width="0.1674%" height="15" fill="rgb(210,75,36)" fg:x="701" fg:w="2"/><text x="58.9111%" y="127.50"></text></g><g><title>realloc (2 samples, 0.17%)</title><rect x="58.8285%" y="133" width="0.1674%" height="15" fill="rgb(229,88,21)" fg:x="703" fg:w="2"/><text x="59.0785%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (289 samples, 24.18%)</title><rect x="34.9791%" y="181" width="24.1841%" height="15" fill="rgb(252,204,47)" fg:x="418" fg:w="289"/><text x="35.2291%" y="191.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (172 samples, 14.39%)</title><rect x="44.7699%" y="165" width="14.3933%" height="15" fill="rgb(208,77,27)" fg:x="535" fg:w="172"/><text x="45.0199%" y="175.50">vexy_json_core::parser::un..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (110 samples, 9.21%)</title><rect x="49.9582%" y="149" width="9.2050%" height="15" fill="rgb(221,76,26)" fg:x="597" fg:w="110"/><text x="50.2082%" y="159.50">alloc::raw_ve..</text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="58.9958%" y="133" width="0.1674%" height="15" fill="rgb(225,139,18)" fg:x="705" fg:w="2"/><text x="59.2458%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="59.6653%" y="149" width="0.0837%" height="15" fill="rgb(230,137,11)" fg:x="713" fg:w="1"/><text x="59.9153%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="59.7490%" y="149" width="0.2510%" height="15" fill="rgb(212,28,1)" fg:x="714" fg:w="3"/><text x="59.9990%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (13 samples, 1.09%)</title><rect x="59.1632%" y="181" width="1.0879%" height="15" fill="rgb(248,164,17)" fg:x="707" fg:w="13"/><text x="59.4132%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (10 samples, 0.84%)</title><rect x="59.4142%" y="165" width="0.8368%" height="15" fill="rgb(222,171,42)" fg:x="710" fg:w="10"/><text x="59.6642%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (3 samples, 0.25%)</title><rect x="60.0000%" y="149" width="0.2510%" height="15" fill="rgb(243,84,45)" fg:x="717" fg:w="3"/><text x="60.2500%" y="159.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="60.5021%" y="149" width="0.0837%" height="15" fill="rgb(252,49,23)" fg:x="723" fg:w="1"/><text x="60.7521%" y="159.50"></text></g><g><title>szone_good_size (1 samples, 0.08%)</title><rect x="60.5858%" y="101" width="0.0837%" height="15" fill="rgb(215,19,7)" fg:x="724" fg:w="1"/><text x="60.8358%" y="111.50"></text></g><g><title>_realloc (2 samples, 0.17%)</title><rect x="60.5858%" y="133" width="0.1674%" height="15" fill="rgb(238,81,41)" fg:x="724" fg:w="2"/><text x="60.8358%" y="143.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.17%)</title><rect x="60.5858%" y="117" width="0.1674%" height="15" fill="rgb(210,199,37)" fg:x="724" fg:w="2"/><text x="60.8358%" y="127.50"></text></g><g><title>szone_realloc (1 samples, 0.08%)</title><rect x="60.6695%" y="101" width="0.0837%" height="15" fill="rgb(244,192,49)" fg:x="725" fg:w="1"/><text x="60.9195%" y="111.50"></text></g><g><title>szone_size (1 samples, 0.08%)</title><rect x="60.6695%" y="85" width="0.0837%" height="15" fill="rgb(226,211,11)" fg:x="725" fg:w="1"/><text x="60.9195%" y="95.50"></text></g><g><title>tiny_size (1 samples, 0.08%)</title><rect x="60.6695%" y="69" width="0.0837%" height="15" fill="rgb(236,162,54)" fg:x="725" fg:w="1"/><text x="60.9195%" y="79.50"></text></g><g><title>rack_get_thread_index (4 samples, 0.33%)</title><rect x="60.7531%" y="117" width="0.3347%" height="15" fill="rgb(220,229,9)" fg:x="726" fg:w="4"/><text x="61.0031%" y="127.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="61.8410%" y="85" width="0.0837%" height="15" fill="rgb(250,87,22)" fg:x="739" fg:w="1"/><text x="62.0910%" y="95.50"></text></g><g><title>szone_malloc_should_clear (15 samples, 1.26%)</title><rect x="60.7531%" y="133" width="1.2552%" height="15" fill="rgb(239,43,17)" fg:x="726" fg:w="15"/><text x="61.0031%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (11 samples, 0.92%)</title><rect x="61.0879%" y="117" width="0.9205%" height="15" fill="rgb(231,177,25)" fg:x="730" fg:w="11"/><text x="61.3379%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (8 samples, 0.67%)</title><rect x="61.3389%" y="101" width="0.6695%" height="15" fill="rgb(219,179,1)" fg:x="733" fg:w="8"/><text x="61.5889%" y="111.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="61.9247%" y="85" width="0.0837%" height="15" fill="rgb(238,219,53)" fg:x="740" fg:w="1"/><text x="62.1747%" y="95.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (411 samples, 34.39%)</title><rect x="27.6987%" y="213" width="34.3933%" height="15" fill="rgb(232,167,36)" fg:x="331" fg:w="411"/><text x="27.9487%" y="223.50">vexy_json_core::parser::Parser::parse_array</text></g><g><title>vexy_json_core::parser::Parser::parse_value (404 samples, 33.81%)</title><rect x="28.2845%" y="197" width="33.8075%" height="15" fill="rgb(244,19,51)" fg:x="338" fg:w="404"/><text x="28.5345%" y="207.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (22 samples, 1.84%)</title><rect x="60.2510%" y="181" width="1.8410%" height="15" fill="rgb(224,6,22)" fg:x="720" fg:w="22"/><text x="60.5010%" y="191.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 1.67%)</title><rect x="60.4184%" y="165" width="1.6736%" height="15" fill="rgb(224,145,5)" fg:x="722" fg:w="20"/><text x="60.6684%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 1.51%)</title><rect x="60.5858%" y="149" width="1.5063%" height="15" fill="rgb(234,130,49)" fg:x="724" fg:w="18"/><text x="60.8358%" y="159.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="62.0084%" y="133" width="0.0837%" height="15" fill="rgb(254,6,2)" fg:x="741" fg:w="1"/><text x="62.2584%" y="143.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2 samples, 0.17%)</title><rect x="62.4268%" y="197" width="0.1674%" height="15" fill="rgb(208,96,46)" fg:x="746" fg:w="2"/><text x="62.6768%" y="207.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="62.4268%" y="181" width="0.1674%" height="15" fill="rgb(239,3,39)" fg:x="746" fg:w="2"/><text x="62.6768%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="62.4268%" y="165" width="0.1674%" height="15" fill="rgb(233,210,1)" fg:x="746" fg:w="2"/><text x="62.6768%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="62.5105%" y="149" width="0.0837%" height="15" fill="rgb(244,137,37)" fg:x="747" fg:w="1"/><text x="62.7605%" y="159.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="62.5105%" y="133" width="0.0837%" height="15" fill="rgb(240,136,2)" fg:x="747" fg:w="1"/><text x="62.7605%" y="143.50"></text></g><g><title>core::str::validations::next_code_point (3 samples, 0.25%)</title><rect x="62.5941%" y="197" width="0.2510%" height="15" fill="rgb(239,18,37)" fg:x="748" fg:w="3"/><text x="62.8441%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.50%)</title><rect x="63.1799%" y="181" width="0.5021%" height="15" fill="rgb(218,185,22)" fg:x="755" fg:w="6"/><text x="63.4299%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.25%)</title><rect x="63.4310%" y="165" width="0.2510%" height="15" fill="rgb(225,218,4)" fg:x="758" fg:w="3"/><text x="63.6810%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.17%)</title><rect x="64.0167%" y="165" width="0.1674%" height="15" fill="rgb(230,182,32)" fg:x="765" fg:w="2"/><text x="64.2667%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.17%)</title><rect x="64.0167%" y="149" width="0.1674%" height="15" fill="rgb(242,56,43)" fg:x="765" fg:w="2"/><text x="64.2667%" y="159.50"></text></g><g><title>free_small (1 samples, 0.08%)</title><rect x="64.1841%" y="165" width="0.0837%" height="15" fill="rgb(233,99,24)" fg:x="767" fg:w="1"/><text x="64.4341%" y="175.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="64.2678%" y="165" width="0.1674%" height="15" fill="rgb(234,209,42)" fg:x="768" fg:w="2"/><text x="64.5178%" y="175.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="64.3515%" y="149" width="0.0837%" height="15" fill="rgb(227,7,12)" fg:x="769" fg:w="1"/><text x="64.6015%" y="159.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="64.3515%" y="133" width="0.0837%" height="15" fill="rgb(245,203,43)" fg:x="769" fg:w="1"/><text x="64.6015%" y="143.50"></text></g><g><title>small_malloc_should_clear (2 samples, 0.17%)</title><rect x="64.4351%" y="149" width="0.1674%" height="15" fill="rgb(238,205,33)" fg:x="770" fg:w="2"/><text x="64.6851%" y="159.50"></text></g><g><title>small_malloc_from_free_list (2 samples, 0.17%)</title><rect x="64.4351%" y="133" width="0.1674%" height="15" fill="rgb(231,56,7)" fg:x="770" fg:w="2"/><text x="64.6851%" y="143.50"></text></g><g><title>small_free_list_add_ptr (2 samples, 0.17%)</title><rect x="64.4351%" y="117" width="0.1674%" height="15" fill="rgb(244,186,29)" fg:x="770" fg:w="2"/><text x="64.6851%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23 samples, 1.92%)</title><rect x="62.8452%" y="197" width="1.9247%" height="15" fill="rgb(234,111,31)" fg:x="751" fg:w="23"/><text x="63.0952%" y="207.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 1.09%)</title><rect x="63.6820%" y="181" width="1.0879%" height="15" fill="rgb(241,149,10)" fg:x="761" fg:w="13"/><text x="63.9320%" y="191.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.33%)</title><rect x="64.4351%" y="165" width="0.3347%" height="15" fill="rgb(249,206,44)" fg:x="770" fg:w="4"/><text x="64.6851%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="64.6025%" y="149" width="0.1674%" height="15" fill="rgb(251,153,30)" fg:x="772" fg:w="2"/><text x="64.8525%" y="159.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.08%)</title><rect x="64.6862%" y="133" width="0.0837%" height="15" fill="rgb(239,152,38)" fg:x="773" fg:w="1"/><text x="64.9362%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (6 samples, 0.50%)</title><rect x="64.7699%" y="181" width="0.5021%" height="15" fill="rgb(249,139,47)" fg:x="774" fg:w="6"/><text x="65.0199%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (7 samples, 0.59%)</title><rect x="64.7699%" y="197" width="0.5858%" height="15" fill="rgb(244,64,35)" fg:x="774" fg:w="7"/><text x="65.0199%" y="207.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.08%)</title><rect x="65.2720%" y="181" width="0.0837%" height="15" fill="rgb(216,46,15)" fg:x="780" fg:w="1"/><text x="65.5220%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.08%)</title><rect x="65.3556%" y="181" width="0.0837%" height="15" fill="rgb(250,74,19)" fg:x="781" fg:w="1"/><text x="65.6056%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="65.3556%" y="165" width="0.0837%" height="15" fill="rgb(249,42,33)" fg:x="781" fg:w="1"/><text x="65.6056%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (2 samples, 0.17%)</title><rect x="65.3556%" y="197" width="0.1674%" height="15" fill="rgb(242,149,17)" fg:x="781" fg:w="2"/><text x="65.6056%" y="207.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (1 samples, 0.08%)</title><rect x="65.4393%" y="181" width="0.0837%" height="15" fill="rgb(244,29,21)" fg:x="782" fg:w="1"/><text x="65.6893%" y="191.50"></text></g><g><title>vexy_json_core::parser::unescape_string (1 samples, 0.08%)</title><rect x="65.4393%" y="165" width="0.0837%" height="15" fill="rgb(220,130,37)" fg:x="782" fg:w="1"/><text x="65.6893%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.08%)</title><rect x="65.4393%" y="149" width="0.0837%" height="15" fill="rgb(211,67,2)" fg:x="782" fg:w="1"/><text x="65.6893%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.4393%" y="133" width="0.0837%" height="15" fill="rgb(235,68,52)" fg:x="782" fg:w="1"/><text x="65.6893%" y="143.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="65.4393%" y="117" width="0.0837%" height="15" fill="rgb(246,142,3)" fg:x="782" fg:w="1"/><text x="65.6893%" y="127.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="66.4435%" y="181" width="0.0837%" height="15" fill="rgb(241,25,7)" fg:x="794" fg:w="1"/><text x="66.6935%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.08%)</title><rect x="66.4435%" y="165" width="0.0837%" height="15" fill="rgb(242,119,39)" fg:x="794" fg:w="1"/><text x="66.6935%" y="175.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="66.6109%" y="133" width="0.0837%" height="15" fill="rgb(241,98,45)" fg:x="796" fg:w="1"/><text x="66.8609%" y="143.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3 samples, 0.25%)</title><rect x="66.5272%" y="181" width="0.2510%" height="15" fill="rgb(254,28,30)" fg:x="795" fg:w="3"/><text x="66.7772%" y="191.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="66.5272%" y="165" width="0.2510%" height="15" fill="rgb(241,142,54)" fg:x="795" fg:w="3"/><text x="66.7772%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.25%)</title><rect x="66.5272%" y="149" width="0.2510%" height="15" fill="rgb(222,85,15)" fg:x="795" fg:w="3"/><text x="66.7772%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="66.6946%" y="133" width="0.0837%" height="15" fill="rgb(210,85,47)" fg:x="797" fg:w="1"/><text x="66.9446%" y="143.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="66.6946%" y="117" width="0.0837%" height="15" fill="rgb(224,206,25)" fg:x="797" fg:w="1"/><text x="66.9446%" y="127.50"></text></g><g><title>_free (2 samples, 0.17%)</title><rect x="66.7782%" y="181" width="0.1674%" height="15" fill="rgb(243,201,19)" fg:x="798" fg:w="2"/><text x="67.0282%" y="191.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="66.9456%" y="181" width="0.0837%" height="15" fill="rgb(236,59,4)" fg:x="800" fg:w="1"/><text x="67.1956%" y="191.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="67.0293%" y="181" width="0.0837%" height="15" fill="rgb(254,179,45)" fg:x="801" fg:w="1"/><text x="67.2793%" y="191.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="67.1130%" y="181" width="0.0837%" height="15" fill="rgb(226,14,10)" fg:x="802" fg:w="1"/><text x="67.3630%" y="191.50"></text></g><g><title>_free (1 samples, 0.08%)</title><rect x="67.5314%" y="165" width="0.0837%" height="15" fill="rgb(244,27,41)" fg:x="807" fg:w="1"/><text x="67.7814%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.33%)</title><rect x="67.6151%" y="165" width="0.3347%" height="15" fill="rgb(235,35,32)" fg:x="808" fg:w="4"/><text x="67.8651%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.25%)</title><rect x="67.6987%" y="149" width="0.2510%" height="15" fill="rgb(218,68,31)" fg:x="809" fg:w="3"/><text x="67.9487%" y="159.50"></text></g><g><title>free_tiny (1 samples, 0.08%)</title><rect x="68.1172%" y="149" width="0.0837%" height="15" fill="rgb(207,120,37)" fg:x="814" fg:w="1"/><text x="68.3672%" y="159.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="68.1172%" y="133" width="0.0837%" height="15" fill="rgb(227,98,0)" fg:x="814" fg:w="1"/><text x="68.3672%" y="143.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="68.2008%" y="133" width="0.0837%" height="15" fill="rgb(207,7,3)" fg:x="815" fg:w="1"/><text x="68.4508%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.50%)</title><rect x="67.9498%" y="165" width="0.5021%" height="15" fill="rgb(206,98,19)" fg:x="812" fg:w="6"/><text x="68.1998%" y="175.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="68.2008%" y="149" width="0.2510%" height="15" fill="rgb(217,5,26)" fg:x="815" fg:w="3"/><text x="68.4508%" y="159.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="68.2845%" y="133" width="0.1674%" height="15" fill="rgb(235,190,38)" fg:x="816" fg:w="2"/><text x="68.5345%" y="143.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="68.2845%" y="117" width="0.1674%" height="15" fill="rgb(247,86,24)" fg:x="816" fg:w="2"/><text x="68.5345%" y="127.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="68.3682%" y="101" width="0.0837%" height="15" fill="rgb(205,101,16)" fg:x="817" fg:w="1"/><text x="68.6182%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 1.34%)</title><rect x="67.1967%" y="181" width="1.3389%" height="15" fill="rgb(246,168,33)" fg:x="803" fg:w="16"/><text x="67.4467%" y="191.50"></text></g><g><title>malloc (1 samples, 0.08%)</title><rect x="68.4519%" y="165" width="0.0837%" height="15" fill="rgb(231,114,1)" fg:x="818" fg:w="1"/><text x="68.7019%" y="175.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="68.5356%" y="181" width="0.0837%" height="15" fill="rgb(207,184,53)" fg:x="819" fg:w="1"/><text x="68.7856%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="68.5356%" y="165" width="0.0837%" height="15" fill="rgb(224,95,51)" fg:x="819" fg:w="1"/><text x="68.7856%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="68.5356%" y="149" width="0.0837%" height="15" fill="rgb(212,188,45)" fg:x="819" fg:w="1"/><text x="68.7856%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (9 samples, 0.75%)</title><rect x="68.8703%" y="165" width="0.7531%" height="15" fill="rgb(223,154,38)" fg:x="823" fg:w="9"/><text x="69.1203%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="69.6234%" y="165" width="0.2510%" height="15" fill="rgb(251,22,52)" fg:x="832" fg:w="3"/><text x="69.8734%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (16 samples, 1.34%)</title><rect x="68.6192%" y="181" width="1.3389%" height="15" fill="rgb(229,209,22)" fg:x="820" fg:w="16"/><text x="68.8692%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto367_ctx366_x (1 samples, 0.08%)</title><rect x="69.8745%" y="165" width="0.0837%" height="15" fill="rgb(234,138,34)" fg:x="835" fg:w="1"/><text x="70.1245%" y="175.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.08%)</title><rect x="70.2092%" y="101" width="0.0837%" height="15" fill="rgb(212,95,11)" fg:x="839" fg:w="1"/><text x="70.4592%" y="111.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.08%)</title><rect x="70.2929%" y="101" width="0.0837%" height="15" fill="rgb(240,179,47)" fg:x="840" fg:w="1"/><text x="70.5429%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.50%)</title><rect x="70.0418%" y="165" width="0.5021%" height="15" fill="rgb(240,163,11)" fg:x="837" fg:w="6"/><text x="70.2918%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.50%)</title><rect x="70.0418%" y="149" width="0.5021%" height="15" fill="rgb(236,37,12)" fg:x="837" fg:w="6"/><text x="70.2918%" y="159.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.50%)</title><rect x="70.0418%" y="133" width="0.5021%" height="15" fill="rgb(232,164,16)" fg:x="837" fg:w="6"/><text x="70.2918%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.42%)</title><rect x="70.1255%" y="117" width="0.4184%" height="15" fill="rgb(244,205,15)" fg:x="838" fg:w="5"/><text x="70.3755%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="70.3766%" y="101" width="0.1674%" height="15" fill="rgb(223,117,47)" fg:x="841" fg:w="2"/><text x="70.6266%" y="111.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.17%)</title><rect x="70.7950%" y="149" width="0.1674%" height="15" fill="rgb(244,107,35)" fg:x="846" fg:w="2"/><text x="71.0450%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (8 samples, 0.67%)</title><rect x="70.5439%" y="165" width="0.6695%" height="15" fill="rgb(205,140,8)" fg:x="843" fg:w="8"/><text x="70.7939%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="70.9623%" y="149" width="0.2510%" height="15" fill="rgb(228,84,46)" fg:x="848" fg:w="3"/><text x="71.2123%" y="159.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="71.8828%" y="149" width="0.0837%" height="15" fill="rgb(254,188,9)" fg:x="859" fg:w="1"/><text x="72.1328%" y="159.50"></text></g><g><title>vexy_json_core::parser::unescape_string (1 samples, 0.08%)</title><rect x="71.8828%" y="133" width="0.0837%" height="15" fill="rgb(206,112,54)" fg:x="859" fg:w="1"/><text x="72.1328%" y="143.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="71.9665%" y="149" width="0.0837%" height="15" fill="rgb(216,84,49)" fg:x="860" fg:w="1"/><text x="72.2165%" y="159.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="72.0502%" y="149" width="0.0837%" height="15" fill="rgb(214,194,35)" fg:x="861" fg:w="1"/><text x="72.3002%" y="159.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.08%)</title><rect x="72.1339%" y="149" width="0.0837%" height="15" fill="rgb(249,28,3)" fg:x="862" fg:w="1"/><text x="72.3839%" y="159.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="72.9707%" y="133" width="0.0837%" height="15" fill="rgb(222,56,52)" fg:x="872" fg:w="1"/><text x="73.2207%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.84%)</title><rect x="73.0544%" y="133" width="0.8368%" height="15" fill="rgb(245,217,50)" fg:x="873" fg:w="10"/><text x="73.3044%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.33%)</title><rect x="73.5565%" y="117" width="0.3347%" height="15" fill="rgb(213,201,24)" fg:x="879" fg:w="4"/><text x="73.8065%" y="127.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="73.8912%" y="117" width="0.1674%" height="15" fill="rgb(248,116,28)" fg:x="883" fg:w="2"/><text x="74.1412%" y="127.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="74.0586%" y="117" width="0.1674%" height="15" fill="rgb(219,72,43)" fg:x="885" fg:w="2"/><text x="74.3086%" y="127.50"></text></g><g><title>rack_get_thread_index (2 samples, 0.17%)</title><rect x="74.2259%" y="101" width="0.1674%" height="15" fill="rgb(209,138,14)" fg:x="887" fg:w="2"/><text x="74.4759%" y="111.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.08%)</title><rect x="74.3933%" y="101" width="0.0837%" height="15" fill="rgb(222,18,33)" fg:x="889" fg:w="1"/><text x="74.6433%" y="111.50"></text></g><g><title>set_tiny_meta_header_in_use (3 samples, 0.25%)</title><rect x="74.8954%" y="85" width="0.2510%" height="15" fill="rgb(213,199,7)" fg:x="895" fg:w="3"/><text x="75.1454%" y="95.50"></text></g><g><title>szone_malloc_should_clear (13 samples, 1.09%)</title><rect x="74.2259%" y="117" width="1.0879%" height="15" fill="rgb(250,110,10)" fg:x="887" fg:w="13"/><text x="74.4759%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (10 samples, 0.84%)</title><rect x="74.4770%" y="101" width="0.8368%" height="15" fill="rgb(248,123,6)" fg:x="890" fg:w="10"/><text x="74.7270%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="75.1464%" y="85" width="0.1674%" height="15" fill="rgb(206,91,31)" fg:x="898" fg:w="2"/><text x="75.3964%" y="95.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (38 samples, 3.18%)</title><rect x="72.2176%" y="149" width="3.1799%" height="15" fill="rgb(211,154,13)" fg:x="863" fg:w="38"/><text x="72.4676%" y="159.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 1.51%)</title><rect x="73.8912%" y="133" width="1.5063%" height="15" fill="rgb(225,148,7)" fg:x="883" fg:w="18"/><text x="74.1412%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="75.3138%" y="117" width="0.0837%" height="15" fill="rgb(220,160,43)" fg:x="900" fg:w="1"/><text x="75.5638%" y="127.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (9 samples, 0.75%)</title><rect x="75.4812%" y="133" width="0.7531%" height="15" fill="rgb(213,52,39)" fg:x="902" fg:w="9"/><text x="75.7312%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="76.2343%" y="133" width="0.2510%" height="15" fill="rgb(243,137,7)" fg:x="911" fg:w="3"/><text x="76.4843%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (2 samples, 0.17%)</title><rect x="76.4854%" y="133" width="0.1674%" height="15" fill="rgb(230,79,13)" fg:x="914" fg:w="2"/><text x="76.7354%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (16 samples, 1.34%)</title><rect x="75.3975%" y="149" width="1.3389%" height="15" fill="rgb(247,105,23)" fg:x="901" fg:w="16"/><text x="75.6475%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto367_ctx366_x (1 samples, 0.08%)</title><rect x="76.6527%" y="133" width="0.0837%" height="15" fill="rgb(223,179,41)" fg:x="916" fg:w="1"/><text x="76.9027%" y="143.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="76.8201%" y="133" width="0.0837%" height="15" fill="rgb(218,9,34)" fg:x="918" fg:w="1"/><text x="77.0701%" y="143.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2 samples, 0.17%)</title><rect x="76.9038%" y="133" width="0.1674%" height="15" fill="rgb(222,106,8)" fg:x="919" fg:w="2"/><text x="77.1538%" y="143.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.08%)</title><rect x="76.9874%" y="117" width="0.0837%" height="15" fill="rgb(211,220,0)" fg:x="920" fg:w="1"/><text x="77.2374%" y="127.50"></text></g><g><title>free_tiny (7 samples, 0.59%)</title><rect x="77.0711%" y="133" width="0.5858%" height="15" fill="rgb(229,52,16)" fg:x="921" fg:w="7"/><text x="77.3211%" y="143.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="77.5732%" y="117" width="0.0837%" height="15" fill="rgb(212,155,18)" fg:x="927" fg:w="1"/><text x="77.8232%" y="127.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.84%)</title><rect x="77.6569%" y="133" width="0.8368%" height="15" fill="rgb(242,21,14)" fg:x="928" fg:w="10"/><text x="77.9069%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (9 samples, 0.75%)</title><rect x="77.7406%" y="117" width="0.7531%" height="15" fill="rgb(222,19,48)" fg:x="929" fg:w="9"/><text x="77.9906%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.25%)</title><rect x="78.2427%" y="101" width="0.2510%" height="15" fill="rgb(232,45,27)" fg:x="935" fg:w="3"/><text x="78.4927%" y="111.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="78.4937%" y="133" width="0.2510%" height="15" fill="rgb(249,103,42)" fg:x="938" fg:w="3"/><text x="78.7437%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.17%)</title><rect x="78.5774%" y="117" width="0.1674%" height="15" fill="rgb(246,81,33)" fg:x="939" fg:w="2"/><text x="78.8274%" y="127.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.08%)</title><rect x="78.9958%" y="101" width="0.0837%" height="15" fill="rgb(252,33,42)" fg:x="944" fg:w="1"/><text x="79.2458%" y="111.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.17%)</title><rect x="79.0795%" y="101" width="0.1674%" height="15" fill="rgb(209,212,41)" fg:x="945" fg:w="2"/><text x="79.3295%" y="111.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="79.3305%" y="69" width="0.0837%" height="15" fill="rgb(207,154,6)" fg:x="948" fg:w="1"/><text x="79.5805%" y="79.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (39 samples, 3.26%)</title><rect x="76.7364%" y="149" width="3.2636%" height="15" fill="rgb(223,64,47)" fg:x="917" fg:w="39"/><text x="76.9864%" y="159.50">zzs..</text></g><g><title>vexy_json_core::parser::unescape_string (15 samples, 1.26%)</title><rect x="78.7448%" y="133" width="1.2552%" height="15" fill="rgb(211,161,38)" fg:x="941" fg:w="15"/><text x="78.9948%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 1.00%)</title><rect x="78.9958%" y="117" width="1.0042%" height="15" fill="rgb(219,138,40)" fg:x="944" fg:w="12"/><text x="79.2458%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.75%)</title><rect x="79.2469%" y="101" width="0.7531%" height="15" fill="rgb(241,228,46)" fg:x="947" fg:w="9"/><text x="79.4969%" y="111.50"></text></g><g><title>szone_malloc_should_clear (8 samples, 0.67%)</title><rect x="79.3305%" y="85" width="0.6695%" height="15" fill="rgb(223,209,38)" fg:x="948" fg:w="8"/><text x="79.5805%" y="95.50"></text></g><g><title>tiny_malloc_should_clear (7 samples, 0.59%)</title><rect x="79.4142%" y="69" width="0.5858%" height="15" fill="rgb(236,164,45)" fg:x="949" fg:w="7"/><text x="79.6642%" y="79.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.25%)</title><rect x="79.7490%" y="53" width="0.2510%" height="15" fill="rgb(231,15,5)" fg:x="953" fg:w="3"/><text x="79.9990%" y="63.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.08%)</title><rect x="80.0000%" y="149" width="0.0837%" height="15" fill="rgb(252,35,15)" fg:x="956" fg:w="1"/><text x="80.2500%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (2 samples, 0.17%)</title><rect x="80.0837%" y="149" width="0.1674%" height="15" fill="rgb(248,181,18)" fg:x="957" fg:w="2"/><text x="80.3337%" y="159.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="80.5021%" y="133" width="0.0837%" height="15" fill="rgb(233,39,42)" fg:x="962" fg:w="1"/><text x="80.7521%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.5021%" y="117" width="0.0837%" height="15" fill="rgb(238,110,33)" fg:x="962" fg:w="1"/><text x="80.7521%" y="127.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="80.6695%" y="117" width="0.0837%" height="15" fill="rgb(233,195,10)" fg:x="964" fg:w="1"/><text x="80.9195%" y="127.50"></text></g><g><title>rack_get_thread_index (4 samples, 0.33%)</title><rect x="80.7531%" y="85" width="0.3347%" height="15" fill="rgb(254,105,3)" fg:x="965" fg:w="4"/><text x="81.0031%" y="95.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="82.3431%" y="69" width="0.0837%" height="15" fill="rgb(221,225,9)" fg:x="984" fg:w="1"/><text x="82.5931%" y="79.50"></text></g><g><title>szone_malloc_should_clear (23 samples, 1.92%)</title><rect x="80.7531%" y="101" width="1.9247%" height="15" fill="rgb(224,227,45)" fg:x="965" fg:w="23"/><text x="81.0031%" y="111.50">s..</text></g><g><title>tiny_malloc_should_clear (19 samples, 1.59%)</title><rect x="81.0879%" y="85" width="1.5900%" height="15" fill="rgb(229,198,43)" fg:x="969" fg:w="19"/><text x="81.3379%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.25%)</title><rect x="82.4268%" y="69" width="0.2510%" height="15" fill="rgb(206,209,35)" fg:x="985" fg:w="3"/><text x="82.6768%" y="79.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (153 samples, 12.80%)</title><rect x="69.9582%" y="181" width="12.8033%" height="15" fill="rgb(245,195,53)" fg:x="836" fg:w="153"/><text x="70.2082%" y="191.50">vexy_json_core::parser:..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (138 samples, 11.55%)</title><rect x="71.2134%" y="165" width="11.5481%" height="15" fill="rgb(240,92,26)" fg:x="851" fg:w="138"/><text x="71.4634%" y="175.50">vexy_json_core::parse..</text></g><g><title>vexy_json_core::parser::unescape_string (30 samples, 2.51%)</title><rect x="80.2510%" y="149" width="2.5105%" height="15" fill="rgb(207,40,23)" fg:x="959" fg:w="30"/><text x="80.5010%" y="159.50">zz..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (26 samples, 2.18%)</title><rect x="80.5858%" y="133" width="2.1757%" height="15" fill="rgb(223,111,35)" fg:x="963" fg:w="26"/><text x="80.8358%" y="143.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 2.01%)</title><rect x="80.7531%" y="117" width="2.0084%" height="15" fill="rgb(229,147,28)" fg:x="965" fg:w="24"/><text x="81.0031%" y="127.50">a..</text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="82.6778%" y="101" width="0.0837%" height="15" fill="rgb(211,29,28)" fg:x="988" fg:w="1"/><text x="82.9278%" y="111.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="83.5983%" y="165" width="0.1674%" height="15" fill="rgb(228,72,33)" fg:x="999" fg:w="2"/><text x="83.8483%" y="175.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.08%)</title><rect x="83.7657%" y="165" width="0.0837%" height="15" fill="rgb(205,214,31)" fg:x="1001" fg:w="1"/><text x="84.0157%" y="175.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.08%)</title><rect x="83.7657%" y="149" width="0.0837%" height="15" fill="rgb(224,111,15)" fg:x="1001" fg:w="1"/><text x="84.0157%" y="159.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.08%)</title><rect x="83.8494%" y="165" width="0.0837%" height="15" fill="rgb(253,21,26)" fg:x="1002" fg:w="1"/><text x="84.0994%" y="175.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="83.9331%" y="165" width="0.0837%" height="15" fill="rgb(245,139,43)" fg:x="1003" fg:w="1"/><text x="84.1831%" y="175.50"></text></g><g><title>free_tiny (1 samples, 0.08%)</title><rect x="84.0167%" y="165" width="0.0837%" height="15" fill="rgb(252,170,7)" fg:x="1004" fg:w="1"/><text x="84.2667%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.33%)</title><rect x="84.6862%" y="149" width="0.3347%" height="15" fill="rgb(231,118,14)" fg:x="1012" fg:w="4"/><text x="84.9362%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="84.9372%" y="133" width="0.0837%" height="15" fill="rgb(238,83,0)" fg:x="1015" fg:w="1"/><text x="85.1872%" y="143.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="85.1046%" y="117" width="0.0837%" height="15" fill="rgb(221,39,39)" fg:x="1017" fg:w="1"/><text x="85.3546%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.33%)</title><rect x="85.0209%" y="149" width="0.3347%" height="15" fill="rgb(222,119,46)" fg:x="1016" fg:w="4"/><text x="85.2709%" y="159.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="85.1046%" y="133" width="0.2510%" height="15" fill="rgb(222,165,49)" fg:x="1017" fg:w="3"/><text x="85.3546%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="85.1883%" y="117" width="0.1674%" height="15" fill="rgb(219,113,52)" fg:x="1018" fg:w="2"/><text x="85.4383%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 1.34%)</title><rect x="84.1004%" y="165" width="1.3389%" height="15" fill="rgb(214,7,15)" fg:x="1005" fg:w="16"/><text x="84.3504%" y="175.50"></text></g><g><title>malloc (1 samples, 0.08%)</title><rect x="85.3556%" y="149" width="0.0837%" height="15" fill="rgb(235,32,4)" fg:x="1020" fg:w="1"/><text x="85.6056%" y="159.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.33%)</title><rect x="85.4393%" y="165" width="0.3347%" height="15" fill="rgb(238,90,54)" fg:x="1021" fg:w="4"/><text x="85.6893%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (4 samples, 0.33%)</title><rect x="85.4393%" y="149" width="0.3347%" height="15" fill="rgb(213,208,19)" fg:x="1021" fg:w="4"/><text x="85.6893%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="85.6904%" y="133" width="0.0837%" height="15" fill="rgb(233,156,4)" fg:x="1024" fg:w="1"/><text x="85.9404%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (5 samples, 0.42%)</title><rect x="85.8577%" y="149" width="0.4184%" height="15" fill="rgb(207,194,5)" fg:x="1026" fg:w="5"/><text x="86.1077%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.17%)</title><rect x="86.2762%" y="149" width="0.1674%" height="15" fill="rgb(206,111,30)" fg:x="1031" fg:w="2"/><text x="86.5262%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (9 samples, 0.75%)</title><rect x="85.7741%" y="165" width="0.7531%" height="15" fill="rgb(243,70,54)" fg:x="1025" fg:w="9"/><text x="86.0241%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.08%)</title><rect x="86.4435%" y="149" width="0.0837%" height="15" fill="rgb(242,28,8)" fg:x="1033" fg:w="1"/><text x="86.6935%" y="159.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="86.9456%" y="133" width="0.0837%" height="15" fill="rgb(219,106,18)" fg:x="1039" fg:w="1"/><text x="87.1956%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.25%)</title><rect x="86.9456%" y="149" width="0.2510%" height="15" fill="rgb(244,222,10)" fg:x="1039" fg:w="3"/><text x="87.1956%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.17%)</title><rect x="87.0293%" y="133" width="0.1674%" height="15" fill="rgb(236,179,52)" fg:x="1040" fg:w="2"/><text x="87.2793%" y="143.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="87.0293%" y="117" width="0.1674%" height="15" fill="rgb(213,23,39)" fg:x="1040" fg:w="2"/><text x="87.2793%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="87.0293%" y="101" width="0.1674%" height="15" fill="rgb(238,48,10)" fg:x="1040" fg:w="2"/><text x="87.2793%" y="111.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="87.3640%" y="133" width="0.0837%" height="15" fill="rgb(251,196,23)" fg:x="1044" fg:w="1"/><text x="87.6140%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (5 samples, 0.42%)</title><rect x="87.1967%" y="149" width="0.4184%" height="15" fill="rgb(250,152,24)" fg:x="1042" fg:w="5"/><text x="87.4467%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (2 samples, 0.17%)</title><rect x="87.4477%" y="133" width="0.1674%" height="15" fill="rgb(209,150,17)" fg:x="1045" fg:w="2"/><text x="87.6977%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.08%)</title><rect x="87.8661%" y="133" width="0.0837%" height="15" fill="rgb(234,202,34)" fg:x="1050" fg:w="1"/><text x="88.1161%" y="143.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="87.9498%" y="101" width="0.0837%" height="15" fill="rgb(253,148,53)" fg:x="1051" fg:w="1"/><text x="88.1998%" y="111.50"></text></g><g><title>rack_get_thread_index (4 samples, 0.33%)</title><rect x="88.2008%" y="69" width="0.3347%" height="15" fill="rgb(218,129,16)" fg:x="1054" fg:w="4"/><text x="88.4508%" y="79.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (30 samples, 2.51%)</title><rect x="86.5272%" y="165" width="2.5105%" height="15" fill="rgb(216,85,19)" fg:x="1034" fg:w="30"/><text x="86.7772%" y="175.50">zz..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (17 samples, 1.42%)</title><rect x="87.6151%" y="149" width="1.4226%" height="15" fill="rgb(235,228,7)" fg:x="1047" fg:w="17"/><text x="87.8651%" y="159.50"></text></g><g><title>vexy_json_core::parser::unescape_string (13 samples, 1.09%)</title><rect x="87.9498%" y="133" width="1.0879%" height="15" fill="rgb(245,175,0)" fg:x="1051" fg:w="13"/><text x="88.1998%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 1.09%)</title><rect x="87.9498%" y="117" width="1.0879%" height="15" fill="rgb(208,168,36)" fg:x="1051" fg:w="13"/><text x="88.1998%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 1.00%)</title><rect x="88.0335%" y="101" width="1.0042%" height="15" fill="rgb(246,171,24)" fg:x="1052" fg:w="12"/><text x="88.2835%" y="111.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.84%)</title><rect x="88.2008%" y="85" width="0.8368%" height="15" fill="rgb(215,142,24)" fg:x="1054" fg:w="10"/><text x="88.4508%" y="95.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.50%)</title><rect x="88.5356%" y="69" width="0.5021%" height="15" fill="rgb(250,187,7)" fg:x="1058" fg:w="6"/><text x="88.7856%" y="79.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="88.8703%" y="53" width="0.1674%" height="15" fill="rgb(228,66,33)" fg:x="1062" fg:w="2"/><text x="89.1203%" y="63.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="89.1213%" y="149" width="0.0837%" height="15" fill="rgb(234,215,21)" fg:x="1065" fg:w="1"/><text x="89.3713%" y="159.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.17%)</title><rect x="89.2050%" y="149" width="0.1674%" height="15" fill="rgb(222,191,20)" fg:x="1066" fg:w="2"/><text x="89.4550%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.25%)</title><rect x="89.4561%" y="133" width="0.2510%" height="15" fill="rgb(245,79,54)" fg:x="1069" fg:w="3"/><text x="89.7061%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="89.6234%" y="117" width="0.0837%" height="15" fill="rgb(240,10,37)" fg:x="1071" fg:w="1"/><text x="89.8734%" y="127.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="89.7071%" y="101" width="0.0837%" height="15" fill="rgb(214,192,32)" fg:x="1072" fg:w="1"/><text x="89.9571%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.50%)</title><rect x="89.3724%" y="149" width="0.5021%" height="15" fill="rgb(209,36,54)" fg:x="1068" fg:w="6"/><text x="89.6224%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.17%)</title><rect x="89.7071%" y="133" width="0.1674%" height="15" fill="rgb(220,10,11)" fg:x="1072" fg:w="2"/><text x="89.9571%" y="143.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="89.7071%" y="117" width="0.1674%" height="15" fill="rgb(221,106,17)" fg:x="1072" fg:w="2"/><text x="89.9571%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="89.7908%" y="101" width="0.0837%" height="15" fill="rgb(251,142,44)" fg:x="1073" fg:w="1"/><text x="90.0408%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="89.7908%" y="85" width="0.0837%" height="15" fill="rgb(238,13,15)" fg:x="1073" fg:w="1"/><text x="90.0408%" y="95.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (3 samples, 0.25%)</title><rect x="90.1255%" y="133" width="0.2510%" height="15" fill="rgb(208,107,27)" fg:x="1077" fg:w="3"/><text x="90.3755%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="90.3766%" y="133" width="0.2510%" height="15" fill="rgb(205,136,37)" fg:x="1080" fg:w="3"/><text x="90.6266%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (10 samples, 0.84%)</title><rect x="89.8745%" y="149" width="0.8368%" height="15" fill="rgb(250,205,27)" fg:x="1074" fg:w="10"/><text x="90.1245%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto559_ctx537_x (1 samples, 0.08%)</title><rect x="90.6276%" y="133" width="0.0837%" height="15" fill="rgb(210,80,43)" fg:x="1083" fg:w="1"/><text x="90.8776%" y="143.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="90.7113%" y="133" width="0.0837%" height="15" fill="rgb(247,160,36)" fg:x="1084" fg:w="1"/><text x="90.9613%" y="143.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.08%)</title><rect x="90.7950%" y="133" width="0.0837%" height="15" fill="rgb(234,13,49)" fg:x="1085" fg:w="1"/><text x="91.0450%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (6 samples, 0.50%)</title><rect x="90.7113%" y="149" width="0.5021%" height="15" fill="rgb(234,122,0)" fg:x="1084" fg:w="6"/><text x="90.9613%" y="159.50"></text></g><g><title>free_tiny (4 samples, 0.33%)</title><rect x="90.8787%" y="133" width="0.3347%" height="15" fill="rgb(207,146,38)" fg:x="1086" fg:w="4"/><text x="91.1287%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.08%)</title><rect x="91.2134%" y="149" width="0.0837%" height="15" fill="rgb(207,177,25)" fg:x="1090" fg:w="1"/><text x="91.4634%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="91.3808%" y="117" width="0.0837%" height="15" fill="rgb(211,178,42)" fg:x="1092" fg:w="1"/><text x="91.6308%" y="127.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (3 samples, 0.25%)</title><rect x="91.2971%" y="149" width="0.2510%" height="15" fill="rgb(230,69,54)" fg:x="1091" fg:w="3"/><text x="91.5471%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="91.2971%" y="133" width="0.2510%" height="15" fill="rgb(214,135,41)" fg:x="1091" fg:w="3"/><text x="91.5471%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.08%)</title><rect x="91.4644%" y="117" width="0.0837%" height="15" fill="rgb(237,67,25)" fg:x="1093" fg:w="1"/><text x="91.7144%" y="127.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.08%)</title><rect x="91.8828%" y="101" width="0.0837%" height="15" fill="rgb(222,189,50)" fg:x="1098" fg:w="1"/><text x="92.1328%" y="111.50"></text></g><g><title>_malloc_zone_realloc (5 samples, 0.42%)</title><rect x="92.0502%" y="85" width="0.4184%" height="15" fill="rgb(245,148,34)" fg:x="1100" fg:w="5"/><text x="92.3002%" y="95.50"></text></g><g><title>szone_realloc (3 samples, 0.25%)</title><rect x="92.2176%" y="69" width="0.2510%" height="15" fill="rgb(222,29,6)" fg:x="1102" fg:w="3"/><text x="92.4676%" y="79.50"></text></g><g><title>szone_size (2 samples, 0.17%)</title><rect x="92.3013%" y="53" width="0.1674%" height="15" fill="rgb(221,189,43)" fg:x="1103" fg:w="2"/><text x="92.5513%" y="63.50"></text></g><g><title>tiny_size (2 samples, 0.17%)</title><rect x="92.3013%" y="37" width="0.1674%" height="15" fill="rgb(207,36,27)" fg:x="1103" fg:w="2"/><text x="92.5513%" y="47.50"></text></g><g><title>_realloc (9 samples, 0.75%)</title><rect x="91.9665%" y="101" width="0.7531%" height="15" fill="rgb(217,90,24)" fg:x="1099" fg:w="9"/><text x="92.2165%" y="111.50"></text></g><g><title>szone_size (3 samples, 0.25%)</title><rect x="92.4686%" y="85" width="0.2510%" height="15" fill="rgb(224,66,35)" fg:x="1105" fg:w="3"/><text x="92.7186%" y="95.50"></text></g><g><title>tiny_size (3 samples, 0.25%)</title><rect x="92.4686%" y="69" width="0.2510%" height="15" fill="rgb(221,13,50)" fg:x="1105" fg:w="3"/><text x="92.7186%" y="79.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="92.8870%" y="85" width="0.0837%" height="15" fill="rgb(236,68,49)" fg:x="1110" fg:w="1"/><text x="93.1370%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (22 samples, 1.84%)</title><rect x="91.8828%" y="117" width="1.8410%" height="15" fill="rgb(229,146,28)" fg:x="1098" fg:w="22"/><text x="92.1328%" y="127.50">a..</text></g><g><title>szone_malloc_should_clear (12 samples, 1.00%)</title><rect x="92.7197%" y="101" width="1.0042%" height="15" fill="rgb(225,31,38)" fg:x="1108" fg:w="12"/><text x="92.9697%" y="111.50"></text></g><g><title>tiny_malloc_should_clear (9 samples, 0.75%)</title><rect x="92.9707%" y="85" width="0.7531%" height="15" fill="rgb(250,208,3)" fg:x="1111" fg:w="9"/><text x="93.2207%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.42%)</title><rect x="93.3054%" y="69" width="0.4184%" height="15" fill="rgb(246,54,23)" fg:x="1115" fg:w="5"/><text x="93.5554%" y="79.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.25%)</title><rect x="93.4728%" y="53" width="0.2510%" height="15" fill="rgb(243,76,11)" fg:x="1117" fg:w="3"/><text x="93.7228%" y="63.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (57 samples, 4.77%)</title><rect x="89.0377%" y="165" width="4.7699%" height="15" fill="rgb(245,21,50)" fg:x="1064" fg:w="57"/><text x="89.2877%" y="175.50">vexy_json_..</text></g><g><title>vexy_json_core::parser::unescape_string (27 samples, 2.26%)</title><rect x="91.5481%" y="149" width="2.2594%" height="15" fill="rgb(228,9,43)" fg:x="1094" fg:w="27"/><text x="91.7981%" y="159.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (25 samples, 2.09%)</title><rect x="91.7155%" y="133" width="2.0921%" height="15" fill="rgb(208,100,47)" fg:x="1096" fg:w="25"/><text x="91.9655%" y="143.50">a..</text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.7238%" y="117" width="0.0837%" height="15" fill="rgb(232,26,8)" fg:x="1120" fg:w="1"/><text x="93.9738%" y="127.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.08%)</title><rect x="93.8075%" y="165" width="0.0837%" height="15" fill="rgb(216,166,38)" fg:x="1121" fg:w="1"/><text x="94.0575%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="94.0586%" y="133" width="0.0837%" height="15" fill="rgb(251,202,51)" fg:x="1124" fg:w="1"/><text x="94.3086%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (5 samples, 0.42%)</title><rect x="93.8912%" y="165" width="0.4184%" height="15" fill="rgb(254,216,34)" fg:x="1122" fg:w="5"/><text x="94.1412%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.33%)</title><rect x="93.9749%" y="149" width="0.3347%" height="15" fill="rgb(251,32,27)" fg:x="1123" fg:w="4"/><text x="94.2249%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.17%)</title><rect x="94.1423%" y="133" width="0.1674%" height="15" fill="rgb(208,127,28)" fg:x="1125" fg:w="2"/><text x="94.3923%" y="143.50"></text></g><g><title>_malloc_zone_malloc (3 samples, 0.25%)</title><rect x="94.6444%" y="133" width="0.2510%" height="15" fill="rgb(224,137,22)" fg:x="1131" fg:w="3"/><text x="94.8944%" y="143.50"></text></g><g><title>szone_good_size (1 samples, 0.08%)</title><rect x="95.1464%" y="85" width="0.0837%" height="15" fill="rgb(254,70,32)" fg:x="1137" fg:w="1"/><text x="95.3964%" y="95.50"></text></g><g><title>_realloc (3 samples, 0.25%)</title><rect x="95.0628%" y="117" width="0.2510%" height="15" fill="rgb(229,75,37)" fg:x="1136" fg:w="3"/><text x="95.3128%" y="127.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.17%)</title><rect x="95.1464%" y="101" width="0.1674%" height="15" fill="rgb(252,64,23)" fg:x="1137" fg:w="2"/><text x="95.3964%" y="111.50"></text></g><g><title>szone_realloc (1 samples, 0.08%)</title><rect x="95.2301%" y="85" width="0.0837%" height="15" fill="rgb(232,162,48)" fg:x="1138" fg:w="1"/><text x="95.4801%" y="95.50"></text></g><g><title>tiny_try_realloc_in_place (1 samples, 0.08%)</title><rect x="95.2301%" y="69" width="0.0837%" height="15" fill="rgb(246,160,12)" fg:x="1138" fg:w="1"/><text x="95.4801%" y="79.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.25%)</title><rect x="95.3138%" y="101" width="0.2510%" height="15" fill="rgb(247,166,0)" fg:x="1139" fg:w="3"/><text x="95.5638%" y="111.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (165 samples, 13.81%)</title><rect x="82.7615%" y="181" width="13.8075%" height="15" fill="rgb(249,219,21)" fg:x="989" fg:w="165"/><text x="83.0115%" y="191.50">vexy_json_core::parser::P..</text></g><g><title>vexy_json_core::parser::unescape_string (27 samples, 2.26%)</title><rect x="94.3096%" y="165" width="2.2594%" height="15" fill="rgb(205,209,3)" fg:x="1127" fg:w="27"/><text x="94.5596%" y="175.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (23 samples, 1.92%)</title><rect x="94.6444%" y="149" width="1.9247%" height="15" fill="rgb(243,44,1)" fg:x="1131" fg:w="23"/><text x="94.8944%" y="159.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 1.67%)</title><rect x="94.8954%" y="133" width="1.6736%" height="15" fill="rgb(206,159,16)" fg:x="1134" fg:w="20"/><text x="95.1454%" y="143.50"></text></g><g><title>szone_malloc_should_clear (15 samples, 1.26%)</title><rect x="95.3138%" y="117" width="1.2552%" height="15" fill="rgb(244,77,30)" fg:x="1139" fg:w="15"/><text x="95.5638%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (12 samples, 1.00%)</title><rect x="95.5649%" y="101" width="1.0042%" height="15" fill="rgb(218,69,12)" fg:x="1142" fg:w="12"/><text x="95.8149%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="96.4017%" y="85" width="0.1674%" height="15" fill="rgb(212,87,7)" fg:x="1152" fg:w="2"/><text x="96.6517%" y="95.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="96.4854%" y="69" width="0.0837%" height="15" fill="rgb(245,114,25)" fg:x="1153" fg:w="1"/><text x="96.7354%" y="79.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (2 samples, 0.17%)</title><rect x="96.5690%" y="181" width="0.1674%" height="15" fill="rgb(210,61,42)" fg:x="1154" fg:w="2"/><text x="96.8190%" y="191.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="96.8201%" y="165" width="0.0837%" height="15" fill="rgb(211,52,33)" fg:x="1157" fg:w="1"/><text x="97.0701%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="96.8201%" y="149" width="0.0837%" height="15" fill="rgb(234,58,33)" fg:x="1157" fg:w="1"/><text x="97.0701%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (5 samples, 0.42%)</title><rect x="96.7364%" y="181" width="0.4184%" height="15" fill="rgb(220,115,36)" fg:x="1156" fg:w="5"/><text x="96.9864%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="96.9038%" y="165" width="0.2510%" height="15" fill="rgb(243,153,54)" fg:x="1158" fg:w="3"/><text x="97.1538%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="96.9038%" y="149" width="0.2510%" height="15" fill="rgb(251,47,18)" fg:x="1158" fg:w="3"/><text x="97.1538%" y="159.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.17%)</title><rect x="97.6569%" y="149" width="0.1674%" height="15" fill="rgb(242,102,42)" fg:x="1167" fg:w="2"/><text x="97.9069%" y="159.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.25%)</title><rect x="97.9916%" y="117" width="0.2510%" height="15" fill="rgb(234,31,38)" fg:x="1171" fg:w="3"/><text x="98.2416%" y="127.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (399 samples, 33.39%)</title><rect x="65.5230%" y="197" width="33.3891%" height="15" fill="rgb(221,117,51)" fg:x="783" fg:w="399"/><text x="65.7730%" y="207.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (21 samples, 1.76%)</title><rect x="97.1548%" y="181" width="1.7573%" height="15" fill="rgb(212,20,18)" fg:x="1161" fg:w="21"/><text x="97.4048%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (15 samples, 1.26%)</title><rect x="97.6569%" y="165" width="1.2552%" height="15" fill="rgb(245,133,36)" fg:x="1167" fg:w="15"/><text x="97.9069%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 1.09%)</title><rect x="97.8243%" y="149" width="1.0879%" height="15" fill="rgb(212,6,19)" fg:x="1169" fg:w="13"/><text x="98.0743%" y="159.50"></text></g><g><title>szone_malloc_should_clear (11 samples, 0.92%)</title><rect x="97.9916%" y="133" width="0.9205%" height="15" fill="rgb(218,1,36)" fg:x="1171" fg:w="11"/><text x="98.2416%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (8 samples, 0.67%)</title><rect x="98.2427%" y="117" width="0.6695%" height="15" fill="rgb(246,84,54)" fg:x="1174" fg:w="8"/><text x="98.4927%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.33%)</title><rect x="98.5774%" y="101" width="0.3347%" height="15" fill="rgb(242,110,6)" fg:x="1178" fg:w="4"/><text x="98.8274%" y="111.50"></text></g><g><title>__rustc::__rdl_alloc (2 samples, 0.17%)</title><rect x="99.1632%" y="165" width="0.1674%" height="15" fill="rgb(214,47,5)" fg:x="1185" fg:w="2"/><text x="99.4132%" y="175.50"></text></g><g><title>_malloc_zone_realloc (3 samples, 0.25%)</title><rect x="99.4142%" y="133" width="0.2510%" height="15" fill="rgb(218,159,25)" fg:x="1188" fg:w="3"/><text x="99.6642%" y="143.50"></text></g><g><title>szone_realloc (3 samples, 0.25%)</title><rect x="99.4142%" y="117" width="0.2510%" height="15" fill="rgb(215,211,28)" fg:x="1188" fg:w="3"/><text x="99.6642%" y="127.50"></text></g><g><title>szone_size (2 samples, 0.17%)</title><rect x="99.4979%" y="101" width="0.1674%" height="15" fill="rgb(238,59,32)" fg:x="1189" fg:w="2"/><text x="99.7479%" y="111.50"></text></g><g><title>tiny_size (2 samples, 0.17%)</title><rect x="99.4979%" y="85" width="0.1674%" height="15" fill="rgb(226,82,3)" fg:x="1189" fg:w="2"/><text x="99.7479%" y="95.50"></text></g><g><title>_realloc (5 samples, 0.42%)</title><rect x="99.3305%" y="149" width="0.4184%" height="15" fill="rgb(240,164,32)" fg:x="1187" fg:w="5"/><text x="99.5805%" y="159.50"></text></g><g><title>szone_size (1 samples, 0.08%)</title><rect x="99.6653%" y="133" width="0.0837%" height="15" fill="rgb(232,46,7)" fg:x="1191" fg:w="1"/><text x="99.9153%" y="143.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="99.7490%" y="133" width="0.0837%" height="15" fill="rgb(229,129,53)" fg:x="1192" fg:w="1"/><text x="99.9990%" y="143.50"></text></g><g><title>all (1,195 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(234,188,29)" fg:x="0" fg:w="1195"/><text x="0.2500%" y="367.50"></text></g><g><title>start (1,194 samples, 99.92%)</title><rect x="0.0837%" y="341" width="99.9163%" height="15" fill="rgb(246,141,4)" fg:x="1" fg:w="1194"/><text x="0.3337%" y="351.50">start</text></g><g><title>main (1,188 samples, 99.41%)</title><rect x="0.5858%" y="325" width="99.4142%" height="15" fill="rgb(229,23,39)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="335.50">main</text></g><g><title>std::rt::lang_start_internal (1,188 samples, 99.41%)</title><rect x="0.5858%" y="309" width="99.4142%" height="15" fill="rgb(206,12,3)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="319.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (1,188 samples, 99.41%)</title><rect x="0.5858%" y="293" width="99.4142%" height="15" fill="rgb(252,226,20)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="303.50">std::rt::lang_start::_{{closure}}</text></g><g><title>core::ops::function::FnOnce::call_once (1,188 samples, 99.41%)</title><rect x="0.5858%" y="277" width="99.4142%" height="15" fill="rgb(216,123,35)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="287.50">core::ops::function::FnOnce::call_once</text></g><g><title>profile_parser::main (1,188 samples, 99.41%)</title><rect x="0.5858%" y="261" width="99.4142%" height="15" fill="rgb(212,68,40)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="271.50">profile_parser::main</text></g><g><title>vexy_json_core::parser::parse (865 samples, 72.38%)</title><rect x="27.6151%" y="245" width="72.3849%" height="15" fill="rgb(254,125,32)" fg:x="330" fg:w="865"/><text x="27.8651%" y="255.50">vexy_json_core::parser::parse</text></g><g><title>vexy_json_core::parser::Parser::parse (865 samples, 72.38%)</title><rect x="27.6151%" y="229" width="72.3849%" height="15" fill="rgb(253,97,22)" fg:x="330" fg:w="865"/><text x="27.8651%" y="239.50">vexy_json_core::parser::Parser::parse</text></g><g><title>vexy_json_core::parser::Parser::parse_value (453 samples, 37.91%)</title><rect x="62.0921%" y="213" width="37.9079%" height="15" fill="rgb(241,101,14)" fg:x="742" fg:w="453"/><text x="62.3421%" y="223.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (13 samples, 1.09%)</title><rect x="98.9121%" y="197" width="1.0879%" height="15" fill="rgb(238,103,29)" fg:x="1182" fg:w="13"/><text x="99.1621%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (11 samples, 0.92%)</title><rect x="99.0795%" y="181" width="0.9205%" height="15" fill="rgb(233,195,47)" fg:x="1184" fg:w="11"/><text x="99.3295%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.67%)</title><rect x="99.3305%" y="165" width="0.6695%" height="15" fill="rgb(246,218,30)" fg:x="1187" fg:w="8"/><text x="99.5805%" y="175.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="99.7490%" y="149" width="0.2510%" height="15" fill="rgb(219,145,47)" fg:x="1192" fg:w="3"/><text x="99.9990%" y="159.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="99.8326%" y="133" width="0.1674%" height="15" fill="rgb(243,12,26)" fg:x="1193" fg:w="2"/><text x="100.0826%" y="143.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="99.9163%" y="117" width="0.0837%" height="15" fill="rgb(214,87,16)" fg:x="1194" fg:w="1"/><text x="100.1663%" y="127.50"></text></g></svg></svg>
--
crates/python/tests/test_typing.py-# Test basic functionality without importing numpy/pandas
crates/python/tests/test_typing.py-def test_basic_functionality():
crates/python/tests/test_typing.py-    """Test basic parsing functionality with type hints."""
crates/python/tests/test_typing.py:    import vexy_json
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test basic parsing
crates/python/tests/test_typing.py:    result = vexy_json.parse('{"key": "value"}')
crates/python/tests/test_typing.py-    assert result == {"key": "value"}
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test loads alias
crates/python/tests/test_typing.py:    result = vexy_json.loads('{"key": "value"}')
crates/python/tests/test_typing.py-    assert result == {"key": "value"}
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test validation
crates/python/tests/test_typing.py:    assert vexy_json.is_valid('{"valid": true}') is True
crates/python/tests/test_typing.py:    assert vexy_json.is_valid('invalid') is False
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test dumps
crates/python/tests/test_typing.py-    data = {"key": "value", "number": 42}
crates/python/tests/test_typing.py:    json_str = vexy_json.dumps(data)
crates/python/tests/test_typing.py-    assert "key" in json_str
crates/python/tests/test_typing.py-    assert "value" in json_str
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test pretty printing
crates/python/tests/test_typing.py:    pretty_str = vexy_json.dumps(data, indent=2)
crates/python/tests/test_typing.py-    assert "\n" in pretty_str
crates/python/tests/test_typing.py-    assert "  " in pretty_str
crates/python/tests/test_typing.py-
crates/python/tests/test_typing.py-
crates/python/tests/test_typing.py-def test_file_operations():
crates/python/tests/test_typing.py-    """Test file I/O operations with type hints."""
crates/python/tests/test_typing.py:    import vexy_json
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test with StringIO
crates/python/tests/test_typing.py-    json_data = '{"test": "data", "number": 123}'
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test load
crates/python/tests/test_typing.py-    fp = io.StringIO(json_data)
crates/python/tests/test_typing.py:    result = vexy_json.load(fp)
crates/python/tests/test_typing.py-    assert result == {"test": "data", "number": 123}
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test dump
crates/python/tests/test_typing.py-    output = io.StringIO()
crates/python/tests/test_typing.py:    vexy_json.dump({"key": "value"}, output)
crates/python/tests/test_typing.py-    output.seek(0)
crates/python/tests/test_typing.py-    dumped = output.read()
crates/python/tests/test_typing.py-    assert "key" in dumped
--
crates/python/tests/test_typing.py-
crates/python/tests/test_typing.py-def test_streaming_parser():
crates/python/tests/test_typing.py-    """Test streaming parser with type hints."""
crates/python/tests/test_typing.py:    import vexy_json
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test streaming parser creation
crates/python/tests/test_typing.py:    parser = vexy_json.StreamingParser()
crates/python/tests/test_typing.py-    assert parser is not None
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test context manager
crates/python/tests/test_typing.py:    with vexy_json.StreamingParser() as parser:
crates/python/tests/test_typing.py-        assert parser is not None
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test with file-like object
crates/python/tests/test_typing.py-    json_lines = '{"line": 1}\n{"line": 2}\n{"line": 3}\n'
crates/python/tests/test_typing.py-    fp = io.StringIO(json_lines)
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py:    with vexy_json.StreamingParser() as parser:
crates/python/tests/test_typing.py-        results = list(parser.parse_lines(fp))
crates/python/tests/test_typing.py-        assert len(results) == 3
crates/python/tests/test_typing.py-        assert results[0] == {"line": 1}
--
crates/python/tests/test_typing.py-
crates/python/tests/test_typing.py-def test_parse_with_options():
crates/python/tests/test_typing.py-    """Test parse_with_options with all parameter types."""
crates/python/tests/test_typing.py:    import vexy_json
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test with all parameters
crates/python/tests/test_typing.py:    result = vexy_json.parse_with_options(
crates/python/tests/test_typing.py-        'key: "value", // comment\n',
crates/python/tests/test_typing.py-        allow_comments=True,
crates/python/tests/test_typing.py-        allow_trailing_commas=True,
--
crates/python/tests/test_typing.py-@pytest.mark.skipif(sys.version_info < (3, 9), reason="requires Python 3.9+")
crates/python/tests/test_typing.py-def test_numpy_integration():
crates/python/tests/test_typing.py-    """Test NumPy integration if available."""
crates/python/tests/test_typing.py:    import vexy_json
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    try:
crates/python/tests/test_typing.py-        import numpy as np
crates/python/tests/test_typing.py-        
crates/python/tests/test_typing.py-        # Test loads_numpy
crates/python/tests/test_typing.py:        arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
crates/python/tests/test_typing.py-        assert isinstance(arr, np.ndarray)
crates/python/tests/test_typing.py-        assert arr.tolist() == [1, 2, 3, 4, 5]
crates/python/tests/test_typing.py-        
crates/python/tests/test_typing.py-        # Test loads_numpy_zerocopy
crates/python/tests/test_typing.py:        arr = vexy_json.loads_numpy_zerocopy('[1.0, 2.0, 3.0]')
crates/python/tests/test_typing.py-        assert isinstance(arr, np.ndarray)
crates/python/tests/test_typing.py-        assert arr.tolist() == [1.0, 2.0, 3.0]
crates/python/tests/test_typing.py-        
crates/python/tests/test_typing.py-        # Test with dtype specification
crates/python/tests/test_typing.py:        arr = vexy_json.loads_numpy('[1, 2, 3]', dtype='float32')
crates/python/tests/test_typing.py-        assert isinstance(arr, np.ndarray)
crates/python/tests/test_typing.py-        assert arr.dtype == np.float32
crates/python/tests/test_typing.py-        
--
crates/python/tests/test_typing.py-@pytest.mark.skipif(sys.version_info < (3, 9), reason="requires Python 3.9+")
crates/python/tests/test_typing.py-def test_pandas_integration():
crates/python/tests/test_typing.py-    """Test pandas integration if available."""
crates/python/tests/test_typing.py:    import vexy_json
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    try:
crates/python/tests/test_typing.py-        import pandas as pd
crates/python/tests/test_typing.py-        
crates/python/tests/test_typing.py-        # Test loads_dataframe
crates/python/tests/test_typing.py:        df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
crates/python/tests/test_typing.py-        assert isinstance(df, pd.DataFrame)
crates/python/tests/test_typing.py-        assert df.shape == (2, 2)
crates/python/tests/test_typing.py-        assert df.columns.tolist() == ["a", "b"]
--
crates/python/tests/test_typing.py-
crates/python/tests/test_typing.py-def test_error_handling():
crates/python/tests/test_typing.py-    """Test error handling with proper exception types."""
crates/python/tests/test_typing.py:    import vexy_json
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test ValueError for invalid JSON
crates/python/tests/test_typing.py-    with pytest.raises(ValueError, match="Parse error"):
crates/python/tests/test_typing.py:        vexy_json.parse('invalid json')
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test TypeError for non-serializable objects
crates/python/tests/test_typing.py-    with pytest.raises(TypeError):
crates/python/tests/test_typing.py:        vexy_json.dumps(object())
crates/python/tests/test_typing.py-
crates/python/tests/test_typing.py-
crates/python/tests/test_typing.py-def test_module_metadata():
crates/python/tests/test_typing.py-    """Test module metadata and version information."""
crates/python/tests/test_typing.py:    import vexy_json
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test version information
crates/python/tests/test_typing.py:    assert hasattr(vexy_json, '__version__')
crates/python/tests/test_typing.py:    assert isinstance(vexy_json.__version__, str)
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test author information
crates/python/tests/test_typing.py:    assert hasattr(vexy_json, '__author__')
crates/python/tests/test_typing.py:    assert isinstance(vexy_json.__author__, str)
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test description
crates/python/tests/test_typing.py:    assert hasattr(vexy_json, '__description__')
crates/python/tests/test_typing.py:    assert isinstance(vexy_json.__description__, str)
crates/python/tests/test_typing.py-
crates/python/tests/test_typing.py-
crates/python/tests/test_typing.py-def test_forgiving_features():
crates/python/tests/test_typing.py-    """Test all forgiving JSON features."""
crates/python/tests/test_typing.py:    import vexy_json
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test comments
crates/python/tests/test_typing.py:    result = vexy_json.parse('{"key": "value" /* comment */}')
crates/python/tests/test_typing.py-    assert result == {"key": "value"}
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test trailing commas
crates/python/tests/test_typing.py:    result = vexy_json.parse('{"key": "value",}')
crates/python/tests/test_typing.py-    assert result == {"key": "value"}
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test unquoted keys
crates/python/tests/test_typing.py:    result = vexy_json.parse('{key: "value"}')
crates/python/tests/test_typing.py-    assert result == {"key": "value"}
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test single quotes
crates/python/tests/test_typing.py:    result = vexy_json.parse("{'key': 'value'}")
crates/python/tests/test_typing.py-    assert result == {"key": "value"}
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test implicit top-level object
crates/python/tests/test_typing.py:    result = vexy_json.parse('key: "value"')
crates/python/tests/test_typing.py-    assert result == {"key": "value"}
crates/python/tests/test_typing.py-    
crates/python/tests/test_typing.py-    # Test implicit top-level array
crates/python/tests/test_typing.py:    result = vexy_json.parse('"a", "b", "c"')
crates/python/tests/test_typing.py-    assert result == ["a", "b", "c"]
--
crates/core/src/error/mod.rs-// this_file: src/error/mod.rs
crates/core/src/error/mod.rs-
crates/core/src/error/mod.rs://! Error handling module for vexy_json parser.
crates/core/src/error/mod.rs-//!
crates/core/src/error/mod.rs-//! This module provides comprehensive error handling capabilities including:
crates/core/src/error/mod.rs-//! - Structured error codes with unique identifiers
--
fuzz/fuzz_targets/unquoted_keys.rs-#![no_main]
fuzz/fuzz_targets/unquoted_keys.rs-
fuzz/fuzz_targets/unquoted_keys.rs-use libfuzzer_sys::fuzz_target;
fuzz/fuzz_targets/unquoted_keys.rs:use vexy_json::{parse_with_options, ParserOptions};
fuzz/fuzz_targets/unquoted_keys.rs-
fuzz/fuzz_targets/unquoted_keys.rs-fuzz_target!(|data: &[u8]| {
fuzz/fuzz_targets/unquoted_keys.rs-    if let Ok(s) = std::str::from_utf8(data) {
--
crates/core/examples/error_reporting.rs:use vexy_json_core::error::reporter::{full_error_report, plain_error_report, quick_error_report};
crates/core/examples/error_reporting.rs:use vexy_json_core::parse;
crates/core/examples/error_reporting.rs-
crates/core/examples/error_reporting.rs-fn main() {
crates/core/examples/error_reporting.rs-    // Example 1: Missing closing brace
--
fuzz/fuzz_targets/numbers.rs-#![no_main]
fuzz/fuzz_targets/numbers.rs-
fuzz/fuzz_targets/numbers.rs-use libfuzzer_sys::fuzz_target;
fuzz/fuzz_targets/numbers.rs:use vexy_json::{parse, ParserOptions};
fuzz/fuzz_targets/numbers.rs-
fuzz/fuzz_targets/numbers.rs-fuzz_target!(|data: &[u8]| {
fuzz/fuzz_targets/numbers.rs-    if let Ok(s) = std::str::from_utf8(data) {
--
fuzz/fuzz_targets/numbers.rs-                fast_repair: false,
fuzz/fuzz_targets/numbers.rs-                report_repairs: false,
fuzz/fuzz_targets/numbers.rs-            };
fuzz/fuzz_targets/numbers.rs:            let _ = vexy_json::parse_with_options(&number_input, strict_options);
fuzz/fuzz_targets/numbers.rs-        }
fuzz/fuzz_targets/numbers.rs-        
fuzz/fuzz_targets/numbers.rs-        // Test edge cases
--
fuzz/fuzz_targets/strings.rs-#![no_main]
fuzz/fuzz_targets/strings.rs-
fuzz/fuzz_targets/strings.rs-use libfuzzer_sys::fuzz_target;
fuzz/fuzz_targets/strings.rs:use vexy_json::{parse, ParserOptions};
fuzz/fuzz_targets/strings.rs-
fuzz/fuzz_targets/strings.rs-fuzz_target!(|data: &[u8]| {
fuzz/fuzz_targets/strings.rs-    if let Ok(s) = std::str::from_utf8(data) {
--
fuzz/fuzz_targets/strings.rs-                allow_unquoted_keys: true,
fuzz/fuzz_targets/strings.rs-                ..Default::default()
fuzz/fuzz_targets/strings.rs-            };
fuzz/fuzz_targets/strings.rs:            let _ = vexy_json::parse_with_options(&string_input, single_quote_options);
fuzz/fuzz_targets/strings.rs-        }
fuzz/fuzz_targets/strings.rs-        
fuzz/fuzz_targets/strings.rs-        // Test raw string parsing (edge case)
--
fuzz/fuzz_targets/comments.rs-#![no_main]
fuzz/fuzz_targets/comments.rs-
fuzz/fuzz_targets/comments.rs-use libfuzzer_sys::fuzz_target;
fuzz/fuzz_targets/comments.rs:use vexy_json::{parse, ParserOptions};
fuzz/fuzz_targets/comments.rs-
fuzz/fuzz_targets/comments.rs-fuzz_target!(|data: &[u8]| {
fuzz/fuzz_targets/comments.rs-    if let Ok(s) = std::str::from_utf8(data) {
--
fuzz/fuzz_targets/comments.rs-                allow_comments: true,
fuzz/fuzz_targets/comments.rs-                ..Default::default()
fuzz/fuzz_targets/comments.rs-            };
fuzz/fuzz_targets/comments.rs:            let _ = vexy_json::parse_with_options(&comment_input, comment_options);
fuzz/fuzz_targets/comments.rs-            
fuzz/fuzz_targets/comments.rs-            // Test with comments disabled (should fail for most)
fuzz/fuzz_targets/comments.rs-            let no_comment_options = ParserOptions {
fuzz/fuzz_targets/comments.rs-                allow_comments: false,
fuzz/fuzz_targets/comments.rs-                ..Default::default()
fuzz/fuzz_targets/comments.rs-            };
fuzz/fuzz_targets/comments.rs:            let _ = vexy_json::parse_with_options(&comment_input, no_comment_options);
fuzz/fuzz_targets/comments.rs-        }
fuzz/fuzz_targets/comments.rs-        
fuzz/fuzz_targets/comments.rs-        // Test nested comment edge cases
--
fuzz/fuzz_targets/streaming.rs-#![no_main]
fuzz/fuzz_targets/streaming.rs-
fuzz/fuzz_targets/streaming.rs-use libfuzzer_sys::fuzz_target;
fuzz/fuzz_targets/streaming.rs:use vexy_json_core::streaming::{parse_streaming, BufferedStreamingConfig};
fuzz/fuzz_targets/streaming.rs-use std::io::Cursor;
fuzz/fuzz_targets/streaming.rs-
fuzz/fuzz_targets/streaming.rs-fuzz_target!(|data: &[u8]| {
--
crates/test-utils/Cargo.toml-path = "src/lib.rs"
crates/test-utils/Cargo.toml-
crates/test-utils/Cargo.toml-
crates/test-utils/Cargo.toml:[dependencies.vexy_json-core]
crates/test-utils/Cargo.toml-path = "../core"
--
docs/assets/images/flamegraph.svg-function format_percent(n) {
docs/assets/images/flamegraph.svg-    return n.toFixed(4) + "%";
docs/assets/images/flamegraph.svg-}
docs/assets/images/flamegraph.svg:]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="756"><g><title>0x7ff8169164d4 (1 samples, 0.13%)</title><rect x="0.0000%" y="405" width="0.1323%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>0x7ff816933433 (1 samples, 0.13%)</title><rect x="0.0000%" y="389" width="0.1323%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>0x7ff816933eb9 (1 samples, 0.13%)</title><rect x="0.0000%" y="373" width="0.1323%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>0x7ff81693195c (1 samples, 0.13%)</title><rect x="0.0000%" y="357" width="0.1323%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>0x7ff816931a12 (1 samples, 0.13%)</title><rect x="0.0000%" y="341" width="0.1323%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>dyld3::kdebug_trace_dyld_image(unsigned int, char const*, unsigned char const (*) [16], fsobj_id, fsid, void const*, unsigned int) (1 samples, 0.13%)</title><rect x="0.1323%" y="373" width="0.1323%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.3823%" y="383.50"></text></g><g><title>__kdebug_trace64 (1 samples, 0.13%)</title><rect x="0.1323%" y="357" width="0.1323%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.3823%" y="367.50"></text></g><g><title>__malloc_init (1 samples, 0.13%)</title><rect x="0.2646%" y="213" width="0.1323%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.5146%" y="223.50"></text></g><g><title>create_scalable_szone (1 samples, 0.13%)</title><rect x="0.2646%" y="197" width="0.1323%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.5146%" y="207.50"></text></g><g><title>rack_init (1 samples, 0.13%)</title><rect x="0.2646%" y="181" width="0.1323%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.5146%" y="191.50"></text></g><g><title>mvm_allocate_pages_plat (1 samples, 0.13%)</title><rect x="0.2646%" y="165" width="0.1323%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.5146%" y="175.50"></text></g><g><title>__mprotect (1 samples, 0.13%)</title><rect x="0.2646%" y="149" width="0.1323%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.5146%" y="159.50"></text></g><g><title>_libxpc_initializer (1 samples, 0.13%)</title><rect x="0.3968%" y="213" width="0.1323%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="0.6468%" y="223.50"></text></g><g><title>_xpc_collect_images (1 samples, 0.13%)</title><rect x="0.3968%" y="197" width="0.1323%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.6468%" y="207.50"></text></g><g><title>xpc_bundle_copy_services (1 samples, 0.13%)</title><rect x="0.3968%" y="181" width="0.1323%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.6468%" y="191.50"></text></g><g><title>_xpc_bundle_resolve (1 samples, 0.13%)</title><rect x="0.3968%" y="165" width="0.1323%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="0.6468%" y="175.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.13%)</title><rect x="0.3968%" y="149" width="0.1323%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="0.6468%" y="159.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.13%)</title><rect x="0.3968%" y="133" width="0.1323%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="0.6468%" y="143.50"></text></g><g><title>___xpc_bundle_resolve_block_invoke (1 samples, 0.13%)</title><rect x="0.3968%" y="117" width="0.1323%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="0.6468%" y="127.50"></text></g><g><title>_xpc_bundle_resolve_sync (1 samples, 0.13%)</title><rect x="0.3968%" y="101" width="0.1323%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="0.6468%" y="111.50"></text></g><g><title>_xpc_asprintf (1 samples, 0.13%)</title><rect x="0.3968%" y="85" width="0.1323%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="0.6468%" y="95.50"></text></g><g><title>_vasprintf (1 samples, 0.13%)</title><rect x="0.3968%" y="69" width="0.1323%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="0.6468%" y="79.50"></text></g><g><title>__vfprintf (1 samples, 0.13%)</title><rect x="0.3968%" y="53" width="0.1323%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="0.6468%" y="63.50"></text></g><g><title>localeconv_l (1 samples, 0.13%)</title><rect x="0.3968%" y="37" width="0.1323%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="0.6468%" y="47.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (3 samples, 0.40%)</title><rect x="0.2646%" y="373" width="0.3968%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="3"/><text x="0.5146%" y="383.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (3 samples, 0.40%)</title><rect x="0.2646%" y="357" width="0.3968%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="3"/><text x="0.5146%" y="367.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (3 samples, 0.40%)</title><rect x="0.2646%" y="341" width="0.3968%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="3"/><text x="0.5146%" y="351.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (3 samples, 0.40%)</title><rect x="0.2646%" y="325" width="0.3968%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="3"/><text x="0.5146%" y="335.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (3 samples, 0.40%)</title><rect x="0.2646%" y="309" width="0.3968%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="3"/><text x="0.5146%" y="319.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (3 samples, 0.40%)</title><rect x="0.2646%" y="293" width="0.3968%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="3"/><text x="0.5146%" y="303.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (3 samples, 0.40%)</title><rect x="0.2646%" y="277" width="0.3968%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="3"/><text x="0.5146%" y="287.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (3 samples, 0.40%)</title><rect x="0.2646%" y="261" width="0.3968%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="3"/><text x="0.5146%" y="271.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (3 samples, 0.40%)</title><rect x="0.2646%" y="245" width="0.3968%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="3"/><text x="0.5146%" y="255.50"></text></g><g><title>libSystem_initializer (3 samples, 0.40%)</title><rect x="0.2646%" y="229" width="0.3968%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="3"/><text x="0.5146%" y="239.50"></text></g><g><title>libdispatch_init (1 samples, 0.13%)</title><rect x="0.5291%" y="213" width="0.1323%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="1"/><text x="0.7791%" y="223.50"></text></g><g><title>_os_object_init (1 samples, 0.13%)</title><rect x="0.5291%" y="197" width="0.1323%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="1"/><text x="0.7791%" y="207.50"></text></g><g><title>_objc_init (1 samples, 0.13%)</title><rect x="0.5291%" y="181" width="0.1323%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="1"/><text x="0.7791%" y="191.50"></text></g><g><title>objc::DenseMap&lt;DisguisedPtr&lt;objc_class&gt;, objc::category_list, objc::DenseMapValueInfo&lt;objc::category_list&gt;, objc::DenseMapInfo&lt;DisguisedPtr&lt;objc_class&gt;&gt;, objc::detail::DenseMapPair&lt;DisguisedPtr&lt;objc_class&gt;, objc::category_list&gt;&gt;::init(unsigned int) (1 samples, 0.13%)</title><rect x="0.5291%" y="165" width="0.1323%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="1"/><text x="0.7791%" y="175.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="0.5291%" y="149" width="0.1323%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1"/><text x="0.7791%" y="159.50"></text></g><g><title>small_malloc_should_clear (1 samples, 0.13%)</title><rect x="0.5291%" y="133" width="0.1323%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1"/><text x="0.7791%" y="143.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (1 samples, 0.13%)</title><rect x="0.6614%" y="373" width="0.1323%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="1"/><text x="0.9114%" y="383.50"></text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="357" width="0.1323%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="1"/><text x="0.9114%" y="367.50"></text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="341" width="0.1323%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1"/><text x="0.9114%" y="351.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="325" width="0.1323%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1"/><text x="0.9114%" y="335.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="309" width="0.1323%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1"/><text x="0.9114%" y="319.50"></text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="293" width="0.1323%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1"/><text x="0.9114%" y="303.50"></text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="277" width="0.1323%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="1"/><text x="0.9114%" y="287.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="261" width="0.1323%" height="15" fill="rgb(250,191,14)" fg:x="5" fg:w="1"/><text x="0.9114%" y="271.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="245" width="0.1323%" height="15" fill="rgb(239,60,40)" fg:x="5" fg:w="1"/><text x="0.9114%" y="255.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 0.13%)</title><rect x="0.6614%" y="229" width="0.1323%" height="15" fill="rgb(206,27,48)" fg:x="5" fg:w="1"/><text x="0.9114%" y="239.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (6 samples, 0.79%)</title><rect x="0.1323%" y="405" width="0.7937%" height="15" fill="rgb(225,35,8)" fg:x="1" fg:w="6"/><text x="0.3823%" y="415.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (6 samples, 0.79%)</title><rect x="0.1323%" y="389" width="0.7937%" height="15" fill="rgb(250,213,24)" fg:x="1" fg:w="6"/><text x="0.3823%" y="399.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="373" width="0.1323%" height="15" fill="rgb(247,123,22)" fg:x="6" fg:w="1"/><text x="1.0437%" y="383.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="357" width="0.1323%" height="15" fill="rgb(231,138,38)" fg:x="6" fg:w="1"/><text x="1.0437%" y="367.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="341" width="0.1323%" height="15" fill="rgb(231,145,46)" fg:x="6" fg:w="1"/><text x="1.0437%" y="351.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="325" width="0.1323%" height="15" fill="rgb(251,118,11)" fg:x="6" fg:w="1"/><text x="1.0437%" y="335.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="309" width="0.1323%" height="15" fill="rgb(217,147,25)" fg:x="6" fg:w="1"/><text x="1.0437%" y="319.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="293" width="0.1323%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="1"/><text x="1.0437%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="277" width="0.1323%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="1"/><text x="1.0437%" y="287.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="261" width="0.1323%" height="15" fill="rgb(227,1,9)" fg:x="6" fg:w="1"/><text x="1.0437%" y="271.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="245" width="0.1323%" height="15" fill="rgb(248,47,43)" fg:x="6" fg:w="1"/><text x="1.0437%" y="255.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="229" width="0.1323%" height="15" fill="rgb(221,10,30)" fg:x="6" fg:w="1"/><text x="1.0437%" y="239.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="213" width="0.1323%" height="15" fill="rgb(210,229,1)" fg:x="6" fg:w="1"/><text x="1.0437%" y="223.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="197" width="0.1323%" height="15" fill="rgb(222,148,37)" fg:x="6" fg:w="1"/><text x="1.0437%" y="207.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="181" width="0.1323%" height="15" fill="rgb(234,67,33)" fg:x="6" fg:w="1"/><text x="1.0437%" y="191.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="165" width="0.1323%" height="15" fill="rgb(247,98,35)" fg:x="6" fg:w="1"/><text x="1.0437%" y="175.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="149" width="0.1323%" height="15" fill="rgb(247,138,52)" fg:x="6" fg:w="1"/><text x="1.0437%" y="159.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="133" width="0.1323%" height="15" fill="rgb(213,79,30)" fg:x="6" fg:w="1"/><text x="1.0437%" y="143.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="117" width="0.1323%" height="15" fill="rgb(246,177,23)" fg:x="6" fg:w="1"/><text x="1.0437%" y="127.50"></text></g><g><title>dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&amp;, unsigned int, mach_o::LinkedDylibAttributes*) const (1 samples, 0.13%)</title><rect x="0.7937%" y="101" width="0.1323%" height="15" fill="rgb(230,62,27)" fg:x="6" fg:w="1"/><text x="1.0437%" y="111.50"></text></g><g><title>__fcntl (1 samples, 0.13%)</title><rect x="0.9259%" y="373" width="0.1323%" height="15" fill="rgb(216,154,8)" fg:x="7" fg:w="1"/><text x="1.1759%" y="383.50"></text></g><g><title>_free (1 samples, 0.13%)</title><rect x="1.0582%" y="325" width="0.1323%" height="15" fill="rgb(244,35,45)" fg:x="8" fg:w="1"/><text x="1.3082%" y="335.50"></text></g><g><title>_szone_free (2 samples, 0.26%)</title><rect x="1.3228%" y="309" width="0.2646%" height="15" fill="rgb(251,115,12)" fg:x="10" fg:w="2"/><text x="1.5728%" y="319.50"></text></g><g><title>_free (1 samples, 0.13%)</title><rect x="2.1164%" y="293" width="0.1323%" height="15" fill="rgb(240,54,50)" fg:x="16" fg:w="1"/><text x="2.3664%" y="303.50"></text></g><g><title>_szone_free (4 samples, 0.53%)</title><rect x="2.2487%" y="293" width="0.5291%" height="15" fill="rgb(233,84,52)" fg:x="17" fg:w="4"/><text x="2.4987%" y="303.50"></text></g><g><title>_free (3 samples, 0.40%)</title><rect x="3.5714%" y="277" width="0.3968%" height="15" fill="rgb(207,117,47)" fg:x="27" fg:w="3"/><text x="3.8214%" y="287.50"></text></g><g><title>_szone_free (1 samples, 0.13%)</title><rect x="3.9683%" y="277" width="0.1323%" height="15" fill="rgb(249,43,39)" fg:x="30" fg:w="1"/><text x="4.2183%" y="287.50"></text></g><g><title>DYLD-STUB$$_platform_memset (3 samples, 0.40%)</title><rect x="4.7619%" y="261" width="0.3968%" height="15" fill="rgb(209,38,44)" fg:x="36" fg:w="3"/><text x="5.0119%" y="271.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="5.1587%" y="261" width="0.1323%" height="15" fill="rgb(236,212,23)" fg:x="39" fg:w="1"/><text x="5.4087%" y="271.50"></text></g><g><title>_szone_free (5 samples, 0.66%)</title><rect x="5.2910%" y="261" width="0.6614%" height="15" fill="rgb(242,79,21)" fg:x="40" fg:w="5"/><text x="5.5410%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (1 samples, 0.13%)</title><rect x="5.9524%" y="261" width="0.1323%" height="15" fill="rgb(211,96,35)" fg:x="45" fg:w="1"/><text x="6.2024%" y="271.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="8.4656%" y="245" width="0.1323%" height="15" fill="rgb(253,215,40)" fg:x="64" fg:w="1"/><text x="8.7156%" y="255.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="8.5979%" y="245" width="0.1323%" height="15" fill="rgb(211,81,21)" fg:x="65" fg:w="1"/><text x="8.8479%" y="255.50"></text></g><g><title>get_tiny_previous_free_msize (3 samples, 0.40%)</title><rect x="8.7302%" y="245" width="0.3968%" height="15" fill="rgb(208,190,38)" fg:x="66" fg:w="3"/><text x="8.9802%" y="255.50"></text></g><g><title>tiny_free_list_add_ptr (5 samples, 0.66%)</title><rect x="11.1111%" y="229" width="0.6614%" height="15" fill="rgb(235,213,38)" fg:x="84" fg:w="5"/><text x="11.3611%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (61 samples, 8.07%)</title><rect x="4.1005%" y="277" width="8.0688%" height="15" fill="rgb(237,122,38)" fg:x="31" fg:w="61"/><text x="4.3505%" y="287.50">core::ptr::..</text></g><g><title>free_tiny (46 samples, 6.08%)</title><rect x="6.0847%" y="261" width="6.0847%" height="15" fill="rgb(244,218,35)" fg:x="46" fg:w="46"/><text x="6.3347%" y="271.50">free_tiny</text></g><g><title>tiny_free_no_lock (23 samples, 3.04%)</title><rect x="9.1270%" y="245" width="3.0423%" height="15" fill="rgb(240,68,47)" fg:x="69" fg:w="23"/><text x="9.3770%" y="255.50">tin..</text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.40%)</title><rect x="11.7725%" y="229" width="0.3968%" height="15" fill="rgb(210,16,53)" fg:x="89" fg:w="3"/><text x="12.0225%" y="239.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="14.2857%" y="261" width="0.1323%" height="15" fill="rgb(235,124,12)" fg:x="108" fg:w="1"/><text x="14.5357%" y="271.50"></text></g><g><title>tiny_free_list_add_ptr (10 samples, 1.32%)</title><rect x="16.9312%" y="245" width="1.3228%" height="15" fill="rgb(224,169,11)" fg:x="128" fg:w="10"/><text x="17.1812%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (123 samples, 16.27%)</title><rect x="2.7778%" y="293" width="16.2698%" height="15" fill="rgb(250,166,2)" fg:x="21" fg:w="123"/><text x="3.0278%" y="303.50">core::ptr::drop_in_place&lt;..</text></g><g><title>free_tiny (52 samples, 6.88%)</title><rect x="12.1693%" y="277" width="6.8783%" height="15" fill="rgb(242,216,29)" fg:x="92" fg:w="52"/><text x="12.4193%" y="287.50">free_tiny</text></g><g><title>tiny_free_no_lock (35 samples, 4.63%)</title><rect x="14.4180%" y="261" width="4.6296%" height="15" fill="rgb(230,116,27)" fg:x="109" fg:w="35"/><text x="14.6680%" y="271.50">tiny_..</text></g><g><title>tiny_free_list_remove_ptr (6 samples, 0.79%)</title><rect x="18.2540%" y="245" width="0.7937%" height="15" fill="rgb(228,99,48)" fg:x="138" fg:w="6"/><text x="18.5040%" y="255.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="20.2381%" y="277" width="0.1323%" height="15" fill="rgb(253,11,6)" fg:x="153" fg:w="1"/><text x="20.4881%" y="287.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.13%)</title><rect x="20.3704%" y="277" width="0.1323%" height="15" fill="rgb(247,143,39)" fg:x="154" fg:w="1"/><text x="20.6204%" y="287.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.53%)</title><rect x="22.0899%" y="261" width="0.5291%" height="15" fill="rgb(236,97,10)" fg:x="167" fg:w="4"/><text x="22.3399%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (168 samples, 22.22%)</title><rect x="1.5873%" y="309" width="22.2222%" height="15" fill="rgb(233,208,19)" fg:x="12" fg:w="168"/><text x="1.8373%" y="319.50">core::ptr::drop_in_place&lt;vexy_json_core..</text></g><g><title>free_tiny (36 samples, 4.76%)</title><rect x="19.0476%" y="293" width="4.7619%" height="15" fill="rgb(216,164,2)" fg:x="144" fg:w="36"/><text x="19.2976%" y="303.50">free_t..</text></g><g><title>tiny_free_no_lock (25 samples, 3.31%)</title><rect x="20.5026%" y="277" width="3.3069%" height="15" fill="rgb(220,129,5)" fg:x="155" fg:w="25"/><text x="20.7526%" y="287.50">tin..</text></g><g><title>tiny_free_list_remove_ptr (9 samples, 1.19%)</title><rect x="22.6190%" y="261" width="1.1905%" height="15" fill="rgb(242,17,10)" fg:x="171" fg:w="9"/><text x="22.8690%" y="271.50"></text></g><g><title>free (2 samples, 0.26%)</title><rect x="23.8095%" y="309" width="0.2646%" height="15" fill="rgb(242,107,0)" fg:x="180" fg:w="2"/><text x="24.0595%" y="319.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.26%)</title><rect x="25.1323%" y="277" width="0.2646%" height="15" fill="rgb(251,28,31)" fg:x="190" fg:w="2"/><text x="25.3823%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (186 samples, 24.60%)</title><rect x="1.1905%" y="325" width="24.6032%" height="15" fill="rgb(233,223,10)" fg:x="9" fg:w="186"/><text x="1.4405%" y="335.50">core::ptr::drop_in_place&lt;vexy_json_core::as..</text></g><g><title>free_tiny (13 samples, 1.72%)</title><rect x="24.0741%" y="309" width="1.7196%" height="15" fill="rgb(215,21,27)" fg:x="182" fg:w="13"/><text x="24.3241%" y="319.50"></text></g><g><title>tiny_free_no_lock (9 samples, 1.19%)</title><rect x="24.6032%" y="293" width="1.1905%" height="15" fill="rgb(232,23,21)" fg:x="186" fg:w="9"/><text x="24.8532%" y="303.50"></text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.40%)</title><rect x="25.3968%" y="277" width="0.3968%" height="15" fill="rgb(244,5,23)" fg:x="192" fg:w="3"/><text x="25.6468%" y="287.50"></text></g><g><title>free_tiny (1 samples, 0.13%)</title><rect x="25.7937%" y="325" width="0.1323%" height="15" fill="rgb(226,81,46)" fg:x="195" fg:w="1"/><text x="26.0437%" y="335.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.13%)</title><rect x="27.2487%" y="261" width="0.1323%" height="15" fill="rgb(247,70,30)" fg:x="206" fg:w="1"/><text x="27.4987%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="27.9101%" y="245" width="0.3968%" height="15" fill="rgb(212,68,19)" fg:x="211" fg:w="3"/><text x="28.1601%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.13%)</title><rect x="28.1746%" y="229" width="0.1323%" height="15" fill="rgb(240,187,13)" fg:x="213" fg:w="1"/><text x="28.4246%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="28.7037%" y="229" width="0.3968%" height="15" fill="rgb(223,113,26)" fg:x="217" fg:w="3"/><text x="28.9537%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.26%)</title><rect x="28.8360%" y="213" width="0.2646%" height="15" fill="rgb(206,192,2)" fg:x="218" fg:w="2"/><text x="29.0860%" y="223.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="29.2328%" y="213" width="0.1323%" height="15" fill="rgb(241,108,4)" fg:x="221" fg:w="1"/><text x="29.4828%" y="223.50"></text></g><g><title>free_tiny (6 samples, 0.79%)</title><rect x="29.1005%" y="229" width="0.7937%" height="15" fill="rgb(247,173,49)" fg:x="220" fg:w="6"/><text x="29.3505%" y="239.50"></text></g><g><title>tiny_free_no_lock (4 samples, 0.53%)</title><rect x="29.3651%" y="213" width="0.5291%" height="15" fill="rgb(224,114,35)" fg:x="222" fg:w="4"/><text x="29.6151%" y="223.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.13%)</title><rect x="29.7619%" y="197" width="0.1323%" height="15" fill="rgb(245,159,27)" fg:x="225" fg:w="1"/><text x="30.0119%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (22 samples, 2.91%)</title><rect x="27.3810%" y="261" width="2.9101%" height="15" fill="rgb(245,172,44)" fg:x="207" fg:w="22"/><text x="27.6310%" y="271.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 1.98%)</title><rect x="28.3069%" y="245" width="1.9841%" height="15" fill="rgb(236,23,11)" fg:x="214" fg:w="15"/><text x="28.5569%" y="255.50">h..</text></g><g><title>szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="29.8942%" y="229" width="0.3968%" height="15" fill="rgb(205,117,38)" fg:x="226" fg:w="3"/><text x="30.1442%" y="239.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="29.8942%" y="213" width="0.3968%" height="15" fill="rgb(237,72,25)" fg:x="226" fg:w="3"/><text x="30.1442%" y="223.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="30.1587%" y="197" width="0.1323%" height="15" fill="rgb(244,70,9)" fg:x="228" fg:w="1"/><text x="30.4087%" y="207.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="30.5556%" y="245" width="0.1323%" height="15" fill="rgb(217,125,39)" fg:x="231" fg:w="1"/><text x="30.8056%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.26%)</title><rect x="30.6878%" y="245" width="0.2646%" height="15" fill="rgb(235,36,10)" fg:x="232" fg:w="2"/><text x="30.9378%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (14 samples, 1.85%)</title><rect x="30.2910%" y="261" width="1.8519%" height="15" fill="rgb(251,123,47)" fg:x="229" fg:w="14"/><text x="30.5410%" y="271.50">z..</text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (9 samples, 1.19%)</title><rect x="30.9524%" y="245" width="1.1905%" height="15" fill="rgb(221,13,13)" fg:x="234" fg:w="9"/><text x="31.2024%" y="255.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.13%)</title><rect x="32.6720%" y="245" width="0.1323%" height="15" fill="rgb(238,131,9)" fg:x="247" fg:w="1"/><text x="32.9220%" y="255.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.13%)</title><rect x="33.4656%" y="229" width="0.1323%" height="15" fill="rgb(211,50,8)" fg:x="253" fg:w="1"/><text x="33.7156%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.13%)</title><rect x="33.5979%" y="229" width="0.1323%" height="15" fill="rgb(245,182,24)" fg:x="254" fg:w="1"/><text x="33.8479%" y="239.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (3 samples, 0.40%)</title><rect x="33.9947%" y="213" width="0.3968%" height="15" fill="rgb(242,14,37)" fg:x="257" fg:w="3"/><text x="34.2447%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.53%)</title><rect x="34.3915%" y="213" width="0.5291%" height="15" fill="rgb(246,228,12)" fg:x="260" fg:w="4"/><text x="34.6415%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.26%)</title><rect x="34.6561%" y="197" width="0.2646%" height="15" fill="rgb(213,55,15)" fg:x="262" fg:w="2"/><text x="34.9061%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="34.9206%" y="197" width="0.1323%" height="15" fill="rgb(209,9,3)" fg:x="264" fg:w="1"/><text x="35.1706%" y="207.50"></text></g><g><title>free_tiny (3 samples, 0.40%)</title><rect x="34.9206%" y="213" width="0.3968%" height="15" fill="rgb(230,59,30)" fg:x="264" fg:w="3"/><text x="35.1706%" y="223.50"></text></g><g><title>tiny_free_no_lock (2 samples, 0.26%)</title><rect x="35.0529%" y="197" width="0.2646%" height="15" fill="rgb(209,121,21)" fg:x="265" fg:w="2"/><text x="35.3029%" y="207.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.26%)</title><rect x="35.0529%" y="181" width="0.2646%" height="15" fill="rgb(220,109,13)" fg:x="265" fg:w="2"/><text x="35.3029%" y="191.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="35.3175%" y="197" width="0.1323%" height="15" fill="rgb(232,18,1)" fg:x="267" fg:w="1"/><text x="35.5675%" y="207.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.13%)</title><rect x="35.7143%" y="181" width="0.1323%" height="15" fill="rgb(215,41,42)" fg:x="270" fg:w="1"/><text x="35.9643%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 3.17%)</title><rect x="32.8042%" y="245" width="3.1746%" height="15" fill="rgb(224,123,36)" fg:x="248" fg:w="24"/><text x="33.0542%" y="255.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 2.25%)</title><rect x="33.7302%" y="229" width="2.2487%" height="15" fill="rgb(240,125,3)" fg:x="255" fg:w="17"/><text x="33.9802%" y="239.50">h..</text></g><g><title>szone_malloc_should_clear (5 samples, 0.66%)</title><rect x="35.3175%" y="213" width="0.6614%" height="15" fill="rgb(205,98,50)" fg:x="267" fg:w="5"/><text x="35.5675%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (4 samples, 0.53%)</title><rect x="35.4497%" y="197" width="0.5291%" height="15" fill="rgb(205,185,37)" fg:x="268" fg:w="4"/><text x="35.6997%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="35.8466%" y="181" width="0.1323%" height="15" fill="rgb(238,207,15)" fg:x="271" fg:w="1"/><text x="36.0966%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (4 samples, 0.53%)</title><rect x="36.7725%" y="229" width="0.5291%" height="15" fill="rgb(213,199,42)" fg:x="278" fg:w="4"/><text x="37.0225%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="37.3016%" y="229" width="0.1323%" height="15" fill="rgb(235,201,11)" fg:x="282" fg:w="1"/><text x="37.5516%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (14 samples, 1.85%)</title><rect x="35.9788%" y="245" width="1.8519%" height="15" fill="rgb(207,46,11)" fg:x="272" fg:w="14"/><text x="36.2288%" y="255.50">z..</text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (3 samples, 0.40%)</title><rect x="37.4339%" y="229" width="0.3968%" height="15" fill="rgb(241,35,35)" fg:x="283" fg:w="3"/><text x="37.6839%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.13%)</title><rect x="38.3598%" y="229" width="0.1323%" height="15" fill="rgb(243,32,47)" fg:x="290" fg:w="1"/><text x="38.6098%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.13%)</title><rect x="38.3598%" y="213" width="0.1323%" height="15" fill="rgb(247,202,23)" fg:x="290" fg:w="1"/><text x="38.6098%" y="223.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="38.3598%" y="197" width="0.1323%" height="15" fill="rgb(219,102,11)" fg:x="290" fg:w="1"/><text x="38.6098%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.13%)</title><rect x="38.3598%" y="181" width="0.1323%" height="15" fill="rgb(243,110,44)" fg:x="290" fg:w="1"/><text x="38.6098%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="38.3598%" y="165" width="0.1323%" height="15" fill="rgb(222,74,54)" fg:x="290" fg:w="1"/><text x="38.6098%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="38.6243%" y="213" width="0.1323%" height="15" fill="rgb(216,99,12)" fg:x="292" fg:w="1"/><text x="38.8743%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="38.7566%" y="213" width="0.1323%" height="15" fill="rgb(226,22,26)" fg:x="293" fg:w="1"/><text x="39.0066%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.53%)</title><rect x="38.4921%" y="229" width="0.5291%" height="15" fill="rgb(217,163,10)" fg:x="291" fg:w="4"/><text x="38.7421%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="38.8889%" y="213" width="0.1323%" height="15" fill="rgb(213,25,53)" fg:x="294" fg:w="1"/><text x="39.1389%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (17 samples, 2.25%)</title><rect x="37.8307%" y="245" width="2.2487%" height="15" fill="rgb(252,105,26)" fg:x="286" fg:w="17"/><text x="38.0807%" y="255.50">z..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (8 samples, 1.06%)</title><rect x="39.0212%" y="229" width="1.0582%" height="15" fill="rgb(220,39,43)" fg:x="295" fg:w="8"/><text x="39.2712%" y="239.50"></text></g><g><title>vexy_json_core::parser::unescape_string (8 samples, 1.06%)</title><rect x="39.0212%" y="213" width="1.0582%" height="15" fill="rgb(229,68,48)" fg:x="295" fg:w="8"/><text x="39.2712%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.79%)</title><rect x="39.2857%" y="197" width="0.7937%" height="15" fill="rgb(252,8,32)" fg:x="297" fg:w="6"/><text x="39.5357%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.79%)</title><rect x="39.2857%" y="181" width="0.7937%" height="15" fill="rgb(223,20,43)" fg:x="297" fg:w="6"/><text x="39.5357%" y="191.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.79%)</title><rect x="39.2857%" y="165" width="0.7937%" height="15" fill="rgb(229,81,49)" fg:x="297" fg:w="6"/><text x="39.5357%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.66%)</title><rect x="39.4180%" y="149" width="0.6614%" height="15" fill="rgb(236,28,36)" fg:x="298" fg:w="5"/><text x="39.6680%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.53%)</title><rect x="39.5503%" y="133" width="0.5291%" height="15" fill="rgb(249,185,26)" fg:x="299" fg:w="4"/><text x="39.8003%" y="143.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="39.9471%" y="117" width="0.1323%" height="15" fill="rgb(249,174,33)" fg:x="302" fg:w="1"/><text x="40.1971%" y="127.50"></text></g><g><title>szone_good_size (1 samples, 0.13%)</title><rect x="41.2698%" y="149" width="0.1323%" height="15" fill="rgb(233,201,37)" fg:x="312" fg:w="1"/><text x="41.5198%" y="159.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="41.4021%" y="133" width="0.1323%" height="15" fill="rgb(221,78,26)" fg:x="313" fg:w="1"/><text x="41.6521%" y="143.50"></text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="41.5344%" y="133" width="0.1323%" height="15" fill="rgb(250,127,30)" fg:x="314" fg:w="1"/><text x="41.7844%" y="143.50"></text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="41.5344%" y="117" width="0.1323%" height="15" fill="rgb(230,49,44)" fg:x="314" fg:w="1"/><text x="41.7844%" y="127.50"></text></g><g><title>_malloc_zone_realloc (5 samples, 0.66%)</title><rect x="41.2698%" y="165" width="0.6614%" height="15" fill="rgb(229,67,23)" fg:x="312" fg:w="5"/><text x="41.5198%" y="175.50"></text></g><g><title>szone_realloc (4 samples, 0.53%)</title><rect x="41.4021%" y="149" width="0.5291%" height="15" fill="rgb(249,83,47)" fg:x="313" fg:w="4"/><text x="41.6521%" y="159.50"></text></g><g><title>tiny_try_realloc_in_place (2 samples, 0.26%)</title><rect x="41.6667%" y="133" width="0.2646%" height="15" fill="rgb(215,43,3)" fg:x="315" fg:w="2"/><text x="41.9167%" y="143.50"></text></g><g><title>_realloc (10 samples, 1.32%)</title><rect x="41.0053%" y="181" width="1.3228%" height="15" fill="rgb(238,154,13)" fg:x="310" fg:w="10"/><text x="41.2553%" y="191.50"></text></g><g><title>szone_size (3 samples, 0.40%)</title><rect x="41.9312%" y="165" width="0.3968%" height="15" fill="rgb(219,56,2)" fg:x="317" fg:w="3"/><text x="42.1812%" y="175.50"></text></g><g><title>tiny_size (3 samples, 0.40%)</title><rect x="41.9312%" y="149" width="0.3968%" height="15" fill="rgb(233,0,4)" fg:x="317" fg:w="3"/><text x="42.1812%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (25 samples, 3.31%)</title><rect x="40.0794%" y="245" width="3.3069%" height="15" fill="rgb(235,30,7)" fg:x="303" fg:w="25"/><text x="40.3294%" y="255.50">zzs..</text></g><g><title>vexy_json_core::parser::unescape_string (24 samples, 3.17%)</title><rect x="40.2116%" y="229" width="3.1746%" height="15" fill="rgb(250,79,13)" fg:x="304" fg:w="24"/><text x="40.4616%" y="239.50">zzs..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 2.65%)</title><rect x="40.7407%" y="213" width="2.6455%" height="15" fill="rgb(211,146,34)" fg:x="308" fg:w="20"/><text x="40.9907%" y="223.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 2.38%)</title><rect x="41.0053%" y="197" width="2.3810%" height="15" fill="rgb(228,22,38)" fg:x="310" fg:w="18"/><text x="41.2553%" y="207.50">al..</text></g><g><title>szone_malloc_should_clear (8 samples, 1.06%)</title><rect x="42.3280%" y="181" width="1.0582%" height="15" fill="rgb(235,168,5)" fg:x="320" fg:w="8"/><text x="42.5780%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (8 samples, 1.06%)</title><rect x="42.3280%" y="165" width="1.0582%" height="15" fill="rgb(221,155,16)" fg:x="320" fg:w="8"/><text x="42.5780%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.53%)</title><rect x="42.8571%" y="149" width="0.5291%" height="15" fill="rgb(215,215,53)" fg:x="324" fg:w="4"/><text x="43.1071%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.13%)</title><rect x="43.3862%" y="245" width="0.1323%" height="15" fill="rgb(223,4,10)" fg:x="328" fg:w="1"/><text x="43.6362%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (3 samples, 0.40%)</title><rect x="43.5185%" y="213" width="0.3968%" height="15" fill="rgb(234,103,6)" fg:x="329" fg:w="3"/><text x="43.7685%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (4 samples, 0.53%)</title><rect x="43.5185%" y="245" width="0.5291%" height="15" fill="rgb(227,97,0)" fg:x="329" fg:w="4"/><text x="43.7685%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.53%)</title><rect x="43.5185%" y="229" width="0.5291%" height="15" fill="rgb(234,150,53)" fg:x="329" fg:w="4"/><text x="43.7685%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="43.9153%" y="213" width="0.1323%" height="15" fill="rgb(228,201,54)" fg:x="332" fg:w="1"/><text x="44.1653%" y="223.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.13%)</title><rect x="51.0582%" y="213" width="0.1323%" height="15" fill="rgb(222,22,37)" fg:x="386" fg:w="1"/><text x="51.3082%" y="223.50"></text></g><g><title>_realloc (1 samples, 0.13%)</title><rect x="51.1905%" y="213" width="0.1323%" height="15" fill="rgb(237,53,32)" fg:x="387" fg:w="1"/><text x="51.4405%" y="223.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.13%)</title><rect x="51.5873%" y="197" width="0.1323%" height="15" fill="rgb(233,25,53)" fg:x="390" fg:w="1"/><text x="51.8373%" y="207.50"></text></g><g><title>szone_good_size (1 samples, 0.13%)</title><rect x="52.5132%" y="165" width="0.1323%" height="15" fill="rgb(210,40,34)" fg:x="397" fg:w="1"/><text x="52.7632%" y="175.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="52.9101%" y="149" width="0.1323%" height="15" fill="rgb(241,220,44)" fg:x="400" fg:w="1"/><text x="53.1601%" y="159.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="53.0423%" y="149" width="0.1323%" height="15" fill="rgb(235,28,35)" fg:x="401" fg:w="1"/><text x="53.2923%" y="159.50"></text></g><g><title>szone_size (11 samples, 1.46%)</title><rect x="53.1746%" y="149" width="1.4550%" height="15" fill="rgb(210,56,17)" fg:x="402" fg:w="11"/><text x="53.4246%" y="159.50"></text></g><g><title>tiny_size (11 samples, 1.46%)</title><rect x="53.1746%" y="133" width="1.4550%" height="15" fill="rgb(224,130,29)" fg:x="402" fg:w="11"/><text x="53.4246%" y="143.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.26%)</title><rect x="55.8201%" y="133" width="0.2646%" height="15" fill="rgb(235,212,8)" fg:x="422" fg:w="2"/><text x="56.0701%" y="143.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.26%)</title><rect x="56.0847%" y="133" width="0.2646%" height="15" fill="rgb(223,33,50)" fg:x="424" fg:w="2"/><text x="56.3347%" y="143.50"></text></g><g><title>_malloc_zone_realloc (34 samples, 4.50%)</title><rect x="52.2487%" y="181" width="4.4974%" height="15" fill="rgb(219,149,13)" fg:x="395" fg:w="34"/><text x="52.4987%" y="191.50">_mall..</text></g><g><title>szone_realloc (31 samples, 4.10%)</title><rect x="52.6455%" y="165" width="4.1005%" height="15" fill="rgb(250,156,29)" fg:x="398" fg:w="31"/><text x="52.8955%" y="175.50">szon..</text></g><g><title>tiny_try_realloc_in_place (16 samples, 2.12%)</title><rect x="54.6296%" y="149" width="2.1164%" height="15" fill="rgb(216,193,19)" fg:x="413" fg:w="16"/><text x="54.8796%" y="159.50">t..</text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.40%)</title><rect x="56.3492%" y="133" width="0.3968%" height="15" fill="rgb(216,135,14)" fg:x="426" fg:w="3"/><text x="56.5992%" y="143.50"></text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="56.7460%" y="181" width="0.1323%" height="15" fill="rgb(241,47,5)" fg:x="429" fg:w="1"/><text x="56.9960%" y="191.50"></text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="56.7460%" y="165" width="0.1323%" height="15" fill="rgb(233,42,35)" fg:x="429" fg:w="1"/><text x="56.9960%" y="175.50"></text></g><g><title>_realloc (40 samples, 5.29%)</title><rect x="51.7196%" y="197" width="5.2910%" height="15" fill="rgb(231,13,6)" fg:x="391" fg:w="40"/><text x="51.9696%" y="207.50">_reall..</text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="56.8783%" y="181" width="0.1323%" height="15" fill="rgb(207,181,40)" fg:x="430" fg:w="1"/><text x="57.1283%" y="191.50"></text></g><g><title>rack_get_thread_index (2 samples, 0.26%)</title><rect x="57.0106%" y="181" width="0.2646%" height="15" fill="rgb(254,173,49)" fg:x="431" fg:w="2"/><text x="57.2606%" y="191.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.13%)</title><rect x="57.2751%" y="181" width="0.1323%" height="15" fill="rgb(221,1,38)" fg:x="433" fg:w="1"/><text x="57.5251%" y="191.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="58.3333%" y="165" width="0.1323%" height="15" fill="rgb(206,124,46)" fg:x="441" fg:w="1"/><text x="58.5833%" y="175.50"></text></g><g><title>szone_malloc_should_clear (16 samples, 2.12%)</title><rect x="57.0106%" y="197" width="2.1164%" height="15" fill="rgb(249,21,11)" fg:x="431" fg:w="16"/><text x="57.2606%" y="207.50">s..</text></g><g><title>tiny_malloc_should_clear (13 samples, 1.72%)</title><rect x="57.4074%" y="181" width="1.7196%" height="15" fill="rgb(222,201,40)" fg:x="434" fg:w="13"/><text x="57.6574%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.66%)</title><rect x="58.4656%" y="165" width="0.6614%" height="15" fill="rgb(235,61,29)" fg:x="442" fg:w="5"/><text x="58.7156%" y="175.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.26%)</title><rect x="58.8624%" y="149" width="0.2646%" height="15" fill="rgb(219,207,3)" fg:x="445" fg:w="2"/><text x="59.1124%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (205 samples, 27.12%)</title><rect x="32.1429%" y="261" width="27.1164%" height="15" fill="rgb(222,56,46)" fg:x="243" fg:w="205"/><text x="32.3929%" y="271.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (115 samples, 15.21%)</title><rect x="44.0476%" y="245" width="15.2116%" height="15" fill="rgb(239,76,54)" fg:x="333" fg:w="115"/><text x="44.2976%" y="255.50">vexy_json_core::parser::une..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (64 samples, 8.47%)</title><rect x="50.7937%" y="229" width="8.4656%" height="15" fill="rgb(231,124,27)" fg:x="384" fg:w="64"/><text x="51.0437%" y="239.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::finish_grow (60 samples, 7.94%)</title><rect x="51.3228%" y="213" width="7.9365%" height="15" fill="rgb(249,195,6)" fg:x="388" fg:w="60"/><text x="51.5728%" y="223.50">alloc::raw_..</text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="59.1270%" y="197" width="0.1323%" height="15" fill="rgb(237,174,47)" fg:x="447" fg:w="1"/><text x="59.3770%" y="207.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.40%)</title><rect x="59.7884%" y="229" width="0.3968%" height="15" fill="rgb(206,201,31)" fg:x="452" fg:w="3"/><text x="60.0384%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (8 samples, 1.06%)</title><rect x="59.2593%" y="261" width="1.0582%" height="15" fill="rgb(231,57,52)" fg:x="448" fg:w="8"/><text x="59.5093%" y="271.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (5 samples, 0.66%)</title><rect x="59.6561%" y="245" width="0.6614%" height="15" fill="rgb(248,177,22)" fg:x="451" fg:w="5"/><text x="59.9061%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="60.1852%" y="229" width="0.1323%" height="15" fill="rgb(215,211,37)" fg:x="455" fg:w="1"/><text x="60.4352%" y="239.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="60.8466%" y="229" width="0.1323%" height="15" fill="rgb(241,128,51)" fg:x="460" fg:w="1"/><text x="61.0966%" y="239.50"></text></g><g><title>szone_good_size (1 samples, 0.13%)</title><rect x="60.9788%" y="181" width="0.1323%" height="15" fill="rgb(227,165,31)" fg:x="461" fg:w="1"/><text x="61.2288%" y="191.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.26%)</title><rect x="60.9788%" y="197" width="0.2646%" height="15" fill="rgb(228,167,24)" fg:x="461" fg:w="2"/><text x="61.2288%" y="207.50"></text></g><g><title>szone_realloc (1 samples, 0.13%)</title><rect x="61.1111%" y="181" width="0.1323%" height="15" fill="rgb(228,143,12)" fg:x="462" fg:w="1"/><text x="61.3611%" y="191.50"></text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="61.1111%" y="165" width="0.1323%" height="15" fill="rgb(249,149,8)" fg:x="462" fg:w="1"/><text x="61.3611%" y="175.50"></text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="61.1111%" y="149" width="0.1323%" height="15" fill="rgb(243,35,44)" fg:x="462" fg:w="1"/><text x="61.3611%" y="159.50"></text></g><g><title>_realloc (3 samples, 0.40%)</title><rect x="60.9788%" y="213" width="0.3968%" height="15" fill="rgb(246,89,9)" fg:x="461" fg:w="3"/><text x="61.2288%" y="223.50"></text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="61.2434%" y="197" width="0.1323%" height="15" fill="rgb(233,213,13)" fg:x="463" fg:w="1"/><text x="61.4934%" y="207.50"></text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="61.2434%" y="181" width="0.1323%" height="15" fill="rgb(233,141,41)" fg:x="463" fg:w="1"/><text x="61.4934%" y="191.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.13%)</title><rect x="61.6402%" y="181" width="0.1323%" height="15" fill="rgb(239,167,4)" fg:x="466" fg:w="1"/><text x="61.8902%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (271 samples, 35.85%)</title><rect x="26.0582%" y="293" width="35.8466%" height="15" fill="rgb(209,217,16)" fg:x="197" fg:w="271"/><text x="26.3082%" y="303.50">vexy_json_core::parser::Parser::parse_array</text></g><g><title>vexy_json_core::parser::Parser::parse_value (271 samples, 35.85%)</title><rect x="26.0582%" y="277" width="35.8466%" height="15" fill="rgb(219,88,35)" fg:x="197" fg:w="271"/><text x="26.3082%" y="287.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (12 samples, 1.59%)</title><rect x="60.3175%" y="261" width="1.5873%" height="15" fill="rgb(220,193,23)" fg:x="456" fg:w="12"/><text x="60.5675%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8 samples, 1.06%)</title><rect x="60.8466%" y="245" width="1.0582%" height="15" fill="rgb(230,90,52)" fg:x="460" fg:w="8"/><text x="61.0966%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.93%)</title><rect x="60.9788%" y="229" width="0.9259%" height="15" fill="rgb(252,106,19)" fg:x="461" fg:w="7"/><text x="61.2288%" y="239.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.53%)</title><rect x="61.3757%" y="213" width="0.5291%" height="15" fill="rgb(206,74,20)" fg:x="464" fg:w="4"/><text x="61.6257%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (4 samples, 0.53%)</title><rect x="61.3757%" y="197" width="0.5291%" height="15" fill="rgb(230,138,44)" fg:x="464" fg:w="4"/><text x="61.6257%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="61.7725%" y="181" width="0.1323%" height="15" fill="rgb(235,182,43)" fg:x="467" fg:w="1"/><text x="62.0225%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.13%)</title><rect x="61.7725%" y="165" width="0.1323%" height="15" fill="rgb(242,16,51)" fg:x="467" fg:w="1"/><text x="62.0225%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.13%)</title><rect x="62.4339%" y="261" width="0.1323%" height="15" fill="rgb(248,9,4)" fg:x="472" fg:w="1"/><text x="62.6839%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="62.6984%" y="245" width="0.3968%" height="15" fill="rgb(210,31,22)" fg:x="474" fg:w="3"/><text x="62.9484%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.40%)</title><rect x="62.6984%" y="229" width="0.3968%" height="15" fill="rgb(239,54,39)" fg:x="474" fg:w="3"/><text x="62.9484%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 1.06%)</title><rect x="62.1693%" y="277" width="1.0582%" height="15" fill="rgb(230,99,41)" fg:x="470" fg:w="8"/><text x="62.4193%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.66%)</title><rect x="62.5661%" y="261" width="0.6614%" height="15" fill="rgb(253,106,12)" fg:x="473" fg:w="5"/><text x="62.8161%" y="271.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="63.0952%" y="245" width="0.1323%" height="15" fill="rgb(213,46,41)" fg:x="477" fg:w="1"/><text x="63.3452%" y="255.50"></text></g><g><title>small_malloc_should_clear (1 samples, 0.13%)</title><rect x="63.0952%" y="229" width="0.1323%" height="15" fill="rgb(215,133,35)" fg:x="477" fg:w="1"/><text x="63.3452%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.53%)</title><rect x="63.2275%" y="277" width="0.5291%" height="15" fill="rgb(213,28,5)" fg:x="478" fg:w="4"/><text x="63.4775%" y="287.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.26%)</title><rect x="63.4921%" y="261" width="0.2646%" height="15" fill="rgb(215,77,49)" fg:x="480" fg:w="2"/><text x="63.7421%" y="271.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (1 samples, 0.13%)</title><rect x="63.7566%" y="277" width="0.1323%" height="15" fill="rgb(248,100,22)" fg:x="482" fg:w="1"/><text x="64.0066%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (1 samples, 0.13%)</title><rect x="64.0212%" y="261" width="0.1323%" height="15" fill="rgb(208,67,9)" fg:x="484" fg:w="1"/><text x="64.2712%" y="271.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="64.0212%" y="245" width="0.1323%" height="15" fill="rgb(219,133,21)" fg:x="484" fg:w="1"/><text x="64.2712%" y="255.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.26%)</title><rect x="64.1534%" y="261" width="0.2646%" height="15" fill="rgb(246,46,29)" fg:x="485" fg:w="2"/><text x="64.4034%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.53%)</title><rect x="64.6825%" y="245" width="0.5291%" height="15" fill="rgb(246,185,52)" fg:x="489" fg:w="4"/><text x="64.9325%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.26%)</title><rect x="64.9471%" y="229" width="0.2646%" height="15" fill="rgb(252,136,11)" fg:x="491" fg:w="2"/><text x="65.1971%" y="239.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="65.3439%" y="213" width="0.1323%" height="15" fill="rgb(219,138,53)" fg:x="494" fg:w="1"/><text x="65.5939%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 1.46%)</title><rect x="64.4180%" y="261" width="1.4550%" height="15" fill="rgb(211,51,23)" fg:x="487" fg:w="11"/><text x="64.6680%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.66%)</title><rect x="65.2116%" y="245" width="0.6614%" height="15" fill="rgb(247,221,28)" fg:x="493" fg:w="5"/><text x="65.4616%" y="255.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.53%)</title><rect x="65.3439%" y="229" width="0.5291%" height="15" fill="rgb(251,222,45)" fg:x="494" fg:w="4"/><text x="65.5939%" y="239.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="65.4762%" y="213" width="0.3968%" height="15" fill="rgb(217,162,53)" fg:x="495" fg:w="3"/><text x="65.7262%" y="223.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.26%)</title><rect x="65.6085%" y="197" width="0.2646%" height="15" fill="rgb(229,93,14)" fg:x="496" fg:w="2"/><text x="65.8585%" y="207.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="65.7407%" y="181" width="0.1323%" height="15" fill="rgb(209,67,49)" fg:x="497" fg:w="1"/><text x="65.9907%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="66.1376%" y="245" width="0.1323%" height="15" fill="rgb(213,87,29)" fg:x="500" fg:w="1"/><text x="66.3876%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.53%)</title><rect x="65.8730%" y="261" width="0.5291%" height="15" fill="rgb(205,151,52)" fg:x="498" fg:w="4"/><text x="66.1230%" y="271.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="66.2698%" y="245" width="0.1323%" height="15" fill="rgb(253,215,39)" fg:x="501" fg:w="1"/><text x="66.5198%" y="255.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="66.7989%" y="197" width="0.1323%" height="15" fill="rgb(221,220,41)" fg:x="505" fg:w="1"/><text x="67.0489%" y="207.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="67.0635%" y="181" width="0.1323%" height="15" fill="rgb(218,133,21)" fg:x="507" fg:w="1"/><text x="67.3135%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.66%)</title><rect x="66.6667%" y="245" width="0.6614%" height="15" fill="rgb(221,193,43)" fg:x="504" fg:w="5"/><text x="66.9167%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.66%)</title><rect x="66.6667%" y="229" width="0.6614%" height="15" fill="rgb(240,128,52)" fg:x="504" fg:w="5"/><text x="66.9167%" y="239.50"></text></g><g><title>szone_malloc_should_clear (5 samples, 0.66%)</title><rect x="66.6667%" y="213" width="0.6614%" height="15" fill="rgb(253,114,12)" fg:x="504" fg:w="5"/><text x="66.9167%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="66.9312%" y="197" width="0.3968%" height="15" fill="rgb(215,223,47)" fg:x="506" fg:w="3"/><text x="67.1812%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="67.1958%" y="181" width="0.1323%" height="15" fill="rgb(248,225,23)" fg:x="508" fg:w="1"/><text x="67.4458%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (4 samples, 0.53%)</title><rect x="67.5926%" y="229" width="0.5291%" height="15" fill="rgb(250,108,0)" fg:x="511" fg:w="4"/><text x="67.8426%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (8 samples, 1.06%)</title><rect x="67.3280%" y="245" width="1.0582%" height="15" fill="rgb(228,208,7)" fg:x="509" fg:w="8"/><text x="67.5780%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.26%)</title><rect x="68.1217%" y="229" width="0.2646%" height="15" fill="rgb(244,45,10)" fg:x="515" fg:w="2"/><text x="68.3717%" y="239.50"></text></g><g><title>__rustc::__rust_dealloc (1 samples, 0.13%)</title><rect x="68.9153%" y="229" width="0.1323%" height="15" fill="rgb(207,125,25)" fg:x="521" fg:w="1"/><text x="69.1653%" y="239.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.13%)</title><rect x="69.0476%" y="229" width="0.1323%" height="15" fill="rgb(210,195,18)" fg:x="522" fg:w="1"/><text x="69.2976%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.93%)</title><rect x="69.8413%" y="213" width="0.9259%" height="15" fill="rgb(249,80,12)" fg:x="528" fg:w="7"/><text x="70.0913%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.13%)</title><rect x="70.6349%" y="197" width="0.1323%" height="15" fill="rgb(221,65,9)" fg:x="534" fg:w="1"/><text x="70.8849%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17 samples, 2.25%)</title><rect x="69.1799%" y="229" width="2.2487%" height="15" fill="rgb(235,49,36)" fg:x="523" fg:w="17"/><text x="69.4299%" y="239.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.66%)</title><rect x="70.7672%" y="213" width="0.6614%" height="15" fill="rgb(225,32,20)" fg:x="535" fg:w="5"/><text x="71.0172%" y="223.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="71.0317%" y="197" width="0.3968%" height="15" fill="rgb(215,141,46)" fg:x="537" fg:w="3"/><text x="71.2817%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="71.0317%" y="181" width="0.3968%" height="15" fill="rgb(250,160,47)" fg:x="537" fg:w="3"/><text x="71.2817%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="71.2963%" y="165" width="0.1323%" height="15" fill="rgb(216,222,40)" fg:x="539" fg:w="1"/><text x="71.5463%" y="175.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="71.4286%" y="229" width="0.1323%" height="15" fill="rgb(234,217,39)" fg:x="540" fg:w="1"/><text x="71.6786%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (4 samples, 0.53%)</title><rect x="71.9577%" y="213" width="0.5291%" height="15" fill="rgb(207,178,40)" fg:x="544" fg:w="4"/><text x="72.2077%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.26%)</title><rect x="72.4868%" y="213" width="0.2646%" height="15" fill="rgb(221,136,13)" fg:x="548" fg:w="2"/><text x="72.7368%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (12 samples, 1.59%)</title><rect x="71.5608%" y="229" width="1.5873%" height="15" fill="rgb(249,199,10)" fg:x="541" fg:w="12"/><text x="71.8108%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (3 samples, 0.40%)</title><rect x="72.7513%" y="213" width="0.3968%" height="15" fill="rgb(249,222,13)" fg:x="550" fg:w="3"/><text x="73.0013%" y="223.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="73.6772%" y="213" width="0.1323%" height="15" fill="rgb(244,185,38)" fg:x="557" fg:w="1"/><text x="73.9272%" y="223.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2 samples, 0.26%)</title><rect x="73.8095%" y="213" width="0.2646%" height="15" fill="rgb(236,202,9)" fg:x="558" fg:w="2"/><text x="74.0595%" y="223.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.13%)</title><rect x="73.9418%" y="197" width="0.1323%" height="15" fill="rgb(250,229,37)" fg:x="559" fg:w="1"/><text x="74.1918%" y="207.50"></text></g><g><title>free_tiny (5 samples, 0.66%)</title><rect x="74.0741%" y="213" width="0.6614%" height="15" fill="rgb(206,174,23)" fg:x="560" fg:w="5"/><text x="74.3241%" y="223.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="74.7354%" y="197" width="0.1323%" height="15" fill="rgb(211,33,43)" fg:x="565" fg:w="1"/><text x="74.9854%" y="207.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.79%)</title><rect x="74.7354%" y="213" width="0.7937%" height="15" fill="rgb(245,58,50)" fg:x="565" fg:w="6"/><text x="74.9854%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.66%)</title><rect x="74.8677%" y="197" width="0.6614%" height="15" fill="rgb(244,68,36)" fg:x="566" fg:w="5"/><text x="75.1177%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.26%)</title><rect x="75.2646%" y="181" width="0.2646%" height="15" fill="rgb(232,229,15)" fg:x="569" fg:w="2"/><text x="75.5146%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (2 samples, 0.26%)</title><rect x="75.5291%" y="213" width="0.2646%" height="15" fill="rgb(254,30,23)" fg:x="571" fg:w="2"/><text x="75.7791%" y="223.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.40%)</title><rect x="76.1905%" y="149" width="0.3968%" height="15" fill="rgb(235,160,14)" fg:x="576" fg:w="3"/><text x="76.4405%" y="159.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.13%)</title><rect x="76.9841%" y="133" width="0.1323%" height="15" fill="rgb(212,155,44)" fg:x="582" fg:w="1"/><text x="77.2341%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (37 samples, 4.89%)</title><rect x="73.1481%" y="229" width="4.8942%" height="15" fill="rgb(226,2,50)" fg:x="553" fg:w="37"/><text x="73.3981%" y="239.50">vexy_json_..</text></g><g><title>vexy_json_core::parser::unescape_string (17 samples, 2.25%)</title><rect x="75.7937%" y="213" width="2.2487%" height="15" fill="rgb(234,177,6)" fg:x="573" fg:w="17"/><text x="76.0437%" y="223.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (15 samples, 1.98%)</title><rect x="76.0582%" y="197" width="1.9841%" height="15" fill="rgb(217,24,9)" fg:x="575" fg:w="15"/><text x="76.3082%" y="207.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 1.98%)</title><rect x="76.0582%" y="181" width="1.9841%" height="15" fill="rgb(220,13,46)" fg:x="575" fg:w="15"/><text x="76.3082%" y="191.50">a..</text></g><g><title>szone_malloc_should_clear (14 samples, 1.85%)</title><rect x="76.1905%" y="165" width="1.8519%" height="15" fill="rgb(239,221,27)" fg:x="576" fg:w="14"/><text x="76.4405%" y="175.50">s..</text></g><g><title>tiny_malloc_should_clear (11 samples, 1.46%)</title><rect x="76.5873%" y="149" width="1.4550%" height="15" fill="rgb(222,198,25)" fg:x="579" fg:w="11"/><text x="76.8373%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (7 samples, 0.93%)</title><rect x="77.1164%" y="133" width="0.9259%" height="15" fill="rgb(211,99,13)" fg:x="583" fg:w="7"/><text x="77.3664%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (1 samples, 0.13%)</title><rect x="78.0423%" y="229" width="0.1323%" height="15" fill="rgb(232,111,31)" fg:x="590" fg:w="1"/><text x="78.2923%" y="239.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="78.7037%" y="197" width="0.1323%" height="15" fill="rgb(245,82,37)" fg:x="595" fg:w="1"/><text x="78.9537%" y="207.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.40%)</title><rect x="79.3651%" y="165" width="0.3968%" height="15" fill="rgb(227,149,46)" fg:x="600" fg:w="3"/><text x="79.6151%" y="175.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="80.9524%" y="149" width="0.1323%" height="15" fill="rgb(218,36,50)" fg:x="612" fg:w="1"/><text x="81.2024%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (113 samples, 14.95%)</title><rect x="66.4021%" y="261" width="14.9471%" height="15" fill="rgb(226,80,48)" fg:x="502" fg:w="113"/><text x="66.6521%" y="271.50">vexy_json_core::parser::Par..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (98 samples, 12.96%)</title><rect x="68.3862%" y="245" width="12.9630%" height="15" fill="rgb(238,224,15)" fg:x="517" fg:w="98"/><text x="68.6362%" y="255.50">vexy_json_core::parser:..</text></g><g><title>vexy_json_core::parser::unescape_string (24 samples, 3.17%)</title><rect x="78.1746%" y="229" width="3.1746%" height="15" fill="rgb(241,136,10)" fg:x="591" fg:w="24"/><text x="78.4246%" y="239.50">zzs..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (21 samples, 2.78%)</title><rect x="78.5714%" y="213" width="2.7778%" height="15" fill="rgb(208,32,45)" fg:x="594" fg:w="21"/><text x="78.8214%" y="223.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 2.51%)</title><rect x="78.8360%" y="197" width="2.5132%" height="15" fill="rgb(207,135,9)" fg:x="596" fg:w="19"/><text x="79.0860%" y="207.50">al..</text></g><g><title>szone_malloc_should_clear (18 samples, 2.38%)</title><rect x="78.9683%" y="181" width="2.3810%" height="15" fill="rgb(206,86,44)" fg:x="597" fg:w="18"/><text x="79.2183%" y="191.50">sz..</text></g><g><title>tiny_malloc_should_clear (12 samples, 1.59%)</title><rect x="79.7619%" y="165" width="1.5873%" height="15" fill="rgb(245,177,15)" fg:x="603" fg:w="12"/><text x="80.0119%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.26%)</title><rect x="81.0847%" y="149" width="0.2646%" height="15" fill="rgb(206,64,50)" fg:x="613" fg:w="2"/><text x="81.3347%" y="159.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="81.2169%" y="133" width="0.1323%" height="15" fill="rgb(234,36,40)" fg:x="614" fg:w="1"/><text x="81.4669%" y="143.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.13%)</title><rect x="81.6138%" y="245" width="0.1323%" height="15" fill="rgb(213,64,8)" fg:x="617" fg:w="1"/><text x="81.8638%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (1 samples, 0.13%)</title><rect x="81.6138%" y="229" width="0.1323%" height="15" fill="rgb(210,75,36)" fg:x="617" fg:w="1"/><text x="81.8638%" y="239.50"></text></g><g><title>_tlv_get_addr (1 samples, 0.13%)</title><rect x="81.7460%" y="245" width="0.1323%" height="15" fill="rgb(229,88,21)" fg:x="618" fg:w="1"/><text x="81.9960%" y="255.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.13%)</title><rect x="81.8783%" y="245" width="0.1323%" height="15" fill="rgb(252,204,47)" fg:x="619" fg:w="1"/><text x="82.1283%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.26%)</title><rect x="82.2751%" y="229" width="0.2646%" height="15" fill="rgb(208,77,27)" fg:x="622" fg:w="2"/><text x="82.5251%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.93%)</title><rect x="82.0106%" y="245" width="0.9259%" height="15" fill="rgb(221,76,26)" fg:x="620" fg:w="7"/><text x="82.2606%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.40%)</title><rect x="82.5397%" y="229" width="0.3968%" height="15" fill="rgb(225,139,18)" fg:x="624" fg:w="3"/><text x="82.7897%" y="239.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="82.5397%" y="213" width="0.3968%" height="15" fill="rgb(230,137,11)" fg:x="624" fg:w="3"/><text x="82.7897%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="82.5397%" y="197" width="0.3968%" height="15" fill="rgb(212,28,1)" fg:x="624" fg:w="3"/><text x="82.7897%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="82.8042%" y="181" width="0.1323%" height="15" fill="rgb(248,164,17)" fg:x="626" fg:w="1"/><text x="83.0542%" y="191.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.53%)</title><rect x="82.9365%" y="245" width="0.5291%" height="15" fill="rgb(222,171,42)" fg:x="627" fg:w="4"/><text x="83.1865%" y="255.50"></text></g><g><title>tiny_malloc_should_clear (4 samples, 0.53%)</title><rect x="82.9365%" y="229" width="0.5291%" height="15" fill="rgb(243,84,45)" fg:x="627" fg:w="4"/><text x="83.1865%" y="239.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.40%)</title><rect x="83.0688%" y="213" width="0.3968%" height="15" fill="rgb(252,49,23)" fg:x="628" fg:w="3"/><text x="83.3188%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (8 samples, 1.06%)</title><rect x="83.9947%" y="229" width="1.0582%" height="15" fill="rgb(215,19,7)" fg:x="635" fg:w="8"/><text x="84.2447%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="85.0529%" y="229" width="0.1323%" height="15" fill="rgb(238,81,41)" fg:x="643" fg:w="1"/><text x="85.3029%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (15 samples, 1.98%)</title><rect x="83.4656%" y="245" width="1.9841%" height="15" fill="rgb(210,199,37)" fg:x="631" fg:w="15"/><text x="83.7156%" y="255.50">z..</text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (2 samples, 0.26%)</title><rect x="85.1852%" y="229" width="0.2646%" height="15" fill="rgb(244,192,49)" fg:x="644" fg:w="2"/><text x="85.4352%" y="239.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.13%)</title><rect x="85.7143%" y="229" width="0.1323%" height="15" fill="rgb(226,211,11)" fg:x="648" fg:w="1"/><text x="85.9643%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="85.7143%" y="213" width="0.1323%" height="15" fill="rgb(236,162,54)" fg:x="648" fg:w="1"/><text x="85.9643%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.26%)</title><rect x="85.8466%" y="229" width="0.2646%" height="15" fill="rgb(220,229,9)" fg:x="649" fg:w="2"/><text x="86.0966%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.26%)</title><rect x="85.8466%" y="213" width="0.2646%" height="15" fill="rgb(250,87,22)" fg:x="649" fg:w="2"/><text x="86.0966%" y="223.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.26%)</title><rect x="85.8466%" y="197" width="0.2646%" height="15" fill="rgb(239,43,17)" fg:x="649" fg:w="2"/><text x="86.0966%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.26%)</title><rect x="85.8466%" y="181" width="0.2646%" height="15" fill="rgb(231,177,25)" fg:x="649" fg:w="2"/><text x="86.0966%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="85.9788%" y="165" width="0.1323%" height="15" fill="rgb(219,179,1)" fg:x="650" fg:w="1"/><text x="86.2288%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.13%)</title><rect x="86.2434%" y="213" width="0.1323%" height="15" fill="rgb(238,219,53)" fg:x="652" fg:w="1"/><text x="86.4934%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="86.2434%" y="197" width="0.1323%" height="15" fill="rgb(232,167,36)" fg:x="652" fg:w="1"/><text x="86.4934%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.93%)</title><rect x="86.7725%" y="181" width="0.9259%" height="15" fill="rgb(244,19,51)" fg:x="656" fg:w="7"/><text x="87.0225%" y="191.50"></text></g><g><title>szone_malloc_should_clear (7 samples, 0.93%)</title><rect x="86.7725%" y="165" width="0.9259%" height="15" fill="rgb(224,6,22)" fg:x="656" fg:w="7"/><text x="87.0225%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.79%)</title><rect x="86.9048%" y="149" width="0.7937%" height="15" fill="rgb(224,145,5)" fg:x="657" fg:w="6"/><text x="87.1548%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.26%)</title><rect x="87.4339%" y="133" width="0.2646%" height="15" fill="rgb(234,130,49)" fg:x="661" fg:w="2"/><text x="87.6839%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (18 samples, 2.38%)</title><rect x="85.4497%" y="245" width="2.3810%" height="15" fill="rgb(254,6,2)" fg:x="646" fg:w="18"/><text x="85.6997%" y="255.50">zz..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (13 samples, 1.72%)</title><rect x="86.1111%" y="229" width="1.7196%" height="15" fill="rgb(208,96,46)" fg:x="651" fg:w="13"/><text x="86.3611%" y="239.50"></text></g><g><title>vexy_json_core::parser::unescape_string (11 samples, 1.46%)</title><rect x="86.3757%" y="213" width="1.4550%" height="15" fill="rgb(239,3,39)" fg:x="653" fg:w="11"/><text x="86.6257%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (10 samples, 1.32%)</title><rect x="86.5079%" y="197" width="1.3228%" height="15" fill="rgb(233,210,1)" fg:x="654" fg:w="10"/><text x="86.7579%" y="207.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="87.6984%" y="181" width="0.1323%" height="15" fill="rgb(244,137,37)" fg:x="663" fg:w="1"/><text x="87.9484%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="88.2275%" y="213" width="0.3968%" height="15" fill="rgb(240,136,2)" fg:x="667" fg:w="3"/><text x="88.4775%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.40%)</title><rect x="88.2275%" y="197" width="0.3968%" height="15" fill="rgb(239,18,37)" fg:x="667" fg:w="3"/><text x="88.4775%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="88.6243%" y="197" width="0.1323%" height="15" fill="rgb(218,185,22)" fg:x="670" fg:w="1"/><text x="88.8743%" y="207.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="88.7566%" y="181" width="0.1323%" height="15" fill="rgb(225,218,4)" fg:x="671" fg:w="1"/><text x="89.0066%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 1.06%)</title><rect x="87.9630%" y="229" width="1.0582%" height="15" fill="rgb(230,182,32)" fg:x="665" fg:w="8"/><text x="88.2130%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.40%)</title><rect x="88.6243%" y="213" width="0.3968%" height="15" fill="rgb(242,56,43)" fg:x="670" fg:w="3"/><text x="88.8743%" y="223.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.26%)</title><rect x="88.7566%" y="197" width="0.2646%" height="15" fill="rgb(233,99,24)" fg:x="671" fg:w="2"/><text x="89.0066%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.13%)</title><rect x="88.8889%" y="181" width="0.1323%" height="15" fill="rgb(234,209,42)" fg:x="672" fg:w="1"/><text x="89.1389%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (3 samples, 0.40%)</title><rect x="89.8148%" y="213" width="0.3968%" height="15" fill="rgb(227,7,12)" fg:x="679" fg:w="3"/><text x="90.0648%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (11 samples, 1.46%)</title><rect x="89.0212%" y="229" width="1.4550%" height="15" fill="rgb(245,203,43)" fg:x="673" fg:w="11"/><text x="89.2712%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.26%)</title><rect x="90.2116%" y="213" width="0.2646%" height="15" fill="rgb(238,205,33)" fg:x="682" fg:w="2"/><text x="90.4616%" y="223.50"></text></g><g><title>free_tiny (2 samples, 0.26%)</title><rect x="90.6085%" y="213" width="0.2646%" height="15" fill="rgb(231,56,7)" fg:x="685" fg:w="2"/><text x="90.8585%" y="223.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.26%)</title><rect x="90.8730%" y="213" width="0.2646%" height="15" fill="rgb(244,186,29)" fg:x="687" fg:w="2"/><text x="91.1230%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.26%)</title><rect x="90.8730%" y="197" width="0.2646%" height="15" fill="rgb(234,111,31)" fg:x="687" fg:w="2"/><text x="91.1230%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="91.0053%" y="181" width="0.1323%" height="15" fill="rgb(241,149,10)" fg:x="688" fg:w="1"/><text x="91.2553%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (6 samples, 0.79%)</title><rect x="90.4762%" y="229" width="0.7937%" height="15" fill="rgb(249,206,44)" fg:x="684" fg:w="6"/><text x="90.7262%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.13%)</title><rect x="91.1376%" y="213" width="0.1323%" height="15" fill="rgb(251,153,30)" fg:x="689" fg:w="1"/><text x="91.3876%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (1 samples, 0.13%)</title><rect x="91.2698%" y="229" width="0.1323%" height="15" fill="rgb(239,152,38)" fg:x="690" fg:w="1"/><text x="91.5198%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.13%)</title><rect x="91.2698%" y="213" width="0.1323%" height="15" fill="rgb(249,139,47)" fg:x="690" fg:w="1"/><text x="91.5198%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="91.2698%" y="197" width="0.1323%" height="15" fill="rgb(244,64,35)" fg:x="690" fg:w="1"/><text x="91.5198%" y="207.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="92.1958%" y="197" width="0.1323%" height="15" fill="rgb(216,46,15)" fg:x="697" fg:w="1"/><text x="92.4458%" y="207.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.26%)</title><rect x="92.3280%" y="165" width="0.2646%" height="15" fill="rgb(250,74,19)" fg:x="698" fg:w="2"/><text x="92.5780%" y="175.50"></text></g><g><title>szone_realloc (2 samples, 0.26%)</title><rect x="92.3280%" y="149" width="0.2646%" height="15" fill="rgb(249,42,33)" fg:x="698" fg:w="2"/><text x="92.5780%" y="159.50"></text></g><g><title>szone_size (2 samples, 0.26%)</title><rect x="92.3280%" y="133" width="0.2646%" height="15" fill="rgb(242,149,17)" fg:x="698" fg:w="2"/><text x="92.5780%" y="143.50"></text></g><g><title>tiny_size (2 samples, 0.26%)</title><rect x="92.3280%" y="117" width="0.2646%" height="15" fill="rgb(244,29,21)" fg:x="698" fg:w="2"/><text x="92.5780%" y="127.50"></text></g><g><title>_realloc (4 samples, 0.53%)</title><rect x="92.3280%" y="181" width="0.5291%" height="15" fill="rgb(220,130,37)" fg:x="698" fg:w="4"/><text x="92.5780%" y="191.50"></text></g><g><title>szone_size (2 samples, 0.26%)</title><rect x="92.5926%" y="165" width="0.2646%" height="15" fill="rgb(211,67,2)" fg:x="700" fg:w="2"/><text x="92.8426%" y="175.50"></text></g><g><title>tiny_size (2 samples, 0.26%)</title><rect x="92.5926%" y="149" width="0.2646%" height="15" fill="rgb(235,68,52)" fg:x="700" fg:w="2"/><text x="92.8426%" y="159.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="92.8571%" y="165" width="0.1323%" height="15" fill="rgb(246,142,3)" fg:x="702" fg:w="1"/><text x="93.1071%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (45 samples, 5.95%)</title><rect x="87.8307%" y="245" width="5.9524%" height="15" fill="rgb(241,25,7)" fg:x="664" fg:w="45"/><text x="88.0807%" y="255.50">vexy_json_co..</text></g><g><title>vexy_json_core::parser::unescape_string (18 samples, 2.38%)</title><rect x="91.4021%" y="229" width="2.3810%" height="15" fill="rgb(242,119,39)" fg:x="691" fg:w="18"/><text x="91.6521%" y="239.50">zz..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 1.59%)</title><rect x="92.1958%" y="213" width="1.5873%" height="15" fill="rgb(241,98,45)" fg:x="697" fg:w="12"/><text x="92.4458%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 1.46%)</title><rect x="92.3280%" y="197" width="1.4550%" height="15" fill="rgb(254,28,30)" fg:x="698" fg:w="11"/><text x="92.5780%" y="207.50"></text></g><g><title>szone_malloc_should_clear (7 samples, 0.93%)</title><rect x="92.8571%" y="181" width="0.9259%" height="15" fill="rgb(241,142,54)" fg:x="702" fg:w="7"/><text x="93.1071%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.79%)</title><rect x="92.9894%" y="165" width="0.7937%" height="15" fill="rgb(222,85,15)" fg:x="703" fg:w="6"/><text x="93.2394%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.53%)</title><rect x="93.2540%" y="149" width="0.5291%" height="15" fill="rgb(210,85,47)" fg:x="705" fg:w="4"/><text x="93.5040%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.13%)</title><rect x="93.7831%" y="245" width="0.1323%" height="15" fill="rgb(224,206,25)" fg:x="709" fg:w="1"/><text x="94.0331%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="93.9153%" y="213" width="0.1323%" height="15" fill="rgb(243,201,19)" fg:x="710" fg:w="1"/><text x="94.1653%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.40%)</title><rect x="94.0476%" y="213" width="0.3968%" height="15" fill="rgb(236,59,4)" fg:x="711" fg:w="3"/><text x="94.2976%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (5 samples, 0.66%)</title><rect x="93.9153%" y="245" width="0.6614%" height="15" fill="rgb(254,179,45)" fg:x="710" fg:w="5"/><text x="94.1653%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (5 samples, 0.66%)</title><rect x="93.9153%" y="229" width="0.6614%" height="15" fill="rgb(226,14,10)" fg:x="710" fg:w="5"/><text x="94.1653%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="94.4444%" y="213" width="0.1323%" height="15" fill="rgb(244,27,41)" fg:x="714" fg:w="1"/><text x="94.6944%" y="223.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.13%)</title><rect x="95.1058%" y="181" width="0.1323%" height="15" fill="rgb(235,35,32)" fg:x="719" fg:w="1"/><text x="95.3558%" y="191.50"></text></g><g><title>_realloc (3 samples, 0.40%)</title><rect x="95.1058%" y="197" width="0.3968%" height="15" fill="rgb(218,68,31)" fg:x="719" fg:w="3"/><text x="95.3558%" y="207.50"></text></g><g><title>szone_size (2 samples, 0.26%)</title><rect x="95.2381%" y="181" width="0.2646%" height="15" fill="rgb(207,120,37)" fg:x="720" fg:w="2"/><text x="95.4881%" y="191.50"></text></g><g><title>tiny_size (2 samples, 0.26%)</title><rect x="95.2381%" y="165" width="0.2646%" height="15" fill="rgb(227,98,0)" fg:x="720" fg:w="2"/><text x="95.4881%" y="175.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="95.6349%" y="181" width="0.1323%" height="15" fill="rgb(207,7,3)" fg:x="723" fg:w="1"/><text x="95.8849%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (115 samples, 15.21%)</title><rect x="81.3492%" y="261" width="15.2116%" height="15" fill="rgb(206,98,19)" fg:x="615" fg:w="115"/><text x="81.5992%" y="271.50">vexy_json_core::parser::Par..</text></g><g><title>vexy_json_core::parser::unescape_string (15 samples, 1.98%)</title><rect x="94.5767%" y="245" width="1.9841%" height="15" fill="rgb(217,5,26)" fg:x="715" fg:w="15"/><text x="94.8267%" y="255.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 1.59%)</title><rect x="94.9735%" y="229" width="1.5873%" height="15" fill="rgb(235,190,38)" fg:x="718" fg:w="12"/><text x="95.2235%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 1.59%)</title><rect x="94.9735%" y="213" width="1.5873%" height="15" fill="rgb(247,86,24)" fg:x="718" fg:w="12"/><text x="95.2235%" y="223.50"></text></g><g><title>szone_malloc_should_clear (8 samples, 1.06%)</title><rect x="95.5026%" y="197" width="1.0582%" height="15" fill="rgb(205,101,16)" fg:x="722" fg:w="8"/><text x="95.7526%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.79%)</title><rect x="95.7672%" y="181" width="0.7937%" height="15" fill="rgb(246,168,33)" fg:x="724" fg:w="6"/><text x="96.0172%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.66%)</title><rect x="95.8995%" y="165" width="0.6614%" height="15" fill="rgb(231,114,1)" fg:x="725" fg:w="5"/><text x="96.1495%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="96.5608%" y="229" width="0.1323%" height="15" fill="rgb(207,184,53)" fg:x="730" fg:w="1"/><text x="96.8108%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="96.6931%" y="229" width="0.1323%" height="15" fill="rgb(224,95,51)" fg:x="731" fg:w="1"/><text x="96.9431%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (3 samples, 0.40%)</title><rect x="96.5608%" y="261" width="0.3968%" height="15" fill="rgb(212,188,45)" fg:x="730" fg:w="3"/><text x="96.8108%" y="271.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.40%)</title><rect x="96.5608%" y="245" width="0.3968%" height="15" fill="rgb(223,154,38)" fg:x="730" fg:w="3"/><text x="96.8108%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="96.8254%" y="229" width="0.1323%" height="15" fill="rgb(251,22,52)" fg:x="732" fg:w="1"/><text x="97.0754%" y="239.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.26%)</title><rect x="97.2222%" y="229" width="0.2646%" height="15" fill="rgb(229,209,22)" fg:x="735" fg:w="2"/><text x="97.4722%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (265 samples, 35.05%)</title><rect x="63.8889%" y="277" width="35.0529%" height="15" fill="rgb(234,138,34)" fg:x="483" fg:w="265"/><text x="64.1389%" y="287.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (15 samples, 1.98%)</title><rect x="96.9577%" y="261" width="1.9841%" height="15" fill="rgb(212,95,11)" fg:x="733" fg:w="15"/><text x="97.2077%" y="271.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 1.72%)</title><rect x="97.2222%" y="245" width="1.7196%" height="15" fill="rgb(240,179,47)" fg:x="735" fg:w="13"/><text x="97.4722%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 1.46%)</title><rect x="97.4868%" y="229" width="1.4550%" height="15" fill="rgb(240,163,11)" fg:x="737" fg:w="11"/><text x="97.7368%" y="239.50"></text></g><g><title>szone_malloc_should_clear (8 samples, 1.06%)</title><rect x="97.8836%" y="213" width="1.0582%" height="15" fill="rgb(236,37,12)" fg:x="740" fg:w="8"/><text x="98.1336%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (7 samples, 0.93%)</title><rect x="98.0159%" y="197" width="0.9259%" height="15" fill="rgb(232,164,16)" fg:x="741" fg:w="7"/><text x="98.2659%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.40%)</title><rect x="98.5450%" y="181" width="0.3968%" height="15" fill="rgb(244,205,15)" fg:x="745" fg:w="3"/><text x="98.7950%" y="191.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="98.8095%" y="165" width="0.1323%" height="15" fill="rgb(223,117,47)" fg:x="747" fg:w="1"/><text x="99.0595%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.13%)</title><rect x="98.9418%" y="277" width="0.1323%" height="15" fill="rgb(244,107,35)" fg:x="748" fg:w="1"/><text x="99.1918%" y="287.50"></text></g><g><title>_realloc (2 samples, 0.26%)</title><rect x="99.3386%" y="229" width="0.2646%" height="15" fill="rgb(205,140,8)" fg:x="751" fg:w="2"/><text x="99.5886%" y="239.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.26%)</title><rect x="99.3386%" y="213" width="0.2646%" height="15" fill="rgb(228,84,46)" fg:x="751" fg:w="2"/><text x="99.5886%" y="223.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="99.6032%" y="213" width="0.1323%" height="15" fill="rgb(254,188,9)" fg:x="753" fg:w="1"/><text x="99.8532%" y="223.50"></text></g><g><title>all (756 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(206,112,54)" fg:x="0" fg:w="756"/><text x="0.2500%" y="447.50"></text></g><g><title>start (756 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(216,84,49)" fg:x="0" fg:w="756"/><text x="0.2500%" y="431.50">start</text></g><g><title>main (749 samples, 99.07%)</title><rect x="0.9259%" y="405" width="99.0741%" height="15" fill="rgb(214,194,35)" fg:x="7" fg:w="749"/><text x="1.1759%" y="415.50">main</text></g><g><title>std::rt::lang_start_internal (749 samples, 99.07%)</title><rect x="0.9259%" y="389" width="99.0741%" height="15" fill="rgb(249,28,3)" fg:x="7" fg:w="749"/><text x="1.1759%" y="399.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (748 samples, 98.94%)</title><rect x="1.0582%" y="373" width="98.9418%" height="15" fill="rgb(222,56,52)" fg:x="8" fg:w="748"/><text x="1.3082%" y="383.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (748 samples, 98.94%)</title><rect x="1.0582%" y="357" width="98.9418%" height="15" fill="rgb(245,217,50)" fg:x="8" fg:w="748"/><text x="1.3082%" y="367.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>profile_parser::main (748 samples, 98.94%)</title><rect x="1.0582%" y="341" width="98.9418%" height="15" fill="rgb(213,201,24)" fg:x="8" fg:w="748"/><text x="1.3082%" y="351.50">profile_parser::main</text></g><g><title>vexy_json_core::parser::parse (560 samples, 74.07%)</title><rect x="25.9259%" y="325" width="74.0741%" height="15" fill="rgb(248,116,28)" fg:x="196" fg:w="560"/><text x="26.1759%" y="335.50">vexy_json_core::parser::parse</text></g><g><title>vexy_json_core::parser::Parser::parse (560 samples, 74.07%)</title><rect x="25.9259%" y="309" width="74.0741%" height="15" fill="rgb(219,72,43)" fg:x="196" fg:w="560"/><text x="26.1759%" y="319.50">vexy_json_core::parser::Parser::parse</text></g><g><title>vexy_json_core::parser::Parser::parse_value (288 samples, 38.10%)</title><rect x="61.9048%" y="293" width="38.0952%" height="15" fill="rgb(209,138,14)" fg:x="468" fg:w="288"/><text x="62.1548%" y="303.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (7 samples, 0.93%)</title><rect x="99.0741%" y="277" width="0.9259%" height="15" fill="rgb(222,18,33)" fg:x="749" fg:w="7"/><text x="99.3241%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.66%)</title><rect x="99.3386%" y="261" width="0.6614%" height="15" fill="rgb(213,199,7)" fg:x="751" fg:w="5"/><text x="99.5886%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.66%)</title><rect x="99.3386%" y="245" width="0.6614%" height="15" fill="rgb(250,110,10)" fg:x="751" fg:w="5"/><text x="99.5886%" y="255.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="99.6032%" y="229" width="0.3968%" height="15" fill="rgb(248,123,6)" fg:x="753" fg:w="3"/><text x="99.8532%" y="239.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.26%)</title><rect x="99.7354%" y="213" width="0.2646%" height="15" fill="rgb(206,91,31)" fg:x="754" fg:w="2"/><text x="99.9854%" y="223.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="99.8677%" y="197" width="0.1323%" height="15" fill="rgb(211,154,13)" fg:x="755" fg:w="1"/><text x="100.1177%" y="207.50"></text></g></svg></svg>
--
crates/python/tests/test_basic.py-"""
crates/python/tests/test_basic.py:Basic functionality tests for vexy_json Python bindings.
crates/python/tests/test_basic.py-"""
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-import pytest
crates/python/tests/test_basic.py:import vexy_json
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-class TestBasicParsing:
--
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_parse_simple_object(self):
crates/python/tests/test_basic.py-        """Test parsing a simple JSON object."""
crates/python/tests/test_basic.py:        result = vexy_json.parse('{"key": "value"}')
crates/python/tests/test_basic.py-        assert result == {"key": "value"}
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_parse_simple_array(self):
crates/python/tests/test_basic.py-        """Test parsing a simple JSON array."""
crates/python/tests/test_basic.py:        result = vexy_json.parse("[1, 2, 3]")
crates/python/tests/test_basic.py-        assert result == [1, 2, 3]
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_parse_null(self):
crates/python/tests/test_basic.py-        """Test parsing null value."""
crates/python/tests/test_basic.py:        result = vexy_json.parse("null")
crates/python/tests/test_basic.py-        assert result is None
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_parse_boolean(self):
crates/python/tests/test_basic.py-        """Test parsing boolean values."""
crates/python/tests/test_basic.py:        assert vexy_json.parse("true") is True
crates/python/tests/test_basic.py:        assert vexy_json.parse("false") is False
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_parse_numbers(self):
crates/python/tests/test_basic.py-        """Test parsing various number formats."""
crates/python/tests/test_basic.py:        assert vexy_json.parse("42") == 42
crates/python/tests/test_basic.py:        assert vexy_json.parse("-42") == -42
crates/python/tests/test_basic.py:        assert vexy_json.parse("3.14") == 3.14
crates/python/tests/test_basic.py:        assert vexy_json.parse("-3.14") == -3.14
crates/python/tests/test_basic.py:        assert vexy_json.parse("1e5") == 100000.0
crates/python/tests/test_basic.py:        assert vexy_json.parse("1.5e2") == 150.0
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_parse_strings(self):
crates/python/tests/test_basic.py-        """Test parsing string values."""
crates/python/tests/test_basic.py:        assert vexy_json.parse('"hello"') == "hello"
crates/python/tests/test_basic.py:        assert vexy_json.parse('"hello world"') == "hello world"
crates/python/tests/test_basic.py:        assert vexy_json.parse('""') == ""
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_parse_nested_structures(self):
crates/python/tests/test_basic.py-        """Test parsing nested objects and arrays."""
--
crates/python/tests/test_basic.py-            }
crates/python/tests/test_basic.py-        }
crates/python/tests/test_basic.py-        """
crates/python/tests/test_basic.py:        result = vexy_json.parse(complex_json)
crates/python/tests/test_basic.py-        expected = {
crates/python/tests/test_basic.py-            "users": [{"name": "Alice", "age": 30}, {"name": "Bob", "age": 25}],
crates/python/tests/test_basic.py-            "metadata": {"count": 2, "active": True},
--
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-class TestForgivingFeatures:
crates/python/tests/test_basic.py:    """Test vexy_json's forgiving JSON features."""
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_comments(self):
crates/python/tests/test_basic.py-        """Test single-line and multi-line comments."""
--
crates/python/tests/test_basic.py-            "age": 30
crates/python/tests/test_basic.py-        }
crates/python/tests/test_basic.py-        """
crates/python/tests/test_basic.py:        result = vexy_json.parse(json_with_comments)
crates/python/tests/test_basic.py-        assert result == {"name": "Alice", "age": 30}
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_trailing_commas(self):
crates/python/tests/test_basic.py-        """Test trailing commas in objects and arrays."""
crates/python/tests/test_basic.py-        # Object with trailing comma
crates/python/tests/test_basic.py:        result = vexy_json.parse('{"a": 1, "b": 2,}')
crates/python/tests/test_basic.py-        assert result == {"a": 1, "b": 2}
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        # Array with trailing comma
crates/python/tests/test_basic.py:        result = vexy_json.parse("[1, 2, 3,]")
crates/python/tests/test_basic.py-        assert result == [1, 2, 3]
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_unquoted_keys(self):
crates/python/tests/test_basic.py-        """Test unquoted object keys."""
crates/python/tests/test_basic.py:        result = vexy_json.parse('{key: "value", another_key: 42}')
crates/python/tests/test_basic.py-        assert result == {"key": "value", "another_key": 42}
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_single_quotes(self):
crates/python/tests/test_basic.py-        """Test single-quoted strings."""
crates/python/tests/test_basic.py:        result = vexy_json.parse("{'key': 'value'}")
crates/python/tests/test_basic.py-        assert result == {"key": "value"}
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_implicit_top_level(self):
crates/python/tests/test_basic.py-        """Test implicit top-level objects and arrays."""
crates/python/tests/test_basic.py-        # Implicit object
crates/python/tests/test_basic.py:        result = vexy_json.parse('key: "value", number: 42')
crates/python/tests/test_basic.py-        assert result == {"key": "value", "number": 42}
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        # Implicit array
crates/python/tests/test_basic.py:        result = vexy_json.parse("1, 2, 3")
crates/python/tests/test_basic.py-        assert result == [1, 2, 3]
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_newline_as_comma(self):
--
crates/python/tests/test_basic.py-            "b": 2
crates/python/tests/test_basic.py-        }
crates/python/tests/test_basic.py-        """
crates/python/tests/test_basic.py:        result = vexy_json.parse(json_with_newlines)
crates/python/tests/test_basic.py-        assert result == {"a": 1, "b": 2}
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_combined_features(self):
--
crates/python/tests/test_basic.py-            active: true,
crates/python/tests/test_basic.py-        }
crates/python/tests/test_basic.py-        """
crates/python/tests/test_basic.py:        result = vexy_json.parse(forgiving_json)
crates/python/tests/test_basic.py-        assert result == {"name": "Alice", "age": 30, "active": True}
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-
--
crates/python/tests/test_basic.py-        json_with_comment = '{"key": "value", // comment}'
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        # Should work with comments enabled (default)
crates/python/tests/test_basic.py:        result = vexy_json.parse(json_with_comment)
crates/python/tests/test_basic.py-        assert result == {"key": "value"}
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        # Should fail with comments disabled
crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
crates/python/tests/test_basic.py:            vexy_json.parse_with_options(json_with_comment, allow_comments=False)
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_disable_trailing_commas(self):
crates/python/tests/test_basic.py-        """Test disabling trailing comma support."""
crates/python/tests/test_basic.py-        json_with_trailing = '{"a": 1, "b": 2,}'
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        # Should work with trailing commas enabled (default)
crates/python/tests/test_basic.py:        result = vexy_json.parse(json_with_trailing)
crates/python/tests/test_basic.py-        assert result == {"a": 1, "b": 2}
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        # Should fail with trailing commas disabled
crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
crates/python/tests/test_basic.py:            vexy_json.parse_with_options(
crates/python/tests/test_basic.py-                json_with_trailing, allow_trailing_commas=False
crates/python/tests/test_basic.py-            )
crates/python/tests/test_basic.py-
--
crates/python/tests/test_basic.py-        json_unquoted = '{key: "value"}'
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        # Should work with unquoted keys enabled (default)
crates/python/tests/test_basic.py:        result = vexy_json.parse(json_unquoted)
crates/python/tests/test_basic.py-        assert result == {"key": "value"}
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        # Should fail with unquoted keys disabled
crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
crates/python/tests/test_basic.py:            vexy_json.parse_with_options(json_unquoted, allow_unquoted_keys=False)
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_disable_single_quotes(self):
crates/python/tests/test_basic.py-        """Test disabling single quote support."""
crates/python/tests/test_basic.py-        json_single_quotes = "{'key': 'value'}"
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        # Should work with single quotes enabled (default)
crates/python/tests/test_basic.py:        result = vexy_json.parse(json_single_quotes)
crates/python/tests/test_basic.py-        assert result == {"key": "value"}
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        # Should fail with single quotes disabled
crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
crates/python/tests/test_basic.py:            vexy_json.parse_with_options(json_single_quotes, allow_single_quotes=False)
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_disable_implicit_top_level(self):
crates/python/tests/test_basic.py-        """Test disabling implicit top-level support."""
crates/python/tests/test_basic.py-        implicit_object = 'key: "value"'
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        # Should work with implicit top-level enabled (default)
crates/python/tests/test_basic.py:        result = vexy_json.parse(implicit_object)
crates/python/tests/test_basic.py-        assert result == {"key": "value"}
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        # Should fail with implicit top-level disabled
crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
crates/python/tests/test_basic.py:            vexy_json.parse_with_options(implicit_object, implicit_top_level=False)
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_max_depth_limit(self):
crates/python/tests/test_basic.py-        """Test maximum depth limitation."""
--
crates/python/tests/test_basic.py-        deep_json = '{"a":' * 10 + "1" + "}" * 10
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        # Should work with default max_depth (128)
crates/python/tests/test_basic.py:        result = vexy_json.parse(deep_json)
crates/python/tests/test_basic.py-        assert isinstance(result, dict)
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        # Should fail with low max_depth
crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
crates/python/tests/test_basic.py:            vexy_json.parse_with_options(deep_json, max_depth=5)
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-class TestValidation:
--
crates/python/tests/test_basic.py-        ]
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        for case in valid_cases:
crates/python/tests/test_basic.py:            assert vexy_json.is_valid(case), f"Should be valid: {case}"
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_is_valid_false_cases(self):
crates/python/tests/test_basic.py-        """Test cases that should be invalid."""
--
crates/python/tests/test_basic.py-        ]
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        for case in invalid_cases:
crates/python/tests/test_basic.py:            assert not vexy_json.is_valid(case), f"Should be invalid: {case}"
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-class TestErrorHandling:
--
crates/python/tests/test_basic.py-    def test_parse_error_exception(self):
crates/python/tests/test_basic.py-        """Test that parse errors raise ValueError."""
crates/python/tests/test_basic.py-        with pytest.raises(ValueError, match="Parse error"):
crates/python/tests/test_basic.py:            vexy_json.parse("{invalid json}")
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_parse_with_options_error(self):
crates/python/tests/test_basic.py-        """Test that parse_with_options errors raise ValueError."""
crates/python/tests/test_basic.py-        with pytest.raises(ValueError, match="Parse error"):
crates/python/tests/test_basic.py:            vexy_json.parse_with_options("{invalid}", allow_comments=False)
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_empty_input(self):
crates/python/tests/test_basic.py-        """Test parsing empty input."""
crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
crates/python/tests/test_basic.py:            vexy_json.parse("")
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-    def test_malformed_json(self):
crates/python/tests/test_basic.py-        """Test various malformed JSON inputs."""
--
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-        for case in malformed_cases:
crates/python/tests/test_basic.py-            with pytest.raises(ValueError):
crates/python/tests/test_basic.py:                vexy_json.parse(case)
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-
crates/python/tests/test_basic.py-if __name__ == "__main__":
--
crates/cli/src/main.rs-// this_file: crates/cli/src/main.rs
crates/cli/src/main.rs-
crates/cli/src/main.rs://! Enhanced vexy_json CLI with comprehensive JSON processing capabilities.
crates/cli/src/main.rs-
crates/cli/src/main.rs-use clap::{Args, Parser};
crates/cli/src/main.rs-use colored::*;
--
crates/cli/src/main.rs-use std::path::PathBuf;
crates/cli/src/main.rs-use thiserror::Error;
crates/cli/src/main.rs-use tokio::time::{sleep, Duration};
crates/cli/src/main.rs:use vexy_json_core::ast::Value;
crates/cli/src/main.rs:use vexy_json_core::error::{EnhancedParseResult, ParsingTier, RepairType};
crates/cli/src/main.rs:use vexy_json_core::{
crates/cli/src/main.rs-    parse_with_detailed_repair_tracking,
crates/cli/src/main.rs-    parse_with_fallback, ParserOptions, ParallelConfig, ParallelParser,
crates/cli/src/main.rs-};
crates/cli/src/main.rs-
crates/cli/src/main.rs-#[derive(Parser, Debug)]
crates/cli/src/main.rs-#[clap(
crates/cli/src/main.rs:    name = "vexy_json", 
crates/cli/src/main.rs-    version = env!("VEXY_JSON_VERSION", env!("CARGO_PKG_VERSION")), 
crates/cli/src/main.rs-    about = "A forgiving JSON parser and processor",
crates/cli/src/main.rs:    long_about = "vexy_json processes JSON with forgiving syntax including comments, trailing commas, unquoted keys, and more."
crates/cli/src/main.rs-)]
crates/cli/src/main.rs-struct CliArgs {
crates/cli/src/main.rs-    /// Input files to process (if none provided, reads from stdin)
--
crates/cli/src/main.rs-    Ok(())
crates/cli/src/main.rs-}
crates/cli/src/main.rs-
crates/cli/src/main.rs:fn format_parse_error(error: &vexy_json_core::Error, file: &str, content: &str) -> CliError {
crates/cli/src/main.rs-    // Try to extract position information from the error
crates/cli/src/main.rs-    let error_str = error.to_string();
crates/cli/src/main.rs-
--
fuzz/fuzz_targets/repair.rs-#![no_main]
fuzz/fuzz_targets/repair.rs-
fuzz/fuzz_targets/repair.rs-use libfuzzer_sys::fuzz_target;
fuzz/fuzz_targets/repair.rs:use vexy_json::{parse_with_options, ParserOptions};
fuzz/fuzz_targets/repair.rs-
fuzz/fuzz_targets/repair.rs-fuzz_target!(|data: &[u8]| {
fuzz/fuzz_targets/repair.rs-    if let Ok(s) = std::str::from_utf8(data) {
--
crates/core/src/lib.rs-    unused_qualifications
crates/core/src/lib.rs-)]
crates/core/src/lib.rs-
crates/core/src/lib.rs://! Core parsing logic for vexy_json, a forgiving JSON parser.
crates/core/src/lib.rs-
crates/core/src/lib.rs:/// Abstract Syntax Tree components for vexy_json parsing.
crates/core/src/lib.rs-pub mod ast;
crates/core/src/lib.rs-
crates/core/src/lib.rs:/// Error types and result type alias for the vexy_json parser.
crates/core/src/lib.rs-pub mod error;
crates/core/src/lib.rs-
crates/core/src/lib.rs:/// Lexical analyzer (tokenizer) for vexy_json parsing.
crates/core/src/lib.rs-pub mod lexer;
crates/core/src/lib.rs-
crates/core/src/lib.rs-/// Parser implementation for converting tokens to JSON values.
--
crates/core/src/error/repair.rs-pub enum ParsingTier {
crates/core/src/error/repair.rs-    /// Fast path using serde_json succeeded
crates/core/src/error/repair.rs-    Fast,
crates/core/src/error/repair.rs:    /// Forgiving path using vexy_json core succeeded
crates/core/src/error/repair.rs-    Forgiving,
crates/core/src/error/repair.rs-    /// Repair path using json-repair succeeded
crates/core/src/error/repair.rs-    Repair,
--
crates/core/PHASE_2_COMPLETION_SUMMARY.md-
crates/core/PHASE_2_COMPLETION_SUMMARY.md-## Overview
crates/core/PHASE_2_COMPLETION_SUMMARY.md-
crates/core/PHASE_2_COMPLETION_SUMMARY.md:Phase 2 focused on implementing comprehensive performance optimizations for the vexy_json JSON parser. This phase involved three key areas: memory optimization, lazy evaluation, and streaming parsing capabilities.
crates/core/PHASE_2_COMPLETION_SUMMARY.md-
crates/core/PHASE_2_COMPLETION_SUMMARY.md-## Completed Components
crates/core/PHASE_2_COMPLETION_SUMMARY.md-
--
crates/core/PHASE_2_COMPLETION_SUMMARY.md-
crates/core/PHASE_2_COMPLETION_SUMMARY.md-## Conclusion
crates/core/PHASE_2_COMPLETION_SUMMARY.md-
crates/core/PHASE_2_COMPLETION_SUMMARY.md:Phase 2 successfully established a comprehensive performance optimization foundation for vexy_json. While some optimizations show overhead in their current form, the infrastructure is solid and provides multiple avenues for future improvements.
crates/core/PHASE_2_COMPLETION_SUMMARY.md-
crates/core/PHASE_2_COMPLETION_SUMMARY.md-The implementation demonstrates sophisticated memory management, streaming capabilities, and lazy evaluation patterns that will serve as the foundation for continued performance enhancements in future phases.
crates/core/PHASE_2_COMPLETION_SUMMARY.md-
--
crates/core/benchmark_results_v2.txt:   Compiling vexy_json-core v0.2.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/crates/core)
crates/core/benchmark_results_v2.txt-warning: unnecessary qualification
crates/core/benchmark_results_v2.txt-   --> crates/core/src/optimization/memory_pool.rs:157:34
crates/core/benchmark_results_v2.txt-    |
--
crates/core/benchmark_results_v2.txt-
crates/core/benchmark_results_v2.txt-Some errors have detailed explanations: E0505, E0515.
crates/core/benchmark_results_v2.txt-For more information about an error, try `rustc --explain E0505`.
crates/core/benchmark_results_v2.txt:warning: `vexy_json-core` (lib) generated 3 warnings
crates/core/benchmark_results_v2.txt:error: could not compile `vexy_json-core` (lib) due to 4 previous errors; 3 warnings emitted
crates/core/benchmark_results_v2.txt-warning: build failed, waiting for other jobs to finish...
crates/core/benchmark_results_v2.txt:warning: `vexy_json-core` (lib test) generated 3 warnings (3 duplicates)
crates/core/benchmark_results_v2.txt:error: could not compile `vexy_json-core` (lib test) due to 4 previous errors; 3 warnings emitted
--
crates/python/pyproject.toml-
crates/python/pyproject.toml-
crates/python/pyproject.toml-[project]
crates/python/pyproject.toml:name = "vexy_json"
crates/python/pyproject.toml:description = "A forgiving JSON parser - Python bindings for the Rust vexy_json library"
crates/python/pyproject.toml-readme = "README.md"
crates/python/pyproject.toml-requires-python = ">=3.8"
crates/python/pyproject.toml-classifiers = [
--
crates/python/pyproject.toml-
crates/python/pyproject.toml-
crates/python/pyproject.toml-[project.urls]
crates/python/pyproject.toml:Homepage = "https://github.com/twardoch/vexy_json"
crates/python/pyproject.toml:Repository = "https://github.com/twardoch/vexy_json.git"
crates/python/pyproject.toml:Issues = "https://github.com/twardoch/vexy_json/issues"
crates/python/pyproject.toml:Documentation = "https://twardoch.github.io/vexy_json/"
crates/python/pyproject.toml-
crates/python/pyproject.toml-
crates/python/pyproject.toml-[project.optional-dependencies]
--
crates/python/pyproject.toml-[tool.maturin]
crates/python/pyproject.toml-features = [ "pyo3/extension-module" ]
crates/python/pyproject.toml-python-source = "python"
crates/python/pyproject.toml:module-name = "vexy_json._vexy_json"
crates/python/pyproject.toml:include = [ "python/vexy_json/__init__.pyi", "python/vexy_json/py.typed" ]
crates/python/pyproject.toml-
crates/python/pyproject.toml-
crates/python/pyproject.toml-[tool.pytest.ini_options]
--
crates/core/src/error/types.rs-    }
crates/core/src/error/types.rs-}
crates/core/src/error/types.rs-
crates/core/src/error/types.rs:/// Error types that can occur during vexy_json parsing.
crates/core/src/error/types.rs-///
crates/core/src/error/types.rs-/// Each error variant contains positional information to help users
crates/core/src/error/types.rs-/// locate and fix parsing issues in their input. The error types
--
docs/assets/css/style.scss----
docs/assets/css/style.scss-
docs/assets/css/style.scss-// @import "just-the-docs";
docs/assets/css/style.scss:// Custom styles for vexy_json documentation site
docs/assets/css/style.scss-// This file extends the just-the-docs theme with custom styling
docs/assets/css/style.scss-
docs/assets/css/style.scss-// Import our tool-specific styles
--
docs/assets/css/style.scss-
docs/assets/css/style.scss-// Custom color scheme refinements
docs/assets/css/style.scss-:root {
docs/assets/css/style.scss:  --vexy_json-primary: #0969da;
docs/assets/css/style.scss:  --vexy_json-secondary: #656d76;
docs/assets/css/style.scss:  --vexy_json-accent: #0550ae;
docs/assets/css/style.scss:  --vexy_json-success: #1a7f37;
docs/assets/css/style.scss:  --vexy_json-warning: #bf8700;
docs/assets/css/style.scss:  --vexy_json-danger: #cf222e;
docs/assets/css/style.scss-}
docs/assets/css/style.scss-
docs/assets/css/style.scss-// Enhanced code blocks for JSON examples
--
docs/assets/css/style.scss-      .nav-list-link {
docs/assets/css/style.scss-        &.active {
docs/assets/css/style.scss-          font-weight: 600;
docs/assets/css/style.scss:          color: var(--vexy_json-primary);
docs/assets/css/style.scss-        }
docs/assets/css/style.scss-      }
docs/assets/css/style.scss-    }
--
docs/assets/css/style.scss-  
docs/assets/css/style.scss-  .footer-content {
docs/assets/css/style.scss-    font-size: 14px;
docs/assets/css/style.scss:    color: var(--vexy_json-secondary);
docs/assets/css/style.scss-    
docs/assets/css/style.scss-    a {
docs/assets/css/style.scss:      color: var(--vexy_json-primary);
docs/assets/css/style.scss-      text-decoration: none;
docs/assets/css/style.scss-      
docs/assets/css/style.scss-      &:hover {
--
docs/assets/css/style.scss-}
docs/assets/css/style.scss-
docs/assets/css/style.scss-// Custom button styles
docs/assets/css/style.scss:.btn-vexy_json {
docs/assets/css/style.scss:  background-color: var(--vexy_json-primary);
docs/assets/css/style.scss:  border: 1px solid var(--vexy_json-primary);
docs/assets/css/style.scss-  color: white;
docs/assets/css/style.scss-  
docs/assets/css/style.scss-  &:hover {
docs/assets/css/style.scss:    background-color: var(--vexy_json-accent);
docs/assets/css/style.scss:    border-color: var(--vexy_json-accent);
docs/assets/css/style.scss-  }
docs/assets/css/style.scss-  
docs/assets/css/style.scss-  &:focus {
--
docs/assets/css/style.scss-    th {
docs/assets/css/style.scss-      background-color: var(--code-background-color);
docs/assets/css/style.scss-      font-weight: 600;
docs/assets/css/style.scss:      color: var(--vexy_json-primary);
docs/assets/css/style.scss-    }
docs/assets/css/style.scss-    
docs/assets/css/style.scss-    td {
--
docs/assets/css/style.scss-  
docs/assets/css/style.scss-  &.callout-info {
docs/assets/css/style.scss-    background-color: rgba(9, 105, 218, 0.1);
docs/assets/css/style.scss:    border-left-color: var(--vexy_json-primary);
docs/assets/css/style.scss-    
docs/assets/css/style.scss-    .callout-title {
docs/assets/css/style.scss:      color: var(--vexy_json-primary);
docs/assets/css/style.scss-      font-weight: 600;
docs/assets/css/style.scss-    }
docs/assets/css/style.scss-  }
docs/assets/css/style.scss-  
docs/assets/css/style.scss-  &.callout-warning {
docs/assets/css/style.scss-    background-color: rgba(191, 135, 0, 0.1);
docs/assets/css/style.scss:    border-left-color: var(--vexy_json-warning);
docs/assets/css/style.scss-    
docs/assets/css/style.scss-    .callout-title {
docs/assets/css/style.scss:      color: var(--vexy_json-warning);
docs/assets/css/style.scss-      font-weight: 600;
docs/assets/css/style.scss-    }
docs/assets/css/style.scss-  }
docs/assets/css/style.scss-  
docs/assets/css/style.scss-  &.callout-success {
docs/assets/css/style.scss-    background-color: rgba(26, 127, 55, 0.1);
docs/assets/css/style.scss:    border-left-color: var(--vexy_json-success);
docs/assets/css/style.scss-    
docs/assets/css/style.scss-    .callout-title {
docs/assets/css/style.scss:      color: var(--vexy_json-success);
docs/assets/css/style.scss-      font-weight: 600;
docs/assets/css/style.scss-    }
docs/assets/css/style.scss-  }
--
docs/assets/css/style.scss-    .stat-value {
docs/assets/css/style.scss-      font-size: 2em;
docs/assets/css/style.scss-      font-weight: 700;
docs/assets/css/style.scss:      color: var(--vexy_json-primary);
docs/assets/css/style.scss-      display: block;
docs/assets/css/style.scss-    }
docs/assets/css/style.scss-    
docs/assets/css/style.scss-    .stat-label {
docs/assets/css/style.scss-      font-size: 0.9em;
docs/assets/css/style.scss:      color: var(--vexy_json-secondary);
docs/assets/css/style.scss-      margin-top: 4px;
docs/assets/css/style.scss-    }
docs/assets/css/style.scss-  }
--
docs/assets/css/style.scss-// Dark mode adjustments
docs/assets/css/style.scss-@media (prefers-color-scheme: dark) {
docs/assets/css/style.scss-  :root {
docs/assets/css/style.scss:    --vexy_json-primary: #58a6ff;
docs/assets/css/style.scss:    --vexy_json-secondary: #8b949e;
docs/assets/css/style.scss:    --vexy_json-accent: #79c0ff;
docs/assets/css/style.scss:    --vexy_json-success: #3fb950;
docs/assets/css/style.scss:    --vexy_json-warning: #d29922;
docs/assets/css/style.scss:    --vexy_json-danger: #f85149;
docs/assets/css/style.scss-  }
docs/assets/css/style.scss-}
docs/assets/css/style.scss-
--
crates/cli/Cargo.toml-[package]
crates/cli/Cargo.toml:name = "vexy_json-cli"
crates/cli/Cargo.toml-version = "1.0.0"
crates/cli/Cargo.toml-edition = "2021"
crates/cli/Cargo.toml-
crates/cli/Cargo.toml-
crates/cli/Cargo.toml-[[bin]]
crates/cli/Cargo.toml:name = "vexy_json"
crates/cli/Cargo.toml-path = "src/main.rs"
crates/cli/Cargo.toml-
crates/cli/Cargo.toml-
--
crates/cli/Cargo.toml-dirs = "5.0"
crates/cli/Cargo.toml-
crates/cli/Cargo.toml-
crates/cli/Cargo.toml:[dependencies.vexy_json-core]
crates/cli/Cargo.toml-path = "../core"
crates/cli/Cargo.toml-
crates/cli/Cargo.toml-
--
crates/core/src/error/recovery_v2.rs://! Smart error recovery engine for vexy_json parsing
crates/core/src/error/recovery_v2.rs-//!
crates/core/src/error/recovery_v2.rs-//! This module implements advanced error recovery strategies including:
crates/core/src/error/recovery_v2.rs-//! - ML-based pattern recognition for common errors
--
docs/assets/css/enhanced-features.css:/* Enhanced features for vexy_json tool */
docs/assets/css/enhanced-features.css-
docs/assets/css/enhanced-features.css-/* WASM loading animations */
docs/assets/css/enhanced-features.css-.loading-fade {
--
docs/usage.md-
docs/usage.md-# Usage Guide v2.0.0
docs/usage.md-
docs/usage.md:This guide provides in-depth examples for using `vexy_json` v2.0.0 in Rust and JavaScript/WebAssembly, including the new streaming API, parallel processing, and plugin system.
docs/usage.md-
docs/usage.md-## Basic Parsing (Rust)
docs/usage.md-
docs/usage.md:The simplest way to use vexy_json is with the `parse` function:
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_json::parse;
docs/usage.md-
docs/usage.md-fn main() {
docs/usage.md-    let json_data = r#"{ key: "value", num: 123, // comment\n trailing: [1,2,3,], hex: 0xFF }"#;
--
docs/usage.md-For more control, use `parse_with_options` and configure `ParserOptions`:
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_json::{parse_with_options, ParserOptions};
docs/usage.md-
docs/usage.md-fn main() {
docs/usage.md-    let input = "a:1, b:2";
--
docs/usage.md-See [docs/wasm.md](wasm.md) for full API details.
docs/usage.md-
docs/usage.md-```js
docs/usage.md:import init, { parse_json_with_options } from './pkg/vexy_json_wasm.js';
docs/usage.md-
docs/usage.md-await init();
docs/usage.md-const result = parse_json_with_options('{a:1}', { allow_comments: true });
--
docs/usage.md-For more control over the parsing behavior, you can use `parse_with_options` and configure `ParserOptions`.
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_json::{parse_with_options, ParserOptions};
docs/usage.md-
docs/usage.md-fn main() {
docs/usage.md-    // Example: Strict JSON parsing (disabling all forgiving features)
--
docs/usage.md-
docs/usage.md-## Handling Forgiving Features
docs/usage.md-
docs/usage.md:`vexy_json` excels at parsing JSON with common relaxations. Here are examples of how it handles them:
docs/usage.md-
docs/usage.md-### Comments
docs/usage.md-
docs/usage.md-Both single-line (`//`, `#`) and multi-line (`/* ... */`) comments are ignored.
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_json::parse;
docs/usage.md-
docs/usage.md-fn main() {
docs/usage.md-    let json_with_comments = r#"
--
docs/usage.md-Trailing commas in arrays and objects are gracefully handled.
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_json::parse;
docs/usage.md-
docs/usage.md-fn main() {
docs/usage.md-    let json_with_trailing_comma = r#"
--
docs/usage.md-Object keys do not need to be quoted, as long as they are valid identifiers.
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_json::parse;
docs/usage.md-
docs/usage.md-fn main() {
docs/usage.md-    let json_unquoted_keys = r#"{ firstName: "John", lastName: "Doe" }"#;
--
docs/usage.md-You don't need to wrap your entire input in `{}` or `[]` if it's clearly an object or an array.
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_json::parse;
docs/usage.md-
docs/usage.md-fn main() {
docs/usage.md-    // Implicit object
--
docs/usage.md-When the `newline_as_comma` option is enabled, newlines can act as implicit comma separators.
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_json::{parse_with_options, ParserOptions};
docs/usage.md-
docs/usage.md-fn main() {
docs/usage.md-    let mut options = ParserOptions::default();
--
docs/usage.md-
docs/usage.md-## Error Handling
docs/usage.md-
docs/usage.md:`vexy_json` returns a `Result<Value, Error>` which allows for robust error handling. You should always check the `Result` to handle potential parsing issues.
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_json::parse;
docs/usage.md-
docs/usage.md-fn main() {
docs/usage.md-    let invalid_json = r#"{ key: "value }"#; // Missing closing quote
--
docs/usage.md-### Basic Streaming Example
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_json::{StreamingParser, StreamingEvent};
docs/usage.md-
docs/usage.md-fn process_large_file(json_content: &str) -> Result<(), Box<dyn std::error::Error>> {
docs/usage.md-    let mut parser = StreamingParser::new();
--
docs/usage.md-Perfect for network streams or reading files in chunks:
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_json::StreamingParser;
docs/usage.md-use std::io::{BufReader, BufRead};
docs/usage.md-use std::fs::File;
docs/usage.md-
--
docs/usage.md-### Basic Parallel Parsing
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_json::{parse_parallel, ParallelOptions};
docs/usage.md-use std::fs;
docs/usage.md-
docs/usage.md-fn process_json_files(directory: &str) -> Result<(), Box<dyn std::error::Error>> {
--
docs/usage.md-### Custom Parallel Options
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_json::{parse_parallel_with_options, ParallelOptions, ParserOptions};
docs/usage.md-
docs/usage.md-let mut parallel_opts = ParallelOptions::default();
docs/usage.md-parallel_opts.num_threads = Some(8);  // Use 8 threads
--
docs/usage.md-
docs/usage.md-## Plugin System (New in v2.0.0)
docs/usage.md-
docs/usage.md:Extend vexy_json with custom functionality through plugins.
docs/usage.md-
docs/usage.md-### Creating a Custom Plugin
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_json::{Plugin, Value, Error};
docs/usage.md-use std::collections::HashMap;
docs/usage.md-
docs/usage.md-// Plugin to redact sensitive information
--
docs/usage.md-Process streams of JSON objects separated by newlines.
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_json::NdJsonParser;
docs/usage.md-
docs/usage.md-fn process_log_file(log_content: &str) -> Result<(), Box<dyn std::error::Error>> {
docs/usage.md-    let mut parser = NdJsonParser::new();
--
docs/usage.md-### Watch Mode
docs/usage.md-```bash
docs/usage.md-# Watch a file for changes and reformat on save
docs/usage.md:vexy_json --watch config.json --output formatted-config.json
docs/usage.md-
docs/usage.md-# Watch a directory
docs/usage.md:vexy_json --watch ./configs/ --output-dir ./formatted/
docs/usage.md-```
docs/usage.md-
docs/usage.md-### Batch Processing
docs/usage.md-```bash
docs/usage.md-# Process multiple files in parallel
docs/usage.md:vexy_json --parallel *.json --output-dir ./processed/
docs/usage.md-
docs/usage.md-# Apply transformations during batch processing
docs/usage.md:vexy_json --batch ./data/ --pretty --sort-keys --output-dir ./formatted/
docs/usage.md-```
docs/usage.md-
docs/usage.md-### Plugin Usage
docs/usage.md-```bash
docs/usage.md-# Use built-in plugins
docs/usage.md:vexy_json input.json --plugin redact-passwords --plugin validate-schema
docs/usage.md-
docs/usage.md-# Load custom plugin
docs/usage.md:vexy_json input.json --plugin-path ./my-plugin.wasm
docs/usage.md-```
docs/usage.md-
docs/usage.md-For more details on the web tool, including its features and how to use it, refer to the [Web Tool documentation](web-tool.md).
--
crates/python/Cargo.toml-[package]
crates/python/Cargo.toml:name = "vexy_json-python"
crates/python/Cargo.toml-version = "1.0.0"
crates/python/Cargo.toml-edition = "2021"
crates/python/Cargo.toml:description = "Python bindings for vexy_json - a forgiving JSON parser"
crates/python/Cargo.toml:repository = "https://github.com/twardoch/vexy_json"
crates/python/Cargo.toml-license = "MIT OR Apache-2.0"
crates/python/Cargo.toml-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
crates/python/Cargo.toml-
crates/python/Cargo.toml-
crates/python/Cargo.toml-[lib]
crates/python/Cargo.toml:name = "vexy_json"
crates/python/Cargo.toml-crate-type = [ "cdylib" ]
crates/python/Cargo.toml-
crates/python/Cargo.toml-
--
crates/python/Cargo.toml-features = [ "extension-module" ]
crates/python/Cargo.toml-
crates/python/Cargo.toml-
crates/python/Cargo.toml:[dependencies.vexy_json-core]
crates/python/Cargo.toml-path = "../core"
crates/python/Cargo.toml-
crates/python/Cargo.toml-
--
docs/assets/css/_tool.scss:/* Custom styles for vexy_json web tool */
docs/assets/css/_tool.scss-
docs/assets/css/_tool.scss-/* Editor enhancements */
docs/assets/css/_tool.scss-.textarea-editor {
--
docs/web-tool.md-
docs/web-tool.md-# Interactive Web Tools
docs/web-tool.md-
docs/web-tool.md:The vexy_json project provides two interactive web tools for parsing JSON with different libraries, both featuring identical modern interfaces and seamless Jekyll integration.
docs/web-tool.md-
docs/web-tool.md-## Available Tools
docs/web-tool.md-
docs/web-tool.md:### [Vexy JSON Parser]({{ '/vexy_json-tool/' | relative_url }})
docs/web-tool.md:- **Library**: vexy_json (Rust compiled to WebAssembly)
docs/web-tool.md:- **URL**: [https://twardoch.github.io/vexy_json/vexy_json-tool/](https://twardoch.github.io/vexy_json/vexy_json-tool/)
docs/web-tool.md:- **Features**: WebAssembly-powered parsing with all vexy_json forgiving features
docs/web-tool.md-
docs/web-tool.md-### [Jsonic Parser]({{ '/jsonic-tool/' | relative_url }})
docs/web-tool.md-- **Library**: jsonic (JavaScript via CDN)
docs/web-tool.md:- **URL**: [https://twardoch.github.io/vexy_json/jsonic-tool/](https://twardoch.github.io/vexy_json/jsonic-tool/)
docs/web-tool.md-- **Features**: Flexible JSON with object merging and property chains
docs/web-tool.md-
docs/web-tool.md-### [Tools Overview]({{ '/tools/' | relative_url }})
--
crates/python/python/vexy_json/py.typed:# this_file: crates/python/python/vexy_json/py.typed
crates/python/python/vexy_json/py.typed-
crates/python/python/vexy_json/py.typed-# Marker file for PEP 561 indicating that this package supports typing
--
docs/tool.md-- Plugin system support
docs/tool.md-
docs/tool.md-<div style="text-align: center; margin: 2em 0;">
docs/tool.md:  <a href="{{ '/vexy_json-tool/' | relative_url }}" class="btn btn-primary" style="font-size: 1.1em; padding: 0.7em 1.5em; margin: 0.5em;">
docs/tool.md-    🚀 Vexy JSON Tool
docs/tool.md-  </a>
docs/tool.md-  <a href="{{ '/jsonic-tool/' | relative_url }}" class="btn btn-secondary" style="font-size: 1.1em; padding: 0.7em 1.5em; margin: 0.5em;">
--
docs/tool.md-- ✅ **Dark/light themes** - Choose your preferred color scheme
docs/tool.md-- ✅ **Mobile responsive** - Works on all devices
docs/tool.md-
docs/tool.md:## [∞](#vexy_json-specific-features) Vexy JSON Specific Features
docs/tool.md-
docs/tool.md-- Single-line comments (`//` and `#`)
docs/tool.md-- Multi-line comments (`/* */`)
--
crates/core/src/ast/mod.rs-// this_file: src/ast/mod.rs
crates/core/src/ast/mod.rs-
crates/core/src/ast/mod.rs://! Abstract Syntax Tree components for vexy_json parsing.
crates/core/src/ast/mod.rs-//!
crates/core/src/ast/mod.rs://! This module contains the core AST types used throughout the vexy_json parser:
crates/core/src/ast/mod.rs-//! - `Token`: Lexical tokens produced by the lexer
crates/core/src/ast/mod.rs://! - `Value`: Parsed JSON values with support for all vexy_json extensions
crates/core/src/ast/mod.rs-//! - `Number`: Numeric value representation supporting integers and floats
crates/core/src/ast/mod.rs-//!
crates/core/src/ast/mod.rs-//! These types form the foundation of the parsing pipeline, from lexical analysis
--
docs/assets/css/tool.css:/* Custom styles for vexy_json web tool */
docs/assets/css/tool.css-
docs/assets/css/tool.css-/* Editor enhancements */
docs/assets/css/tool.css-.textarea-editor {
--
tests/supported_features.rs-use rustc_hash::FxHashMap;
tests/supported_features.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
tests/supported_features.rs-
tests/supported_features.rs-/// Helper to create expected values more easily
tests/supported_features.rs-fn obj(pairs: &[(&str, Value)]) -> Value {
--
tests/supported_features.rs-}
tests/supported_features.rs-
tests/supported_features.rs-fn n(num: i64) -> Value {
tests/supported_features.rs:    Value::Number(vexy_json::Number::Integer(num))
tests/supported_features.rs-}
tests/supported_features.rs-
tests/supported_features.rs-fn f(num: f64) -> Value {
tests/supported_features.rs:    Value::Number(vexy_json::Number::Float(num))
tests/supported_features.rs-}
tests/supported_features.rs-
tests/supported_features.rs-#[test]
--
crates/core/src/ast/token.rs-// this_file: src/ast/token.rs
crates/core/src/ast/token.rs-#![allow(missing_docs)]
crates/core/src/ast/token.rs-
crates/core/src/ast/token.rs://! Token types and definitions for the vexy_json lexer.
crates/core/src/ast/token.rs-//!
crates/core/src/ast/token.rs-//! This module defines all the token types that can be produced during
crates/core/src/ast/token.rs://! lexical analysis of vexy_json input. The tokens support both standard JSON
crates/core/src/ast/token.rs://! syntax and vexy_json's forgiving extensions like comments and unquoted strings.
crates/core/src/ast/token.rs-
crates/core/src/ast/token.rs:/// Represents a token in the vexy_json language.
crates/core/src/ast/token.rs-///
crates/core/src/ast/token.rs-/// This enum is used by the lexer to break down the input string into meaningful units.
crates/core/src/ast/token.rs-use logos::Logos;
--
crates/python/python/vexy_json/__init__.pyi:# this_file: crates/python/vexy_json.pyi
crates/python/python/vexy_json/__init__.pyi-
crates/python/python/vexy_json/__init__.pyi-"""
crates/python/python/vexy_json/__init__.pyi:Type stubs for vexy_json Python bindings.
crates/python/python/vexy_json/__init__.pyi-
crates/python/python/vexy_json/__init__.pyi:This file provides type hints for the vexy_json Python module, which is implemented in Rust.
crates/python/python/vexy_json/__init__.pyi-"""
crates/python/python/vexy_json/__init__.pyi-
crates/python/python/vexy_json/__init__.pyi-from typing import Any, Dict, List, Union, Optional, IO, Iterator, ContextManager
--
crates/python/python/vexy_json/__init__.pyi-        ValueError: If the input is not valid JSON
crates/python/python/vexy_json/__init__.pyi-        
crates/python/python/vexy_json/__init__.pyi-    Example:
crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
crates/python/python/vexy_json/__init__.pyi:        >>> result = vexy_json.parse('{"key": "value", trailing: true,}')
crates/python/python/vexy_json/__init__.pyi-        >>> print(result)
crates/python/python/vexy_json/__init__.pyi-        {'key': 'value', 'trailing': True}
crates/python/python/vexy_json/__init__.pyi-    """
--
crates/python/python/vexy_json/__init__.pyi-        ValueError: If the input is not valid JSON
crates/python/python/vexy_json/__init__.pyi-        
crates/python/python/vexy_json/__init__.pyi-    Example:
crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
crates/python/python/vexy_json/__init__.pyi:        >>> result = vexy_json.parse_with_options('key: value', implicit_top_level=True)
crates/python/python/vexy_json/__init__.pyi-        >>> print(result)
crates/python/python/vexy_json/__init__.pyi-        {'key': 'value'}
crates/python/python/vexy_json/__init__.pyi-    """
--
crates/python/python/vexy_json/__init__.pyi-        True if the input is valid, False otherwise
crates/python/python/vexy_json/__init__.pyi-        
crates/python/python/vexy_json/__init__.pyi-    Example:
crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
crates/python/python/vexy_json/__init__.pyi:        >>> vexy_json.is_valid('{"valid": true}')
crates/python/python/vexy_json/__init__.pyi-        True
crates/python/python/vexy_json/__init__.pyi:        >>> vexy_json.is_valid('invalid json')
crates/python/python/vexy_json/__init__.pyi-        False
crates/python/python/vexy_json/__init__.pyi-    """
crates/python/python/vexy_json/__init__.pyi-    ...
--
crates/python/python/vexy_json/__init__.pyi-        TypeError: If the object cannot be serialized to JSON
crates/python/python/vexy_json/__init__.pyi-        
crates/python/python/vexy_json/__init__.pyi-    Example:
crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
crates/python/python/vexy_json/__init__.pyi-        >>> data = {'key': 'value', 'number': 42}
crates/python/python/vexy_json/__init__.pyi:        >>> vexy_json.dumps(data)
crates/python/python/vexy_json/__init__.pyi-        '{"key":"value","number":42}'
crates/python/python/vexy_json/__init__.pyi:        >>> vexy_json.dumps(data, indent=2)
crates/python/python/vexy_json/__init__.pyi-        '{\n  "key": "value",\n  "number": 42\n}'
crates/python/python/vexy_json/__init__.pyi-    """
crates/python/python/vexy_json/__init__.pyi-    ...
--
crates/python/python/vexy_json/__init__.pyi-        ValueError: If the content is not valid JSON
crates/python/python/vexy_json/__init__.pyi-        
crates/python/python/vexy_json/__init__.pyi-    Example:
crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
crates/python/python/vexy_json/__init__.pyi-        >>> with open('data.json', 'r') as f:
crates/python/python/vexy_json/__init__.pyi:        ...     result = vexy_json.load(f)
crates/python/python/vexy_json/__init__.pyi-    """
crates/python/python/vexy_json/__init__.pyi-    ...
crates/python/python/vexy_json/__init__.pyi-
--
crates/python/python/vexy_json/__init__.pyi-        TypeError: If the object cannot be serialized
crates/python/python/vexy_json/__init__.pyi-        
crates/python/python/vexy_json/__init__.pyi-    Example:
crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
crates/python/python/vexy_json/__init__.pyi-        >>> data = {'key': 'value'}
crates/python/python/vexy_json/__init__.pyi-        >>> with open('output.json', 'w') as f:
crates/python/python/vexy_json/__init__.pyi:        ...     vexy_json.dump(data, f, indent=2)
crates/python/python/vexy_json/__init__.pyi-    """
crates/python/python/vexy_json/__init__.pyi-    ...
crates/python/python/vexy_json/__init__.pyi-
--
crates/python/python/vexy_json/__init__.pyi-        ImportError: If NumPy is not available
crates/python/python/vexy_json/__init__.pyi-        
crates/python/python/vexy_json/__init__.pyi-    Example:
crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
crates/python/python/vexy_json/__init__.pyi:        >>> arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
crates/python/python/vexy_json/__init__.pyi-        >>> print(type(arr))
crates/python/python/vexy_json/__init__.pyi-        <class 'numpy.ndarray'>
crates/python/python/vexy_json/__init__.pyi-    """
--
crates/python/python/vexy_json/__init__.pyi-        The parsed array with zero-copy optimization when possible
crates/python/python/vexy_json/__init__.pyi-        
crates/python/python/vexy_json/__init__.pyi-    Example:
crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
crates/python/python/vexy_json/__init__.pyi:        >>> arr = vexy_json.loads_numpy_zerocopy('[1.0, 2.0, 3.0]', dtype='float64')
crates/python/python/vexy_json/__init__.pyi-    """
crates/python/python/vexy_json/__init__.pyi-    ...
crates/python/python/vexy_json/__init__.pyi-
--
crates/python/python/vexy_json/__init__.pyi-        The parsed JSON as a DataFrame
crates/python/python/vexy_json/__init__.pyi-        
crates/python/python/vexy_json/__init__.pyi-    Example:
crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
crates/python/python/vexy_json/__init__.pyi:        >>> df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
crates/python/python/vexy_json/__init__.pyi-        >>> print(type(df))
crates/python/python/vexy_json/__init__.pyi-        <class 'pandas.core.frame.DataFrame'>
crates/python/python/vexy_json/__init__.pyi-    """
--
crates/python/python/vexy_json/__init__.pyi-    JSON files or streams.
crates/python/python/vexy_json/__init__.pyi-    
crates/python/python/vexy_json/__init__.pyi-    Example:
crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
crates/python/python/vexy_json/__init__.pyi:        >>> with vexy_json.StreamingParser() as parser:
crates/python/python/vexy_json/__init__.pyi-        ...     for item in parser.parse_stream(file_handle):
crates/python/python/vexy_json/__init__.pyi-        ...         print(item)
crates/python/python/vexy_json/__init__.pyi-    """
--
crates/python/python/vexy_json/__init__.pyi-            Iterator of parsed JSON objects
crates/python/python/vexy_json/__init__.pyi-            
crates/python/python/vexy_json/__init__.pyi-        Example:
crates/python/python/vexy_json/__init__.pyi:            >>> with vexy_json.StreamingParser() as parser:
crates/python/python/vexy_json/__init__.pyi-            ...     for item in parser.parse_stream(file_handle):
crates/python/python/vexy_json/__init__.pyi-            ...         process(item)
crates/python/python/vexy_json/__init__.pyi-        """
--
crates/python/python/vexy_json/__init__.pyi-            Iterator of parsed JSON objects
crates/python/python/vexy_json/__init__.pyi-            
crates/python/python/vexy_json/__init__.pyi-        Example:
crates/python/python/vexy_json/__init__.pyi:            >>> with vexy_json.StreamingParser() as parser:
crates/python/python/vexy_json/__init__.pyi-            ...     for item in parser.parse_lines(file_handle):
crates/python/python/vexy_json/__init__.pyi-            ...         process(item)
crates/python/python/vexy_json/__init__.pyi-        """
--
crates/core/src/optimization/mod.rs-// this_file: crates/core/src/optimization/mod.rs
crates/core/src/optimization/mod.rs-
crates/core/src/optimization/mod.rs://! Performance optimization modules for vexy_json parsing.
crates/core/src/optimization/mod.rs-//!
crates/core/src/optimization/mod.rs-//! This module contains optimized implementations of core parsing
crates/core/src/optimization/mod.rs-//! functionality to improve performance while maintaining compatibility.
--
tests/error_handling.rs-// this_file: tests/error_handling.rs
tests/error_handling.rs-
tests/error_handling.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
tests/error_handling.rs-
tests/error_handling.rs-/// Comprehensive error handling tests ported from jsonic error.test.js
tests/error_handling.rs:/// These tests ensure vexy_json properly handles malformed input and provides meaningful error messages.
tests/error_handling.rs-/// Reference: ref/jsonic/test/error.test.js
tests/error_handling.rs-
tests/error_handling.rs-#[test]
--
tests/error_handling.rs-
tests/error_handling.rs-#[test]
tests/error_handling.rs-fn test_valid_edge_cases() {
tests/error_handling.rs:    // Test what vexy_json actually supports vs jsonic expectations
tests/error_handling.rs-    // Reference: jsonic error.test.js line 205-213
tests/error_handling.rs-
tests/error_handling.rs:    // vexy_json may not support implicit null like jsonic does
tests/error_handling.rs-    assert!(
tests/error_handling.rs-        parse(",]").is_err(),
tests/error_handling.rs:        "Implicit null in array not supported in vexy_json"
tests/error_handling.rs-    );
tests/error_handling.rs-
tests/error_handling.rs:    // Object with trailing values - test if vexy_json supports this
tests/error_handling.rs-    if let Ok(obj_result) = parse("{a:}") {
tests/error_handling.rs:        if let vexy_json::Value::Object(map) = obj_result {
tests/error_handling.rs:            assert_eq!(map.get("a"), Some(&vexy_json::Value::Null));
tests/error_handling.rs-        }
tests/error_handling.rs-    } else {
tests/error_handling.rs:        // vexy_json may not support trailing colons
tests/error_handling.rs-        assert!(
tests/error_handling.rs-            parse("{a:}").is_err(),
tests/error_handling.rs:            "Trailing colon not supported in vexy_json"
tests/error_handling.rs-        );
tests/error_handling.rs-    }
tests/error_handling.rs-
--
tests/error_handling.rs-    // Special case: array notation with object content
tests/error_handling.rs-    // Reference: jsonic error.test.js line 209-213
tests/error_handling.rs-
tests/error_handling.rs:    // vexy_json doesn't support object notation inside arrays like jsonic does
tests/error_handling.rs-    assert!(
tests/error_handling.rs-        parse("[a:1]").is_err(),
tests/error_handling.rs:        "Object notation in array not supported in vexy_json"
tests/error_handling.rs-    );
tests/error_handling.rs-
tests/error_handling.rs:    // Test what vexy_json does support instead
tests/error_handling.rs-    assert!(
tests/error_handling.rs-        parse("[{\"a\":1}]").is_ok(),
tests/error_handling.rs-        "Proper object in array should work"
--
tests/error_handling.rs-    // Test handling of unprintable characters
tests/error_handling.rs-    // Reference: jsonic error.test.js line 119-122
tests/error_handling.rs-
tests/error_handling.rs:    // vexy_json may allow null characters in strings (unlike strict JSON)
tests/error_handling.rs-    // Test what actually happens vs what jsonic does
tests/error_handling.rs-    let null_char_result = parse("\"\x00\"");
tests/error_handling.rs-    if null_char_result.is_ok() {
tests/error_handling.rs:        // If vexy_json allows it, that's different from jsonic but valid
tests/error_handling.rs:        assert!(true, "vexy_json allows null character in string");
tests/error_handling.rs-    } else {
tests/error_handling.rs-        assert!(null_char_result.is_err(), "Null character should error");
tests/error_handling.rs-    }
--
tests/error_handling.rs-#[test]
tests/error_handling.rs-fn test_empty_input_edge_cases() {
tests/error_handling.rs-    // Test various empty or whitespace inputs
tests/error_handling.rs:    assert_eq!(parse("").unwrap(), vexy_json::Value::Null);
tests/error_handling.rs:    assert_eq!(parse("   ").unwrap(), vexy_json::Value::Null);
tests/error_handling.rs:    assert_eq!(parse("\t").unwrap(), vexy_json::Value::Null);
tests/error_handling.rs:    assert_eq!(parse("\n").unwrap(), vexy_json::Value::Null);
tests/error_handling.rs:    assert_eq!(parse("\r").unwrap(), vexy_json::Value::Null);
tests/error_handling.rs-}
tests/error_handling.rs-
tests/error_handling.rs-#[test]
--
tests/error_handling.rs-        "Unclosed comment after content should error"
tests/error_handling.rs-    );
tests/error_handling.rs-
tests/error_handling.rs:    // Test if vexy_json supports comments - it may not support them at all
tests/error_handling.rs-    let comment_result = parse("/* closed */ a");
tests/error_handling.rs-    if comment_result.is_ok() {
tests/error_handling.rs:        assert!(true, "vexy_json supports comments by default");
tests/error_handling.rs-    } else {
tests/error_handling.rs-        // Try with parser options
tests/error_handling.rs-        let mut opts = ParserOptions::default();
--
tests/error_handling.rs-        let with_options = parse_with_options("/* closed */ a", opts);
tests/error_handling.rs-
tests/error_handling.rs-        if with_options.is_ok() {
tests/error_handling.rs:            assert!(true, "vexy_json supports comments with options");
tests/error_handling.rs-        } else {
tests/error_handling.rs:            // vexy_json may not support comments at all - that's valid
tests/error_handling.rs-            assert!(
tests/error_handling.rs-                true,
tests/error_handling.rs:                "vexy_json does not support comments - this is valid behavior"
tests/error_handling.rs-            );
tests/error_handling.rs-        }
tests/error_handling.rs-    }
--
tests/basic_tests.rs:use vexy_json::{parse, Value};
tests/basic_tests.rs-
tests/basic_tests.rs-#[test]
tests/basic_tests.rs-fn test_parse_null() {
--
crates/core/src/ast/value.rs-// this_file: src/ast/value.rs
crates/core/src/ast/value.rs-
crates/core/src/ast/value.rs://! Value types and implementations for the vexy_json AST.
crates/core/src/ast/value.rs-//!
crates/core/src/ast/value.rs-//! This module defines the core value types that represent parsed JSON data
crates/core/src/ast/value.rs://! in the vexy_json AST. It supports all standard JSON types plus the extensions
crates/core/src/ast/value.rs://! provided by vexy_json's forgiving syntax.
crates/core/src/ast/value.rs-
crates/core/src/ast/value.rs-use rustc_hash::FxHashMap;
crates/core/src/ast/value.rs-use std::fmt;
--
tests/comprehensive_tests.rs-
tests/comprehensive_tests.rs-//! Comprehensive test suite
tests/comprehensive_tests.rs-//!
tests/comprehensive_tests.rs://! This module provides comprehensive test coverage of the vexy_json parser
tests/comprehensive_tests.rs-//! to ensure feature parity and comprehensive coverage of edge cases.
tests/comprehensive_tests.rs-
tests/comprehensive_tests.rs-use rustc_hash::FxHashMap;
tests/comprehensive_tests.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
tests/comprehensive_tests.rs-
tests/comprehensive_tests.rs-/// Helper to create expected values more easily
tests/comprehensive_tests.rs-fn obj(pairs: &[(&str, Value)]) -> Value {
--
tests/comprehensive_tests.rs-}
tests/comprehensive_tests.rs-
tests/comprehensive_tests.rs-fn n(num: i64) -> Value {
tests/comprehensive_tests.rs:    Value::Number(vexy_json::Number::Integer(num))
tests/comprehensive_tests.rs-}
tests/comprehensive_tests.rs-
tests/comprehensive_tests.rs-fn f(num: f64) -> Value {
tests/comprehensive_tests.rs:    Value::Number(vexy_json::Number::Float(num))
tests/comprehensive_tests.rs-}
tests/comprehensive_tests.rs-
tests/comprehensive_tests.rs-fn b(val: bool) -> Value {
--
tests/comprehensive_tests.rs-        let large_result = parse("999999999999999999999").unwrap();
tests/comprehensive_tests.rs-        assert!(matches!(
tests/comprehensive_tests.rs-            large_result,
tests/comprehensive_tests.rs:            Value::Number(vexy_json::Number::Float(_))
tests/comprehensive_tests.rs-        ));
tests/comprehensive_tests.rs-    }
tests/comprehensive_tests.rs-}
--
crates/python/python/vexy_json/__init__.py-"""
crates/python/python/vexy_json/__init__.py:vexy_json - A forgiving JSON parser for Python.
crates/python/python/vexy_json/__init__.py-
crates/python/python/vexy_json/__init__.py:This module provides Python bindings for the vexy_json library, a forgiving JSON parser.
crates/python/python/vexy_json/__init__.py-It allows parsing of "forgiving" JSON that includes features like comments, trailing 
crates/python/python/vexy_json/__init__.py-commas, unquoted keys, and more.
crates/python/python/vexy_json/__init__.py-
--
crates/python/python/vexy_json/__init__.py-- JSON repair functionality
crates/python/python/vexy_json/__init__.py-"""
crates/python/python/vexy_json/__init__.py-
crates/python/python/vexy_json/__init__.py:from ._vexy_json import (
crates/python/python/vexy_json/__init__.py-    parse_json as parse,
crates/python/python/vexy_json/__init__.py-    parse_with_options_py as parse_with_options,
crates/python/python/vexy_json/__init__.py-    is_valid,
--
docs/python-bindings.md-## Installation
docs/python-bindings.md-
docs/python-bindings.md-```bash
docs/python-bindings.md:pip install vexy_json
docs/python-bindings.md-```
docs/python-bindings.md-
docs/python-bindings.md-## Basic Usage
--
docs/python-bindings.md-### Parsing JSON
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-# Standard JSON parsing
docs/python-bindings.md:data = vexy_json.loads('{"name": "John", "age": 30}')
docs/python-bindings.md-print(data)  # {'name': 'John', 'age': 30}
docs/python-bindings.md-
docs/python-bindings.md-# Parse with forgiving features
docs/python-bindings.md:data = vexy_json.loads('''
docs/python-bindings.md-{
docs/python-bindings.md-    name: "John",  // Unquoted keys and comments
docs/python-bindings.md-    age: 30,       // Trailing comma is okay
--
docs/python-bindings.md-The Vexy JSON Python bindings provide full compatibility with the standard `json` module:
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-# Drop-in replacement for json.loads()
docs/python-bindings.md:data = vexy_json.loads('{"key": "value"}')
docs/python-bindings.md-
docs/python-bindings.md-# All standard json functions are available
docs/python-bindings.md:json_str = vexy_json.dumps(data)
docs/python-bindings.md:json_str = vexy_json.dumps(data, indent=2)
docs/python-bindings.md-
docs/python-bindings.md-# File operations
docs/python-bindings.md-with open('data.json', 'r') as f:
docs/python-bindings.md:    data = vexy_json.load(f)
docs/python-bindings.md-
docs/python-bindings.md-with open('output.json', 'w') as f:
docs/python-bindings.md:    vexy_json.dump(data, f, indent=2)
docs/python-bindings.md-```
docs/python-bindings.md-
docs/python-bindings.md-## Advanced Parsing Options
--
docs/python-bindings.md-### Custom Parser Options
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-# Parse with custom options
docs/python-bindings.md:data = vexy_json.parse_with_options(
docs/python-bindings.md-    json_string,
docs/python-bindings.md-    allow_comments=True,
docs/python-bindings.md-    allow_trailing_commas=True,
--
docs/python-bindings.md-### Validation
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-# Check if JSON is valid
docs/python-bindings.md:is_valid = vexy_json.is_valid('{"valid": true}')
docs/python-bindings.md-print(is_valid)  # True
docs/python-bindings.md-
docs/python-bindings.md:is_valid = vexy_json.is_valid('invalid json')
docs/python-bindings.md-print(is_valid)  # False
docs/python-bindings.md-```
docs/python-bindings.md-
--
docs/python-bindings.md-### Streaming Parser with Context Manager
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-# Parse large JSON files efficiently
docs/python-bindings.md:with vexy_json.StreamingParser() as parser:
docs/python-bindings.md-    with open('large_file.json', 'r') as f:
docs/python-bindings.md-        for item in parser.parse_stream(f):
docs/python-bindings.md-            process(item)
--
docs/python-bindings.md-### NDJSON Support
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-# Parse NDJSON (newline-delimited JSON)
docs/python-bindings.md:with vexy_json.StreamingParser() as parser:
docs/python-bindings.md-    with open('data.ndjson', 'r') as f:
docs/python-bindings.md-        for item in parser.parse_lines(f):
docs/python-bindings.md-            process(item)
--
docs/python-bindings.md-### Custom Streaming Options
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-# Create streaming parser with custom options
docs/python-bindings.md:parser = vexy_json.StreamingParser(
docs/python-bindings.md-    allow_comments=True,
docs/python-bindings.md-    allow_trailing_commas=True,
docs/python-bindings.md-    enable_repair=True
--
docs/python-bindings.md-### Direct Array Parsing
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-import numpy as np
docs/python-bindings.md-
docs/python-bindings.md-# Parse JSON array directly to NumPy array
docs/python-bindings.md:arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
docs/python-bindings.md-print(type(arr))  # <class 'numpy.ndarray'>
docs/python-bindings.md-print(arr.dtype)  # int64
docs/python-bindings.md-
docs/python-bindings.md-# Specify dtype
docs/python-bindings.md:arr = vexy_json.loads_numpy('[1.1, 2.2, 3.3]', dtype='float32')
docs/python-bindings.md-print(arr.dtype)  # float32
docs/python-bindings.md-```
docs/python-bindings.md-
docs/python-bindings.md-### Zero-Copy Optimization
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-# Optimized parsing for numeric data
docs/python-bindings.md:arr = vexy_json.loads_numpy_zerocopy('[1, 2, 3, 4, 5]', dtype='int64')
docs/python-bindings.md-# Uses zero-copy when possible for better performance
docs/python-bindings.md-```
docs/python-bindings.md-
docs/python-bindings.md-### Mixed Data Types
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-# Handle mixed arrays
docs/python-bindings.md:arr = vexy_json.loads_numpy('[1, 2.5, 3, 4.7]')
docs/python-bindings.md-print(arr.dtype)  # float64 (automatically promoted)
docs/python-bindings.md-
docs/python-bindings.md-# Non-numeric data falls back to object arrays
docs/python-bindings.md:arr = vexy_json.loads_numpy('["a", "b", "c"]')
docs/python-bindings.md-print(arr.dtype)  # object
docs/python-bindings.md-```
docs/python-bindings.md-
--
docs/python-bindings.md-### DataFrame Conversion
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-import pandas as pd
docs/python-bindings.md-
docs/python-bindings.md-# Parse JSON to DataFrame
docs/python-bindings.md-json_data = '[{"name": "John", "age": 30}, {"name": "Jane", "age": 25}]'
docs/python-bindings.md:df = vexy_json.loads_dataframe(json_data)
docs/python-bindings.md-print(type(df))  # <class 'pandas.core.frame.DataFrame'>
docs/python-bindings.md-
docs/python-bindings.md-# Specify orientation
docs/python-bindings.md:df = vexy_json.loads_dataframe(json_data, orient='records')
docs/python-bindings.md-```
docs/python-bindings.md-
docs/python-bindings.md-## Error Handling
--
docs/python-bindings.md-### Parse Errors
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-try:
docs/python-bindings.md:    data = vexy_json.loads('invalid json')
docs/python-bindings.md-except ValueError as e:
docs/python-bindings.md-    print(f"Parse error: {e}")
docs/python-bindings.md-```
--
docs/python-bindings.md-### Repair Functionality
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-# Automatic repair of common JSON issues
docs/python-bindings.md-try:
docs/python-bindings.md:    data = vexy_json.loads('{"key": "value",}')  # Trailing comma
docs/python-bindings.md-    print(data)  # Successfully parsed
docs/python-bindings.md-except ValueError as e:
docs/python-bindings.md-    print(f"Even repair failed: {e}")
--
docs/python-bindings.md-### Choosing the Right Function
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-# For standard JSON, use loads() for compatibility
docs/python-bindings.md:data = vexy_json.loads(standard_json)
docs/python-bindings.md-
docs/python-bindings.md-# For forgiving JSON, use parse_with_options()
docs/python-bindings.md:data = vexy_json.parse_with_options(
docs/python-bindings.md-    forgiving_json,
docs/python-bindings.md-    allow_comments=True,
docs/python-bindings.md-    allow_trailing_commas=True
docs/python-bindings.md-)
docs/python-bindings.md-
docs/python-bindings.md-# For numerical data, use NumPy integration
docs/python-bindings.md:arr = vexy_json.loads_numpy(json_array)
docs/python-bindings.md-
docs/python-bindings.md-# For tabular data, use pandas integration
docs/python-bindings.md:df = vexy_json.loads_dataframe(json_records)
docs/python-bindings.md-```
docs/python-bindings.md-
docs/python-bindings.md-### Memory Efficiency
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-# Streaming for large files
docs/python-bindings.md:with vexy_json.StreamingParser() as parser:
docs/python-bindings.md-    for item in parser.parse_stream(large_file):
docs/python-bindings.md-        # Process items one at a time
docs/python-bindings.md-        # Memory usage stays constant
--
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md-from typing import Any, Dict, List, Optional, Union
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-def process_json(json_str: str) -> Dict[str, Any]:
docs/python-bindings.md:    return vexy_json.loads(json_str)
docs/python-bindings.md-
docs/python-bindings.md-def safe_parse(json_str: str) -> Optional[Dict[str, Any]]:
docs/python-bindings.md-    try:
docs/python-bindings.md:        return vexy_json.loads(json_str)
docs/python-bindings.md-    except ValueError:
docs/python-bindings.md-        return None
docs/python-bindings.md-```
--
docs/python-bindings.md-### Error Handling
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-def safe_parse_json(json_str: str, default=None):
docs/python-bindings.md-    """Safely parse JSON with fallback."""
docs/python-bindings.md-    try:
docs/python-bindings.md:        return vexy_json.loads(json_str)
docs/python-bindings.md-    except ValueError as e:
docs/python-bindings.md-        print(f"JSON parse error: {e}")
docs/python-bindings.md-        return default
--
docs/python-bindings.md-### Memory Management
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-# For large datasets, prefer streaming
docs/python-bindings.md-def process_large_json(filename):
docs/python-bindings.md:    with vexy_json.StreamingParser() as parser:
docs/python-bindings.md-        with open(filename, 'r') as f:
docs/python-bindings.md-            for item in parser.parse_stream(f):
docs/python-bindings.md-                yield process_item(item)
--
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md-import requests
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-response = requests.get('https://api.example.com/data')
docs/python-bindings.md:data = vexy_json.loads(response.text)
docs/python-bindings.md-```
docs/python-bindings.md-
docs/python-bindings.md-### With FastAPI
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md-from fastapi import FastAPI
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-app = FastAPI()
docs/python-bindings.md-
docs/python-bindings.md-@app.post("/parse-json")
docs/python-bindings.md-async def parse_json(content: str):
docs/python-bindings.md-    try:
docs/python-bindings.md:        data = vexy_json.loads(content)
docs/python-bindings.md-        return {"success": True, "data": data}
docs/python-bindings.md-    except ValueError as e:
docs/python-bindings.md-        return {"success": False, "error": str(e)}
--
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md-from django.http import JsonResponse
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-def parse_json_view(request):
docs/python-bindings.md-    try:
docs/python-bindings.md:        data = vexy_json.loads(request.body)
docs/python-bindings.md-        # Process data
docs/python-bindings.md-        return JsonResponse({"success": True})
docs/python-bindings.md-    except ValueError as e:
--
docs/python-bindings.md-data = json.loads(json_string)
docs/python-bindings.md-
docs/python-bindings.md-# After
docs/python-bindings.md:import vexy_json
docs/python-bindings.md:data = vexy_json.loads(json_string)  # Same interface, more forgiving
docs/python-bindings.md-```
docs/python-bindings.md-
docs/python-bindings.md-### Gradual Migration
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md-import json
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-def parse_json_fallback(json_str):
docs/python-bindings.md-    """Try standard JSON first, fall back to Vexy JSON."""
docs/python-bindings.md-    try:
docs/python-bindings.md-        return json.loads(json_str)
docs/python-bindings.md-    except json.JSONDecodeError:
docs/python-bindings.md:        return vexy_json.loads(json_str)  # More forgiving parsing
docs/python-bindings.md-```
docs/python-bindings.md-
docs/python-bindings.md-## Advanced Features
--
docs/python-bindings.md-### Custom Serialization
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-from dataclasses import dataclass
docs/python-bindings.md-
docs/python-bindings.md-@dataclass
--
docs/python-bindings.md-
docs/python-bindings.md-# Convert to dict first, then serialize
docs/python-bindings.md-person = Person("John", 30)
docs/python-bindings.md:json_str = vexy_json.dumps(person.__dict__)
docs/python-bindings.md-```
docs/python-bindings.md-
docs/python-bindings.md-### Configuration Management
docs/python-bindings.md-
docs/python-bindings.md-```python
docs/python-bindings.md:import vexy_json
docs/python-bindings.md-
docs/python-bindings.md-# Parse configuration files with comments
docs/python-bindings.md-config_str = '''
--
docs/python-bindings.md-}
docs/python-bindings.md-'''
docs/python-bindings.md-
docs/python-bindings.md:config = vexy_json.loads(config_str)
docs/python-bindings.md-```
docs/python-bindings.md-
docs/python-bindings.md-This comprehensive Python API provides all the power of Vexy JSON with the familiar interface Python developers expect.
--
docs/benchmarks.md-
docs/benchmarks.md-# Benchmark Results
docs/benchmarks.md-
docs/benchmarks.md:This section presents the parsing performance benchmarks for `vexy_json` (Rust).
docs/benchmarks.md-Benchmarks were run on the following environment:
docs/benchmarks.md-
docs/benchmarks.md-*   **CPU**: [e.g., Intel Core i7-10700K]
--
docs/benchmarks.md-
docs/benchmarks.md-Lower values (nanoseconds per iteration) are better.
docs/benchmarks.md-
docs/benchmarks.md:| Test Case | `vexy_json` (ns/iter) |
docs/benchmarks.md-|---|---|
docs/benchmarks.md-| simple | 7782 |
docs/benchmarks.md-| array | 7836 |
--
docs/build-status.md-# Build Status Dashboard
docs/build-status.md-
docs/build-status.md:This page provides an overview of the current build status and health metrics for the vexy_json project.
docs/build-status.md-
docs/build-status.md-## Continuous Integration Status
docs/build-status.md-
--
docs/build-status.md-
docs/build-status.md-| Workflow | Status | Description |
docs/build-status.md-|----------|--------|-------------|
docs/build-status.md:| WASM Build | [![Build Status](https://github.com/twardoch/vexy_json/workflows/Build%20and%20Deploy%20WASM/badge.svg)](https://github.com/twardoch/vexy_json/actions/workflows/wasm-build.yml) | Builds WebAssembly module and deploys to GitHub Pages |
docs/build-status.md:| Security Audit | [![Security Audit](https://github.com/twardoch/vexy_json/workflows/Security%20Audit/badge.svg)](https://github.com/twardoch/vexy_json/actions/workflows/security.yml) | Checks for security vulnerabilities in dependencies |
docs/build-status.md:| Release | [![Release](https://github.com/twardoch/vexy_json/workflows/Release/badge.svg)](https://github.com/twardoch/vexy_json/actions/workflows/release.yml) | Automated release process for tagged versions |
docs/build-status.md-
docs/build-status.md-### Package Registries
docs/build-status.md-
docs/build-status.md-| Registry | Version | Downloads |
docs/build-status.md-|----------|---------|-----------|
docs/build-status.md:| crates.io | [![crates.io](https://img.shields.io/crates/v/vexy_json.svg)](https://crates.io/crates/vexy_json) | [![Downloads](https://img.shields.io/crates/d/vexy_json.svg)](https://crates.io/crates/vexy_json) |
docs/build-status.md:| docs.rs | [![docs.rs](https://docs.rs/vexy_json/badge.svg)](https://docs.rs/vexy_json) | - |
docs/build-status.md:| npm | [![npm](https://img.shields.io/npm/v/@vexy_json/vexy_json.svg)](https://www.npmjs.com/package/@vexy_json/vexy_json) | [![npm downloads](https://img.shields.io/npm/dm/@vexy_json/vexy_json.svg)](https://www.npmjs.com/package/@vexy_json/vexy_json) |
docs/build-status.md-
docs/build-status.md-## Code Quality Metrics
docs/build-status.md-
--
docs/build-status.md-## Deployment Status
docs/build-status.md-
docs/build-status.md-### Live Deployments
docs/build-status.md:- **Vexy JSON Tool**: [https://twardoch.github.io/vexy_json/vexy_json-tool/](https://twardoch.github.io/vexy_json/vexy_json-tool/)
docs/build-status.md:- **Jsonic Tool**: [https://twardoch.github.io/vexy_json/jsonic-tool/](https://twardoch.github.io/vexy_json/jsonic-tool/)
docs/build-status.md:- **Tools Overview**: [https://twardoch.github.io/vexy_json/tools/](https://twardoch.github.io/vexy_json/tools/)
docs/build-status.md:- **Documentation**: [https://docs.rs/vexy_json](https://docs.rs/vexy_json)
docs/build-status.md-- **GitHub Pages**: Automatically deployed on main branch updates
docs/build-status.md-
docs/build-status.md-### Release Artifacts
--
docs/build-status.md-- **As Needed**: Bug fixes and feature updates
docs/build-status.md-
docs/build-status.md-### Contact
docs/build-status.md:For build failures or urgent issues, please [create an issue](https://github.com/twardoch/vexy_json/issues/new) on GitHub.
--
tests/lexer_tests.rs-// this_file: tests/lexer_tests.rs
tests/lexer_tests.rs-
tests/lexer_tests.rs:use vexy_json::{parse, Value};
tests/lexer_tests.rs-
tests/lexer_tests.rs-/// Lexer-specific tests ported from ref/jsonic/test/lex.test.js
tests/lexer_tests.rs-///
tests/lexer_tests.rs:/// These tests focus on the tokenization and lexing behavior of vexy_json,
tests/lexer_tests.rs-/// exploring how the parser handles various input patterns at the lexer level.
tests/lexer_tests.rs:/// Uses adaptive testing to discover vexy_json's actual capabilities.
tests/lexer_tests.rs-
tests/lexer_tests.rs-#[test]
tests/lexer_tests.rs-fn test_basic_specials() {
--
tests/lexer_tests.rs-    // Test empty input - should parse successfully or fail gracefully
tests/lexer_tests.rs-    let result = parse("");
tests/lexer_tests.rs-    match result {
tests/lexer_tests.rs:        Ok(_) => println!("✓ vexy_json handles empty input successfully"),
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json reports error for empty input"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Test whitespace handling
tests/lexer_tests.rs-    let result = parse("   ");
tests/lexer_tests.rs-    match result {
tests/lexer_tests.rs:        Ok(_) => println!("✓ vexy_json handles whitespace-only input"),
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json reports error for whitespace-only input"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Test single number
--
tests/lexer_tests.rs-                "Expected number 123, got: {:?}",
tests/lexer_tests.rs-                val
tests/lexer_tests.rs-            );
tests/lexer_tests.rs:            println!("✓ vexy_json parses single number: 123");
tests/lexer_tests.rs-        }
tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse single number: {}", e),
tests/lexer_tests.rs-    }
--
tests/lexer_tests.rs-    match parse("123%") {
tests/lexer_tests.rs-        Ok(val) => {
tests/lexer_tests.rs-            // Could be parsed as text or cause an error
tests/lexer_tests.rs:            println!("ℹ vexy_json parsed '123%' as: {:?}", val);
tests/lexer_tests.rs-        }
tests/lexer_tests.rs-        Err(_) => {
tests/lexer_tests.rs:            println!("ℹ vexy_json treats '123%' as invalid input");
tests/lexer_tests.rs-        }
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-}
--
tests/lexer_tests.rs-    // Single space
tests/lexer_tests.rs-    let result = parse(" ");
tests/lexer_tests.rs-    match result {
tests/lexer_tests.rs:        Ok(_) => println!("✓ vexy_json handles single space"),
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json reports error for single space"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Tab character
tests/lexer_tests.rs-    let result = parse("\t");
tests/lexer_tests.rs-    match result {
tests/lexer_tests.rs:        Ok(_) => println!("✓ vexy_json handles tab character"),
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json reports error for tab character"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Mixed spaces and tabs
tests/lexer_tests.rs-    let result = parse(" \t ");
tests/lexer_tests.rs-    match result {
tests/lexer_tests.rs:        Ok(_) => println!("✓ vexy_json handles mixed whitespace"),
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json reports error for mixed whitespace"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-}
tests/lexer_tests.rs-
--
tests/lexer_tests.rs-    // Single opening brace
tests/lexer_tests.rs-    let result = parse("{");
tests/lexer_tests.rs-    match result {
tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single '{{' successfully"),
tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for unmatched opening brace"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Double opening braces
tests/lexer_tests.rs-    let result = parse("{{");
tests/lexer_tests.rs-    match result {
tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed '{{' successfully"),
tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for double opening braces"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Single closing brace
tests/lexer_tests.rs-    let result = parse("}");
tests/lexer_tests.rs-    match result {
tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single '}}' successfully"),
tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for unmatched closing brace"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Proper brace pair
--
tests/lexer_tests.rs-            match &val {
tests/lexer_tests.rs-                Value::Object(obj) => {
tests/lexer_tests.rs-                    assert!(obj.is_empty(), "Expected empty object, got: {:?}", obj);
tests/lexer_tests.rs:                    println!("✓ vexy_json parses empty object correctly");
tests/lexer_tests.rs-                }
tests/lexer_tests.rs-                _ => panic!("Expected object, got: {:?}", val),
tests/lexer_tests.rs-            }
--
tests/lexer_tests.rs-    // Single opening bracket
tests/lexer_tests.rs-    let result = parse("[");
tests/lexer_tests.rs-    match result {
tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single '[' successfully"),
tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for unmatched opening bracket"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Single closing bracket
tests/lexer_tests.rs-    let result = parse("]");
tests/lexer_tests.rs-    match result {
tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single ']' successfully"),
tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for unmatched closing bracket"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Proper bracket pair
--
tests/lexer_tests.rs-            match &val {
tests/lexer_tests.rs-                Value::Array(arr) => {
tests/lexer_tests.rs-                    assert!(arr.is_empty(), "Expected empty array, got: {:?}", arr);
tests/lexer_tests.rs:                    println!("✓ vexy_json parses empty array correctly");
tests/lexer_tests.rs-                }
tests/lexer_tests.rs-                _ => panic!("Expected array, got: {:?}", val),
tests/lexer_tests.rs-            }
--
tests/lexer_tests.rs-    // Single colon
tests/lexer_tests.rs-    let result = parse(":");
tests/lexer_tests.rs-    match result {
tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single ':' successfully"),
tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for lone colon"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Double colon
tests/lexer_tests.rs-    let result = parse("::");
tests/lexer_tests.rs-    match result {
tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed '::' successfully"),
tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for double colon"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Single comma
tests/lexer_tests.rs-    let result = parse(",");
tests/lexer_tests.rs-    match result {
tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single ',' successfully"),
tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for lone comma"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Double comma
tests/lexer_tests.rs-    let result = parse(",,");
tests/lexer_tests.rs-    match result {
tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed ',,' successfully"),
tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for double comma"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-}
tests/lexer_tests.rs-
--
tests/lexer_tests.rs-            match &val {
tests/lexer_tests.rs-                Value::String(s) => {
tests/lexer_tests.rs-                    assert_eq!(s, "a", "Expected 'a', got: {}", s);
tests/lexer_tests.rs:                    println!("✓ vexy_json supports # comments in lexer");
tests/lexer_tests.rs-                }
tests/lexer_tests.rs:                _ => println!("ℹ vexy_json parsed 'a#b' as: {:?}", val),
tests/lexer_tests.rs-            }
tests/lexer_tests.rs-        }
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json doesn't support # comments or treats as error"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Block comment
tests/lexer_tests.rs-    match parse("a/*x*/b") {
tests/lexer_tests.rs-        Ok(val) => {
tests/lexer_tests.rs:            println!("ℹ vexy_json parsed 'a/*x*/b' as: {:?}", val);
tests/lexer_tests.rs-        }
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json doesn't support /* */ comments or treats as error"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Comment with newline
tests/lexer_tests.rs-    match parse("a#b\nc") {
tests/lexer_tests.rs-        Ok(val) => {
tests/lexer_tests.rs:            println!("ℹ vexy_json parsed 'a#b\\nc' as: {:?}", val);
tests/lexer_tests.rs-        }
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json has issues with comments and newlines"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-}
tests/lexer_tests.rs-
--
tests/lexer_tests.rs-    // True value
tests/lexer_tests.rs-    match parse("true") {
tests/lexer_tests.rs-        Ok(val) => match &val {
tests/lexer_tests.rs:            Value::Bool(true) => println!("✓ vexy_json lexer handles 'true' correctly"),
tests/lexer_tests.rs-            _ => panic!("Expected true boolean, got: {:?}", val),
tests/lexer_tests.rs-        },
tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse 'true': {}", e),
--
tests/lexer_tests.rs-    // False value
tests/lexer_tests.rs-    match parse("false") {
tests/lexer_tests.rs-        Ok(val) => match &val {
tests/lexer_tests.rs:            Value::Bool(false) => println!("✓ vexy_json lexer handles 'false' correctly"),
tests/lexer_tests.rs-            _ => panic!("Expected false boolean, got: {:?}", val),
tests/lexer_tests.rs-        },
tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse 'false': {}", e),
--
tests/lexer_tests.rs-    // Null value
tests/lexer_tests.rs-    match parse("null") {
tests/lexer_tests.rs-        Ok(val) => match &val {
tests/lexer_tests.rs:            Value::Null => println!("✓ vexy_json lexer handles 'null' correctly"),
tests/lexer_tests.rs-            _ => panic!("Expected null, got: {:?}", val),
tests/lexer_tests.rs-        },
tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse 'null': {}", e),
--
tests/lexer_tests.rs-            match &val {
tests/lexer_tests.rs-                Value::String(s) => {
tests/lexer_tests.rs-                    assert_eq!(s, "truex", "Expected text 'truex', got: {}", s);
tests/lexer_tests.rs:                    println!("✓ vexy_json lexer treats 'truex' as text, not boolean");
tests/lexer_tests.rs-                }
tests/lexer_tests.rs:                _ => println!("ℹ vexy_json lexer parsed 'truex' as: {:?}", val),
tests/lexer_tests.rs-            }
tests/lexer_tests.rs-        }
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects 'truex'"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-}
tests/lexer_tests.rs-
--
tests/lexer_tests.rs-    match parse("321") {
tests/lexer_tests.rs-        Ok(val) => {
tests/lexer_tests.rs-            assert!(val.as_f64() == Some(321.0), "Expected 321, got: {:?}", val);
tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles integers correctly");
tests/lexer_tests.rs-        }
tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse integer: {}", e),
tests/lexer_tests.rs-    }
--
tests/lexer_tests.rs-    match parse("0") {
tests/lexer_tests.rs-        Ok(val) => {
tests/lexer_tests.rs-            assert!(val.as_f64() == Some(0.0), "Expected 0, got: {:?}", val);
tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles zero correctly");
tests/lexer_tests.rs-        }
tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse zero: {}", e),
tests/lexer_tests.rs-    }
--
tests/lexer_tests.rs-    match parse("1.2") {
tests/lexer_tests.rs-        Ok(val) => {
tests/lexer_tests.rs-            assert!(val.as_f64() == Some(1.2), "Expected 1.2, got: {:?}", val);
tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles decimal numbers correctly");
tests/lexer_tests.rs-        }
tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse decimal: {}", e),
tests/lexer_tests.rs-    }
--
tests/lexer_tests.rs-    match parse("-1.2") {
tests/lexer_tests.rs-        Ok(val) => {
tests/lexer_tests.rs-            assert!(val.as_f64() == Some(-1.2), "Expected -1.2, got: {:?}", val);
tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles negative numbers correctly");
tests/lexer_tests.rs-        }
tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse negative number: {}", e),
tests/lexer_tests.rs-    }
--
tests/lexer_tests.rs-    match parse("1e2") {
tests/lexer_tests.rs-        Ok(val) => {
tests/lexer_tests.rs-            assert!(val.as_f64() == Some(100.0), "Expected 100, got: {:?}", val);
tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles scientific notation");
tests/lexer_tests.rs-        }
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer doesn't support scientific notation"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Hexadecimal
tests/lexer_tests.rs-    match parse("0xA") {
tests/lexer_tests.rs-        Ok(val) => {
tests/lexer_tests.rs-            assert!(val.as_f64() == Some(10.0), "Expected 10, got: {:?}", val);
tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles hexadecimal numbers");
tests/lexer_tests.rs-        }
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer doesn't support hexadecimal"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Number with invalid trailing characters
--
tests/lexer_tests.rs-            match &val {
tests/lexer_tests.rs-                Value::String(s) => {
tests/lexer_tests.rs-                    assert_eq!(s, "1x", "Expected text '1x', got: {}", s);
tests/lexer_tests.rs:                    println!("✓ vexy_json lexer treats '1x' as text");
tests/lexer_tests.rs-                }
tests/lexer_tests.rs:                _ => println!("ℹ vexy_json lexer parsed '1x' as: {:?}", val),
tests/lexer_tests.rs-            }
tests/lexer_tests.rs-        }
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects '1x'"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-}
tests/lexer_tests.rs-
--
tests/lexer_tests.rs-        Ok(val) => match &val {
tests/lexer_tests.rs-            Value::String(s) => {
tests/lexer_tests.rs-                assert!(s.is_empty(), "Expected empty string, got: '{}'", s);
tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles empty double-quoted strings");
tests/lexer_tests.rs-            }
tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
tests/lexer_tests.rs-        },
--
tests/lexer_tests.rs-        Ok(val) => match &val {
tests/lexer_tests.rs-            Value::String(s) => {
tests/lexer_tests.rs-                assert_eq!(s, "abc", "Expected 'abc', got: '{}'", s);
tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles double-quoted strings with content");
tests/lexer_tests.rs-            }
tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
tests/lexer_tests.rs-        },
--
tests/lexer_tests.rs-        Ok(val) => match &val {
tests/lexer_tests.rs-            Value::String(s) => {
tests/lexer_tests.rs-                assert_eq!(s, "abc", "Expected 'abc', got: '{}'", s);
tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles single-quoted strings");
tests/lexer_tests.rs-            }
tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
tests/lexer_tests.rs-        },
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer doesn't support single-quoted strings"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Unterminated string
tests/lexer_tests.rs-    let result = parse("\"abc");
tests/lexer_tests.rs-    match result {
tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json lexer unexpectedly parsed unterminated string"),
tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json lexer properly reports error for unterminated string"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // String with escape sequences
--
tests/lexer_tests.rs-        Ok(val) => match &val {
tests/lexer_tests.rs-            Value::String(s) => {
tests/lexer_tests.rs-                assert_eq!(s, "\t", "Expected tab character, got: '{:?}'", s);
tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles escape sequences");
tests/lexer_tests.rs-            }
tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
tests/lexer_tests.rs-        },
--
tests/lexer_tests.rs-        Ok(val) => match &val {
tests/lexer_tests.rs-            Value::String(s) => {
tests/lexer_tests.rs-                assert_eq!(s, "@", "Expected '@', got: '{}'", s);
tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles unicode escapes");
tests/lexer_tests.rs-            }
tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
tests/lexer_tests.rs-        },
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer doesn't support unicode escapes"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-}
tests/lexer_tests.rs-
--
tests/lexer_tests.rs-        Ok(val) => match &val {
tests/lexer_tests.rs-            Value::String(s) => {
tests/lexer_tests.rs-                assert_eq!(s, "a-b", "Expected 'a-b', got: '{}'", s);
tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles text with hyphens");
tests/lexer_tests.rs-            }
tests/lexer_tests.rs:            _ => println!("ℹ vexy_json lexer parsed 'a-b' as: {:?}", val),
tests/lexer_tests.rs-        },
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects 'a-b'"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Text with special characters
--
tests/lexer_tests.rs-        Ok(val) => match &val {
tests/lexer_tests.rs-            Value::String(s) => {
tests/lexer_tests.rs-                assert_eq!(s, "$a_", "Expected '$a_', got: '{}'", s);
tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles text with $ and _");
tests/lexer_tests.rs-            }
tests/lexer_tests.rs:            _ => println!("ℹ vexy_json lexer parsed '$a_' as: {:?}", val),
tests/lexer_tests.rs-        },
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects '$a_'"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Text with punctuation
--
tests/lexer_tests.rs-        Ok(val) => match &val {
tests/lexer_tests.rs-            Value::String(s) => {
tests/lexer_tests.rs-                assert_eq!(s, "!%~", "Expected '!%~', got: '{}'", s);
tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles punctuation text");
tests/lexer_tests.rs-            }
tests/lexer_tests.rs:            _ => println!("ℹ vexy_json lexer parsed '!%~' as: {:?}", val),
tests/lexer_tests.rs-        },
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects '!%~'"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-}
tests/lexer_tests.rs-
--
tests/lexer_tests.rs-                    obj.get("b").and_then(|v| v.as_f64()) == Some(2.0),
tests/lexer_tests.rs-                    "Expected b=2"
tests/lexer_tests.rs-                );
tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles newlines in objects correctly");
tests/lexer_tests.rs-            }
tests/lexer_tests.rs-            _ => panic!("Expected object, got: {:?}", val),
tests/lexer_tests.rs-        },
--
tests/lexer_tests.rs-    // Test if newlines can act as separators
tests/lexer_tests.rs-    match parse("a\nb") {
tests/lexer_tests.rs-        Ok(val) => {
tests/lexer_tests.rs:            println!("ℹ vexy_json lexer parsed 'a\\nb' as: {:?}", val);
tests/lexer_tests.rs-        }
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects 'a\\nb'"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-}
tests/lexer_tests.rs-
--
tests/lexer_tests.rs-        Ok(val) => match &val {
tests/lexer_tests.rs-            Value::String(s) => {
tests/lexer_tests.rs-                assert_eq!(s, "[{}]:,", "Expected '[{{}}]:,', got: '{}'", s);
tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles special chars in strings");
tests/lexer_tests.rs-            }
tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
tests/lexer_tests.rs-        },
--
tests/lexer_tests.rs-    match parse("1%") {
tests/lexer_tests.rs-        Ok(val) => {
tests/lexer_tests.rs-            // Could be treated as text or cause error
tests/lexer_tests.rs:            println!("ℹ vexy_json lexer parsed '1%' as: {:?}", val);
tests/lexer_tests.rs-        }
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects '1%'"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-
tests/lexer_tests.rs-    // Object key followed by colon
tests/lexer_tests.rs-    match parse("a:") {
tests/lexer_tests.rs-        Ok(val) => {
tests/lexer_tests.rs:            println!("ℹ vexy_json lexer parsed 'a:' as: {:?}", val);
tests/lexer_tests.rs-        }
tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects incomplete key-value pair"),
tests/lexer_tests.rs-    }
tests/lexer_tests.rs-}
tests/lexer_tests.rs-
tests/lexer_tests.rs:/// Comprehensive lexer test that explores vexy_json's tokenization capabilities
tests/lexer_tests.rs-///
tests/lexer_tests.rs:/// This test serves as a diagnostic tool to understand how vexy_json's lexer
tests/lexer_tests.rs-/// handles various input patterns, providing insight into the tokenization
tests/lexer_tests.rs-/// process that underlies the parsing functionality.
tests/lexer_tests.rs-#[test]
--
tests/lib_integration.rs-// this_file: tests/lib_integration.rs
tests/lib_integration.rs-
tests/lib_integration.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
tests/lib_integration.rs:use vexy_json_core::lexer::{JsonLexer, Lexer};
tests/lib_integration.rs-
tests/lib_integration.rs-#[test]
tests/lib_integration.rs-fn basic_parsing() {
--
tests/property_tests.rs-// this_file: tests/property_tests.rs
tests/property_tests.rs-
tests/property_tests.rs-use proptest::prelude::*;
tests/property_tests.rs:use vexy_json::{parse, Number, Value};
tests/property_tests.rs-use quickcheck::{Arbitrary, Gen, QuickCheck, TestResult};
tests/property_tests.rs-use quickcheck_macros::quickcheck;
tests/property_tests.rs:use vexy_json_core::{parse_with_options, ParserOptions};
tests/property_tests.rs-use rustc_hash::FxHashMap;
tests/property_tests.rs:// use vexy_json_core::streaming::{JsonEventHandler, parse_streaming, StreamingEvent};
tests/property_tests.rs-
tests/property_tests.rs-// A strategy for generating simple JSON strings
tests/property_tests.rs-fn simple_string_strategy() -> impl Strategy<Value = String> {
--
tests/property_tests.rs-// }
tests/property_tests.rs-// 
tests/property_tests.rs-// impl JsonEventHandler for EventCollector {
tests/property_tests.rs://     fn on_object_start(&mut self) -> Result<(), vexy_json_core::error::Error> {
tests/property_tests.rs-//         self.events.push("object_start".to_string());
tests/property_tests.rs-//         Ok(())
tests/property_tests.rs-//     }
tests/property_tests.rs-//     
tests/property_tests.rs://     fn on_object_end(&mut self) -> Result<(), vexy_json_core::error::Error> {
tests/property_tests.rs-//         self.events.push("object_end".to_string());
tests/property_tests.rs-//         Ok(())
tests/property_tests.rs-//     }
tests/property_tests.rs-//     
tests/property_tests.rs://     fn on_array_start(&mut self) -> Result<(), vexy_json_core::error::Error> {
tests/property_tests.rs-//         self.events.push("array_start".to_string());
tests/property_tests.rs-//         Ok(())
tests/property_tests.rs-//     }
tests/property_tests.rs-//     
tests/property_tests.rs://     fn on_array_end(&mut self) -> Result<(), vexy_json_core::error::Error> {
tests/property_tests.rs-//         self.events.push("array_end".to_string());
tests/property_tests.rs-//         Ok(())
tests/property_tests.rs-//     }
tests/property_tests.rs-//     
tests/property_tests.rs://     fn on_key(&mut self, key: &str) -> Result<(), vexy_json_core::error::Error> {
tests/property_tests.rs-//         self.events.push(format!("key:{}", key));
tests/property_tests.rs-//         Ok(())
tests/property_tests.rs-//     }
tests/property_tests.rs-//     
tests/property_tests.rs://     fn on_value(&mut self, value: &Value) -> Result<(), vexy_json_core::error::Error> {
tests/property_tests.rs-//         self.events.push(format!("value:{:?}", value));
tests/property_tests.rs-//         Ok(())
tests/property_tests.rs-//     }
--
docs/test-wasm.html-  <head>
docs/test-wasm.html-    <meta charset="UTF-8" />
docs/test-wasm.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
docs/test-wasm.html:    <title>vexy_json WASM Test</title>
docs/test-wasm.html-    <style>
docs/test-wasm.html-      body {
docs/test-wasm.html-        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
--
docs/test-wasm.html-    </style>
docs/test-wasm.html-  </head>
docs/test-wasm.html-  <body>
docs/test-wasm.html:    <h1>vexy_json WASM Test Page</h1>
docs/test-wasm.html-    <div class="version" id="version">Loading WASM module...</div>
docs/test-wasm.html-
docs/test-wasm.html-    <div class="container">
--
docs/test-wasm.html-        get_version_info,
docs/test-wasm.html-        get_parser_options,
docs/test-wasm.html-        validate_json,
docs/test-wasm.html:      } from './pkg/vexy_json_wasm.js';
docs/test-wasm.html-
docs/test-wasm.html-      let wasmReady = false;
docs/test-wasm.html-
--
docs/test-wasm.html-          // Display version info
docs/test-wasm.html-          const versionInfo = JSON.parse(get_version_info());
docs/test-wasm.html-          document.getElementById('version').innerHTML = `
docs/test-wasm.html:                    <strong>vexy_json WASM</strong> v${versionInfo.version} - ${versionInfo.description}
docs/test-wasm.html-                `;
docs/test-wasm.html-          document.getElementById('version').className = 'version';
docs/test-wasm.html-
--
docs/development.md-
docs/development.md-# Development
docs/development.md-
docs/development.md:This section contains documentation for developers working on the vexy_json project.
docs/development.md-
docs/development.md-## Topics
docs/development.md-
--
tests/forgiving_features.rs-use rustc_hash::FxHashMap;
tests/forgiving_features.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
tests/forgiving_features.rs-
tests/forgiving_features.rs-#[test]
tests/forgiving_features.rs-fn test_single_quoted_strings() {
--
tests/forgiving_features.rs-    let result = parse("{name: 'John', age: 30}").unwrap();
tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
tests/forgiving_features.rs-    expected.insert("name".to_string(), Value::String("John".to_string()));
tests/forgiving_features.rs:    expected.insert("age".to_string(), Value::Number(vexy_json::Number::Integer(30)));
tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
tests/forgiving_features.rs-}
tests/forgiving_features.rs-
--
tests/forgiving_features.rs-    assert_eq!(
tests/forgiving_features.rs-        result,
tests/forgiving_features.rs-        Value::Array(vec![
tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(1)),
tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(2)),
tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(3)),
tests/forgiving_features.rs-        ])
tests/forgiving_features.rs-    );
tests/forgiving_features.rs-
tests/forgiving_features.rs-    let result = parse("{a: 1, b: 2,}").unwrap();
tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
tests/forgiving_features.rs:    expected.insert("a".to_string(), Value::Number(vexy_json::Number::Integer(1)));
tests/forgiving_features.rs:    expected.insert("b".to_string(), Value::Number(vexy_json::Number::Integer(2)));
tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
tests/forgiving_features.rs-}
tests/forgiving_features.rs-
--
tests/forgiving_features.rs-fn test_single_line_comments() {
tests/forgiving_features.rs-    // TODO: Fix parsing when comment is at the beginning of input
tests/forgiving_features.rs-    // let result = parse("// This is a comment\n42").unwrap();
tests/forgiving_features.rs:    // assert_eq!(result, Value::Number(vexy_json::Number::Integer(42)));
tests/forgiving_features.rs-
tests/forgiving_features.rs-    // let result = parse("# This is also a comment\n42").unwrap();
tests/forgiving_features.rs:    // assert_eq!(result, Value::Number(vexy_json::Number::Integer(42)));
tests/forgiving_features.rs-
tests/forgiving_features.rs-    let result = parse("{a: 1, // comment\nb: 2}").unwrap();
tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
tests/forgiving_features.rs:    expected.insert("a".to_string(), Value::Number(vexy_json::Number::Integer(1)));
tests/forgiving_features.rs:    expected.insert("b".to_string(), Value::Number(vexy_json::Number::Integer(2)));
tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
tests/forgiving_features.rs-}
tests/forgiving_features.rs-
--
tests/forgiving_features.rs-fn test_multi_line_comments() {
tests/forgiving_features.rs-    // TODO: Fix parsing when comment is at the beginning of input
tests/forgiving_features.rs-    // let result = parse("/* This is a \nmulti-line comment */\n42").unwrap();
tests/forgiving_features.rs:    // assert_eq!(result, Value::Number(vexy_json::Number::Integer(42)));
tests/forgiving_features.rs-
tests/forgiving_features.rs-    let result = parse("{a: 1, /* comment */ b: 2}").unwrap();
tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
tests/forgiving_features.rs:    expected.insert("a".to_string(), Value::Number(vexy_json::Number::Integer(1)));
tests/forgiving_features.rs:    expected.insert("b".to_string(), Value::Number(vexy_json::Number::Integer(2)));
tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
tests/forgiving_features.rs-}
tests/forgiving_features.rs-
--
tests/forgiving_features.rs-fn test_implicit_object() {
tests/forgiving_features.rs-    let result = parse("a: 1").unwrap();
tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
tests/forgiving_features.rs:    expected.insert("a".to_string(), Value::Number(vexy_json::Number::Integer(1)));
tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
tests/forgiving_features.rs-
tests/forgiving_features.rs-    let result = parse("name: 'John', age: 30").unwrap();
tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
tests/forgiving_features.rs-    expected.insert("name".to_string(), Value::String("John".to_string()));
tests/forgiving_features.rs:    expected.insert("age".to_string(), Value::Number(vexy_json::Number::Integer(30)));
tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
tests/forgiving_features.rs-}
tests/forgiving_features.rs-
--
tests/forgiving_features.rs-    assert_eq!(
tests/forgiving_features.rs-        result,
tests/forgiving_features.rs-        Value::Array(vec![
tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(1)),
tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(2)),
tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(3)),
tests/forgiving_features.rs-        ])
tests/forgiving_features.rs-    );
tests/forgiving_features.rs-
--
tests/forgiving_features.rs-    let result = parse(input).unwrap();
tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
tests/forgiving_features.rs-    expected.insert("name".to_string(), Value::String("John".to_string()));
tests/forgiving_features.rs:    expected.insert("age".to_string(), Value::Number(vexy_json::Number::Integer(30)));
tests/forgiving_features.rs-    expected.insert(
tests/forgiving_features.rs-        "hobbies".to_string(),
tests/forgiving_features.rs-        Value::Array(vec![
--
build-warnings.txt:   Compiling vexy_json-core v2.2.3 (/Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core)
build-warnings.txt-warning: methods `analyze_custom_error`, `analyze_context_error`, and `analyze_invalid_utf8` are never used
build-warnings.txt-   --> crates/core/src/error/recovery/mod.rs:542:8
build-warnings.txt-    |
--
build-warnings.txt-96 |     max_repairs: usize,
build-warnings.txt-   |     ^^^^^^^^^^^
build-warnings.txt-
build-warnings.txt:warning: `vexy_json-core` (lib) generated 27 warnings
build-warnings.txt:   Compiling vexy_json-cli v2.2.3 (/Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/cli)
build-warnings.txt-    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.92s
--
crates/core/src/streaming/mod.rs-// this_file: src/streaming/mod.rs
crates/core/src/streaming/mod.rs-
crates/core/src/streaming/mod.rs://! Streaming parser implementation for vexy_json.
crates/core/src/streaming/mod.rs-//!
crates/core/src/streaming/mod.rs-//! This module provides a streaming JSON parser that can process input
crates/core/src/streaming/mod.rs-//! incrementally, making it suitable for parsing large files or real-time
--
tests/compat_tests.rs-use rustc_hash::FxHashMap;
tests/compat_tests.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
tests/compat_tests.rs-
tests/compat_tests.rs-/// Helper to create expected values more easily
tests/compat_tests.rs-fn obj(pairs: &[(&str, Value)]) -> Value {
--
tests/compat_tests.rs-}
tests/compat_tests.rs-
tests/compat_tests.rs-fn n(num: i64) -> Value {
tests/compat_tests.rs:    Value::Number(vexy_json::Number::Integer(num))
tests/compat_tests.rs-}
tests/compat_tests.rs-
tests/compat_tests.rs-fn f(num: f64) -> Value {
tests/compat_tests.rs:    Value::Number(vexy_json::Number::Float(num))
tests/compat_tests.rs-}
tests/compat_tests.rs-
tests/compat_tests.rs-#[test]
--
docs/plugins/builtin/schema-validation.md-### Basic Usage
docs/plugins/builtin/schema-validation.md-
docs/plugins/builtin/schema-validation.md-```rust
docs/plugins/builtin/schema-validation.md:use vexy_json::{parse, ParserOptions};
docs/plugins/builtin/schema-validation.md:use vexy_json_core::plugin::plugins::SchemaValidationPlugin;
docs/plugins/builtin/schema-validation.md-
docs/plugins/builtin/schema-validation.md-// Define a schema
docs/plugins/builtin/schema-validation.md-let schema = parse(r#"{
--
docs/plugins/builtin/schema-validation.md-The plugin can be integrated into the parsing pipeline:
docs/plugins/builtin/schema-validation.md-
docs/plugins/builtin/schema-validation.md-```rust
docs/plugins/builtin/schema-validation.md:use vexy_json::{parse_with_options, ParserOptions};
docs/plugins/builtin/schema-validation.md-
docs/plugins/builtin/schema-validation.md-// Create parser options with validation
docs/plugins/builtin/schema-validation.md-let options = ParserOptions {
--
docs/plugins/builtin/schema-validation.md-#[cfg(test)]
docs/plugins/builtin/schema-validation.md-mod tests {
docs/plugins/builtin/schema-validation.md-    use super::*;
docs/plugins/builtin/schema-validation.md:    use vexy_json::parse;
docs/plugins/builtin/schema-validation.md-
docs/plugins/builtin/schema-validation.md-    #[test]
docs/plugins/builtin/schema-validation.md-    fn test_basic_validation() {
--
docs/troubleshooting.md-
docs/troubleshooting.md-# Troubleshooting
docs/troubleshooting.md-
docs/troubleshooting.md:This page documents common issues and their solutions when using vexy_json, particularly with WebAssembly bindings.
docs/troubleshooting.md-
docs/troubleshooting.md-## WebAssembly Issues
docs/troubleshooting.md-
--
docs/troubleshooting.md-2. Clear browser cache
docs/troubleshooting.md-3. Add cache-busting query parameters to module imports:
docs/troubleshooting.md-   ```javascript
docs/troubleshooting.md:   import init from './pkg/vexy_json_wasm.js?v=' + Date.now();
docs/troubleshooting.md-   ```
docs/troubleshooting.md-
docs/troubleshooting.md-### WASM Module Loading Failures
--
docs/troubleshooting.md-
docs/troubleshooting.md-1. **Incorrect MIME type**: Ensure your web server serves `.wasm` files with `application/wasm` MIME type
docs/troubleshooting.md-2. **CORS issues**: Serve files from a proper HTTP server, not file:// protocol
docs/troubleshooting.md:3. **Path issues**: Verify the path to `pkg/vexy_json_wasm.js` and `pkg/vexy_json_bg.wasm` is correct
docs/troubleshooting.md-
docs/troubleshooting.md-**Testing Setup**:
docs/troubleshooting.md-Use a simple HTTP server for testing:
--
docs/troubleshooting.md-
docs/troubleshooting.md-If you encounter issues not covered here:
docs/troubleshooting.md-
docs/troubleshooting.md:1. Check the [GitHub Issues](https://github.com/twardoch/vexy_json/issues)
docs/troubleshooting.md-2. Review the [API documentation](api.md)
docs/troubleshooting.md:3. Examine the [test files](https://github.com/twardoch/vexy_json/tree/main/tests) for usage examples
docs/troubleshooting.md-4. Create a new issue with:
docs/troubleshooting.md:   - Your vexy_json version
docs/troubleshooting.md-   - Browser and version
docs/troubleshooting.md-   - Minimal reproduction case
docs/troubleshooting.md-   - Expected vs actual behavior
--
docs/streaming-api.md-
docs/streaming-api.md-## Overview
docs/streaming-api.md-
docs/streaming-api.md:The vexy_json streaming parser provides an event-driven API for parsing JSON incrementally, making it suitable for:
docs/streaming-api.md-- Processing large JSON files without loading them entirely into memory
docs/streaming-api.md-- Real-time parsing of JSON data streams
docs/streaming-api.md-- Parsing newline-delimited JSON (NDJSON) files
--
docs/streaming-api.md-The main streaming parser that processes input incrementally and emits parsing events.
docs/streaming-api.md-
docs/streaming-api.md-```rust
docs/streaming-api.md:use vexy_json::{StreamingParser, StreamingEvent};
docs/streaming-api.md-
docs/streaming-api.md-let mut parser = StreamingParser::new();
docs/streaming-api.md-parser.feed(r#"{"key": "value"}"#)?;
--
docs/streaming-api.md-Utility for building Value objects from streaming events:
docs/streaming-api.md-
docs/streaming-api.md-```rust
docs/streaming-api.md:use vexy_json::{StreamingParser, StreamingValueBuilder};
docs/streaming-api.md-
docs/streaming-api.md-let mut parser = StreamingParser::new();
docs/streaming-api.md-let mut builder = StreamingValueBuilder::new();
--
docs/streaming-api.md-Parser for newline-delimited JSON where each line is a separate JSON value:
docs/streaming-api.md-
docs/streaming-api.md-```rust
docs/streaming-api.md:use vexy_json::NdJsonParser;
docs/streaming-api.md-
docs/streaming-api.md-let mut parser = NdJsonParser::new();
docs/streaming-api.md-let input = r#"{"id": 1, "name": "Alice"}
--
docs/streaming-api.md-Event-based NDJSON parser:
docs/streaming-api.md-
docs/streaming-api.md-```rust
docs/streaming-api.md:use vexy_json::StreamingNdJsonParser;
docs/streaming-api.md-
docs/streaming-api.md-let mut parser = StreamingNdJsonParser::new();
docs/streaming-api.md-parser.feed(r#"{"a": 1}
--
docs/streaming-api.md-Both streaming parsers support the same options as the regular parser:
docs/streaming-api.md-
docs/streaming-api.md-```rust
docs/streaming-api.md:use vexy_json::{StreamingParser, ParserOptions};
docs/streaming-api.md-
docs/streaming-api.md-let options = ParserOptions {
docs/streaming-api.md-    allow_comments: true,
--
docs/streaming-api.md-The streaming parser uses the same error types as the regular parser:
docs/streaming-api.md-
docs/streaming-api.md-```rust
docs/streaming-api.md:use vexy_json::{StreamingParser, Error};
docs/streaming-api.md-
docs/streaming-api.md-let mut parser = StreamingParser::new();
docs/streaming-api.md-
--
tests/real_world_scenarios.rs-//! when using forgiving JSON for configuration files, data exchange, and other practical applications.
tests/real_world_scenarios.rs-
tests/real_world_scenarios.rs-use rustc_hash::FxHashMap;
tests/real_world_scenarios.rs:use vexy_json::{parse, Value};
tests/real_world_scenarios.rs-
tests/real_world_scenarios.rs-/// Helper functions for creating test values
tests/real_world_scenarios.rs-#[allow(dead_code)]
--
tests/real_world_scenarios.rs-}
tests/real_world_scenarios.rs-
tests/real_world_scenarios.rs-fn n(num: i64) -> Value {
tests/real_world_scenarios.rs:    Value::Number(vexy_json::Number::Integer(num))
tests/real_world_scenarios.rs-}
tests/real_world_scenarios.rs-
tests/real_world_scenarios.rs-#[allow(dead_code)]
tests/real_world_scenarios.rs-fn f(num: f64) -> Value {
tests/real_world_scenarios.rs:    Value::Number(vexy_json::Number::Float(num))
tests/real_world_scenarios.rs-}
tests/real_world_scenarios.rs-
tests/real_world_scenarios.rs-fn b(val: bool) -> Value {
--
docs/design/python-api.md-nav_order: 1
docs/design/python-api.md----
docs/design/python-api.md-
docs/design/python-api.md:# Python API Design for vexy_json
docs/design/python-api.md-
docs/design/python-api.md-## Overview
docs/design/python-api.md-
docs/design/python-api.md:This document outlines the design for Python bindings for the vexy_json library, drawing from PyO3 best practices and existing Python JSON parser APIs (json, orjson, ujson).
docs/design/python-api.md-
docs/design/python-api.md-## Core Design Principles
docs/design/python-api.md-
--
docs/design/python-api.md-### Basic Functions (Similar to json module)
docs/design/python-api.md-
docs/design/python-api.md-```python
docs/design/python-api.md:import vexy_json
docs/design/python-api.md-
docs/design/python-api.md-# Basic parsing - similar to json.loads()
docs/design/python-api.md-def loads(s: str, *, 
--
docs/design/python-api.md-
docs/design/python-api.md-```python
docs/design/python-api.md-class ParserOptions:
docs/design/python-api.md:    """Configuration options for vexy_json parser."""
docs/design/python-api.md-    
docs/design/python-api.md-    def __init__(self, 
docs/design/python-api.md-                 allow_comments: bool = True,
--
docs/design/python-api.md-
docs/design/python-api.md-```python
docs/design/python-api.md-class VexyJsonError(Exception):
docs/design/python-api.md:    """Base exception for vexy_json errors."""
docs/design/python-api.md-    pass
docs/design/python-api.md-
docs/design/python-api.md-class ParseError(VexyJsonError):
--
docs/design/python-api.md-
docs/design/python-api.md-- **`loads()`** instead of `parse()` for consistency with `json` module
docs/design/python-api.md-- **Keyword-only arguments** for options to prevent positional confusion
docs/design/python-api.md:- **Boolean defaults** match vexy_json's forgiving nature
docs/design/python-api.md-
docs/design/python-api.md-### 2. Error Handling
docs/design/python-api.md-
--
docs/design/python-api.md-- **Standard library compatibility**: `loads()` and `dumps()` work as drop-in replacements
docs/design/python-api.md-- **orjson inspiration**: Performance-focused design with bytes handling
docs/design/python-api.md-- **ujson similarity**: Simple API with performance benefits
docs/design/python-api.md:- **vexy_json extensions**: Forgiving features as the key differentiator
docs/design/python-api.md-
docs/design/python-api.md-This design balances Python idioms with the performance benefits of Rust, providing a comprehensive JSON parsing solution that extends beyond standard JSON capabilities.
--
tests/comma_handling.rs-// this_file: tests/comma_handling.rs
tests/comma_handling.rs-
tests/comma_handling.rs:use vexy_json::{parse, Value};
tests/comma_handling.rs-
tests/comma_handling.rs-/// Comma handling tests ported from jsonic comma.test.js
tests/comma_handling.rs-/// Tests implicit commas (newlines as separators), optional commas, trailing commas, and edge cases
--
tests/comma_handling.rs-    let result = parse("{a:1\nb:2}");
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Object(obj)) if obj.len() == 2 => {
tests/comma_handling.rs:            println!("✓ vexy_json supports newlines as comma separators in objects");
tests/comma_handling.rs-            assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
tests/comma_handling.rs-            assert_eq!(obj.get("b").and_then(|v| v.as_f64()), Some(2.0));
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed object newline as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs-            println!(
tests/comma_handling.rs:                "vexy_json doesn't support newlines as separators in objects: {:?}",
tests/comma_handling.rs-                e
tests/comma_handling.rs-            );
tests/comma_handling.rs-        }
--
tests/comma_handling.rs-    let result = parse("[1\n2]");
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 2 => {
tests/comma_handling.rs:            println!("✓ vexy_json supports newlines as comma separators in arrays");
tests/comma_handling.rs-            assert_eq!(arr[0].as_f64(), Some(1.0));
tests/comma_handling.rs-            assert_eq!(arr[1].as_f64(), Some(2.0));
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed array newline as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs-            println!(
tests/comma_handling.rs:                "vexy_json doesn't support newlines as separators in arrays: {:?}",
tests/comma_handling.rs-                e
tests/comma_handling.rs-            );
tests/comma_handling.rs-        }
--
tests/comma_handling.rs-    let result = parse("a:1,b:2");
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Object(obj)) if obj.len() == 2 => {
tests/comma_handling.rs:            println!("✓ vexy_json supports implicit top-level objects");
tests/comma_handling.rs-            assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
tests/comma_handling.rs-            assert_eq!(obj.get("b").and_then(|v| v.as_f64()), Some(2.0));
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed implicit object as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs:            println!("vexy_json doesn't support implicit objects: {:?}", e);
tests/comma_handling.rs-        }
tests/comma_handling.rs-    }
tests/comma_handling.rs-
--
tests/comma_handling.rs-    let result = parse("1,2,3");
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 3 => {
tests/comma_handling.rs:            println!("✓ vexy_json supports implicit top-level arrays");
tests/comma_handling.rs-            assert_eq!(arr[0].as_f64(), Some(1.0));
tests/comma_handling.rs-            assert_eq!(arr[1].as_f64(), Some(2.0));
tests/comma_handling.rs-            assert_eq!(arr[2].as_f64(), Some(3.0));
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed implicit array as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs:            println!("vexy_json doesn't support implicit arrays: {:?}", e);
tests/comma_handling.rs-        }
tests/comma_handling.rs-    }
tests/comma_handling.rs-}
--
tests/comma_handling.rs-    let result = parse("a:1\nb:2");
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Object(obj)) if obj.len() == 2 => {
tests/comma_handling.rs:            println!("✓ vexy_json supports implicit objects with newline separators");
tests/comma_handling.rs-            assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
tests/comma_handling.rs-            assert_eq!(obj.get("b").and_then(|v| v.as_f64()), Some(2.0));
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed implicit object with newlines as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs-            println!(
tests/comma_handling.rs:                "vexy_json doesn't support implicit objects with newlines: {:?}",
tests/comma_handling.rs-                e
tests/comma_handling.rs-            );
tests/comma_handling.rs-        }
--
tests/comma_handling.rs-    let result = parse("1\n2\n3");
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 3 => {
tests/comma_handling.rs:            println!("✓ vexy_json supports implicit arrays with newline separators");
tests/comma_handling.rs-            assert_eq!(arr[0].as_f64(), Some(1.0));
tests/comma_handling.rs-            assert_eq!(arr[1].as_f64(), Some(2.0));
tests/comma_handling.rs-            assert_eq!(arr[2].as_f64(), Some(3.0));
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed implicit array with newlines as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs-            println!(
tests/comma_handling.rs:                "vexy_json doesn't support implicit arrays with newlines: {:?}",
tests/comma_handling.rs-                e
tests/comma_handling.rs-            );
tests/comma_handling.rs-        }
--
tests/comma_handling.rs-    let result = parse("a\nb\nc");
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 3 => {
tests/comma_handling.rs:            println!("✓ vexy_json supports implicit string arrays with newlines");
tests/comma_handling.rs-            if let (Some(Value::String(s1)), Some(Value::String(s2)), Some(Value::String(s3))) =
tests/comma_handling.rs-                (arr.get(0), arr.get(1), arr.get(2))
tests/comma_handling.rs-            {
--
tests/comma_handling.rs-            }
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed string sequence as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs-            println!(
tests/comma_handling.rs:                "vexy_json doesn't support string sequences with newlines: {:?}",
tests/comma_handling.rs-                e
tests/comma_handling.rs-            );
tests/comma_handling.rs-        }
--
tests/comma_handling.rs-    let result = parse("[1,]");
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 1 => {
tests/comma_handling.rs:            println!("✓ vexy_json supports trailing commas in arrays");
tests/comma_handling.rs-            assert_eq!(arr[0].as_f64(), Some(1.0));
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed trailing comma array as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs:            println!("vexy_json doesn't support trailing commas in arrays: {:?}", e);
tests/comma_handling.rs-        }
tests/comma_handling.rs-    }
tests/comma_handling.rs-
--
tests/comma_handling.rs-    let result = parse("{a:1,}");
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Object(obj)) if obj.len() == 1 => {
tests/comma_handling.rs:            println!("✓ vexy_json supports trailing commas in objects");
tests/comma_handling.rs-            assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed trailing comma object as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs:            println!("vexy_json doesn't support trailing commas in objects: {:?}", e);
tests/comma_handling.rs-        }
tests/comma_handling.rs-    }
tests/comma_handling.rs-}
--
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
tests/comma_handling.rs-            println!(
tests/comma_handling.rs:                "vexy_json parsed [,,] as array with {} elements: {:?}",
tests/comma_handling.rs-                arr.len(),
tests/comma_handling.rs-                arr
tests/comma_handling.rs-            );
tests/comma_handling.rs:            // This tests if vexy_json supports jsonic-style null insertion for empty comma positions
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed [,,] as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs:            println!("vexy_json error on multiple commas [,,]: {:?}", e);
tests/comma_handling.rs-        }
tests/comma_handling.rs-    }
tests/comma_handling.rs-
--
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
tests/comma_handling.rs-            println!(
tests/comma_handling.rs:                "vexy_json parsed [1,,3] as array with {} elements: {:?}",
tests/comma_handling.rs-                arr.len(),
tests/comma_handling.rs-                arr
tests/comma_handling.rs-            );
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed [1,,3] as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs:            println!("vexy_json error on [1,,3]: {:?}", e);
tests/comma_handling.rs-        }
tests/comma_handling.rs-    }
tests/comma_handling.rs-
--
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
tests/comma_handling.rs-            println!(
tests/comma_handling.rs:                "vexy_json parsed [,1] as array with {} elements: {:?}",
tests/comma_handling.rs-                arr.len(),
tests/comma_handling.rs-                arr
tests/comma_handling.rs-            );
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed [,1] as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs:            println!("vexy_json error on leading comma [,1]: {:?}", e);
tests/comma_handling.rs-        }
tests/comma_handling.rs-    }
tests/comma_handling.rs-}
--
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Object(obj)) => {
tests/comma_handling.rs-            println!(
tests/comma_handling.rs:                "vexy_json parsed {{,,}} as object with {} entries: {:?}",
tests/comma_handling.rs-                obj.len(),
tests/comma_handling.rs-                obj
tests/comma_handling.rs-            );
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed {{,,}} as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs:            println!("vexy_json error on {{,,}}: {:?}", e);
tests/comma_handling.rs-        }
tests/comma_handling.rs-    }
tests/comma_handling.rs-
--
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Object(obj)) => {
tests/comma_handling.rs-            println!(
tests/comma_handling.rs:                "vexy_json parsed {{,a:1}} as object with {} entries: {:?}",
tests/comma_handling.rs-                obj.len(),
tests/comma_handling.rs-                obj
tests/comma_handling.rs-            );
--
tests/comma_handling.rs-            }
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed {{,a:1}} as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs:            println!("vexy_json error on {{,a:1}}: {:?}", e);
tests/comma_handling.rs-        }
tests/comma_handling.rs-    }
tests/comma_handling.rs-
--
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Object(obj)) => {
tests/comma_handling.rs-            println!(
tests/comma_handling.rs:                "vexy_json parsed {{,a:1,}} as object with {} entries: {:?}",
tests/comma_handling.rs-                obj.len(),
tests/comma_handling.rs-                obj
tests/comma_handling.rs-            );
--
tests/comma_handling.rs-            }
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed {{,a:1,}} as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs:            println!("vexy_json error on {{,a:1,}}: {:?}", e);
tests/comma_handling.rs-        }
tests/comma_handling.rs-    }
tests/comma_handling.rs-}
--
tests/comma_handling.rs-    let result = parse("[[a],]");
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
tests/comma_handling.rs:            println!("vexy_json parsed [[a],] as: {:?}", arr);
tests/comma_handling.rs-            if arr.len() == 1 {
tests/comma_handling.rs-                if let Some(Value::Array(inner)) = arr.get(0) {
tests/comma_handling.rs-                    if inner.len() == 1 {
--
tests/comma_handling.rs-            }
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed nested array as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs:            println!("vexy_json error on nested arrays: {:?}", e);
tests/comma_handling.rs-        }
tests/comma_handling.rs-    }
tests/comma_handling.rs-
--
tests/comma_handling.rs-    let result = parse("[[a][b]]");
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
tests/comma_handling.rs:            println!("vexy_json parsed [[a][b]] as: {:?}", arr);
tests/comma_handling.rs:            // Test if vexy_json supports implicit comma between adjacent arrays
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed [[a][b]] as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs:            println!("vexy_json error on [[a][b]]: {:?}", e);
tests/comma_handling.rs-        }
tests/comma_handling.rs-    }
tests/comma_handling.rs-
--
tests/comma_handling.rs-    let result = parse("[{a:1},]");
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
tests/comma_handling.rs:            println!("vexy_json parsed [{{a:1}},] as: {:?}", arr);
tests/comma_handling.rs-            if arr.len() == 1 {
tests/comma_handling.rs-                if let Some(Value::Object(obj)) = arr.get(0) {
tests/comma_handling.rs-                    assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
--
tests/comma_handling.rs-            }
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed object in array as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs:            println!("vexy_json error on object in array: {:?}", e);
tests/comma_handling.rs-        }
tests/comma_handling.rs-    }
tests/comma_handling.rs-}
--
tests/comma_handling.rs-    let result = parse("{a:1},");
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
tests/comma_handling.rs:            println!("vexy_json parsed {{a:1}}, as implicit array: {:?}", arr);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(Value::Object(obj)) => {
tests/comma_handling.rs-            println!(
tests/comma_handling.rs:                "vexy_json parsed {{a:1}}, as object (ignored trailing comma): {:?}",
tests/comma_handling.rs-                obj
tests/comma_handling.rs-            );
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed {{a:1}}, as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs:            println!("vexy_json error on {{a:1}},: {:?}", e);
tests/comma_handling.rs-        }
tests/comma_handling.rs-    }
tests/comma_handling.rs-
--
tests/comma_handling.rs-    let result = parse("a:1 b:2");
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Object(obj)) if obj.len() == 2 => {
tests/comma_handling.rs:            println!("✓ vexy_json supports space-separated object properties");
tests/comma_handling.rs-            assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
tests/comma_handling.rs-            assert_eq!(obj.get("b").and_then(|v| v.as_f64()), Some(2.0));
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed space-separated as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs:            println!("vexy_json doesn't support space-separated properties: {:?}", e);
tests/comma_handling.rs-        }
tests/comma_handling.rs-    }
tests/comma_handling.rs-
--
tests/comma_handling.rs-    let result = parse("true\nfalse\nnull");
tests/comma_handling.rs-    match result {
tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 3 => {
tests/comma_handling.rs:            println!("✓ vexy_json supports mixed value types with newlines");
tests/comma_handling.rs-            assert!(matches!(arr[0], Value::Bool(true)));
tests/comma_handling.rs-            assert!(matches!(arr[1], Value::Bool(false)));
tests/comma_handling.rs-            assert!(matches!(arr[2], Value::Null));
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Ok(other) => {
tests/comma_handling.rs:            println!("vexy_json parsed mixed types as: {:?}", other);
tests/comma_handling.rs-        }
tests/comma_handling.rs-        Err(e) => {
tests/comma_handling.rs:            println!("vexy_json error on mixed types: {:?}", e);
tests/comma_handling.rs-        }
tests/comma_handling.rs-    }
tests/comma_handling.rs-}
--
crates/core/src/streaming/simple_lexer.rs-//! Simple streaming lexer that works with the existing Token enum.
crates/core/src/streaming/simple_lexer.rs-//!
crates/core/src/streaming/simple_lexer.rs-//! This lexer processes input incrementally and emits tokens compatible
crates/core/src/streaming/simple_lexer.rs://! with the existing vexy_json token structure.
crates/core/src/streaming/simple_lexer.rs-
crates/core/src/streaming/simple_lexer.rs-use crate::ast::Token;
crates/core/src/streaming/simple_lexer.rs-use crate::error::{Error, Result, Span};
crates/core/src/streaming/simple_lexer.rs-
crates/core/src/streaming/simple_lexer.rs:/// A simple streaming lexer for vexy_json
crates/core/src/streaming/simple_lexer.rs-#[derive(Debug, Clone)]
crates/core/src/streaming/simple_lexer.rs-pub struct SimpleStreamingLexer {
crates/core/src/streaming/simple_lexer.rs-    /// Current position in the overall input stream
--
docs/design.md-
docs/design.md-# Design
docs/design.md-
docs/design.md:This section contains design documents and architectural decisions for the vexy_json project.
docs/design.md-
docs/design.md-## Topics
docs/design.md-
--
tests/comment_handling.rs-// this_file: tests/comment_handling.rs
tests/comment_handling.rs-
tests/comment_handling.rs:use vexy_json::{parse, Value};
tests/comment_handling.rs-
tests/comment_handling.rs-/// Comment handling tests ported from jsonic comment.test.js
tests/comment_handling.rs-/// Tests single-line, multi-line comments, hash behavior, and edge cases
--
tests/comment_handling.rs-    let result = parse("42 // comment");
tests/comment_handling.rs-    match result {
tests/comment_handling.rs-        Ok(val) if val.as_f64() == Some(42.0) => {
tests/comment_handling.rs:            println!("vexy_json supports // comments");
tests/comment_handling.rs-        }
tests/comment_handling.rs-        Ok(other) => {
tests/comment_handling.rs:            println!("vexy_json parsed as: {:?}", other);
tests/comment_handling.rs-        }
tests/comment_handling.rs-        Err(e) => {
tests/comment_handling.rs:            println!("vexy_json error on // comments: {:?}", e);
tests/comment_handling.rs-        }
tests/comment_handling.rs-    }
tests/comment_handling.rs-}
--
tests/comment_handling.rs-    let result = parse("42 /* comment */");
tests/comment_handling.rs-    match result {
tests/comment_handling.rs-        Ok(val) if val.as_f64() == Some(42.0) => {
tests/comment_handling.rs:            println!("vexy_json supports /* */ comments");
tests/comment_handling.rs-        }
tests/comment_handling.rs-        Ok(other) => {
tests/comment_handling.rs:            println!("vexy_json parsed as: {:?}", other);
tests/comment_handling.rs-        }
tests/comment_handling.rs-        Err(e) => {
tests/comment_handling.rs:            println!("vexy_json error on /* */ comments: {:?}", e);
tests/comment_handling.rs-        }
tests/comment_handling.rs-    }
tests/comment_handling.rs-}
--
tests/comment_handling.rs-    let result = parse("a#b");
tests/comment_handling.rs-    match result {
tests/comment_handling.rs-        Ok(Value::String(s)) if s == "a" => {
tests/comment_handling.rs:            println!("vexy_json treats # as comment");
tests/comment_handling.rs-        }
tests/comment_handling.rs-        Ok(Value::String(s)) if s.contains('#') => {
tests/comment_handling.rs:            println!("vexy_json treats # as literal: {:?}", s);
tests/comment_handling.rs-        }
tests/comment_handling.rs-        Ok(other) => {
tests/comment_handling.rs:            println!("vexy_json parsed a#b as: {:?}", other);
tests/comment_handling.rs-        }
tests/comment_handling.rs-        Err(e) => {
tests/comment_handling.rs:            println!("vexy_json error on #: {:?}", e);
tests/comment_handling.rs-        }
tests/comment_handling.rs-    }
tests/comment_handling.rs-}
--
tests/comment_handling.rs-    let result = parse("[1, // comment\n2]");
tests/comment_handling.rs-    match result {
tests/comment_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 2 => {
tests/comment_handling.rs:            println!("vexy_json supports comments in arrays");
tests/comment_handling.rs-        }
tests/comment_handling.rs-        Ok(other) => {
tests/comment_handling.rs:            println!("vexy_json parsed array comment as: {:?}", other);
tests/comment_handling.rs-        }
tests/comment_handling.rs-        Err(_) => {
tests/comment_handling.rs:            println!("vexy_json doesn't support comments in arrays");
tests/comment_handling.rs-            let fallback = parse("[1, 2]").unwrap();
tests/comment_handling.rs-            assert!(matches!(fallback, Value::Array(_)));
tests/comment_handling.rs-        }
--
tests/comment_handling.rs-    let result = parse("42//");
tests/comment_handling.rs-    match result {
tests/comment_handling.rs-        Ok(val) if val.as_f64() == Some(42.0) => {
tests/comment_handling.rs:            println!("vexy_json supports empty // comments");
tests/comment_handling.rs-        }
tests/comment_handling.rs-        Ok(other) => {
tests/comment_handling.rs:            println!("vexy_json parsed 42// as: {:?}", other);
tests/comment_handling.rs-        }
tests/comment_handling.rs-        Err(e) => {
tests/comment_handling.rs:            println!("vexy_json error on empty //: {:?}", e);
tests/comment_handling.rs-        }
tests/comment_handling.rs-    }
tests/comment_handling.rs-}
--
tests/comment_handling.rs-        Ok(Value::Object(obj)) => {
tests/comment_handling.rs-            if let Some(val) = obj.get("a") {
tests/comment_handling.rs-                if val.as_f64() == Some(1.0) {
tests/comment_handling.rs:                    println!("vexy_json supports comments at EOF");
tests/comment_handling.rs-                }
tests/comment_handling.rs-            }
tests/comment_handling.rs-        }
tests/comment_handling.rs-        Ok(other) => {
tests/comment_handling.rs:            println!("vexy_json parsed EOF comment as: {:?}", other);
tests/comment_handling.rs-        }
tests/comment_handling.rs-        Err(e) => {
tests/comment_handling.rs:            println!("vexy_json error on EOF comment: {:?}", e);
tests/comment_handling.rs-        }
tests/comment_handling.rs-    }
tests/comment_handling.rs-}
--
tests/advanced_features.rs-//! including potential future features and edge cases that push the boundaries of the parser.
tests/advanced_features.rs-
tests/advanced_features.rs-use rustc_hash::FxHashMap;
tests/advanced_features.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
tests/advanced_features.rs-
tests/advanced_features.rs-/// Helper functions for creating test values
tests/advanced_features.rs-#[allow(dead_code)]
--
tests/advanced_features.rs-}
tests/advanced_features.rs-
tests/advanced_features.rs-fn n(num: i64) -> Value {
tests/advanced_features.rs:    Value::Number(vexy_json::Number::Integer(num))
tests/advanced_features.rs-}
tests/advanced_features.rs-
tests/advanced_features.rs-fn f(num: f64) -> Value {
tests/advanced_features.rs:    Value::Number(vexy_json::Number::Float(num))
tests/advanced_features.rs-}
tests/advanced_features.rs-
tests/advanced_features.rs-#[allow(dead_code)]
--
tests/advanced_features.rs-        let small_result = parse("1e-300").unwrap();
tests/advanced_features.rs-        assert!(matches!(
tests/advanced_features.rs-            small_result,
tests/advanced_features.rs:            Value::Number(vexy_json::Number::Float(_))
tests/advanced_features.rs-        ));
tests/advanced_features.rs-
tests/advanced_features.rs-        // Very large floats
tests/advanced_features.rs-        let large_result = parse("1e300").unwrap();
tests/advanced_features.rs-        assert!(matches!(
tests/advanced_features.rs-            large_result,
tests/advanced_features.rs:            Value::Number(vexy_json::Number::Float(_))
tests/advanced_features.rs-        ));
tests/advanced_features.rs-    }
tests/advanced_features.rs-
--
tests/number_formats.rs-// this_file: tests/number_formats.rs
tests/number_formats.rs-
tests/number_formats.rs:use vexy_json::Number;
tests/number_formats.rs:use vexy_json::{parse, Value};
tests/number_formats.rs-
tests/number_formats.rs-/// Tests for extended number format support including hex, octal, binary, and underscore separators.
tests/number_formats.rs-/// These formats are commonly used in configuration files and match jsonic compatibility.
--
docs/migration-guide.md-nav_order: 10
docs/migration-guide.md----
docs/migration-guide.md-
docs/migration-guide.md:# Migration Guide: vexy_json v2.0.0
docs/migration-guide.md-
docs/migration-guide.md:This document provides comprehensive guidance for upgrading to vexy_json v2.0.0 from previous versions.
docs/migration-guide.md-
docs/migration-guide.md-## Migrating from v1.x to v2.0.0
docs/migration-guide.md-
--
docs/migration-guide.md-
docs/migration-guide.md-**After (v2.0.0):**
docs/migration-guide.md-```rust
docs/migration-guide.md:use vexy_json::StreamingParser;
docs/migration-guide.md-
docs/migration-guide.md-let mut parser = StreamingParser::new();
docs/migration-guide.md-let file = std::fs::File::open("huge.json")?;
--
docs/migration-guide.md-
docs/migration-guide.md-**After (v2.0.0):**
docs/migration-guide.md-```rust
docs/migration-guide.md:use vexy_json::parse_parallel;
docs/migration-guide.md-
docs/migration-guide.md-let results = parse_parallel(json_files); // Automatically uses multiple cores
docs/migration-guide.md-```
--
docs/migration-guide.md-   - Some error variants have been renamed for clarity
docs/migration-guide.md-   - Add explicit imports if you match on specific error types:
docs/migration-guide.md-   ```rust
docs/migration-guide.md:   use vexy_json::Error::{UnexpectedChar, InvalidNumber};
docs/migration-guide.md-   ```
docs/migration-guide.md-
docs/migration-guide.md-2. **Feature Flags**
--
docs/migration-guide.md-
docs/migration-guide.md-### 📦 Dependency Updates
docs/migration-guide.md-
docs/migration-guide.md:If you depend on specific versions of vexy_json's dependencies:
docs/migration-guide.md-- `serde`: Now requires 1.0.190+
docs/migration-guide.md-- `wasm-bindgen`: Updated to 0.2.90
docs/migration-guide.md-- New dependencies: `rayon`, `crossbeam-channel`, `simd-json`
docs/migration-guide.md-
docs/migration-guide.md-### 🔧 CLI Changes
docs/migration-guide.md-
docs/migration-guide.md:The CLI has been significantly enhanced. Update scripts that use vexy_json:
docs/migration-guide.md-
docs/migration-guide.md-**New capabilities:**
docs/migration-guide.md-```bash
docs/migration-guide.md-# Watch mode
docs/migration-guide.md:vexy_json --watch input.json -o output.json
docs/migration-guide.md-
docs/migration-guide.md-# Batch processing
docs/migration-guide.md:vexy_json --batch ./data/ --output-dir ./processed/
docs/migration-guide.md-
docs/migration-guide.md-# Pretty printing with options
docs/migration-guide.md:vexy_json --pretty --sort-keys --indent 4 input.json
docs/migration-guide.md-```
docs/migration-guide.md-
docs/migration-guide.md----
docs/migration-guide.md-
docs/migration-guide.md:# Migration Guide: vexy_json v0.2.0
docs/migration-guide.md-
docs/migration-guide.md-This section covers the earlier v0.2.0 refactor for historical reference.
docs/migration-guide.md-
--
docs/migration-guide.md-
docs/migration-guide.md-**New exports available:**
docs/migration-guide.md-```rust
docs/migration-guide.md:use vexy_json::{ParseResult, Error};
docs/migration-guide.md-
docs/migration-guide.md-// New type alias for semantic clarity
docs/migration-guide.md-fn parse_config() -> ParseResult<Config> {
--
docs/migration-guide.md-```javascript
docs/migration-guide.md-// Enhanced error objects with more information
docs/migration-guide.md-try {
docs/migration-guide.md:    const result = vexy_json.parse_json(input);
docs/migration-guide.md-} catch (error) {
docs/migration-guide.md-    console.log(error.message);        // Error description
docs/migration-guide.md-    console.log(error.position);       // Character position (if available)
--
docs/migration-guide.md-### For Rust Users
docs/migration-guide.md-
docs/migration-guide.md-```rust
docs/migration-guide.md:use vexy_json::{parse, ParseResult, ParserOptions};
docs/migration-guide.md-
docs/migration-guide.md-// Recommended: Use the new ParseResult type for clarity
docs/migration-guide.md-fn parse_config_file(content: &str) -> ParseResult<Config> {
--
docs/migration-guide.md-```javascript
docs/migration-guide.md-// Enhanced error handling with structured error objects
docs/migration-guide.md-try {
docs/migration-guide.md:    const result = vexy_json.parse_json(jsonString);
docs/migration-guide.md-    console.log('Parsed:', result);
docs/migration-guide.md-} catch (error) {
docs/migration-guide.md-    console.error(`Parse error at position ${error.position}: ${error.message}`);
--
docs/migration-guide.md-If you encounter any issues during migration:
docs/migration-guide.md-
docs/migration-guide.md-1. **Check compatibility**: Ensure you're not using any undocumented internal APIs
docs/migration-guide.md:2. **Update imports**: Make sure you're importing from the main `vexy_json` crate
docs/migration-guide.md-3. **Test thoroughly**: Run your existing test suite to verify behavior
docs/migration-guide.md-4. **Report issues**: File bug reports with specific reproduction cases
docs/migration-guide.md-
--
debug_double_decimal.rs:use vexy_json::parse;
debug_double_decimal.rs-
debug_double_decimal.rs-fn main() {
debug_double_decimal.rs-    println!("Testing double decimal parsing...");
--
tests/string_handling.rs-// this_file: tests/string_handling.rs
tests/string_handling.rs-
tests/string_handling.rs:use vexy_json::{parse, Value};
tests/string_handling.rs-
tests/string_handling.rs:/// String handling tests adapted for vexy_json's actual capabilities
tests/string_handling.rs:/// NOTE: vexy_json supports single and double quoted strings but NOT backtick strings
tests/string_handling.rs-/// Reference: ref/jsonic/test/feature.test.js lines 421-592
tests/string_handling.rs-
tests/string_handling.rs-#[test]
tests/string_handling.rs-fn test_basic_string_types() {
tests/string_handling.rs:    // Test single and double quoted strings (vexy_json's supported types)
tests/string_handling.rs-    assert_eq!(parse("''").unwrap(), Value::String("".to_string()));
tests/string_handling.rs-    assert_eq!(parse(r#""""#).unwrap(), Value::String("".to_string()));
tests/string_handling.rs-
--
tests/string_handling.rs-
tests/string_handling.rs-#[test]
tests/string_handling.rs-fn test_string_escape_sequences() {
tests/string_handling.rs:    // Standard JSON escape sequences that vexy_json supports
tests/string_handling.rs-    assert_eq!(parse(r#""\n""#).unwrap(), Value::String("\n".to_string()));
tests/string_handling.rs-    assert_eq!(parse(r#""\t""#).unwrap(), Value::String("\t".to_string()));
tests/string_handling.rs-    assert_eq!(parse(r#""\r""#).unwrap(), Value::String("\r".to_string()));
--
tests/string_handling.rs-
tests/string_handling.rs-#[test]
tests/string_handling.rs-fn test_unicode_escapes() {
tests/string_handling.rs:    // Test unicode escape sequences (if supported by vexy_json)
tests/string_handling.rs-    let unicode_test = parse(r#""\u0061""#);
tests/string_handling.rs-    if unicode_test.is_ok() {
tests/string_handling.rs-        assert_eq!(unicode_test.unwrap(), Value::String("a".to_string()));
tests/string_handling.rs-    } else {
tests/string_handling.rs:        println!("vexy_json doesn't support unicode escapes - that's OK");
tests/string_handling.rs-    }
tests/string_handling.rs-}
tests/string_handling.rs-
--
tests/string_handling.rs-
tests/string_handling.rs-#[test]
tests/string_handling.rs-fn test_newline_handling() {
tests/string_handling.rs:    // Test how vexy_json handles newlines in strings
tests/string_handling.rs-    let unescaped_newline_result = parse("\"\n\"");
tests/string_handling.rs-    if unescaped_newline_result.is_ok() {
tests/string_handling.rs:        println!("vexy_json allows unescaped newlines in double quotes");
tests/string_handling.rs-    } else {
tests/string_handling.rs:        println!("vexy_json errors on unescaped newlines - following JSON standard");
tests/string_handling.rs-        assert!(unescaped_newline_result.is_err());
tests/string_handling.rs-    }
tests/string_handling.rs-
--
tests/string_handling.rs-    let unknown_escape_result = parse(r#""\w""#);
tests/string_handling.rs-    if unknown_escape_result.is_ok() {
tests/string_handling.rs-        if let Ok(Value::String(s)) = unknown_escape_result {
tests/string_handling.rs:            // Document whatever behavior vexy_json has
tests/string_handling.rs:            println!("vexy_json handles \\w as: {:?}", s);
tests/string_handling.rs-            assert!(
tests/string_handling.rs-                s == "w" || s == "\\w" || s == "\\\\w",
tests/string_handling.rs-                "Unknown escape behavior should be consistent"
tests/string_handling.rs-            );
tests/string_handling.rs-        }
tests/string_handling.rs-    } else {
tests/string_handling.rs:        println!("vexy_json errors on unknown escape sequences - that's valid behavior");
tests/string_handling.rs-    }
tests/string_handling.rs-}
tests/string_handling.rs-
--
tests/string_handling.rs-
tests/string_handling.rs-#[test]
tests/string_handling.rs-fn test_backslash_behavior() {
tests/string_handling.rs:    // Test how vexy_json handles backslashes in unknown escape sequences
tests/string_handling.rs:    // This is adaptive testing - we test what vexy_json actually does
tests/string_handling.rs-    let test_cases = vec![(r#""\q""#, "backslash + q"), (r#""\z""#, "backslash + z")];
tests/string_handling.rs-
tests/string_handling.rs-    for (input, description) in test_cases {
tests/string_handling.rs-        match parse(input) {
tests/string_handling.rs-            Ok(Value::String(s)) => {
tests/string_handling.rs:                println!("vexy_json handles {} as: {:?}", description, s);
tests/string_handling.rs-                // Just verify it's consistent behavior, whatever it is
tests/string_handling.rs-                assert!(!s.is_empty(), "String should not be empty");
tests/string_handling.rs-            }
--
tests/string_handling.rs-                );
tests/string_handling.rs-            }
tests/string_handling.rs-            Err(_) => {
tests/string_handling.rs:                println!("vexy_json errors on {} - that's valid behavior", description);
tests/string_handling.rs-            }
tests/string_handling.rs-        }
tests/string_handling.rs-    }
--
docs/design/cli-enhancements.md-nav_order: 2
docs/design/cli-enhancements.md----
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md:# CLI Enhancements Design for vexy_json
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-## Overview
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md:This document outlines the design for comprehensive CLI enhancements to the vexy_json command-line tool, building on the current basic implementation to provide a powerful and user-friendly JSON processing experience.
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-## Current State Analysis
docs/design/cli-enhancements.md-
--
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-## Enhancement Goals
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md:1. **User Experience**: Make vexy_json the go-to CLI tool for JSON processing
docs/design/cli-enhancements.md-2. **Feature Parity**: Match or exceed capabilities of popular JSON tools (jq, jsonlint)
docs/design/cli-enhancements.md-3. **Rust Integration**: Leverage Rust's performance and safety for robust operations
docs/design/cli-enhancements.md-4. **Flexibility**: Support various workflows from simple formatting to complex transformations
--
docs/design/cli-enhancements.md-### Basic Usage (Enhanced)
docs/design/cli-enhancements.md-```bash
docs/design/cli-enhancements.md-# Current (unchanged for compatibility)
docs/design/cli-enhancements.md:echo '{"key": "value"}' | vexy_json
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# New file input/output
docs/design/cli-enhancements.md:vexy_json input.json                    # Read from file, output to stdout
docs/design/cli-enhancements.md:vexy_json input.json -o output.json     # Read from file, write to file
docs/design/cli-enhancements.md:vexy_json -i input.json -o output.json  # Explicit input/output
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Multiple files
docs/design/cli-enhancements.md:vexy_json file1.json file2.json         # Process multiple files
docs/design/cli-enhancements.md:vexy_json *.json                        # Glob support
docs/design/cli-enhancements.md-```
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-### Formatting Options
docs/design/cli-enhancements.md-```bash
docs/design/cli-enhancements.md-# Pretty printing (default when output is terminal)
docs/design/cli-enhancements.md:vexy_json --pretty input.json
docs/design/cli-enhancements.md:vexy_json -p input.json
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Compact output (default when piped)
docs/design/cli-enhancements.md:vexy_json --compact input.json
docs/design/cli-enhancements.md:vexy_json -c input.json
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Custom indentation
docs/design/cli-enhancements.md:vexy_json --indent 4 input.json
docs/design/cli-enhancements.md:vexy_json --indent tab input.json
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Sort keys
docs/design/cli-enhancements.md:vexy_json --sort-keys input.json
docs/design/cli-enhancements.md-```
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-### Validation and Analysis
docs/design/cli-enhancements.md-```bash
docs/design/cli-enhancements.md-# Validate only (exit code indicates success/failure)
docs/design/cli-enhancements.md:vexy_json --validate input.json
docs/design/cli-enhancements.md:vexy_json -v input.json
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Show statistics
docs/design/cli-enhancements.md:vexy_json --stats input.json
docs/design/cli-enhancements.md-# Output: {"objects": 5, "arrays": 3, "strings": 12, ...}
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Detailed error reporting
docs/design/cli-enhancements.md:vexy_json --strict input.json    # Fail on any forgiving features
docs/design/cli-enhancements.md:vexy_json --explain input.json   # Show what forgiving features were used
docs/design/cli-enhancements.md-```
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-### Parser Options Control
docs/design/cli-enhancements.md-```bash
docs/design/cli-enhancements.md-# Disable specific forgiving features
docs/design/cli-enhancements.md:vexy_json --no-comments input.json
docs/design/cli-enhancements.md:vexy_json --no-trailing-commas input.json
docs/design/cli-enhancements.md:vexy_json --no-unquoted-keys input.json
docs/design/cli-enhancements.md:vexy_json --no-single-quotes input.json
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Enable specific features (when starting from strict mode)
docs/design/cli-enhancements.md:vexy_json --strict --allow-comments input.json
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Newline as comma mode
docs/design/cli-enhancements.md:vexy_json --newline-as-comma input.json
docs/design/cli-enhancements.md-```
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-### Watch Mode
docs/design/cli-enhancements.md-```bash
docs/design/cli-enhancements.md-# Watch file for changes
docs/design/cli-enhancements.md:vexy_json --watch input.json
docs/design/cli-enhancements.md:vexy_json -w input.json
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Watch with auto-output
docs/design/cli-enhancements.md:vexy_json -w input.json -o output.json
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Watch directory
docs/design/cli-enhancements.md:vexy_json -w ./config/
docs/design/cli-enhancements.md-```
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-### Batch Processing
docs/design/cli-enhancements.md-```bash
docs/design/cli-enhancements.md-# Process all JSON files in directory
docs/design/cli-enhancements.md:vexy_json --batch ./data/ --output-dir ./processed/
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# With transformation
docs/design/cli-enhancements.md:vexy_json --batch ./data/ --pretty --sort-keys -o ./formatted/
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Parallel processing
docs/design/cli-enhancements.md:vexy_json --parallel ./data/*.json
docs/design/cli-enhancements.md-```
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-### Query and Filtering (Future Enhancement)
docs/design/cli-enhancements.md-```bash
docs/design/cli-enhancements.md-# Basic path extraction (jq-like)
docs/design/cli-enhancements.md:vexy_json input.json --get ".users[0].name"
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Multiple paths
docs/design/cli-enhancements.md:vexy_json input.json --get ".name" --get ".age"
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Simple filtering
docs/design/cli-enhancements.md:vexy_json input.json --filter ".age > 30"
docs/design/cli-enhancements.md-```
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-### Output Control
docs/design/cli-enhancements.md-```bash
docs/design/cli-enhancements.md-# Output to stderr instead of stdout
docs/design/cli-enhancements.md:vexy_json --stderr input.json
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Silent mode (only exit codes)
docs/design/cli-enhancements.md:vexy_json --silent input.json
docs/design/cli-enhancements.md:vexy_json -s input.json
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Different output formats
docs/design/cli-enhancements.md:vexy_json --output-format yaml input.json  # Future
docs/design/cli-enhancements.md:vexy_json --output-format toml input.json  # Future
docs/design/cli-enhancements.md-```
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-### Advanced Features
docs/design/cli-enhancements.md-```bash
docs/design/cli-enhancements.md-# Diff two JSON files (structural comparison)
docs/design/cli-enhancements.md:vexy_json --diff file1.json file2.json
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Merge JSON files
docs/design/cli-enhancements.md:vexy_json --merge base.json override.json
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Schema validation (future)
docs/design/cli-enhancements.md:vexy_json --schema schema.json data.json
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-# Performance profiling
docs/design/cli-enhancements.md:vexy_json --profile large-file.json
docs/design/cli-enhancements.md-```
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-## Implementation Architecture
--
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md-## Conclusion
docs/design/cli-enhancements.md-
docs/design/cli-enhancements.md:These CLI enhancements will transform vexy_json from a basic JSON parser into a comprehensive JSON processing toolkit. By focusing on user experience, performance, and flexibility, vexy_json can become the preferred choice for developers working with forgiving JSON formats.
--
docs/features.md-
docs/features.md-# Forgiving Features
docs/features.md-
docs/features.md:`vexy_json` is a forgiving JSON parser, handling common deviations from strict JSON (RFC 8259). Below are the supported forgiving features, enhanced in v2.0.0 with streaming, parallel processing, and plugin capabilities:
docs/features.md-
docs/features.md-## Comments
docs/features.md-
--
docs/features.md-Object keys can be unquoted if they are valid identifiers.
docs/features.md-
docs/features.md-```json
docs/features.md:{ name: "vexy_json", version: 1.0 }
docs/features.md-```
docs/features.md-
docs/features.md-## Trailing Commas
--
docs/features.md-
docs/features.md-All forgiving features can be disabled for strict RFC 8259 compliance.
docs/features.md-
docs/features.md:These forgiving features make `vexy_json` a flexible parser for configurations, data files, and other scenarios where strict JSON adherence might be relaxed.
docs/features.md-
docs/features.md-## New in v2.0.0: Advanced Features
docs/features.md-
--
docs/features.md-- Linear scalability with core count
docs/features.md-
docs/features.md-### Plugin Architecture
docs/features.md:Extend vexy_json with custom functionality:
docs/features.md-- Transform values during parsing
docs/features.md-- Add custom validation rules
docs/features.md-- Implement domain-specific logic
--
tests/feature_tests.rs-// this_file: tests/feature_tests.rs
tests/feature_tests.rs-
tests/feature_tests.rs:use vexy_json::{parse, Value};
tests/feature_tests.rs-
tests/feature_tests.rs-/// Test basic JSON compliance - standard JSON parsing capabilities
tests/feature_tests.rs-#[test]
--
tests/feature_tests.rs-        total,
tests/feature_tests.rs-        (supported as f64 / total as f64) * 100.0
tests/feature_tests.rs-    );
tests/feature_tests.rs:    println!("✓ vexy_json demonstrates comprehensive JSON parsing capabilities");
tests/feature_tests.rs-
tests/feature_tests.rs-    // Verify we have reasonable feature coverage
tests/feature_tests.rs-    let coverage_percentage = (supported as f64 / total as f64) * 100.0;
--
docs/development/agents.md-
docs/development/agents.md-## 1. Project Overview
docs/development/agents.md-
docs/development/agents.md:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
docs/development/agents.md-
docs/development/agents.md-## 2. Development Status
docs/development/agents.md-
--
docs/development/agents.md-    -   `src/error/mod.rs`: Implements custom error types for parsing failures.
docs/development/agents.md--   `crates/cli`: The command-line interface.
docs/development/agents.md-    -   `src/main.rs`: The entry point for the CLI binary.
docs/development/agents.md:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`.
docs/development/agents.md:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments.
docs/development/agents.md--   `crates/test-utils`: Utility functions for testing.
docs/development/agents.md-
docs/development/agents.md-### 3.2. Core Features
--
docs/development/agents.md-    -   Benchmarking is performed using `criterion.rs`, with benchmarks defined in the `benches/` directory.
docs/development/agents.md--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
docs/development/agents.md--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json` and `jsonic`.
docs/development/agents.md:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
docs/development/agents.md-
docs/development/agents.md-## 4. Development Workflow
docs/development/agents.md-
--
docs/development/RELEASE_v2.0.0_SUMMARY.md-The v2.0.0 release will include:
docs/development/RELEASE_v2.0.0_SUMMARY.md-
docs/development/RELEASE_v2.0.0_SUMMARY.md-### Binaries
docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-2.0.0-macos.dmg` - macOS installer with PKG
docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-2.0.0-macos.zip` - macOS standalone binary
docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-2.0.0-linux-x86_64.tar.gz` - Linux x86_64
docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-2.0.0-linux-aarch64.tar.gz` - Linux ARM64
docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-2.0.0-windows-x86_64.zip` - Windows x86_64
docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-wasm-2.0.0.tar.gz` - WASM package
docs/development/RELEASE_v2.0.0_SUMMARY.md-
docs/development/RELEASE_v2.0.0_SUMMARY.md-### Features
docs/development/RELEASE_v2.0.0_SUMMARY.md-- SIMD-accelerated parsing (2-3x faster)
--
docs/development/RELEASE_v2.0.0_SUMMARY.md-
docs/development/RELEASE_v2.0.0_SUMMARY.md-1. Review and commit all changes
docs/development/RELEASE_v2.0.0_SUMMARY.md-2. Run `./scripts/release-github.sh --version 2.0.0`
docs/development/RELEASE_v2.0.0_SUMMARY.md:3. Monitor the release at https://github.com/twardoch/vexy_json/actions
docs/development/RELEASE_v2.0.0_SUMMARY.md-4. Once complete, announce the release
docs/development/RELEASE_v2.0.0_SUMMARY.md-
docs/development/RELEASE_v2.0.0_SUMMARY.md-The repository is now fully prepared for a professional v2.0.0 release with comprehensive CI/CD automation!
--
docs/python/index.md-nav_order: 6
docs/python/index.md----
docs/python/index.md-
docs/python/index.md:# vexy_json - Forgiving JSON Parser for Python
docs/python/index.md-
docs/python/index.md-A Python library for parsing "forgiving" JSON, which is JSON that includes features like:
docs/python/index.md-
--
docs/python/index.md-- Implicit top-level objects and arrays
docs/python/index.md-- Newlines as comma separators
docs/python/index.md-
docs/python/index.md:This is a Python binding for the Rust [vexy_json](https://github.com/twardoch/vexy_json) library, which is a port of the JavaScript [jsonic](https://github.com/jsonicjs/jsonic) library.
docs/python/index.md-
docs/python/index.md-## Installation
docs/python/index.md-
docs/python/index.md-```bash
docs/python/index.md:pip install vexy_json
docs/python/index.md-```
docs/python/index.md-
docs/python/index.md-## Quick Start
docs/python/index.md-
docs/python/index.md-```python
docs/python/index.md:import vexy_json
docs/python/index.md-
docs/python/index.md-# Parse forgiving JSON
docs/python/index.md:result = vexy_json.parse('''
docs/python/index.md-{
docs/python/index.md-    // This is a comment
docs/python/index.md-    name: "Alice",
--
docs/python/index.md-### Basic Parsing
docs/python/index.md-
docs/python/index.md-```python
docs/python/index.md:import vexy_json
docs/python/index.md-
docs/python/index.md-# Standard JSON
docs/python/index.md:data = vexy_json.parse('{"key": "value"}')
docs/python/index.md-
docs/python/index.md-# Forgiving features
docs/python/index.md:data = vexy_json.parse('''
docs/python/index.md-{
docs/python/index.md-    // Comments are allowed
docs/python/index.md-    unquoted_key: "value",
--
docs/python/index.md-### Custom Options
docs/python/index.md-
docs/python/index.md-```python
docs/python/index.md:import vexy_json
docs/python/index.md-
docs/python/index.md-# Parse with specific options
docs/python/index.md:data = vexy_json.parse_with_options(
docs/python/index.md-    'key: value',
docs/python/index.md-    allow_comments=True,
docs/python/index.md-    allow_trailing_commas=True,
--
docs/python/index.md-### Validation
docs/python/index.md-
docs/python/index.md-```python
docs/python/index.md:import vexy_json
docs/python/index.md-
docs/python/index.md-# Check if JSON is valid
docs/python/index.md:if vexy_json.is_valid('{"valid": true}'):
docs/python/index.md-    print("Valid JSON!")
docs/python/index.md-
docs/python/index.md:if not vexy_json.is_valid('invalid json'):
docs/python/index.md-    print("Invalid JSON!")
docs/python/index.md-```
docs/python/index.md-
docs/python/index.md-### Serialization
docs/python/index.md-
docs/python/index.md-```python
docs/python/index.md:import vexy_json
docs/python/index.md-
docs/python/index.md-data = {'name': 'Alice', 'age': 30}
docs/python/index.md-
docs/python/index.md-# Compact output
docs/python/index.md:json_str = vexy_json.dumps(data)
docs/python/index.md-print(json_str)
docs/python/index.md-# Output: {"name":"Alice","age":30}
docs/python/index.md-
docs/python/index.md-# Pretty printed output
docs/python/index.md:json_str = vexy_json.dumps(data, indent=2)
docs/python/index.md-print(json_str)
docs/python/index.md-# Output:
docs/python/index.md-# {
--
docs/python/index.md-
docs/python/index.md-## Comparison with Standard Library
docs/python/index.md-
docs/python/index.md:Unlike Python's built-in `json` module, vexy_json is forgiving and accepts non-standard JSON:
docs/python/index.md-
docs/python/index.md-```python
docs/python/index.md-import json
docs/python/index.md:import vexy_json
docs/python/index.md-
docs/python/index.md-forgiving_json = '''
docs/python/index.md-{
--
docs/python/index.md-    print(f"json module failed: {e}")
docs/python/index.md-
docs/python/index.md-# This works fine
docs/python/index.md:result = vexy_json.parse(forgiving_json)
docs/python/index.md:print(f"vexy_json parsed: {result}")
docs/python/index.md-```
docs/python/index.md-
docs/python/index.md-## Performance
docs/python/index.md-
docs/python/index.md:vexy_json is implemented in Rust and should be competitive with other JSON parsers for most use cases. The forgiving features add minimal overhead.
docs/python/index.md-
docs/python/index.md-## License
docs/python/index.md-
--
debug_test4.rs:use vexy_json::parse;
debug_test4.rs-
debug_test4.rs-fn main() {
debug_test4.rs-    // Test individual parts
--
docs/transform.md-### Basic Usage
docs/transform.md-
docs/transform.md-```rust
docs/transform.md:use vexy_json_core::transform::{normalize, normalize_with_options, NormalizerOptions};
docs/transform.md-
docs/transform.md-// Basic normalization with default options
docs/transform.md-let json = r#"{"b": 2, "a": 1, "c": null}"#;
--
docs/transform.md-Produces deterministic JSON output suitable for hashing and comparison:
docs/transform.md-
docs/transform.md-```rust
docs/transform.md:use vexy_json_core::transform::CanonicalNormalizer;
docs/transform.md-
docs/transform.md-let normalizer = CanonicalNormalizer::new();
docs/transform.md-let canonical = normalizer.normalize(json).unwrap();
--
docs/transform.md-Removes unnecessary elements and optimizes for size:
docs/transform.md-
docs/transform.md-```rust
docs/transform.md:use vexy_json_core::transform::CleanupNormalizer;
docs/transform.md-
docs/transform.md-let normalizer = CleanupNormalizer::new();
docs/transform.md-let cleaned = normalizer.normalize(json).unwrap();
--
docs/transform.md-### Basic Usage
docs/transform.md-
docs/transform.md-```rust
docs/transform.md:use vexy_json_core::transform::{optimize, optimize_with_options, OptimizerOptions};
docs/transform.md-
docs/transform.md-// Basic optimization with default options
docs/transform.md-let json = r#"{"count": 42.0, "items": [1, 2, 3]}"#;
--
docs/transform.md-Optimizes for minimal memory usage:
docs/transform.md-
docs/transform.md-```rust
docs/transform.md:use vexy_json_core::transform::MemoryOptimizer;
docs/transform.md-
docs/transform.md-let optimized = MemoryOptimizer::minimize_memory(&json).unwrap();
docs/transform.md-```
--
docs/transform.md-Optimizes for maximum performance:
docs/transform.md-
docs/transform.md-```rust
docs/transform.md:use vexy_json_core::transform::PerformanceOptimizer;
docs/transform.md-
docs/transform.md-let optimized = PerformanceOptimizer::maximize_performance(&json).unwrap();
docs/transform.md-```
--
docs/transform.md-Track optimization effectiveness:
docs/transform.md-
docs/transform.md-```rust
docs/transform.md:use vexy_json_core::transform::AstOptimizer;
docs/transform.md-
docs/transform.md-let mut optimizer = AstOptimizer::new();
docs/transform.md-let optimized = optimizer.optimize(&json).unwrap();
--
docs/transform.md-Combine normalization and optimization:
docs/transform.md-
docs/transform.md-```rust
docs/transform.md:use vexy_json_core::{parse, transform::{normalize, optimize}};
docs/transform.md-
docs/transform.md-let json = r#"{"z": 1.0, "a": 2.0, "b": null}"#;
docs/transform.md-let value = parse(json).unwrap();
--
docs/transform.md-Create custom transformation pipelines:
docs/transform.md-
docs/transform.md-```rust
docs/transform.md:use vexy_json_core::transform::{NormalizerOptions, OptimizerOptions};
docs/transform.md-
docs/transform.md-fn custom_transform(json: &str) -> Result<String, Error> {
docs/transform.md-    // First normalize
--
docs/transform.md-Both normalization and optimization can fail:
docs/transform.md-
docs/transform.md-```rust
docs/transform.md:use vexy_json_core::transform::normalize;
docs/transform.md-
docs/transform.md-match normalize(json) {
docs/transform.md-    Ok(normalized) => println!("Success: {}", normalized),
--
docs/transform.md-### With Parsing
docs/transform.md-
docs/transform.md-```rust
docs/transform.md:use vexy_json_core::{parse_with_options, transform::normalize, ParserOptions};
docs/transform.md-
docs/transform.md-let options = ParserOptions {
docs/transform.md-    allow_comments: true,
--
docs/transform.md-### With Streaming
docs/transform.md-
docs/transform.md-```rust
docs/transform.md:use vexy_json_core::{streaming::parse_streaming, transform::optimize};
docs/transform.md-
docs/transform.md-for value in parse_streaming(reader)? {
docs/transform.md-    let optimized = optimize(&value?)?;
--
tests/newline_as_comma.rs-use rustc_hash::FxHashMap;
tests/newline_as_comma.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
tests/newline_as_comma.rs-
tests/newline_as_comma.rs-fn n(num: i64) -> Value {
tests/newline_as_comma.rs:    Value::Number(vexy_json::Number::Integer(num))
tests/newline_as_comma.rs-}
tests/newline_as_comma.rs-
tests/newline_as_comma.rs-#[test]
--
docs/development/gemini.md-
docs/development/gemini.md-## 1. Project Overview
docs/development/gemini.md-
docs/development/gemini.md:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
docs/development/gemini.md-
docs/development/gemini.md-## 2. Development Status
docs/development/gemini.md-
--
docs/development/gemini.md-    -   `src/error/mod.rs`: Implements custom error types for parsing failures.
docs/development/gemini.md--   `crates/cli`: The command-line interface.
docs/development/gemini.md-    -   `src/main.rs`: The entry point for the CLI binary.
docs/development/gemini.md:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`.
docs/development/gemini.md:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments.
docs/development/gemini.md--   `crates/test-utils`: Utility functions for testing.
docs/development/gemini.md-
docs/development/gemini.md-### 3.2. Core Features
--
docs/development/gemini.md-    -   Benchmarking is performed using `criterion.rs`, with benchmarks defined in the `benches/` directory.
docs/development/gemini.md--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
docs/development/gemini.md--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json` and `jsonic`.
docs/development/gemini.md:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
docs/development/gemini.md-
docs/development/gemini.md-## 4. Development Workflow
docs/development/gemini.md-
--
docs/release-notes.md-nav_order: 11
docs/release-notes.md----
docs/release-notes.md-
docs/release-notes.md:# vexy_json v2.0.0 Release Notes
docs/release-notes.md-
docs/release-notes.md-**🚀 Major Release - January 2025**
docs/release-notes.md-
docs/release-notes.md:We're thrilled to announce **vexy_json v2.0.0**, a groundbreaking release that transforms vexy_json from a capable JSON parser into a high-performance, enterprise-ready parsing platform. This release introduces streaming APIs, parallel processing, a plugin architecture, and significant performance improvements.
docs/release-notes.md-
docs/release-notes.md-## 🌟 Highlights
docs/release-notes.md-
--
docs/release-notes.md-
docs/release-notes.md----
docs/release-notes.md-
docs/release-notes.md:# vexy_json v1.0.0 Release Notes
docs/release-notes.md-
docs/release-notes.md-**🚀 Stable Release - January 7, 2025**
docs/release-notes.md-
docs/release-notes.md:We're excited to announce the stable release of **vexy_json v1.0.0**, a production-ready forgiving JSON parser for Rust. This is a complete port of the JavaScript library [jsonic](https://github.com/jsonicjs/jsonic), bringing powerful and flexible JSON parsing capabilities to the Rust ecosystem.
docs/release-notes.md-
docs/release-notes.md:## 🎉 What is vexy_json?
docs/release-notes.md-
docs/release-notes.md:vexy_json is a forgiving JSON parser that extends standard JSON with developer-friendly features while maintaining full compatibility with RFC 8259. It allows you to parse relaxed JSON syntax commonly found in configuration files, making JSON more human-readable and maintainable.
docs/release-notes.md-
docs/release-notes.md-## ✨ Key Features
docs/release-notes.md-
--
docs/release-notes.md-
docs/release-notes.md-```toml
docs/release-notes.md-[dependencies]
docs/release-notes.md:vexy_json = "1.0.0"
docs/release-notes.md-```
docs/release-notes.md-
docs/release-notes.md-### CLI Tool
docs/release-notes.md-
docs/release-notes.md-```bash
docs/release-notes.md:cargo install vexy_json
docs/release-notes.md-```
docs/release-notes.md-
docs/release-notes.md-## 🎯 Usage Examples
--
docs/release-notes.md-### Basic Library Usage
docs/release-notes.md-
docs/release-notes.md-```rust
docs/release-notes.md:use vexy_json::parse;
docs/release-notes.md-
docs/release-notes.md-// Standard JSON
docs/release-notes.md-let data = parse(r#"{"name": "Alice", "age": 30}"#)?;
--
docs/release-notes.md-
docs/release-notes.md-```bash
docs/release-notes.md-# Process configuration files
docs/release-notes.md:echo "{debug: true, port: 3000}" | vexy_json
docs/release-notes.md-# Output: {"debug":true,"port":3000}
docs/release-notes.md-
docs/release-notes.md-# Handle files with comments
docs/release-notes.md:cat config.jsonc | vexy_json > config.json
docs/release-notes.md-
docs/release-notes.md-# Pipeline integration
docs/release-notes.md:curl api.example.com/config | vexy_json | jq '.database'
docs/release-notes.md-```
docs/release-notes.md-
docs/release-notes.md-### Serde Integration
docs/release-notes.md-
docs/release-notes.md-```rust
docs/release-notes.md:use vexy_json::from_str;
docs/release-notes.md-use serde::Deserialize;
docs/release-notes.md-
docs/release-notes.md-#[derive(Deserialize)]
--
docs/release-notes.md-
docs/release-notes.md-## 🔄 jsonic Compatibility
docs/release-notes.md-
docs/release-notes.md:vexy_json achieves **complete compatibility** with the jsonic JavaScript library:
docs/release-notes.md-
docs/release-notes.md-- All 17 jsonic compatibility tests pass
docs/release-notes.md-- Identical parsing behavior for all supported features
--
docs/release-notes.md-Customize parsing behavior with `ParserOptions`:
docs/release-notes.md-
docs/release-notes.md-```rust
docs/release-notes.md:use vexy_json::{parse_with_options, ParserOptions};
docs/release-notes.md-
docs/release-notes.md-let mut options = ParserOptions::default();
docs/release-notes.md-options.allow_comments = false;           // Disable comments
--
docs/release-notes.md-
docs/release-notes.md-## 🏗️ Architecture
docs/release-notes.md-
docs/release-notes.md:vexy_json is built with a clean, modular architecture:
docs/release-notes.md-
docs/release-notes.md-- **Lexer**: High-performance tokenization with zero-copy strings
docs/release-notes.md-- **Parser**: Recursive descent parser with configurable grammar
--
docs/release-notes.md-Process large JSON files incrementally without loading them entirely into memory:
docs/release-notes.md-
docs/release-notes.md-```rust
docs/release-notes.md:use vexy_json::{StreamingParser, StreamingEvent};
docs/release-notes.md-
docs/release-notes.md-let mut parser = StreamingParser::new();
docs/release-notes.md-parser.feed(chunk1)?;
--
docs/release-notes.md-Automatically process large files using multiple CPU cores:
docs/release-notes.md-
docs/release-notes.md-```rust
docs/release-notes.md:use vexy_json::parse_parallel;
docs/release-notes.md-
docs/release-notes.md-let json_files = vec![file1, file2, file3, file4];
docs/release-notes.md-let results = parse_parallel(json_files);
docs/release-notes.md-```
docs/release-notes.md-
docs/release-notes.md-#### Plugin System
docs/release-notes.md:Extend vexy_json with custom functionality:
docs/release-notes.md-
docs/release-notes.md-```rust
docs/release-notes.md:use vexy_json::{Plugin, parse_with_plugins};
docs/release-notes.md-
docs/release-notes.md-struct MyPlugin;
docs/release-notes.md-impl Plugin for MyPlugin {
--
docs/release-notes.md-Native support for newline-delimited JSON:
docs/release-notes.md-
docs/release-notes.md-```rust
docs/release-notes.md:use vexy_json::NdJsonParser;
docs/release-notes.md-
docs/release-notes.md-let mut parser = NdJsonParser::new();
docs/release-notes.md-let values = parser.feed(ndjson_content)?;
--
docs/release-notes.md-
docs/release-notes.md-#### Watch Mode
docs/release-notes.md-```bash
docs/release-notes.md:vexy_json --watch config.json --output formatted.json
docs/release-notes.md-```
docs/release-notes.md-
docs/release-notes.md-#### Batch Processing
docs/release-notes.md-```bash
docs/release-notes.md:vexy_json --batch ./data/ --output-dir ./processed/ --parallel
docs/release-notes.md-```
docs/release-notes.md-
docs/release-notes.md-#### Advanced Formatting
docs/release-notes.md-```bash
docs/release-notes.md:vexy_json input.json --pretty --sort-keys --indent 4
docs/release-notes.md-```
docs/release-notes.md-
docs/release-notes.md-### 🔧 API Improvements
--
docs/release-notes.md-**Ready to upgrade?** 
docs/release-notes.md-
docs/release-notes.md-```bash
docs/release-notes.md:cargo add vexy_json@2.0.0
docs/release-notes.md-```
docs/release-notes.md-
docs/release-notes.md-For migration guidance, see our [Migration Guide](migration-guide/).
docs/release-notes.md-
docs/release-notes.md:**Questions or feedback?** Open an issue on [GitHub](https://github.com/twardoch/vexy_json/issues).
docs/release-notes.md-
docs/release-notes.md-**Happy parsing! 🦀**
--
docs/wasm.md-
docs/wasm.md-# WebAssembly (WASM) API Reference
docs/wasm.md-
docs/wasm.md:`vexy_json` provides WebAssembly bindings for use in JavaScript environments (browsers, Node.js). The WASM module exposes parsing functions that mirror the Rust API, including forgiving features and strict mode.
docs/wasm.md-
docs/wasm.md-## Usage
docs/wasm.md-
docs/wasm.md-```js
docs/wasm.md:import init, { parse_json, parse_json_with_options } from './pkg/vexy_json_wasm.js';
docs/wasm.md-
docs/wasm.md-await init();
docs/wasm.md-const result = parse_json_with_options('{a:1}', { allow_comments: true });
--
docs/wasm.md-
docs/wasm.md-```toml
docs/wasm.md-[dependencies]
docs/wasm.md:vexy_json = { version = "2.0.0", features = ["wasm"] }
docs/wasm.md-```
docs/wasm.md-
docs/wasm.md-After building your Rust project with the `wasm` feature (e.g., using `wasm-pack`), you can import the generated JavaScript module.
--
docs/wasm.md-**Example:**
docs/wasm.md-
docs/wasm.md-```javascript
docs/wasm.md:import init from './pkg/vexy_json_wasm.js';
docs/wasm.md-
docs/wasm.md-async function run() {
docs/wasm.md-  await init();
docs/wasm.md:  console.log("vexy_json WASM module loaded.");
docs/wasm.md:  // Now you can use other vexy_json functions
docs/wasm.md-}
docs/wasm.md-run();
docs/wasm.md-```
--
docs/wasm.md-**Example:**
docs/wasm.md-
docs/wasm.md-```javascript
docs/wasm.md:import { parse_json } from './pkg/vexy_json_wasm.js';
docs/wasm.md-
docs/wasm.md-try {
docs/wasm.md-  const result = parse_json(`{
--
docs/wasm.md-**Example:**
docs/wasm.md-
docs/wasm.md-```javascript
docs/wasm.md:import { parse_json_with_options } from './pkg/vexy_json_wasm.js';
docs/wasm.md-
docs/wasm.md-// Strict JSON mode
docs/wasm.md-const strictOptions = {
--
docs/wasm.md-**Example:**
docs/wasm.md-
docs/wasm.md-```javascript
docs/wasm.md:import { validate_json } from './pkg/vexy_json_wasm.js';
docs/wasm.md-
docs/wasm.md-console.log(validate_json('{"key": "value"}')); // true
docs/wasm.md-console.log(validate_json('{key: "value"}'));   // true (unquoted keys allowed by default)
--
docs/wasm.md-**Example:**
docs/wasm.md-
docs/wasm.md-```javascript
docs/wasm.md:import { get_parser_options, parse_json_with_options } from './pkg/vexy_json_wasm.js';
docs/wasm.md-
docs/wasm.md-const defaultOptions = get_parser_options();
docs/wasm.md-console.log(defaultOptions.allowComments); // true
--
docs/wasm.md-**Example:**
docs/wasm.md-
docs/wasm.md-```javascript
docs/wasm.md:import { parse_json, stringify_value } from './pkg/vexy_json_wasm.js';
docs/wasm.md-
docs/wasm.md-const parsed = parse_json('{key: "value", num: 42}');
docs/wasm.md-const jsonString = stringify_value(parsed); // '{"key":"value","num":42}'
--
docs/wasm.md-get_version_info(): object
docs/wasm.md-```
docs/wasm.md-
docs/wasm.md:Returns version and build information for the `vexy_json` library. Useful for debugging and compatibility checking.
docs/wasm.md-
docs/wasm.md-- Returns: A JavaScript object with properties like `version`, `description`, `authors`, `homepage`, `repository`, and `license`.
docs/wasm.md-
docs/wasm.md-**Example:**
docs/wasm.md-
docs/wasm.md-```javascript
docs/wasm.md:import { get_version_info } from './pkg/vexy_json_wasm.js';
docs/wasm.md-
docs/wasm.md-const info = get_version_info();
docs/wasm.md:console.log(`vexy_json v${info.version} - ${info.description}`);
docs/wasm.md-```
docs/wasm.md-
docs/wasm.md-## `ParseError` Class
--
docs/wasm.md-**Example (Error Handling):**
docs/wasm.md-
docs/wasm.md-```javascript
docs/wasm.md:import { parse_json } from './pkg/vexy_json_wasm.js';
docs/wasm.md-
docs/wasm.md-try {
docs/wasm.md-  parse_json('{invalid json');
docs/wasm.md-} catch (e) {
docs/wasm.md-  if (e instanceof Error && e.message.startsWith('Parse Error:')) { // Basic check for ParseError
docs/wasm.md:    console.error(`Caught vexy_json ParseError: ${e.message} at position ${e.position}`);
docs/wasm.md-  } else {
docs/wasm.md-    console.error(`Caught unexpected error: ${e}`);
docs/wasm.md-  }
--
CHANGELOG.md-### 🔧 Fixed
CHANGELOG.md-
CHANGELOG.md-#### Post-Migration Cleanup (v2.3.1)
CHANGELOG.md:- Fixed C API header struct naming mismatch: `vexy_json_parser_options` → `VexyJsonParserOptions`
CHANGELOG.md-- Fixed Python test file naming inconsistencies: `VexyJSONParser` → `VexyJsonParser`
CHANGELOG.md-- Added missing struct fields to enable compilation:
CHANGELOG.md-  - Added `confidence` field to `ContextRule` struct
--
CHANGELOG.md-  - Fixed unreachable patterns
CHANGELOG.md-
CHANGELOG.md-### 🚀 Added
CHANGELOG.md:- Created `vexify.py` tool for renaming project from vexy_json to vexy_json
CHANGELOG.md-  - Intelligent handling of different contexts (filenames, code, documentation)
CHANGELOG.md-  - Support for compound words (e.g., VexyJSONConfig → VexyJSONConfig)
CHANGELOG.md-  - Optional `--deep` flag for git history rewriting
--
CHANGELOG.md-
CHANGELOG.md-**Old (v1.x):**
CHANGELOG.md-```rust
CHANGELOG.md:use vexy_json::parse;
CHANGELOG.md-let value = parse(json_string)?;
CHANGELOG.md-```
CHANGELOG.md-
CHANGELOG.md-**New (v2.0) - Still Compatible:**
CHANGELOG.md-```rust
CHANGELOG.md:use vexy_json::parse;
CHANGELOG.md-let value = parse(json_string)?; // Still works!
CHANGELOG.md-```
CHANGELOG.md-
CHANGELOG.md-**New (v2.0) - Enhanced Features:**
CHANGELOG.md-```rust
CHANGELOG.md:use vexy_json::{parse_with_options, ParserOptions};
CHANGELOG.md:use vexy_json::streaming::StreamingParser;
CHANGELOG.md:use vexy_json::parallel_chunked::parse_parallel_chunked;
CHANGELOG.md-
CHANGELOG.md-// Advanced options
CHANGELOG.md-let options = ParserOptions {
--
CHANGELOG.md-
CHANGELOG.md-### Release Links
CHANGELOG.md-
CHANGELOG.md:[2.0.0]: https://github.com/twardoch/vexy_json/compare/v1.5.27...v2.0.0
CHANGELOG.md:[1.5.27]: https://github.com/twardoch/vexy_json/compare/v1.5.26...v1.5.27
CHANGELOG.md:[1.5.26]: https://github.com/twardoch/vexy_json/compare/v1.5.25...v1.5.26
CHANGELOG.md:[1.5.25]: https://github.com/twardoch/vexy_json/compare/v1.5.24...v1.5.25
CHANGELOG.md:[1.5.24]: https://github.com/twardoch/vexy_json/compare/v1.5.23...v1.5.24
CHANGELOG.md:[1.5.23]: https://github.com/twardoch/vexy_json/releases/tag/v1.5.23
CHANGELOG.md:[Unreleased]: https://github.com/twardoch/vexy_json/compare/v2.0.0...HEAD
--
docs/api.md-
docs/api.md-# API Reference v2.0.0
docs/api.md-
docs/api.md:This section provides detailed documentation for the `vexy_json` Rust library v2.0.0. The API is designed to be intuitive and idiomatic for Rust developers, with powerful new features for streaming, parallel processing, and extensibility.
docs/api.md-
docs/api.md:## `vexy_json::parse`
docs/api.md-
docs/api.md-```rust
docs/api.md-pub fn parse(input: &str) -> Result<Value, Error>
docs/api.md-```
docs/api.md-
docs/api.md:Parses a JSON-like string into a `vexy_json::Value` enum using default parser options. This is the primary entry point for using the library.
docs/api.md-
docs/api.md-- `input`: The string slice containing the JSON-like data to parse.
docs/api.md-- Returns:
docs/api.md-    - `Ok(Value)`: If parsing is successful, returns a `Value` enum representing the parsed data.
docs/api.md-    - `Err(Error)`: If an error occurs during parsing, returns an `Error` detailing the issue.
docs/api.md-
docs/api.md:## `vexy_json::parse_with_options`
docs/api.md-
docs/api.md-```rust
docs/api.md-pub fn parse_with_options(input: &str, options: ParserOptions) -> Result<Value, Error>
docs/api.md-```
docs/api.md-
docs/api.md:Parses a JSON-like string into a `vexy_json::Value` enum with custom parser options. This allows fine-grained control over which forgiving features are enabled.
docs/api.md-
docs/api.md-- `input`: The string slice containing the JSON-like data to parse.
docs/api.md-- `options`: A `ParserOptions` struct configuring the parser's behavior.
--
docs/api.md-    - `Ok(Value)`: If parsing is successful, returns a `Value` enum representing the parsed data.
docs/api.md-    - `Err(Error)`: If an error occurs during parsing, returns an `Error` detailing the issue.
docs/api.md-
docs/api.md:## `vexy_json::ParserOptions`
docs/api.md-
docs/api.md:This struct defines the configurable options for the `vexy_json` parser.
docs/api.md-
docs/api.md-```rust
docs/api.md-pub struct ParserOptions {
--
docs/api.md-`ParserOptions` implements `Default`, so you can create a default instance and then modify specific fields:
docs/api.md-
docs/api.md-```rust
docs/api.md:use vexy_json::ParserOptions;
docs/api.md-
docs/api.md-let mut options = ParserOptions::default();
docs/api.md-options.allow_comments = false; // Disable comments
docs/api.md-options.max_depth = 64; // Set a custom max depth
docs/api.md-```
docs/api.md-
docs/api.md:## `vexy_json::Value` Enum
docs/api.md-
docs/api.md:This enum represents the different types of JSON values that `vexy_json` can parse.
docs/api.md-
docs/api.md-```rust
docs/api.md-pub enum Value {
--
docs/api.md-
docs/api.md-- `Null`: Represents a JSON `null` value.
docs/api.md-- `Bool(bool)`: Represents a JSON boolean (`true` or `false`).
docs/api.md:- `Number(Number)`: Represents a JSON numeric value. See `vexy_json::Number` for details.
docs/api.md-- `String(String)`: Represents a JSON string.
docs/api.md-- `Array(Vec<Value>)`: Represents a JSON array, a vector of `Value` enums.
docs/api.md-- `Object(HashMap<String, Value>)`: Represents a JSON object, a hash map of string keys to `Value` enums.
--
docs/api.md-- `as_array() -> Option<&Vec<Value>>`
docs/api.md-- `as_object() -> Option<&HashMap<String, Value>>`
docs/api.md-
docs/api.md:## `vexy_json::Number` Enum
docs/api.md-
docs/api.md-This enum represents a JSON number, which can be either an integer or a floating-point number.
docs/api.md-
--
docs/api.md-- `Integer(i64)`: An integer value that fits in an `i64`.
docs/api.md-- `Float(f64)`: A floating-point value.
docs/api.md-
docs/api.md:## `vexy_json::Error` Enum
docs/api.md-
docs/api.md-This enum defines the types of errors that can occur during parsing.
docs/api.md-
--
docs/api.md-- `InvalidEscape(usize)`: An invalid escape sequence was found in a string at a given position.
docs/api.md-- `InvalidUnicode(usize)`: An invalid Unicode escape sequence was found at a given position.
docs/api.md-- `UnterminatedString(usize)`: A string literal was not properly terminated, starting at a given position.
docs/api.md:- `TrailingComma(usize)`: A trailing comma was found where not allowed (though typically allowed by `vexy_json`'s forgiving nature, this error might occur in strict modes or specific contexts) at a given position.
docs/api.md-- `Expected { expected: String, found: String, position: usize }`: The parser expected a specific token or value but found something else at a given position.
docs/api.md-- `DepthLimitExceeded(usize)`: The maximum recursion depth was exceeded while parsing nested structures at a given position.
docs/api.md-- `Custom(String)`: A custom error with a descriptive message.
--
docs/api.md-
docs/api.md-## Serde Integration
docs/api.md-
docs/api.md:`vexy_json` provides optional integration with the `serde` serialization framework. When the `serde` feature is enabled in your `Cargo.toml`, `vexy_json::Value` and `vexy_json::Number` implement the `Serialize` and `Deserialize` traits. This allows easy conversion between `vexy_json::Value` and other data formats supported by Serde (e.g., `serde_json::Value`).
docs/api.md-
docs/api.md:To enable this feature, add `serde` to your `vexy_json` dependency in `Cargo.toml`:
docs/api.md-
docs/api.md-```toml
docs/api.md-[dependencies]
docs/api.md:vexy_json = { version = "2.0.0", features = ["serde"] }
docs/api.md-```
docs/api.md-
docs/api.md-**Example:**
docs/api.md-
docs/api.md-```rust
docs/api.md:use vexy_json::{parse, Value};
docs/api.md-use serde_json; // Requires `serde_json` crate
docs/api.md-
docs/api.md-fn main() {
docs/api.md-    let json_str = r#"{ "name": "Alice", "age": 30 }"#;
docs/api.md:    let vexy_json_value: Value = parse(json_str).unwrap();
docs/api.md-
docs/api.md:    // Convert vexy_json::Value to serde_json::Value
docs/api.md:    let serde_value: serde_json::Value = serde_json::to_value(vexy_json_value).unwrap();
docs/api.md-    println!("Converted to serde_json::Value: {}", serde_value);
docs/api.md-
docs/api.md:    // Convert serde_json::Value back to vexy_json::Value
docs/api.md:    let new_vexy_json_value: Value = serde_json::from_value(serde_value).unwrap();
docs/api.md:    println!("Converted back to vexy_json::Value: {:?}", new_vexy_json_value);
docs/api.md-}
docs/api.md-```
docs/api.md-
docs/api.md-## WebAssembly (WASM) Bindings
docs/api.md-
docs/api.md:`vexy_json` offers WebAssembly bindings, allowing it to be used directly in JavaScript environments (e.g., web browsers, Node.js). This is enabled via the `wasm` feature.
docs/api.md-
docs/api.md:To enable this feature, add `wasm` to your `vexy_json` dependency in `Cargo.toml`:
docs/api.md-
docs/api.md-```toml
docs/api.md-[dependencies]
docs/api.md:vexy_json = { version = "2.0.0", features = ["wasm"] }
docs/api.md-```
docs/api.md-
docs/api.md-For detailed documentation on the WebAssembly API, including JavaScript examples, please refer to the [WASM API Reference](wasm/).
docs/api.md-
docs/api.md-## Streaming API (New in v2.0.0)
docs/api.md-
docs/api.md:`vexy_json` v2.0.0 introduces a powerful streaming parser for processing large JSON files incrementally.
docs/api.md-
docs/api.md:### `vexy_json::StreamingParser`
docs/api.md-
docs/api.md-```rust
docs/api.md-pub struct StreamingParser { /* ... */ }
--
docs/api.md-
docs/api.md-Example usage:
docs/api.md-```rust
docs/api.md:use vexy_json::{StreamingParser, StreamingEvent};
docs/api.md-
docs/api.md-let mut parser = StreamingParser::new();
docs/api.md-parser.feed(r#"{"key": "value"}"#)?;
--
docs/api.md-}
docs/api.md-```
docs/api.md-
docs/api.md:### `vexy_json::StreamingEvent`
docs/api.md-
docs/api.md-```rust
docs/api.md-pub enum StreamingEvent {
--
docs/api.md-
docs/api.md-## Parallel Processing (New in v2.0.0)
docs/api.md-
docs/api.md:`vexy_json` v2.0.0 includes parallel processing capabilities for batch operations using the `rayon` crate.
docs/api.md-
docs/api.md:### `vexy_json::parse_parallel`
docs/api.md-
docs/api.md-```rust
docs/api.md-pub fn parse_parallel<I>(inputs: I) -> Vec<Result<Value, Error>>
--
docs/api.md-Process multiple JSON strings in parallel:
docs/api.md-
docs/api.md-```rust
docs/api.md:use vexy_json::parse_parallel;
docs/api.md-
docs/api.md-let json_strings = vec![
docs/api.md-    r#"{"id": 1, "name": "Alice"}"#,
--
docs/api.md-}
docs/api.md-```
docs/api.md-
docs/api.md:### `vexy_json::ParallelOptions`
docs/api.md-
docs/api.md-```rust
docs/api.md-pub struct ParallelOptions {
--
docs/api.md-
docs/api.md-## Plugin System (New in v2.0.0)
docs/api.md-
docs/api.md:`vexy_json` v2.0.0 introduces a plugin architecture for extending parsing capabilities.
docs/api.md-
docs/api.md:### `vexy_json::Plugin` Trait
docs/api.md-
docs/api.md-```rust
docs/api.md-pub trait Plugin: Send + Sync {
--
docs/api.md-Example plugin implementation:
docs/api.md-
docs/api.md-```rust
docs/api.md:use vexy_json::{Plugin, Value, Error};
docs/api.md-
docs/api.md-struct DateNormalizerPlugin;
docs/api.md-
--
docs/api.md-}
docs/api.md-```
docs/api.md-
docs/api.md:### `vexy_json::parse_with_plugins`
docs/api.md-
docs/api.md-```rust
docs/api.md-pub fn parse_with_plugins(
--
docs/api.md-
docs/api.md-Usage example:
docs/api.md-```rust
docs/api.md:use vexy_json::{parse_with_plugins, ParserOptions};
docs/api.md-
docs/api.md-let plugins: Vec<Box<dyn Plugin>> = vec![
docs/api.md-    Box::new(DateNormalizerPlugin),
--
docs/api.md-
docs/api.md-## NDJSON Support (New in v2.0.0)
docs/api.md-
docs/api.md:### `vexy_json::NdJsonParser`
docs/api.md-
docs/api.md-```rust
docs/api.md-pub struct NdJsonParser { /* ... */ }
--
docs/api.md-
docs/api.md-Example:
docs/api.md-```rust
docs/api.md:use vexy_json::NdJsonParser;
docs/api.md-
docs/api.md-let mut parser = NdJsonParser::new();
docs/api.md-let input = r#"{"id": 1}
--
crates/core/src/parser/iterative.rs-/// # Examples
crates/core/src/parser/iterative.rs-///
crates/core/src/parser/iterative.rs-/// ```
crates/core/src/parser/iterative.rs:/// use vexy_json_core::parser::iterative::parse_iterative;
crates/core/src/parser/iterative.rs:/// use vexy_json_core::parser::ParserOptions;
crates/core/src/parser/iterative.rs-///
crates/core/src/parser/iterative.rs-/// let json = r#"{"key": "value", "numbers": [1, 2, 3]}"#;
crates/core/src/parser/iterative.rs-/// let options = ParserOptions::default();
--
docs/features-overview.md-Vexy JSON accepts JSON that would be rejected by standard parsers:
docs/features-overview.md-
docs/features-overview.md-```rust
docs/features-overview.md:use vexy_json_core::parse;
docs/features-overview.md-
docs/features-overview.md-// Comments are allowed
docs/features-overview.md-let json = r#"
--
docs/features-overview.md-Standardize JSON format for consistent processing:
docs/features-overview.md-
docs/features-overview.md-```rust
docs/features-overview.md:use vexy_json_core::transform::normalize;
docs/features-overview.md-
docs/features-overview.md-let json = r#"{"z": 1, "a": 2, "b": null}"#;
docs/features-overview.md-let normalized = normalize(json).unwrap();
--
docs/features-overview.md-Improve JSON structure for performance:
docs/features-overview.md-
docs/features-overview.md-```rust
docs/features-overview.md:use vexy_json_core::transform::optimize;
docs/features-overview.md-
docs/features-overview.md-let json = r#"{"count": 42.0, "price": 19.0}"#;
docs/features-overview.md-let optimized = optimize(&json).unwrap();
--
docs/features-overview.md-Automatically fix common JSON issues:
docs/features-overview.md-
docs/features-overview.md-```rust
docs/features-overview.md:use vexy_json_core::repair::JsonRepairer;
docs/features-overview.md-
docs/features-overview.md-let mut repairer = JsonRepairer::new(10);
docs/features-overview.md-let broken = r#"{"key": "value", "missing": "quote}"#;
--
docs/features-overview.md-Process large JSON files efficiently:
docs/features-overview.md-
docs/features-overview.md-```rust
docs/features-overview.md:use vexy_json_core::streaming::parse_streaming;
docs/features-overview.md-
docs/features-overview.md-for value in parse_streaming(reader)? {
docs/features-overview.md-    // Process each JSON value as it's parsed
--
docs/features-overview.md-Parse multiple JSON documents simultaneously:
docs/features-overview.md-
docs/features-overview.md-```rust
docs/features-overview.md:use vexy_json_core::parallel::parse_parallel;
docs/features-overview.md-
docs/features-overview.md-let results = parse_parallel(&json_strings, ParallelConfig::default())?;
docs/features-overview.md-```
--
docs/features-overview.md-Full-featured Python bindings with NumPy and Pandas support:
docs/features-overview.md-
docs/features-overview.md-```python
docs/features-overview.md:import vexy_json
docs/features-overview.md-
docs/features-overview.md-# Standard JSON parsing
docs/features-overview.md:data = vexy_json.loads('{"name": "John", "age": 30}')
docs/features-overview.md-
docs/features-overview.md-# NumPy integration
docs/features-overview.md-import numpy as np
docs/features-overview.md:array = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
docs/features-overview.md-
docs/features-overview.md-# Pandas integration
docs/features-overview.md-import pandas as pd
docs/features-overview.md:df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
docs/features-overview.md-
docs/features-overview.md-# Streaming support
docs/features-overview.md:with vexy_json.StreamingParser() as parser:
docs/features-overview.md-    for item in parser.parse_stream(file_handle):
docs/features-overview.md-        process(item)
docs/features-overview.md-```
--
docs/features-overview.md-Run Vexy JSON in browsers and JavaScript environments:
docs/features-overview.md-
docs/features-overview.md-```javascript
docs/features-overview.md:import init, { parse } from 'vexy_json-wasm';
docs/features-overview.md-
docs/features-overview.md-await init();
docs/features-overview.md-const result = parse('{"name": "John", age: 30}');
--
docs/features-overview.md-### Comprehensive Error Reporting
docs/features-overview.md-
docs/features-overview.md-```rust
docs/features-overview.md:use vexy_json_core::parse;
docs/features-overview.md-
docs/features-overview.md-match parse(invalid_json) {
docs/features-overview.md-    Ok(value) => println!("Parsed: {:?}", value),
--
docs/features-overview.md-### Automatic Recovery
docs/features-overview.md-
docs/features-overview.md-```rust
docs/features-overview.md:use vexy_json_core::parser::parse_with_fallback;
docs/features-overview.md-
docs/features-overview.md-// Tries multiple parsing strategies automatically
docs/features-overview.md-let result = parse_with_fallback(input, options);
--
docs/features-overview.md-### Repair with Confidence Scoring
docs/features-overview.md-
docs/features-overview.md-```rust
docs/features-overview.md:use vexy_json_core::repair::advanced::AdvancedJsonRepairer;
docs/features-overview.md-
docs/features-overview.md-let mut repairer = AdvancedJsonRepairer::new();
docs/features-overview.md-let (fixed, strategies) = repairer.repair(input)?;
--
docs/features-overview.md-Extend Vexy JSON with custom functionality:
docs/features-overview.md-
docs/features-overview.md-```rust
docs/features-overview.md:use vexy_json_core::plugin::Plugin;
docs/features-overview.md-
docs/features-overview.md-struct CustomPlugin;
docs/features-overview.md-
--
docs/features-overview.md-### Schema Validation
docs/features-overview.md-
docs/features-overview.md-```rust
docs/features-overview.md:use vexy_json_core::plugin::SchemaValidationPlugin;
docs/features-overview.md-
docs/features-overview.md-let plugin = SchemaValidationPlugin::new(schema);
docs/features-overview.md-// Validates JSON against schema during parsing
--
docs/features-overview.md-### Date/Time Parsing
docs/features-overview.md-
docs/features-overview.md-```rust
docs/features-overview.md:use vexy_json_core::plugin::DateTimePlugin;
docs/features-overview.md-
docs/features-overview.md-let plugin = DateTimePlugin::new();
docs/features-overview.md-// Automatically parses ISO 8601 date strings
--
docs/features-overview.md-### Comment Preservation
docs/features-overview.md-
docs/features-overview.md-```rust
docs/features-overview.md:use vexy_json_core::plugin::CommentPreservationPlugin;
docs/features-overview.md-
docs/features-overview.md-let plugin = CommentPreservationPlugin::new();
docs/features-overview.md-// Preserves comments in parsed JSON
--
docs/development/lean-minimalization.md-
docs/development/lean-minimalization.md-# LEAN.md
docs/development/lean-minimalization.md-
docs/development/lean-minimalization.md:## vexy_json: Definitive Lean/Minimalization Checklist & Rationale
docs/development/lean-minimalization.md-
docs/development/lean-minimalization.md:This actionable document is for reducing the vexy_json codebase to the absolutely minimal, efficient, and dependency-free parser crate, suitable for distribution or embedding.
docs/development/lean-minimalization.md-
docs/development/lean-minimalization.md----
docs/development/lean-minimalization.md-### SECTION 1 — **REMOVE ENTIRELY / DEAD CODE**
--
docs/development/RELEASE_CHECKLIST.md-```
docs/development/RELEASE_CHECKLIST.md-
docs/development/RELEASE_CHECKLIST.md-### Homebrew (macOS)
docs/development/RELEASE_CHECKLIST.md:- [ ] Update Formula/vexy_json.rb with new version and SHA256
docs/development/RELEASE_CHECKLIST.md:- [ ] Test installation: `brew install --build-from-source ./Formula/vexy_json.rb`
docs/development/RELEASE_CHECKLIST.md-- [ ] Submit PR to homebrew-core (if applicable)
docs/development/RELEASE_CHECKLIST.md-
docs/development/RELEASE_CHECKLIST.md-## Communication
--
crates/core/src/lexer/mod.rs://! Modular lexer architecture for vexy_json parsing
crates/core/src/lexer/mod.rs-//!
crates/core/src/lexer/mod.rs-//! This module provides a trait-based lexer design that allows for
crates/core/src/lexer/mod.rs-//! different lexer implementations optimized for various use cases:
--
docs/development/RELEASE_PROCESS.md-
docs/development/RELEASE_PROCESS.md-### Binaries
docs/development/RELEASE_PROCESS.md-- **macOS**: Universal binary (x86_64 + ARM64)
docs/development/RELEASE_PROCESS.md:  - `vexy_json-2.0.0-macos.zip` - Standalone binary
docs/development/RELEASE_PROCESS.md:  - `vexy_json-2.0.0-macos.dmg` - Installer with PKG
docs/development/RELEASE_PROCESS.md-- **Linux**: 
docs/development/RELEASE_PROCESS.md:  - `vexy_json-2.0.0-linux-x86_64.tar.gz` - x86_64 binary
docs/development/RELEASE_PROCESS.md:  - `vexy_json-2.0.0-linux-aarch64.tar.gz` - ARM64 binary
docs/development/RELEASE_PROCESS.md-- **Windows**:
docs/development/RELEASE_PROCESS.md:  - `vexy_json-2.0.0-windows-x86_64.zip` - x86_64 binary
docs/development/RELEASE_PROCESS.md-
docs/development/RELEASE_PROCESS.md-### WASM Package
docs/development/RELEASE_PROCESS.md:- `vexy_json-wasm-2.0.0.tar.gz` - WebAssembly module with TypeScript bindings
docs/development/RELEASE_PROCESS.md-
docs/development/RELEASE_PROCESS.md-### Source
docs/development/RELEASE_PROCESS.md-- Source code archives (automatically created by GitHub)
--
docs/development/RELEASE_PROCESS.md-
docs/development/RELEASE_PROCESS.md-The macOS installer includes:
docs/development/RELEASE_PROCESS.md-- Universal binary supporting Intel and Apple Silicon
docs/development/RELEASE_PROCESS.md:- PKG installer that places `vexy_json` in `/usr/local/bin`
docs/development/RELEASE_PROCESS.md-- Code-signed DMG (requires Apple Developer certificate)
docs/development/RELEASE_PROCESS.md-- Automatic PATH configuration
docs/development/RELEASE_PROCESS.md-
--
docs/development/RELEASE_PROCESS.md-1. **Verify Installation Methods**:
docs/development/RELEASE_PROCESS.md-   ```bash
docs/development/RELEASE_PROCESS.md-   # Homebrew (macOS)
docs/development/RELEASE_PROCESS.md:   brew update && brew install vexy_json
docs/development/RELEASE_PROCESS.md-   
docs/development/RELEASE_PROCESS.md-   # Cargo
docs/development/RELEASE_PROCESS.md:   cargo install vexy_json-cli
docs/development/RELEASE_PROCESS.md-   
docs/development/RELEASE_PROCESS.md-   # npm (WASM)
docs/development/RELEASE_PROCESS.md:   npm install vexy_json-wasm
docs/development/RELEASE_PROCESS.md-   ```
docs/development/RELEASE_PROCESS.md-
docs/development/RELEASE_PROCESS.md-2. **Update Documentation**:
docs/development/RELEASE_PROCESS.md-   - The docs site auto-updates via GitHub Pages
docs/development/RELEASE_PROCESS.md:   - Verify at: https://twardoch.github.io/vexy_json/
docs/development/RELEASE_PROCESS.md-
docs/development/RELEASE_PROCESS.md-3. **Announce Release**:
docs/development/RELEASE_PROCESS.md-   - GitHub Discussions
--
docs/development/RELEASE_CANDIDATE.md-
docs/development/RELEASE_CANDIDATE.md-### Core Parsing API
docs/development/RELEASE_CANDIDATE.md-```rust
docs/development/RELEASE_CANDIDATE.md:use vexy_json::{parse, parse_with_options, ParserOptions};
docs/development/RELEASE_CANDIDATE.md-
docs/development/RELEASE_CANDIDATE.md-// Simple parsing
docs/development/RELEASE_CANDIDATE.md-let value = parse(r#"{"key": "value"}"#)?;
--
docs/development/RELEASE_CANDIDATE.md-
docs/development/RELEASE_CANDIDATE.md-### Streaming API
docs/development/RELEASE_CANDIDATE.md-```rust
docs/development/RELEASE_CANDIDATE.md:use vexy_json::streaming::StreamingParser;
docs/development/RELEASE_CANDIDATE.md-
docs/development/RELEASE_CANDIDATE.md-let mut parser = StreamingParser::new();
docs/development/RELEASE_CANDIDATE.md-for chunk in file_chunks {
--
docs/development/RELEASE_CANDIDATE.md-
docs/development/RELEASE_CANDIDATE.md-### Parallel Processing API
docs/development/RELEASE_CANDIDATE.md-```rust
docs/development/RELEASE_CANDIDATE.md:use vexy_json::parallel_chunked::{parse_parallel_chunked, ChunkedConfig};
docs/development/RELEASE_CANDIDATE.md-
docs/development/RELEASE_CANDIDATE.md-let config = ChunkedConfig {
docs/development/RELEASE_CANDIDATE.md-    chunk_size: 1024 * 1024, // 1MB chunks
--
docs/development/RELEASE_CANDIDATE.md-
docs/development/RELEASE_CANDIDATE.md-### Plugin System API
docs/development/RELEASE_CANDIDATE.md-```rust
docs/development/RELEASE_CANDIDATE.md:use vexy_json::plugin::{ParserPlugin, PluginRegistry};
docs/development/RELEASE_CANDIDATE.md-
docs/development/RELEASE_CANDIDATE.md-struct CustomPlugin;
docs/development/RELEASE_CANDIDATE.md-impl ParserPlugin for CustomPlugin {
--
docs/developer-guide.md-nav_order: 2
docs/developer-guide.md----
docs/developer-guide.md-
docs/developer-guide.md:# Developer Guide for Extending the vexy_json Web Tool
docs/developer-guide.md-
docs/developer-guide.md:This guide is for developers who want to contribute to or extend the `vexy_json` web tool. It covers the project structure, build process, and key development considerations.
docs/developer-guide.md-
docs/developer-guide.md-## Project Structure
docs/developer-guide.md-
docs/developer-guide.md:The `vexy_json` project uses a multi-crate Cargo workspace structure with Jekyll integration for web tools.
docs/developer-guide.md-
docs/developer-guide.md-### Workspace Structure
docs/developer-guide.md-
--
docs/developer-guide.md-    *   `_config.yml`: Jekyll configuration file.
docs/developer-guide.md-    *   `tool.html`: Vexy JSON interactive tool (WebAssembly-powered)
docs/developer-guide.md-    *   `jsonic.html`: Jsonic interactive tool (CDN-powered)
docs/developer-guide.md:    *   `vexy_json-tool.md`: Jekyll wrapper for Vexy JSON tool
docs/developer-guide.md-    *   `jsonic-tool.md`: Jekyll wrapper for Jsonic tool
docs/developer-guide.md-    *   `tool.md`: Tools overview page
docs/developer-guide.md-    *   `assets/`: Static assets for the web tools.
docs/developer-guide.md-        *   `css/`: CSS files, including `tool.css` and `enhanced-features.css`.
docs/developer-guide.md-        *   `js/`: JavaScript files for both tools
docs/developer-guide.md:    *   `pkg/`: Contains the compiled WebAssembly module (`vexy_json_bg.wasm`, `vexy_json.js`, `vexy_json.d.ts`).
docs/developer-guide.md-
docs/developer-guide.md-## Development Environment Setup
docs/developer-guide.md-
--
docs/developer-guide.md-
docs/developer-guide.md-This is the main JavaScript file for the web tool. It handles UI interactions, calls the WASM functions, and updates the display.
docs/developer-guide.md-
docs/developer-guide.md:*   **WASM Module Import**: The `pkg/vexy_json_wasm.js` module (generated by `wasm-pack`) is imported here.
docs/developer-guide.md-*   **Asynchronous Operations**: WASM module loading and initialization are asynchronous. Ensure you `await` the `init()` function.
docs/developer-guide.md-*   **UI Updates**: Use standard DOM manipulation to update the input/output areas, error messages, and other UI elements.
docs/developer-guide.md-*   **Event Listeners**: Attach event listeners to buttons, toggles, and text areas to respond to user actions.
--
docs/_config.yml-author:
docs/_config.yml-  name: Adam Twardoch
docs/_config.yml-  url: https://github.com/twardoch
docs/_config.yml:baseurl: /vexy_json
docs/_config.yml-# Collections
docs/_config.yml-collections:
docs/_config.yml-  pages:
--
docs/_config.yml-  - '**/gems/jekyll-*/lib/site_template/_posts/*'
docs/_config.yml-  - 'internal/**/*'
docs/_config.yml-github:
docs/_config.yml:  repository_url: https://github.com/twardoch/vexy_json
docs/_config.yml-highlighter: rouge
docs/_config.yml-# Include WASM and tool files in build
docs/_config.yml-include:
--
docs/_config.yml-back_to_top_text: "Back to top"
docs/_config.yml-
docs/_config.yml-# Footer content
docs/_config.yml:footer_content: "Copyright &copy; 2025 Adam Twardoch. Distributed by an <a href=\"https://github.com/twardoch/vexy_json/tree/main/LICENSE\">MIT license.</a>"
docs/_config.yml-
docs/_config.yml-# External navigation links will be removed from here as just-the-docs handles them in the content
docs/_config.yml-# Plugin configuration
--
docs/_config.yml-  - jekyll-sitemap
docs/_config.yml-  - jekyll-optional-front-matter
docs/_config.yml-# Repository information
docs/_config.yml:repository: twardoch/vexy_json
docs/_config.yml-# Performance and caching
docs/_config.yml-sass:
docs/_config.yml-  style: compressed
--
docs/_config.yml-social:
docs/_config.yml-  - icon: github
docs/_config.yml-    name: GitHub
docs/_config.yml:    url: https://github.com/twardoch/vexy_json
docs/_config.yml-# WASM and static file configuration
docs/_config.yml-# Ensure proper MIME types for WebAssembly files
docs/_config.yml-static_files:
--
docs/_config.yml-  - /pkg/*.js
docs/_config.yml-  - /assets/**/*
docs/_config.yml-remote_theme: just-the-docs/just-the-docs
docs/_config.yml:# Site configuration for vexy_json documentation
docs/_config.yml:title: vexy_json - Forgiving JSON Parser
docs/_config.yml-url: https://twardoch.github.io
docs/_config.yml-# MIME type handling for GitHub Pages
docs/_config.yml-# Note: GitHub Pages automatically serves .wasm files with application/wasm MIME type
--
docs/development/implementation-summary.md-nav_order: 3
docs/development/implementation-summary.md----
docs/development/implementation-summary.md-
docs/development/implementation-summary.md:# Task Implementation Summary - vexy_json WebAssembly & Feature Verification
docs/development/implementation-summary.md-
docs/development/implementation-summary.md-## Overview
docs/development/implementation-summary.md:This document summarizes the implementation and verification of the next tasks from PLAN.md and TODO.md for the vexy_json project.
docs/development/implementation-summary.md-
docs/development/implementation-summary.md-## Tasks Completed ✅
docs/development/implementation-summary.md-
--
docs/development/implementation-summary.md-- **Browser Compatibility**: Tested in Chrome with automated cross-browser testing framework
docs/development/implementation-summary.md-- **Test Results**: WebAssembly initialization test passed (44ms duration)
docs/development/implementation-summary.md-- **File Locations**:
docs/development/implementation-summary.md:  - WASM files: `docs/pkg/vexy_json_bg.wasm`, `docs/pkg/vexy_json_wasm.js`
docs/development/implementation-summary.md-  - Test page: `docs/test-wasm.html`
docs/development/implementation-summary.md-  - Cross-browser test: `scripts/cross-browser-test.js`
docs/development/implementation-summary.md-
--
docs/development/implementation-summary.md-```json
docs/development/implementation-summary.md-{
docs/development/implementation-summary.md-  // Configuration with comments
docs/development/implementation-summary.md:  name: 'vexy_json',           // Unquoted key, single quotes
docs/development/implementation-summary.md-  version: "1.2.4",        /* Version string */
docs/development/implementation-summary.md-  features: [
docs/development/implementation-summary.md-    "comments",
--
docs/development/implementation-summary.md-- `scripts/cross-browser-test.js` - Improved timing and error handling
docs/development/implementation-summary.md-
docs/development/implementation-summary.md-### Verified Files:
docs/development/implementation-summary.md:- `docs/pkg/vexy_json_bg.wasm` - WebAssembly binary
docs/development/implementation-summary.md:- `docs/pkg/vexy_json_wasm.js` - JavaScript bindings
docs/development/implementation-summary.md-- `docs/test-wasm.html` - Browser test page
docs/development/implementation-summary.md-- `docs/tool.html` - Interactive web tool
docs/development/implementation-summary.md-
--
docs/development/implementation-summary.md-- ✅ All forgiving JSON features working consistently (100% test coverage)
docs/development/implementation-summary.md-- ✅ Git-tag-based semver properly implemented (v1.2.4)
docs/development/implementation-summary.md-
docs/development/implementation-summary.md:The vexy_json project now has robust WebAssembly support with comprehensive feature verification and proper version management.
--
docs/development/distribution-builds.md-nav_order: 4
docs/development/distribution-builds.md----
docs/development/distribution-builds.md-
docs/development/distribution-builds.md:# vexy_json Distribution Build Scripts
docs/development/distribution-builds.md-
docs/development/distribution-builds.md:This directory contains robust, maintainable scripts for building vexy_json CLI deliverables for all major platforms:
docs/development/distribution-builds.md-
docs/development/distribution-builds.md-- **macOS**: Universal binary, .pkg installer, and .dmg disk image
docs/development/distribution-builds.md-- **Windows**: .exe in a .zip archive
--
docs/development/distribution-builds.md-
docs/development/distribution-builds.md-## Support
docs/development/distribution-builds.md-
docs/development/distribution-builds.md:For issues, see the main vexy_json repository or open an issue.
--
docs/development/refactor-plan.md-
docs/development/refactor-plan.md-# REFACTOR.md – Authoring Brief (Revised for Lean & Refactor Principles)
docs/development/refactor-plan.md-
docs/development/refactor-plan.md:This document is the canonical, **action-oriented**, **self-contained**, and **phased** roadmap for the vexy_json refactor sprint. It integrates the detailed refactor playbook and quality principles from [`REFACTOR_PROMPT.md`](REFACTOR_PROMPT.md) and the minimalization/dead code removal guidance from [`LEAN.md`](LEAN.md). It is written for a technically strong engineer new to this repository.
docs/development/refactor-plan.md-
docs/development/refactor-plan.md----
docs/development/refactor-plan.md-
docs/development/refactor-plan.md-## 1. Executive Summary
docs/development/refactor-plan.md-
docs/development/refactor-plan.md:The vexy_json codebase is a monolithic Rust crate implementing a forgiving JSON parser, CLI, and WASM module. Its tightly coupled structure, legacy/dead code, and lack of clear boundaries hinder maintainability, performance, and extensibility. This refactor will:
docs/development/refactor-plan.md-
docs/development/refactor-plan.md-- Decouple components into a Cargo workspace of focused crates.
docs/development/refactor-plan.md-- Remove dead/legacy code and minimize dependencies.
--
docs/development/refactor-plan.md-- Enforce production-grade, review-friendly, and performance-aware practices.
docs/development/refactor-plan.md-- Improve documentation, developer experience, and CI/CD quality gates.
docs/development/refactor-plan.md-
docs/development/refactor-plan.md:Upon completion, vexy_json will be a lean, maintainable, and extensible parser suite, with robust testing, clear architecture, and a minimal core suitable for embedding or distribution.
docs/development/refactor-plan.md-
docs/development/refactor-plan.md----
docs/development/refactor-plan.md-
--
docs/development/refactor-plan.md-
docs/development/refactor-plan.md-Refactor into a Cargo workspace with these crates:
docs/development/refactor-plan.md-
docs/development/refactor-plan.md:- **vexy_json-core**: Core parser, lexer, value types, errors. No I/O, CLI, or WASM logic.
docs/development/refactor-plan.md:- **vexy_json-cli**: CLI wrapper, feature-gated.
docs/development/refactor-plan.md:- **vexy_json-wasm**: WASM bindings, feature-gated.
docs/development/refactor-plan.md:- **vexy_json-serde**: Serde integration, feature-gated.
docs/development/refactor-plan.md-- **test-utils**: Shared test helpers.
docs/development/refactor-plan.md-- **examples/**, **benches/**: Kept for development, excluded from lean/core builds.
docs/development/refactor-plan.md-
--
docs/development/refactor-plan.md-## 6. Testing & Quality Gates
docs/development/refactor-plan.md-
docs/development/refactor-plan.md-- **Coverage Baseline:** Measure with `cargo-tarpaulin`.
docs/development/refactor-plan.md:- **Target Coverage:** `vexy_json-core` ≥95%, CLI ≥80%, WASM ≥90%.
docs/development/refactor-plan.md-- **Testing Pyramid:** Unit, integration, property-based, and performance tests.
docs/development/refactor-plan.md-- **CI Workflow:** Format, lint, test, coverage, bench, build artifacts.
docs/development/refactor-plan.md-- **Deliverable Checklist per PR:**
--
docs/development/refactor-plan.md-
docs/development/refactor-plan.md-| Week  | Deliverable                                 | Success Metric                                 |
docs/development/refactor-plan.md-|-------|---------------------------------------------|------------------------------------------------|
docs/development/refactor-plan.md:| 1-2   | Workspace setup & `vexy_json-core` created      | CI green, core builds, dead code removed.      |
docs/development/refactor-plan.md-| 3-4   | Lexer refactored, emits spans               | Token struct has span, parser updated.         |
docs/development/refactor-plan.md-| 5-8   | New parser implemented                      | Property tests pass.                           |
docs/development/refactor-plan.md-| 9-10  | CLI/WASM migrated to new parser             | All integration tests pass.                    |
--
docs/vexy_json-tool.md-title: "Vexy JSON Parser"
docs/vexy_json-tool.md-description: "Interactive Vexy JSON parser with comments and flexible syntax"
docs/vexy_json-tool.md-nav_order: 10
docs/vexy_json-tool.md:permalink: /vexy_json-tool/
docs/vexy_json-tool.md----
docs/vexy_json-tool.md-
docs/vexy_json-tool.md-# Vexy JSON Interactive Parser
--
docs/release-process.md-# Release Process
docs/release-process.md-
docs/release-process.md:This document describes the automated release process for vexy_json.
docs/release-process.md-
docs/release-process.md-## Overview
docs/release-process.md-
--
docs/release-process.md-
docs/release-process.md-1. Delete the release from GitHub
docs/release-process.md-2. Yank the version from crates.io: `cargo yank --version 1.2.0`
docs/release-process.md:3. Unpublish from npm (within 72 hours): `npm unpublish @vexy_json/vexy_json@1.2.0`
docs/release-process.md-4. Delete the git tag: `git push --delete origin v1.2.0`
docs/release-process.md-
docs/release-process.md-## Troubleshooting
--
docs/plugin-registry.md-**Purpose**: Validate JSON against a schema  
docs/plugin-registry.md-**Usage**:
docs/plugin-registry.md-```rust
docs/plugin-registry.md:use vexy_json_core::plugin::plugins::SchemaValidationPlugin;
docs/plugin-registry.md-
docs/plugin-registry.md-let schema = parse(r#"{"type": "object", "properties": {"name": {"type": "string"}}}"#)?;
docs/plugin-registry.md-let validator = SchemaValidationPlugin::new(schema);
--
docs/plugin-registry.md-**Purpose**: Parse ISO 8601 dates and convert them to structured objects  
docs/plugin-registry.md-**Usage**:
docs/plugin-registry.md-```rust
docs/plugin-registry.md:use vexy_json_core::plugin::plugins::DateTimePlugin;
docs/plugin-registry.md-
docs/plugin-registry.md-let mut datetime_plugin = DateTimePlugin::new();
docs/plugin-registry.md-datetime_plugin.transform_value(&mut value, "$")?;
--
docs/plugin-registry.md-**Purpose**: Parse non-standard number formats (hex, binary, underscores)  
docs/plugin-registry.md-**Usage**:
docs/plugin-registry.md-```rust
docs/plugin-registry.md:use vexy_json_core::plugin::plugins::CustomNumberFormatPlugin;
docs/plugin-registry.md-
docs/plugin-registry.md-let mut number_plugin = CustomNumberFormatPlugin::new();
docs/plugin-registry.md-let result = number_plugin.on_number("0xFF", "$")?;
--
docs/plugin-registry.md-**Purpose**: Preserve comments during parsing  
docs/plugin-registry.md-**Usage**:
docs/plugin-registry.md-```rust
docs/plugin-registry.md:use vexy_json_core::plugin::plugins::CommentPreservationPlugin;
docs/plugin-registry.md-
docs/plugin-registry.md-let mut comment_plugin = CommentPreservationPlugin::new();
docs/plugin-registry.md-comment_plugin.add_comment("Description".to_string(), "$.field", false);
--
docs/plugin-registry.md-All plugins must implement the `ParserPlugin` trait:
docs/plugin-registry.md-
docs/plugin-registry.md-```rust
docs/plugin-registry.md:use vexy_json_core::plugin::ParserPlugin;
docs/plugin-registry.md:use vexy_json_core::ast::Value;
docs/plugin-registry.md:use vexy_json_core::error::Result;
docs/plugin-registry.md-use std::any::Any;
docs/plugin-registry.md-
docs/plugin-registry.md-struct MyPlugin;
--
docs/plugin-registry.md-
docs/plugin-registry.md-#### Direct Integration
docs/plugin-registry.md-```rust
docs/plugin-registry.md:use vexy_json_core::parser::Parser;
docs/plugin-registry.md:use vexy_json_core::plugin::ParserPluginManager;
docs/plugin-registry.md-
docs/plugin-registry.md-let mut manager = ParserPluginManager::new();
docs/plugin-registry.md-manager.register(Box::new(MyPlugin));
--
docs/plugin-registry.md-
docs/plugin-registry.md-#### Parser Options
docs/plugin-registry.md-```rust
docs/plugin-registry.md:use vexy_json::{parse_with_options, ParserOptions};
docs/plugin-registry.md-
docs/plugin-registry.md-let options = ParserOptions {
docs/plugin-registry.md-    plugins: vec![Box::new(MyPlugin)],
--
docs/plugin-registry.md-#[cfg(test)]
docs/plugin-registry.md-mod tests {
docs/plugin-registry.md-    use super::*;
docs/plugin-registry.md:    use vexy_json::parse;
docs/plugin-registry.md-
docs/plugin-registry.md-    #[test]
docs/plugin-registry.md-    fn test_my_plugin() {
--
crates/core/src/lexer/fast_lexer.rs-                return Err(Error::InvalidNumber(start));
crates/core/src/lexer/fast_lexer.rs-            }
crates/core/src/lexer/fast_lexer.rs-            
crates/core/src/lexer/fast_lexer.rs:            // Allow trailing decimal point (e.g., "1.") - vexy_json compatibility
crates/core/src/lexer/fast_lexer.rs-            // Only consume digits if they exist after the decimal point
crates/core/src/lexer/fast_lexer.rs-            while self.position < self.input.len() && (self.input[self.position].is_ascii_digit() || self.input[self.position] == b'_') {
crates/core/src/lexer/fast_lexer.rs-                self.position += 1;
--
docs/contributing.md-nav_order: 7
docs/contributing.md----
docs/contributing.md-
docs/contributing.md:# Contributing to vexy_json
docs/contributing.md-
docs/contributing.md:We welcome contributions to `vexy_json`! Whether it's bug reports, feature requests, documentation improvements, or code contributions, your help is greatly appreciated.
docs/contributing.md-
docs/contributing.md-## How to Contribute
docs/contributing.md-
docs/contributing.md:1.  **Fork the Repository**: Start by forking the `vexy_json` repository on GitHub.
docs/contributing.md-2.  **Clone Your Fork**: Clone your forked repository to your local machine:
docs/contributing.md-    ```bash
docs/contributing.md:    git clone https://github.com/your-username/vexy_json.git
docs/contributing.md:    cd vexy_json
docs/contributing.md-    ```
docs/contributing.md-3.  **Create a New Branch**: Create a new branch for your feature or bug fix:
docs/contributing.md-    ```bash
--
docs/contributing.md-    ```bash
docs/contributing.md-    git push origin feature/your-feature-name
docs/contributing.md-    ```
docs/contributing.md:9.  **Create a Pull Request**: Open a pull request from your fork to the `main` branch of the `vexy_json` repository. Provide a detailed description of your changes.
docs/contributing.md-
docs/contributing.md-## Code Style and Conventions
docs/contributing.md-
--
docs/contributing.md-
docs/contributing.md-## Extending the Web Tool
docs/contributing.md-
docs/contributing.md:If you're looking to contribute specifically to the `vexy_json` web tool, please refer to the [Developer Guide for Extending the Web Tool](developer-guide.md) for detailed information on its structure, build process, and development considerations.
docs/contributing.md-
docs/contributing.md-## Reporting Bugs
docs/contributing.md-
docs/contributing.md:If you find a bug, please open an issue on the [GitHub Issues page](https://github.com/twardoch/vexy_json/issues). When reporting a bug, please include:
docs/contributing.md-
docs/contributing.md--   A clear and concise description of the bug.
docs/contributing.md--   Steps to reproduce the behavior.
--
docs/contributing.md-
docs/contributing.md-## Feature Requests
docs/contributing.md-
docs/contributing.md:Have an idea for a new feature? Open an issue on the [GitHub Issues page](https://github.com/twardoch/vexy_json/issues) to discuss it. Describe the feature, why you think it would be valuable, and any potential implementation details.
docs/contributing.md-
docs/contributing.md:Thank you for contributing to `vexy_json`!
--
docs/packaging-macos.md-# macOS Packaging Guide
docs/packaging-macos.md-
docs/packaging-macos.md:This guide explains how to package vexy_json for macOS distribution as a `.dmg` containing a `.pkg` installer.
docs/packaging-macos.md-
docs/packaging-macos.md-## Prerequisites
docs/packaging-macos.md-
--
docs/packaging-macos.md-
docs/packaging-macos.md-This script will:
docs/packaging-macos.md-1. Build the release binary using `cargo build --release`
docs/packaging-macos.md:2. Create a `.pkg` installer that installs vexy_json to `/usr/local/bin`
docs/packaging-macos.md-3. Wrap the `.pkg` in a `.dmg` for easy distribution
docs/packaging-macos.md-
docs/packaging-macos.md-## Output
docs/packaging-macos.md-
docs/packaging-macos.md-The script produces:
docs/packaging-macos.md:- `vexy_json-{VERSION}-macos.dmg` - The distributable disk image
docs/packaging-macos.md-- Contains the `.pkg` installer and a README
docs/packaging-macos.md-
docs/packaging-macos.md-## Installation
docs/packaging-macos.md-
docs/packaging-macos.md:Users can install vexy_json by:
docs/packaging-macos.md-1. Opening the `.dmg` file
docs/packaging-macos.md-2. Double-clicking the `.pkg` installer
docs/packaging-macos.md-3. Following the installation wizard
docs/packaging-macos.md:4. The `vexy_json` command will be available in their terminal
docs/packaging-macos.md-
docs/packaging-macos.md-## Code Signing (Optional)
docs/packaging-macos.md-
--
docs/packaging-macos.md-
docs/packaging-macos.md-# Sign the DMG
docs/packaging-macos.md-codesign --sign "Developer ID Application: Your Name (TEAMID)" \
docs/packaging-macos.md:    --timestamp vexy_json-*.dmg
docs/packaging-macos.md-```
docs/packaging-macos.md-
docs/packaging-macos.md-## Notarization (Recommended)
--
docs/packaging-macos.md-```bash
docs/packaging-macos.md-# Submit for notarization
docs/packaging-macos.md-xcrun altool --notarize-app \
docs/packaging-macos.md:    --primary-bundle-id "com.twardoch.vexy_json" \
docs/packaging-macos.md-    --username "your-apple-id@example.com" \
docs/packaging-macos.md-    --password "@keychain:AC_PASSWORD" \
docs/packaging-macos.md:    --file vexy_json-*.dmg
docs/packaging-macos.md-
docs/packaging-macos.md-# Staple the notarization ticket
docs/packaging-macos.md:xcrun stapler staple vexy_json-*.dmg
docs/packaging-macos.md-```
docs/packaging-macos.md-
docs/packaging-macos.md-## Automation
--
crates/core/src/parser/mod.rs-#[cfg(feature = "serde")]
crates/core/src/parser/mod.rs-use serde::{Deserialize, Serialize};
crates/core/src/parser/mod.rs-
crates/core/src/parser/mod.rs:/// Configuration options for the vexy_json parser.
crates/core/src/parser/mod.rs-///
crates/core/src/parser/mod.rs-/// These options control which forgiving features are enabled during parsing.
crates/core/src/parser/mod.rs-/// By default, all forgiving features are enabled.
--
crates/core/src/parser/mod.rs-    }
crates/core/src/parser/mod.rs-}
crates/core/src/parser/mod.rs-
crates/core/src/parser/mod.rs:/// The vexy_json parser.
crates/core/src/parser/mod.rs-///
crates/core/src/parser/mod.rs-/// Parses tokens from a Lexer into a Value tree structure.
crates/core/src/parser/mod.rs-/// Supports both strict JSON and various forgiving extensions.
--
crates/core/src/parser/mod.rs-/// # Examples
crates/core/src/parser/mod.rs-///
crates/core/src/parser/mod.rs-/// ```
crates/core/src/parser/mod.rs:/// use vexy_json_core::parse;
crates/core/src/parser/mod.rs-///
crates/core/src/parser/mod.rs-/// // Standard JSON
crates/core/src/parser/mod.rs-/// let result = parse(r#"{"key": "value"}"#);
--
crates/core/src/parser/mod.rs-/// # Examples
crates/core/src/parser/mod.rs-///
crates/core/src/parser/mod.rs-/// ```
crates/core/src/parser/mod.rs:/// use vexy_json_core::{parse_with_options, ParserOptions};
crates/core/src/parser/mod.rs-///
crates/core/src/parser/mod.rs-/// let mut options = ParserOptions::default();
crates/core/src/parser/mod.rs-/// options.allow_comments = false;
--
crates/core/src/parser/mod.rs-    parser.parse()
crates/core/src/parser/mod.rs-}
crates/core/src/parser/mod.rs-
crates/core/src/parser/mod.rs:/// Enhanced parsing with three-tier fallback strategy (serde_json → vexy_json → repair)
crates/core/src/parser/mod.rs-///
crates/core/src/parser/mod.rs-/// This function implements a progressive parsing strategy:
crates/core/src/parser/mod.rs-/// 1. First tries serde_json for maximum performance on valid JSON
crates/core/src/parser/mod.rs:/// 2. Falls back to vexy_json for forgiving parsing of non-standard JSON
crates/core/src/parser/mod.rs-/// 3. Finally attempts repair for malformed JSON (bracket imbalances, etc.)
crates/core/src/parser/mod.rs-///
crates/core/src/parser/mod.rs-/// Returns an `EnhancedParseResult` that includes information about which
--
crates/core/src/parser/mod.rs-pub fn parse_with_fallback(input: &str, options: ParserOptions) -> EnhancedParseResult<Value> {
crates/core/src/parser/mod.rs-    // Tier 1: Try serde_json for maximum performance on valid JSON
crates/core/src/parser/mod.rs-    if let Ok(serde_value) = serde_json::from_str::<serde_json::Value>(input) {
crates/core/src/parser/mod.rs:        // Convert serde_json::Value to vexy_json::Value
crates/core/src/parser/mod.rs:        let vexy_json_value = convert_serde_to_vexy_json(serde_value);
crates/core/src/parser/mod.rs:        return EnhancedParseResult::success(vexy_json_value, ParsingTier::Fast);
crates/core/src/parser/mod.rs-    }
crates/core/src/parser/mod.rs-
crates/core/src/parser/mod.rs:    // Tier 2: Try vexy_json for forgiving parsing
crates/core/src/parser/mod.rs-    match parse_with_options(input, options.clone()) {
crates/core/src/parser/mod.rs-        Ok(value) => EnhancedParseResult::success(value, ParsingTier::Forgiving),
crates/core/src/parser/mod.rs-        Err(error) => {
--
crates/core/src/parser/mod.rs-
crates/core/src/parser/mod.rs-    match repairer.repair(input) {
crates/core/src/parser/mod.rs-        Ok((repaired_json, repairs)) => {
crates/core/src/parser/mod.rs:            // Try to parse the repaired JSON with vexy_json
crates/core/src/parser/mod.rs-            match parse_with_options(&repaired_json, options.clone()) {
crates/core/src/parser/mod.rs-                Ok(value) => {
crates/core/src/parser/mod.rs-                    EnhancedParseResult::success_with_repairs(value, repairs, ParsingTier::Repair)
--
crates/core/src/parser/mod.rs-    }
crates/core/src/parser/mod.rs-}
crates/core/src/parser/mod.rs-
crates/core/src/parser/mod.rs:/// Convert serde_json::Value to vexy_json::Value
crates/core/src/parser/mod.rs:fn convert_serde_to_vexy_json(serde_value: serde_json::Value) -> Value {
crates/core/src/parser/mod.rs-    match serde_value {
crates/core/src/parser/mod.rs-        serde_json::Value::Null => Value::Null,
crates/core/src/parser/mod.rs-        serde_json::Value::Bool(b) => Value::Bool(b),
--
crates/core/src/parser/mod.rs-        }
crates/core/src/parser/mod.rs-        serde_json::Value::String(s) => Value::String(s),
crates/core/src/parser/mod.rs-        serde_json::Value::Array(arr) => {
crates/core/src/parser/mod.rs:            let converted: Vec<Value> = arr.into_iter().map(convert_serde_to_vexy_json).collect();
crates/core/src/parser/mod.rs-            Value::Array(converted)
crates/core/src/parser/mod.rs-        }
crates/core/src/parser/mod.rs-        serde_json::Value::Object(obj) => {
crates/core/src/parser/mod.rs-            let converted: FxHashMap<String, Value> = obj
crates/core/src/parser/mod.rs-                .into_iter()
crates/core/src/parser/mod.rs:                .map(|(k, v)| (k, convert_serde_to_vexy_json(v)))
crates/core/src/parser/mod.rs-                .collect();
crates/core/src/parser/mod.rs-            Value::Object(converted)
crates/core/src/parser/mod.rs-        }
--
docs/index.md-nav_order: 1
docs/index.md----
docs/index.md-
docs/index.md:# Welcome to vexy_json v2.0.0
docs/index.md-
docs/index.md:`vexy_json` is a forgiving JSON parser written in Rust, inspired by the JavaScript library `jsonic`. It provides robust, flexible parsing for both strict and non-standard JSON, supporting features like comments, unquoted keys, trailing commas, implicit arrays/objects, and more. vexy_json is available as a Rust library, CLI tool, and WebAssembly module for browser/Node.js usage.
docs/index.md-
docs/index.md-## 🚀 New in Version 2.0.0
docs/index.md-
--
docs/index.md-## Quick Start (Rust)
docs/index.md-
docs/index.md-```rust
docs/index.md:use vexy_json::parse;
docs/index.md-
docs/index.md-fn main() {
docs/index.md-    let data = r#"{ key: 1, /* comment */ arr: [1,2,3,], hex: 0x10 }"#;
--
docs/index.md-
docs/index.md-## Contributing
docs/index.md-
docs/index.md:See [Contributing](contributing.md) for how to help improve vexy_json.
docs/index.md-
docs/index.md:📦 **[Download the latest CLI release](https://github.com/twardoch/vexy_json/releases/latest)** - Get the `vexy_json` command-line interface for your platform.
docs/index.md-
docs/index.md-## Features
docs/index.md-
docs/index.md-- **Forgiving Parsing**: Handles comments, trailing commas, unquoted keys, and implicit top-level objects/arrays.
docs/index.md-- **Rust Idiomatic API**: Designed with Rust's ownership, borrowing, and error handling principles in mind.
docs/index.md-- **Performance**: Optimized for speed and efficiency.
docs/index.md:- **Serde Integration**: Seamlessly convert `vexy_json::Value` to and from other data formats using the `serde` framework.
docs/index.md:- **WebAssembly (WASM) Bindings**: Use `vexy_json` directly in JavaScript environments.
docs/index.md-- **Interactive Web Tool**: Browser-based parser with real-time feedback and sharing capabilities.
docs/index.md-- **Compatibility**: Aims for API compatibility with the original `jsonic.js` where appropriate.
docs/index.md-
docs/index.md-## Getting Started
docs/index.md-
docs/index.md:To use `vexy_json` in your Rust project, add it to your `Cargo.toml`:
docs/index.md-
docs/index.md-```toml
docs/index.md-[dependencies]
docs/index.md:vexy_json = "2.0.0" # Replace with the latest version
docs/index.md-```
docs/index.md-
docs/index.md-Then, you can parse JSON-like strings:
docs/index.md-
docs/index.md-```rust
docs/index.md:use vexy_json::parse;
docs/index.md-
docs/index.md-fn main() {
docs/index.md-    let json_str = r#"
--
docs/index.md-
docs/index.md-## Project Status
docs/index.md-
docs/index.md:`vexy_json` v2.0.0 is production-ready with comprehensive features including streaming parsing, parallel processing, and a plugin architecture. We welcome contributions to expand the ecosystem!
docs/index.md-
docs/index.md-## License
docs/index.md-
docs/index.md:`vexy_json` is distributed under the MIT License. See the [LICENSE](https://github.com/twardoch/vexy_json/blob/main/LICENSE) file for more details.
--
docs/drafts/work-progress.md-
docs/drafts/work-progress.md-**Project Status**: ✅ **CORE DEVELOPMENT COMPLETE**
docs/drafts/work-progress.md-
docs/drafts/work-progress.md:All core development goals have been achieved as of January 8, 2025. The vexy_json parser is fully functional with:
docs/drafts/work-progress.md-- Complete forgiving JSON parsing capabilities
docs/drafts/work-progress.md-- 100% test suite pass rate
docs/drafts/work-progress.md-- Jekyll web tool integration
--
docs/drafts/work-progress.md-- [x] Create repair action tracking and reporting system
docs/drafts/work-progress.md-
docs/drafts/work-progress.md-### Implementation Details:
docs/drafts/work-progress.md:- **Three-tier parsing strategy**: serde_json (fast) → vexy_json (forgiving) → repair (tolerant)
docs/drafts/work-progress.md-- **Internal repair implementation**: Custom `JsonRepairer` for bracket balancing
docs/drafts/work-progress.md-- **Enhanced error types**: Added `RepairFailed`, `BracketMismatch`, `UnbalancedBrackets`, `MaxRepairsExceeded`
docs/drafts/work-progress.md-- **Repair tracking**: `RepairAction` and `RepairType` enums with detailed reporting
--
docs/drafts/work-progress.md-- [x] Study theoretical foundations (PEG with labeled failures, GLR parsers, etc.)
docs/drafts/work-progress.md-- [x] Investigate practical heuristics for bracket balancing
docs/drafts/work-progress.md-- [x] Create comprehensive specification for `json-repair` integration (see issues/106.txt)
docs/drafts/work-progress.md:- [x] Design fallback chain architecture (fastest → core vexy_json → json-repair)
docs/drafts/work-progress.md-- [x] Plan implementation strategy with minimal disruption to existing code
docs/drafts/work-progress.md-
docs/drafts/work-progress.md-### Research Findings:
--
docs/drafts/work-progress.md-- Identified `json-repair` crate as viable solution for bracket mismatch handling
docs/drafts/work-progress.md-- Found multiple approaches: panic-mode recovery, PEG labeled failures, GLR parsing
docs/drafts/work-progress.md-- Documented strategies from academic research and practical implementations
docs/drafts/work-progress.md:- Key insight: Three-tier parsing approach (serde_json → vexy_json → json-repair) for optimal performance
docs/drafts/work-progress.md-
docs/drafts/work-progress.md-## Recently Completed: Streaming Parser Implementation ✅
docs/drafts/work-progress.md-
--
docs/drafts/work-progress.md-
docs/drafts/work-progress.md-**Status**: ✅ COMPLETED (January 8, 2025)
docs/drafts/work-progress.md-
docs/drafts/work-progress.md:Successfully implemented comprehensive Python bindings that make vexy_json available to Python users via PyO3 bindings:
docs/drafts/work-progress.md-
docs/drafts/work-progress.md-- **Core API**: Complete Python bindings with `parse()`, `loads()`, `parse_with_options()`, `is_valid()`, `dumps()`
docs/drafts/work-progress.md-- **File Operations**: Added `load()` and `dump()` functions for file-like objects
--
docs/drafts/work-progress.md-
docs/drafts/work-progress.md-**Status**: ✅ COMPLETED (January 8, 2025)
docs/drafts/work-progress.md-
docs/drafts/work-progress.md:Successfully implemented comprehensive CLI enhancements that transform vexy_json from a basic parser into a powerful JSON processing tool:
docs/drafts/work-progress.md-
docs/drafts/work-progress.md-- **Enhanced CLI Interface**: 15+ new command-line options and flags
docs/drafts/work-progress.md-- **Advanced Processing**: Watch mode (`--watch`), parallel processing (`--parallel`), batch operations
--
docs/wasm/npm-package.md-nav_order: 2
docs/wasm/npm-package.md----
docs/wasm/npm-package.md-
docs/wasm/npm-package.md:# @twardoch/vexy_json-wasm
docs/wasm/npm-package.md-
docs/wasm/npm-package.md:WebAssembly bindings for [vexy_json](https://github.com/twardoch/vexy_json), a forgiving JSON parser that's a Rust port of [jsonic](https://github.com/jsonicjs/jsonic).
docs/wasm/npm-package.md-
docs/wasm/npm-package.md-## Installation
docs/wasm/npm-package.md-
docs/wasm/npm-package.md-```bash
docs/wasm/npm-package.md:npm install @twardoch/vexy_json-wasm
docs/wasm/npm-package.md-```
docs/wasm/npm-package.md-
docs/wasm/npm-package.md-## Usage
docs/wasm/npm-package.md-
docs/wasm/npm-package.md-```javascript
docs/wasm/npm-package.md:import init, { parse_js, parse_with_options_js, is_valid, format } from '@twardoch/vexy_json-wasm';
docs/wasm/npm-package.md-
docs/wasm/npm-package.md-// Initialize the WASM module
docs/wasm/npm-package.md-await init();
--
docs/wasm/npm-package.md-
docs/wasm/npm-package.md-## Features
docs/wasm/npm-package.md-
docs/wasm/npm-package.md:vexy_json supports all standard JSON features plus:
docs/wasm/npm-package.md-
docs/wasm/npm-package.md-- **Comments**: Single-line (`//`) and multi-line (`/* */`)
docs/wasm/npm-package.md-- **Trailing commas**: In objects and arrays
--
llms.txt-Project Structure:
llms.txt:📁 vexy-json
llms.txt-├── 📁 .github
llms.txt-│   ├── 📁 ISSUE_TEMPLATE
llms.txt-│   │   ├── 📄 bug_report.md
--
llms.txt-│       │   ├── 📄 basic_usage.py
llms.txt-│       │   └── 📄 config_parser.py
llms.txt-│       ├── 📁 src
llms.txt:│       │   ├── 📁 vexy_json
llms.txt-│       │   │   └── 📄 __init__.py
llms.txt-│       │   └── 📄 lib.rs
llms.txt-│       ├── 📁 tests
llms.txt:│       │   └── 📄 test_vexy_json.py
llms.txt-│       ├── 📄 Cargo.toml
llms.txt-│       ├── 📄 pyproject.toml
llms.txt-│       └── 📄 README.md
--
llms.txt-│   │   │   ├── 📄 cpp_example.cpp
llms.txt-│   │   │   └── 📄 Makefile
llms.txt-│   │   ├── 📁 include
llms.txt:│   │   │   ├── 📄 vexy_json.h
llms.txt:│   │   │   └── 📄 vexy_json.hpp
llms.txt-│   │   ├── 📁 src
llms.txt-│   │   │   └── 📄 lib.rs
llms.txt-│   │   ├── 📄 build.rs
--
llms.txt-│   │   └── 📄 PHASE_2_COMPLETION_SUMMARY.md
llms.txt-│   ├── 📁 python
llms.txt-│   │   ├── 📁 python
llms.txt:│   │   │   └── 📁 vexy_json
llms.txt-│   │   │       ├── 📄 __init__.py
llms.txt-│   │   │       ├── 📄 __init__.pyi
llms.txt-│   │   │       └── 📄 py.typed
--
llms.txt-│   │   ├── 📁 tests
llms.txt-│   │   │   ├── 📄 test_basic.py
llms.txt-│   │   │   ├── 📄 test_typing.py
llms.txt:│   │   │   └── 📄 test_vexy_json.py
llms.txt-│   │   ├── 📄 build.rs
llms.txt-│   │   ├── 📄 Cargo.toml
llms.txt-│   │   ├── 📄 pyproject.toml
--
llms.txt-│   ├── 📄 transform.md
llms.txt-│   ├── 📄 troubleshooting.md
llms.txt-│   ├── 📄 usage.md
llms.txt:│   ├── 📄 vexy_json-tool.md
llms.txt-│   ├── 📄 wasm.md
llms.txt-│   └── 📄 web-tool.md
llms.txt-├── 📁 examples
--
llms.txt-│   └── 📄 trace_comment_parse.rs
llms.txt-├── 📁 Formula
llms.txt-│   ├── 📄 README.md
llms.txt:│   └── 📄 vexy_json.rb
llms.txt-├── 📁 fuzz
llms.txt-│   ├── 📁 artifacts
llms.txt-│   │   ├── 📁 json_structure
--
llms.txt-│   │       ├── 📁 trace_parse-3ssm7sp9sn0g0
llms.txt-│   │       │   └── 📁 s-h94lxw93bs-0vx2y5h-91t3zm6eu39qrl7heuv6b252t
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-0gb56plrh2kbz
llms.txt-│   │       │   └── 📁 s-h94q5v350p-1ipl8ej-4g0j0yzz6kj4wsff0rkz4whra
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-0j003oif6icfz
llms.txt-│   │       │   └── 📁 s-h94lxtvprx-1nd35yr-d9ji6mqi8yg4wlj34ej4lm8e9
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-0kmzrw4dqry8s
llms.txt-│   │       │   └── 📁 s-h94qbwrld4-1abuh5y-0df8jjdim3k8lvaxjlyi3ektx
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-0lx4z1f7yos98
llms.txt-│   │       │   └── 📁 s-h94qa11m4a-1v1mg76-41z48jkkso7esnp76d8t8ejsy
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-0p99pa9joybxn
llms.txt-│   │       │   └── 📁 s-h94qbwr3ok-0fgz8lp-7ry3k2srwsoiu05jh0tex8kag
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-0wrlmmo5dnbek
llms.txt-│   │       │   └── 📁 s-h94q5vmhkq-19sv387-5i9q8fvmvcpwdsylufqobasnb
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-110y1f142yh5u
llms.txt-│   │       │   └── 📁 s-h94q9vymtw-0bvwek1-63nwsqmc00544jk62283w75so
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-13enjyiqbpygv
llms.txt-│   │       │   └── 📁 s-h94lx5z99l-1nx47xh-9bpslqjnb3g3x5bc3csxjbz96
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-1enfkqw8jgwe6
llms.txt-│   │       │   └── 📁 s-h94qbwsbk0-1s4vvo4-boukcrgh093cxbciocdaopnwj
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-1ie2sfvp6h2va
llms.txt-│   │       │   └── 📁 s-h94qaipcfp-1lwl9k4-3qf1wzk3sw9qwbk7xuratyzut
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-1jl7vc528c854
llms.txt-│   │       │   └── 📁 s-h94qdd4yak-1b865jc-bm77486oge3kiwifyahdblem5
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-1qub0bwt8ubsv
llms.txt-│   │       │   └── 📁 s-h94mpybgyq-1xt47pj-aavdcqtgp3fnocsv7ziy11idm
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-1ubcld57ngxkr
llms.txt-│   │       │   └── 📁 s-h94lx517ix-1o0aw5h-bs1193etxol4rcw38ilxvn7qw
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-1wcpf6k3xhope
llms.txt-│   │       │   └── 📁 s-h94qbx4tzz-1xkj8ob-e64ap0u8hedv67t3irdo1q8sj
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-1x53m5wo2sl7b
llms.txt-│   │       │   └── 📁 s-h94q5vmo2u-1tjfvcr-dv86o6hr0gbtt5uamdo4uahjx
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-1y20a1apsue9j
llms.txt-│   │       │   └── 📁 s-h94lxuvyx0-1dcbl7k-43tamkdbfd5jzhcepen167rbm
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-20oy8vnx9hq2n
llms.txt-│   │       │   └── 📁 s-h94lxsxz1c-1e9y478-9ecplutrz5b4tntwjlxhsmjeg
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-25w8gj92gzh3e
llms.txt-│   │       │   └── 📁 s-h94qbx5a3t-12yg4ol-eoz3o838fobhytazwqxnlbbap
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-26zkm1a7g0dks
llms.txt-│   │       │   └── 📁 s-h94lx5zdp3-1i07583-duwa1f0fle6xdpfjo5rbcjipg
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-2rmhgwlzisa4m
llms.txt-│   │       │   └── 📁 s-h94q5v4i5l-0utkprk-207775kpjleznjw58ku5lls42
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-2sp5o6ab85d0d
llms.txt-│   │       │   └── 📁 s-h94qbwrcev-05pm2h7-9et6t71lgcjes7ts5tunk7lmr
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-2zwpzxwslvbw9
llms.txt-│   │       │   └── 📁 s-h94q5v607o-0aauca2-1ej0gzvprt4mq0ypbnu8g4rii
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-36afk93hl19yy
llms.txt-│   │       │   └── 📁 s-h94q4dhaw2-1g4kmp5-6595d2wzpj7gofgage6xltr36
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-3rp5z1e4fxv67
llms.txt-│   │       │   └── 📁 s-h94lxw70kq-11j7h2m-8wd4hnazqc181whhd0pfrmv8b
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-3tylkqgkqyihc
llms.txt-│   │       │   └── 📁 s-h94qdsl7m2-04lcoyw-4nq3hib1kfja6wiqzj1bg2s29
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-3v9aggw93jj3i
llms.txt-│   │       │   └── 📁 s-h94q5v3dum-0piqbmm-dgjmahr5hhsyxkah94rlu2ly9
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_c_api-0bpxpmq5bh3uo
llms.txt-│   │       │   └── 📁 s-h94qbwplx7-0kvk1ur-182s3tuqwkb2a2pl98nvchgwz
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_c_api-0qqmlo9oesx21
llms.txt-│   │       │   └── 📁 s-h94q5v3d1s-0pgt74s-9svlumrqpzg52s56gppbdt8gh
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_c_api-0tpebst6siqty
llms.txt-│   │       │   └── 📁 s-h94lxu9p31-1cup6n3-cw1z78seuot9mmc83o7bktwii
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_c_api-1b3jjubb7lv0u
llms.txt-│   │       │   └── 📁 s-h94lx5ycgv-188it34-0zehocg9n6z1ghntphi75zbvh
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_c_api-34vfbtsvzy2n2
llms.txt-│   │       │   └── 📁 s-h94q5v3ci3-19y7jwh-b9c4fttxoxvtqwzlht65keo2j
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_c_api-3i1d9hmhntofy
llms.txt-│   │       │   └── 📁 s-h94qbwoucf-0t9g5cy-dodqabiop64cu12ktuabgpbyq
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-05xpulzzm0ybs
llms.txt-│   │       │   └── 📁 s-h94qbsswup-0zjgnbo-d8vc3297o6un61aaobmhl1raz
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-06xwosag7nk4l
llms.txt-│   │       │   └── 📁 s-h94mqoxbcw-0w913ce-16xunhlrh7orwa1apa4rnqsjr
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-0it0hyr543gsk
llms.txt-│   │       │   └── 📁 s-h94mqm90c4-1r9c2i0-34vm0ognny3d0g8m9dy7lea5y
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-13lamtqz69oix
llms.txt-│   │       │   └── 📁 s-h94q4cfl7f-0wx3roq-8eqvyfaxl72w8itgkavv5piux
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-1491fpu0fgrrs
llms.txt-│   │       │   └── 📁 s-h94qbsshi1-07nhjdp-bko5ncvbzj1iyxs33ednojadu
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-14m8olzhd98dn
llms.txt-│   │       │   └── 📁 s-h94l5vb4te-0yjeu5h-working
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-1g2het7lfe4aa
llms.txt-│   │       │   └── 📁 s-h94qadzm36-1oa2fp1-3yo1cqjpj2bhllree3sajh4rx
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-1j7kxcwf5lyxe
llms.txt-│   │       │   └── 📁 s-h94qcyo97s-1tcpdyu-59gx0weyzb17kujjphw6osxmn
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-230vd4pzxhxq8
llms.txt-│   │       │   └── 📁 s-h94q5rm9gs-06pwgd7-ayt2qiwlwru9k92pw14xtmyi4
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-28s3d1kj2qmgp
llms.txt-│   │       │   └── 📁 s-h94lxqoha3-0l9368u-drpx4ayume9p51o88yu1muuyp
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-2dsang4gfhdjk
llms.txt-│   │       │   └── 📁 s-h94lxti4rp-0wf02nh-bp3t8bq5sxdtt0vbd26drwij5
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-2gngb8sv4nd3e
llms.txt-│   │       │   └── 📁 s-h94mpx62ce-1ot068v-33l9awvl2wbf2jau3p3ozzp0c
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-31nnwuidm0y2z
llms.txt-│   │       │   └── 📁 s-h94lx2qffr-1f3aoeo-3ls515zfdytgh7lhylo65w05o
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-3sx8xfx8vanqz
llms.txt-│   │       │   └── 📁 s-h94q5rl0y7-09qp4il-bbl5722i8sw8zy966nx7vb4oq
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-3te8417r5nxq8
llms.txt-│   │       │   └── 📁 s-h94q9tihxx-0116f71-8703yb80wiuq89dzjkfnschip
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-0725khmyocr0n
llms.txt-│   │       │   └── 📁 s-h94q5v2v67-0uwtryb-4e88q227tn12ard60hh5u7zyb
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-0vzy8ffsqe25m
llms.txt-│   │       │   └── 📁 s-h94lxsu3qs-0twyynw-214n76deb33gsu0j75r8krved
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-10tlyrhdp7uib
llms.txt-│   │       │   └── 📁 s-h94q9vp85z-0iv0l0e-3xd683kiqazr84xappd3foa8h
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-16tavgq2g3bme
llms.txt-│   │       │   └── 📁 s-h94q4dd827-12nsplb-430pdgta55x5utoseg3ckepjp
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-1c1800ncu9y45
llms.txt-│   │       │   └── 📁 s-h94lx4ysdh-0n25quq-8cztwun18aa7shwh1owhj3jp5
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-1gmfm116pfw4x
llms.txt-│   │       │   └── 📁 s-h94qbwntef-0h6alqj-3to499xp8y61uqfgomk186c44
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-1nq5bex6vdyds
llms.txt-│   │       │   └── 📁 s-h94qdcisb9-11bbwh4-e1a5zpgmmvbni6v2uwatia0zn
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-2tifbfs3whk9i
llms.txt-│   │       │   └── 📁 s-h94lxtw59s-0hsitax-0qsowemq0y3jtl6epwyuuds1w
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-3nestjbkp3gpr
llms.txt-│   │       │   └── 📁 s-h94qbwrt3j-1qrceek-2pj2krlgoxm5btgp8er3hplo4
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-3omqqeduu7at9
llms.txt-│   │       │   └── 📁 s-h94qaibzrh-0hlnq9n-ebzru4uzcovhvfq4zs6sk5ywl
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-3onukjkuw0du5
llms.txt-│   │       │   └── 📁 s-h94q5uxj4v-0449lmw-f3rhrr1e0xvrijyn30yd8cx6i
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_wasm-055l53jvtklab
llms.txt-│   │       │   └── 📁 s-h94qbwq2m7-0wvpecg-a55stlfi6we2hhgfeuo6ald8w
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_wasm-0efx6y0te058o
llms.txt-│   │       │   └── 📁 s-h94q5v1z7x-06gvo6n-4xh2d9tgva7xxm5bsf1u7h135
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_wasm-10zshacvya02n
llms.txt-│   │       │   └── 📁 s-h94lx5ykol-0prsxya-4mb6r2jofcppp6x5o5v0swsel
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_wasm-1jdxu4mfpumao
llms.txt-│   │       │   └── 📁 s-h94q5v2sgi-0a7yj3r-e1v4c6euctwqpnym6kp7pmpus
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_wasm-1wktcdolw6zze
llms.txt-│   │       │   └── 📁 s-h94lxvb02b-0cbapxa-9sfup34g2roizsqlmb6rl9wte
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       └── 📁 vexy_json_wasm-3tbwxo09hb5zm
llms.txt-│   │           └── 📁 s-h94qbwr820-1ihpfqm-3v8sv8227x8tac4a89vbee9wl
llms.txt-│   │               └── ... (depth limit reached)
llms.txt-│   ├── 📁 release
--
llms.txt-<document_content>
llms.txt----
llms.txt-name: Bug report
llms.txt:about: Create a report to help us improve vexy_json
llms.txt-title: '[BUG] '
llms.txt-labels: bug
llms.txt-assignees: ''
--
llms.txt-```
llms.txt-
llms.txt----
llms.txt:*This issue was created using the vexy_json issue template. Please fill out all relevant sections to help us resolve your issue quickly.*
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-contact_links:
llms.txt-  - about: Check the documentation for usage examples and API reference
llms.txt-    name: � Documentation
llms.txt:    url: https://twardoch.github.io/vexy_json/
llms.txt:  - about: Try vexy_json in your browser with our interactive web tool
llms.txt-    name: � Web Tool
llms.txt:    url: https://twardoch.github.io/vexy_json/tool.html
llms.txt:  - about: Ask questions, share ideas, and discuss vexy_json with the community
llms.txt-    name: � Discussions
llms.txt:    url: https://github.com/twardoch/vexy_json/discussions
llms.txt-  - about: View package information and installation instructions
llms.txt-    name: 📦 crates.io
llms.txt:    url: https://crates.io/crates/vexy_json
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-<document_content>
llms.txt----
llms.txt-name: Feature request
llms.txt:about: Suggest an idea for vexy_json
llms.txt-title: '[FEATURE] '
llms.txt-labels: enhancement
llms.txt-assignees: ''
--
llms.txt-- [ ] Separate feature flag
llms.txt-
llms.txt----
llms.txt:*This issue was created using the vexy_json issue template. Please fill out all relevant sections to help us prioritize and implement your feature request.*
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-<document_content>
llms.txt----
llms.txt-name: Performance issue
llms.txt:about: Report a performance problem with vexy_json
llms.txt-title: '[PERFORMANCE] '
llms.txt-labels: performance
llms.txt-assignees: ''
--
llms.txt-If you've compared with other JSON parsers, please share the results:
llms.txt-- **Other parser**: [e.g. JSON.parse(), serde_json]
llms.txt-- **Other parser time**: [e.g. 100ms]
llms.txt:- **vexy_json time**: [e.g. 5000ms]
llms.txt-
llms.txt-**Additional context**
llms.txt-Add any other context about the performance issue here.
llms.txt-
llms.txt----
llms.txt:*This issue was created using the vexy_json issue template. Performance issues help us optimize the parser for real-world use cases.*
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-        run: |
llms.txt-          cd docs
llms.txt-          bundle install
llms.txt:          bundle exec jekyll build --baseurl "/vexy_json"
llms.txt-        env:
llms.txt-          JEKYLL_ENV: production
llms.txt-
--
llms.txt-            ### macOS
llms.txt-            ```bash
llms.txt-            # Using Homebrew
llms.txt:            brew install vexy_json
llms.txt-
llms.txt-            # Or download the installer
llms.txt:            # Download vexy_json-${{ steps.get_version.outputs.version }}-macos.dmg below
llms.txt-            ```
llms.txt-
llms.txt-            ### Linux
llms.txt-            ```bash
llms.txt-            # Download and extract
llms.txt:            curl -L https://github.com/twardoch/vexy_json/releases/download/v${{ steps.get_version.outputs.version }}/vexy_json-${{ steps.get_version.outputs.version }}-linux-x86_64.tar.gz | tar xz
llms.txt:            sudo mv vexy_json /usr/local/bin/
llms.txt-            ```
llms.txt-
llms.txt-            ### Windows
llms.txt-            ```powershell
llms.txt:            # Download vexy_json-${{ steps.get_version.outputs.version }}-windows-x86_64.zip below
llms.txt-            # Extract and add to PATH
llms.txt-            ```
llms.txt-
llms.txt-            ### Cargo
llms.txt-            ```bash
llms.txt:            cargo install vexy_json-cli
llms.txt-            ```
llms.txt-
llms.txt-            ## What's Changed
llms.txt-
llms.txt:            See [CHANGELOG.md](https://github.com/twardoch/vexy_json/blob/v${{ steps.get_version.outputs.version }}/CHANGELOG.md) for details.
llms.txt-
llms.txt-            ## Assets
llms.txt-
llms.txt:            - **macOS**: `vexy_json-${{ steps.get_version.outputs.version }}-macos.dmg` - Installer with PKG
llms.txt:            - **macOS**: `vexy_json-${{ steps.get_version.outputs.version }}-macos.zip` - Standalone binary
llms.txt:            - **Linux**: `vexy_json-${{ steps.get_version.outputs.version }}-linux-x86_64.tar.gz` - x86_64 binary
llms.txt:            - **Linux**: `vexy_json-${{ steps.get_version.outputs.version }}-linux-aarch64.tar.gz` - ARM64 binary
llms.txt:            - **Windows**: `vexy_json-${{ steps.get_version.outputs.version }}-windows-x86_64.zip` - x86_64 binary
llms.txt:            - **Source**: `vexy_json-${{ steps.get_version.outputs.version }}.tar.gz` - Source code
llms.txt-
llms.txt-  build-binaries:
llms.txt-    name: Build ${{ matrix.target }}
--
llms.txt-
llms.txt-      - name: Build
llms.txt-        run: |
llms.txt:          cargo build --release --target ${{ matrix.target }} --bin vexy_json
llms.txt-
llms.txt-      - name: Package Binary
llms.txt-        shell: bash
llms.txt-        run: |
llms.txt-          cd target/${{ matrix.target }}/release
llms.txt-          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
llms.txt:            7z a ../../../vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip vexy_json.exe
llms.txt-          else
llms.txt:            tar czf ../../../vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz vexy_json
llms.txt-          fi
llms.txt-
llms.txt-      - name: Upload Binary
--
llms.txt-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
llms.txt-        with:
llms.txt-          upload_url: ${{ needs.create-release.outputs.upload_url }}
llms.txt:          asset_path: ./vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
llms.txt:          asset_name: vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
llms.txt-          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}
llms.txt-
llms.txt-  build-macos-installer:
--
llms.txt-
llms.txt-      - name: Build Universal Binary
llms.txt-        run: |
llms.txt:          cargo build --release --target x86_64-apple-darwin --bin vexy_json
llms.txt:          cargo build --release --target aarch64-apple-darwin --bin vexy_json
llms.txt:          lipo -create -output vexy_json \
llms.txt:            target/x86_64-apple-darwin/release/vexy_json \
llms.txt:            target/aarch64-apple-darwin/release/vexy_json
llms.txt:          chmod +x vexy_json
llms.txt-
llms.txt-      - name: Create macOS ZIP
llms.txt-        run: |
llms.txt:          zip -9 vexy_json-${{ needs.create-release.outputs.version }}-macos.zip vexy_json
llms.txt-
llms.txt-      - name: Create macOS Installer
llms.txt-        run: |
--
llms.txt-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
llms.txt-        with:
llms.txt-          upload_url: ${{ needs.create-release.outputs.upload_url }}
llms.txt:          asset_path: ./vexy_json-${{ needs.create-release.outputs.version }}-macos.zip
llms.txt:          asset_name: vexy_json-${{ needs.create-release.outputs.version }}-macos.zip
llms.txt-          asset_content_type: application/zip
llms.txt-
llms.txt-      - name: Upload macOS DMG
--
llms.txt-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
llms.txt-        with:
llms.txt-          upload_url: ${{ needs.create-release.outputs.upload_url }}
llms.txt:          asset_path: ./dist/vexy_json-${{ needs.create-release.outputs.version }}.dmg
llms.txt:          asset_name: vexy_json-${{ needs.create-release.outputs.version }}-macos.dmg
llms.txt-          asset_content_type: application/x-apple-diskimage
llms.txt-
llms.txt-  build-wasm:
--
llms.txt-      - name: Package WASM
llms.txt-        run: |
llms.txt-          cd crates/wasm
llms.txt:          tar czf ../../vexy_json-wasm-${{ needs.create-release.outputs.version }}.tar.gz pkg/
llms.txt-
llms.txt-      - name: Upload WASM Package
llms.txt-        uses: actions/upload-release-asset@v1
--
llms.txt-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
llms.txt-        with:
llms.txt-          upload_url: ${{ needs.create-release.outputs.upload_url }}
llms.txt:          asset_path: ./vexy_json-wasm-${{ needs.create-release.outputs.version }}.tar.gz
llms.txt:          asset_name: vexy_json-wasm-${{ needs.create-release.outputs.version }}.tar.gz
llms.txt-          asset_content_type: application/gzip
llms.txt-
llms.txt-  publish-crates:
--
llms.txt-          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
llms.txt-        run: |
llms.txt-          # Publish in dependency order
llms.txt:          cargo publish -p vexy_json-core
llms.txt-          sleep 30
llms.txt:          cargo publish -p vexy_json-cli
llms.txt-          sleep 30
llms.txt:          cargo publish -p vexy_json-wasm
llms.txt-
llms.txt-  publish-npm:
llms.txt-    name: Publish to NPM
--
llms.txt-        run: |
llms.txt-          echo "Checking WASM build outputs..."
llms.txt-          ls -la docs/pkg/
llms.txt:          if [ ! -f "docs/pkg/vexy_json.js" ] || [ ! -f "docs/pkg/vexy_json_bg.wasm" ]; then
llms.txt-            echo "❌ WASM build failed - missing required files"
llms.txt-            exit 1
llms.txt-          fi
llms.txt-          echo "✅ WASM build successful"
llms.txt-          echo "Bundle sizes:"
llms.txt:          du -h docs/pkg/vexy_json.js docs/pkg/vexy_json_bg.wasm
llms.txt-
llms.txt-      - name: Upload WASM artifacts
llms.txt-        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
--
llms.txt-              await page.goto(`http://localhost:${port}/tool.html`);
llms.txt-              
llms.txt-              // Wait for WASM to load
llms.txt:              await page.waitForFunction(() => window.vexy_json !== undefined, { timeout: 10000 });
llms.txt-              
llms.txt-              // Test basic parsing
llms.txt-              const result = await page.evaluate(() => {
--
llms.txt-                
llms.txt-                const results = testCases.map(test => {
llms.txt-                  try {
llms.txt:                    const parsed = window.vexy_json.parse(test.input);
llms.txt-                    return { input: test.input, success: true, parsed };
llms.txt-                  } catch (e) {
llms.txt-                    return { input: test.input, success: false, error: e.message };
--
llms.txt-              const perfResult = await page.evaluate(() => {
llms.txt-                const largeJson = JSON.stringify(Array(1000).fill({key: "value"}));
llms.txt-                const start = performance.now();
llms.txt:                window.vexy_json.parse(largeJson);
llms.txt-                const end = performance.now();
llms.txt-                return end - start;
llms.txt-              });
--
llms.txt-      - name: Print deployment URL
llms.txt-        run: |
llms.txt-          echo "🚀 Deployed to GitHub Pages!"
llms.txt:          echo "📍 Tool URL: https://twardoch.github.io/vexy_json/tool.html"
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
--
llms.txt-
llms.txt-## 1. Project Overview
llms.txt-
llms.txt:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-
llms.txt-## 2. Development Status
llms.txt-
--
llms.txt-    -   `crates/core/examples/error_reporting.rs`: Example for error reporting.
llms.txt--   `crates/cli`: The command-line interface.
llms.txt-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:-   `crates/c-api`: Provides C and C++ bindings, including `examples/`, `include/` (with `vexy_json.h` and `vexy_json.hpp`), and `src/lib.rs`.
llms.txt:-   `crates/python`: Provides Python bindings, including `python/vexy_json/__init__.py`, `src/lib.rs`, and `tests/`.
llms.txt:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`, with `src/lib.rs`.
llms.txt:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments, including `src/lib.rs` and `test.mjs`.
llms.txt--   `crates/test-utils`: Utility functions for testing, with `src/lib.rs`.
llms.txt-
llms.txt-### 3.2. Core Features
--
llms.txt-    -   Property-based tests are implemented using `proptest` in `tests/property_tests.rs`.
llms.txt--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json`.
llms.txt:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-
llms.txt-## 4. Development Workflow
llms.txt-
--
llms.txt-### 🔧 Fixed
llms.txt-
llms.txt-#### Post-Migration Cleanup (v2.3.1)
llms.txt:- Fixed C API header struct naming mismatch: `vexy_json_parser_options` → `VexyJsonParserOptions`
llms.txt-- Fixed Python test file naming inconsistencies: `VexyJSONParser` → `VexyJsonParser`
llms.txt-- Added missing struct fields to enable compilation:
llms.txt-  - Added `confidence` field to `ContextRule` struct
--
llms.txt-  - Fixed unreachable patterns
llms.txt-
llms.txt-### 🚀 Added
llms.txt:- Created `vexify.py` tool for renaming project from vexy_json to vexy_json
llms.txt-  - Intelligent handling of different contexts (filenames, code, documentation)
llms.txt-  - Support for compound words (e.g., VexyJSONConfig → VexyJSONConfig)
llms.txt-  - Optional `--deep` flag for git history rewriting
--
llms.txt-
llms.txt-**Old (v1.x):**
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-let value = parse(json_string)?;
llms.txt-```
llms.txt-
llms.txt-**New (v2.0) - Still Compatible:**
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-let value = parse(json_string)?; // Still works!
llms.txt-```
llms.txt-
llms.txt-**New (v2.0) - Enhanced Features:**
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_options, ParserOptions};
llms.txt:use vexy_json::streaming::StreamingParser;
llms.txt:use vexy_json::parallel_chunked::parse_parallel_chunked;
llms.txt-
llms.txt-// Advanced options
llms.txt-let options = ParserOptions {
--
llms.txt-
llms.txt-### Release Links
llms.txt-
llms.txt:[2.0.0]: https://github.com/twardoch/vexy_json/compare/v1.5.27...v2.0.0
llms.txt:[1.5.27]: https://github.com/twardoch/vexy_json/compare/v1.5.26...v1.5.27
llms.txt:[1.5.26]: https://github.com/twardoch/vexy_json/compare/v1.5.25...v1.5.26
llms.txt:[1.5.25]: https://github.com/twardoch/vexy_json/compare/v1.5.24...v1.5.25
llms.txt:[1.5.24]: https://github.com/twardoch/vexy_json/compare/v1.5.23...v1.5.24
llms.txt:[1.5.23]: https://github.com/twardoch/vexy_json/releases/tag/v1.5.23
llms.txt:[Unreleased]: https://github.com/twardoch/vexy_json/compare/v2.0.0...HEAD
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-
llms.txt-## 1. Project Overview
llms.txt-
llms.txt:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-
llms.txt-## 2. Development Status
llms.txt-
--
llms.txt-    -   `crates/core/examples/error_reporting.rs`: Example for error reporting.
llms.txt--   `crates/cli`: The command-line interface.
llms.txt-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:-   `crates/c-api`: Provides C and C++ bindings, including `examples/`, `include/` (with `vexy_json.h` and `vexy_json.hpp`), and `src/lib.rs`.
llms.txt:-   `crates/python`: Provides Python bindings, including `python/vexy_json/__init__.py`, `src/lib.rs`, and `tests/`.
llms.txt:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`, with `src/lib.rs`.
llms.txt:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments, including `src/lib.rs` and `test.mjs`.
llms.txt--   `crates/test-utils`: Utility functions for testing, with `src/lib.rs`.
llms.txt-
llms.txt-### 3.2. Core Features
--
llms.txt-    -   Property-based tests are implemented using `proptest` in `tests/property_tests.rs`.
llms.txt--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json`.
llms.txt:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-
llms.txt-## 4. Development Workflow
llms.txt-
--
llms.txt-
llms.txt-
llms.txt-[package]
llms.txt:name = "vexy_json"
llms.txt-version = "1.0.0"
llms.txt-edition = "2021"
llms.txt-description = "A forgiving JSON parser that accepts non-standard JSON formats"
llms.txt-license = "MIT OR Apache-2.0"
llms.txt:repository = "https://github.com/twardoch/pub/vexy_json"
llms.txt:homepage = "https://github.com/twardoch/pub/vexy_json"
llms.txt-keywords = [ "json", "parser", "forgiving", "relaxed", "lenient" ]
llms.txt-categories = [ "parsing", "data-structures", "web-programming" ]
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "crates/core"
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-serde]
llms.txt-path = "crates/serde"
llms.txt-optional = true
llms.txt-
llms.txt-
llms.txt-[features]
llms.txt-default = [ "serde" ]
llms.txt:serde = [ "vexy_json-serde" ]
llms.txt-
llms.txt-
llms.txt-[dev-dependencies]
--
llms.txt-<document index="22">
llms.txt-<source>Formula/README.md</source>
llms.txt-<document_content>
llms.txt:# Homebrew Formula for vexy_json
llms.txt-
llms.txt:This directory contains the Homebrew formula for installing vexy_json on macOS.
llms.txt-
llms.txt-## Installation
llms.txt-
llms.txt:To install vexy_json using this formula:
llms.txt-
llms.txt-```bash
llms.txt-# Add this tap (once the formula is in a tap repository)
llms.txt:brew tap twardoch/vexy_json
llms.txt-
llms.txt:# Install vexy_json
llms.txt:brew install vexy_json
llms.txt-```
llms.txt-
llms.txt-Or install directly from the formula file:
llms.txt-
llms.txt-```bash
llms.txt:brew install ./Formula/vexy_json.rb
llms.txt-```
llms.txt-
llms.txt-## Testing the Formula
--
llms.txt-To test the formula locally:
llms.txt-
llms.txt-```bash
llms.txt:brew install --build-from-source ./Formula/vexy_json.rb
llms.txt:brew test vexy_json
llms.txt:brew audit --strict vexy_json
llms.txt-```
llms.txt-
llms.txt-## Updating the Formula
--
llms.txt-1. Update the `url` to point to the new release tag
llms.txt-2. Update the SHA256 checksum:
llms.txt-   ```bash
llms.txt:   curl -sL https://github.com/twardoch/vexy_json/archive/refs/tags/vX.Y.Z.tar.gz | shasum -a 256
llms.txt-   ```
llms.txt-3. Test the formula thoroughly
llms.txt-4. Submit to Homebrew or update your tap
--
llms.txt-</document>
llms.txt-
llms.txt-<document index="23">
llms.txt:<source>Formula/vexy_json.rb</source>
llms.txt-<document_content>
llms.txt-class VexyJson < Formula
llms.txt-  desc "Forgiving JSON parser for Rust - a port of the JavaScript library jsonic"
llms.txt:  homepage "https://github.com/twardoch/vexy_json"
llms.txt:  url "https://github.com/twardoch/vexy_json/archive/refs/tags/v2.0.0.tar.gz"
llms.txt-  sha256 "ce66e4af1e0aeb4f35456eb44aa82d5052e1a26c33adbaa1969284a5aa8c24ab"
llms.txt-  license any_of: ["MIT", "Apache-2.0"]
llms.txt:  head "https://github.com/twardoch/vexy_json.git", branch: "main"
llms.txt-
llms.txt-  depends_on "rust" => :build
llms.txt-
--
llms.txt-
llms.txt-  test do
llms.txt-    # Test basic JSON parsing
llms.txt:    assert_equal '{"key":"value"}', pipe_output("#{bin}/vexy_json", '{"key": "value"}').chomp
llms.txt-
llms.txt-    # Test forgiving JSON features
llms.txt-    forgiving_json = '{ unquoted: true, trailing: "comma", }'
llms.txt:    output = pipe_output("#{bin}/vexy_json", forgiving_json)
llms.txt-    assert_match /"unquoted":true/, output
llms.txt-    assert_match /"trailing":"comma"/, output
llms.txt-
llms.txt-    # Test error repair
llms.txt-    broken_json = '{ "broken": '
llms.txt:    output = pipe_output("#{bin}/vexy_json --repair", broken_json)
llms.txt-    assert_match /"broken":null/, output
llms.txt-
llms.txt-    # Test version
llms.txt:    assert_match version.to_s, shell_output("#{bin}/vexy_json --version")
llms.txt-  end
llms.txt-end
llms.txt-</document_content>
--
llms.txt-
llms.txt-## 1. Project Overview
llms.txt-
llms.txt:`vexy_json` is a forgiving JSON parser implemented in Rust. A reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-
llms.txt-## 2. Development Status
llms.txt-
--
llms.txt-    -   `crates/core/examples/error_reporting.rs`: Example for error reporting.
llms.txt--   `crates/cli`: The command-line interface.
llms.txt-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:-   `crates/c-api`: Provides C and C++ bindings, including `examples/`, `include/` (with `vexy_json.h` and `vexy_json.hpp`), and `src/lib.rs`.
llms.txt:-   `crates/python`: Provides Python bindings, including `python/vexy_json/__init__.py`, `src/lib.rs`, and `tests/`.
llms.txt:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`, with `src/lib.rs`.
llms.txt:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments, including `src/lib.rs` and `test.mjs`.
llms.txt--   `crates/test-utils`: Utility functions for testing, with `src/lib.rs`.
llms.txt-
llms.txt-### 3.2. Core Features
--
llms.txt-    -   Property-based tests are implemented using `proptest` in `tests/property_tests.rs`.
llms.txt--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json`.
llms.txt:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-
llms.txt-## 4. Development Workflow
llms.txt-
--
llms.txt-1. **Old Naming References**: Only 2 files contain "zzson" - both in documentation (PLAN.md and issue 610.txt)
llms.txt-2. **Python Bindings**: Test file previously used `VexyJSONParser` but was fixed to `VexyJsonParser`
llms.txt-3. **Naming Conventions**: Generally consistent across languages:
llms.txt:   - Rust: `vexy_json-*` (crate names), `VexyJson*` (types)
llms.txt-   - C/C++: `VexyJson*` (types)
llms.txt:   - Python: `vexy_json` (package), `VexyJson*` (classes)
llms.txt-   - JavaScript: `VexyJson*` (classes)
llms.txt-   - Documentation: "Vexy JSON" (with space)
llms.txt-
--
llms.txt-## Implementation Plan
llms.txt-
llms.txt-### Phase 1: jsonic References Removal (Immediate - 2-3 hours)
llms.txt:1. **Rename test files**: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
llms.txt-2. **Update documentation**: Remove "jsonic" from HTML, markdown, and tool descriptions
llms.txt:3. **Clean code references**: Replace "jsonic" with "vexy_json" in comments and variable names
llms.txt-4. **Update configurations**: Clean pyproject.toml and Cargo.toml references
llms.txt-5. **Verify completeness**: Re-run grep to ensure no "jsonic" references remain
llms.txt-
--
llms.txt-<document index="27">
llms.txt-<source>README.md</source>
llms.txt-<document_content>
llms.txt:# vexy_json Documentation & Web Tool
llms.txt-
llms.txt:This directory contains the documentation website and interactive web tool for vexy_json.
llms.txt-
llms.txt-## Recent Updates
llms.txt-
--
llms.txt-- **Real-time parsing** with debounced input
llms.txt-- **Syntax highlighting** for JSON input
llms.txt-- **Error highlighting** with position indicators
llms.txt:- **Example library** showcasing vexy_json features
llms.txt-- **Download functionality** for parsed results
llms.txt-- **Share URLs** for collaboration
llms.txt-- **Performance metrics** display
--
llms.txt-
llms.txt-## Phase 1: jsonic References Removal (IMMEDIATE)
llms.txt-
llms.txt:- [ ] Rename test files: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
llms.txt-- [ ] Update documentation: Remove "jsonic" from HTML, markdown files
llms.txt:- [ ] Clean code references: Replace "jsonic" with "vexy_json" in comments/variables
llms.txt-- [ ] Update configurations: Clean pyproject.toml and Cargo.toml references
llms.txt-- [ ] Verify completeness: Re-run grep to ensure no "jsonic" references remain
llms.txt-
--
llms.txt-- `/docs/pkg/package.json` - For web distribution
llms.txt-
llms.txt-### Other Files
llms.txt:- `/Formula/vexy_json.rb` - Homebrew formula (releases only)
llms.txt-- CLI `--version` output
llms.txt-- API version info methods
llms.txt-
--
llms.txt-#### Phase 0: Critical Fixes (Completed)
llms.txt-
llms.txt-1. **Fixed C API struct naming mismatch**
llms.txt:   - Changed `vexy_json_parser_options` to `VexyJsonParserOptions` in vexy_json.h:135
llms.txt-   - This prevents C/C++ linking failures
llms.txt-
llms.txt-2. **Fixed Python test naming issues**
llms.txt:   - Updated test_vexy_json.py to use `VexyJSON` instead of `VEXYJSON`
llms.txt-   - Fixed imports: `VEXYJSONParser` → `VexyJSONParser`, `VEXYJSONConfig` → `VexyJSONConfig`
llms.txt-   - Fixed class name: `VEXYJSONWrapper` → `VexyJSONWrapper`
llms.txt-
--
llms.txt-### Build Output Summary
llms.txt-
llms.txt-```
llms.txt:cargo build --package vexy_json-core --package vexy_json-cli
llms.txt-Finished `dev` profile [unoptimized + debuginfo] target(s) in 9.59s
llms.txt:warning: `vexy_json-core` (lib) generated 24 warnings
llms.txt-```
llms.txt-
llms.txt-### 🔄 Current Work Items
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/benchmark.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct BenchmarkResult {
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/comparison.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/comprehensive_comparison.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct BenchmarkResult {
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/lexer_microbenchmarks.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/memory_benchmarks.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct TrackingAllocator {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/parser_comparison.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct TestData {
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/parser_microbenchmarks.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/parsing.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/performance_comparison.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/profiling.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/real_world_benchmarks.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/simd_benchmarks.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/stack_overflow_test.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-<source>bindings/python/Cargo.toml</source>
llms.txt-<document_content>
llms.txt-[package]
llms.txt:name = "vexy_json-python"
llms.txt-version = "1.0.0"
llms.txt-edition = "2021"
llms.txt-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-license = "MIT OR Apache-2.0"
llms.txt:description = "Python bindings for vexy_json - a forgiving JSON parser"
llms.txt:repository = "https://github.com/twardoch/vexy_json"
llms.txt-keywords = [ "json", "parser", "forgiving", "repair", "python" ]
llms.txt-categories = [ "encoding", "parser-implementations" ]
llms.txt-
llms.txt-
llms.txt-[lib]
llms.txt:name = "vexy_json"
llms.txt-crate-type = [ "cdylib" ]
llms.txt-
llms.txt-
--
llms.txt-serde_json = "1.0"
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "../../crates/core"
llms.txt-version = "2.0.0"
llms.txt-
--
llms.txt-<document index="49">
llms.txt-<source>bindings/python/README.md</source>
llms.txt-<document_content>
llms.txt:# vexy_json Python Bindings
llms.txt-
llms.txt-Fast, forgiving JSON parser for Python - a port of the JavaScript library jsonic.
llms.txt-
--
llms.txt-## Installation
llms.txt-
llms.txt-```bash
llms.txt:pip install vexy_json
llms.txt-```
llms.txt-
llms.txt-### Building from source
--
llms.txt-## Quick Start
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Parse forgiving JSON
llms.txt:data = vexy_json.parse('''
llms.txt-{
llms.txt-    // Comments are allowed
llms.txt-    name: "John",        // Unquoted keys
--
llms.txt-Parse a JSON string with default forgiving options.
llms.txt-
llms.txt-```python
llms.txt:data = vexy_json.parse('{"key": "value"}')
llms.txt-```
llms.txt-
llms.txt-#### `parse_with_options(input: str, options: Options) -> Any`
llms.txt-Parse a JSON string with custom options.
llms.txt-
llms.txt-```python
llms.txt:opts = vexy_json.Options(allow_comments=False)
llms.txt:data = vexy_json.parse_with_options(json_str, opts)
llms.txt-```
llms.txt-
llms.txt-#### `dumps(obj: Any, indent: int = None, sort_keys: bool = False) -> str`
llms.txt-Serialize a Python object to JSON string.
llms.txt-
llms.txt-```python
llms.txt:json_str = vexy_json.dumps({"key": "value"}, indent=2)
llms.txt-```
llms.txt-
llms.txt-#### `load(filename: str, options: Options = None) -> Any`
llms.txt-Load JSON from a file.
llms.txt-
llms.txt-```python
llms.txt:data = vexy_json.load("config.json")
llms.txt-```
llms.txt-
llms.txt-#### `dump(obj: Any, filename: str, indent: int = None, sort_keys: bool = False)`
llms.txt-Save Python object as JSON to a file.
llms.txt-
llms.txt-```python
llms.txt:vexy_json.dump(data, "output.json", indent=2)
llms.txt-```
llms.txt-
llms.txt-### Classes
--
llms.txt-Parser configuration options.
llms.txt-
llms.txt-```python
llms.txt:opts = vexy_json.Options(
llms.txt-    allow_comments=True,         # Allow // and /* */ comments
llms.txt-    allow_trailing_commas=True,  # Allow trailing commas
llms.txt-    allow_unquoted_keys=True,    # Allow unquoted object keys
--
llms.txt-Reusable parser instance for better performance when parsing multiple documents.
llms.txt-
llms.txt-```python
llms.txt:parser = vexy_json.Parser(options)
llms.txt-data = parser.parse(json_str)
llms.txt-```
llms.txt-
--
llms.txt-
llms.txt-### Configuration Files
llms.txt-
llms.txt:vexy_json is perfect for configuration files that need to be human-friendly:
llms.txt-
llms.txt-```python
llms.txt:config = vexy_json.parse('''
llms.txt-{
llms.txt-    // Server configuration
llms.txt-    server: {
--
llms.txt-
llms.txt-### Error Recovery
llms.txt-
llms.txt:vexy_json can automatically fix common JSON errors:
llms.txt-
llms.txt-```python
llms.txt-# Missing commas
llms.txt:fixed = vexy_json.parse('{"a": 1 "b": 2}')  # {'a': 1, 'b': 2}
llms.txt-
llms.txt-# Unclosed strings
llms.txt:fixed = vexy_json.parse('{"name": "John')   # {'name': 'John'}
llms.txt-
llms.txt-# Trailing commas
llms.txt:fixed = vexy_json.parse('[1, 2, 3,]')       # [1, 2, 3]
llms.txt-```
llms.txt-
llms.txt-### Strict Mode
--
llms.txt-For standard JSON compliance:
llms.txt-
llms.txt-```python
llms.txt:strict_parser = vexy_json.Parser(vexy_json.Options.strict())
llms.txt-
llms.txt-# This will raise an error
llms.txt-try:
--
llms.txt-
llms.txt-## Performance
llms.txt-
llms.txt:vexy_json is built with Rust and is designed to be fast:
llms.txt-
llms.txt-- Written in Rust for native performance
llms.txt-- Efficient memory usage
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/examples/basic_usage.py
llms.txt-# Language: python
llms.txt-
llms.txt:import vexy_json
llms.txt-
llms.txt-def main(()):
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/examples/config_parser.py
llms.txt-# Language: python
llms.txt-
llms.txt:import vexy_json
llms.txt-import sys
llms.txt-
llms.txt-def load_config((filename=None)):
--
llms.txt-
llms.txt-
llms.txt-[project]
llms.txt:name = "vexy_json"
llms.txt-version = "1.0.0"
llms.txt-description = "A forgiving JSON parser for Python - port of the JavaScript library jsonic"
llms.txt-readme = "README.md"
--
llms.txt-
llms.txt-
llms.txt-[project.urls]
llms.txt:Homepage = "https://github.com/twardoch/vexy_json"
llms.txt:Repository = "https://github.com/twardoch/vexy_json"
llms.txt:Issues = "https://github.com/twardoch/vexy_json/issues"
llms.txt-
llms.txt-
llms.txt-[tool.maturin]
llms.txt-python-source = "src"
llms.txt:module-name = "vexy_json.vexy_json"
llms.txt-features = [ "pyo3/extension-module" ]
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/src/lib.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct ParseError {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/src/vexy_json/__init__.py
llms.txt-# Language: python
llms.txt-
llms.txt:from .vexy_json import (
llms.txt-    parse,
llms.txt-    parse_with_options,
llms.txt-    dumps,
--
llms.txt-)
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/tests/test_vexy_json.py
llms.txt-# Language: python
llms.txt-
llms.txt-import pytest
llms.txt:import vexy_json
llms.txt-import json
llms.txt-import tempfile
llms.txt-import os
--
llms.txt-<document index="51">
llms.txt-<source>build-warnings.txt</source>
llms.txt-<document_content>
llms.txt:   Compiling vexy_json-core v2.2.3 (/Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core)
llms.txt-warning: methods `analyze_custom_error`, `analyze_context_error`, and `analyze_invalid_utf8` are never used
llms.txt-   --> crates/core/src/error/recovery/mod.rs:542:8
llms.txt-    |
--
llms.txt-96 |     max_repairs: usize,
llms.txt-   |     ^^^^^^^^^^^
llms.txt-
llms.txt:warning: `vexy_json-core` (lib) generated 27 warnings
llms.txt:   Compiling vexy_json-cli v2.2.3 (/Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/cli)
llms.txt-    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.92s
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/build.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-<source>build.sh</source>
llms.txt-<document_content>
llms.txt-#!/bin/bash
llms.txt:# Master build script for vexy_json project
llms.txt-# This script runs all build processes in the correct order
llms.txt-
llms.txt-set -e
--
llms.txt-BLUE='\033[0;34m'
llms.txt-NC='\033[0m' # No Color
llms.txt-
llms.txt:echo -e "${BLUE}🚀 vexy_json Master Build Script${NC}"
llms.txt-echo "=============================================="
llms.txt-echo
llms.txt-
--
llms.txt-echo -e "${GREEN}🎉 All build steps completed successfully!${NC}"
llms.txt-echo
llms.txt-echo -e "${BLUE}Build artifacts:${NC}"
llms.txt:echo "  • Rust library: target/release/libvexy_json.rlib"
llms.txt:echo "  • CLI binary: target/release/vexy_json"
llms.txt:echo "  • WebAssembly: docs/pkg/vexy_json_wasm_bg.wasm"
llms.txt:echo "  • Documentation: target/doc/vexy_json/index.html"
llms.txt-
llms.txt-if [[ "$OSTYPE" == "darwin"* ]]; then
llms.txt:    echo "  • macOS installer: vexy_json-${VERSION}-macos.dmg"
llms.txt-fi
llms.txt-
llms.txt-echo
--
llms.txt-<source>crates/c-api/Cargo.toml</source>
llms.txt-<document_content>
llms.txt-[package]
llms.txt:name = "vexy_json-c-api"
llms.txt-version = "1.0.0"
llms.txt-authors = [ "Vexy JSON Contributors" ]
llms.txt-edition = "2021"
llms.txt-license = "MIT OR Apache-2.0"
llms.txt:description = "C API for the vexy_json JSON parser"
llms.txt:repository = "https://github.com/twardoch/pub-vexy_json"
llms.txt-
llms.txt-
llms.txt-[lib]
llms.txt:name = "vexy_json_c_api"
llms.txt-crate-type = [ "cdylib", "staticlib" ]
llms.txt-
llms.txt-
--
llms.txt-serde_json = "1.0"
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "../core"
llms.txt-features = [ "serde" ]
llms.txt-
--
llms.txt-<document index="54">
llms.txt-<source>crates/c-api/README_CPP.md</source>
llms.txt-<document_content>
llms.txt:# vexy_json C++ Header-Only Wrapper
llms.txt-
llms.txt:This directory contains a modern C++ header-only wrapper for the vexy_json JSON parser, providing an idiomatic C++ interface with RAII, exceptions, and STL integration.
llms.txt-
llms.txt-## Features
llms.txt-
llms.txt:- **Header-only**: Just include `vexy_json.hpp` - no additional C++ files to compile
llms.txt-- **RAII**: Automatic memory management with smart pointers
llms.txt-- **Exception safety**: Strong exception guarantee with proper error handling
llms.txt-- **Modern C++**: Uses C++17 features like `std::string_view` and `std::optional`
--
llms.txt-## Requirements
llms.txt-
llms.txt-- C++17 or later compiler
llms.txt:- The vexy_json C library (linked separately)
llms.txt-
llms.txt-## Installation
llms.txt-
llms.txt:1. Include the `vexy_json.hpp` header in your project
llms.txt:2. Link against the vexy_json C library
llms.txt-
llms.txt-## Quick Start
llms.txt-
llms.txt-```cpp
llms.txt:#include "vexy_json.hpp"
llms.txt-
llms.txt-// Simple parsing
llms.txt:std::string json = vexy_json::parse(R"({"key": "value"})");
llms.txt-
llms.txt-// Parsing with options
llms.txt:auto options = vexy_json::ParserOptions()
llms.txt-    .allowComments()
llms.txt-    .allowTrailingCommas()
llms.txt-    .enableRepair();
llms.txt-    
llms.txt:std::string result = vexy_json::parse(input, options);
llms.txt-
llms.txt-// Using a parser instance
llms.txt:vexy_json::Parser parser(options);
llms.txt-std::string result = parser.parseToString(input);
llms.txt-
llms.txt-// Detailed parsing with repair information
llms.txt:auto detailed = vexy_json::parseDetailed(input, options);
llms.txt-std::cout << "JSON: " << detailed.json() << "\n";
llms.txt-for (const auto& repair : detailed.repairs()) {
llms.txt-    std::cout << "Repair: " << repair.description << "\n";
--
llms.txt-
llms.txt-## API Reference
llms.txt-
llms.txt:### Namespace `vexy_json`
llms.txt-
llms.txt:All C++ wrapper functionality is in the `vexy_json` namespace.
llms.txt-
llms.txt-### Classes
llms.txt-
--
llms.txt-- `parse(std::string_view)` - Quick parse with default options
llms.txt-- `parse(std::string_view, const ParserOptions&)` - Quick parse with options
llms.txt-- `parseDetailed(std::string_view, const ParserOptions&)` - Parse with repair info
llms.txt:- `version()` - Get vexy_json library version
llms.txt-
llms.txt-## Examples
llms.txt-
--
llms.txt-## Building the Examples
llms.txt-
llms.txt-```bash
llms.txt:# Assuming you have built the vexy_json C library
llms.txt:g++ -std=c++17 examples/cpp_example.cpp -lvexy_json -o cpp_example
llms.txt-./cpp_example
llms.txt-```
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/c-api/build.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-<document index="55">
llms.txt-<source>crates/c-api/examples/Makefile</source>
llms.txt-<document_content>
llms.txt:# Makefile for vexy_json C++ examples
llms.txt-
llms.txt-CXX = g++
llms.txt-CXXFLAGS = -std=c++17 -Wall -Wextra -O2
llms.txt:LDFLAGS = -L../../../target/release -lvexy_json
llms.txt-INCLUDES = -I../include
llms.txt-
llms.txt-# For macOS, add rpath to find the library
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/c-api/examples/cpp_example.cpp
llms.txt-# Language: cpp
llms.txt-
llms.txt-#include #include <iostream>
llms.txt-#include #include <string>
llms.txt:#include #include "../include/vexy_json.hpp"
llms.txt-
llms.txt-
llms.txt-<document index="56">
llms.txt:<source>crates/c-api/include/vexy_json.h</source>
llms.txt-<document_content>
llms.txt-/**
llms.txt: * @file vexy_json.h
llms.txt: * @brief C API for the vexy_json JSON parser
llms.txt- *
llms.txt: * This header provides a C-compatible API for the vexy_json JSON parser,
llms.txt- * allowing integration with C/C++ applications and other language bindings.
llms.txt- */
llms.txt-
--
llms.txt-#endif
llms.txt-
llms.txt-/**
llms.txt: * @brief Parser options for configuring vexy_json behavior
llms.txt- */
llms.txt-typedef struct VexyJsonParserOptions {
llms.txt-    bool allow_comments;
--
llms.txt-typedef void* VexyJsonParser;
llms.txt-
llms.txt-/**
llms.txt: * @brief Get the version of the vexy_json library
llms.txt- * @return Version string (do not free)
llms.txt- */
llms.txt:const char* vexy_json_version(void);
llms.txt-
llms.txt-/**
llms.txt- * @brief Parse JSON with default options
llms.txt- * @param input The JSON string to parse
llms.txt: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt- */
llms.txt:VexyJsonParseResult vexy_json_parse(const char* input);
llms.txt-
llms.txt-/**
llms.txt- * @brief Parse JSON with custom options
llms.txt- * @param input The JSON string to parse
llms.txt- * @param options Parser options
llms.txt: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt- */
llms.txt:VexyJsonParseResult vexy_json_parse_with_options(const char* input, const VexyJsonParserOptions* options);
llms.txt-
llms.txt-/**
llms.txt- * @brief Parse JSON and get detailed information including repairs
llms.txt- * @param input The JSON string to parse
llms.txt- * @param options Parser options
llms.txt: * @return Detailed result (must be freed with vexy_json_free_detailed_result)
llms.txt- */
llms.txt:VexyJsonDetailedResult vexy_json_parse_detailed(const char* input, const VexyJsonParserOptions* options);
llms.txt-
llms.txt-/**
llms.txt- * @brief Create a new parser instance
llms.txt- * @param options Parser options
llms.txt: * @return Parser handle (must be freed with vexy_json_parser_free)
llms.txt- */
llms.txt:VexyJsonParser vexy_json_parser_new(const VexyJsonParserOptions* options);
llms.txt-
llms.txt-/**
llms.txt- * @brief Parse JSON using a parser instance
llms.txt- * @param parser Parser handle
llms.txt- * @param input The JSON string to parse
llms.txt: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt- */
llms.txt:VexyJsonParseResult vexy_json_parser_parse(VexyJsonParser parser, const char* input);
llms.txt-
llms.txt-/**
llms.txt- * @brief Free a parser instance
llms.txt- * @param parser Parser handle
llms.txt- */
llms.txt:void vexy_json_parser_free(VexyJsonParser parser);
llms.txt-
llms.txt-/**
llms.txt- * @brief Free a parse result
llms.txt- * @param result Parse result to free
llms.txt- */
llms.txt:void vexy_json_free_result(VexyJsonParseResult result);
llms.txt-
llms.txt-/**
llms.txt- * @brief Free a detailed result
llms.txt- * @param result Detailed result to free
llms.txt- */
llms.txt:void vexy_json_free_detailed_result(VexyJsonDetailedResult result);
llms.txt-
llms.txt-/**
llms.txt- * @brief Get default parser options
llms.txt- * @return Default options
llms.txt- */
llms.txt:VexyJsonParserOptions vexy_json_default_options(void);
llms.txt-
llms.txt-#ifdef __cplusplus
llms.txt-}
--
llms.txt-</document>
llms.txt-
llms.txt-<document index="57">
llms.txt:<source>crates/c-api/include/vexy_json.hpp</source>
llms.txt-<document_content>
llms.txt-/**
llms.txt: * @file vexy_json.hpp
llms.txt: * @brief C++ header-only wrapper for the vexy_json JSON parser
llms.txt- *
llms.txt: * This header provides a modern C++ interface for the vexy_json JSON parser,
llms.txt- * with RAII, exceptions, and STL container support.
llms.txt- */
llms.txt-
--
llms.txt-#include <string_view>
llms.txt-#include <utility>
llms.txt-
llms.txt:#include "vexy_json.h"
llms.txt-
llms.txt:namespace vexy_json {
llms.txt-
llms.txt-/**
llms.txt: * @brief Exception thrown by vexy_json operations
llms.txt- */
llms.txt-class ParseError : public std::runtime_error {
llms.txt-public:
llms.txt-    explicit ParseError(const std::string& message) 
llms.txt:        : std::runtime_error("vexy_json parse error: " + message) {}
llms.txt-};
llms.txt-
llms.txt-/**
--
llms.txt- */
llms.txt-class ParserOptions {
llms.txt-public:
llms.txt:    ParserOptions() : options_(vexy_json_default_options()) {}
llms.txt-    
llms.txt-    ParserOptions& allowComments(bool value = true) {
llms.txt-        options_.allow_comments = value;
--
llms.txt-        return *this;
llms.txt-    }
llms.txt-    
llms.txt:    const vexy_json_parser_options* get() const { return &options_; }
llms.txt-    
llms.txt-private:
llms.txt:    vexy_json_parser_options options_;
llms.txt-};
llms.txt-
llms.txt-/**
--
llms.txt-public:
llms.txt-    ParseResult() = default;
llms.txt-    
llms.txt:    explicit ParseResult(vexy_json_parse_result result) 
llms.txt:        : result_(std::make_unique<vexy_json_parse_result>(result)) {
llms.txt-        if (result.error) {
llms.txt-            error_ = result.error;
llms.txt-        }
--
llms.txt-    
llms.txt-    ~ParseResult() {
llms.txt-        if (result_) {
llms.txt:            vexy_json_free_result(*result_);
llms.txt-        }
llms.txt-    }
llms.txt-    
--
llms.txt-    }
llms.txt-    
llms.txt-private:
llms.txt:    std::unique_ptr<vexy_json_parse_result> result_;
llms.txt-    std::optional<std::string> json_;
llms.txt-    std::optional<std::string> error_;
llms.txt-};
--
llms.txt-public:
llms.txt-    DetailedParseResult() = default;
llms.txt-    
llms.txt:    explicit DetailedParseResult(vexy_json_detailed_result result) 
llms.txt:        : result_(std::make_unique<vexy_json_detailed_result>(result)) {
llms.txt-        if (result.error) {
llms.txt-            error_ = result.error;
llms.txt-        }
--
llms.txt-    
llms.txt-    ~DetailedParseResult() {
llms.txt-        if (result_) {
llms.txt:            vexy_json_free_detailed_result(*result_);
llms.txt-        }
llms.txt-    }
llms.txt-    
--
llms.txt-    const std::vector<Repair>& repairs() const { return repairs_; }
llms.txt-    
llms.txt-private:
llms.txt:    std::unique_ptr<vexy_json_detailed_result> result_;
llms.txt-    std::optional<std::string> json_;
llms.txt-    std::optional<std::string> error_;
llms.txt-    std::vector<Repair> repairs_;
--
llms.txt-    Parser() : Parser(ParserOptions{}) {}
llms.txt-    
llms.txt-    explicit Parser(const ParserOptions& options) 
llms.txt:        : parser_(vexy_json_parser_new(options.get())) {
llms.txt-        if (!parser_) {
llms.txt:            throw std::runtime_error("Failed to create vexy_json parser");
llms.txt-        }
llms.txt-    }
llms.txt-    
--
llms.txt-    Parser& operator=(Parser&& other) noexcept {
llms.txt-        if (this != &other) {
llms.txt-            if (parser_) {
llms.txt:                vexy_json_parser_free(parser_);
llms.txt-            }
llms.txt-            parser_ = other.parser_;
llms.txt-            other.parser_ = nullptr;
--
llms.txt-    
llms.txt-    ~Parser() {
llms.txt-        if (parser_) {
llms.txt:            vexy_json_parser_free(parser_);
llms.txt-        }
llms.txt-    }
llms.txt-    
llms.txt-    ParseResult parse(std::string_view input) const {
llms.txt-        std::string input_str(input);
llms.txt:        return ParseResult(vexy_json_parser_parse(parser_, input_str.c_str()));
llms.txt-    }
llms.txt-    
llms.txt-    std::string parseToString(std::string_view input) const {
--
llms.txt-    }
llms.txt-    
llms.txt-private:
llms.txt:    vexy_json_parser parser_;
llms.txt-};
llms.txt-
llms.txt-/**
--
llms.txt- */
llms.txt-inline std::string parse(std::string_view input) {
llms.txt-    std::string input_str(input);
llms.txt:    auto result = ParseResult(vexy_json_parse(input_str.c_str()));
llms.txt-    return result.json();
llms.txt-}
llms.txt-
llms.txt-inline std::string parse(std::string_view input, const ParserOptions& options) {
llms.txt-    std::string input_str(input);
llms.txt:    auto result = ParseResult(vexy_json_parse_with_options(input_str.c_str(), options.get()));
llms.txt-    return result.json();
llms.txt-}
llms.txt-
llms.txt-inline DetailedParseResult parseDetailed(std::string_view input, const ParserOptions& options) {
llms.txt-    std::string input_str(input);
llms.txt:    return DetailedParseResult(vexy_json_parse_detailed(input_str.c_str(), options.get()));
llms.txt-}
llms.txt-
llms.txt-/**
llms.txt: * @brief Get the version of the vexy_json library
llms.txt- */
llms.txt-inline std::string version() {
llms.txt:    return vexy_json_version();
llms.txt-}
llms.txt-
llms.txt:} // namespace vexy_json
llms.txt-
llms.txt-#endif // VEXY_JSON_HPP
llms.txt-</document_content>
--
llms.txt-<document index="58">
llms.txt-<source>crates/c-api/src/lib.rs</source>
llms.txt-<document_content>
llms.txt://! C API for the vexy_json JSON parser.
llms.txt-//!
llms.txt-//! This crate provides a C-compatible API that can be used from C/C++
llms.txt-//! applications and for creating language bindings.
--
llms.txt-use libc::{c_char, size_t};
llms.txt-use std::ffi::{CStr, CString};
llms.txt-use std::ptr;
llms.txt:use vexy_json_core::ast::Value;
llms.txt:use vexy_json_core::{parse, parse_with_options, ParserOptions};
llms.txt-
llms.txt:/// Parser options for configuring vexy_json behavior
llms.txt-#[repr(C)]
llms.txt-pub struct VexyJsonParserOptions {
llms.txt-    pub allow_comments: bool,
--
llms.txt-    options: ParserOptions,
llms.txt-}
llms.txt-
llms.txt:/// Get the version of the vexy_json library
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_version() -> *const c_char {
llms.txt-    static VERSION: &str = concat!(env!("CARGO_PKG_VERSION"), "\0");
llms.txt-    VERSION.as_ptr() as *const c_char
llms.txt-}
llms.txt-
llms.txt-/// Parse JSON with default options
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_parse(input: *const c_char) -> VexyJsonParseResult {
llms.txt-    if input.is_null() {
llms.txt-        return VexyJsonParseResult {
llms.txt-            json: ptr::null_mut(),
--
llms.txt-
llms.txt-/// Parse JSON with custom options
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_parse_with_options(
llms.txt-    input: *const c_char,
llms.txt-    options: *const VexyJsonParserOptions,
llms.txt-) -> VexyJsonParseResult {
--
llms.txt-    }
llms.txt-
llms.txt-    if options.is_null() {
llms.txt:        return vexy_json_parse(input);
llms.txt-    }
llms.txt-
llms.txt-    let input_str = unsafe {
--
llms.txt-
llms.txt-/// Parse JSON and get detailed information including repairs
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_parse_detailed(
llms.txt-    input: *const c_char,
llms.txt-    options: *const VexyJsonParserOptions,
llms.txt-) -> VexyJsonDetailedResult {
llms.txt-    // For now, we'll implement this as a simple parse without repair tracking
llms.txt-    // TODO: Implement actual repair tracking
llms.txt-    let result = if options.is_null() {
llms.txt:        vexy_json_parse(input)
llms.txt-    } else {
llms.txt:        vexy_json_parse_with_options(input, options)
llms.txt-    };
llms.txt-
llms.txt-    VexyJsonDetailedResult {
--
llms.txt-
llms.txt-/// Create a new parser instance
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_parser_new(
llms.txt-    options: *const VexyJsonParserOptions,
llms.txt-) -> *mut VexyJsonParser {
llms.txt-    let rust_options = if options.is_null() {
--
llms.txt-
llms.txt-/// Parse JSON using a parser instance
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_parser_parse(
llms.txt-    parser: *mut VexyJsonParser,
llms.txt-    input: *const c_char,
llms.txt-) -> VexyJsonParseResult {
--
llms.txt-
llms.txt-/// Free a parser instance
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_parser_free(parser: *mut VexyJsonParser) {
llms.txt-    if !parser.is_null() {
llms.txt-        unsafe {
llms.txt-            let _ = Box::from_raw(parser);
--
llms.txt-
llms.txt-/// Free a parse result
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_free_result(result: VexyJsonParseResult) {
llms.txt-    if !result.json.is_null() {
llms.txt-        unsafe {
llms.txt-            let _ = CString::from_raw(result.json);
--
llms.txt-
llms.txt-/// Free a detailed result
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_free_detailed_result(result: VexyJsonDetailedResult) {
llms.txt-    if !result.json.is_null() {
llms.txt-        unsafe {
llms.txt-            let _ = CString::from_raw(result.json);
--
llms.txt-
llms.txt-/// Get default parser options
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_default_options() -> VexyJsonParserOptions {
llms.txt-    let rust_options = ParserOptions::default();
llms.txt-    rust_options_to_c(&rust_options)
llms.txt-}
--
llms.txt-<source>crates/cli/Cargo.toml</source>
llms.txt-<document_content>
llms.txt-[package]
llms.txt:name = "vexy_json-cli"
llms.txt-version = "1.0.0"
llms.txt-edition = "2021"
llms.txt-
llms.txt-
llms.txt-[[bin]]
llms.txt:name = "vexy_json"
llms.txt-path = "src/main.rs"
llms.txt-
llms.txt-
--
llms.txt-dirs = "5.0"
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "../core"
llms.txt-
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/cli/build.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/cli/src/main.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct CliArgs {
--
llms.txt-<source>crates/core/Cargo.toml</source>
llms.txt-<document_content>
llms.txt-[package]
llms.txt:name = "vexy_json-core"
llms.txt-version = "1.0.0"
llms.txt-edition = "2021"
llms.txt-
--
llms.txt-
llms.txt-## Overview
llms.txt-
llms.txt:Phase 2 focused on implementing comprehensive performance optimizations for the vexy_json JSON parser. This phase involved three key areas: memory optimization, lazy evaluation, and streaming parsing capabilities.
llms.txt-
llms.txt-## Completed Components
llms.txt-
--
llms.txt-
llms.txt-## Conclusion
llms.txt-
llms.txt:Phase 2 successfully established a comprehensive performance optimization foundation for vexy_json. While some optimizations show overhead in their current form, the infrastructure is solid and provides multiple avenues for future improvements.
llms.txt-
llms.txt-The implementation demonstrates sophisticated memory management, streaming capabilities, and lazy evaluation patterns that will serve as the foundation for continued performance enhancements in future phases.
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/benches/parser_benchmarks.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod samples;
--
llms.txt-<document index="65">
llms.txt-<source>crates/core/benchmark_results_v2.txt</source>
llms.txt-<document_content>
llms.txt:   Compiling vexy_json-core v0.2.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/crates/core)
llms.txt-warning: unnecessary qualification
llms.txt-   --> crates/core/src/optimization/memory_pool.rs:157:34
llms.txt-    |
--
llms.txt-
llms.txt-Some errors have detailed explanations: E0505, E0515.
llms.txt-For more information about an error, try `rustc --explain E0505`.
llms.txt:warning: `vexy_json-core` (lib) generated 3 warnings
llms.txt:error: could not compile `vexy_json-core` (lib) due to 4 previous errors; 3 warnings emitted
llms.txt-warning: build failed, waiting for other jobs to finish...
llms.txt:warning: `vexy_json-core` (lib test) generated 3 warnings (3 duplicates)
llms.txt:error: could not compile `vexy_json-core` (lib test) due to 4 previous errors; 3 warnings emitted
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/build.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/examples/advanced_repair.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/examples/error_reporting.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-<document index="66">
llms.txt-<source>crates/core/final_benchmark_results.txt</source>
llms.txt-<document_content>
llms.txt:   Compiling vexy_json-core v0.2.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/crates/core)
llms.txt-warning: unnecessary qualification
llms.txt-   --> crates/core/src/optimization/memory_pool.rs:157:34
llms.txt-    |
--
llms.txt-    |
llms.txt-    = note: `#[warn(useless_ptr_null_checks)]` on by default
llms.txt-
llms.txt:warning: `vexy_json-core` (lib) generated 58 warnings (run `cargo fix --lib -p vexy_json-core` to apply 1 suggestion)
llms.txt-warning: unused import: `parse_optimized_v2_with_options`
llms.txt-  --> crates/core/benches/parser_benchmarks.rs:12:38
llms.txt-   |
--
llms.txt-55 |     pub const MALFORMED_JSON: &str = r#"{'name': 'John', age: 30, "items": [1, 2, 3,]}"#;
llms.txt-   |               ^^^^^^^^^^^^^^
llms.txt-
llms.txt:warning: `vexy_json-core` (lib test) generated 59 warnings (58 duplicates)
llms.txt:warning: `vexy_json-core` (bench "parser_benchmarks") generated 3 warnings (run `cargo fix --bench "parser_benchmarks"` to apply 1 suggestion)
llms.txt-    Finished `bench` profile [optimized] target(s) in 1m 06s
llms.txt:     Running unittests src/lib.rs (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/target/release/deps/vexy_json_core-61b1bad5e05d5e9e)
llms.txt-
llms.txt-running 100 tests
llms.txt-test error::recovery::tests::test_number_format_fix ... ignored
--
llms.txt-
llms.txt-test result: ok. 0 passed; 0 failed; 100 ignored; 0 measured; 0 filtered out; finished in 0.00s
llms.txt-
llms.txt:     Running benches/parser_benchmarks.rs (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/target/release/deps/parser_benchmarks-6ba04f7e4c288a89)
llms.txt-Gnuplot not found, using plotters backend
llms.txt-Benchmarking basic_parsing/simple_object
llms.txt-Benchmarking basic_parsing/simple_object: Warming up for 3.0000 s
--
llms.txt-50 |     pub const BG_WHITE: &'static str = "\x1b[47m";
llms.txt-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
llms.txt-
llms.txt:warning: `vexy_json-core` (lib) generated 58 warnings (run `cargo fix --lib -p vexy_json-core` to apply 1 suggestion)
llms.txt-warning: returned pointer of `as_ptr` call is never null, so checking it for null will always return false
llms.txt-   --> crates/core/src/optimization/memory_pool.rs:380:18
llms.txt-    |
--
llms.txt-    |
llms.txt-    = note: `#[warn(useless_ptr_null_checks)]` on by default
llms.txt-
llms.txt:   Compiling vexy_json-core v0.2.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/crates/core)
llms.txt:warning: `vexy_json-core` (lib test) generated 59 warnings (58 duplicates)
llms.txt:error[E0432]: unresolved imports `vexy_json_core::parse_optimized_v2`, `vexy_json_core::parse_optimized_v2_with_options`, `vexy_json_core::parse_v2_with_stats`
llms.txt-  --> crates/core/benches/parser_benchmarks.rs:12:18
llms.txt-   |
llms.txt-12 |                  parse_optimized_v2, parse_optimized_v2_with_options, parse_v2_with_stats, ParserOptions};
--
llms.txt-   |
llms.txt-
llms.txt-For more information about this error, try `rustc --explain E0432`.
llms.txt:error: could not compile `vexy_json-core` (bench "parser_benchmarks") due to 1 previous error
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/ast/builder.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod build;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/ast/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod builder;
--
llms.txt-mod visitor;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/ast/token.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/ast/value.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/ml_patterns.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod recovery;
--
llms.txt-mod ml_patterns;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/recovery/context.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct ContextRule {
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/recovery/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod context;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/recovery/strategies.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/recovery_v2.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/repair.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct RepairAction {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/reporter.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/result.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/span.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/terminal.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/types.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/utils.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/array.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct LazyArray {
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod array;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/number.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/object.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct LazyObject {
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/string.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lexer/debug_lexer.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lexer/fast_lexer.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lexer/logos_lexer.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lexer/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod debug_lexer;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lib.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod ast;
--
llms.txt-mod parallel_chunked;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/benchmarks.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/memory_pool.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/memory_pool_v2.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/memory_pool_v3.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod benchmarks;
--
llms.txt-mod zero_copy;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/simd.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/string_parser.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/value_builder.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/zero_copy.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parallel.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parallel_chunked.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/array.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/boolean.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/iterative.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod array;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/null.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/number.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/object.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/optimized.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/optimized_v2.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/recursive.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/state.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct ParserState {
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/string.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/comment_preservation.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/custom_number.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/datetime.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod comment_preservation;
--
llms.txt-mod schema_validation;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/schema_validation.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/repair/advanced.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/repair.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod advanced;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/buffered/buffer.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/buffered/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod buffer;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/buffered/state.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct TempParsingState {
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/lexer.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod buffered;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/ndjson.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/simple_lexer.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/transform/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod normalizer;
--
llms.txt-mod optimizer;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/transform/normalizer.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/transform/optimizer.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-<source>crates/python/Cargo.toml</source>
llms.txt-<document_content>
llms.txt-[package]
llms.txt:name = "vexy_json-python"
llms.txt-version = "1.0.0"
llms.txt-edition = "2021"
llms.txt:description = "Python bindings for vexy_json - a forgiving JSON parser"
llms.txt:repository = "https://github.com/twardoch/vexy_json"
llms.txt-license = "MIT OR Apache-2.0"
llms.txt-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-
llms.txt-
llms.txt-[lib]
llms.txt:name = "vexy_json"
llms.txt-crate-type = [ "cdylib" ]
llms.txt-
llms.txt-
--
llms.txt-features = [ "extension-module" ]
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "../core"
llms.txt-
llms.txt-
--
llms.txt-<document_content>
llms.txt-# this_file: crates/python/README.md
llms.txt-
llms.txt:# vexy_json Python Bindings
llms.txt-
llms.txt:Python bindings for the vexy_json library - a forgiving JSON parser written in Rust.
llms.txt-
llms.txt-## Installation
llms.txt-
llms.txt-```bash
llms.txt:pip install vexy_json
llms.txt-```
llms.txt-
llms.txt-## Usage
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Parse forgiving JSON
llms.txt:result = vexy_json.parse('{"key": "value", trailing: true,}')
llms.txt-print(result)  # {'key': 'value', 'trailing': True}
llms.txt-
llms.txt-# Use NumPy integration
llms.txt-import numpy as np
llms.txt:arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-print(type(arr))  # <class 'numpy.ndarray'>
llms.txt-```
llms.txt-
--
llms.txt-- pandas DataFrame integration
llms.txt-- JSON repair functionality
llms.txt-
llms.txt:For more information, see the [main vexy_json documentation](https://github.com/twardoch/vexy_json).
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/build.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-
llms.txt-
llms.txt-[project]
llms.txt:name = "vexy_json"
llms.txt:description = "A forgiving JSON parser - Python bindings for the Rust vexy_json library"
llms.txt-readme = "README.md"
llms.txt-requires-python = ">=3.8"
llms.txt-classifiers = [
--
llms.txt-
llms.txt-
llms.txt-[project.urls]
llms.txt:Homepage = "https://github.com/twardoch/vexy_json"
llms.txt:Repository = "https://github.com/twardoch/vexy_json.git"
llms.txt:Issues = "https://github.com/twardoch/vexy_json/issues"
llms.txt:Documentation = "https://twardoch.github.io/vexy_json/"
llms.txt-
llms.txt-
llms.txt-[project.optional-dependencies]
--
llms.txt-[tool.maturin]
llms.txt-features = [ "pyo3/extension-module" ]
llms.txt-python-source = "python"
llms.txt:module-name = "vexy_json._vexy_json"
llms.txt:include = [ "python/vexy_json/__init__.pyi", "python/vexy_json/py.typed" ]
llms.txt-
llms.txt-
llms.txt-[tool.pytest.ini_options]
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/python/vexy_json/__init__.py
llms.txt-# Language: python
llms.txt-
llms.txt:from ._vexy_json import (
llms.txt-    parse_json as parse,
llms.txt-    parse_with_options_py as parse_with_options,
llms.txt-    is_valid,
--
llms.txt-
llms.txt-
llms.txt-<document index="74">
llms.txt:<source>crates/python/python/vexy_json/__init__.pyi</source>
llms.txt-<document_content>
llms.txt:# this_file: crates/python/vexy_json.pyi
llms.txt-
llms.txt-"""
llms.txt:Type stubs for vexy_json Python bindings.
llms.txt-
llms.txt:This file provides type hints for the vexy_json Python module, which is implemented in Rust.
llms.txt-"""
llms.txt-
llms.txt-from typing import Any, Dict, List, Union, Optional, IO, Iterator, ContextManager
--
llms.txt-        ValueError: If the input is not valid JSON
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt:        >>> result = vexy_json.parse('{"key": "value", trailing: true,}')
llms.txt-        >>> print(result)
llms.txt-        {'key': 'value', 'trailing': True}
llms.txt-    """
--
llms.txt-        ValueError: If the input is not valid JSON
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt:        >>> result = vexy_json.parse_with_options('key: value', implicit_top_level=True)
llms.txt-        >>> print(result)
llms.txt-        {'key': 'value'}
llms.txt-    """
--
llms.txt-        True if the input is valid, False otherwise
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt:        >>> vexy_json.is_valid('{"valid": true}')
llms.txt-        True
llms.txt:        >>> vexy_json.is_valid('invalid json')
llms.txt-        False
llms.txt-    """
llms.txt-    ...
--
llms.txt-        TypeError: If the object cannot be serialized to JSON
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt-        >>> data = {'key': 'value', 'number': 42}
llms.txt:        >>> vexy_json.dumps(data)
llms.txt-        '{"key":"value","number":42}'
llms.txt:        >>> vexy_json.dumps(data, indent=2)
llms.txt-        '{\n  "key": "value",\n  "number": 42\n}'
llms.txt-    """
llms.txt-    ...
--
llms.txt-        ValueError: If the content is not valid JSON
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt-        >>> with open('data.json', 'r') as f:
llms.txt:        ...     result = vexy_json.load(f)
llms.txt-    """
llms.txt-    ...
llms.txt-
--
llms.txt-        TypeError: If the object cannot be serialized
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt-        >>> data = {'key': 'value'}
llms.txt-        >>> with open('output.json', 'w') as f:
llms.txt:        ...     vexy_json.dump(data, f, indent=2)
llms.txt-    """
llms.txt-    ...
llms.txt-
--
llms.txt-        ImportError: If NumPy is not available
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt:        >>> arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-        >>> print(type(arr))
llms.txt-        <class 'numpy.ndarray'>
llms.txt-    """
--
llms.txt-        The parsed array with zero-copy optimization when possible
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt:        >>> arr = vexy_json.loads_numpy_zerocopy('[1.0, 2.0, 3.0]', dtype='float64')
llms.txt-    """
llms.txt-    ...
llms.txt-
--
llms.txt-        The parsed JSON as a DataFrame
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt:        >>> df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
llms.txt-        >>> print(type(df))
llms.txt-        <class 'pandas.core.frame.DataFrame'>
llms.txt-    """
--
llms.txt-    JSON files or streams.
llms.txt-    
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt:        >>> with vexy_json.StreamingParser() as parser:
llms.txt-        ...     for item in parser.parse_stream(file_handle):
llms.txt-        ...         print(item)
llms.txt-    """
--
llms.txt-            Iterator of parsed JSON objects
llms.txt-            
llms.txt-        Example:
llms.txt:            >>> with vexy_json.StreamingParser() as parser:
llms.txt-            ...     for item in parser.parse_stream(file_handle):
llms.txt-            ...         process(item)
llms.txt-        """
--
llms.txt-            Iterator of parsed JSON objects
llms.txt-            
llms.txt-        Example:
llms.txt:            >>> with vexy_json.StreamingParser() as parser:
llms.txt-            ...     for item in parser.parse_lines(file_handle):
llms.txt-            ...         process(item)
llms.txt-        """
--
llms.txt-</document>
llms.txt-
llms.txt-<document index="75">
llms.txt:<source>crates/python/python/vexy_json/py.typed</source>
llms.txt-<document_content>
llms.txt:# this_file: crates/python/python/vexy_json/py.typed
llms.txt-
llms.txt-# Marker file for PEP 561 indicating that this package supports typing
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/src/lib.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct StreamingParser {
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/tests/test_basic.py
llms.txt-# Language: python
llms.txt-
llms.txt-import pytest
llms.txt:import vexy_json
llms.txt-
llms.txt-class TestBasicParsing:
llms.txt-    """Test basic JSON parsing functionality."""
--
llms.txt-        """Test parsing nested objects and arrays."""
llms.txt-
llms.txt-class TestForgivingFeatures:
llms.txt:    """Test vexy_json's forgiving JSON features."""
llms.txt-    def test_comments((self)):
llms.txt-        """Test single-line and multi-line comments."""
llms.txt-    def test_trailing_commas((self)):
--
llms.txt-    """Test various malformed JSON inputs."""
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/tests/test_typing.py
llms.txt-# Language: python
llms.txt-
llms.txt-import pytest
--
llms.txt-from typing import TYPE_CHECKING
llms.txt-import numpy as np
llms.txt-import pandas as pd
llms.txt:import vexy_json
llms.txt:import vexy_json
llms.txt:import vexy_json
llms.txt:import vexy_json
llms.txt:import vexy_json
llms.txt-import numpy as np
llms.txt:import vexy_json
llms.txt-import pandas as pd
llms.txt:import vexy_json
llms.txt:import vexy_json
llms.txt:import vexy_json
llms.txt-
llms.txt-def test_basic_functionality(()):
llms.txt-    """Test basic parsing functionality with type hints."""
--
llms.txt-    """Test all forgiving JSON features."""
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/tests/test_vexy_json.py
llms.txt-# Language: python
llms.txt-
llms.txt:import vexy_json
llms.txt:from vexy_json import VexyJSONParser, VexyJSONConfig
llms.txt-
llms.txt-class VexyJSONWrapper:
llms.txt-    """A wrapper for Vexy JSON functionality"""
--
llms.txt-<source>crates/serde/Cargo.toml</source>
llms.txt-<document_content>
llms.txt-[package]
llms.txt:name = "vexy_json-serde"
llms.txt-version = "1.0.0"
llms.txt-edition = "2021"
llms.txt-
--
llms.txt-path = "src/lib.rs"
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "../core"
llms.txt-features = [ "serde" ]
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/serde/src/lib.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct SerdeValue {
--
llms.txt-path = "src/lib.rs"
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "../core"
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/test-utils/src/lib.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-<source>crates/wasm/Cargo.toml</source>
llms.txt-<document_content>
llms.txt-[package]
llms.txt:name = "vexy_json-wasm"
llms.txt-version = "1.0.0"
llms.txt-edition = "2021"
llms.txt:description = "WebAssembly bindings for vexy_json - a forgiving JSON parser"
llms.txt:repository = "https://github.com/twardoch/vexy_json"
llms.txt-license = "MIT OR Apache-2.0"
llms.txt-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-
--
llms.txt-features = [ "derive" ]
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "../core"
llms.txt-features = [ "serde" ]
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/wasm/build.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/wasm/src/lib.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-const __dirname = dirname(__filename);
llms.txt-
llms.txt-// Dynamically import the WASM module
llms.txt:const wasmModule = await import(join(__dirname, 'pkg', 'vexy_json_wasm.js'));
llms.txt-const { default: init, parse_js, parse_with_options_js, is_valid, format } = wasmModule;
llms.txt-
llms.txt-// Initialize WASM with the WASM file path
llms.txt:const wasmPath = join(__dirname, 'pkg', 'vexy_json_wasm_bg.wasm');
llms.txt-const wasmBytes = readFileSync(wasmPath);
llms.txt-await init(wasmBytes);
llms.txt-
llms.txt:console.log('Testing vexy_json WASM module...\n');
llms.txt-
llms.txt-// Test 1: Basic parsing
llms.txt-console.log('Test 1: Basic parsing');
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_comment_colon.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_double_decimal.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_lexer_test.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test10.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test2.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test3.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test4.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test5.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test6.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test7.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test8.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test9.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-author:
llms.txt-  name: Adam Twardoch
llms.txt-  url: https://github.com/twardoch
llms.txt:baseurl: /vexy_json
llms.txt-# Collections
llms.txt-collections:
llms.txt-  pages:
--
llms.txt-  - '**/gems/jekyll-*/lib/site_template/_posts/*'
llms.txt-  - 'internal/**/*'
llms.txt-github:
llms.txt:  repository_url: https://github.com/twardoch/vexy_json
llms.txt-highlighter: rouge
llms.txt-# Include WASM and tool files in build
llms.txt-include:
--
llms.txt-back_to_top_text: "Back to top"
llms.txt-
llms.txt-# Footer content
llms.txt:footer_content: "Copyright &copy; 2025 Adam Twardoch. Distributed by an <a href=\"https://github.com/twardoch/vexy_json/tree/main/LICENSE\">MIT license.</a>"
llms.txt-
llms.txt-# External navigation links will be removed from here as just-the-docs handles them in the content
llms.txt-# Plugin configuration
--
llms.txt-  - jekyll-sitemap
llms.txt-  - jekyll-optional-front-matter
llms.txt-# Repository information
llms.txt:repository: twardoch/vexy_json
llms.txt-# Performance and caching
llms.txt-sass:
llms.txt-  style: compressed
--
llms.txt-social:
llms.txt-  - icon: github
llms.txt-    name: GitHub
llms.txt:    url: https://github.com/twardoch/vexy_json
llms.txt-# WASM and static file configuration
llms.txt-# Ensure proper MIME types for WebAssembly files
llms.txt-static_files:
--
llms.txt-  - /pkg/*.js
llms.txt-  - /assets/**/*
llms.txt-remote_theme: just-the-docs/just-the-docs
llms.txt:# Site configuration for vexy_json documentation
llms.txt:title: vexy_json - Forgiving JSON Parser
llms.txt-url: https://twardoch.github.io
llms.txt-# MIME type handling for GitHub Pages
llms.txt-# Note: GitHub Pages automatically serves .wasm files with application/wasm MIME type
--
llms.txt-
llms.txt-# API Reference v2.0.0
llms.txt-
llms.txt:This section provides detailed documentation for the `vexy_json` Rust library v2.0.0. The API is designed to be intuitive and idiomatic for Rust developers, with powerful new features for streaming, parallel processing, and extensibility.
llms.txt-
llms.txt:## `vexy_json::parse`
llms.txt-
llms.txt-```rust
llms.txt-pub fn parse(input: &str) -> Result<Value, Error>
llms.txt-```
llms.txt-
llms.txt:Parses a JSON-like string into a `vexy_json::Value` enum using default parser options. This is the primary entry point for using the library.
llms.txt-
llms.txt-- `input`: The string slice containing the JSON-like data to parse.
llms.txt-- Returns:
llms.txt-    - `Ok(Value)`: If parsing is successful, returns a `Value` enum representing the parsed data.
llms.txt-    - `Err(Error)`: If an error occurs during parsing, returns an `Error` detailing the issue.
llms.txt-
llms.txt:## `vexy_json::parse_with_options`
llms.txt-
llms.txt-```rust
llms.txt-pub fn parse_with_options(input: &str, options: ParserOptions) -> Result<Value, Error>
llms.txt-```
llms.txt-
llms.txt:Parses a JSON-like string into a `vexy_json::Value` enum with custom parser options. This allows fine-grained control over which forgiving features are enabled.
llms.txt-
llms.txt-- `input`: The string slice containing the JSON-like data to parse.
llms.txt-- `options`: A `ParserOptions` struct configuring the parser's behavior.
--
llms.txt-    - `Ok(Value)`: If parsing is successful, returns a `Value` enum representing the parsed data.
llms.txt-    - `Err(Error)`: If an error occurs during parsing, returns an `Error` detailing the issue.
llms.txt-
llms.txt:## `vexy_json::ParserOptions`
llms.txt-
llms.txt:This struct defines the configurable options for the `vexy_json` parser.
llms.txt-
llms.txt-```rust
llms.txt-pub struct ParserOptions {
--
llms.txt-`ParserOptions` implements `Default`, so you can create a default instance and then modify specific fields:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::ParserOptions;
llms.txt-
llms.txt-let mut options = ParserOptions::default();
llms.txt-options.allow_comments = false; // Disable comments
llms.txt-options.max_depth = 64; // Set a custom max depth
llms.txt-```
llms.txt-
llms.txt:## `vexy_json::Value` Enum
llms.txt-
llms.txt:This enum represents the different types of JSON values that `vexy_json` can parse.
llms.txt-
llms.txt-```rust
llms.txt-pub enum Value {
--
llms.txt-
llms.txt-- `Null`: Represents a JSON `null` value.
llms.txt-- `Bool(bool)`: Represents a JSON boolean (`true` or `false`).
llms.txt:- `Number(Number)`: Represents a JSON numeric value. See `vexy_json::Number` for details.
llms.txt-- `String(String)`: Represents a JSON string.
llms.txt-- `Array(Vec<Value>)`: Represents a JSON array, a vector of `Value` enums.
llms.txt-- `Object(HashMap<String, Value>)`: Represents a JSON object, a hash map of string keys to `Value` enums.
--
llms.txt-- `as_array() -> Option<&Vec<Value>>`
llms.txt-- `as_object() -> Option<&HashMap<String, Value>>`
llms.txt-
llms.txt:## `vexy_json::Number` Enum
llms.txt-
llms.txt-This enum represents a JSON number, which can be either an integer or a floating-point number.
llms.txt-
--
llms.txt-- `Integer(i64)`: An integer value that fits in an `i64`.
llms.txt-- `Float(f64)`: A floating-point value.
llms.txt-
llms.txt:## `vexy_json::Error` Enum
llms.txt-
llms.txt-This enum defines the types of errors that can occur during parsing.
llms.txt-
--
llms.txt-- `InvalidEscape(usize)`: An invalid escape sequence was found in a string at a given position.
llms.txt-- `InvalidUnicode(usize)`: An invalid Unicode escape sequence was found at a given position.
llms.txt-- `UnterminatedString(usize)`: A string literal was not properly terminated, starting at a given position.
llms.txt:- `TrailingComma(usize)`: A trailing comma was found where not allowed (though typically allowed by `vexy_json`'s forgiving nature, this error might occur in strict modes or specific contexts) at a given position.
llms.txt-- `Expected { expected: String, found: String, position: usize }`: The parser expected a specific token or value but found something else at a given position.
llms.txt-- `DepthLimitExceeded(usize)`: The maximum recursion depth was exceeded while parsing nested structures at a given position.
llms.txt-- `Custom(String)`: A custom error with a descriptive message.
--
llms.txt-
llms.txt-## Serde Integration
llms.txt-
llms.txt:`vexy_json` provides optional integration with the `serde` serialization framework. When the `serde` feature is enabled in your `Cargo.toml`, `vexy_json::Value` and `vexy_json::Number` implement the `Serialize` and `Deserialize` traits. This allows easy conversion between `vexy_json::Value` and other data formats supported by Serde (e.g., `serde_json::Value`).
llms.txt-
llms.txt:To enable this feature, add `serde` to your `vexy_json` dependency in `Cargo.toml`:
llms.txt-
llms.txt-```toml
llms.txt-[dependencies]
llms.txt:vexy_json = { version = "2.0.0", features = ["serde"] }
llms.txt-```
llms.txt-
llms.txt-**Example:**
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse, Value};
llms.txt-use serde_json; // Requires `serde_json` crate
llms.txt-
llms.txt-fn main() {
llms.txt-    let json_str = r#"{ "name": "Alice", "age": 30 }"#;
llms.txt:    let vexy_json_value: Value = parse(json_str).unwrap();
llms.txt-
llms.txt:    // Convert vexy_json::Value to serde_json::Value
llms.txt:    let serde_value: serde_json::Value = serde_json::to_value(vexy_json_value).unwrap();
llms.txt-    println!("Converted to serde_json::Value: {}", serde_value);
llms.txt-
llms.txt:    // Convert serde_json::Value back to vexy_json::Value
llms.txt:    let new_vexy_json_value: Value = serde_json::from_value(serde_value).unwrap();
llms.txt:    println!("Converted back to vexy_json::Value: {:?}", new_vexy_json_value);
llms.txt-}
llms.txt-```
llms.txt-
llms.txt-## WebAssembly (WASM) Bindings
llms.txt-
llms.txt:`vexy_json` offers WebAssembly bindings, allowing it to be used directly in JavaScript environments (e.g., web browsers, Node.js). This is enabled via the `wasm` feature.
llms.txt-
llms.txt:To enable this feature, add `wasm` to your `vexy_json` dependency in `Cargo.toml`:
llms.txt-
llms.txt-```toml
llms.txt-[dependencies]
llms.txt:vexy_json = { version = "2.0.0", features = ["wasm"] }
llms.txt-```
llms.txt-
llms.txt-For detailed documentation on the WebAssembly API, including JavaScript examples, please refer to the [WASM API Reference](wasm/).
llms.txt-
llms.txt-## Streaming API (New in v2.0.0)
llms.txt-
llms.txt:`vexy_json` v2.0.0 introduces a powerful streaming parser for processing large JSON files incrementally.
llms.txt-
llms.txt:### `vexy_json::StreamingParser`
llms.txt-
llms.txt-```rust
llms.txt-pub struct StreamingParser { /* ... */ }
--
llms.txt-
llms.txt-Example usage:
llms.txt-```rust
llms.txt:use vexy_json::{StreamingParser, StreamingEvent};
llms.txt-
llms.txt-let mut parser = StreamingParser::new();
llms.txt-parser.feed(r#"{"key": "value"}"#)?;
--
llms.txt-}
llms.txt-```
llms.txt-
llms.txt:### `vexy_json::StreamingEvent`
llms.txt-
llms.txt-```rust
llms.txt-pub enum StreamingEvent {
--
llms.txt-
llms.txt-## Parallel Processing (New in v2.0.0)
llms.txt-
llms.txt:`vexy_json` v2.0.0 includes parallel processing capabilities for batch operations using the `rayon` crate.
llms.txt-
llms.txt:### `vexy_json::parse_parallel`
llms.txt-
llms.txt-```rust
llms.txt-pub fn parse_parallel<I>(inputs: I) -> Vec<Result<Value, Error>>
--
llms.txt-Process multiple JSON strings in parallel:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse_parallel;
llms.txt-
llms.txt-let json_strings = vec![
llms.txt-    r#"{"id": 1, "name": "Alice"}"#,
--
llms.txt-}
llms.txt-```
llms.txt-
llms.txt:### `vexy_json::ParallelOptions`
llms.txt-
llms.txt-```rust
llms.txt-pub struct ParallelOptions {
--
llms.txt-
llms.txt-## Plugin System (New in v2.0.0)
llms.txt-
llms.txt:`vexy_json` v2.0.0 introduces a plugin architecture for extending parsing capabilities.
llms.txt-
llms.txt:### `vexy_json::Plugin` Trait
llms.txt-
llms.txt-```rust
llms.txt-pub trait Plugin: Send + Sync {
--
llms.txt-Example plugin implementation:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{Plugin, Value, Error};
llms.txt-
llms.txt-struct DateNormalizerPlugin;
llms.txt-
--
llms.txt-}
llms.txt-```
llms.txt-
llms.txt:### `vexy_json::parse_with_plugins`
llms.txt-
llms.txt-```rust
llms.txt-pub fn parse_with_plugins(
--
llms.txt-
llms.txt-Usage example:
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_plugins, ParserOptions};
llms.txt-
llms.txt-let plugins: Vec<Box<dyn Plugin>> = vec![
llms.txt-    Box::new(DateNormalizerPlugin),
--
llms.txt-
llms.txt-## NDJSON Support (New in v2.0.0)
llms.txt-
llms.txt:### `vexy_json::NdJsonParser`
llms.txt-
llms.txt-```rust
llms.txt-pub struct NdJsonParser { /* ... */ }
--
llms.txt-
llms.txt-Example:
llms.txt-```rust
llms.txt:use vexy_json::NdJsonParser;
llms.txt-
llms.txt-let mut parser = NdJsonParser::new();
llms.txt-let input = r#"{"id": 1}
--
llms.txt-<document index="87">
llms.txt-<source>docs/assets/css/_tool.scss</source>
llms.txt-<document_content>
llms.txt:/* Custom styles for vexy_json web tool */
llms.txt-
llms.txt-/* Editor enhancements */
llms.txt-.textarea-editor {
--
llms.txt-<document index="88">
llms.txt-<source>docs/assets/css/enhanced-features.css</source>
llms.txt-<document_content>
llms.txt:/* Enhanced features for vexy_json tool */
llms.txt-
llms.txt-/* WASM loading animations */
llms.txt-.loading-fade {
--
llms.txt----
llms.txt-
llms.txt-// @import "just-the-docs";
llms.txt:// Custom styles for vexy_json documentation site
llms.txt-// This file extends the just-the-docs theme with custom styling
llms.txt-
llms.txt-// Import our tool-specific styles
--
llms.txt-
llms.txt-// Custom color scheme refinements
llms.txt-:root {
llms.txt:  --vexy_json-primary: #0969da;
llms.txt:  --vexy_json-secondary: #656d76;
llms.txt:  --vexy_json-accent: #0550ae;
llms.txt:  --vexy_json-success: #1a7f37;
llms.txt:  --vexy_json-warning: #bf8700;
llms.txt:  --vexy_json-danger: #cf222e;
llms.txt-}
llms.txt-
llms.txt-// Enhanced code blocks for JSON examples
--
llms.txt-      .nav-list-link {
llms.txt-        &.active {
llms.txt-          font-weight: 600;
llms.txt:          color: var(--vexy_json-primary);
llms.txt-        }
llms.txt-      }
llms.txt-    }
--
llms.txt-  
llms.txt-  .footer-content {
llms.txt-    font-size: 14px;
llms.txt:    color: var(--vexy_json-secondary);
llms.txt-    
llms.txt-    a {
llms.txt:      color: var(--vexy_json-primary);
llms.txt-      text-decoration: none;
llms.txt-      
llms.txt-      &:hover {
--
llms.txt-}
llms.txt-
llms.txt-// Custom button styles
llms.txt:.btn-vexy_json {
llms.txt:  background-color: var(--vexy_json-primary);
llms.txt:  border: 1px solid var(--vexy_json-primary);
llms.txt-  color: white;
llms.txt-  
llms.txt-  &:hover {
llms.txt:    background-color: var(--vexy_json-accent);
llms.txt:    border-color: var(--vexy_json-accent);
llms.txt-  }
llms.txt-  
llms.txt-  &:focus {
--
llms.txt-    th {
llms.txt-      background-color: var(--code-background-color);
llms.txt-      font-weight: 600;
llms.txt:      color: var(--vexy_json-primary);
llms.txt-    }
llms.txt-    
llms.txt-    td {
--
llms.txt-  
llms.txt-  &.callout-info {
llms.txt-    background-color: rgba(9, 105, 218, 0.1);
llms.txt:    border-left-color: var(--vexy_json-primary);
llms.txt-    
llms.txt-    .callout-title {
llms.txt:      color: var(--vexy_json-primary);
llms.txt-      font-weight: 600;
llms.txt-    }
llms.txt-  }
llms.txt-  
llms.txt-  &.callout-warning {
llms.txt-    background-color: rgba(191, 135, 0, 0.1);
llms.txt:    border-left-color: var(--vexy_json-warning);
llms.txt-    
llms.txt-    .callout-title {
llms.txt:      color: var(--vexy_json-warning);
llms.txt-      font-weight: 600;
llms.txt-    }
llms.txt-  }
llms.txt-  
llms.txt-  &.callout-success {
llms.txt-    background-color: rgba(26, 127, 55, 0.1);
llms.txt:    border-left-color: var(--vexy_json-success);
llms.txt-    
llms.txt-    .callout-title {
llms.txt:      color: var(--vexy_json-success);
llms.txt-      font-weight: 600;
llms.txt-    }
llms.txt-  }
--
llms.txt-    .stat-value {
llms.txt-      font-size: 2em;
llms.txt-      font-weight: 700;
llms.txt:      color: var(--vexy_json-primary);
llms.txt-      display: block;
llms.txt-    }
llms.txt-    
llms.txt-    .stat-label {
llms.txt-      font-size: 0.9em;
llms.txt:      color: var(--vexy_json-secondary);
llms.txt-      margin-top: 4px;
llms.txt-    }
llms.txt-  }
--
llms.txt-// Dark mode adjustments
llms.txt-@media (prefers-color-scheme: dark) {
llms.txt-  :root {
llms.txt:    --vexy_json-primary: #58a6ff;
llms.txt:    --vexy_json-secondary: #8b949e;
llms.txt:    --vexy_json-accent: #79c0ff;
llms.txt:    --vexy_json-success: #3fb950;
llms.txt:    --vexy_json-warning: #d29922;
llms.txt:    --vexy_json-danger: #f85149;
llms.txt-  }
llms.txt-}
llms.txt-
--
llms.txt-<document index="90">
llms.txt-<source>docs/assets/css/tool.css</source>
llms.txt-<document_content>
llms.txt:/* Custom styles for vexy_json web tool */
llms.txt-
llms.txt-/* Editor enhancements */
llms.txt-.textarea-editor {
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/analytics.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-class AnalyticsCollector {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/browser-compatibility.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-class BrowserCompatibility {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/editor.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-class JsonEditor {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/error-highlighting.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-class ErrorHighlighter {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/examples.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-function getExamplesByCategory(())
--
llms.txt-function searchExamples((query))
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/feedback.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-class FeedbackSystem {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/jsonic-tool.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-class JsonicTool {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/tool.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-import init, {
--
llms.txt-    get_parser_options,
llms.txt-    stringify_value,
llms.txt-    get_version_info
llms.txt:} from '../../pkg/vexy_json_wasm.js';
llms.txt-import { EXAMPLES, getExample } from './examples.js';
llms.txt-import { BrowserCompatibility } from './browser-compatibility.js';
llms.txt-import { AnalyticsCollector } from './analytics.js';
--
llms.txt-
llms.txt-# Benchmark Results
llms.txt-
llms.txt:This section presents the parsing performance benchmarks for `vexy_json` (Rust).
llms.txt-Benchmarks were run on the following environment:
llms.txt-
llms.txt-*   **CPU**: [e.g., Intel Core i7-10700K]
--
llms.txt-
llms.txt-Lower values (nanoseconds per iteration) are better.
llms.txt-
llms.txt:| Test Case | `vexy_json` (ns/iter) |
llms.txt-|---|---|
llms.txt-| simple | 7782 |
llms.txt-| array | 7836 |
--
llms.txt-<document_content>
llms.txt-# Build Status Dashboard
llms.txt-
llms.txt:This page provides an overview of the current build status and health metrics for the vexy_json project.
llms.txt-
llms.txt-## Continuous Integration Status
llms.txt-
--
llms.txt-
llms.txt-| Workflow | Status | Description |
llms.txt-|----------|--------|-------------|
llms.txt:| WASM Build | [![Build Status](https://github.com/twardoch/vexy_json/workflows/Build%20and%20Deploy%20WASM/badge.svg)](https://github.com/twardoch/vexy_json/actions/workflows/wasm-build.yml) | Builds WebAssembly module and deploys to GitHub Pages |
llms.txt:| Security Audit | [![Security Audit](https://github.com/twardoch/vexy_json/workflows/Security%20Audit/badge.svg)](https://github.com/twardoch/vexy_json/actions/workflows/security.yml) | Checks for security vulnerabilities in dependencies |
llms.txt:| Release | [![Release](https://github.com/twardoch/vexy_json/workflows/Release/badge.svg)](https://github.com/twardoch/vexy_json/actions/workflows/release.yml) | Automated release process for tagged versions |
llms.txt-
llms.txt-### Package Registries
llms.txt-
llms.txt-| Registry | Version | Downloads |
llms.txt-|----------|---------|-----------|
llms.txt:| crates.io | [![crates.io](https://img.shields.io/crates/v/vexy_json.svg)](https://crates.io/crates/vexy_json) | [![Downloads](https://img.shields.io/crates/d/vexy_json.svg)](https://crates.io/crates/vexy_json) |
llms.txt:| docs.rs | [![docs.rs](https://docs.rs/vexy_json/badge.svg)](https://docs.rs/vexy_json) | - |
llms.txt:| npm | [![npm](https://img.shields.io/npm/v/@vexy_json/vexy_json.svg)](https://www.npmjs.com/package/@vexy_json/vexy_json) | [![npm downloads](https://img.shields.io/npm/dm/@vexy_json/vexy_json.svg)](https://www.npmjs.com/package/@vexy_json/vexy_json) |
llms.txt-
llms.txt-## Code Quality Metrics
llms.txt-
--
llms.txt-## Deployment Status
llms.txt-
llms.txt-### Live Deployments
llms.txt:- **Vexy JSON Tool**: [https://twardoch.github.io/vexy_json/vexy_json-tool/](https://twardoch.github.io/vexy_json/vexy_json-tool/)
llms.txt:- **Jsonic Tool**: [https://twardoch.github.io/vexy_json/jsonic-tool/](https://twardoch.github.io/vexy_json/jsonic-tool/)
llms.txt:- **Tools Overview**: [https://twardoch.github.io/vexy_json/tools/](https://twardoch.github.io/vexy_json/tools/)
llms.txt:- **Documentation**: [https://docs.rs/vexy_json](https://docs.rs/vexy_json)
llms.txt-- **GitHub Pages**: Automatically deployed on main branch updates
llms.txt-
llms.txt-### Release Artifacts
--
llms.txt-- **As Needed**: Bug fixes and feature updates
llms.txt-
llms.txt-### Contact
llms.txt:For build failures or urgent issues, please [create an issue](https://github.com/twardoch/vexy_json/issues/new) on GitHub.
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-nav_order: 7
llms.txt----
llms.txt-
llms.txt:# Contributing to vexy_json
llms.txt-
llms.txt:We welcome contributions to `vexy_json`! Whether it's bug reports, feature requests, documentation improvements, or code contributions, your help is greatly appreciated.
llms.txt-
llms.txt-## How to Contribute
llms.txt-
llms.txt:1.  **Fork the Repository**: Start by forking the `vexy_json` repository on GitHub.
llms.txt-2.  **Clone Your Fork**: Clone your forked repository to your local machine:
llms.txt-    ```bash
llms.txt:    git clone https://github.com/your-username/vexy_json.git
llms.txt:    cd vexy_json
llms.txt-    ```
llms.txt-3.  **Create a New Branch**: Create a new branch for your feature or bug fix:
llms.txt-    ```bash
--
llms.txt-    ```bash
llms.txt-    git push origin feature/your-feature-name
llms.txt-    ```
llms.txt:9.  **Create a Pull Request**: Open a pull request from your fork to the `main` branch of the `vexy_json` repository. Provide a detailed description of your changes.
llms.txt-
llms.txt-## Code Style and Conventions
llms.txt-
--
llms.txt-
llms.txt-## Extending the Web Tool
llms.txt-
llms.txt:If you're looking to contribute specifically to the `vexy_json` web tool, please refer to the [Developer Guide for Extending the Web Tool](developer-guide.md) for detailed information on its structure, build process, and development considerations.
llms.txt-
llms.txt-## Reporting Bugs
llms.txt-
llms.txt:If you find a bug, please open an issue on the [GitHub Issues page](https://github.com/twardoch/vexy_json/issues). When reporting a bug, please include:
llms.txt-
llms.txt--   A clear and concise description of the bug.
llms.txt--   Steps to reproduce the behavior.
--
llms.txt-
llms.txt-## Feature Requests
llms.txt-
llms.txt:Have an idea for a new feature? Open an issue on the [GitHub Issues page](https://github.com/twardoch/vexy_json/issues) to discuss it. Describe the feature, why you think it would be valuable, and any potential implementation details.
llms.txt-
llms.txt:Thank you for contributing to `vexy_json`!
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
--
llms.txt-  <head>
llms.txt-    <meta charset="UTF-8" />
llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:    <title>vexy_json Browser Compatibility Test</title>
llms.txt-    <style>
llms.txt-      body {
llms.txt-        font-family: Arial, sans-serif;
--
llms.txt-    </style>
llms.txt-  </head>
llms.txt-  <body>
llms.txt:    <h1>vexy_json Browser Compatibility Test</h1>
llms.txt-
llms.txt-    <div class="test-section">
llms.txt-      <h2>Browser Information</h2>
--
llms.txt-      <h2>WASM Module Loading</h2>
llms.txt-      <div id="module-loading">
llms.txt-        <div class="loading"></div>
llms.txt:        <span>Loading vexy_json WebAssembly module...</span>
llms.txt-      </div>
llms.txt-      <div id="module-tests"></div>
llms.txt-    </div>
--
llms.txt-    </div>
llms.txt-
llms.txt-    <script type="module">
llms.txt:      let vexy_json = null;
llms.txt-      let wasmModule = null;
llms.txt-
llms.txt-      // Test results storage
--
llms.txt-        }
llms.txt-      }
llms.txt-
llms.txt:      // Load vexy_json module
llms.txt-      async function loadVexyJsonModule() {
llms.txt-        try {
llms.txt-          document.getElementById('module-loading').innerHTML =
llms.txt:            '<div class="loading"></div>Loading vexy_json module...';
llms.txt-
llms.txt-          // Import the module
llms.txt:          const module = await import('../pkg/vexy_json_wasm.js');
llms.txt-          await module.default(); // Initialize WASM
llms.txt:          vexy_json = module;
llms.txt-
llms.txt-          document.getElementById('module-loading').innerHTML =
llms.txt:            '<div class="test-result success">✓ vexy_json module loaded successfully</div>';
llms.txt-
llms.txt-          // Test module functions
llms.txt-          testModuleFunctions();
llms.txt-        } catch (error) {
llms.txt-          document.getElementById(
llms.txt-            'module-loading'
llms.txt:          ).innerHTML = `<div class="test-result error">✗ Failed to load vexy_json module: ${error.message}</div>`;
llms.txt-          addResult(
llms.txt-            'module',
llms.txt-            'Module Loading',
--
llms.txt-      }
llms.txt-
llms.txt-      function testModuleFunctions() {
llms.txt:        if (!vexy_json) return;
llms.txt-
llms.txt-        try {
llms.txt-          // Test version info
llms.txt:          const version = vexy_json.get_version_info();
llms.txt-          addResult(
llms.txt-            'module',
llms.txt-            'get_version_info()',
--
llms.txt-          );
llms.txt-
llms.txt-          // Test parser options
llms.txt:          const options = vexy_json.get_parser_options();
llms.txt-          addResult(
llms.txt-            'module',
llms.txt-            'get_parser_options()',
--
llms.txt-
llms.txt-          // Test basic parsing
llms.txt-          const simpleJson = '{"test": true}';
llms.txt:          const result = vexy_json.parse_json(simpleJson);
llms.txt-          addResult(
llms.txt-            'module',
llms.txt-            'parse_json() basic',
--
llms.txt-            allow_unquoted_keys: true,
llms.txt-            allow_trailing_commas: true,
llms.txt-          };
llms.txt:          const resultWithOptions = vexy_json.parse_json_with_options(
llms.txt-            forgivingJson,
llms.txt-            optionsTest.allow_comments,
llms.txt-            optionsTest.allow_trailing_commas,
--
llms.txt-          );
llms.txt-
llms.txt-          // Test validation
llms.txt:          const isValid = vexy_json.validate_json('{"valid": true}');
llms.txt-          addResult(
llms.txt-            'module',
llms.txt-            'validate_json()',
--
llms.txt-      }
llms.txt-
llms.txt-      function runParsingTests() {
llms.txt:        if (!vexy_json) {
llms.txt-          addResult(
llms.txt-            'parsing',
llms.txt-            'Module Required',
llms.txt-            false,
llms.txt:            'vexy_json module not loaded'
llms.txt-          );
llms.txt-          return;
llms.txt-        }
--
llms.txt-              allow_single_quotes: true,
llms.txt-            };
llms.txt-
llms.txt:            const result = vexy_json.parse_json_with_options(
llms.txt-              test.input,
llms.txt-              options.allow_comments,
llms.txt-              options.allow_trailing_commas,
--
llms.txt-      }
llms.txt-
llms.txt-      function runPerformanceTests() {
llms.txt:        if (!vexy_json) {
llms.txt-          addResult(
llms.txt-            'performance',
llms.txt-            'Module Required',
llms.txt-            false,
llms.txt:            'vexy_json module not loaded'
llms.txt-          );
llms.txt-          return;
llms.txt-        }
--
llms.txt-        Object.entries(testData).forEach(([size, data]) => {
llms.txt-          try {
llms.txt-            const startTime = performance.now();
llms.txt:            const result = vexy_json.parse_json(data);
llms.txt-            const endTime = performance.now();
llms.txt-            const duration = endTime - startTime;
llms.txt-
--
llms.txt-        const input = document.getElementById('test-input').value;
llms.txt-        const resultDiv = document.getElementById('interactive-result');
llms.txt-
llms.txt:        if (!vexy_json) {
llms.txt-          resultDiv.innerHTML =
llms.txt:            '<div class="test-result error">vexy_json module not loaded</div>';
llms.txt-          return;
llms.txt-        }
llms.txt-
--
llms.txt-            newline_as_comma: true,
llms.txt-          };
llms.txt-
llms.txt:          const result = vexy_json.parse_json_with_options(
llms.txt-            input,
llms.txt-            options.allow_comments,
llms.txt-            options.allow_trailing_commas,
--
llms.txt-        downloadDiv.innerHTML = `
llms.txt-                <h2>Test Report</h2>
llms.txt-                <div class="test-result info">
llms.txt:                    All tests completed. <a href="${url}" download="vexy_json-browser-test-${
llms.txt-          results.browser.browser
llms.txt-        }-${Date.now()}.json">Download detailed report</a>
llms.txt-                </div>
--
llms.txt-        parse_json,
llms.txt-        parse_json_with_options,
llms.txt-        get_parser_options,
llms.txt:      } from '../pkg/vexy_json_wasm.js?v=' + Date.now();
llms.txt-
llms.txt-      let log = '';
llms.txt-      function appendLog(message) {
--
llms.txt-    <p id="result">Loading...</p>
llms.txt-
llms.txt-    <script type="module">
llms.txt:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-      async function test() {
llms.txt-        try {
--
llms.txt-      import init, {
llms.txt-        parse_json,
llms.txt-        parse_json_with_options,
llms.txt:      } from '../pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-      let log = '';
llms.txt-      function appendLog(message) {
--
llms.txt-    <pre id="log"></pre>
llms.txt-
llms.txt-    <script type="module">
llms.txt:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-      let log = '';
llms.txt-      function appendLog(message) {
--
llms.txt-      import init, {
llms.txt-        parse_json,
llms.txt-        parse_json_with_options,
llms.txt:      } from '../pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-      let log = '';
llms.txt-      function appendLog(message) {
--
llms.txt-      import init, {
llms.txt-        parse_json_with_options,
llms.txt-        get_parser_options,
llms.txt:      } from '../pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-      let log = '';
llms.txt-      function appendLog(message) {
--
llms.txt-    <pre id="output"></pre>
llms.txt-
llms.txt-    <script type="module">
llms.txt:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-      let initialized = false;
llms.txt-
--
llms.txt-  <head>
llms.txt-    <meta charset="UTF-8" />
llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:    <title>Basic vexy_json WASM Test</title>
llms.txt-    <style>
llms.txt-      body {
llms.txt-        font-family: monospace;
--
llms.txt-    </style>
llms.txt-  </head>
llms.txt-  <body>
llms.txt:    <h1>Basic vexy_json WASM Test</h1>
llms.txt-    <div id="results"></div>
llms.txt-
llms.txt-    <script type="module">
--
llms.txt-          }
llms.txt-          addResult('✅ WebAssembly supported', 'success');
llms.txt-
llms.txt:          addResult('Loading vexy_json module...');
llms.txt:          const vexy_json = await import('../pkg/vexy_json_wasm.js');
llms.txt:          await vexy_json.default();
llms.txt:          addResult('✅ vexy_json module loaded', 'success');
llms.txt-
llms.txt-          // Test basic parsing
llms.txt-          addResult('Testing basic JSON parsing...');
llms.txt:          const result1 = vexy_json.parse_json('{"test": true}');
llms.txt-          addResult(`✅ Basic parsing: ${JSON.stringify(result1)}`, 'success');
llms.txt-
llms.txt-          // Test forgiving features
llms.txt-          addResult('Testing forgiving features...');
llms.txt:          const result2 = vexy_json.parse_json(
llms.txt-            '{key: "value", /* comment */ trailing: "comma",}'
llms.txt-          );
llms.txt-          addResult(
--
llms.txt-
llms.txt-          // Test validation
llms.txt-          addResult('Testing validation...');
llms.txt:          const valid = vexy_json.validate_json('{"valid": true}');
llms.txt:          const invalid = vexy_json.validate_json('{invalid}');
llms.txt-          addResult(
llms.txt-            `✅ Validation: valid=${valid}, invalid=${invalid}`,
llms.txt-            'success'
--
llms.txt-          // Test error handling
llms.txt-          addResult('Testing error handling...');
llms.txt-          try {
llms.txt:            vexy_json.parse_json('{unclosed');
llms.txt-            addResult('❌ Should have thrown error', 'error');
llms.txt-          } catch (error) {
llms.txt-            addResult(`✅ Error handling: ${error.message}`, 'success');
--
llms.txt-    <!-- this_file: docs/test-browsers.html -->
llms.txt-    <meta charset="UTF-8" />
llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:    <title>vexy_json Cross-Browser Test Suite</title>
llms.txt-    <link
llms.txt-      href="https://cdn.jsdelivr.net/npm/daisyui@4.4.19/dist/full.min.css"
llms.txt-      rel="stylesheet"
--
llms.txt-        <div class="hero-content text-center">
llms.txt-          <div class="max-w-md">
llms.txt-            <h1 class="text-3xl font-bold">
llms.txt:              vexy_json Cross-Browser Test Suite
llms.txt-            </h1>
llms.txt-            <p class="py-6">
llms.txt-              Comprehensive testing for WASM compatibility across browsers
--
llms.txt-          name: 'WASM Module Loading',
llms.txt-          test: async () => {
llms.txt-            try {
llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-              return {
llms.txt-                success: true,
llms.txt-                message: 'WASM module loaded successfully',
--
llms.txt-          name: 'Basic JSON Parsing',
llms.txt-          test: async () => {
llms.txt-            try {
llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-              const result = wasmModule.parse_json('{"test": "value"}');
llms.txt-              const parsed = JSON.parse(result);
llms.txt-              if (parsed.test === 'value') {
--
llms.txt-          name: 'Comment Support',
llms.txt-          test: async () => {
llms.txt-            try {
llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-              const input = '{"test": "value" /* comment */}';
llms.txt-              const result = wasmModule.parse_json(input);
llms.txt-              const parsed = JSON.parse(result);
--
llms.txt-          name: 'Unquoted Keys',
llms.txt-          test: async () => {
llms.txt-            try {
llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-              const input = '{test: "value"}';
llms.txt-              const result = wasmModule.parse_json(input);
llms.txt-              const parsed = JSON.parse(result);
--
llms.txt-          name: 'Trailing Commas',
llms.txt-          test: async () => {
llms.txt-            try {
llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-              const input = '{"test": "value",}';
llms.txt-              const result = wasmModule.parse_json(input);
llms.txt-              const parsed = JSON.parse(result);
--
llms.txt-          name: 'Error Handling',
llms.txt-          test: async () => {
llms.txt-            try {
llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-              try {
llms.txt-                wasmModule.parse_json('invalid json {{{');
llms.txt-                return {
--
llms.txt-          name: 'Performance Test',
llms.txt-          test: async () => {
llms.txt-            try {
llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-              const largeJson = JSON.stringify({
llms.txt-                array: Array(1000)
llms.txt-                  .fill()
--
llms.txt-          name: 'Memory Management',
llms.txt-          test: async () => {
llms.txt-            try {
llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-
llms.txt-              // Run multiple parse operations to test memory management
llms.txt-              for (let i = 0; i < 100; i++) {
--
llms.txt-        resultsEl.innerHTML += `<span class="test-fail">Failed: ${failCount}</span>\n`;
llms.txt-
llms.txt-        if (failCount === 0) {
llms.txt:          resultsEl.innerHTML += `\n🎉 All tests passed! vexy_json WASM is compatible with this browser.`;
llms.txt-        } else {
llms.txt-          resultsEl.innerHTML += `\n⚠️ Some tests failed. Check the results above for details.`;
llms.txt-        }
--
llms.txt-  <head>
llms.txt-    <meta charset="UTF-8" />
llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:    <title>vexy_json WASM Test</title>
llms.txt-    <style>
llms.txt-      body {
llms.txt-        font-family: Arial, sans-serif;
--
llms.txt-    </style>
llms.txt-  </head>
llms.txt-  <body>
llms.txt:    <h1>vexy_json WebAssembly Test Page</h1>
llms.txt:    <p>Testing the vexy_json WASM module functionality...</p>
llms.txt-
llms.txt-    <div id="results"></div>
llms.txt-
--
llms.txt-        get_parser_options,
llms.txt-        stringify_value,
llms.txt-        get_version_info,
llms.txt:      } from '../pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-      const resultsDiv = document.getElementById('results');
llms.txt-
--
llms.txt-            addResult(
llms.txt-              'Version Info',
llms.txt-              true,
llms.txt:              `vexy_json v${versionInfo.version}\n${versionInfo.description}`
llms.txt-            );
llms.txt-          } catch (e) {
llms.txt-            addResult('Version Info', false, `Error: ${e.message}`);
--
llms.txt-        parse_json,
llms.txt-        parse_json_with_options,
llms.txt-        get_parser_options,
llms.txt:      } from '../pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-      let log = '';
llms.txt-      function appendLog(message) {
--
llms.txt-nav_order: 2
llms.txt----
llms.txt-
llms.txt:# CLI Enhancements Design for vexy_json
llms.txt-
llms.txt-## Overview
llms.txt-
llms.txt:This document outlines the design for comprehensive CLI enhancements to the vexy_json command-line tool, building on the current basic implementation to provide a powerful and user-friendly JSON processing experience.
llms.txt-
llms.txt-## Current State Analysis
llms.txt-
--
llms.txt-
llms.txt-## Enhancement Goals
llms.txt-
llms.txt:1. **User Experience**: Make vexy_json the go-to CLI tool for JSON processing
llms.txt-2. **Feature Parity**: Match or exceed capabilities of popular JSON tools (jq, jsonlint)
llms.txt-3. **Rust Integration**: Leverage Rust's performance and safety for robust operations
llms.txt-4. **Flexibility**: Support various workflows from simple formatting to complex transformations
--
llms.txt-### Basic Usage (Enhanced)
llms.txt-```bash
llms.txt-# Current (unchanged for compatibility)
llms.txt:echo '{"key": "value"}' | vexy_json
llms.txt-
llms.txt-# New file input/output
llms.txt:vexy_json input.json                    # Read from file, output to stdout
llms.txt:vexy_json input.json -o output.json     # Read from file, write to file
llms.txt:vexy_json -i input.json -o output.json  # Explicit input/output
llms.txt-
llms.txt-# Multiple files
llms.txt:vexy_json file1.json file2.json         # Process multiple files
llms.txt:vexy_json *.json                        # Glob support
llms.txt-```
llms.txt-
llms.txt-### Formatting Options
llms.txt-```bash
llms.txt-# Pretty printing (default when output is terminal)
llms.txt:vexy_json --pretty input.json
llms.txt:vexy_json -p input.json
llms.txt-
llms.txt-# Compact output (default when piped)
llms.txt:vexy_json --compact input.json
llms.txt:vexy_json -c input.json
llms.txt-
llms.txt-# Custom indentation
llms.txt:vexy_json --indent 4 input.json
llms.txt:vexy_json --indent tab input.json
llms.txt-
llms.txt-# Sort keys
llms.txt:vexy_json --sort-keys input.json
llms.txt-```
llms.txt-
llms.txt-### Validation and Analysis
llms.txt-```bash
llms.txt-# Validate only (exit code indicates success/failure)
llms.txt:vexy_json --validate input.json
llms.txt:vexy_json -v input.json
llms.txt-
llms.txt-# Show statistics
llms.txt:vexy_json --stats input.json
llms.txt-# Output: {"objects": 5, "arrays": 3, "strings": 12, ...}
llms.txt-
llms.txt-# Detailed error reporting
llms.txt:vexy_json --strict input.json    # Fail on any forgiving features
llms.txt:vexy_json --explain input.json   # Show what forgiving features were used
llms.txt-```
llms.txt-
llms.txt-### Parser Options Control
llms.txt-```bash
llms.txt-# Disable specific forgiving features
llms.txt:vexy_json --no-comments input.json
llms.txt:vexy_json --no-trailing-commas input.json
llms.txt:vexy_json --no-unquoted-keys input.json
llms.txt:vexy_json --no-single-quotes input.json
llms.txt-
llms.txt-# Enable specific features (when starting from strict mode)
llms.txt:vexy_json --strict --allow-comments input.json
llms.txt-
llms.txt-# Newline as comma mode
llms.txt:vexy_json --newline-as-comma input.json
llms.txt-```
llms.txt-
llms.txt-### Watch Mode
llms.txt-```bash
llms.txt-# Watch file for changes
llms.txt:vexy_json --watch input.json
llms.txt:vexy_json -w input.json
llms.txt-
llms.txt-# Watch with auto-output
llms.txt:vexy_json -w input.json -o output.json
llms.txt-
llms.txt-# Watch directory
llms.txt:vexy_json -w ./config/
llms.txt-```
llms.txt-
llms.txt-### Batch Processing
llms.txt-```bash
llms.txt-# Process all JSON files in directory
llms.txt:vexy_json --batch ./data/ --output-dir ./processed/
llms.txt-
llms.txt-# With transformation
llms.txt:vexy_json --batch ./data/ --pretty --sort-keys -o ./formatted/
llms.txt-
llms.txt-# Parallel processing
llms.txt:vexy_json --parallel ./data/*.json
llms.txt-```
llms.txt-
llms.txt-### Query and Filtering (Future Enhancement)
llms.txt-```bash
llms.txt-# Basic path extraction (jq-like)
llms.txt:vexy_json input.json --get ".users[0].name"
llms.txt-
llms.txt-# Multiple paths
llms.txt:vexy_json input.json --get ".name" --get ".age"
llms.txt-
llms.txt-# Simple filtering
llms.txt:vexy_json input.json --filter ".age > 30"
llms.txt-```
llms.txt-
llms.txt-### Output Control
llms.txt-```bash
llms.txt-# Output to stderr instead of stdout
llms.txt:vexy_json --stderr input.json
llms.txt-
llms.txt-# Silent mode (only exit codes)
llms.txt:vexy_json --silent input.json
llms.txt:vexy_json -s input.json
llms.txt-
llms.txt-# Different output formats
llms.txt:vexy_json --output-format yaml input.json  # Future
llms.txt:vexy_json --output-format toml input.json  # Future
llms.txt-```
llms.txt-
llms.txt-### Advanced Features
llms.txt-```bash
llms.txt-# Diff two JSON files (structural comparison)
llms.txt:vexy_json --diff file1.json file2.json
llms.txt-
llms.txt-# Merge JSON files
llms.txt:vexy_json --merge base.json override.json
llms.txt-
llms.txt-# Schema validation (future)
llms.txt:vexy_json --schema schema.json data.json
llms.txt-
llms.txt-# Performance profiling
llms.txt:vexy_json --profile large-file.json
llms.txt-```
llms.txt-
llms.txt-## Implementation Architecture
--
llms.txt-
llms.txt-## Conclusion
llms.txt-
llms.txt:These CLI enhancements will transform vexy_json from a basic JSON parser into a comprehensive JSON processing toolkit. By focusing on user experience, performance, and flexibility, vexy_json can become the preferred choice for developers working with forgiving JSON formats.
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-nav_order: 1
llms.txt----
llms.txt-
llms.txt:# Python API Design for vexy_json
llms.txt-
llms.txt-## Overview
llms.txt-
llms.txt:This document outlines the design for Python bindings for the vexy_json library, drawing from PyO3 best practices and existing Python JSON parser APIs (json, orjson, ujson).
llms.txt-
llms.txt-## Core Design Principles
llms.txt-
--
llms.txt-### Basic Functions (Similar to json module)
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Basic parsing - similar to json.loads()
llms.txt-def loads(s: str, *, 
--
llms.txt-
llms.txt-```python
llms.txt-class ParserOptions:
llms.txt:    """Configuration options for vexy_json parser."""
llms.txt-    
llms.txt-    def __init__(self, 
llms.txt-                 allow_comments: bool = True,
--
llms.txt-
llms.txt-```python
llms.txt-class VexyJsonError(Exception):
llms.txt:    """Base exception for vexy_json errors."""
llms.txt-    pass
llms.txt-
llms.txt-class ParseError(VexyJsonError):
--
llms.txt-
llms.txt-- **`loads()`** instead of `parse()` for consistency with `json` module
llms.txt-- **Keyword-only arguments** for options to prevent positional confusion
llms.txt:- **Boolean defaults** match vexy_json's forgiving nature
llms.txt-
llms.txt-### 2. Error Handling
llms.txt-
--
llms.txt-- **Standard library compatibility**: `loads()` and `dumps()` work as drop-in replacements
llms.txt-- **orjson inspiration**: Performance-focused design with bytes handling
llms.txt-- **ujson similarity**: Simple API with performance benefits
llms.txt:- **vexy_json extensions**: Forgiving features as the key differentiator
llms.txt-
llms.txt-This design balances Python idioms with the performance benefits of Rust, providing a comprehensive JSON parsing solution that extends beyond standard JSON capabilities.
llms.txt-</document_content>
--
llms.txt-
llms.txt-# Design
llms.txt-
llms.txt:This section contains design documents and architectural decisions for the vexy_json project.
llms.txt-
llms.txt-## Topics
llms.txt-
--
llms.txt-nav_order: 2
llms.txt----
llms.txt-
llms.txt:# Developer Guide for Extending the vexy_json Web Tool
llms.txt-
llms.txt:This guide is for developers who want to contribute to or extend the `vexy_json` web tool. It covers the project structure, build process, and key development considerations.
llms.txt-
llms.txt-## Project Structure
llms.txt-
llms.txt:The `vexy_json` project uses a multi-crate Cargo workspace structure with Jekyll integration for web tools.
llms.txt-
llms.txt-### Workspace Structure
llms.txt-
--
llms.txt-    *   `_config.yml`: Jekyll configuration file.
llms.txt-    *   `tool.html`: Vexy JSON interactive tool (WebAssembly-powered)
llms.txt-    *   `jsonic.html`: Jsonic interactive tool (CDN-powered)
llms.txt:    *   `vexy_json-tool.md`: Jekyll wrapper for Vexy JSON tool
llms.txt-    *   `jsonic-tool.md`: Jekyll wrapper for Jsonic tool
llms.txt-    *   `tool.md`: Tools overview page
llms.txt-    *   `assets/`: Static assets for the web tools.
llms.txt-        *   `css/`: CSS files, including `tool.css` and `enhanced-features.css`.
llms.txt-        *   `js/`: JavaScript files for both tools
llms.txt:    *   `pkg/`: Contains the compiled WebAssembly module (`vexy_json_bg.wasm`, `vexy_json.js`, `vexy_json.d.ts`).
llms.txt-
llms.txt-## Development Environment Setup
llms.txt-
--
llms.txt-
llms.txt-This is the main JavaScript file for the web tool. It handles UI interactions, calls the WASM functions, and updates the display.
llms.txt-
llms.txt:*   **WASM Module Import**: The `pkg/vexy_json_wasm.js` module (generated by `wasm-pack`) is imported here.
llms.txt-*   **Asynchronous Operations**: WASM module loading and initialization are asynchronous. Ensure you `await` the `init()` function.
llms.txt-*   **UI Updates**: Use standard DOM manipulation to update the input/output areas, error messages, and other UI elements.
llms.txt-*   **Event Listeners**: Attach event listeners to buttons, toggles, and text areas to respond to user actions.
--
llms.txt-
llms.txt-### Core Parsing API
llms.txt-```rust
llms.txt:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-
llms.txt-// Simple parsing
llms.txt-let value = parse(r#"{"key": "value"}"#)?;
--
llms.txt-
llms.txt-### Streaming API
llms.txt-```rust
llms.txt:use vexy_json::streaming::StreamingParser;
llms.txt-
llms.txt-let mut parser = StreamingParser::new();
llms.txt-for chunk in file_chunks {
--
llms.txt-
llms.txt-### Parallel Processing API
llms.txt-```rust
llms.txt:use vexy_json::parallel_chunked::{parse_parallel_chunked, ChunkedConfig};
llms.txt-
llms.txt-let config = ChunkedConfig {
llms.txt-    chunk_size: 1024 * 1024, // 1MB chunks
--
llms.txt-
llms.txt-### Plugin System API
llms.txt-```rust
llms.txt:use vexy_json::plugin::{ParserPlugin, PluginRegistry};
llms.txt-
llms.txt-struct CustomPlugin;
llms.txt-impl ParserPlugin for CustomPlugin {
--
llms.txt-```
llms.txt-
llms.txt-### Homebrew (macOS)
llms.txt:- [ ] Update Formula/vexy_json.rb with new version and SHA256
llms.txt:- [ ] Test installation: `brew install --build-from-source ./Formula/vexy_json.rb`
llms.txt-- [ ] Submit PR to homebrew-core (if applicable)
llms.txt-
llms.txt-## Communication
--
llms.txt-
llms.txt-### Binaries
llms.txt-- **macOS**: Universal binary (x86_64 + ARM64)
llms.txt:  - `vexy_json-2.0.0-macos.zip` - Standalone binary
llms.txt:  - `vexy_json-2.0.0-macos.dmg` - Installer with PKG
llms.txt-- **Linux**: 
llms.txt:  - `vexy_json-2.0.0-linux-x86_64.tar.gz` - x86_64 binary
llms.txt:  - `vexy_json-2.0.0-linux-aarch64.tar.gz` - ARM64 binary
llms.txt-- **Windows**:
llms.txt:  - `vexy_json-2.0.0-windows-x86_64.zip` - x86_64 binary
llms.txt-
llms.txt-### WASM Package
llms.txt:- `vexy_json-wasm-2.0.0.tar.gz` - WebAssembly module with TypeScript bindings
llms.txt-
llms.txt-### Source
llms.txt-- Source code archives (automatically created by GitHub)
--
llms.txt-
llms.txt-The macOS installer includes:
llms.txt-- Universal binary supporting Intel and Apple Silicon
llms.txt:- PKG installer that places `vexy_json` in `/usr/local/bin`
llms.txt-- Code-signed DMG (requires Apple Developer certificate)
llms.txt-- Automatic PATH configuration
llms.txt-
--
llms.txt-1. **Verify Installation Methods**:
llms.txt-   ```bash
llms.txt-   # Homebrew (macOS)
llms.txt:   brew update && brew install vexy_json
llms.txt-   
llms.txt-   # Cargo
llms.txt:   cargo install vexy_json-cli
llms.txt-   
llms.txt-   # npm (WASM)
llms.txt:   npm install vexy_json-wasm
llms.txt-   ```
llms.txt-
llms.txt-2. **Update Documentation**:
llms.txt-   - The docs site auto-updates via GitHub Pages
llms.txt:   - Verify at: https://twardoch.github.io/vexy_json/
llms.txt-
llms.txt-3. **Announce Release**:
llms.txt-   - GitHub Discussions
--
llms.txt-The v2.0.0 release will include:
llms.txt-
llms.txt-### Binaries
llms.txt:- `vexy_json-2.0.0-macos.dmg` - macOS installer with PKG
llms.txt:- `vexy_json-2.0.0-macos.zip` - macOS standalone binary
llms.txt:- `vexy_json-2.0.0-linux-x86_64.tar.gz` - Linux x86_64
llms.txt:- `vexy_json-2.0.0-linux-aarch64.tar.gz` - Linux ARM64
llms.txt:- `vexy_json-2.0.0-windows-x86_64.zip` - Windows x86_64
llms.txt:- `vexy_json-wasm-2.0.0.tar.gz` - WASM package
llms.txt-
llms.txt-### Features
llms.txt-- SIMD-accelerated parsing (2-3x faster)
--
llms.txt-
llms.txt-1. Review and commit all changes
llms.txt-2. Run `./scripts/release-github.sh --version 2.0.0`
llms.txt:3. Monitor the release at https://github.com/twardoch/vexy_json/actions
llms.txt-4. Once complete, announce the release
llms.txt-
llms.txt-The repository is now fully prepared for a professional v2.0.0 release with comprehensive CI/CD automation!
--
llms.txt-
llms.txt-## 1. Project Overview
llms.txt-
llms.txt:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-
llms.txt-## 2. Development Status
llms.txt-
--
llms.txt-    -   `src/error/mod.rs`: Implements custom error types for parsing failures.
llms.txt--   `crates/cli`: The command-line interface.
llms.txt-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`.
llms.txt:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments.
llms.txt--   `crates/test-utils`: Utility functions for testing.
llms.txt-
llms.txt-### 3.2. Core Features
--
llms.txt-    -   Benchmarking is performed using `criterion.rs`, with benchmarks defined in the `benches/` directory.
llms.txt--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json` and `jsonic`.
llms.txt:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-
llms.txt-## 4. Development Workflow
llms.txt-
--
llms.txt-nav_order: 4
llms.txt----
llms.txt-
llms.txt:# vexy_json Distribution Build Scripts
llms.txt-
llms.txt:This directory contains robust, maintainable scripts for building vexy_json CLI deliverables for all major platforms:
llms.txt-
llms.txt-- **macOS**: Universal binary, .pkg installer, and .dmg disk image
llms.txt-- **Windows**: .exe in a .zip archive
--
llms.txt-
llms.txt-## Support
llms.txt-
llms.txt:For issues, see the main vexy_json repository or open an issue.
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-
llms.txt-## 1. Project Overview
llms.txt-
llms.txt:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-
llms.txt-## 2. Development Status
llms.txt-
--
llms.txt-    -   `src/error/mod.rs`: Implements custom error types for parsing failures.
llms.txt--   `crates/cli`: The command-line interface.
llms.txt-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`.
llms.txt:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments.
llms.txt--   `crates/test-utils`: Utility functions for testing.
llms.txt-
llms.txt-### 3.2. Core Features
--
llms.txt-    -   Benchmarking is performed using `criterion.rs`, with benchmarks defined in the `benches/` directory.
llms.txt--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json` and `jsonic`.
llms.txt:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-
llms.txt-## 4. Development Workflow
llms.txt-
--
llms.txt-nav_order: 3
llms.txt----
llms.txt-
llms.txt:# Task Implementation Summary - vexy_json WebAssembly & Feature Verification
llms.txt-
llms.txt-## Overview
llms.txt:This document summarizes the implementation and verification of the next tasks from PLAN.md and TODO.md for the vexy_json project.
llms.txt-
llms.txt-## Tasks Completed ✅
llms.txt-
--
llms.txt-- **Browser Compatibility**: Tested in Chrome with automated cross-browser testing framework
llms.txt-- **Test Results**: WebAssembly initialization test passed (44ms duration)
llms.txt-- **File Locations**:
llms.txt:  - WASM files: `docs/pkg/vexy_json_bg.wasm`, `docs/pkg/vexy_json_wasm.js`
llms.txt-  - Test page: `docs/test-wasm.html`
llms.txt-  - Cross-browser test: `scripts/cross-browser-test.js`
llms.txt-
--
llms.txt-```json
llms.txt-{
llms.txt-  // Configuration with comments
llms.txt:  name: 'vexy_json',           // Unquoted key, single quotes
llms.txt-  version: "1.2.4",        /* Version string */
llms.txt-  features: [
llms.txt-    "comments",
--
llms.txt-- `scripts/cross-browser-test.js` - Improved timing and error handling
llms.txt-
llms.txt-### Verified Files:
llms.txt:- `docs/pkg/vexy_json_bg.wasm` - WebAssembly binary
llms.txt:- `docs/pkg/vexy_json_wasm.js` - JavaScript bindings
llms.txt-- `docs/test-wasm.html` - Browser test page
llms.txt-- `docs/tool.html` - Interactive web tool
llms.txt-
--
llms.txt-- ✅ All forgiving JSON features working consistently (100% test coverage)
llms.txt-- ✅ Git-tag-based semver properly implemented (v1.2.4)
llms.txt-
llms.txt:The vexy_json project now has robust WebAssembly support with comprehensive feature verification and proper version management.
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-
llms.txt-# LEAN.md
llms.txt-
llms.txt:## vexy_json: Definitive Lean/Minimalization Checklist & Rationale
llms.txt-
llms.txt:This actionable document is for reducing the vexy_json codebase to the absolutely minimal, efficient, and dependency-free parser crate, suitable for distribution or embedding.
llms.txt-
llms.txt----
llms.txt-### SECTION 1 — **REMOVE ENTIRELY / DEAD CODE**
--
llms.txt-
llms.txt-# REFACTOR.md – Authoring Brief (Revised for Lean & Refactor Principles)
llms.txt-
llms.txt:This document is the canonical, **action-oriented**, **self-contained**, and **phased** roadmap for the vexy_json refactor sprint. It integrates the detailed refactor playbook and quality principles from [`REFACTOR_PROMPT.md`](REFACTOR_PROMPT.md) and the minimalization/dead code removal guidance from [`LEAN.md`](LEAN.md). It is written for a technically strong engineer new to this repository.
llms.txt-
llms.txt----
llms.txt-
llms.txt-## 1. Executive Summary
llms.txt-
llms.txt:The vexy_json codebase is a monolithic Rust crate implementing a forgiving JSON parser, CLI, and WASM module. Its tightly coupled structure, legacy/dead code, and lack of clear boundaries hinder maintainability, performance, and extensibility. This refactor will:
llms.txt-
llms.txt-- Decouple components into a Cargo workspace of focused crates.
llms.txt-- Remove dead/legacy code and minimize dependencies.
--
llms.txt-- Enforce production-grade, review-friendly, and performance-aware practices.
llms.txt-- Improve documentation, developer experience, and CI/CD quality gates.
llms.txt-
llms.txt:Upon completion, vexy_json will be a lean, maintainable, and extensible parser suite, with robust testing, clear architecture, and a minimal core suitable for embedding or distribution.
llms.txt-
llms.txt----
llms.txt-
--
llms.txt-
llms.txt-Refactor into a Cargo workspace with these crates:
llms.txt-
llms.txt:- **vexy_json-core**: Core parser, lexer, value types, errors. No I/O, CLI, or WASM logic.
llms.txt:- **vexy_json-cli**: CLI wrapper, feature-gated.
llms.txt:- **vexy_json-wasm**: WASM bindings, feature-gated.
llms.txt:- **vexy_json-serde**: Serde integration, feature-gated.
llms.txt-- **test-utils**: Shared test helpers.
llms.txt-- **examples/**, **benches/**: Kept for development, excluded from lean/core builds.
llms.txt-
--
llms.txt-## 6. Testing & Quality Gates
llms.txt-
llms.txt-- **Coverage Baseline:** Measure with `cargo-tarpaulin`.
llms.txt:- **Target Coverage:** `vexy_json-core` ≥95%, CLI ≥80%, WASM ≥90%.
llms.txt-- **Testing Pyramid:** Unit, integration, property-based, and performance tests.
llms.txt-- **CI Workflow:** Format, lint, test, coverage, bench, build artifacts.
llms.txt-- **Deliverable Checklist per PR:**
--
llms.txt-
llms.txt-| Week  | Deliverable                                 | Success Metric                                 |
llms.txt-|-------|---------------------------------------------|------------------------------------------------|
llms.txt:| 1-2   | Workspace setup & `vexy_json-core` created      | CI green, core builds, dead code removed.      |
llms.txt-| 3-4   | Lexer refactored, emits spans               | Token struct has span, parser updated.         |
llms.txt-| 5-8   | New parser implemented                      | Property tests pass.                           |
llms.txt-| 9-10  | CLI/WASM migrated to new parser             | All integration tests pass.                    |
--
llms.txt-
llms.txt-# Development
llms.txt-
llms.txt:This section contains documentation for developers working on the vexy_json project.
llms.txt-
llms.txt-## Topics
llms.txt-
--
llms.txt-<document index="121">
llms.txt-<source>docs/drafts/publication-ready.md</source>
llms.txt-<document_content>
llms.txt:# 🚀 vexy_json v1.1.0 - Ready for Publication
llms.txt-
llms.txt-## ✅ Status: READY FOR PUBLICATION
llms.txt-
--
llms.txt-## 📦 Package Details
llms.txt-
llms.txt-- **Version**: 1.1.0
llms.txt:- **Name**: vexy_json
llms.txt-- **Description**: A forgiving JSON parser - Rust port of jsonic
llms.txt:- **Repository**: https://github.com/twardoch/vexy_json
llms.txt-- **License**: MIT OR Apache-2.0
llms.txt-- **Keywords**: json, parser, forgiving, jsonic
llms.txt-- **Categories**: parser-implementations, encoding
--
llms.txt-## 📊 What's Included
llms.txt-
llms.txt-- Core library with all forgiving JSON features
llms.txt:- CLI tool (`vexy_json` binary)
llms.txt-- WebAssembly bindings (optional feature)
llms.txt-- Comprehensive test suite (73 tests)
llms.txt-- Performance benchmarks
--
llms.txt-
llms.txt-**Project Status**: ✅ **CORE DEVELOPMENT COMPLETE**
llms.txt-
llms.txt:All core development goals have been achieved as of January 8, 2025. The vexy_json parser is fully functional with:
llms.txt-- Complete forgiving JSON parsing capabilities
llms.txt-- 100% test suite pass rate
llms.txt-- Jekyll web tool integration
--
llms.txt-- [x] Create repair action tracking and reporting system
llms.txt-
llms.txt-### Implementation Details:
llms.txt:- **Three-tier parsing strategy**: serde_json (fast) → vexy_json (forgiving) → repair (tolerant)
llms.txt-- **Internal repair implementation**: Custom `JsonRepairer` for bracket balancing
llms.txt-- **Enhanced error types**: Added `RepairFailed`, `BracketMismatch`, `UnbalancedBrackets`, `MaxRepairsExceeded`
llms.txt-- **Repair tracking**: `RepairAction` and `RepairType` enums with detailed reporting
--
llms.txt-- [x] Study theoretical foundations (PEG with labeled failures, GLR parsers, etc.)
llms.txt-- [x] Investigate practical heuristics for bracket balancing
llms.txt-- [x] Create comprehensive specification for `json-repair` integration (see issues/106.txt)
llms.txt:- [x] Design fallback chain architecture (fastest → core vexy_json → json-repair)
llms.txt-- [x] Plan implementation strategy with minimal disruption to existing code
llms.txt-
llms.txt-### Research Findings:
--
llms.txt-- Identified `json-repair` crate as viable solution for bracket mismatch handling
llms.txt-- Found multiple approaches: panic-mode recovery, PEG labeled failures, GLR parsing
llms.txt-- Documented strategies from academic research and practical implementations
llms.txt:- Key insight: Three-tier parsing approach (serde_json → vexy_json → json-repair) for optimal performance
llms.txt-
llms.txt-## Recently Completed: Streaming Parser Implementation ✅
llms.txt-
--
llms.txt-
llms.txt-**Status**: ✅ COMPLETED (January 8, 2025)
llms.txt-
llms.txt:Successfully implemented comprehensive Python bindings that make vexy_json available to Python users via PyO3 bindings:
llms.txt-
llms.txt-- **Core API**: Complete Python bindings with `parse()`, `loads()`, `parse_with_options()`, `is_valid()`, `dumps()`
llms.txt-- **File Operations**: Added `load()` and `dump()` functions for file-like objects
--
llms.txt-
llms.txt-**Status**: ✅ COMPLETED (January 8, 2025)
llms.txt-
llms.txt:Successfully implemented comprehensive CLI enhancements that transform vexy_json from a basic parser into a powerful JSON processing tool:
llms.txt-
llms.txt-- **Enhanced CLI Interface**: 15+ new command-line options and flags
llms.txt-- **Advanced Processing**: Watch mode (`--watch`), parallel processing (`--parallel`), batch operations
--
llms.txt-Vexy JSON accepts JSON that would be rejected by standard parsers:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::parse;
llms.txt-
llms.txt-// Comments are allowed
llms.txt-let json = r#"
--
llms.txt-Standardize JSON format for consistent processing:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::normalize;
llms.txt-
llms.txt-let json = r#"{"z": 1, "a": 2, "b": null}"#;
llms.txt-let normalized = normalize(json).unwrap();
--
llms.txt-Improve JSON structure for performance:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::optimize;
llms.txt-
llms.txt-let json = r#"{"count": 42.0, "price": 19.0}"#;
llms.txt-let optimized = optimize(&json).unwrap();
--
llms.txt-Automatically fix common JSON issues:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::repair::JsonRepairer;
llms.txt-
llms.txt-let mut repairer = JsonRepairer::new(10);
llms.txt-let broken = r#"{"key": "value", "missing": "quote}"#;
--
llms.txt-Process large JSON files efficiently:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::streaming::parse_streaming;
llms.txt-
llms.txt-for value in parse_streaming(reader)? {
llms.txt-    // Process each JSON value as it's parsed
--
llms.txt-Parse multiple JSON documents simultaneously:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::parallel::parse_parallel;
llms.txt-
llms.txt-let results = parse_parallel(&json_strings, ParallelConfig::default())?;
llms.txt-```
--
llms.txt-Full-featured Python bindings with NumPy and Pandas support:
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Standard JSON parsing
llms.txt:data = vexy_json.loads('{"name": "John", "age": 30}')
llms.txt-
llms.txt-# NumPy integration
llms.txt-import numpy as np
llms.txt:array = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-
llms.txt-# Pandas integration
llms.txt-import pandas as pd
llms.txt:df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
llms.txt-
llms.txt-# Streaming support
llms.txt:with vexy_json.StreamingParser() as parser:
llms.txt-    for item in parser.parse_stream(file_handle):
llms.txt-        process(item)
llms.txt-```
--
llms.txt-Run Vexy JSON in browsers and JavaScript environments:
llms.txt-
llms.txt-```javascript
llms.txt:import init, { parse } from 'vexy_json-wasm';
llms.txt-
llms.txt-await init();
llms.txt-const result = parse('{"name": "John", age: 30}');
--
llms.txt-### Comprehensive Error Reporting
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::parse;
llms.txt-
llms.txt-match parse(invalid_json) {
llms.txt-    Ok(value) => println!("Parsed: {:?}", value),
--
llms.txt-### Automatic Recovery
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::parser::parse_with_fallback;
llms.txt-
llms.txt-// Tries multiple parsing strategies automatically
llms.txt-let result = parse_with_fallback(input, options);
--
llms.txt-### Repair with Confidence Scoring
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::repair::advanced::AdvancedJsonRepairer;
llms.txt-
llms.txt-let mut repairer = AdvancedJsonRepairer::new();
llms.txt-let (fixed, strategies) = repairer.repair(input)?;
--
llms.txt-Extend Vexy JSON with custom functionality:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::Plugin;
llms.txt-
llms.txt-struct CustomPlugin;
llms.txt-
--
llms.txt-### Schema Validation
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::SchemaValidationPlugin;
llms.txt-
llms.txt-let plugin = SchemaValidationPlugin::new(schema);
llms.txt-// Validates JSON against schema during parsing
--
llms.txt-### Date/Time Parsing
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::DateTimePlugin;
llms.txt-
llms.txt-let plugin = DateTimePlugin::new();
llms.txt-// Automatically parses ISO 8601 date strings
--
llms.txt-### Comment Preservation
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::CommentPreservationPlugin;
llms.txt-
llms.txt-let plugin = CommentPreservationPlugin::new();
llms.txt-// Preserves comments in parsed JSON
--
llms.txt-
llms.txt-# Forgiving Features
llms.txt-
llms.txt:`vexy_json` is a forgiving JSON parser, handling common deviations from strict JSON (RFC 8259). Below are the supported forgiving features, enhanced in v2.0.0 with streaming, parallel processing, and plugin capabilities:
llms.txt-
llms.txt-## Comments
llms.txt-
--
llms.txt-Object keys can be unquoted if they are valid identifiers.
llms.txt-
llms.txt-```json
llms.txt:{ name: "vexy_json", version: 1.0 }
llms.txt-```
llms.txt-
llms.txt-## Trailing Commas
--
llms.txt-
llms.txt-All forgiving features can be disabled for strict RFC 8259 compliance.
llms.txt-
llms.txt:These forgiving features make `vexy_json` a flexible parser for configurations, data files, and other scenarios where strict JSON adherence might be relaxed.
llms.txt-
llms.txt-## New in v2.0.0: Advanced Features
llms.txt-
--
llms.txt-- Linear scalability with core count
llms.txt-
llms.txt-### Plugin Architecture
llms.txt:Extend vexy_json with custom functionality:
llms.txt-- Transform values during parsing
llms.txt-- Add custom validation rules
llms.txt-- Implement domain-specific logic
--
llms.txt-
llms.txt-# Feedback & Support
llms.txt-
llms.txt:We value your feedback and are committed to improving vexy_json based on user experiences. This page explains how to report issues, request features, and get support.
llms.txt-
llms.txt-## 🔧 Web Tool Feedback
llms.txt-
llms.txt:The [vexy_json web tool](tool.html) includes a built-in feedback system that makes it easy to report issues and suggest improvements.
llms.txt-
llms.txt-### How to Use the Feedback System
llms.txt-
--
llms.txt-
llms.txt-## 📋 GitHub Issues
llms.txt-
llms.txt:For detailed bug reports and feature requests, use our [GitHub Issues](https://github.com/twardoch/vexy_json/issues):
llms.txt-
llms.txt-### Bug Reports
llms.txt-
llms.txt:Use the [Bug Report Template](https://github.com/twardoch/vexy_json/issues/new?template=bug_report.md) and include:
llms.txt-
llms.txt-- **Clear description** of the bug
llms.txt-- **Steps to reproduce** the issue
--
llms.txt-
llms.txt-### Feature Requests
llms.txt-
llms.txt:Use the [Feature Request Template](https://github.com/twardoch/vexy_json/issues/new?template=feature_request.md) and include:
llms.txt-
llms.txt-- **Problem description** - What need does this address?
llms.txt-- **Proposed solution** - What would you like to see?
--
llms.txt-
llms.txt-### Performance Issues
llms.txt-
llms.txt:Use the [Performance Issue Template](https://github.com/twardoch/vexy_json/issues/new?template=performance_issue.md) and include:
llms.txt-
llms.txt-- **Performance problem** description
llms.txt-- **Input characteristics** (size, complexity)
--
llms.txt-
llms.txt-## 💬 Community Discussion
llms.txt-
llms.txt:For questions, ideas, and general discussion, use [GitHub Discussions](https://github.com/twardoch/vexy_json/discussions):
llms.txt-
llms.txt-- **Q&A** - Ask questions about usage
llms.txt-- **Ideas** - Share feature ideas and get feedback
llms.txt:- **Show and Tell** - Share how you're using vexy_json
llms.txt-- **General** - Any other discussion
llms.txt-
llms.txt-## 📧 Direct Contact
llms.txt-
llms.txt-For security issues or private matters, you can contact the maintainer directly:
llms.txt-
llms.txt:- **Email**: adam+vexy_json@twardoch.com
llms.txt-- **Security**: Please use responsible disclosure for security issues
llms.txt-
llms.txt-## 🎯 What Makes Good Feedback
--
llms.txt-
llms.txt----
llms.txt-
llms.txt:**Thank you for helping make vexy_json better!** Your feedback drives improvements and helps us build a tool that works well for everyone.
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-nav_order: 1
llms.txt----
llms.txt-
llms.txt:# Welcome to vexy_json v2.0.0
llms.txt-
llms.txt:`vexy_json` is a forgiving JSON parser written in Rust, inspired by the JavaScript library `jsonic`. It provides robust, flexible parsing for both strict and non-standard JSON, supporting features like comments, unquoted keys, trailing commas, implicit arrays/objects, and more. vexy_json is available as a Rust library, CLI tool, and WebAssembly module for browser/Node.js usage.
llms.txt-
llms.txt-## 🚀 New in Version 2.0.0
llms.txt-
--
llms.txt-## Quick Start (Rust)
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-fn main() {
llms.txt-    let data = r#"{ key: 1, /* comment */ arr: [1,2,3,], hex: 0x10 }"#;
--
llms.txt-
llms.txt-## Contributing
llms.txt-
llms.txt:See [Contributing](contributing.md) for how to help improve vexy_json.
llms.txt-
llms.txt:📦 **[Download the latest CLI release](https://github.com/twardoch/vexy_json/releases/latest)** - Get the `vexy_json` command-line interface for your platform.
llms.txt-
llms.txt-## Features
llms.txt-
llms.txt-- **Forgiving Parsing**: Handles comments, trailing commas, unquoted keys, and implicit top-level objects/arrays.
llms.txt-- **Rust Idiomatic API**: Designed with Rust's ownership, borrowing, and error handling principles in mind.
llms.txt-- **Performance**: Optimized for speed and efficiency.
llms.txt:- **Serde Integration**: Seamlessly convert `vexy_json::Value` to and from other data formats using the `serde` framework.
llms.txt:- **WebAssembly (WASM) Bindings**: Use `vexy_json` directly in JavaScript environments.
llms.txt-- **Interactive Web Tool**: Browser-based parser with real-time feedback and sharing capabilities.
llms.txt-- **Compatibility**: Aims for API compatibility with the original `jsonic.js` where appropriate.
llms.txt-
llms.txt-## Getting Started
llms.txt-
llms.txt:To use `vexy_json` in your Rust project, add it to your `Cargo.toml`:
llms.txt-
llms.txt-```toml
llms.txt-[dependencies]
llms.txt:vexy_json = "2.0.0" # Replace with the latest version
llms.txt-```
llms.txt-
llms.txt-Then, you can parse JSON-like strings:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-fn main() {
llms.txt-    let json_str = r#"
--
llms.txt-
llms.txt-## Project Status
llms.txt-
llms.txt:`vexy_json` v2.0.0 is production-ready with comprehensive features including streaming parsing, parallel processing, and a plugin architecture. We welcome contributions to expand the ecosystem!
llms.txt-
llms.txt-## License
llms.txt-
llms.txt:`vexy_json` is distributed under the MIT License. See the [LICENSE](https://github.com/twardoch/vexy_json/blob/main/LICENSE) file for more details.
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
--
llms.txt-1. **Old Naming References**: Only 2 files contain "zzson" - both in documentation (PLAN.md and issue 610.txt)
llms.txt-2. **Python Bindings**: Test file previously used `VexyJSONParser` but was fixed to `VexyJsonParser`
llms.txt-3. **Naming Conventions**: Generally consistent across languages:
llms.txt:   - Rust: `vexy_json-*` (crate names), `VexyJson*` (types)
llms.txt-   - C/C++: `VexyJson*` (types)
llms.txt:   - Python: `vexy_json` (package), `VexyJson*` (classes)
llms.txt-   - JavaScript: `VexyJson*` (classes)
llms.txt-   - Documentation: "Vexy JSON" (with space)
llms.txt-
--
llms.txt-## Implementation Plan
llms.txt-
llms.txt-### Phase 1: jsonic References Removal (Immediate - 2-3 hours)
llms.txt:1. **Rename test files**: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
llms.txt-2. **Update documentation**: Remove "jsonic" from HTML, markdown, and tool descriptions
llms.txt:3. **Clean code references**: Replace "jsonic" with "vexy_json" in comments and variable names
llms.txt-4. **Update configurations**: Clean pyproject.toml and Cargo.toml references
llms.txt-5. **Verify completeness**: Re-run grep to ensure no "jsonic" references remain
llms.txt-
--
llms.txt-1. **Old Naming References**: Only 2 files contain "zzson" - both in documentation (PLAN.md and issue 610.txt)
llms.txt-2. **Python Bindings**: Test file previously used `VexyJSONParser` but was fixed to `VexyJsonParser`
llms.txt-3. **Naming Conventions**: Generally consistent across languages:
llms.txt:   - Rust: `vexy_json-*` (crate names), `VexyJson*` (types)
llms.txt-   - C/C++: `VexyJson*` (types)
llms.txt:   - Python: `vexy_json` (package), `VexyJson*` (classes)
llms.txt-   - JavaScript: `VexyJson*` (classes)
llms.txt-   - Documentation: "Vexy JSON" (with space)
llms.txt-
--
llms.txt-## Implementation Plan
llms.txt-
llms.txt-### Phase 1: jsonic References Removal (Immediate - 2-3 hours)
llms.txt:1. **Rename test files**: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
llms.txt-2. **Update documentation**: Remove "jsonic" from HTML, markdown, and tool descriptions
llms.txt:3. **Clean code references**: Replace "jsonic" with "vexy_json" in comments and variable names
llms.txt-4. **Update configurations**: Clean pyproject.toml and Cargo.toml references
llms.txt-5. **Verify completeness**: Re-run grep to ensure no "jsonic" references remain
llms.txt-
--
llms.txt-1. **Old Naming References**: Only 2 files contain "zzson" - both in documentation (PLAN.md and issue 610.txt)
llms.txt-2. **Python Bindings**: Test file previously used `VexyJSONParser` but was fixed to `VexyJsonParser`
llms.txt-3. **Naming Conventions**: Generally consistent across languages:
llms.txt:   - Rust: `vexy_json-*` (crate names), `VexyJson*` (types)
llms.txt-   - C/C++: `VexyJson*` (types)
llms.txt:   - Python: `vexy_json` (package), `VexyJson*` (classes)
llms.txt-   - JavaScript: `VexyJson*` (classes)
llms.txt-   - Documentation: "Vexy JSON" (with space)
llms.txt-
--
llms.txt-## Implementation Plan
llms.txt-
llms.txt-### Phase 1: jsonic References Removal (Immediate - 2-3 hours)
llms.txt:1. **Rename test files**: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
llms.txt-2. **Update documentation**: Remove "jsonic" from HTML, markdown, and tool descriptions
llms.txt:3. **Clean code references**: Replace "jsonic" with "vexy_json" in comments and variable names
llms.txt-4. **Update configurations**: Clean pyproject.toml and Cargo.toml references
llms.txt-5. **Verify completeness**: Re-run grep to ensure no "jsonic" references remain
llms.txt-
--
llms.txt-1. **Old Naming References**: Only 2 files contain "zzson" - both in documentation (PLAN.md and issue 610.txt)
llms.txt-2. **Python Bindings**: Test file previously used `VexyJSONParser` but was fixed to `VexyJsonParser`
llms.txt-3. **Naming Conventions**: Generally consistent across languages:
llms.txt:   - Rust: `vexy_json-*` (crate names), `VexyJson*` (types)
llms.txt-   - C/C++: `VexyJson*` (types)
llms.txt:   - Python: `vexy_json` (package), `VexyJson*` (classes)
llms.txt-   - JavaScript: `VexyJson*` (classes)
llms.txt-   - Documentation: "Vexy JSON" (with space)
llms.txt-
--
llms.txt-## Implementation Plan
llms.txt-
llms.txt-### Phase 1: jsonic References Removal (Immediate - 2-3 hours)
llms.txt:1. **Rename test files**: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
llms.txt-2. **Update documentation**: Remove "jsonic" from HTML, markdown, and tool descriptions
llms.txt:3. **Clean code references**: Replace "jsonic" with "vexy_json" in comments and variable names
llms.txt-4. **Update configurations**: Clean pyproject.toml and Cargo.toml references
llms.txt-5. **Verify completeness**: Re-run grep to ensure no "jsonic" references remain
llms.txt-
--
llms.txt-
llms.txt-## Phase 1: jsonic References Removal (IMMEDIATE)
llms.txt-
llms.txt:- [ ] Rename test files: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
llms.txt-- [ ] Update documentation: Remove "jsonic" from HTML, markdown files
llms.txt:- [ ] Clean code references: Replace "jsonic" with "vexy_json" in comments/variables
llms.txt-- [ ] Update configurations: Clean pyproject.toml and Cargo.toml references
llms.txt-- [ ] Verify completeness: Re-run grep to ensure no "jsonic" references remain
llms.txt-
--
llms.txt-### Simple Usage
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::repair::JsonRepairer;
llms.txt-
llms.txt-let mut repairer = JsonRepairer::new(10); // Max 10 repairs
llms.txt-let malformed = r#"{"key": "value", "missing": "quote}"#;
--
llms.txt-### Configuration
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::repair::advanced::{AdvancedJsonRepairer, TypeCoercionRules};
llms.txt-
llms.txt-let mut repairer = AdvancedJsonRepairer::new()
llms.txt-    .with_confidence_threshold(0.7)
--
llms.txt-Each repair strategy has a confidence score:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::repair::advanced::RepairConfidence;
llms.txt-
llms.txt-let (fixed, strategies) = repairer.repair(input)?;
llms.txt-
--
llms.txt-### Detailed Repair Tracking
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::parser::parse_with_detailed_repair_tracking;
llms.txt-
llms.txt-let result = parse_with_detailed_repair_tracking(input, options)?;
llms.txt-
--
llms.txt-3. **Repair Tier**: Automatic repair for malformed JSON
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::parser::parse_with_fallback;
llms.txt-
llms.txt-let result = parse_with_fallback(input, options);
llms.txt-// Automatically tries all three tiers
--
llms.txt-### Tracking Repair History
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::repair::advanced::AdvancedJsonRepairer;
llms.txt-
llms.txt-let mut repairer = AdvancedJsonRepairer::new();
llms.txt-
--
llms.txt-### Implementing Custom Repairs
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::repair::advanced::{RepairStrategy, RepairAction, RepairType, RepairConfidence};
llms.txt-
llms.txt-fn create_custom_repair(input: &str) -> Option<RepairStrategy> {
llms.txt-    // Custom logic to detect and fix specific issues
--
llms.txt-### Automatic Repair During Parsing
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::{parse_with_options, ParserOptions};
llms.txt-
llms.txt-let options = ParserOptions {
llms.txt-    enable_repair: true,
--
llms.txt-### Repair-First Parsing
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::parser::parse_with_fallback;
llms.txt-
llms.txt-// Always try repair if normal parsing fails
llms.txt-let result = parse_with_fallback(input, options);
--
llms.txt-### Repair Failures
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::repair::JsonRepairer;
llms.txt-
llms.txt-let mut repairer = JsonRepairer::new(5);
llms.txt-match repairer.repair(input) {
--
llms.txt-nav_order: 10
llms.txt----
llms.txt-
llms.txt:# Migration Guide: vexy_json v2.0.0
llms.txt-
llms.txt:This document provides comprehensive guidance for upgrading to vexy_json v2.0.0 from previous versions.
llms.txt-
llms.txt-## Migrating from v1.x to v2.0.0
llms.txt-
--
llms.txt-
llms.txt-**After (v2.0.0):**
llms.txt-```rust
llms.txt:use vexy_json::StreamingParser;
llms.txt-
llms.txt-let mut parser = StreamingParser::new();
llms.txt-let file = std::fs::File::open("huge.json")?;
--
llms.txt-
llms.txt-**After (v2.0.0):**
llms.txt-```rust
llms.txt:use vexy_json::parse_parallel;
llms.txt-
llms.txt-let results = parse_parallel(json_files); // Automatically uses multiple cores
llms.txt-```
--
llms.txt-   - Some error variants have been renamed for clarity
llms.txt-   - Add explicit imports if you match on specific error types:
llms.txt-   ```rust
llms.txt:   use vexy_json::Error::{UnexpectedChar, InvalidNumber};
llms.txt-   ```
llms.txt-
llms.txt-2. **Feature Flags**
--
llms.txt-
llms.txt-### 📦 Dependency Updates
llms.txt-
llms.txt:If you depend on specific versions of vexy_json's dependencies:
llms.txt-- `serde`: Now requires 1.0.190+
llms.txt-- `wasm-bindgen`: Updated to 0.2.90
llms.txt-- New dependencies: `rayon`, `crossbeam-channel`, `simd-json`
llms.txt-
llms.txt-### 🔧 CLI Changes
llms.txt-
llms.txt:The CLI has been significantly enhanced. Update scripts that use vexy_json:
llms.txt-
llms.txt-**New capabilities:**
llms.txt-```bash
llms.txt-# Watch mode
llms.txt:vexy_json --watch input.json -o output.json
llms.txt-
llms.txt-# Batch processing
llms.txt:vexy_json --batch ./data/ --output-dir ./processed/
llms.txt-
llms.txt-# Pretty printing with options
llms.txt:vexy_json --pretty --sort-keys --indent 4 input.json
llms.txt-```
llms.txt-
llms.txt----
llms.txt-
llms.txt:# Migration Guide: vexy_json v0.2.0
llms.txt-
llms.txt-This section covers the earlier v0.2.0 refactor for historical reference.
llms.txt-
--
llms.txt-
llms.txt-**New exports available:**
llms.txt-```rust
llms.txt:use vexy_json::{ParseResult, Error};
llms.txt-
llms.txt-// New type alias for semantic clarity
llms.txt-fn parse_config() -> ParseResult<Config> {
--
llms.txt-```javascript
llms.txt-// Enhanced error objects with more information
llms.txt-try {
llms.txt:    const result = vexy_json.parse_json(input);
llms.txt-} catch (error) {
llms.txt-    console.log(error.message);        // Error description
llms.txt-    console.log(error.position);       // Character position (if available)
--
llms.txt-### For Rust Users
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse, ParseResult, ParserOptions};
llms.txt-
llms.txt-// Recommended: Use the new ParseResult type for clarity
llms.txt-fn parse_config_file(content: &str) -> ParseResult<Config> {
--
llms.txt-```javascript
llms.txt-// Enhanced error handling with structured error objects
llms.txt-try {
llms.txt:    const result = vexy_json.parse_json(jsonString);
llms.txt-    console.log('Parsed:', result);
llms.txt-} catch (error) {
llms.txt-    console.error(`Parse error at position ${error.position}: ${error.message}`);
--
llms.txt-If you encounter any issues during migration:
llms.txt-
llms.txt-1. **Check compatibility**: Ensure you're not using any undocumented internal APIs
llms.txt:2. **Update imports**: Make sure you're importing from the main `vexy_json` crate
llms.txt-3. **Test thoroughly**: Run your existing test suite to verify behavior
llms.txt-4. **Report issues**: File bug reports with specific reproduction cases
llms.txt-
--
llms.txt-<document_content>
llms.txt-# macOS Packaging Guide
llms.txt-
llms.txt:This guide explains how to package vexy_json for macOS distribution as a `.dmg` containing a `.pkg` installer.
llms.txt-
llms.txt-## Prerequisites
llms.txt-
--
llms.txt-
llms.txt-This script will:
llms.txt-1. Build the release binary using `cargo build --release`
llms.txt:2. Create a `.pkg` installer that installs vexy_json to `/usr/local/bin`
llms.txt-3. Wrap the `.pkg` in a `.dmg` for easy distribution
llms.txt-
llms.txt-## Output
llms.txt-
llms.txt-The script produces:
llms.txt:- `vexy_json-{VERSION}-macos.dmg` - The distributable disk image
llms.txt-- Contains the `.pkg` installer and a README
llms.txt-
llms.txt-## Installation
llms.txt-
llms.txt:Users can install vexy_json by:
llms.txt-1. Opening the `.dmg` file
llms.txt-2. Double-clicking the `.pkg` installer
llms.txt-3. Following the installation wizard
llms.txt:4. The `vexy_json` command will be available in their terminal
llms.txt-
llms.txt-## Code Signing (Optional)
llms.txt-
--
llms.txt-
llms.txt-# Sign the DMG
llms.txt-codesign --sign "Developer ID Application: Your Name (TEAMID)" \
llms.txt:    --timestamp vexy_json-*.dmg
llms.txt-```
llms.txt-
llms.txt-## Notarization (Recommended)
--
llms.txt-```bash
llms.txt-# Submit for notarization
llms.txt-xcrun altool --notarize-app \
llms.txt:    --primary-bundle-id "com.twardoch.vexy_json" \
llms.txt-    --username "your-apple-id@example.com" \
llms.txt-    --password "@keychain:AC_PASSWORD" \
llms.txt:    --file vexy_json-*.dmg
llms.txt-
llms.txt-# Staple the notarization ticket
llms.txt:xcrun stapler staple vexy_json-*.dmg
llms.txt-```
llms.txt-
llms.txt-## Automation
--
llms.txt-Let's create a simple plugin that converts all string values to uppercase:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::ParserPlugin;
llms.txt:use vexy_json_core::ast::Value;
llms.txt:use vexy_json_core::error::Result;
llms.txt-use std::any::Any;
llms.txt-
llms.txt-pub struct UppercasePlugin;
--
llms.txt-A plugin that validates data against business rules:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::error::Error;
llms.txt-
llms.txt-pub struct ValidationPlugin {
llms.txt-    rules: Vec<ValidationRule>,
--
llms.txt-#[cfg(test)]
llms.txt-mod tests {
llms.txt-    use super::*;
llms.txt:    use vexy_json::parse;
llms.txt-
llms.txt-    #[test]
llms.txt-    fn test_uppercase_plugin() {
--
llms.txt-```rust
llms.txt-#[test]
llms.txt-fn test_plugin_integration() {
llms.txt:    use vexy_json::{parse_with_options, ParserOptions};
llms.txt-    
llms.txt-    let json = r#"{"name": "john", "age": 25}"#;
llms.txt-    let mut plugin = UppercasePlugin;
--
llms.txt-    MacroError { macro_name: String },
llms.txt-}
llms.txt-
llms.txt:impl From<PluginError> for vexy_json_core::error::Error {
llms.txt-    fn from(err: PluginError) -> Self {
llms.txt:        vexy_json_core::error::Error::Custom(err.to_string())
llms.txt-    }
llms.txt-}
llms.txt-```
--
llms.txt-
llms.txt-```toml
llms.txt-[package]
llms.txt:name = "vexy_json-plugin-myplugin"
llms.txt-version = "0.1.0"
llms.txt-edition = "2021"
llms.txt-
llms.txt-[dependencies]
llms.txt:vexy_json-core = "2.0"
llms.txt-```
llms.txt-
llms.txt-## Best Practices Summary
--
llms.txt-**Purpose**: Validate JSON against a schema  
llms.txt-**Usage**:
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::plugins::SchemaValidationPlugin;
llms.txt-
llms.txt-let schema = parse(r#"{"type": "object", "properties": {"name": {"type": "string"}}}"#)?;
llms.txt-let validator = SchemaValidationPlugin::new(schema);
--
llms.txt-**Purpose**: Parse ISO 8601 dates and convert them to structured objects  
llms.txt-**Usage**:
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::plugins::DateTimePlugin;
llms.txt-
llms.txt-let mut datetime_plugin = DateTimePlugin::new();
llms.txt-datetime_plugin.transform_value(&mut value, "$")?;
--
llms.txt-**Purpose**: Parse non-standard number formats (hex, binary, underscores)  
llms.txt-**Usage**:
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::plugins::CustomNumberFormatPlugin;
llms.txt-
llms.txt-let mut number_plugin = CustomNumberFormatPlugin::new();
llms.txt-let result = number_plugin.on_number("0xFF", "$")?;
--
llms.txt-**Purpose**: Preserve comments during parsing  
llms.txt-**Usage**:
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::plugins::CommentPreservationPlugin;
llms.txt-
llms.txt-let mut comment_plugin = CommentPreservationPlugin::new();
llms.txt-comment_plugin.add_comment("Description".to_string(), "$.field", false);
--
llms.txt-All plugins must implement the `ParserPlugin` trait:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::ParserPlugin;
llms.txt:use vexy_json_core::ast::Value;
llms.txt:use vexy_json_core::error::Result;
llms.txt-use std::any::Any;
llms.txt-
llms.txt-struct MyPlugin;
--
llms.txt-
llms.txt-#### Direct Integration
llms.txt-```rust
llms.txt:use vexy_json_core::parser::Parser;
llms.txt:use vexy_json_core::plugin::ParserPluginManager;
llms.txt-
llms.txt-let mut manager = ParserPluginManager::new();
llms.txt-manager.register(Box::new(MyPlugin));
--
llms.txt-
llms.txt-#### Parser Options
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-
llms.txt-let options = ParserOptions {
llms.txt-    plugins: vec![Box::new(MyPlugin)],
--
llms.txt-#[cfg(test)]
llms.txt-mod tests {
llms.txt-    use super::*;
llms.txt:    use vexy_json::parse;
llms.txt-
llms.txt-    #[test]
llms.txt-    fn test_my_plugin() {
--
llms.txt-### Basic Usage
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse, ParserOptions};
llms.txt:use vexy_json_core::plugin::plugins::SchemaValidationPlugin;
llms.txt-
llms.txt-// Define a schema
llms.txt-let schema = parse(r#"{
--
llms.txt-The plugin can be integrated into the parsing pipeline:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-
llms.txt-// Create parser options with validation
llms.txt-let options = ParserOptions {
--
llms.txt-#[cfg(test)]
llms.txt-mod tests {
llms.txt-    use super::*;
llms.txt:    use vexy_json::parse;
llms.txt-
llms.txt-    #[test]
llms.txt-    fn test_basic_validation() {
--
llms.txt-nav_order: 6
llms.txt----
llms.txt-
llms.txt:# vexy_json - Forgiving JSON Parser for Python
llms.txt-
llms.txt-A Python library for parsing "forgiving" JSON, which is JSON that includes features like:
llms.txt-
--
llms.txt-- Implicit top-level objects and arrays
llms.txt-- Newlines as comma separators
llms.txt-
llms.txt:This is a Python binding for the Rust [vexy_json](https://github.com/twardoch/vexy_json) library, which is a port of the JavaScript [jsonic](https://github.com/jsonicjs/jsonic) library.
llms.txt-
llms.txt-## Installation
llms.txt-
llms.txt-```bash
llms.txt:pip install vexy_json
llms.txt-```
llms.txt-
llms.txt-## Quick Start
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Parse forgiving JSON
llms.txt:result = vexy_json.parse('''
llms.txt-{
llms.txt-    // This is a comment
llms.txt-    name: "Alice",
--
llms.txt-### Basic Parsing
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Standard JSON
llms.txt:data = vexy_json.parse('{"key": "value"}')
llms.txt-
llms.txt-# Forgiving features
llms.txt:data = vexy_json.parse('''
llms.txt-{
llms.txt-    // Comments are allowed
llms.txt-    unquoted_key: "value",
--
llms.txt-### Custom Options
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Parse with specific options
llms.txt:data = vexy_json.parse_with_options(
llms.txt-    'key: value',
llms.txt-    allow_comments=True,
llms.txt-    allow_trailing_commas=True,
--
llms.txt-### Validation
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Check if JSON is valid
llms.txt:if vexy_json.is_valid('{"valid": true}'):
llms.txt-    print("Valid JSON!")
llms.txt-
llms.txt:if not vexy_json.is_valid('invalid json'):
llms.txt-    print("Invalid JSON!")
llms.txt-```
llms.txt-
llms.txt-### Serialization
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-data = {'name': 'Alice', 'age': 30}
llms.txt-
llms.txt-# Compact output
llms.txt:json_str = vexy_json.dumps(data)
llms.txt-print(json_str)
llms.txt-# Output: {"name":"Alice","age":30}
llms.txt-
llms.txt-# Pretty printed output
llms.txt:json_str = vexy_json.dumps(data, indent=2)
llms.txt-print(json_str)
llms.txt-# Output:
llms.txt-# {
--
llms.txt-
llms.txt-## Comparison with Standard Library
llms.txt-
llms.txt:Unlike Python's built-in `json` module, vexy_json is forgiving and accepts non-standard JSON:
llms.txt-
llms.txt-```python
llms.txt-import json
llms.txt:import vexy_json
llms.txt-
llms.txt-forgiving_json = '''
llms.txt-{
--
llms.txt-    print(f"json module failed: {e}")
llms.txt-
llms.txt-# This works fine
llms.txt:result = vexy_json.parse(forgiving_json)
llms.txt:print(f"vexy_json parsed: {result}")
llms.txt-```
llms.txt-
llms.txt-## Performance
llms.txt-
llms.txt:vexy_json is implemented in Rust and should be competitive with other JSON parsers for most use cases. The forgiving features add minimal overhead.
llms.txt-
llms.txt-## License
llms.txt-
--
llms.txt-## Installation
llms.txt-
llms.txt-```bash
llms.txt:pip install vexy_json
llms.txt-```
llms.txt-
llms.txt-## Basic Usage
--
llms.txt-### Parsing JSON
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Standard JSON parsing
llms.txt:data = vexy_json.loads('{"name": "John", "age": 30}')
llms.txt-print(data)  # {'name': 'John', 'age': 30}
llms.txt-
llms.txt-# Parse with forgiving features
llms.txt:data = vexy_json.loads('''
llms.txt-{
llms.txt-    name: "John",  // Unquoted keys and comments
llms.txt-    age: 30,       // Trailing comma is okay
--
llms.txt-The Vexy JSON Python bindings provide full compatibility with the standard `json` module:
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Drop-in replacement for json.loads()
llms.txt:data = vexy_json.loads('{"key": "value"}')
llms.txt-
llms.txt-# All standard json functions are available
llms.txt:json_str = vexy_json.dumps(data)
llms.txt:json_str = vexy_json.dumps(data, indent=2)
llms.txt-
llms.txt-# File operations
llms.txt-with open('data.json', 'r') as f:
llms.txt:    data = vexy_json.load(f)
llms.txt-
llms.txt-with open('output.json', 'w') as f:
llms.txt:    vexy_json.dump(data, f, indent=2)
llms.txt-```
llms.txt-
llms.txt-## Advanced Parsing Options
--
llms.txt-### Custom Parser Options
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Parse with custom options
llms.txt:data = vexy_json.parse_with_options(
llms.txt-    json_string,
llms.txt-    allow_comments=True,
llms.txt-    allow_trailing_commas=True,
--
llms.txt-### Validation
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Check if JSON is valid
llms.txt:is_valid = vexy_json.is_valid('{"valid": true}')
llms.txt-print(is_valid)  # True
llms.txt-
llms.txt:is_valid = vexy_json.is_valid('invalid json')
llms.txt-print(is_valid)  # False
llms.txt-```
llms.txt-
--
llms.txt-### Streaming Parser with Context Manager
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Parse large JSON files efficiently
llms.txt:with vexy_json.StreamingParser() as parser:
llms.txt-    with open('large_file.json', 'r') as f:
llms.txt-        for item in parser.parse_stream(f):
llms.txt-            process(item)
--
llms.txt-### NDJSON Support
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Parse NDJSON (newline-delimited JSON)
llms.txt:with vexy_json.StreamingParser() as parser:
llms.txt-    with open('data.ndjson', 'r') as f:
llms.txt-        for item in parser.parse_lines(f):
llms.txt-            process(item)
--
llms.txt-### Custom Streaming Options
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Create streaming parser with custom options
llms.txt:parser = vexy_json.StreamingParser(
llms.txt-    allow_comments=True,
llms.txt-    allow_trailing_commas=True,
llms.txt-    enable_repair=True
--
llms.txt-### Direct Array Parsing
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-import numpy as np
llms.txt-
llms.txt-# Parse JSON array directly to NumPy array
llms.txt:arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-print(type(arr))  # <class 'numpy.ndarray'>
llms.txt-print(arr.dtype)  # int64
llms.txt-
llms.txt-# Specify dtype
llms.txt:arr = vexy_json.loads_numpy('[1.1, 2.2, 3.3]', dtype='float32')
llms.txt-print(arr.dtype)  # float32
llms.txt-```
llms.txt-
llms.txt-### Zero-Copy Optimization
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Optimized parsing for numeric data
llms.txt:arr = vexy_json.loads_numpy_zerocopy('[1, 2, 3, 4, 5]', dtype='int64')
llms.txt-# Uses zero-copy when possible for better performance
llms.txt-```
llms.txt-
llms.txt-### Mixed Data Types
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Handle mixed arrays
llms.txt:arr = vexy_json.loads_numpy('[1, 2.5, 3, 4.7]')
llms.txt-print(arr.dtype)  # float64 (automatically promoted)
llms.txt-
llms.txt-# Non-numeric data falls back to object arrays
llms.txt:arr = vexy_json.loads_numpy('["a", "b", "c"]')
llms.txt-print(arr.dtype)  # object
llms.txt-```
llms.txt-
--
llms.txt-### DataFrame Conversion
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-import pandas as pd
llms.txt-
llms.txt-# Parse JSON to DataFrame
llms.txt-json_data = '[{"name": "John", "age": 30}, {"name": "Jane", "age": 25}]'
llms.txt:df = vexy_json.loads_dataframe(json_data)
llms.txt-print(type(df))  # <class 'pandas.core.frame.DataFrame'>
llms.txt-
llms.txt-# Specify orientation
llms.txt:df = vexy_json.loads_dataframe(json_data, orient='records')
llms.txt-```
llms.txt-
llms.txt-## Error Handling
--
llms.txt-### Parse Errors
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-try:
llms.txt:    data = vexy_json.loads('invalid json')
llms.txt-except ValueError as e:
llms.txt-    print(f"Parse error: {e}")
llms.txt-```
--
llms.txt-### Repair Functionality
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Automatic repair of common JSON issues
llms.txt-try:
llms.txt:    data = vexy_json.loads('{"key": "value",}')  # Trailing comma
llms.txt-    print(data)  # Successfully parsed
llms.txt-except ValueError as e:
llms.txt-    print(f"Even repair failed: {e}")
--
llms.txt-### Choosing the Right Function
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# For standard JSON, use loads() for compatibility
llms.txt:data = vexy_json.loads(standard_json)
llms.txt-
llms.txt-# For forgiving JSON, use parse_with_options()
llms.txt:data = vexy_json.parse_with_options(
llms.txt-    forgiving_json,
llms.txt-    allow_comments=True,
llms.txt-    allow_trailing_commas=True
llms.txt-)
llms.txt-
llms.txt-# For numerical data, use NumPy integration
llms.txt:arr = vexy_json.loads_numpy(json_array)
llms.txt-
llms.txt-# For tabular data, use pandas integration
llms.txt:df = vexy_json.loads_dataframe(json_records)
llms.txt-```
llms.txt-
llms.txt-### Memory Efficiency
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Streaming for large files
llms.txt:with vexy_json.StreamingParser() as parser:
llms.txt-    for item in parser.parse_stream(large_file):
llms.txt-        # Process items one at a time
llms.txt-        # Memory usage stays constant
--
llms.txt-
llms.txt-```python
llms.txt-from typing import Any, Dict, List, Optional, Union
llms.txt:import vexy_json
llms.txt-
llms.txt-def process_json(json_str: str) -> Dict[str, Any]:
llms.txt:    return vexy_json.loads(json_str)
llms.txt-
llms.txt-def safe_parse(json_str: str) -> Optional[Dict[str, Any]]:
llms.txt-    try:
llms.txt:        return vexy_json.loads(json_str)
llms.txt-    except ValueError:
llms.txt-        return None
llms.txt-```
--
llms.txt-### Error Handling
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-def safe_parse_json(json_str: str, default=None):
llms.txt-    """Safely parse JSON with fallback."""
llms.txt-    try:
llms.txt:        return vexy_json.loads(json_str)
llms.txt-    except ValueError as e:
llms.txt-        print(f"JSON parse error: {e}")
llms.txt-        return default
--
llms.txt-### Memory Management
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# For large datasets, prefer streaming
llms.txt-def process_large_json(filename):
llms.txt:    with vexy_json.StreamingParser() as parser:
llms.txt-        with open(filename, 'r') as f:
llms.txt-            for item in parser.parse_stream(f):
llms.txt-                yield process_item(item)
--
llms.txt-
llms.txt-```python
llms.txt-import requests
llms.txt:import vexy_json
llms.txt-
llms.txt-response = requests.get('https://api.example.com/data')
llms.txt:data = vexy_json.loads(response.text)
llms.txt-```
llms.txt-
llms.txt-### With FastAPI
llms.txt-
llms.txt-```python
llms.txt-from fastapi import FastAPI
llms.txt:import vexy_json
llms.txt-
llms.txt-app = FastAPI()
llms.txt-
llms.txt-@app.post("/parse-json")
llms.txt-async def parse_json(content: str):
llms.txt-    try:
llms.txt:        data = vexy_json.loads(content)
llms.txt-        return {"success": True, "data": data}
llms.txt-    except ValueError as e:
llms.txt-        return {"success": False, "error": str(e)}
--
llms.txt-
llms.txt-```python
llms.txt-from django.http import JsonResponse
llms.txt:import vexy_json
llms.txt-
llms.txt-def parse_json_view(request):
llms.txt-    try:
llms.txt:        data = vexy_json.loads(request.body)
llms.txt-        # Process data
llms.txt-        return JsonResponse({"success": True})
llms.txt-    except ValueError as e:
--
llms.txt-data = json.loads(json_string)
llms.txt-
llms.txt-# After
llms.txt:import vexy_json
llms.txt:data = vexy_json.loads(json_string)  # Same interface, more forgiving
llms.txt-```
llms.txt-
llms.txt-### Gradual Migration
llms.txt-
llms.txt-```python
llms.txt-import json
llms.txt:import vexy_json
llms.txt-
llms.txt-def parse_json_fallback(json_str):
llms.txt-    """Try standard JSON first, fall back to Vexy JSON."""
llms.txt-    try:
llms.txt-        return json.loads(json_str)
llms.txt-    except json.JSONDecodeError:
llms.txt:        return vexy_json.loads(json_str)  # More forgiving parsing
llms.txt-```
llms.txt-
llms.txt-## Advanced Features
--
llms.txt-### Custom Serialization
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-from dataclasses import dataclass
llms.txt-
llms.txt-@dataclass
--
llms.txt-
llms.txt-# Convert to dict first, then serialize
llms.txt-person = Person("John", 30)
llms.txt:json_str = vexy_json.dumps(person.__dict__)
llms.txt-```
llms.txt-
llms.txt-### Configuration Management
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Parse configuration files with comments
llms.txt-config_str = '''
--
llms.txt-}
llms.txt-'''
llms.txt-
llms.txt:config = vexy_json.loads(config_str)
llms.txt-```
llms.txt-
llms.txt-This comprehensive Python API provides all the power of Vexy JSON with the familiar interface Python developers expect.
--
llms.txt-nav_order: 11
llms.txt----
llms.txt-
llms.txt:# vexy_json v2.0.0 Release Notes
llms.txt-
llms.txt-**🚀 Major Release - January 2025**
llms.txt-
llms.txt:We're thrilled to announce **vexy_json v2.0.0**, a groundbreaking release that transforms vexy_json from a capable JSON parser into a high-performance, enterprise-ready parsing platform. This release introduces streaming APIs, parallel processing, a plugin architecture, and significant performance improvements.
llms.txt-
llms.txt-## 🌟 Highlights
llms.txt-
--
llms.txt-
llms.txt----
llms.txt-
llms.txt:# vexy_json v1.0.0 Release Notes
llms.txt-
llms.txt-**🚀 Stable Release - January 7, 2025**
llms.txt-
llms.txt:We're excited to announce the stable release of **vexy_json v1.0.0**, a production-ready forgiving JSON parser for Rust. This is a complete port of the JavaScript library [jsonic](https://github.com/jsonicjs/jsonic), bringing powerful and flexible JSON parsing capabilities to the Rust ecosystem.
llms.txt-
llms.txt:## 🎉 What is vexy_json?
llms.txt-
llms.txt:vexy_json is a forgiving JSON parser that extends standard JSON with developer-friendly features while maintaining full compatibility with RFC 8259. It allows you to parse relaxed JSON syntax commonly found in configuration files, making JSON more human-readable and maintainable.
llms.txt-
llms.txt-## ✨ Key Features
llms.txt-
--
llms.txt-
llms.txt-```toml
llms.txt-[dependencies]
llms.txt:vexy_json = "1.0.0"
llms.txt-```
llms.txt-
llms.txt-### CLI Tool
llms.txt-
llms.txt-```bash
llms.txt:cargo install vexy_json
llms.txt-```
llms.txt-
llms.txt-## 🎯 Usage Examples
--
llms.txt-### Basic Library Usage
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-// Standard JSON
llms.txt-let data = parse(r#"{"name": "Alice", "age": 30}"#)?;
--
llms.txt-
llms.txt-```bash
llms.txt-# Process configuration files
llms.txt:echo "{debug: true, port: 3000}" | vexy_json
llms.txt-# Output: {"debug":true,"port":3000}
llms.txt-
llms.txt-# Handle files with comments
llms.txt:cat config.jsonc | vexy_json > config.json
llms.txt-
llms.txt-# Pipeline integration
llms.txt:curl api.example.com/config | vexy_json | jq '.database'
llms.txt-```
llms.txt-
llms.txt-### Serde Integration
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::from_str;
llms.txt-use serde::Deserialize;
llms.txt-
llms.txt-#[derive(Deserialize)]
--
llms.txt-
llms.txt-## 🔄 jsonic Compatibility
llms.txt-
llms.txt:vexy_json achieves **complete compatibility** with the jsonic JavaScript library:
llms.txt-
llms.txt-- All 17 jsonic compatibility tests pass
llms.txt-- Identical parsing behavior for all supported features
--
llms.txt-Customize parsing behavior with `ParserOptions`:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-
llms.txt-let mut options = ParserOptions::default();
llms.txt-options.allow_comments = false;           // Disable comments
--
llms.txt-
llms.txt-## 🏗️ Architecture
llms.txt-
llms.txt:vexy_json is built with a clean, modular architecture:
llms.txt-
llms.txt-- **Lexer**: High-performance tokenization with zero-copy strings
llms.txt-- **Parser**: Recursive descent parser with configurable grammar
--
llms.txt-Process large JSON files incrementally without loading them entirely into memory:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{StreamingParser, StreamingEvent};
llms.txt-
llms.txt-let mut parser = StreamingParser::new();
llms.txt-parser.feed(chunk1)?;
--
llms.txt-Automatically process large files using multiple CPU cores:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse_parallel;
llms.txt-
llms.txt-let json_files = vec![file1, file2, file3, file4];
llms.txt-let results = parse_parallel(json_files);
llms.txt-```
llms.txt-
llms.txt-#### Plugin System
llms.txt:Extend vexy_json with custom functionality:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{Plugin, parse_with_plugins};
llms.txt-
llms.txt-struct MyPlugin;
llms.txt-impl Plugin for MyPlugin {
--
llms.txt-Native support for newline-delimited JSON:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::NdJsonParser;
llms.txt-
llms.txt-let mut parser = NdJsonParser::new();
llms.txt-let values = parser.feed(ndjson_content)?;
--
llms.txt-
llms.txt-#### Watch Mode
llms.txt-```bash
llms.txt:vexy_json --watch config.json --output formatted.json
llms.txt-```
llms.txt-
llms.txt-#### Batch Processing
llms.txt-```bash
llms.txt:vexy_json --batch ./data/ --output-dir ./processed/ --parallel
llms.txt-```
llms.txt-
llms.txt-#### Advanced Formatting
llms.txt-```bash
llms.txt:vexy_json input.json --pretty --sort-keys --indent 4
llms.txt-```
llms.txt-
llms.txt-### 🔧 API Improvements
--
llms.txt-**Ready to upgrade?** 
llms.txt-
llms.txt-```bash
llms.txt:cargo add vexy_json@2.0.0
llms.txt-```
llms.txt-
llms.txt-For migration guidance, see our [Migration Guide](migration-guide/).
llms.txt-
llms.txt:**Questions or feedback?** Open an issue on [GitHub](https://github.com/twardoch/vexy_json/issues).
llms.txt-
llms.txt-**Happy parsing! 🦀**
llms.txt-</document_content>
--
llms.txt-<document_content>
llms.txt-# Release Process
llms.txt-
llms.txt:This document describes the automated release process for vexy_json.
llms.txt-
llms.txt-## Overview
llms.txt-
--
llms.txt-
llms.txt-1. Delete the release from GitHub
llms.txt-2. Yank the version from crates.io: `cargo yank --version 1.2.0`
llms.txt:3. Unpublish from npm (within 72 hours): `npm unpublish @vexy_json/vexy_json@1.2.0`
llms.txt-4. Delete the git tag: `git push --delete origin v1.2.0`
llms.txt-
llms.txt-## Troubleshooting
--
llms.txt-
llms.txt-## Overview
llms.txt-
llms.txt:The vexy_json streaming parser provides an event-driven API for parsing JSON incrementally, making it suitable for:
llms.txt-- Processing large JSON files without loading them entirely into memory
llms.txt-- Real-time parsing of JSON data streams
llms.txt-- Parsing newline-delimited JSON (NDJSON) files
--
llms.txt-The main streaming parser that processes input incrementally and emits parsing events.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{StreamingParser, StreamingEvent};
llms.txt-
llms.txt-let mut parser = StreamingParser::new();
llms.txt-parser.feed(r#"{"key": "value"}"#)?;
--
llms.txt-Utility for building Value objects from streaming events:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{StreamingParser, StreamingValueBuilder};
llms.txt-
llms.txt-let mut parser = StreamingParser::new();
llms.txt-let mut builder = StreamingValueBuilder::new();
--
llms.txt-Parser for newline-delimited JSON where each line is a separate JSON value:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::NdJsonParser;
llms.txt-
llms.txt-let mut parser = NdJsonParser::new();
llms.txt-let input = r#"{"id": 1, "name": "Alice"}
--
llms.txt-Event-based NDJSON parser:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::StreamingNdJsonParser;
llms.txt-
llms.txt-let mut parser = StreamingNdJsonParser::new();
llms.txt-parser.feed(r#"{"a": 1}
--
llms.txt-Both streaming parsers support the same options as the regular parser:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{StreamingParser, ParserOptions};
llms.txt-
llms.txt-let options = ParserOptions {
llms.txt-    allow_comments: true,
--
llms.txt-The streaming parser uses the same error types as the regular parser:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{StreamingParser, Error};
llms.txt-
llms.txt-let mut parser = StreamingParser::new();
llms.txt-
--
llms.txt-  <head>
llms.txt-    <meta charset="UTF-8" />
llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:    <title>vexy_json WASM Test</title>
llms.txt-    <style>
llms.txt-      body {
llms.txt-        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
--
llms.txt-    </style>
llms.txt-  </head>
llms.txt-  <body>
llms.txt:    <h1>vexy_json WASM Test Page</h1>
llms.txt-    <div class="version" id="version">Loading WASM module...</div>
llms.txt-
llms.txt-    <div class="container">
--
llms.txt-        get_version_info,
llms.txt-        get_parser_options,
llms.txt-        validate_json,
llms.txt:      } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-      let wasmReady = false;
llms.txt-
--
llms.txt-          // Display version info
llms.txt-          const versionInfo = JSON.parse(get_version_info());
llms.txt-          document.getElementById('version').innerHTML = `
llms.txt:                    <strong>vexy_json WASM</strong> v${versionInfo.version} - ${versionInfo.description}
llms.txt-                `;
llms.txt-          document.getElementById('version').className = 'version';
llms.txt-
--
llms.txt-  <head>
llms.txt-    <meta charset="UTF-8" />
llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:    <title>vexy_json - Forgiving JSON Parser</title>
llms.txt-    <meta
llms.txt-      name="description"
llms.txt:      content="Interactive web tool for parsing forgiving JSON with vexy_json - supports comments, unquoted keys, trailing commas, and more."
llms.txt-    />
llms.txt-
llms.txt-    <!-- Favicon -->
--
llms.txt-    <div class="navbar bg-base-100 shadow-lg">
llms.txt-      <div class="container mx-auto">
llms.txt-        <div class="flex-1">
llms.txt:          <a href="index.html" class="btn btn-ghost text-xl">vexy_json</a>
llms.txt-        </div>
llms.txt-        <div class="flex-none">
llms.txt-          <ul class="menu menu-horizontal px-1">
llms.txt-            <li><a href="index.html">Docs</a></li>
llms.txt-            <li>
llms.txt:              <a href="https://github.com/twardoch/vexy_json" target="_blank"
llms.txt-                >GitHub</a
llms.txt-              >
llms.txt-            </li>
--
llms.txt-    <main class="container mx-auto px-4 py-8">
llms.txt-      <!-- Header -->
llms.txt-      <div class="text-center mb-8">
llms.txt:        <h1 class="text-4xl font-bold mb-4">vexy_json Parser</h1>
llms.txt-        <p class="text-lg text-base-content/70">
llms.txt-          A forgiving JSON parser that supports comments, unquoted keys,
llms.txt-          trailing commas, and more.
--
llms.txt-              >
llms.txt-{
llms.txt-  // You can use comments!
llms.txt:  name: "vexy_json",
llms.txt-  features: [
llms.txt-    'comments',
llms.txt-    'unquoted keys',
--
llms.txt-                class="tab-content bg-base-100 border-base-300 rounded-box p-6"
llms.txt-              >
llms.txt-                <pre class="text-sm"><code>{
llms.txt:  "name": "vexy_json",
llms.txt-  "version": "1.1.0",
llms.txt-  "features": ["forgiving", "fast", "rust"]
llms.txt-}</code></pre>
--
llms.txt-      <div class="grid grid-flow-col gap-4">
llms.txt-        <a href="index.html" class="link link-hover">Documentation</a>
llms.txt-        <a href="api.html" class="link link-hover">API Reference</a>
llms.txt:        <a href="https://github.com/twardoch/vexy_json" class="link link-hover"
llms.txt-          >Source Code</a
llms.txt-        >
llms.txt:        <a href="https://crates.io/crates/vexy_json" class="link link-hover"
llms.txt-          >crates.io</a
llms.txt-        >
llms.txt-      </div>
llms.txt-      <div>
llms.txt:        <p>vexy_json - A forgiving JSON parser. Built with Rust and WebAssembly.</p>
llms.txt-      </div>
llms.txt-    </footer>
llms.txt-
--
llms.txt-- Plugin system support
llms.txt-
llms.txt-<div style="text-align: center; margin: 2em 0;">
llms.txt:  <a href="{{ '/vexy_json-tool/' | relative_url }}" class="btn btn-primary" style="font-size: 1.1em; padding: 0.7em 1.5em; margin: 0.5em;">
llms.txt-    🚀 Vexy JSON Tool
llms.txt-  </a>
llms.txt-  <a href="{{ '/jsonic-tool/' | relative_url }}" class="btn btn-secondary" style="font-size: 1.1em; padding: 0.7em 1.5em; margin: 0.5em;">
--
llms.txt-- ✅ **Dark/light themes** - Choose your preferred color scheme
llms.txt-- ✅ **Mobile responsive** - Works on all devices
llms.txt-
llms.txt:## [∞](#vexy_json-specific-features) Vexy JSON Specific Features
llms.txt-
llms.txt-- Single-line comments (`//` and `#`)
llms.txt-- Multi-line comments (`/* */`)
--
llms.txt-### Basic Usage
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::{normalize, normalize_with_options, NormalizerOptions};
llms.txt-
llms.txt-// Basic normalization with default options
llms.txt-let json = r#"{"b": 2, "a": 1, "c": null}"#;
--
llms.txt-Produces deterministic JSON output suitable for hashing and comparison:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::CanonicalNormalizer;
llms.txt-
llms.txt-let normalizer = CanonicalNormalizer::new();
llms.txt-let canonical = normalizer.normalize(json).unwrap();
--
llms.txt-Removes unnecessary elements and optimizes for size:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::CleanupNormalizer;
llms.txt-
llms.txt-let normalizer = CleanupNormalizer::new();
llms.txt-let cleaned = normalizer.normalize(json).unwrap();
--
llms.txt-### Basic Usage
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::{optimize, optimize_with_options, OptimizerOptions};
llms.txt-
llms.txt-// Basic optimization with default options
llms.txt-let json = r#"{"count": 42.0, "items": [1, 2, 3]}"#;
--
llms.txt-Optimizes for minimal memory usage:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::MemoryOptimizer;
llms.txt-
llms.txt-let optimized = MemoryOptimizer::minimize_memory(&json).unwrap();
llms.txt-```
--
llms.txt-Optimizes for maximum performance:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::PerformanceOptimizer;
llms.txt-
llms.txt-let optimized = PerformanceOptimizer::maximize_performance(&json).unwrap();
llms.txt-```
--
llms.txt-Track optimization effectiveness:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::AstOptimizer;
llms.txt-
llms.txt-let mut optimizer = AstOptimizer::new();
llms.txt-let optimized = optimizer.optimize(&json).unwrap();
--
llms.txt-Combine normalization and optimization:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::{parse, transform::{normalize, optimize}};
llms.txt-
llms.txt-let json = r#"{"z": 1.0, "a": 2.0, "b": null}"#;
llms.txt-let value = parse(json).unwrap();
--
llms.txt-Create custom transformation pipelines:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::{NormalizerOptions, OptimizerOptions};
llms.txt-
llms.txt-fn custom_transform(json: &str) -> Result<String, Error> {
llms.txt-    // First normalize
--
llms.txt-Both normalization and optimization can fail:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::normalize;
llms.txt-
llms.txt-match normalize(json) {
llms.txt-    Ok(normalized) => println!("Success: {}", normalized),
--
llms.txt-### With Parsing
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::{parse_with_options, transform::normalize, ParserOptions};
llms.txt-
llms.txt-let options = ParserOptions {
llms.txt-    allow_comments: true,
--
llms.txt-### With Streaming
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::{streaming::parse_streaming, transform::optimize};
llms.txt-
llms.txt-for value in parse_streaming(reader)? {
llms.txt-    let optimized = optimize(&value?)?;
--
llms.txt-
llms.txt-# Troubleshooting
llms.txt-
llms.txt:This page documents common issues and their solutions when using vexy_json, particularly with WebAssembly bindings.
llms.txt-
llms.txt-## WebAssembly Issues
llms.txt-
--
llms.txt-2. Clear browser cache
llms.txt-3. Add cache-busting query parameters to module imports:
llms.txt-   ```javascript
llms.txt:   import init from './pkg/vexy_json_wasm.js?v=' + Date.now();
llms.txt-   ```
llms.txt-
llms.txt-### WASM Module Loading Failures
--
llms.txt-
llms.txt-1. **Incorrect MIME type**: Ensure your web server serves `.wasm` files with `application/wasm` MIME type
llms.txt-2. **CORS issues**: Serve files from a proper HTTP server, not file:// protocol
llms.txt:3. **Path issues**: Verify the path to `pkg/vexy_json_wasm.js` and `pkg/vexy_json_bg.wasm` is correct
llms.txt-
llms.txt-**Testing Setup**:
llms.txt-Use a simple HTTP server for testing:
--
llms.txt-
llms.txt-If you encounter issues not covered here:
llms.txt-
llms.txt:1. Check the [GitHub Issues](https://github.com/twardoch/vexy_json/issues)
llms.txt-2. Review the [API documentation](api.md)
llms.txt:3. Examine the [test files](https://github.com/twardoch/vexy_json/tree/main/tests) for usage examples
llms.txt-4. Create a new issue with:
llms.txt:   - Your vexy_json version
llms.txt-   - Browser and version
llms.txt-   - Minimal reproduction case
llms.txt-   - Expected vs actual behavior
--
llms.txt-
llms.txt-# Usage Guide v2.0.0
llms.txt-
llms.txt:This guide provides in-depth examples for using `vexy_json` v2.0.0 in Rust and JavaScript/WebAssembly, including the new streaming API, parallel processing, and plugin system.
llms.txt-
llms.txt-## Basic Parsing (Rust)
llms.txt-
llms.txt:The simplest way to use vexy_json is with the `parse` function:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-fn main() {
llms.txt-    let json_data = r#"{ key: "value", num: 123, // comment\n trailing: [1,2,3,], hex: 0xFF }"#;
--
llms.txt-For more control, use `parse_with_options` and configure `ParserOptions`:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-
llms.txt-fn main() {
llms.txt-    let input = "a:1, b:2";
--
llms.txt-See [docs/wasm.md](wasm.md) for full API details.
llms.txt-
llms.txt-```js
llms.txt:import init, { parse_json_with_options } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-await init();
llms.txt-const result = parse_json_with_options('{a:1}', { allow_comments: true });
--
llms.txt-For more control over the parsing behavior, you can use `parse_with_options` and configure `ParserOptions`.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-
llms.txt-fn main() {
llms.txt-    // Example: Strict JSON parsing (disabling all forgiving features)
--
llms.txt-
llms.txt-## Handling Forgiving Features
llms.txt-
llms.txt:`vexy_json` excels at parsing JSON with common relaxations. Here are examples of how it handles them:
llms.txt-
llms.txt-### Comments
llms.txt-
llms.txt-Both single-line (`//`, `#`) and multi-line (`/* ... */`) comments are ignored.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-fn main() {
llms.txt-    let json_with_comments = r#"
--
llms.txt-Trailing commas in arrays and objects are gracefully handled.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-fn main() {
llms.txt-    let json_with_trailing_comma = r#"
--
llms.txt-Object keys do not need to be quoted, as long as they are valid identifiers.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-fn main() {
llms.txt-    let json_unquoted_keys = r#"{ firstName: "John", lastName: "Doe" }"#;
--
llms.txt-You don't need to wrap your entire input in `{}` or `[]` if it's clearly an object or an array.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-fn main() {
llms.txt-    // Implicit object
--
llms.txt-When the `newline_as_comma` option is enabled, newlines can act as implicit comma separators.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-
llms.txt-fn main() {
llms.txt-    let mut options = ParserOptions::default();
--
llms.txt-
llms.txt-## Error Handling
llms.txt-
llms.txt:`vexy_json` returns a `Result<Value, Error>` which allows for robust error handling. You should always check the `Result` to handle potential parsing issues.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-fn main() {
llms.txt-    let invalid_json = r#"{ key: "value }"#; // Missing closing quote
--
llms.txt-### Basic Streaming Example
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{StreamingParser, StreamingEvent};
llms.txt-
llms.txt-fn process_large_file(json_content: &str) -> Result<(), Box<dyn std::error::Error>> {
llms.txt-    let mut parser = StreamingParser::new();
--
llms.txt-Perfect for network streams or reading files in chunks:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::StreamingParser;
llms.txt-use std::io::{BufReader, BufRead};
llms.txt-use std::fs::File;
llms.txt-
--
llms.txt-### Basic Parallel Parsing
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse_parallel, ParallelOptions};
llms.txt-use std::fs;
llms.txt-
llms.txt-fn process_json_files(directory: &str) -> Result<(), Box<dyn std::error::Error>> {
--
llms.txt-### Custom Parallel Options
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse_parallel_with_options, ParallelOptions, ParserOptions};
llms.txt-
llms.txt-let mut parallel_opts = ParallelOptions::default();
llms.txt-parallel_opts.num_threads = Some(8);  // Use 8 threads
--
llms.txt-
llms.txt-## Plugin System (New in v2.0.0)
llms.txt-
llms.txt:Extend vexy_json with custom functionality through plugins.
llms.txt-
llms.txt-### Creating a Custom Plugin
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{Plugin, Value, Error};
llms.txt-use std::collections::HashMap;
llms.txt-
llms.txt-// Plugin to redact sensitive information
--
llms.txt-Process streams of JSON objects separated by newlines.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::NdJsonParser;
llms.txt-
llms.txt-fn process_log_file(log_content: &str) -> Result<(), Box<dyn std::error::Error>> {
llms.txt-    let mut parser = NdJsonParser::new();
--
llms.txt-### Watch Mode
llms.txt-```bash
llms.txt-# Watch a file for changes and reformat on save
llms.txt:vexy_json --watch config.json --output formatted-config.json
llms.txt-
llms.txt-# Watch a directory
llms.txt:vexy_json --watch ./configs/ --output-dir ./formatted/
llms.txt-```
llms.txt-
llms.txt-### Batch Processing
llms.txt-```bash
llms.txt-# Process multiple files in parallel
llms.txt:vexy_json --parallel *.json --output-dir ./processed/
llms.txt-
llms.txt-# Apply transformations during batch processing
llms.txt:vexy_json --batch ./data/ --pretty --sort-keys --output-dir ./formatted/
llms.txt-```
llms.txt-
llms.txt-### Plugin Usage
llms.txt-```bash
llms.txt-# Use built-in plugins
llms.txt:vexy_json input.json --plugin redact-passwords --plugin validate-schema
llms.txt-
llms.txt-# Load custom plugin
llms.txt:vexy_json input.json --plugin-path ./my-plugin.wasm
llms.txt-```
llms.txt-
llms.txt-For more details on the web tool, including its features and how to use it, refer to the [Web Tool documentation](web-tool.md).
--
llms.txt-</document>
llms.txt-
llms.txt-<document index="150">
llms.txt:<source>docs/vexy_json-tool.md</source>
llms.txt-<document_content>
llms.txt----
llms.txt-layout: default
llms.txt-title: "Vexy JSON Parser"
llms.txt-description: "Interactive Vexy JSON parser with comments and flexible syntax"
llms.txt-nav_order: 10
llms.txt:permalink: /vexy_json-tool/
llms.txt----
llms.txt-
llms.txt-# Vexy JSON Interactive Parser
--
llms.txt-nav_order: 2
llms.txt----
llms.txt-
llms.txt:# @twardoch/vexy_json-wasm
llms.txt-
llms.txt:WebAssembly bindings for [vexy_json](https://github.com/twardoch/vexy_json), a forgiving JSON parser that's a Rust port of [jsonic](https://github.com/jsonicjs/jsonic).
llms.txt-
llms.txt-## Installation
llms.txt-
llms.txt-```bash
llms.txt:npm install @twardoch/vexy_json-wasm
llms.txt-```
llms.txt-
llms.txt-## Usage
llms.txt-
llms.txt-```javascript
llms.txt:import init, { parse_js, parse_with_options_js, is_valid, format } from '@twardoch/vexy_json-wasm';
llms.txt-
llms.txt-// Initialize the WASM module
llms.txt-await init();
--
llms.txt-
llms.txt-## Features
llms.txt-
llms.txt:vexy_json supports all standard JSON features plus:
llms.txt-
llms.txt-- **Comments**: Single-line (`//`) and multi-line (`/* */`)
llms.txt-- **Trailing commas**: In objects and arrays
--
llms.txt-
llms.txt-# WebAssembly (WASM) API Reference
llms.txt-
llms.txt:`vexy_json` provides WebAssembly bindings for use in JavaScript environments (browsers, Node.js). The WASM module exposes parsing functions that mirror the Rust API, including forgiving features and strict mode.
llms.txt-
llms.txt-## Usage
llms.txt-
llms.txt-```js
llms.txt:import init, { parse_json, parse_json_with_options } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-await init();
llms.txt-const result = parse_json_with_options('{a:1}', { allow_comments: true });
--
llms.txt-
llms.txt-```toml
llms.txt-[dependencies]
llms.txt:vexy_json = { version = "2.0.0", features = ["wasm"] }
llms.txt-```
llms.txt-
llms.txt-After building your Rust project with the `wasm` feature (e.g., using `wasm-pack`), you can import the generated JavaScript module.
--
llms.txt-**Example:**
llms.txt-
llms.txt-```javascript
llms.txt:import init from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-async function run() {
llms.txt-  await init();
llms.txt:  console.log("vexy_json WASM module loaded.");
llms.txt:  // Now you can use other vexy_json functions
llms.txt-}
llms.txt-run();
llms.txt-```
--
llms.txt-**Example:**
llms.txt-
llms.txt-```javascript
llms.txt:import { parse_json } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-try {
llms.txt-  const result = parse_json(`{
--
llms.txt-**Example:**
llms.txt-
llms.txt-```javascript
llms.txt:import { parse_json_with_options } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-// Strict JSON mode
llms.txt-const strictOptions = {
--
llms.txt-**Example:**
llms.txt-
llms.txt-```javascript
llms.txt:import { validate_json } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-console.log(validate_json('{"key": "value"}')); // true
llms.txt-console.log(validate_json('{key: "value"}'));   // true (unquoted keys allowed by default)
--
llms.txt-**Example:**
llms.txt-
llms.txt-```javascript
llms.txt:import { get_parser_options, parse_json_with_options } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-const defaultOptions = get_parser_options();
llms.txt-console.log(defaultOptions.allowComments); // true
--
llms.txt-**Example:**
llms.txt-
llms.txt-```javascript
llms.txt:import { parse_json, stringify_value } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-const parsed = parse_json('{key: "value", num: 42}');
llms.txt-const jsonString = stringify_value(parsed); // '{"key":"value","num":42}'
--
llms.txt-get_version_info(): object
llms.txt-```
llms.txt-
llms.txt:Returns version and build information for the `vexy_json` library. Useful for debugging and compatibility checking.
llms.txt-
llms.txt-- Returns: A JavaScript object with properties like `version`, `description`, `authors`, `homepage`, `repository`, and `license`.
llms.txt-
llms.txt-**Example:**
llms.txt-
llms.txt-```javascript
llms.txt:import { get_version_info } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-const info = get_version_info();
llms.txt:console.log(`vexy_json v${info.version} - ${info.description}`);
llms.txt-```
llms.txt-
llms.txt-## `ParseError` Class
--
llms.txt-**Example (Error Handling):**
llms.txt-
llms.txt-```javascript
llms.txt:import { parse_json } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-try {
llms.txt-  parse_json('{invalid json');
llms.txt-} catch (e) {
llms.txt-  if (e instanceof Error && e.message.startsWith('Parse Error:')) { // Basic check for ParseError
llms.txt:    console.error(`Caught vexy_json ParseError: ${e.message} at position ${e.position}`);
llms.txt-  } else {
llms.txt-    console.error(`Caught unexpected error: ${e}`);
llms.txt-  }
--
llms.txt-
llms.txt-# Interactive Web Tools
llms.txt-
llms.txt:The vexy_json project provides two interactive web tools for parsing JSON with different libraries, both featuring identical modern interfaces and seamless Jekyll integration.
llms.txt-
llms.txt-## Available Tools
llms.txt-
llms.txt:### [Vexy JSON Parser]({{ '/vexy_json-tool/' | relative_url }})
llms.txt:- **Library**: vexy_json (Rust compiled to WebAssembly)
llms.txt:- **URL**: [https://twardoch.github.io/vexy_json/vexy_json-tool/](https://twardoch.github.io/vexy_json/vexy_json-tool/)
llms.txt:- **Features**: WebAssembly-powered parsing with all vexy_json forgiving features
llms.txt-
llms.txt-### [Jsonic Parser]({{ '/jsonic-tool/' | relative_url }})
llms.txt-- **Library**: jsonic (JavaScript via CDN)
llms.txt:- **URL**: [https://twardoch.github.io/vexy_json/jsonic-tool/](https://twardoch.github.io/vexy_json/jsonic-tool/)
llms.txt-- **Features**: Flexible JSON with object merging and property chains
llms.txt-
llms.txt-### [Tools Overview]({{ '/tools/' | relative_url }})
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_comma_one.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_comma_one_tokens.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_comment_tokens.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_implicit_array.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_lookahead.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_test.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_trailing_comma.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/parser_comparison.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/plugin_examples.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/profile_parser.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/recursive_parser.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/simple.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/streaming_example.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_comment.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_comment_with_value.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_implicit_array.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_implicit_objects.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_inline_comment.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_number_types.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_single_brace.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_single_quote.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_unquoted.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/trace_comment_parse.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-<source>fuzz/Cargo.toml</source>
llms.txt-<document_content>
llms.txt-[package]
llms.txt:name = "vexy_json-core-fuzz"
llms.txt-version = "0.0.0"
llms.txt-publish = false
llms.txt-edition = "2021"
--
llms.txt-libfuzzer-sys = "0.4"
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "../crates/core"
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json]
llms.txt-path = ".."
llms.txt-
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/comments.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/fuzz_target_1.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/json_structure.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/numbers.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/repair.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/streaming.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/strings.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/unicode.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/unquoted_keys.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-<source>grep.txt</source>
llms.txt-<document_content>
llms.txt-src/lib.rs-// this_file: src/lib.rs
llms.txt:src/lib.rs:// Main vexy_json library that re-exports core functionality
llms.txt-src/lib.rs-
llms.txt:src/lib.rs://! # vexy_json
llms.txt-src/lib.rs-//!
llms.txt-src/lib.rs-//! A Rust port of the JavaScript library `jsonic`, a forgiving JSON parser.
llms.txt-src/lib.rs-//!
--
llms.txt-src/lib.rs-//! ## Quick Start
llms.txt-src/lib.rs-//!
llms.txt-src/lib.rs-//! ```rust
llms.txt:src/lib.rs://! use vexy_json::parse;
llms.txt-src/lib.rs-//!
llms.txt-src/lib.rs-//! let result = parse(r#"{"key": "value"}"#).unwrap();
llms.txt-src/lib.rs-//! ```
llms.txt-src/lib.rs-
llms.txt-src/lib.rs-// Re-export core functionality
llms.txt:src/lib.rs:pub use vexy_json_core::{parse, parse_with_options, Error, Lexer, ParserOptions, Result};
llms.txt-src/lib.rs-
llms.txt-src/lib.rs-// Re-export streaming functionality
llms.txt:src/lib.rs:pub use vexy_json_core::{
llms.txt-src/lib.rs-    NdJsonParser, SimpleStreamingLexer, StreamingEvent, StreamingParser, StreamingValueBuilder,
llms.txt-src/lib.rs-};
llms.txt-src/lib.rs-
llms.txt-src/lib.rs-// Re-export AST types
llms.txt:src/lib.rs:pub use vexy_json_core::ast::{Number, Token, Value};
llms.txt-src/lib.rs-
llms.txt-src/lib.rs-// Re-export error types
llms.txt:src/lib.rs:pub use vexy_json_core::error::{Error as ParseError, Result as ParseResult, Span};
llms.txt-src/lib.rs-
llms.txt-src/lib.rs-// Re-export serde functionality if feature is enabled
llms.txt-src/lib.rs-#[cfg(feature = "serde")]
llms.txt:src/lib.rs:pub use vexy_json_serde::*;
llms.txt---
llms.txt-Cargo.toml-
llms.txt-Cargo.toml-
llms.txt-Cargo.toml-[package]
llms.txt:Cargo.toml:name = "vexy_json"
llms.txt-Cargo.toml-version = "2.2.3"
llms.txt-Cargo.toml-edition = "2021"
llms.txt-Cargo.toml-description = "A Rust port of the JavaScript library jsonic, a forgiving JSON parser"
llms.txt-Cargo.toml-license = "MIT OR Apache-2.0"
llms.txt:Cargo.toml:repository = "https://github.com/twardoch/pub/vexy_json"
llms.txt:Cargo.toml:homepage = "https://github.com/twardoch/pub/vexy_json"
llms.txt-Cargo.toml-keywords = [ "json", "parser", "jsonic", "forgiving", "relaxed" ]
llms.txt-Cargo.toml-categories = [ "parsing", "data-structures", "web-programming" ]
llms.txt-Cargo.toml-
llms.txt-Cargo.toml-
llms.txt:Cargo.toml:[dependencies.vexy_json-core]
llms.txt-Cargo.toml-path = "crates/core"
llms.txt-Cargo.toml-
llms.txt-Cargo.toml-
llms.txt:Cargo.toml:[dependencies.vexy_json-serde]
llms.txt-Cargo.toml-path = "crates/serde"
llms.txt-Cargo.toml-optional = true
llms.txt-Cargo.toml-
llms.txt-Cargo.toml-
llms.txt-Cargo.toml-[features]
llms.txt-Cargo.toml-default = [ "serde" ]
llms.txt:Cargo.toml:serde = [ "vexy_json-serde" ]
llms.txt-Cargo.toml-
llms.txt-Cargo.toml-
llms.txt-Cargo.toml-[dev-dependencies]
--
llms.txt-VERSIONING.md-- `/docs/pkg/package.json` - For web distribution
llms.txt-VERSIONING.md-
llms.txt-VERSIONING.md-### Other Files
llms.txt:VERSIONING.md:- `/Formula/vexy_json.rb` - Homebrew formula (releases only)
llms.txt-VERSIONING.md-- CLI `--version` output
llms.txt-VERSIONING.md-- API version info methods
llms.txt-VERSIONING.md-
--
llms.txt-GEMINI.md-
llms.txt-GEMINI.md-## 1. Project Overview
llms.txt-GEMINI.md-
llms.txt:GEMINI.md:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-GEMINI.md-
llms.txt-GEMINI.md-## 2. Development Status
llms.txt-GEMINI.md-
--
llms.txt-GEMINI.md-    -   `src/error/mod.rs`: Implements custom error types for parsing failures.
llms.txt-GEMINI.md--   `crates/cli`: The command-line interface.
llms.txt-GEMINI.md-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:GEMINI.md:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`.
llms.txt:GEMINI.md:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments.
llms.txt-GEMINI.md--   `crates/test-utils`: Utility functions for testing.
llms.txt-GEMINI.md-
llms.txt-GEMINI.md-### 3.2. Core Features
--
llms.txt-GEMINI.md-    -   Benchmarking is performed using `criterion.rs`, with benchmarks defined in the `benches/` directory.
llms.txt-GEMINI.md--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt-GEMINI.md--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json` and `jsonic`.
llms.txt:GEMINI.md:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-GEMINI.md-
llms.txt-GEMINI.md-## 4. Development Workflow
llms.txt-GEMINI.md-
llms.txt---
llms.txt:debug_lexer_test.rs:use vexy_json_core::lexer::{FastLexer, JsonLexer, LexerConfig, LexerMode};
llms.txt-debug_lexer_test.rs-
llms.txt-debug_lexer_test.rs-fn main() {
llms.txt-debug_lexer_test.rs-    let input = "a:#comment";
--
llms.txt-debug_lexer_test.rs-                let text = &input[span.start..span.end];
llms.txt-debug_lexer_test.rs-                println!("Token: {:?}, Span: {:?}, Text: '{}'", token, span, text);
llms.txt-debug_lexer_test.rs-                
llms.txt:debug_lexer_test.rs:                if matches!(token, vexy_json_core::ast::Token::Eof) {
llms.txt-debug_lexer_test.rs-                    break;
llms.txt-debug_lexer_test.rs-                }
llms.txt-debug_lexer_test.rs-            }
llms.txt---
llms.txt:debug_test3.rs:use vexy_json::parse;
llms.txt-debug_test3.rs-
llms.txt-debug_test3.rs-fn main() {
llms.txt-debug_test3.rs-    let input = "a:#comment\nb:2";
llms.txt---
llms.txt:crates/c-api/src/lib.rs://! C API for the vexy_json JSON parser.
llms.txt-crates/c-api/src/lib.rs-//!
llms.txt-crates/c-api/src/lib.rs-//! This crate provides a C-compatible API that can be used from C/C++
llms.txt-crates/c-api/src/lib.rs-//! applications and for creating language bindings.
--
llms.txt-crates/c-api/src/lib.rs-use libc::{c_char, size_t};
llms.txt-crates/c-api/src/lib.rs-use std::ffi::{CStr, CString};
llms.txt-crates/c-api/src/lib.rs-use std::ptr;
llms.txt:crates/c-api/src/lib.rs:use vexy_json_core::ast::Value;
llms.txt:crates/c-api/src/lib.rs:use vexy_json_core::{parse, parse_with_options, ParserOptions};
llms.txt-crates/c-api/src/lib.rs-
llms.txt:crates/c-api/src/lib.rs:/// Parser options for configuring vexy_json behavior
llms.txt-crates/c-api/src/lib.rs-#[repr(C)]
llms.txt-crates/c-api/src/lib.rs-pub struct VexyJsonParserOptions {
llms.txt-crates/c-api/src/lib.rs-    pub allow_comments: bool,
--
llms.txt-crates/c-api/src/lib.rs-    options: ParserOptions,
llms.txt-crates/c-api/src/lib.rs-}
llms.txt-crates/c-api/src/lib.rs-
llms.txt:crates/c-api/src/lib.rs:/// Get the version of the vexy_json library
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_version() -> *const c_char {
llms.txt-crates/c-api/src/lib.rs-    static VERSION: &str = concat!(env!("CARGO_PKG_VERSION"), "\0");
llms.txt-crates/c-api/src/lib.rs-    VERSION.as_ptr() as *const c_char
llms.txt-crates/c-api/src/lib.rs-}
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Parse JSON with default options
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parse(input: *const c_char) -> VexyJsonParseResult {
llms.txt-crates/c-api/src/lib.rs-    if input.is_null() {
llms.txt-crates/c-api/src/lib.rs-        return VexyJsonParseResult {
llms.txt-crates/c-api/src/lib.rs-            json: ptr::null_mut(),
--
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Parse JSON with custom options
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parse_with_options(
llms.txt-crates/c-api/src/lib.rs-    input: *const c_char,
llms.txt-crates/c-api/src/lib.rs-    options: *const VexyJsonParserOptions,
llms.txt-crates/c-api/src/lib.rs-) -> VexyJsonParseResult {
--
llms.txt-crates/c-api/src/lib.rs-    }
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-    if options.is_null() {
llms.txt:crates/c-api/src/lib.rs:        return vexy_json_parse(input);
llms.txt-crates/c-api/src/lib.rs-    }
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-    let input_str = unsafe {
--
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Parse JSON and get detailed information including repairs
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parse_detailed(
llms.txt-crates/c-api/src/lib.rs-    input: *const c_char,
llms.txt-crates/c-api/src/lib.rs-    options: *const VexyJsonParserOptions,
llms.txt-crates/c-api/src/lib.rs-) -> VexyJsonDetailedResult {
llms.txt-crates/c-api/src/lib.rs-    // For now, we'll implement this as a simple parse without repair tracking
llms.txt-crates/c-api/src/lib.rs-    // TODO: Implement actual repair tracking
llms.txt-crates/c-api/src/lib.rs-    let result = if options.is_null() {
llms.txt:crates/c-api/src/lib.rs:        vexy_json_parse(input)
llms.txt-crates/c-api/src/lib.rs-    } else {
llms.txt:crates/c-api/src/lib.rs:        vexy_json_parse_with_options(input, options)
llms.txt-crates/c-api/src/lib.rs-    };
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-    VexyJsonDetailedResult {
--
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Create a new parser instance
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parser_new(
llms.txt-crates/c-api/src/lib.rs-    options: *const VexyJsonParserOptions,
llms.txt-crates/c-api/src/lib.rs-) -> *mut VexyJsonParser {
llms.txt-crates/c-api/src/lib.rs-    let rust_options = if options.is_null() {
--
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Parse JSON using a parser instance
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parser_parse(
llms.txt-crates/c-api/src/lib.rs-    parser: *mut VexyJsonParser,
llms.txt-crates/c-api/src/lib.rs-    input: *const c_char,
llms.txt-crates/c-api/src/lib.rs-) -> VexyJsonParseResult {
--
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Free a parser instance
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parser_free(parser: *mut VexyJsonParser) {
llms.txt-crates/c-api/src/lib.rs-    if !parser.is_null() {
llms.txt-crates/c-api/src/lib.rs-        unsafe {
llms.txt-crates/c-api/src/lib.rs-            let _ = Box::from_raw(parser);
--
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Free a parse result
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_free_result(result: VexyJsonParseResult) {
llms.txt-crates/c-api/src/lib.rs-    if !result.json.is_null() {
llms.txt-crates/c-api/src/lib.rs-        unsafe {
llms.txt-crates/c-api/src/lib.rs-            let _ = CString::from_raw(result.json);
--
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Free a detailed result
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_free_detailed_result(result: VexyJsonDetailedResult) {
llms.txt-crates/c-api/src/lib.rs-    if !result.json.is_null() {
llms.txt-crates/c-api/src/lib.rs-        unsafe {
llms.txt-crates/c-api/src/lib.rs-            let _ = CString::from_raw(result.json);
--
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Get default parser options
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_default_options() -> VexyJsonParserOptions {
llms.txt-crates/c-api/src/lib.rs-    let rust_options = ParserOptions::default();
llms.txt-crates/c-api/src/lib.rs-    rust_options_to_c(&rust_options)
llms.txt-crates/c-api/src/lib.rs-}
--
llms.txt-PLAN.md-1. **Old Naming References**: Only 2 files contain "zzson" - both in documentation (PLAN.md and issue 610.txt)
llms.txt-PLAN.md-2. **Python Bindings**: Test file previously used `VexyJSONParser` but was fixed to `VexyJsonParser`
llms.txt-PLAN.md-3. **Naming Conventions**: Generally consistent across languages:
llms.txt:PLAN.md:   - Rust: `vexy_json-*` (crate names), `VexyJson*` (types)
llms.txt-PLAN.md-   - C/C++: `VexyJson*` (types)
llms.txt:PLAN.md:   - Python: `vexy_json` (package), `VexyJson*` (classes)
llms.txt-PLAN.md-   - JavaScript: `VexyJson*` (classes)
llms.txt-PLAN.md-   - Documentation: "Vexy JSON" (with space)
llms.txt-PLAN.md-
--
llms.txt-PLAN.md-## Implementation Plan
llms.txt-PLAN.md-
llms.txt-PLAN.md-### Phase 1: jsonic References Removal (Immediate - 2-3 hours)
llms.txt:PLAN.md:1. **Rename test files**: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
llms.txt-PLAN.md-2. **Update documentation**: Remove "jsonic" from HTML, markdown, and tool descriptions
llms.txt:PLAN.md:3. **Clean code references**: Replace "jsonic" with "vexy_json" in comments and variable names
llms.txt-PLAN.md-4. **Update configurations**: Clean pyproject.toml and Cargo.toml references
llms.txt-PLAN.md-5. **Verify completeness**: Re-run grep to ensure no "jsonic" references remain
llms.txt-PLAN.md-
llms.txt---
llms.txt:src/bin/test_strict_comment.rs:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-src/bin/test_strict_comment.rs-
llms.txt-src/bin/test_strict_comment.rs-fn main() {
llms.txt-src/bin/test_strict_comment.rs-    println!("Testing strict parsing of '//comment':");
llms.txt---
llms.txt-build.sh-#!/bin/bash
llms.txt:build.sh:# Master build script for vexy_json project
llms.txt-build.sh-# This script runs all build processes in the correct order
llms.txt-build.sh-
llms.txt-build.sh-set -e
--
llms.txt-build.sh-BLUE='\033[0;34m'
llms.txt-build.sh-NC='\033[0m' # No Color
llms.txt-build.sh-
llms.txt:build.sh:echo -e "${BLUE}🚀 vexy_json Master Build Script${NC}"
llms.txt-build.sh-echo "=============================================="
llms.txt-build.sh-echo
llms.txt-build.sh-
--
llms.txt-build.sh-echo -e "${GREEN}🎉 All build steps completed successfully!${NC}"
llms.txt-build.sh-echo
llms.txt-build.sh-echo -e "${BLUE}Build artifacts:${NC}"
llms.txt:build.sh:echo "  • Rust library: target/release/libvexy_json.rlib"
llms.txt:build.sh:echo "  • CLI binary: target/release/vexy_json"
llms.txt:build.sh:echo "  • WebAssembly: docs/pkg/vexy_json_wasm_bg.wasm"
llms.txt:build.sh:echo "  • Documentation: target/doc/vexy_json/index.html"
llms.txt-build.sh-
llms.txt-build.sh-if [[ "$OSTYPE" == "darwin"* ]]; then
llms.txt:build.sh:    echo "  • macOS installer: vexy_json-${VERSION}-macos.dmg"
llms.txt-build.sh-fi
llms.txt-build.sh-
llms.txt-build.sh-echo
llms.txt---
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h: * @file vexy_json.h
llms.txt:crates/c-api/include/vexy_json.h: * @brief C API for the vexy_json JSON parser
llms.txt:crates/c-api/include/vexy_json.h- *
llms.txt:crates/c-api/include/vexy_json.h: * This header provides a C-compatible API for the vexy_json JSON parser,
llms.txt:crates/c-api/include/vexy_json.h- * allowing integration with C/C++ applications and other language bindings.
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt---
llms.txt:crates/c-api/include/vexy_json.h-#endif
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h: * @brief Parser options for configuring vexy_json behavior
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h-typedef struct VexyJsonParserOptions {
llms.txt:crates/c-api/include/vexy_json.h-    bool allow_comments;
llms.txt---
llms.txt:crates/c-api/include/vexy_json.h-typedef void* VexyJsonParser;
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h: * @brief Get the version of the vexy_json library
llms.txt:crates/c-api/include/vexy_json.h- * @return Version string (do not free)
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:const char* vexy_json_version(void);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Parse JSON with default options
llms.txt:crates/c-api/include/vexy_json.h- * @param input The JSON string to parse
llms.txt:crates/c-api/include/vexy_json.h: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:VexyJsonParseResult vexy_json_parse(const char* input);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Parse JSON with custom options
llms.txt:crates/c-api/include/vexy_json.h- * @param input The JSON string to parse
llms.txt:crates/c-api/include/vexy_json.h- * @param options Parser options
llms.txt:crates/c-api/include/vexy_json.h: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:VexyJsonParseResult vexy_json_parse_with_options(const char* input, const VexyJsonParserOptions* options);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Parse JSON and get detailed information including repairs
llms.txt:crates/c-api/include/vexy_json.h- * @param input The JSON string to parse
llms.txt:crates/c-api/include/vexy_json.h- * @param options Parser options
llms.txt:crates/c-api/include/vexy_json.h: * @return Detailed result (must be freed with vexy_json_free_detailed_result)
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:VexyJsonDetailedResult vexy_json_parse_detailed(const char* input, const VexyJsonParserOptions* options);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Create a new parser instance
llms.txt:crates/c-api/include/vexy_json.h- * @param options Parser options
llms.txt:crates/c-api/include/vexy_json.h: * @return Parser handle (must be freed with vexy_json_parser_free)
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:VexyJsonParser vexy_json_parser_new(const VexyJsonParserOptions* options);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Parse JSON using a parser instance
llms.txt:crates/c-api/include/vexy_json.h- * @param parser Parser handle
llms.txt:crates/c-api/include/vexy_json.h- * @param input The JSON string to parse
llms.txt:crates/c-api/include/vexy_json.h: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:VexyJsonParseResult vexy_json_parser_parse(VexyJsonParser parser, const char* input);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Free a parser instance
llms.txt:crates/c-api/include/vexy_json.h- * @param parser Parser handle
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:void vexy_json_parser_free(VexyJsonParser parser);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Free a parse result
llms.txt:crates/c-api/include/vexy_json.h- * @param result Parse result to free
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:void vexy_json_free_result(VexyJsonParseResult result);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Free a detailed result
llms.txt:crates/c-api/include/vexy_json.h- * @param result Detailed result to free
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:void vexy_json_free_detailed_result(VexyJsonDetailedResult result);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Get default parser options
llms.txt:crates/c-api/include/vexy_json.h- * @return Default options
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:VexyJsonParserOptions vexy_json_default_options(void);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-#ifdef __cplusplus
llms.txt:crates/c-api/include/vexy_json.h-}
llms.txt---
llms.txt-llms.txt-Project Structure:
llms.txt:llms.txt:📁 vexy-json
llms.txt-llms.txt-├── 📁 .github
llms.txt-llms.txt-│   ├── 📁 ISSUE_TEMPLATE
llms.txt-llms.txt-│   │   └── 📄 config.yml
--
llms.txt-llms.txt-│       │   ├── 📄 basic_usage.py
llms.txt-llms.txt-│       │   └── 📄 config_parser.py
llms.txt-llms.txt-│       ├── 📁 src
llms.txt:llms.txt:│       │   ├── 📁 vexy_json
llms.txt-llms.txt-│       │   │   └── 📄 __init__.py
llms.txt-llms.txt-│       │   └── 📄 lib.rs
llms.txt-llms.txt-│       ├── 📁 tests
llms.txt:llms.txt:│       │   └── 📄 test_vexy_json.py
llms.txt-llms.txt-│       ├── 📄 Cargo.toml
llms.txt-llms.txt-│       └── 📄 pyproject.toml
llms.txt-llms.txt-├── 📁 crates
--
llms.txt-llms.txt-│   │   │   ├── 📄 cpp_example.cpp
llms.txt-llms.txt-│   │   │   └── 📄 Makefile
llms.txt-llms.txt-│   │   ├── 📁 include
llms.txt:llms.txt:│   │   │   ├── 📄 vexy_json.h
llms.txt:llms.txt:│   │   │   └── 📄 vexy_json.hpp
llms.txt-llms.txt-│   │   ├── 📁 src
llms.txt-llms.txt-│   │   │   └── 📄 lib.rs
llms.txt-llms.txt-│   │   ├── 📄 build.rs
--
llms.txt-llms.txt-│   │   └── 📄 Cargo.toml
llms.txt-llms.txt-│   ├── 📁 python
llms.txt-llms.txt-│   │   ├── 📁 python
llms.txt:llms.txt:│   │   │   └── 📁 vexy_json
llms.txt-llms.txt-│   │   │       ├── 📄 __init__.py
llms.txt-llms.txt-│   │   │       ├── 📄 __init__.pyi
llms.txt-llms.txt-│   │   │       └── 📄 py.typed
--
llms.txt-llms.txt-│   │   ├── 📁 tests
llms.txt-llms.txt-│   │   │   ├── 📄 test_basic.py
llms.txt-llms.txt-│   │   │   ├── 📄 test_typing.py
llms.txt:llms.txt:│   │   │   └── 📄 test_vexy_json.py
llms.txt-llms.txt-│   │   ├── 📄 build.rs
llms.txt-llms.txt-│   │   ├── 📄 Cargo.toml
llms.txt-llms.txt-│   │   ├── 📄 pyproject.toml
--
llms.txt-llms.txt-│   ├── 📄 test_unquoted.rs
llms.txt-llms.txt-│   └── 📄 trace_comment_parse.rs
llms.txt-llms.txt-├── 📁 Formula
llms.txt:llms.txt:│   └── 📄 vexy_json.rb
llms.txt-llms.txt-├── 📁 fuzz
llms.txt-llms.txt-│   ├── 📁 artifacts
llms.txt-llms.txt-│   │   ├── 📁 json_structure
--
llms.txt-llms.txt-│   │       │       2t
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-0gb56plrh2kbz
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n763yq1-12vfxgx-6
llms.txt-llms.txt-│   │       │       xm00irm40t21l8g7dhpoim
llms.txt-llms.txt-│   │       │       fj
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-0j003oif6icfz
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxtvprx-1nd35yr-d
llms.txt-llms.txt-│   │       │       9ji6mqi8yg4wlj34ej4lm8
llms.txt-llms.txt-│   │       │       e9
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-0lx4z1f7yos98
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n6mrq72-0fa18e3-c
llms.txt-llms.txt-│   │       │       m9vzbp5qok1ca4uzqcf497
llms.txt-llms.txt-│   │       │       x5
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-0wrlmmo5dnbek
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n76a9pd-1m1hclt-e
llms.txt-llms.txt-│   │       │       4ljou82po05kegm0e7h5r7
llms.txt-llms.txt-│   │       │       43
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-110y1f142yh5u
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n6mg0tt-0ioiilt-8
llms.txt-llms.txt-│   │       │       b4okcru8u68qaqncwuvnam
llms.txt-llms.txt-│   │       │       mp
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-13enjyiqbpygv
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lx5z99l-1nx47xh-9
llms.txt-llms.txt-│   │       │       bpslqjnb3g3x5bc3csxjbz
llms.txt-llms.txt-│   │       │       96
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-1qub0bwt8ubsv
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94mpybgyq-1xt47pj-a
llms.txt-llms.txt-│   │       │       avdcqtgp3fnocsv7ziy11i
llms.txt-llms.txt-│   │       │       dm
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-1ubcld57ngxkr
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lx517ix-1o0aw5h-b
llms.txt-llms.txt-│   │       │       s1193etxol4rcw38ilxvn7
llms.txt-llms.txt-│   │       │       qw
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-1x53m5wo2sl7b
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n76adqh-0xsizcj-0
llms.txt-llms.txt-│   │       │       mcyu97sf9ab28i4vn0z1la
llms.txt-llms.txt-│   │       │       ln
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-1y20a1apsue9j
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxuvyx0-1dcbl7k-4
llms.txt-llms.txt-│   │       │       3tamkdbfd5jzhcepen167r
llms.txt-llms.txt-│   │       │       bm
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-20oy8vnx9hq2n
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxsxz1c-1e9y478-9
llms.txt-llms.txt-│   │       │       ecplutrz5b4tntwjlxhsmj
llms.txt-llms.txt-│   │       │       eg
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-26zkm1a7g0dks
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lx5zdp3-1i07583-d
llms.txt-llms.txt-│   │       │       uwa1f0fle6xdpfjo5rbcji
llms.txt-llms.txt-│   │       │       pg
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-2rmhgwlzisa4m
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n762zns-1ti81je-a
llms.txt-llms.txt-│   │       │       wg89ccfo9h3tbzsvo384so
llms.txt-llms.txt-│   │       │       ak
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-2zwpzxwslvbw9
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n763ytb-0efe99v-1
llms.txt-llms.txt-│   │       │       r1tiw6yezq8qclis0ilkh3
llms.txt-llms.txt-│   │       │       ug
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-36afk93hl19yy
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n63fesl-01pdp9z-4
llms.txt-llms.txt-│   │       │       qbdi0l3gjqi8raj4loy1z6
llms.txt-llms.txt-│   │       │       tx
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-3rp5z1e4fxv67
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxw70kq-11j7h2m-8
llms.txt-llms.txt-│   │       │       wd4hnazqc181whhd0pfrmv
llms.txt-llms.txt-│   │       │       8b
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-3v9aggw93jj3i
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n763vp9-14q4b4x-1
llms.txt-llms.txt-│   │       │       evrgph8u5jaeqebhjax4cc
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_c_api-0qqmlo9oes
llms.txt-llms.txt-│   │       │   x21
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n763l73-07ma43d-2
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_c_api-0tpebst6si
llms.txt-llms.txt-│   │       │   qty
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxu9p31-1cup6n3-c
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_c_api-1b3jjubb7l
llms.txt-llms.txt-│   │       │   v0u
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lx5ycgv-188it34-0
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_c_api-34vfbtsvzy
llms.txt-llms.txt-│   │       │   2n2
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n7639u0-1yehl3x-9
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-06xwosag7nk
llms.txt-llms.txt-│   │       │   4l
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94mqoxbcw-0w913ce-1
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-0it0hyr543g
llms.txt-llms.txt-│   │       │   sk
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94mqm90c4-1r9c2i0-3
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-13lamtqz69o
llms.txt-llms.txt-│   │       │   ix
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n62n2co-183pbmi-a
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-14m8olzhd98
llms.txt-llms.txt-│   │       │   dn
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94l5vb4te-0yjeu5h-w
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-230vd4pzxhx
llms.txt-llms.txt-│   │       │   q8
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n75840w-07a8mg6-3
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-28s3d1kj2qm
llms.txt-llms.txt-│   │       │   gp
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxqoha3-0l9368u-d
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-2dsang4gfhd
llms.txt-llms.txt-│   │       │   jk
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxti4rp-0wf02nh-b
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-2gngb8sv4nd
llms.txt-llms.txt-│   │       │   3e
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94mpx62ce-1ot068v-3
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-31nnwuidm0y
llms.txt-llms.txt-│   │       │   2z
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lx2qffr-1f3aoeo-3
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-3sx8xfx8van
llms.txt-llms.txt-│   │       │   qz
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n757mh1-1x6cxga-3
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-3te8417r5nx
llms.txt-llms.txt-│   │       │   q8
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n6lqvqi-0d8cp4l-e
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_serde-0725khmyoc
llms.txt-llms.txt-│   │       │   r0n
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n7637jl-1jklynv-7
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_serde-0vzy8ffsqe
llms.txt-llms.txt-│   │       │   25m
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxsu3qs-0twyynw-2
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_serde-10tlyrhdp7
llms.txt-llms.txt-│   │       │   uib
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n6md1uy-0ngdx6g-4
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_serde-16tavgq2g3
llms.txt-llms.txt-│   │       │   bme
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n63cgyt-1op2xf7-4
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_serde-1c1800ncu9
llms.txt-llms.txt-│   │       │   y45
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lx4ysdh-0n25quq-8
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_serde-2tifbfs3wh
llms.txt-llms.txt-│   │       │   k9i
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxtw59s-0hsitax-0
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_serde-3onukjkuw0
llms.txt-llms.txt-│   │       │   du5
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n761qvm-051morr-3
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_wasm-0efx6y0te05
llms.txt-llms.txt-│   │       │   8o
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n762gyk-00d8736-d
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_wasm-10zshacvya0
llms.txt-llms.txt-│   │       │   2n
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lx5ykol-0prsxya-4
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_wasm-1jdxu4mfpum
llms.txt-llms.txt-│   │       │   ao
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n7642g3-0kxlc4u-2
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       └── 📁 
llms.txt:llms.txt:│   │           vexy_json_wasm-1wktcdolw6z
llms.txt-llms.txt-│   │           ze
llms.txt-llms.txt-│   │           └── 📁 
llms.txt-llms.txt-│   │               s-h94lxvb02b-0cbapxa-9
--
llms.txt-llms.txt-contact_links:
llms.txt-llms.txt-  - about: Check the documentation for usage examples and API reference
llms.txt-llms.txt-    name: � Documentation
llms.txt:llms.txt:    url: https://twardoch.github.io/vexy_json/
llms.txt:llms.txt:  - about: Try vexy_json in your browser with our interactive web tool
llms.txt-llms.txt-    name: � Web Tool
llms.txt:llms.txt:    url: https://twardoch.github.io/vexy_json/tool.html
llms.txt:llms.txt:  - about: Ask questions, share ideas, and discuss vexy_json with the community
llms.txt-llms.txt-    name: � Discussions
llms.txt:llms.txt:    url: https://github.com/twardoch/vexy_json/discussions
llms.txt-llms.txt-  - about: View package information and installation instructions
llms.txt-llms.txt-    name: 📦 crates.io
llms.txt:llms.txt:    url: https://crates.io/crates/vexy_json
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt-llms.txt-Relative File Path: .github/dependabot.yml
--
llms.txt-llms.txt-        run: |
llms.txt-llms.txt-          cd docs
llms.txt-llms.txt-          bundle install
llms.txt:llms.txt:          bundle exec jekyll build --baseurl "/vexy_json"
llms.txt-llms.txt-        env:
llms.txt-llms.txt-          JEKYLL_ENV: production
llms.txt-llms.txt-
--
llms.txt-llms.txt-            ### macOS
llms.txt-llms.txt-            ```bash
llms.txt-llms.txt-            # Using Homebrew
llms.txt:llms.txt:            brew install vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-            # Or download the installer
llms.txt:llms.txt:            # Download vexy_json-${{ steps.get_version.outputs.version }}-macos.dmg below
llms.txt-llms.txt-            ```
llms.txt-llms.txt-
llms.txt-llms.txt-            ### Linux
llms.txt-llms.txt-            ```bash
llms.txt-llms.txt-            # Download and extract
llms.txt:llms.txt:            curl -L https://github.com/twardoch/vexy_json/releases/download/v${{ steps.get_version.outputs.version }}/vexy_json-${{ steps.get_version.outputs.version }}-linux-x86_64.tar.gz | tar xz
llms.txt:llms.txt:            sudo mv vexy_json /usr/local/bin/
llms.txt-llms.txt-            ```
llms.txt-llms.txt-
llms.txt-llms.txt-            ### Windows
llms.txt-llms.txt-            ```powershell
llms.txt:llms.txt:            # Download vexy_json-${{ steps.get_version.outputs.version }}-windows-x86_64.zip below
llms.txt-llms.txt-            # Extract and add to PATH
llms.txt-llms.txt-            ```
llms.txt-llms.txt-
llms.txt-llms.txt-            ### Cargo
llms.txt-llms.txt-            ```bash
llms.txt:llms.txt:            cargo install vexy_json-cli
llms.txt-llms.txt-            ```
llms.txt-llms.txt-
llms.txt-llms.txt-            ## What's Changed
llms.txt-llms.txt-
llms.txt:llms.txt:            See [CHANGELOG.md](https://github.com/twardoch/vexy_json/blob/v${{ steps.get_version.outputs.version }}/CHANGELOG.md) for details.
llms.txt-llms.txt-
llms.txt-llms.txt-            ## Assets
llms.txt-llms.txt-
llms.txt:llms.txt:            - **macOS**: `vexy_json-${{ steps.get_version.outputs.version }}-macos.dmg` - Installer with PKG
llms.txt:llms.txt:            - **macOS**: `vexy_json-${{ steps.get_version.outputs.version }}-macos.zip` - Standalone binary
llms.txt:llms.txt:            - **Linux**: `vexy_json-${{ steps.get_version.outputs.version }}-linux-x86_64.tar.gz` - x86_64 binary
llms.txt:llms.txt:            - **Linux**: `vexy_json-${{ steps.get_version.outputs.version }}-linux-aarch64.tar.gz` - ARM64 binary
llms.txt:llms.txt:            - **Windows**: `vexy_json-${{ steps.get_version.outputs.version }}-windows-x86_64.zip` - x86_64 binary
llms.txt:llms.txt:            - **Source**: `vexy_json-${{ steps.get_version.outputs.version }}.tar.gz` - Source code
llms.txt-llms.txt-
llms.txt-llms.txt-  build-binaries:
llms.txt-llms.txt-    name: Build ${{ matrix.target }}
--
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Build
llms.txt-llms.txt-        run: |
llms.txt:llms.txt:          cargo build --release --target ${{ matrix.target }} --bin vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Package Binary
llms.txt-llms.txt-        shell: bash
llms.txt-llms.txt-        run: |
llms.txt-llms.txt-          cd target/${{ matrix.target }}/release
llms.txt-llms.txt-          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
llms.txt:llms.txt:            7z a ../../../vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip vexy_json.exe
llms.txt-llms.txt-          else
llms.txt:llms.txt:            tar czf ../../../vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz vexy_json
llms.txt-llms.txt-          fi
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Upload Binary
--
llms.txt-llms.txt-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
llms.txt-llms.txt-        with:
llms.txt-llms.txt-          upload_url: ${{ needs.create-release.outputs.upload_url }}
llms.txt:llms.txt:          asset_path: ./vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
llms.txt:llms.txt:          asset_name: vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
llms.txt-llms.txt-          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}
llms.txt-llms.txt-
llms.txt-llms.txt-  build-macos-installer:
--
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Build Universal Binary
llms.txt-llms.txt-        run: |
llms.txt:llms.txt:          cargo build --release --target x86_64-apple-darwin --bin vexy_json
llms.txt:llms.txt:          cargo build --release --target aarch64-apple-darwin --bin vexy_json
llms.txt:llms.txt:          lipo -create -output vexy_json \
llms.txt:llms.txt:            target/x86_64-apple-darwin/release/vexy_json \
llms.txt:llms.txt:            target/aarch64-apple-darwin/release/vexy_json
llms.txt:llms.txt:          chmod +x vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Create macOS ZIP
llms.txt-llms.txt-        run: |
llms.txt:llms.txt:          zip -9 vexy_json-${{ needs.create-release.outputs.version }}-macos.zip vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Create macOS Installer
llms.txt-llms.txt-        run: |
--
llms.txt-llms.txt-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
llms.txt-llms.txt-        with:
llms.txt-llms.txt-          upload_url: ${{ needs.create-release.outputs.upload_url }}
llms.txt:llms.txt:          asset_path: ./vexy_json-${{ needs.create-release.outputs.version }}-macos.zip
llms.txt:llms.txt:          asset_name: vexy_json-${{ needs.create-release.outputs.version }}-macos.zip
llms.txt-llms.txt-          asset_content_type: application/zip
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Upload macOS DMG
--
llms.txt-llms.txt-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
llms.txt-llms.txt-        with:
llms.txt-llms.txt-          upload_url: ${{ needs.create-release.outputs.upload_url }}
llms.txt:llms.txt:          asset_path: ./dist/vexy_json-${{ needs.create-release.outputs.version }}.dmg
llms.txt:llms.txt:          asset_name: vexy_json-${{ needs.create-release.outputs.version }}-macos.dmg
llms.txt-llms.txt-          asset_content_type: application/x-apple-diskimage
llms.txt-llms.txt-
llms.txt-llms.txt-  build-wasm:
--
llms.txt-llms.txt-      - name: Package WASM
llms.txt-llms.txt-        run: |
llms.txt-llms.txt-          cd crates/wasm
llms.txt:llms.txt:          tar czf ../../vexy_json-wasm-${{ needs.create-release.outputs.version }}.tar.gz pkg/
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Upload WASM Package
llms.txt-llms.txt-        uses: actions/upload-release-asset@v1
--
llms.txt-llms.txt-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
llms.txt-llms.txt-        with:
llms.txt-llms.txt-          upload_url: ${{ needs.create-release.outputs.upload_url }}
llms.txt:llms.txt:          asset_path: ./vexy_json-wasm-${{ needs.create-release.outputs.version }}.tar.gz
llms.txt:llms.txt:          asset_name: vexy_json-wasm-${{ needs.create-release.outputs.version }}.tar.gz
llms.txt-llms.txt-          asset_content_type: application/gzip
llms.txt-llms.txt-
llms.txt-llms.txt-  publish-crates:
--
llms.txt-llms.txt-          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
llms.txt-llms.txt-        run: |
llms.txt-llms.txt-          # Publish in dependency order
llms.txt:llms.txt:          cargo publish -p vexy_json-core
llms.txt-llms.txt-          sleep 30
llms.txt:llms.txt:          cargo publish -p vexy_json-cli
llms.txt-llms.txt-          sleep 30
llms.txt:llms.txt:          cargo publish -p vexy_json-wasm
llms.txt-llms.txt-
llms.txt-llms.txt-  publish-npm:
llms.txt-llms.txt-    name: Publish to NPM
--
llms.txt-llms.txt-        run: |
llms.txt-llms.txt-          echo "Checking WASM build outputs..."
llms.txt-llms.txt-          ls -la docs/pkg/
llms.txt:llms.txt:          if [ ! -f "docs/pkg/vexy_json.js" ] || [ ! -f "docs/pkg/vexy_json_bg.wasm" ]; then
llms.txt-llms.txt-            echo "❌ WASM build failed - missing required files"
llms.txt-llms.txt-            exit 1
llms.txt-llms.txt-          fi
llms.txt-llms.txt-          echo "✅ WASM build successful"
llms.txt-llms.txt-          echo "Bundle sizes:"
llms.txt:llms.txt:          du -h docs/pkg/vexy_json.js docs/pkg/vexy_json_bg.wasm
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Upload WASM artifacts
llms.txt-llms.txt-        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
--
llms.txt-llms.txt-              await page.goto(`http://localhost:${port}/tool.html`);
llms.txt-llms.txt-              
llms.txt-llms.txt-              // Wait for WASM to load
llms.txt:llms.txt:              await page.waitForFunction(() => window.vexy_json !== undefined, { timeout: 10000 });
llms.txt-llms.txt-              
llms.txt-llms.txt-              // Test basic parsing
llms.txt-llms.txt-              const result = await page.evaluate(() => {
--
llms.txt-llms.txt-                
llms.txt-llms.txt-                const results = testCases.map(test => {
llms.txt-llms.txt-                  try {
llms.txt:llms.txt:                    const parsed = window.vexy_json.parse(test.input);
llms.txt-llms.txt-                    return { input: test.input, success: true, parsed };
llms.txt-llms.txt-                  } catch (e) {
llms.txt-llms.txt-                    return { input: test.input, success: false, error: e.message };
--
llms.txt-llms.txt-              const perfResult = await page.evaluate(() => {
llms.txt-llms.txt-                const largeJson = JSON.stringify(Array(1000).fill({key: "value"}));
llms.txt-llms.txt-                const start = performance.now();
llms.txt:llms.txt:                window.vexy_json.parse(largeJson);
llms.txt-llms.txt-                const end = performance.now();
llms.txt-llms.txt-                return end - start;
llms.txt-llms.txt-              });
--
llms.txt-llms.txt-      - name: Print deployment URL
llms.txt-llms.txt-        run: |
llms.txt-llms.txt-          echo "🚀 Deployed to GitHub Pages!"
llms.txt:llms.txt:          echo "📍 Tool URL: https://twardoch.github.io/vexy_json/tool.html"
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-edition = "2021"
llms.txt-llms.txt-description = "A Rust port of the JavaScript library jsonic, a forgiving JSON parser"
llms.txt-llms.txt-license = "MIT OR Apache-2.0"
llms.txt:llms.txt:repository = "https://github.com/twardoch/pub/vexy_json"
llms.txt:llms.txt:homepage = "https://github.com/twardoch/pub/vexy_json"
llms.txt-llms.txt-keywords = [ "json", "parser", "jsonic", "forgiving", "relaxed" ]
llms.txt-llms.txt-categories = [ "parsing", "data-structures", "web-programming" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "crates/core"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-serde]
llms.txt-llms.txt-path = "crates/serde"
llms.txt-llms.txt-optional = true
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[features]
llms.txt-llms.txt-default = [ "serde" ]
llms.txt:llms.txt:serde = [ "vexy_json-serde" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[dev-dependencies]
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:Relative File Path: Formula/vexy_json.rb
llms.txt-llms.txt-
llms.txt-llms.txt-```ruby
llms.txt-llms.txt-class VexyJson < Formula
llms.txt-llms.txt-  desc "Forgiving JSON parser for Rust - a port of the JavaScript library jsonic"
llms.txt:llms.txt:  homepage "https://github.com/twardoch/vexy_json"
llms.txt:llms.txt:  url "https://github.com/twardoch/vexy_json/archive/refs/tags/v2.0.0.tar.gz"
llms.txt-llms.txt-  sha256 "ce66e4af1e0aeb4f35456eb44aa82d5052e1a26c33adbaa1969284a5aa8c24ab"
llms.txt-llms.txt-  license any_of: ["MIT", "Apache-2.0"]
llms.txt:llms.txt:  head "https://github.com/twardoch/vexy_json.git", branch: "main"
llms.txt-llms.txt-
llms.txt-llms.txt-  depends_on "rust" => :build
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-  test do
llms.txt-llms.txt-    # Test basic JSON parsing
llms.txt:llms.txt:    assert_equal '{"key":"value"}', pipe_output("#{bin}/vexy_json", '{"key": "value"}').chomp
llms.txt-llms.txt-
llms.txt-llms.txt-    # Test forgiving JSON features
llms.txt-llms.txt-    forgiving_json = '{ unquoted: true, trailing: "comma", }'
llms.txt:llms.txt:    output = pipe_output("#{bin}/vexy_json", forgiving_json)
llms.txt-llms.txt-    assert_match /"unquoted":true/, output
llms.txt-llms.txt-    assert_match /"trailing":"comma"/, output
llms.txt-llms.txt-
llms.txt-llms.txt-    # Test error repair
llms.txt-llms.txt-    broken_json = '{ "broken": '
llms.txt:llms.txt:    output = pipe_output("#{bin}/vexy_json --repair", broken_json)
llms.txt-llms.txt-    assert_match /"broken":null/, output
llms.txt-llms.txt-
llms.txt-llms.txt-    # Test version
llms.txt:llms.txt:    assert_match version.to_s, shell_output("#{bin}/vexy_json --version")
llms.txt-llms.txt-  end
llms.txt-llms.txt-end
llms.txt-llms.txt-```
--
llms.txt-llms.txt-... (file content truncated to first 5 lines)
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/benchmark.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct BenchmarkResult {
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/comparison.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/comprehensive_comparison.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct BenchmarkResult {
--
llms.txt-llms.txt-... (file content truncated to first 5 lines)
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/lexer_microbenchmarks.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/memory_benchmarks.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct TrackingAllocator {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/parser_comparison.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct TestData {
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/parser_microbenchmarks.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/parsing.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/performance_comparison.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/profiling.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/real_world_benchmarks.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/simd_benchmarks.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/stack_overflow_test.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```toml
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json-python"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-edition = "2021"
llms.txt-llms.txt-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-llms.txt-license = "MIT OR Apache-2.0"
llms.txt:llms.txt:description = "Python bindings for vexy_json - a forgiving JSON parser"
llms.txt:llms.txt:repository = "https://github.com/twardoch/vexy_json"
llms.txt-llms.txt-keywords = [ "json", "parser", "forgiving", "repair", "python" ]
llms.txt-llms.txt-categories = [ "encoding", "parser-implementations" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[lib]
llms.txt:llms.txt:name = "vexy_json"
llms.txt-llms.txt-crate-type = [ "cdylib" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-serde_json = "1.0"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "../../crates/core"
llms.txt-llms.txt-version = "2.0.0"
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/examples/basic_usage.py
llms.txt-llms.txt-# Language: python
llms.txt-llms.txt-
llms.txt:llms.txt:import vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-def main(()):
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/examples/config_parser.py
llms.txt-llms.txt-# Language: python
llms.txt-llms.txt-
llms.txt:llms.txt:import vexy_json
llms.txt-llms.txt-import sys
llms.txt-llms.txt-
llms.txt-llms.txt-def load_config((filename=None)):
--
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[project]
llms.txt:llms.txt:name = "vexy_json"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-description = "A forgiving JSON parser for Python - port of the JavaScript library jsonic"
llms.txt-llms.txt-readme = "README.md"
--
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[project.urls]
llms.txt:llms.txt:Homepage = "https://github.com/twardoch/vexy_json"
llms.txt:llms.txt:Repository = "https://github.com/twardoch/vexy_json"
llms.txt:llms.txt:Issues = "https://github.com/twardoch/vexy_json/issues"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[tool.maturin]
llms.txt-llms.txt-python-source = "src"
llms.txt:llms.txt:module-name = "vexy_json.vexy_json"
llms.txt-llms.txt-features = [ "pyo3/extension-module" ]
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/src/lib.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct ParseError {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/src/vexy_json/__init__.py
llms.txt-llms.txt-# Language: python
llms.txt-llms.txt-
llms.txt:llms.txt:from .vexy_json import (
llms.txt-llms.txt-    parse,
llms.txt-llms.txt-    parse_with_options,
llms.txt-llms.txt-    dumps,
--
llms.txt-llms.txt-)
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/tests/test_vexy_json.py
llms.txt-llms.txt-# Language: python
llms.txt-llms.txt-
llms.txt-llms.txt-import pytest
llms.txt:llms.txt:import vexy_json
llms.txt-llms.txt-import json
llms.txt-llms.txt-import tempfile
llms.txt-llms.txt-import os
--
llms.txt-llms.txt-def test_version((self)):
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/build.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```bash
llms.txt-llms.txt-#!/bin/bash
llms.txt:llms.txt:# Master build script for vexy_json project
llms.txt-llms.txt-# This script runs all build processes in the correct order
llms.txt-llms.txt-
llms.txt-llms.txt-set -e
--
llms.txt-llms.txt-BLUE='\033[0;34m'
llms.txt-llms.txt-NC='\033[0m' # No Color
llms.txt-llms.txt-
llms.txt:llms.txt:echo -e "${BLUE}🚀 vexy_json Master Build Script${NC}"
llms.txt-llms.txt-echo "=============================================="
llms.txt-llms.txt-echo
llms.txt-llms.txt-
--
llms.txt-llms.txt-echo -e "${GREEN}🎉 All build steps completed successfully!${NC}"
llms.txt-llms.txt-echo
llms.txt-llms.txt-echo -e "${BLUE}Build artifacts:${NC}"
llms.txt:llms.txt:echo "  • Rust library: target/release/libvexy_json.rlib"
llms.txt:llms.txt:echo "  • CLI binary: target/release/vexy_json"
llms.txt:llms.txt:echo "  • WebAssembly: docs/pkg/vexy_json_wasm_bg.wasm"
llms.txt:llms.txt:echo "  • Documentation: target/doc/vexy_json/index.html"
llms.txt-llms.txt-
llms.txt-llms.txt-if [[ "$OSTYPE" == "darwin"* ]]; then
llms.txt:llms.txt:    echo "  • macOS installer: vexy_json-${VERSION}-macos.dmg"
llms.txt-llms.txt-fi
llms.txt-llms.txt-
llms.txt-llms.txt-echo
--
llms.txt-llms.txt-
llms.txt-llms.txt-```toml
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json-c-api"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-authors = [ "Vexy JSON Contributors" ]
llms.txt-llms.txt-edition = "2021"
llms.txt-llms.txt-license = "MIT OR Apache-2.0"
llms.txt:llms.txt:description = "C API for the vexy_json JSON parser"
llms.txt:llms.txt:repository = "https://github.com/twardoch/pub-vexy_json"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[lib]
llms.txt:llms.txt:name = "vexy_json_c_api"
llms.txt-llms.txt-crate-type = [ "cdylib", "staticlib" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-serde_json = "1.0"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "../core"
llms.txt-llms.txt-features = [ "serde" ]
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/c-api/build.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-Relative File Path: crates/c-api/examples/Makefile
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt:llms.txt:# Makefile for vexy_json C++ examples
llms.txt-llms.txt-
llms.txt-llms.txt-CXX = g++
llms.txt-llms.txt-CXXFLAGS = -std=c++17 -Wall -Wextra -O2
llms.txt:llms.txt:LDFLAGS = -L../../../target/release -lvexy_json
llms.txt-llms.txt-INCLUDES = -I../include
llms.txt-llms.txt-
llms.txt-llms.txt-# For macOS, add rpath to find the library
--
llms.txt-llms.txt-.PHONY: all run clean
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/c-api/examples/cpp_example.cpp
llms.txt-llms.txt-# Language: cpp
llms.txt-llms.txt-
llms.txt-llms.txt-#include #include <iostream>
llms.txt-llms.txt-#include #include <string>
llms.txt:llms.txt:#include #include "../include/vexy_json.hpp"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:Relative File Path: crates/c-api/include/vexy_json.h
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-/**
llms.txt:llms.txt: * @file vexy_json.h
llms.txt:llms.txt: * @brief C API for the vexy_json JSON parser
llms.txt-llms.txt- *
llms.txt:llms.txt: * This header provides a C-compatible API for the vexy_json JSON parser,
llms.txt-llms.txt- * allowing integration with C/C++ applications and other language bindings.
llms.txt-llms.txt- */
llms.txt-llms.txt-
--
llms.txt-llms.txt-#endif
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt:llms.txt: * @brief Parser options for configuring vexy_json behavior
llms.txt-llms.txt- */
llms.txt-llms.txt-typedef struct VexyJsonParserOptions {
llms.txt-llms.txt-    bool allow_comments;
--
llms.txt-llms.txt-typedef void* VexyJsonParser;
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt:llms.txt: * @brief Get the version of the vexy_json library
llms.txt-llms.txt- * @return Version string (do not free)
llms.txt-llms.txt- */
llms.txt:llms.txt:const char* vexy_json_version(void);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Parse JSON with default options
llms.txt-llms.txt- * @param input The JSON string to parse
llms.txt:llms.txt: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt-llms.txt- */
llms.txt:llms.txt:VexyJsonParseResult vexy_json_parse(const char* input);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Parse JSON with custom options
llms.txt-llms.txt- * @param input The JSON string to parse
llms.txt-llms.txt- * @param options Parser options
llms.txt:llms.txt: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt-llms.txt- */
llms.txt:llms.txt:VexyJsonParseResult vexy_json_parse_with_options(const char* input, const VexyJsonParserOptions* options);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Parse JSON and get detailed information including repairs
llms.txt-llms.txt- * @param input The JSON string to parse
llms.txt-llms.txt- * @param options Parser options
llms.txt:llms.txt: * @return Detailed result (must be freed with vexy_json_free_detailed_result)
llms.txt-llms.txt- */
llms.txt:llms.txt:VexyJsonDetailedResult vexy_json_parse_detailed(const char* input, const VexyJsonParserOptions* options);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Create a new parser instance
llms.txt-llms.txt- * @param options Parser options
llms.txt:llms.txt: * @return Parser handle (must be freed with vexy_json_parser_free)
llms.txt-llms.txt- */
llms.txt:llms.txt:VexyJsonParser vexy_json_parser_new(const VexyJsonParserOptions* options);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Parse JSON using a parser instance
llms.txt-llms.txt- * @param parser Parser handle
llms.txt-llms.txt- * @param input The JSON string to parse
llms.txt:llms.txt: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt-llms.txt- */
llms.txt:llms.txt:VexyJsonParseResult vexy_json_parser_parse(VexyJsonParser parser, const char* input);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Free a parser instance
llms.txt-llms.txt- * @param parser Parser handle
llms.txt-llms.txt- */
llms.txt:llms.txt:void vexy_json_parser_free(VexyJsonParser parser);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Free a parse result
llms.txt-llms.txt- * @param result Parse result to free
llms.txt-llms.txt- */
llms.txt:llms.txt:void vexy_json_free_result(VexyJsonParseResult result);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Free a detailed result
llms.txt-llms.txt- * @param result Detailed result to free
llms.txt-llms.txt- */
llms.txt:llms.txt:void vexy_json_free_detailed_result(VexyJsonDetailedResult result);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Get default parser options
llms.txt-llms.txt- * @return Default options
llms.txt-llms.txt- */
llms.txt:llms.txt:VexyJsonParserOptions vexy_json_default_options(void);
llms.txt-llms.txt-
llms.txt-llms.txt-#ifdef __cplusplus
llms.txt-llms.txt-}
--
llms.txt-llms.txt-#endif // VEXY_JSON_H
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:Relative File Path: crates/c-api/include/vexy_json.hpp
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-/**
llms.txt:llms.txt: * @file vexy_json.hpp
llms.txt:llms.txt: * @brief C++ header-only wrapper for the vexy_json JSON parser
llms.txt-llms.txt- *
llms.txt:llms.txt: * This header provides a modern C++ interface for the vexy_json JSON parser,
llms.txt-llms.txt- * with RAII, exceptions, and STL container support.
llms.txt-llms.txt- */
llms.txt-llms.txt-
--
llms.txt-llms.txt-#include <string_view>
llms.txt-llms.txt-#include <utility>
llms.txt-llms.txt-
llms.txt:llms.txt:#include "vexy_json.h"
llms.txt-llms.txt-
llms.txt:llms.txt:namespace vexy_json {
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt:llms.txt: * @brief Exception thrown by vexy_json operations
llms.txt-llms.txt- */
llms.txt-llms.txt-class ParseError : public std::runtime_error {
llms.txt-llms.txt-public:
llms.txt-llms.txt-    explicit ParseError(const std::string& message) 
llms.txt:llms.txt:        : std::runtime_error("vexy_json parse error: " + message) {}
llms.txt-llms.txt-};
llms.txt-llms.txt-
llms.txt-llms.txt-/**
--
llms.txt-llms.txt- */
llms.txt-llms.txt-class ParserOptions {
llms.txt-llms.txt-public:
llms.txt:llms.txt:    ParserOptions() : options_(vexy_json_default_options()) {}
llms.txt-llms.txt-    
llms.txt-llms.txt-    ParserOptions& allowComments(bool value = true) {
llms.txt-llms.txt-        options_.allow_comments = value;
--
llms.txt-llms.txt-        return *this;
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
llms.txt:llms.txt:    const vexy_json_parser_options* get() const { return &options_; }
llms.txt-llms.txt-    
llms.txt-llms.txt-private:
llms.txt:llms.txt:    vexy_json_parser_options options_;
llms.txt-llms.txt-};
llms.txt-llms.txt-
llms.txt-llms.txt-/**
--
llms.txt-llms.txt-public:
llms.txt-llms.txt-    ParseResult() = default;
llms.txt-llms.txt-    
llms.txt:llms.txt:    explicit ParseResult(vexy_json_parse_result result) 
llms.txt:llms.txt:        : result_(std::make_unique<vexy_json_parse_result>(result)) {
llms.txt-llms.txt-        if (result.error) {
llms.txt-llms.txt-            error_ = result.error;
llms.txt-llms.txt-        }
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    ~ParseResult() {
llms.txt-llms.txt-        if (result_) {
llms.txt:llms.txt:            vexy_json_free_result(*result_);
llms.txt-llms.txt-        }
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
--
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
llms.txt-llms.txt-private:
llms.txt:llms.txt:    std::unique_ptr<vexy_json_parse_result> result_;
llms.txt-llms.txt-    std::optional<std::string> json_;
llms.txt-llms.txt-    std::optional<std::string> error_;
llms.txt-llms.txt-};
--
llms.txt-llms.txt-public:
llms.txt-llms.txt-    DetailedParseResult() = default;
llms.txt-llms.txt-    
llms.txt:llms.txt:    explicit DetailedParseResult(vexy_json_detailed_result result) 
llms.txt:llms.txt:        : result_(std::make_unique<vexy_json_detailed_result>(result)) {
llms.txt-llms.txt-        if (result.error) {
llms.txt-llms.txt-            error_ = result.error;
llms.txt-llms.txt-        }
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    ~DetailedParseResult() {
llms.txt-llms.txt-        if (result_) {
llms.txt:llms.txt:            vexy_json_free_detailed_result(*result_);
llms.txt-llms.txt-        }
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
--
llms.txt-llms.txt-    const std::vector<Repair>& repairs() const { return repairs_; }
llms.txt-llms.txt-    
llms.txt-llms.txt-private:
llms.txt:llms.txt:    std::unique_ptr<vexy_json_detailed_result> result_;
llms.txt-llms.txt-    std::optional<std::string> json_;
llms.txt-llms.txt-    std::optional<std::string> error_;
llms.txt-llms.txt-    std::vector<Repair> repairs_;
--
llms.txt-llms.txt-    Parser() : Parser(ParserOptions{}) {}
llms.txt-llms.txt-    
llms.txt-llms.txt-    explicit Parser(const ParserOptions& options) 
llms.txt:llms.txt:        : parser_(vexy_json_parser_new(options.get())) {
llms.txt-llms.txt-        if (!parser_) {
llms.txt:llms.txt:            throw std::runtime_error("Failed to create vexy_json parser");
llms.txt-llms.txt-        }
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
--
llms.txt-llms.txt-    Parser& operator=(Parser&& other) noexcept {
llms.txt-llms.txt-        if (this != &other) {
llms.txt-llms.txt-            if (parser_) {
llms.txt:llms.txt:                vexy_json_parser_free(parser_);
llms.txt-llms.txt-            }
llms.txt-llms.txt-            parser_ = other.parser_;
llms.txt-llms.txt-            other.parser_ = nullptr;
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    ~Parser() {
llms.txt-llms.txt-        if (parser_) {
llms.txt:llms.txt:            vexy_json_parser_free(parser_);
llms.txt-llms.txt-        }
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
llms.txt-llms.txt-    ParseResult parse(std::string_view input) const {
llms.txt-llms.txt-        std::string input_str(input);
llms.txt:llms.txt:        return ParseResult(vexy_json_parser_parse(parser_, input_str.c_str()));
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
llms.txt-llms.txt-    std::string parseToString(std::string_view input) const {
--
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
llms.txt-llms.txt-private:
llms.txt:llms.txt:    vexy_json_parser parser_;
llms.txt-llms.txt-};
llms.txt-llms.txt-
llms.txt-llms.txt-/**
--
llms.txt-llms.txt- */
llms.txt-llms.txt-inline std::string parse(std::string_view input) {
llms.txt-llms.txt-    std::string input_str(input);
llms.txt:llms.txt:    auto result = ParseResult(vexy_json_parse(input_str.c_str()));
llms.txt-llms.txt-    return result.json();
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-inline std::string parse(std::string_view input, const ParserOptions& options) {
llms.txt-llms.txt-    std::string input_str(input);
llms.txt:llms.txt:    auto result = ParseResult(vexy_json_parse_with_options(input_str.c_str(), options.get()));
llms.txt-llms.txt-    return result.json();
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-inline DetailedParseResult parseDetailed(std::string_view input, const ParserOptions& options) {
llms.txt-llms.txt-    std::string input_str(input);
llms.txt:llms.txt:    return DetailedParseResult(vexy_json_parse_detailed(input_str.c_str(), options.get()));
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt:llms.txt: * @brief Get the version of the vexy_json library
llms.txt-llms.txt- */
llms.txt-llms.txt-inline std::string version() {
llms.txt:llms.txt:    return vexy_json_version();
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt:llms.txt:} // namespace vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-#endif // VEXY_JSON_HPP
llms.txt-llms.txt-```
--
llms.txt-llms.txt-Relative File Path: crates/c-api/src/lib.rs
llms.txt-llms.txt-
llms.txt-llms.txt-```rust
llms.txt:llms.txt://! C API for the vexy_json JSON parser.
llms.txt-llms.txt-//!
llms.txt-llms.txt-//! This crate provides a C-compatible API that can be used from C/C++
llms.txt-llms.txt-//! applications and for creating language bindings.
--
llms.txt-llms.txt-use libc::{c_char, size_t};
llms.txt-llms.txt-use std::ffi::{CStr, CString};
llms.txt-llms.txt-use std::ptr;
llms.txt:llms.txt:use vexy_json_core::ast::Value;
llms.txt:llms.txt:use vexy_json_core::{parse, parse_with_options, ParserOptions};
llms.txt-llms.txt-
llms.txt:llms.txt:/// Parser options for configuring vexy_json behavior
llms.txt-llms.txt-#[repr(C)]
llms.txt-llms.txt-pub struct VexyJsonParserOptions {
llms.txt-llms.txt-    pub allow_comments: bool,
--
llms.txt-llms.txt-    options: ParserOptions,
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt:llms.txt:/// Get the version of the vexy_json library
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_version() -> *const c_char {
llms.txt-llms.txt-    static VERSION: &str = concat!(env!("CARGO_PKG_VERSION"), "\0");
llms.txt-llms.txt-    VERSION.as_ptr() as *const c_char
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-/// Parse JSON with default options
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_parse(input: *const c_char) -> VexyJsonParseResult {
llms.txt-llms.txt-    if input.is_null() {
llms.txt-llms.txt-        return VexyJsonParseResult {
llms.txt-llms.txt-            json: ptr::null_mut(),
--
llms.txt-llms.txt-
llms.txt-llms.txt-/// Parse JSON with custom options
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_parse_with_options(
llms.txt-llms.txt-    input: *const c_char,
llms.txt-llms.txt-    options: *const VexyJsonParserOptions,
llms.txt-llms.txt-) -> VexyJsonParseResult {
--
llms.txt-llms.txt-    }
llms.txt-llms.txt-
llms.txt-llms.txt-    if options.is_null() {
llms.txt:llms.txt:        return vexy_json_parse(input);
llms.txt-llms.txt-    }
llms.txt-llms.txt-
llms.txt-llms.txt-    let input_str = unsafe {
--
llms.txt-llms.txt-
llms.txt-llms.txt-/// Parse JSON and get detailed information including repairs
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_parse_detailed(
llms.txt-llms.txt-    input: *const c_char,
llms.txt-llms.txt-    options: *const VexyJsonParserOptions,
llms.txt-llms.txt-) -> VexyJsonDetailedResult {
llms.txt-llms.txt-    // For now, we'll implement this as a simple parse without repair tracking
llms.txt-llms.txt-    // TODO: Implement actual repair tracking
llms.txt-llms.txt-    let result = if options.is_null() {
llms.txt:llms.txt:        vexy_json_parse(input)
llms.txt-llms.txt-    } else {
llms.txt:llms.txt:        vexy_json_parse_with_options(input, options)
llms.txt-llms.txt-    };
llms.txt-llms.txt-
llms.txt-llms.txt-    VexyJsonDetailedResult {
--
llms.txt-llms.txt-
llms.txt-llms.txt-/// Create a new parser instance
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_parser_new(
llms.txt-llms.txt-    options: *const VexyJsonParserOptions,
llms.txt-llms.txt-) -> *mut VexyJsonParser {
llms.txt-llms.txt-    let rust_options = if options.is_null() {
--
llms.txt-llms.txt-
llms.txt-llms.txt-/// Parse JSON using a parser instance
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_parser_parse(
llms.txt-llms.txt-    parser: *mut VexyJsonParser,
llms.txt-llms.txt-    input: *const c_char,
llms.txt-llms.txt-) -> VexyJsonParseResult {
--
llms.txt-llms.txt-
llms.txt-llms.txt-/// Free a parser instance
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_parser_free(parser: *mut VexyJsonParser) {
llms.txt-llms.txt-    if !parser.is_null() {
llms.txt-llms.txt-        unsafe {
llms.txt-llms.txt-            let _ = Box::from_raw(parser);
--
llms.txt-llms.txt-
llms.txt-llms.txt-/// Free a parse result
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_free_result(result: VexyJsonParseResult) {
llms.txt-llms.txt-    if !result.json.is_null() {
llms.txt-llms.txt-        unsafe {
llms.txt-llms.txt-            let _ = CString::from_raw(result.json);
--
llms.txt-llms.txt-
llms.txt-llms.txt-/// Free a detailed result
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_free_detailed_result(result: VexyJsonDetailedResult) {
llms.txt-llms.txt-    if !result.json.is_null() {
llms.txt-llms.txt-        unsafe {
llms.txt-llms.txt-            let _ = CString::from_raw(result.json);
--
llms.txt-llms.txt-
llms.txt-llms.txt-/// Get default parser options
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_default_options() -> VexyJsonParserOptions {
llms.txt-llms.txt-    let rust_options = ParserOptions::default();
llms.txt-llms.txt-    rust_options_to_c(&rust_options)
llms.txt-llms.txt-}
--
llms.txt-llms.txt-
llms.txt-llms.txt-```toml
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json-cli"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-edition = "2021"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[[bin]]
llms.txt:llms.txt:name = "vexy_json"
llms.txt-llms.txt-path = "src/main.rs"
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-dirs = "5.0"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "../core"
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/cli/build.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/cli/src/main.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct CliArgs {
--
llms.txt-llms.txt-
llms.txt-llms.txt-```toml
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json-core"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-edition = "2021"
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/benches/parser_benchmarks.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod samples;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/build.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/examples/advanced_repair.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/examples/error_reporting.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/ast/builder.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod build;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/ast/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod builder;
--
llms.txt-llms.txt-mod visitor;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/ast/token.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/ast/value.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/ml_patterns.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod recovery;
--
llms.txt-llms.txt-mod ml_patterns;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/recovery/context.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct ContextRule {
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/recovery/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod context;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/recovery/strategies.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/recovery_v2.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/repair.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct RepairAction {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/reporter.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/result.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/span.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/terminal.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/types.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/utils.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/array.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct LazyArray {
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod array;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/number.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/object.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct LazyObject {
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/string.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lexer/debug_lexer.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lexer/fast_lexer.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lexer/logos_lexer.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lexer/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod debug_lexer;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lib.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod ast;
--
llms.txt-llms.txt-mod parallel_chunked;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/benchmarks.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/memory_pool.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/memory_pool_v2.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/memory_pool_v3.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod benchmarks;
--
llms.txt-llms.txt-mod zero_copy;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/simd.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/string_parser.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/value_builder.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/zero_copy.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parallel.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parallel_chunked.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/array.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/boolean.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/iterative.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod array;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/null.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/number.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/object.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/optimized.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/optimized_v2.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/recursive.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/state.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct ParserState {
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/string.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/comment_preservation.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/custom_number.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/datetime.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod comment_preservation;
--
llms.txt-llms.txt-mod schema_validation;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/schema_validation.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/repair/advanced.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/repair.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod advanced;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/buffered/buffer.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/buffered/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod buffer;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/buffered/state.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct TempParsingState {
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/lexer.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod buffered;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/ndjson.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/simple_lexer.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/transform/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod normalizer;
--
llms.txt-llms.txt-mod optimizer;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/transform/normalizer.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/transform/optimizer.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-
llms.txt-llms.txt-```toml
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json-python"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-edition = "2021"
llms.txt:llms.txt:description = "Python bindings for vexy_json - a forgiving JSON parser"
llms.txt:llms.txt:repository = "https://github.com/twardoch/vexy_json"
llms.txt-llms.txt-license = "MIT OR Apache-2.0"
llms.txt-llms.txt-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[lib]
llms.txt:llms.txt:name = "vexy_json"
llms.txt-llms.txt-crate-type = [ "cdylib" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-features = [ "extension-module" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "../core"
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/build.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[project]
llms.txt:llms.txt:name = "vexy_json"
llms.txt:llms.txt:description = "A forgiving JSON parser - Python bindings for the Rust vexy_json library"
llms.txt-llms.txt-readme = "README.md"
llms.txt-llms.txt-requires-python = ">=3.8"
llms.txt-llms.txt-classifiers = [
--
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[project.urls]
llms.txt:llms.txt:Homepage = "https://github.com/twardoch/vexy_json"
llms.txt:llms.txt:Repository = "https://github.com/twardoch/vexy_json.git"
llms.txt:llms.txt:Issues = "https://github.com/twardoch/vexy_json/issues"
llms.txt:llms.txt:Documentation = "https://twardoch.github.io/vexy_json/"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[project.optional-dependencies]
--
llms.txt-llms.txt-[tool.maturin]
llms.txt-llms.txt-features = [ "pyo3/extension-module" ]
llms.txt-llms.txt-python-source = "python"
llms.txt:llms.txt:module-name = "vexy_json._vexy_json"
llms.txt:llms.txt:include = [ "python/vexy_json/__init__.pyi", "python/vexy_json/py.typed" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[tool.pytest.ini_options]
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/python/vexy_json/__init__.py
llms.txt-llms.txt-# Language: python
llms.txt-llms.txt-
llms.txt:llms.txt:from ._vexy_json import (
llms.txt-llms.txt-    parse_json as parse,
llms.txt-llms.txt-    parse_with_options_py as parse_with_options,
llms.txt-llms.txt-    is_valid,
--
llms.txt-llms.txt-)
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:Relative File Path: crates/python/python/vexy_json/__init__.pyi
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt:llms.txt:# this_file: crates/python/vexy_json.pyi
llms.txt-llms.txt-
llms.txt-llms.txt-"""
llms.txt:llms.txt:Type stubs for vexy_json Python bindings.
llms.txt-llms.txt-
llms.txt:llms.txt:This file provides type hints for the vexy_json Python module, which is implemented in Rust.
llms.txt-llms.txt-"""
llms.txt-llms.txt-
llms.txt-llms.txt-from typing import Any, Dict, List, Union, Optional, IO, Iterator, ContextManager
--
llms.txt-llms.txt-        ValueError: If the input is not valid JSON
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt:llms.txt:        >>> result = vexy_json.parse('{"key": "value", trailing: true,}')
llms.txt-llms.txt-        >>> print(result)
llms.txt-llms.txt-        {'key': 'value', 'trailing': True}
llms.txt-llms.txt-    """
--
llms.txt-llms.txt-        ValueError: If the input is not valid JSON
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt:llms.txt:        >>> result = vexy_json.parse_with_options('key: value', implicit_top_level=True)
llms.txt-llms.txt-        >>> print(result)
llms.txt-llms.txt-        {'key': 'value'}
llms.txt-llms.txt-    """
--
llms.txt-llms.txt-        True if the input is valid, False otherwise
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt:llms.txt:        >>> vexy_json.is_valid('{"valid": true}')
llms.txt-llms.txt-        True
llms.txt:llms.txt:        >>> vexy_json.is_valid('invalid json')
llms.txt-llms.txt-        False
llms.txt-llms.txt-    """
llms.txt-llms.txt-    ...
--
llms.txt-llms.txt-        TypeError: If the object cannot be serialized to JSON
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt-llms.txt-        >>> data = {'key': 'value', 'number': 42}
llms.txt:llms.txt:        >>> vexy_json.dumps(data)
llms.txt-llms.txt-        '{"key":"value","number":42}'
llms.txt:llms.txt:        >>> vexy_json.dumps(data, indent=2)
llms.txt-llms.txt-        '{\n  "key": "value",\n  "number": 42\n}'
llms.txt-llms.txt-    """
llms.txt-llms.txt-    ...
--
llms.txt-llms.txt-        ValueError: If the content is not valid JSON
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt-llms.txt-        >>> with open('data.json', 'r') as f:
llms.txt:llms.txt:        ...     result = vexy_json.load(f)
llms.txt-llms.txt-    """
llms.txt-llms.txt-    ...
llms.txt-llms.txt-
--
llms.txt-llms.txt-        TypeError: If the object cannot be serialized
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt-llms.txt-        >>> data = {'key': 'value'}
llms.txt-llms.txt-        >>> with open('output.json', 'w') as f:
llms.txt:llms.txt:        ...     vexy_json.dump(data, f, indent=2)
llms.txt-llms.txt-    """
llms.txt-llms.txt-    ...
llms.txt-llms.txt-
--
llms.txt-llms.txt-        ImportError: If NumPy is not available
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt:llms.txt:        >>> arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-llms.txt-        >>> print(type(arr))
llms.txt-llms.txt-        <class 'numpy.ndarray'>
llms.txt-llms.txt-    """
--
llms.txt-llms.txt-        The parsed array with zero-copy optimization when possible
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt:llms.txt:        >>> arr = vexy_json.loads_numpy_zerocopy('[1.0, 2.0, 3.0]', dtype='float64')
llms.txt-llms.txt-    """
llms.txt-llms.txt-    ...
llms.txt-llms.txt-
--
llms.txt-llms.txt-        The parsed JSON as a DataFrame
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt:llms.txt:        >>> df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
llms.txt-llms.txt-        >>> print(type(df))
llms.txt-llms.txt-        <class 'pandas.core.frame.DataFrame'>
llms.txt-llms.txt-    """
--
llms.txt-llms.txt-    JSON files or streams.
llms.txt-llms.txt-    
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt:llms.txt:        >>> with vexy_json.StreamingParser() as parser:
llms.txt-llms.txt-        ...     for item in parser.parse_stream(file_handle):
llms.txt-llms.txt-        ...         print(item)
llms.txt-llms.txt-    """
--
llms.txt-llms.txt-            Iterator of parsed JSON objects
llms.txt-llms.txt-            
llms.txt-llms.txt-        Example:
llms.txt:llms.txt:            >>> with vexy_json.StreamingParser() as parser:
llms.txt-llms.txt-            ...     for item in parser.parse_stream(file_handle):
llms.txt-llms.txt-            ...         process(item)
llms.txt-llms.txt-        """
--
llms.txt-llms.txt-            Iterator of parsed JSON objects
llms.txt-llms.txt-            
llms.txt-llms.txt-        Example:
llms.txt:llms.txt:            >>> with vexy_json.StreamingParser() as parser:
llms.txt-llms.txt-            ...     for item in parser.parse_lines(file_handle):
llms.txt-llms.txt-            ...         process(item)
llms.txt-llms.txt-        """
--
llms.txt-llms.txt-__description__: str
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:Relative File Path: crates/python/python/vexy_json/py.typed
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt:llms.txt:# this_file: crates/python/python/vexy_json/py.typed
llms.txt-llms.txt-
llms.txt-llms.txt-# Marker file for PEP 561 indicating that this package supports typing
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/src/lib.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct StreamingParser {
--
llms.txt-llms.txt-{"test": "file2", "number": 84}
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/tests/test_basic.py
llms.txt-llms.txt-# Language: python
llms.txt-llms.txt-
llms.txt-llms.txt-import pytest
llms.txt:llms.txt:import vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-class TestBasicParsing:
llms.txt-llms.txt-    """Test basic JSON parsing functionality."""
--
llms.txt-llms.txt-        """Test parsing nested objects and arrays."""
llms.txt-llms.txt-
llms.txt-llms.txt-class TestForgivingFeatures:
llms.txt:llms.txt:    """Test vexy_json's forgiving JSON features."""
llms.txt-llms.txt-    def test_comments((self)):
llms.txt-llms.txt-        """Test single-line and multi-line comments."""
llms.txt-llms.txt-    def test_trailing_commas((self)):
--
llms.txt-llms.txt-    """Test various malformed JSON inputs."""
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/tests/test_typing.py
llms.txt-llms.txt-# Language: python
llms.txt-llms.txt-
llms.txt-llms.txt-import pytest
--
llms.txt-llms.txt-from typing import TYPE_CHECKING
llms.txt-llms.txt-import numpy as np
llms.txt-llms.txt-import pandas as pd
llms.txt:llms.txt:import vexy_json
llms.txt:llms.txt:import vexy_json
llms.txt:llms.txt:import vexy_json
llms.txt:llms.txt:import vexy_json
llms.txt:llms.txt:import vexy_json
llms.txt-llms.txt-import numpy as np
llms.txt:llms.txt:import vexy_json
llms.txt-llms.txt-import pandas as pd
llms.txt:llms.txt:import vexy_json
llms.txt:llms.txt:import vexy_json
llms.txt:llms.txt:import vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-def test_basic_functionality(()):
llms.txt-llms.txt-    """Test basic parsing functionality with type hints."""
--
llms.txt-llms.txt-    """Test all forgiving JSON features."""
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/tests/test_vexy_json.py
llms.txt-llms.txt-# Language: python
llms.txt-llms.txt-
llms.txt:llms.txt:import vexy_json
llms.txt:llms.txt:from vexy_json import VexyJSONParser, VexyJSONConfig
llms.txt-llms.txt-
llms.txt-llms.txt-class VexyJSONWrapper:
llms.txt-llms.txt-    """A wrapper for Vexy JSON functionality"""
--
llms.txt-llms.txt-
llms.txt-llms.txt-```toml
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json-serde"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-edition = "2021"
llms.txt-llms.txt-
--
llms.txt-llms.txt-path = "src/lib.rs"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "../core"
llms.txt-llms.txt-features = [ "serde" ]
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/serde/src/lib.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct SerdeValue {
--
llms.txt-llms.txt-path = "src/lib.rs"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "../core"
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/test-utils/src/lib.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```toml
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json-wasm"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-edition = "2021"
llms.txt:llms.txt:description = "WebAssembly bindings for vexy_json - a forgiving JSON parser"
llms.txt:llms.txt:repository = "https://github.com/twardoch/vexy_json"
llms.txt-llms.txt-license = "MIT OR Apache-2.0"
llms.txt-llms.txt-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-llms.txt-
--
llms.txt-llms.txt-features = [ "derive" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "../core"
llms.txt-llms.txt-features = [ "serde" ]
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/wasm/build.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/wasm/src/lib.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-const __dirname = dirname(__filename);
llms.txt-llms.txt-
llms.txt-llms.txt-// Dynamically import the WASM module
llms.txt:llms.txt:const wasmModule = await import(join(__dirname, 'pkg', 'vexy_json_wasm.js'));
llms.txt-llms.txt-const { default: init, parse_js, parse_with_options_js, is_valid, format } = wasmModule;
llms.txt-llms.txt-
llms.txt-llms.txt-// Initialize WASM with the WASM file path
llms.txt:llms.txt:const wasmPath = join(__dirname, 'pkg', 'vexy_json_wasm_bg.wasm');
llms.txt-llms.txt-const wasmBytes = readFileSync(wasmPath);
llms.txt-llms.txt-await init(wasmBytes);
llms.txt-llms.txt-
llms.txt:llms.txt:console.log('Testing vexy_json WASM module...\n');
llms.txt-llms.txt-
llms.txt-llms.txt-// Test 1: Basic parsing
llms.txt-llms.txt-console.log('Test 1: Basic parsing');
--
llms.txt-llms.txt-console.log('All tests passed!');
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_lexer_test.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test10.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test2.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test3.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test4.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test5.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test6.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test7.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test8.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test9.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-author:
llms.txt-llms.txt-  name: Adam Twardoch
llms.txt-llms.txt-  url: https://github.com/twardoch
llms.txt:llms.txt:baseurl: /vexy_json
llms.txt-llms.txt-# Collections
llms.txt-llms.txt-collections:
llms.txt-llms.txt-  pages:
--
llms.txt-llms.txt-  - '**/gems/jekyll-*/lib/site_template/_posts/*'
llms.txt-llms.txt-  - 'internal/**/*'
llms.txt-llms.txt-github:
llms.txt:llms.txt:  repository_url: https://github.com/twardoch/vexy_json
llms.txt-llms.txt-highlighter: rouge
llms.txt-llms.txt-# Include WASM and tool files in build
llms.txt-llms.txt-include:
--
llms.txt-llms.txt-back_to_top_text: "Back to top"
llms.txt-llms.txt-
llms.txt-llms.txt-# Footer content
llms.txt:llms.txt:footer_content: "Copyright &copy; 2025 Adam Twardoch. Distributed by an <a href=\"https://github.com/twardoch/vexy_json/tree/main/LICENSE\">MIT license.</a>"
llms.txt-llms.txt-
llms.txt-llms.txt-# External navigation links will be removed from here as just-the-docs handles them in the content
llms.txt-llms.txt-# Plugin configuration
--
llms.txt-llms.txt-  - jekyll-sitemap
llms.txt-llms.txt-  - jekyll-optional-front-matter
llms.txt-llms.txt-# Repository information
llms.txt:llms.txt:repository: twardoch/vexy_json
llms.txt-llms.txt-# Performance and caching
llms.txt-llms.txt-sass:
llms.txt-llms.txt-  style: compressed
--
llms.txt-llms.txt-social:
llms.txt-llms.txt-  - icon: github
llms.txt-llms.txt-    name: GitHub
llms.txt:llms.txt:    url: https://github.com/twardoch/vexy_json
llms.txt-llms.txt-# WASM and static file configuration
llms.txt-llms.txt-# Ensure proper MIME types for WebAssembly files
llms.txt-llms.txt-static_files:
--
llms.txt-llms.txt-  - /pkg/*.js
llms.txt-llms.txt-  - /assets/**/*
llms.txt-llms.txt-remote_theme: just-the-docs/just-the-docs
llms.txt:llms.txt:# Site configuration for vexy_json documentation
llms.txt:llms.txt:title: vexy_json - Forgiving JSON Parser
llms.txt-llms.txt-url: https://twardoch.github.io
llms.txt-llms.txt-# MIME type handling for GitHub Pages
llms.txt-llms.txt-# Note: GitHub Pages automatically serves .wasm files with application/wasm MIME type
--
llms.txt-llms.txt-Relative File Path: docs/assets/css/_tool.scss
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt:llms.txt:/* Custom styles for vexy_json web tool */
llms.txt-llms.txt-
llms.txt-llms.txt-/* Editor enhancements */
llms.txt-llms.txt-.textarea-editor {
--
llms.txt-llms.txt-Relative File Path: docs/assets/css/enhanced-features.css
llms.txt-llms.txt-
llms.txt-llms.txt-```css
llms.txt:llms.txt:/* Enhanced features for vexy_json tool */
llms.txt-llms.txt-
llms.txt-llms.txt-/* WASM loading animations */
llms.txt-llms.txt-.loading-fade {
--
llms.txt-llms.txt----
llms.txt-llms.txt-
llms.txt-llms.txt-// @import "just-the-docs";
llms.txt:llms.txt:// Custom styles for vexy_json documentation site
llms.txt-llms.txt-// This file extends the just-the-docs theme with custom styling
llms.txt-llms.txt-
llms.txt-llms.txt-// Import our tool-specific styles
--
llms.txt-llms.txt-
llms.txt-llms.txt-// Custom color scheme refinements
llms.txt-llms.txt-:root {
llms.txt:llms.txt:  --vexy_json-primary: #0969da;
llms.txt:llms.txt:  --vexy_json-secondary: #656d76;
llms.txt:llms.txt:  --vexy_json-accent: #0550ae;
llms.txt:llms.txt:  --vexy_json-success: #1a7f37;
llms.txt:llms.txt:  --vexy_json-warning: #bf8700;
llms.txt:llms.txt:  --vexy_json-danger: #cf222e;
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-// Enhanced code blocks for JSON examples
--
llms.txt-llms.txt-      .nav-list-link {
llms.txt-llms.txt-        &.active {
llms.txt-llms.txt-          font-weight: 600;
llms.txt:llms.txt:          color: var(--vexy_json-primary);
llms.txt-llms.txt-        }
llms.txt-llms.txt-      }
llms.txt-llms.txt-    }
--
llms.txt-llms.txt-  
llms.txt-llms.txt-  .footer-content {
llms.txt-llms.txt-    font-size: 14px;
llms.txt:llms.txt:    color: var(--vexy_json-secondary);
llms.txt-llms.txt-    
llms.txt-llms.txt-    a {
llms.txt:llms.txt:      color: var(--vexy_json-primary);
llms.txt-llms.txt-      text-decoration: none;
llms.txt-llms.txt-      
llms.txt-llms.txt-      &:hover {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-// Custom button styles
llms.txt:llms.txt:.btn-vexy_json {
llms.txt:llms.txt:  background-color: var(--vexy_json-primary);
llms.txt:llms.txt:  border: 1px solid var(--vexy_json-primary);
llms.txt-llms.txt-  color: white;
llms.txt-llms.txt-  
llms.txt-llms.txt-  &:hover {
llms.txt:llms.txt:    background-color: var(--vexy_json-accent);
llms.txt:llms.txt:    border-color: var(--vexy_json-accent);
llms.txt-llms.txt-  }
llms.txt-llms.txt-  
llms.txt-llms.txt-  &:focus {
--
llms.txt-llms.txt-    th {
llms.txt-llms.txt-      background-color: var(--code-background-color);
llms.txt-llms.txt-      font-weight: 600;
llms.txt:llms.txt:      color: var(--vexy_json-primary);
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
llms.txt-llms.txt-    td {
--
llms.txt-llms.txt-  
llms.txt-llms.txt-  &.callout-info {
llms.txt-llms.txt-    background-color: rgba(9, 105, 218, 0.1);
llms.txt:llms.txt:    border-left-color: var(--vexy_json-primary);
llms.txt-llms.txt-    
llms.txt-llms.txt-    .callout-title {
llms.txt:llms.txt:      color: var(--vexy_json-primary);
llms.txt-llms.txt-      font-weight: 600;
llms.txt-llms.txt-    }
llms.txt-llms.txt-  }
llms.txt-llms.txt-  
llms.txt-llms.txt-  &.callout-warning {
llms.txt-llms.txt-    background-color: rgba(191, 135, 0, 0.1);
llms.txt:llms.txt:    border-left-color: var(--vexy_json-warning);
llms.txt-llms.txt-    
llms.txt-llms.txt-    .callout-title {
llms.txt:llms.txt:      color: var(--vexy_json-warning);
llms.txt-llms.txt-      font-weight: 600;
llms.txt-llms.txt-    }
llms.txt-llms.txt-  }
llms.txt-llms.txt-  
llms.txt-llms.txt-  &.callout-success {
llms.txt-llms.txt-    background-color: rgba(26, 127, 55, 0.1);
llms.txt:llms.txt:    border-left-color: var(--vexy_json-success);
llms.txt-llms.txt-    
llms.txt-llms.txt-    .callout-title {
llms.txt:llms.txt:      color: var(--vexy_json-success);
llms.txt-llms.txt-      font-weight: 600;
llms.txt-llms.txt-    }
llms.txt-llms.txt-  }
--
llms.txt-llms.txt-    .stat-value {
llms.txt-llms.txt-      font-size: 2em;
llms.txt-llms.txt-      font-weight: 700;
llms.txt:llms.txt:      color: var(--vexy_json-primary);
llms.txt-llms.txt-      display: block;
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
llms.txt-llms.txt-    .stat-label {
llms.txt-llms.txt-      font-size: 0.9em;
llms.txt:llms.txt:      color: var(--vexy_json-secondary);
llms.txt-llms.txt-      margin-top: 4px;
llms.txt-llms.txt-    }
llms.txt-llms.txt-  }
--
llms.txt-llms.txt-// Dark mode adjustments
llms.txt-llms.txt-@media (prefers-color-scheme: dark) {
llms.txt-llms.txt-  :root {
llms.txt:llms.txt:    --vexy_json-primary: #58a6ff;
llms.txt:llms.txt:    --vexy_json-secondary: #8b949e;
llms.txt:llms.txt:    --vexy_json-accent: #79c0ff;
llms.txt:llms.txt:    --vexy_json-success: #3fb950;
llms.txt:llms.txt:    --vexy_json-warning: #d29922;
llms.txt:llms.txt:    --vexy_json-danger: #f85149;
llms.txt-llms.txt-  }
llms.txt-llms.txt-}
llms.txt-llms.txt-
--
llms.txt-llms.txt-Relative File Path: docs/assets/css/tool.css
llms.txt-llms.txt-
llms.txt-llms.txt-```css
llms.txt:llms.txt:/* Custom styles for vexy_json web tool */
llms.txt-llms.txt-
llms.txt-llms.txt-/* Editor enhancements */
llms.txt-llms.txt-.textarea-editor {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/analytics.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-class AnalyticsCollector {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/browser-compatibility.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-class BrowserCompatibility {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/editor.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-class JsonEditor {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/error-highlighting.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-class ErrorHighlighter {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/examples.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-function getExamplesByCategory(())
--
llms.txt-llms.txt-function searchExamples((query))
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/feedback.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-class FeedbackSystem {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/jsonic-tool.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-class JsonicTool {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/tool.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-import init, {
--
llms.txt-llms.txt-    get_parser_options,
llms.txt-llms.txt-    stringify_value,
llms.txt-llms.txt-    get_version_info
llms.txt:llms.txt:} from '../../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-import { EXAMPLES, getExample } from './examples.js';
llms.txt-llms.txt-import { BrowserCompatibility } from './browser-compatibility.js';
llms.txt-llms.txt-import { AnalyticsCollector } from './analytics.js';
--
llms.txt-llms.txt-  <head>
llms.txt-llms.txt-    <meta charset="UTF-8" />
llms.txt-llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:llms.txt:    <title>vexy_json Browser Compatibility Test</title>
llms.txt-llms.txt-    <style>
llms.txt-llms.txt-      body {
llms.txt-llms.txt-        font-family: Arial, sans-serif;
--
llms.txt-llms.txt-    </style>
llms.txt-llms.txt-  </head>
llms.txt-llms.txt-  <body>
llms.txt:llms.txt:    <h1>vexy_json Browser Compatibility Test</h1>
llms.txt-llms.txt-
llms.txt-llms.txt-    <div class="test-section">
llms.txt-llms.txt-      <h2>Browser Information</h2>
--
llms.txt-llms.txt-      <h2>WASM Module Loading</h2>
llms.txt-llms.txt-      <div id="module-loading">
llms.txt-llms.txt-        <div class="loading"></div>
llms.txt:llms.txt:        <span>Loading vexy_json WebAssembly module...</span>
llms.txt-llms.txt-      </div>
llms.txt-llms.txt-      <div id="module-tests"></div>
llms.txt-llms.txt-    </div>
--
llms.txt-llms.txt-    </div>
llms.txt-llms.txt-
llms.txt-llms.txt-    <script type="module">
llms.txt:llms.txt:      let vexy_json = null;
llms.txt-llms.txt-      let wasmModule = null;
llms.txt-llms.txt-
llms.txt-llms.txt-      // Test results storage
--
llms.txt-llms.txt-        }
llms.txt-llms.txt-      }
llms.txt-llms.txt-
llms.txt:llms.txt:      // Load vexy_json module
llms.txt-llms.txt-      async function loadVexyJsonModule() {
llms.txt-llms.txt-        try {
llms.txt-llms.txt-          document.getElementById('module-loading').innerHTML =
llms.txt:llms.txt:            '<div class="loading"></div>Loading vexy_json module...';
llms.txt-llms.txt-
llms.txt-llms.txt-          // Import the module
llms.txt:llms.txt:          const module = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-          await module.default(); // Initialize WASM
llms.txt:llms.txt:          vexy_json = module;
llms.txt-llms.txt-
llms.txt-llms.txt-          document.getElementById('module-loading').innerHTML =
llms.txt:llms.txt:            '<div class="test-result success">✓ vexy_json module loaded successfully</div>';
llms.txt-llms.txt-
llms.txt-llms.txt-          // Test module functions
llms.txt-llms.txt-          testModuleFunctions();
llms.txt-llms.txt-        } catch (error) {
llms.txt-llms.txt-          document.getElementById(
llms.txt-llms.txt-            'module-loading'
llms.txt:llms.txt:          ).innerHTML = `<div class="test-result error">✗ Failed to load vexy_json module: ${error.message}</div>`;
llms.txt-llms.txt-          addResult(
llms.txt-llms.txt-            'module',
llms.txt-llms.txt-            'Module Loading',
--
llms.txt-llms.txt-      }
llms.txt-llms.txt-
llms.txt-llms.txt-      function testModuleFunctions() {
llms.txt:llms.txt:        if (!vexy_json) return;
llms.txt-llms.txt-
llms.txt-llms.txt-        try {
llms.txt-llms.txt-          // Test version info
llms.txt:llms.txt:          const version = vexy_json.get_version_info();
llms.txt-llms.txt-          addResult(
llms.txt-llms.txt-            'module',
llms.txt-llms.txt-            'get_version_info()',
--
llms.txt-llms.txt-          );
llms.txt-llms.txt-
llms.txt-llms.txt-          // Test parser options
llms.txt:llms.txt:          const options = vexy_json.get_parser_options();
llms.txt-llms.txt-          addResult(
llms.txt-llms.txt-            'module',
llms.txt-llms.txt-            'get_parser_options()',
--
llms.txt-llms.txt-
llms.txt-llms.txt-          // Test basic parsing
llms.txt-llms.txt-          const simpleJson = '{"test": true}';
llms.txt:llms.txt:          const result = vexy_json.parse_json(simpleJson);
llms.txt-llms.txt-          addResult(
llms.txt-llms.txt-            'module',
llms.txt-llms.txt-            'parse_json() basic',
--
llms.txt-llms.txt-            allow_unquoted_keys: true,
llms.txt-llms.txt-            allow_trailing_commas: true,
llms.txt-llms.txt-          };
llms.txt:llms.txt:          const resultWithOptions = vexy_json.parse_json_with_options(
llms.txt-llms.txt-            forgivingJson,
llms.txt-llms.txt-            optionsTest.allow_comments,
llms.txt-llms.txt-            optionsTest.allow_trailing_commas,
--
llms.txt-llms.txt-          );
llms.txt-llms.txt-
llms.txt-llms.txt-          // Test validation
llms.txt:llms.txt:          const isValid = vexy_json.validate_json('{"valid": true}');
llms.txt-llms.txt-          addResult(
llms.txt-llms.txt-            'module',
llms.txt-llms.txt-            'validate_json()',
--
llms.txt-llms.txt-      }
llms.txt-llms.txt-
llms.txt-llms.txt-      function runParsingTests() {
llms.txt:llms.txt:        if (!vexy_json) {
llms.txt-llms.txt-          addResult(
llms.txt-llms.txt-            'parsing',
llms.txt-llms.txt-            'Module Required',
llms.txt-llms.txt-            false,
llms.txt:llms.txt:            'vexy_json module not loaded'
llms.txt-llms.txt-          );
llms.txt-llms.txt-          return;
llms.txt-llms.txt-        }
--
llms.txt-llms.txt-              allow_single_quotes: true,
llms.txt-llms.txt-            };
llms.txt-llms.txt-
llms.txt:llms.txt:            const result = vexy_json.parse_json_with_options(
llms.txt-llms.txt-              test.input,
llms.txt-llms.txt-              options.allow_comments,
llms.txt-llms.txt-              options.allow_trailing_commas,
--
llms.txt-llms.txt-      }
llms.txt-llms.txt-
llms.txt-llms.txt-      function runPerformanceTests() {
llms.txt:llms.txt:        if (!vexy_json) {
llms.txt-llms.txt-          addResult(
llms.txt-llms.txt-            'performance',
llms.txt-llms.txt-            'Module Required',
llms.txt-llms.txt-            false,
llms.txt:llms.txt:            'vexy_json module not loaded'
llms.txt-llms.txt-          );
llms.txt-llms.txt-          return;
llms.txt-llms.txt-        }
--
llms.txt-llms.txt-        Object.entries(testData).forEach(([size, data]) => {
llms.txt-llms.txt-          try {
llms.txt-llms.txt-            const startTime = performance.now();
llms.txt:llms.txt:            const result = vexy_json.parse_json(data);
llms.txt-llms.txt-            const endTime = performance.now();
llms.txt-llms.txt-            const duration = endTime - startTime;
llms.txt-llms.txt-
--
llms.txt-llms.txt-        const input = document.getElementById('test-input').value;
llms.txt-llms.txt-        const resultDiv = document.getElementById('interactive-result');
llms.txt-llms.txt-
llms.txt:llms.txt:        if (!vexy_json) {
llms.txt-llms.txt-          resultDiv.innerHTML =
llms.txt:llms.txt:            '<div class="test-result error">vexy_json module not loaded</div>';
llms.txt-llms.txt-          return;
llms.txt-llms.txt-        }
llms.txt-llms.txt-
--
llms.txt-llms.txt-            newline_as_comma: true,
llms.txt-llms.txt-          };
llms.txt-llms.txt-
llms.txt:llms.txt:          const result = vexy_json.parse_json_with_options(
llms.txt-llms.txt-            input,
llms.txt-llms.txt-            options.allow_comments,
llms.txt-llms.txt-            options.allow_trailing_commas,
--
llms.txt-llms.txt-        downloadDiv.innerHTML = `
llms.txt-llms.txt-                <h2>Test Report</h2>
llms.txt-llms.txt-                <div class="test-result info">
llms.txt:llms.txt:                    All tests completed. <a href="${url}" download="vexy_json-browser-test-${
llms.txt-llms.txt-          results.browser.browser
llms.txt-llms.txt-        }-${Date.now()}.json">Download detailed report</a>
llms.txt-llms.txt-                </div>
--
llms.txt-llms.txt-        parse_json,
llms.txt-llms.txt-        parse_json_with_options,
llms.txt-llms.txt-        get_parser_options,
llms.txt:llms.txt:      } from '../pkg/vexy_json_wasm.js?v=' + Date.now();
llms.txt-llms.txt-
llms.txt-llms.txt-      let log = '';
llms.txt-llms.txt-      function appendLog(message) {
--
llms.txt-llms.txt-    <p id="result">Loading...</p>
llms.txt-llms.txt-
llms.txt-llms.txt-    <script type="module">
llms.txt:llms.txt:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      async function test() {
llms.txt-llms.txt-        try {
--
llms.txt-llms.txt-      import init, {
llms.txt-llms.txt-        parse_json,
llms.txt-llms.txt-        parse_json_with_options,
llms.txt:llms.txt:      } from '../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      let log = '';
llms.txt-llms.txt-      function appendLog(message) {
--
llms.txt-llms.txt-    <pre id="log"></pre>
llms.txt-llms.txt-
llms.txt-llms.txt-    <script type="module">
llms.txt:llms.txt:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      let log = '';
llms.txt-llms.txt-      function appendLog(message) {
--
llms.txt-llms.txt-      import init, {
llms.txt-llms.txt-        parse_json,
llms.txt-llms.txt-        parse_json_with_options,
llms.txt:llms.txt:      } from '../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      let log = '';
llms.txt-llms.txt-      function appendLog(message) {
--
llms.txt-llms.txt-      import init, {
llms.txt-llms.txt-        parse_json_with_options,
llms.txt-llms.txt-        get_parser_options,
llms.txt:llms.txt:      } from '../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      let log = '';
llms.txt-llms.txt-      function appendLog(message) {
--
llms.txt-llms.txt-    <pre id="output"></pre>
llms.txt-llms.txt-
llms.txt-llms.txt-    <script type="module">
llms.txt:llms.txt:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      let initialized = false;
llms.txt-llms.txt-
--
llms.txt-llms.txt-  <head>
llms.txt-llms.txt-    <meta charset="UTF-8" />
llms.txt-llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:llms.txt:    <title>Basic vexy_json WASM Test</title>
llms.txt-llms.txt-    <style>
llms.txt-llms.txt-      body {
llms.txt-llms.txt-        font-family: monospace;
--
llms.txt-llms.txt-    </style>
llms.txt-llms.txt-  </head>
llms.txt-llms.txt-  <body>
llms.txt:llms.txt:    <h1>Basic vexy_json WASM Test</h1>
llms.txt-llms.txt-    <div id="results"></div>
llms.txt-llms.txt-
llms.txt-llms.txt-    <script type="module">
--
llms.txt-llms.txt-          }
llms.txt-llms.txt-          addResult('✅ WebAssembly supported', 'success');
llms.txt-llms.txt-
llms.txt:llms.txt:          addResult('Loading vexy_json module...');
llms.txt:llms.txt:          const vexy_json = await import('../pkg/vexy_json_wasm.js');
llms.txt:llms.txt:          await vexy_json.default();
llms.txt:llms.txt:          addResult('✅ vexy_json module loaded', 'success');
llms.txt-llms.txt-
llms.txt-llms.txt-          // Test basic parsing
llms.txt-llms.txt-          addResult('Testing basic JSON parsing...');
llms.txt:llms.txt:          const result1 = vexy_json.parse_json('{"test": true}');
llms.txt-llms.txt-          addResult(`✅ Basic parsing: ${JSON.stringify(result1)}`, 'success');
llms.txt-llms.txt-
llms.txt-llms.txt-          // Test forgiving features
llms.txt-llms.txt-          addResult('Testing forgiving features...');
llms.txt:llms.txt:          const result2 = vexy_json.parse_json(
llms.txt-llms.txt-            '{key: "value", /* comment */ trailing: "comma",}'
llms.txt-llms.txt-          );
llms.txt-llms.txt-          addResult(
--
llms.txt-llms.txt-
llms.txt-llms.txt-          // Test validation
llms.txt-llms.txt-          addResult('Testing validation...');
llms.txt:llms.txt:          const valid = vexy_json.validate_json('{"valid": true}');
llms.txt:llms.txt:          const invalid = vexy_json.validate_json('{invalid}');
llms.txt-llms.txt-          addResult(
llms.txt-llms.txt-            `✅ Validation: valid=${valid}, invalid=${invalid}`,
llms.txt-llms.txt-            'success'
--
llms.txt-llms.txt-          // Test error handling
llms.txt-llms.txt-          addResult('Testing error handling...');
llms.txt-llms.txt-          try {
llms.txt:llms.txt:            vexy_json.parse_json('{unclosed');
llms.txt-llms.txt-            addResult('❌ Should have thrown error', 'error');
llms.txt-llms.txt-          } catch (error) {
llms.txt-llms.txt-            addResult(`✅ Error handling: ${error.message}`, 'success');
--
llms.txt-llms.txt-    <!-- this_file: docs/test-browsers.html -->
llms.txt-llms.txt-    <meta charset="UTF-8" />
llms.txt-llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:llms.txt:    <title>vexy_json Cross-Browser Test Suite</title>
llms.txt-llms.txt-    <link
llms.txt-llms.txt-      href="https://cdn.jsdelivr.net/npm/daisyui@4.4.19/dist/full.min.css"
llms.txt-llms.txt-      rel="stylesheet"
--
llms.txt-llms.txt-        <div class="hero-content text-center">
llms.txt-llms.txt-          <div class="max-w-md">
llms.txt-llms.txt-            <h1 class="text-3xl font-bold">
llms.txt:llms.txt:              vexy_json Cross-Browser Test Suite
llms.txt-llms.txt-            </h1>
llms.txt-llms.txt-            <p class="py-6">
llms.txt-llms.txt-              Comprehensive testing for WASM compatibility across browsers
--
llms.txt-llms.txt-          name: 'WASM Module Loading',
llms.txt-llms.txt-          test: async () => {
llms.txt-llms.txt-            try {
llms.txt:llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-              return {
llms.txt-llms.txt-                success: true,
llms.txt-llms.txt-                message: 'WASM module loaded successfully',
--
llms.txt-llms.txt-          name: 'Basic JSON Parsing',
llms.txt-llms.txt-          test: async () => {
llms.txt-llms.txt-            try {
llms.txt:llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-              const result = wasmModule.parse_json('{"test": "value"}');
llms.txt-llms.txt-              const parsed = JSON.parse(result);
llms.txt-llms.txt-              if (parsed.test === 'value') {
--
llms.txt-llms.txt-          name: 'Comment Support',
llms.txt-llms.txt-          test: async () => {
llms.txt-llms.txt-            try {
llms.txt:llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-              const input = '{"test": "value" /* comment */}';
llms.txt-llms.txt-              const result = wasmModule.parse_json(input);
llms.txt-llms.txt-              const parsed = JSON.parse(result);
--
llms.txt-llms.txt-          name: 'Unquoted Keys',
llms.txt-llms.txt-          test: async () => {
llms.txt-llms.txt-            try {
llms.txt:llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-              const input = '{test: "value"}';
llms.txt-llms.txt-              const result = wasmModule.parse_json(input);
llms.txt-llms.txt-              const parsed = JSON.parse(result);
--
llms.txt-llms.txt-          name: 'Trailing Commas',
llms.txt-llms.txt-          test: async () => {
llms.txt-llms.txt-            try {
llms.txt:llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-              const input = '{"test": "value",}';
llms.txt-llms.txt-              const result = wasmModule.parse_json(input);
llms.txt-llms.txt-              const parsed = JSON.parse(result);
--
llms.txt-llms.txt-          name: 'Error Handling',
llms.txt-llms.txt-          test: async () => {
llms.txt-llms.txt-            try {
llms.txt:llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-              try {
llms.txt-llms.txt-                wasmModule.parse_json('invalid json {{{');
llms.txt-llms.txt-                return {
--
llms.txt-llms.txt-          name: 'Performance Test',
llms.txt-llms.txt-          test: async () => {
llms.txt-llms.txt-            try {
llms.txt:llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-              const largeJson = JSON.stringify({
llms.txt-llms.txt-                array: Array(1000)
llms.txt-llms.txt-                  .fill()
--
llms.txt-llms.txt-          name: 'Memory Management',
llms.txt-llms.txt-          test: async () => {
llms.txt-llms.txt-            try {
llms.txt:llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-
llms.txt-llms.txt-              // Run multiple parse operations to test memory management
llms.txt-llms.txt-              for (let i = 0; i < 100; i++) {
--
llms.txt-llms.txt-        resultsEl.innerHTML += `<span class="test-fail">Failed: ${failCount}</span>\n`;
llms.txt-llms.txt-
llms.txt-llms.txt-        if (failCount === 0) {
llms.txt:llms.txt:          resultsEl.innerHTML += `\n🎉 All tests passed! vexy_json WASM is compatible with this browser.`;
llms.txt-llms.txt-        } else {
llms.txt-llms.txt-          resultsEl.innerHTML += `\n⚠️ Some tests failed. Check the results above for details.`;
llms.txt-llms.txt-        }
--
llms.txt-llms.txt-  <head>
llms.txt-llms.txt-    <meta charset="UTF-8" />
llms.txt-llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:llms.txt:    <title>vexy_json WASM Test</title>
llms.txt-llms.txt-    <style>
llms.txt-llms.txt-      body {
llms.txt-llms.txt-        font-family: Arial, sans-serif;
--
llms.txt-llms.txt-    </style>
llms.txt-llms.txt-  </head>
llms.txt-llms.txt-  <body>
llms.txt:llms.txt:    <h1>vexy_json WebAssembly Test Page</h1>
llms.txt:llms.txt:    <p>Testing the vexy_json WASM module functionality...</p>
llms.txt-llms.txt-
llms.txt-llms.txt-    <div id="results"></div>
llms.txt-llms.txt-
--
llms.txt-llms.txt-        get_parser_options,
llms.txt-llms.txt-        stringify_value,
llms.txt-llms.txt-        get_version_info,
llms.txt:llms.txt:      } from '../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      const resultsDiv = document.getElementById('results');
llms.txt-llms.txt-
--
llms.txt-llms.txt-            addResult(
llms.txt-llms.txt-              'Version Info',
llms.txt-llms.txt-              true,
llms.txt:llms.txt:              `vexy_json v${versionInfo.version}\n${versionInfo.description}`
llms.txt-llms.txt-            );
llms.txt-llms.txt-          } catch (e) {
llms.txt-llms.txt-            addResult('Version Info', false, `Error: ${e.message}`);
--
llms.txt-llms.txt-        parse_json,
llms.txt-llms.txt-        parse_json_with_options,
llms.txt-llms.txt-        get_parser_options,
llms.txt:llms.txt:      } from '../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      let log = '';
llms.txt-llms.txt-      function appendLog(message) {
--
llms.txt-llms.txt-  <head>
llms.txt-llms.txt-    <meta charset="UTF-8" />
llms.txt-llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:llms.txt:    <title>vexy_json WASM Test</title>
llms.txt-llms.txt-    <style>
llms.txt-llms.txt-      body {
llms.txt-llms.txt-        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
--
llms.txt-llms.txt-    </style>
llms.txt-llms.txt-  </head>
llms.txt-llms.txt-  <body>
llms.txt:llms.txt:    <h1>vexy_json WASM Test Page</h1>
llms.txt-llms.txt-    <div class="version" id="version">Loading WASM module...</div>
llms.txt-llms.txt-
llms.txt-llms.txt-    <div class="container">
--
llms.txt-llms.txt-        get_version_info,
llms.txt-llms.txt-        get_parser_options,
llms.txt-llms.txt-        validate_json,
llms.txt:llms.txt:      } from './pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      let wasmReady = false;
llms.txt-llms.txt-
--
llms.txt-llms.txt-          // Display version info
llms.txt-llms.txt-          const versionInfo = JSON.parse(get_version_info());
llms.txt-llms.txt-          document.getElementById('version').innerHTML = `
llms.txt:llms.txt:                    <strong>vexy_json WASM</strong> v${versionInfo.version} - ${versionInfo.description}
llms.txt-llms.txt-                `;
llms.txt-llms.txt-          document.getElementById('version').className = 'version';
llms.txt-llms.txt-
--
llms.txt-llms.txt-  <head>
llms.txt-llms.txt-    <meta charset="UTF-8" />
llms.txt-llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:llms.txt:    <title>vexy_json - Forgiving JSON Parser</title>
llms.txt-llms.txt-    <meta
llms.txt-llms.txt-      name="description"
llms.txt:llms.txt:      content="Interactive web tool for parsing forgiving JSON with vexy_json - supports comments, unquoted keys, trailing commas, and more."
llms.txt-llms.txt-    />
llms.txt-llms.txt-
llms.txt-llms.txt-    <!-- Favicon -->
--
llms.txt-llms.txt-    <div class="navbar bg-base-100 shadow-lg">
llms.txt-llms.txt-      <div class="container mx-auto">
llms.txt-llms.txt-        <div class="flex-1">
llms.txt:llms.txt:          <a href="index.html" class="btn btn-ghost text-xl">vexy_json</a>
llms.txt-llms.txt-        </div>
llms.txt-llms.txt-        <div class="flex-none">
llms.txt-llms.txt-          <ul class="menu menu-horizontal px-1">
llms.txt-llms.txt-            <li><a href="index.html">Docs</a></li>
llms.txt-llms.txt-            <li>
llms.txt:llms.txt:              <a href="https://github.com/twardoch/vexy_json" target="_blank"
llms.txt-llms.txt-                >GitHub</a
llms.txt-llms.txt-              >
llms.txt-llms.txt-            </li>
--
llms.txt-llms.txt-    <main class="container mx-auto px-4 py-8">
llms.txt-llms.txt-      <!-- Header -->
llms.txt-llms.txt-      <div class="text-center mb-8">
llms.txt:llms.txt:        <h1 class="text-4xl font-bold mb-4">vexy_json Parser</h1>
llms.txt-llms.txt-        <p class="text-lg text-base-content/70">
llms.txt-llms.txt-          A forgiving JSON parser that supports comments, unquoted keys,
llms.txt-llms.txt-          trailing commas, and more.
--
llms.txt-llms.txt-              >
llms.txt-llms.txt-{
llms.txt-llms.txt-  // You can use comments!
llms.txt:llms.txt:  name: "vexy_json",
llms.txt-llms.txt-  features: [
llms.txt-llms.txt-    'comments',
llms.txt-llms.txt-    'unquoted keys',
--
llms.txt-llms.txt-                class="tab-content bg-base-100 border-base-300 rounded-box p-6"
llms.txt-llms.txt-              >
llms.txt-llms.txt-                <pre class="text-sm"><code>{
llms.txt:llms.txt:  "name": "vexy_json",
llms.txt-llms.txt-  "version": "1.1.0",
llms.txt-llms.txt-  "features": ["forgiving", "fast", "rust"]
llms.txt-llms.txt-}</code></pre>
--
llms.txt-llms.txt-      <div class="grid grid-flow-col gap-4">
llms.txt-llms.txt-        <a href="index.html" class="link link-hover">Documentation</a>
llms.txt-llms.txt-        <a href="api.html" class="link link-hover">API Reference</a>
llms.txt:llms.txt:        <a href="https://github.com/twardoch/vexy_json" class="link link-hover"
llms.txt-llms.txt-          >Source Code</a
llms.txt-llms.txt-        >
llms.txt:llms.txt:        <a href="https://crates.io/crates/vexy_json" class="link link-hover"
llms.txt-llms.txt-          >crates.io</a
llms.txt-llms.txt-        >
llms.txt-llms.txt-      </div>
llms.txt-llms.txt-      <div>
llms.txt:llms.txt:        <p>vexy_json - A forgiving JSON parser. Built with Rust and WebAssembly.</p>
llms.txt-llms.txt-      </div>
llms.txt-llms.txt-    </footer>
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_comma_one.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_comma_one_tokens.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_comment_tokens.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_implicit_array.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_lookahead.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_test.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_trailing_comma.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/parser_comparison.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/plugin_examples.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/profile_parser.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/recursive_parser.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/simple.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/streaming_example.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_comment.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_comment_with_value.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_implicit_array.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_implicit_objects.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_inline_comment.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_number_types.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_single_brace.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_single_quote.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_unquoted.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/trace_comment_parse.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```toml
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json-core-fuzz"
llms.txt-llms.txt-version = "0.0.0"
llms.txt-llms.txt-publish = false
llms.txt-llms.txt-edition = "2021"
--
llms.txt-llms.txt-libfuzzer-sys = "0.4"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "../crates/core"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json]
llms.txt-llms.txt-path = ".."
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/comments.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/fuzz_target_1.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/json_structure.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/numbers.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/repair.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/streaming.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/strings.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/unicode.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/unquoted_keys.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-    && rm -rf /var/lib/apt/lists/*
llms.txt-llms.txt-
llms.txt-llms.txt-# Copy the project source
llms.txt:llms.txt:COPY . $SRC/vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-# Set the working directory
llms.txt:llms.txt:WORKDIR $SRC/vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-# Copy the build script
llms.txt-llms.txt-COPY oss-fuzz/build.sh $SRC/build.sh
--
llms.txt-llms.txt-source $HOME/.cargo/env
llms.txt-llms.txt-
llms.txt-llms.txt-# Navigate to the project directory
llms.txt:llms.txt:cd $SRC/vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-# Build the project
llms.txt-llms.txt-cargo build --release
--
llms.txt-llms.txt-```yaml
llms.txt-llms.txt-# this_file: oss-fuzz/project.yaml
llms.txt-llms.txt-
llms.txt:llms.txt:homepage: "https://github.com/twardoch/pub/vexy_json"
llms.txt-llms.txt-language: rust
llms.txt-llms.txt-primary_contact: "adam@twardoch.com"
llms.txt-llms.txt-auto_ccs:
--
llms.txt-llms.txt-coverage_extra_args: "--target-dir=/tmp/coverage"
llms.txt-llms.txt-
llms.txt-llms.txt-# Additional configuration
llms.txt:llms.txt:main_repo: "https://github.com/twardoch/pub/vexy_json"
llms.txt-llms.txt-file_github_issue: true
llms.txt-llms.txt-```
llms.txt-llms.txt-
--
llms.txt-llms.txt-#!/bin/bash
llms.txt-llms.txt-# this_file: build-wasm.sh
llms.txt-llms.txt-
llms.txt:llms.txt:# WebAssembly Build Script for vexy_json
llms.txt-llms.txt-# Automated build script using wasm-pack with configurable dev/release modes
llms.txt-llms.txt-# Outputs to docs/pkg/ directory for web integration
llms.txt-llms.txt-
--
llms.txt-llms.txt-BLUE='\033[0;34m'
llms.txt-llms.txt-NC='\033[0m' # No Color
llms.txt-llms.txt-
llms.txt:llms.txt:echo -e "${BLUE}🔧 vexy_json WebAssembly Build Script${NC}"
llms.txt-llms.txt-echo "=================================================="
llms.txt-llms.txt-echo -e "Build mode: ${YELLOW}$BUILD_MODE${NC}"
llms.txt-llms.txt-echo -e "Output directory: ${YELLOW}$OUTPUT_DIR${NC}"
--
llms.txt-llms.txt-fi
llms.txt-llms.txt-
llms.txt-llms.txt-# Additional optimization with wasm-opt if available
llms.txt:llms.txt:if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" ] && command -v wasm-opt &>/dev/null; then
llms.txt-llms.txt-    echo -e "${BLUE}🔧 Optimizing WASM bundle with wasm-opt...${NC}"
llms.txt:llms.txt:    ORIGINAL_SIZE=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt:llms.txt:    wasm-opt -Oz "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" -o "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt"
llms.txt:llms.txt:    if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt" ]; then
llms.txt:llms.txt:        mv "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt" "$OUTPUT_DIR/vexy_json_wasm_bg.wasm"
llms.txt:llms.txt:        OPTIMIZED_SIZE=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt-llms.txt-        REDUCTION=$((ORIGINAL_SIZE - OPTIMIZED_SIZE))
llms.txt-llms.txt-        echo -e "${GREEN}✅ Additional optimization saved ${YELLOW}$REDUCTION bytes${NC}"
llms.txt-llms.txt-    fi
llms.txt-llms.txt-fi
llms.txt-llms.txt-
llms.txt-llms.txt-# Report bundle size
llms.txt:llms.txt:if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" ]; then
llms.txt:llms.txt:    WASM_SIZE=$(du -h "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" | cut -f1)
llms.txt-llms.txt-    echo -e "${GREEN}📦 Final WASM bundle size: ${YELLOW}$WASM_SIZE${NC}"
llms.txt-llms.txt-
llms.txt-llms.txt-    # Size warnings
llms.txt:llms.txt:    WASM_SIZE_BYTES=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt-llms.txt-    if [ "$WASM_SIZE_BYTES" -gt 1048576 ]; then # 1MB
llms.txt-llms.txt-        echo -e "${YELLOW}⚠️  Warning: WASM bundle is larger than 1MB${NC}"
llms.txt-llms.txt-        echo "   Consider optimizing for web deployment"
--
llms.txt-llms.txt-echo
llms.txt-llms.txt-echo -e "${BLUE}Example usage in HTML:${NC}"
llms.txt-llms.txt-echo "  <script type=\"module\">"
llms.txt:llms.txt:echo "    import init, { parse_json } from './pkg/vexy_json.js';"
llms.txt-llms.txt-echo "    await init();"
llms.txt-llms.txt-echo "    const result = parse_json('{\"test\": true}');"
llms.txt-llms.txt-echo "  </script>"
--
llms.txt-llms.txt-    # Generate a compressed code snapshot for LLM consumption
llms.txt-llms.txt-    /Library/Frameworks/Python.framework/Versions/3.12/bin/uvx codetoprompt --compress --output llms.txt --exclude "*.svg,.specstory,*.md,*.txt,ref,testdata,*.lock,target,benches" .
llms.txt-llms.txt-
llms.txt:llms.txt:    echo "Building the vexy_json project..."
llms.txt-llms.txt-    # Build the project in release mode for optimized binaries
llms.txt-llms.txt-    /Users/adam/.cargo/bin/cargo build --release
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-    echo "Build and verification complete."
llms.txt-llms.txt-    echo ""
llms.txt:llms.txt:    echo "Library built at: ./target/release/libvexy_json.rlib"
llms.txt:llms.txt:    echo "Documentation at: ./target/doc/vexy_json/index.html"
llms.txt-llms.txt-    echo ""
llms.txt:llms.txt:    echo "To use vexy_json in your project, add to Cargo.toml:"
llms.txt:llms.txt:    echo '  vexy_json = { path = "'$(pwd)'" }'
llms.txt-llms.txt-    echo ""
llms.txt-llms.txt-    echo "Example usage:"
llms.txt:llms.txt:    echo "  use vexy_json::parse;"
llms.txt-llms.txt-    echo "  let value = parse(\"'hello', 'world'\").unwrap();"
llms.txt-llms.txt-
llms.txt-llms.txt-} >build.log.txt 2>&1
--
llms.txt-llms.txt-echo "'a', 'b', 'c'" | /Users/adam/.cargo/bin/cargo run --example test_implicit_array 2>/dev/null | grep -A1 "'a'" || true
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/scripts/cross-browser-test.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-async function runBrowserTests((browserConfig, deviceConfig = null))
--
llms.txt-llms.txt-    local output_dir="$PROJECT_ROOT/target/$target/release"
llms.txt-llms.txt-    mkdir -p "$output_dir"
llms.txt-llms.txt-    
llms.txt:llms.txt:    if $build_cmd build --release --bin vexy_json --target "$target"; then
llms.txt-llms.txt-        # Copy binary to build directory
llms.txt:llms.txt:        local binary_name="vexy_json"
llms.txt-llms.txt-        if [[ "$target" == *"windows"* ]]; then
llms.txt:llms.txt:            binary_name="vexy_json.exe"
llms.txt-llms.txt-        fi
llms.txt-llms.txt-        
llms.txt:llms.txt:        local output_name="vexy_json-$VERSION-$target"
llms.txt-llms.txt-        if [[ "$target" == *"windows"* ]]; then
llms.txt-llms.txt-            output_name="$output_name.exe"
llms.txt-llms.txt-        fi
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Create archives
llms.txt-llms.txt-    cd "$BUILD_DIR"
llms.txt:llms.txt:    tar -czf "vexy_json-$VERSION-wasm-web.tar.gz" wasm-web/
llms.txt:llms.txt:    tar -czf "vexy_json-$VERSION-wasm-nodejs.tar.gz" wasm-nodejs/
llms.txt-llms.txt-    cd "$PROJECT_ROOT"
llms.txt-llms.txt-    
llms.txt-llms.txt-    return 0
--
llms.txt-llms.txt-create_universal_macos() {
llms.txt-llms.txt-    log "Creating universal macOS binary..."
llms.txt-llms.txt-    
llms.txt:llms.txt:    local intel_binary="$BUILD_DIR/vexy_json-$VERSION-x86_64-apple-darwin"
llms.txt:llms.txt:    local arm_binary="$BUILD_DIR/vexy_json-$VERSION-aarch64-apple-darwin"
llms.txt:llms.txt:    local universal_binary="$BUILD_DIR/vexy_json-$VERSION-universal-apple-darwin"
llms.txt-llms.txt-    
llms.txt-llms.txt-    if [[ -f "$intel_binary" && -f "$arm_binary" ]]; then
llms.txt-llms.txt-        if command -v lipo &> /dev/null; then
--
llms.txt-llms.txt-    cd "$BUILD_DIR"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Create individual archives for each binary
llms.txt:llms.txt:    for file in vexy_json-$VERSION-*; do
llms.txt-llms.txt-        if [[ -f "$file" && "$file" != *.tar.gz && "$file" != *.zip ]]; then
llms.txt-llms.txt-            local archive_name="${file}.tar.gz"
llms.txt-llms.txt-            tar -czf "$archive_name" "$file"
--
llms.txt-llms.txt-    done
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Create a comprehensive archive with all binaries
llms.txt:llms.txt:    tar -czf "vexy_json-$VERSION-all-platforms.tar.gz" vexy_json-$VERSION-*
llms.txt:llms.txt:    success "Created comprehensive archive: vexy_json-$VERSION-all-platforms.tar.gz"
llms.txt-llms.txt-    
llms.txt-llms.txt-    cd "$PROJECT_ROOT"
llms.txt-llms.txt-}
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Generate SHA256 checksums
llms.txt-llms.txt-    if command -v sha256sum &> /dev/null; then
llms.txt:llms.txt:        sha256sum vexy_json-$VERSION-* > checksums.sha256
llms.txt-llms.txt-    elif command -v shasum &> /dev/null; then
llms.txt:llms.txt:        shasum -a 256 vexy_json-$VERSION-* > checksums.sha256
llms.txt-llms.txt-    else
llms.txt-llms.txt-        warning "No SHA256 utility found, skipping checksum generation"
llms.txt-llms.txt-        cd "$PROJECT_ROOT"
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    if [[ -d "$BUILD_DIR" ]]; then
llms.txt-llms.txt-        echo -e "${BLUE}Generated files:${NC}"
llms.txt:llms.txt:        ls -la "$BUILD_DIR" | grep -E "(vexy_json-|checksums)" | while read -r line; do
llms.txt-llms.txt-            echo "  $line"
llms.txt-llms.txt-        done
llms.txt-llms.txt-    fi
--
llms.txt-llms.txt-PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
llms.txt-llms.txt-VERSION="${VERSION:-$(grep '^version' "$PROJECT_ROOT/Cargo.toml" | head -1 | cut -d'"' -f2)}"
llms.txt-llms.txt-BUILD_DIR="$PROJECT_ROOT/target/macos-installer"
llms.txt:llms.txt:APP_NAME="vexy_json"
llms.txt:llms.txt:BUNDLE_ID="com.twardoch.vexy_json"
llms.txt:llms.txt:DMG_NAME="vexy_json-$VERSION-macos.dmg"
llms.txt-llms.txt-
llms.txt-llms.txt-# Utility functions
llms.txt-llms.txt-log() {
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Build for Intel
llms.txt-llms.txt-    log "Building for Intel (x86_64)..."
llms.txt:llms.txt:    cargo build --release --bin vexy_json --target x86_64-apple-darwin
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Build for Apple Silicon
llms.txt-llms.txt-    log "Building for Apple Silicon (aarch64)..."
llms.txt:llms.txt:    cargo build --release --bin vexy_json --target aarch64-apple-darwin
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Create universal binary
llms.txt-llms.txt-    log "Creating universal binary..."
llms.txt-llms.txt-    mkdir -p "$PROJECT_ROOT/target/release"
llms.txt:llms.txt:    lipo -create -output "$PROJECT_ROOT/target/release/vexy_json" \
llms.txt:llms.txt:        "$PROJECT_ROOT/target/x86_64-apple-darwin/release/vexy_json" \
llms.txt:llms.txt:        "$PROJECT_ROOT/target/aarch64-apple-darwin/release/vexy_json"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Verify the universal binary
llms.txt:llms.txt:    if lipo -info "$PROJECT_ROOT/target/release/vexy_json" | grep -q "x86_64 arm64"; then
llms.txt-llms.txt-        success "Universal binary created successfully"
llms.txt-llms.txt-    else
llms.txt-llms.txt-        error "Failed to create universal binary"
--
llms.txt-llms.txt-    mkdir -p "$pkg_root/usr/local/bin"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Copy the universal binary
llms.txt:llms.txt:    cp "$PROJECT_ROOT/target/release/vexy_json" "$pkg_root/usr/local/bin/"
llms.txt:llms.txt:    chmod +x "$pkg_root/usr/local/bin/vexy_json"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Create scripts directory for pre/post install scripts
llms.txt-llms.txt-    mkdir -p "$BUILD_DIR/scripts"
--
llms.txt-llms.txt-done
llms.txt-llms.txt-
llms.txt-llms.txt-# Verify installation
llms.txt:llms.txt:if command -v vexy_json &> /dev/null; then
llms.txt-llms.txt-    echo "Vexy JSON installed successfully!"
llms.txt:llms.txt:    echo "Version: $(vexy_json --version 2>/dev/null || echo 'Unknown')"
llms.txt:llms.txt:    echo "You may need to restart your terminal or run 'source ~/.bashrc' (or similar) to use vexy_json."
llms.txt-llms.txt-else
llms.txt:llms.txt:    echo "Installation completed, but vexy_json may not be in your PATH."
llms.txt-llms.txt-    echo "Try restarting your terminal or adding /usr/local/bin to your PATH."
llms.txt-llms.txt-fi
llms.txt-llms.txt-
--
llms.txt-llms.txt-    cat > "$dmg_temp_dir/README.txt" << EOF
llms.txt-llms.txt-VEXY_JSON v$VERSION - High-Performance JSON Parser
llms.txt-llms.txt-
llms.txt:llms.txt:This installer will install the vexy_json command-line tool to /usr/local/bin.
llms.txt-llms.txt-
llms.txt-llms.txt-Installation Instructions:
llms.txt:llms.txt:1. Double-click on vexy_json.pkg to run the installer
llms.txt-llms.txt-2. Follow the installation prompts
llms.txt-llms.txt-3. Restart your terminal or run 'source ~/.bashrc' to update your PATH
llms.txt-llms.txt-
llms.txt:llms.txt:After installation, you can use vexy_json from the command line:
llms.txt:llms.txt:  echo '{"key": "value"}' | vexy_json
llms.txt:llms.txt:  vexy_json --help
llms.txt-llms.txt-
llms.txt-llms.txt-Features:
llms.txt-llms.txt-• SIMD-accelerated parsing (2-3x faster)
--
llms.txt-llms.txt-• Enhanced error recovery with suggestions
llms.txt-llms.txt-
llms.txt-llms.txt-For more information:
llms.txt:llms.txt:  Website: https://github.com/twardoch/vexy_json
llms.txt:llms.txt:  Documentation: https://twardoch.github.io/vexy_json/
llms.txt-llms.txt-
llms.txt-llms.txt-License: MIT OR Apache-2.0
llms.txt-llms.txt-EOF
--
llms.txt-llms.txt-        log "DMG size: $dmg_size"
llms.txt-llms.txt-        
llms.txt-llms.txt-        # Verify DMG can be mounted
llms.txt:llms.txt:        if hdiutil attach "$final_dmg" -readonly -nobrowse -mountpoint "/tmp/vexy_json-verify-$$"; then
llms.txt-llms.txt-            log "DMG verification: mountable ✓"
llms.txt:llms.txt:            hdiutil detach "/tmp/vexy_json-verify-$$" || true
llms.txt-llms.txt-        else
llms.txt-llms.txt-            warning "DMG verification failed - may not be mountable"
llms.txt-llms.txt-        fi
--
llms.txt-llms.txt-    log "Creating ZIP alternative..."
llms.txt-llms.txt-    
llms.txt-llms.txt-    local zip_dir="$BUILD_DIR/zip-package"
llms.txt:llms.txt:    local zip_file="$PROJECT_ROOT/vexy_json-$VERSION-macos.zip"
llms.txt-llms.txt-    
llms.txt-llms.txt-    mkdir -p "$zip_dir"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Copy binary
llms.txt:llms.txt:    cp "$PROJECT_ROOT/target/release/vexy_json" "$zip_dir/"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Create installation script
llms.txt-llms.txt-    cat > "$zip_dir/install.sh" << 'EOF'
--
llms.txt-llms.txt-# Check if we have write permissions
llms.txt-llms.txt-if [[ ! -w "/usr/local/bin" ]]; then
llms.txt-llms.txt-    echo "Note: You may be prompted for your password to install to /usr/local/bin"
llms.txt:llms.txt:    sudo cp vexy_json /usr/local/bin/
llms.txt:llms.txt:    sudo chmod +x /usr/local/bin/vexy_json
llms.txt-llms.txt-else
llms.txt:llms.txt:    cp vexy_json /usr/local/bin/
llms.txt:llms.txt:    chmod +x /usr/local/bin/vexy_json
llms.txt-llms.txt-fi
llms.txt-llms.txt-
llms.txt-llms.txt-echo "Vexy JSON installed successfully!"
llms.txt:llms.txt:echo "Try: vexy_json --help"
llms.txt-llms.txt-EOF
llms.txt-llms.txt-    
llms.txt-llms.txt-    chmod +x "$zip_dir/install.sh"
--
llms.txt-llms.txt-    cat > "$zip_dir/README.txt" << EOF
llms.txt-llms.txt-VEXY_JSON v$VERSION - Simple ZIP Installation
llms.txt-llms.txt-
llms.txt:llms.txt:This is a simple ZIP package containing the vexy_json binary.
llms.txt-llms.txt-
llms.txt-llms.txt-Installation:
llms.txt-llms.txt-1. Run: ./install.sh
llms.txt-llms.txt-   OR
llms.txt:llms.txt:2. Manually copy 'vexy_json' to a directory in your PATH
llms.txt-llms.txt-
llms.txt-llms.txt-Usage:
llms.txt:llms.txt:  echo '{"key": "value"}' | vexy_json
llms.txt:llms.txt:  vexy_json --help
llms.txt-llms.txt-
llms.txt-llms.txt-For the full installer experience, download the .dmg file instead.
llms.txt-llms.txt-EOF
--
llms.txt-llms.txt-    log "Verifying installation components..."
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Check if binary works
llms.txt:llms.txt:    if "$PROJECT_ROOT/target/release/vexy_json" --version &> /dev/null; then
llms.txt-llms.txt-        success "Binary verification: working ✓"
llms.txt-llms.txt-    else
llms.txt-llms.txt-        error "Binary verification failed"
--
llms.txt-llms.txt-    fi
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Check package contents
llms.txt:llms.txt:    if pkgutil --payload-files "$BUILD_DIR/$APP_NAME.pkg" | grep -q "usr/local/bin/vexy_json"; then
llms.txt-llms.txt-        success "Package verification: contains binary ✓"
llms.txt-llms.txt-    else
llms.txt-llms.txt-        error "Package verification failed"
--
llms.txt-llms.txt-    echo
llms.txt-llms.txt-    echo -e "${BLUE}Generated files:${NC}"
llms.txt-llms.txt-    echo "  📦 DMG Installer: $DMG_NAME"
llms.txt:llms.txt:    if [[ -f "$PROJECT_ROOT/vexy_json-$VERSION-macos.zip" ]]; then
llms.txt:llms.txt:        echo "  📁 ZIP Package: vexy_json-$VERSION-macos.zip"
llms.txt-llms.txt-    fi
llms.txt-llms.txt-    echo "  🔧 PKG Installer: $BUILD_DIR/$APP_NAME.pkg"
llms.txt:llms.txt:    echo "  🔨 Universal Binary: $PROJECT_ROOT/target/release/vexy_json"
llms.txt-llms.txt-    echo
llms.txt-llms.txt-    
llms.txt-llms.txt-    echo -e "${BLUE}Installation instructions for users:${NC}"
llms.txt-llms.txt-    echo "  1. Download and open $DMG_NAME"
llms.txt:llms.txt:    echo "  2. Double-click vexy_json.pkg to install"
llms.txt-llms.txt-    echo "  3. Follow the installer prompts"
llms.txt-llms.txt-    echo "  4. Restart terminal or run 'source ~/.bashrc'"
llms.txt-llms.txt-    echo
llms.txt-llms.txt-    
llms.txt-llms.txt-    echo -e "${BLUE}Binary details:${NC}"
llms.txt:llms.txt:    lipo -info "$PROJECT_ROOT/target/release/vexy_json" | sed 's/^/  /'
llms.txt-llms.txt-    echo
llms.txt-llms.txt-    
llms.txt-llms.txt-    echo -e "${BLUE}Next steps:${NC}"
--
llms.txt-llms.txt-
llms.txt-llms.txt-```json
llms.txt-llms.txt-{
llms.txt:llms.txt:    "name": "vexy_json-testing-scripts",
llms.txt-llms.txt-    "version": "1.0.0",
llms.txt-llms.txt-    "lockfileVersion": 3,
llms.txt-llms.txt-    "requires": true,
--
llms.txt-llms.txt-```bash
llms.txt-llms.txt-#!/bin/bash
llms.txt-llms.txt-# this_file: scripts/package-macos.sh
llms.txt:llms.txt:# Package vexy_json for macOS as a .pkg inside a .dmg
llms.txt-llms.txt-
llms.txt-llms.txt-set -e
llms.txt-llms.txt-
llms.txt-llms.txt-# Configuration
llms.txt:llms.txt:BINARY_NAME="vexy_json"
llms.txt-llms.txt-VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
llms.txt:llms.txt:BUNDLE_ID="com.twardoch.vexy_json"
llms.txt-llms.txt-INSTALL_LOCATION="/usr/local/bin"
llms.txt-llms.txt-BUILD_DIR="target/macos-package"
llms.txt-llms.txt-PKG_NAME="${BINARY_NAME}-${VERSION}.pkg"
llms.txt-llms.txt-DMG_NAME="${BINARY_NAME}-${VERSION}-macos.dmg"
llms.txt-llms.txt-
llms.txt:llms.txt:echo "Building vexy_json v${VERSION} for macOS..."
llms.txt-llms.txt-
llms.txt-llms.txt-# Clean and create build directory
llms.txt-llms.txt-rm -rf "${BUILD_DIR}"
--
llms.txt-llms.txt-# Create postinstall script to set permissions
llms.txt-llms.txt-cat > "${BUILD_DIR}/scripts/postinstall" << 'EOF'
llms.txt-llms.txt-#!/bin/bash
llms.txt:llms.txt:chmod 755 /usr/local/bin/vexy_json
llms.txt-llms.txt-exit 0
llms.txt-llms.txt-EOF
llms.txt-llms.txt-chmod +x "${BUILD_DIR}/scripts/postinstall"
--
llms.txt-llms.txt-cat > "${BUILD_DIR}/distribution.xml" << EOF
llms.txt-llms.txt-<?xml version="1.0" encoding="UTF-8"?>
llms.txt-llms.txt-<installer-gui-script minSpecVersion="1">
llms.txt:llms.txt:    <title>vexy_json ${VERSION}</title>
llms.txt-llms.txt-    <organization>com.twardoch</organization>
llms.txt-llms.txt-    <domains enable_anywhere="true"/>
llms.txt-llms.txt-    <installation-check script="pm_install_check();"/>
--
llms.txt-llms.txt-    function pm_install_check() {
llms.txt-llms.txt-        if(system.compareVersions(system.version.ProductVersion,'10.10') &lt; 0) {
llms.txt-llms.txt-            my.result.title = 'Failure';
llms.txt:llms.txt:            my.result.message = 'You need at least macOS 10.10 to install vexy_json.';
llms.txt-llms.txt-            my.result.type = 'Fatal';
llms.txt-llms.txt-            return false;
llms.txt-llms.txt-        }
--
llms.txt-llms.txt-
llms.txt-llms.txt-# Create README for DMG
llms.txt-llms.txt-cat > "${BUILD_DIR}/dmg/README.txt" << EOF
llms.txt:llms.txt:vexy_json ${VERSION} for macOS
llms.txt-llms.txt-========================
llms.txt-llms.txt-
llms.txt-llms.txt-A forgiving JSON parser - Rust port of jsonic
llms.txt-llms.txt-
llms.txt-llms.txt-Installation:
llms.txt-llms.txt-1. Double-click on ${PKG_NAME} to install
llms.txt:llms.txt:2. The 'vexy_json' command will be installed to /usr/local/bin
llms.txt-llms.txt-3. You may need to restart your terminal after installation
llms.txt-llms.txt-
llms.txt-llms.txt-Usage:
llms.txt:llms.txt:  echo '{"foo": "bar",}' | vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-For more information, visit:
llms.txt:llms.txt:https://github.com/twardoch/vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-EOF
llms.txt-llms.txt-
llms.txt-llms.txt-# Create the DMG
llms.txt-llms.txt-echo "Creating DMG..."
llms.txt:llms.txt:hdiutil create -volname "vexy_json ${VERSION}" \
llms.txt-llms.txt-    -srcfolder "${BUILD_DIR}/dmg" \
llms.txt-llms.txt-    -ov -format UDZO \
llms.txt-llms.txt-    "${DMG_NAME}"
--
llms.txt-llms.txt-
llms.txt-llms.txt-echo "✅ Successfully created ${DMG_NAME}"
llms.txt-llms.txt-echo "   Package contains ${PKG_NAME} installer"
llms.txt:llms.txt:echo "   Will install vexy_json to ${INSTALL_LOCATION}"
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt-llms.txt-Relative File Path: scripts/package.json
llms.txt-llms.txt-
llms.txt-llms.txt-```json
llms.txt-llms.txt-{
llms.txt:llms.txt:    "name": "vexy_json-testing-scripts",
llms.txt-llms.txt-    "version": "1.0.0",
llms.txt:llms.txt:    "description": "Testing and monitoring scripts for vexy_json project",
llms.txt-llms.txt-    "main": "cross-browser-test.js",
llms.txt-llms.txt-... (file content truncated to first 5 lines)
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/scripts/performance-monitor.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-class VexyJsonPerformanceMonitor {
--
llms.txt-llms.txt-    log_info "GitHub Actions release workflow triggered!"
llms.txt-llms.txt-    echo
llms.txt-llms.txt-    echo "You can monitor the release progress at:"
llms.txt:llms.txt:    echo "https://github.com/twardoch/vexy_json/actions"
llms.txt-llms.txt-    echo
llms.txt-llms.txt-    echo "Or watch it here:"
llms.txt-llms.txt-    
--
llms.txt-llms.txt-    RUN_ID=$(gh run list --workflow=release.yml --limit 1 --json databaseId --jq '.[0].databaseId')
llms.txt-llms.txt-    
llms.txt-llms.txt-    if [ -n "$RUN_ID" ]; then
llms.txt:llms.txt:        echo "Workflow run: https://github.com/twardoch/vexy_json/actions/runs/$RUN_ID"
llms.txt-llms.txt-        echo
llms.txt-llms.txt-        echo "Watching workflow progress..."
llms.txt-llms.txt-        gh run watch "$RUN_ID"
--
llms.txt-llms.txt-    run_cmd "mkdir -p '$BUILD_DIR'" "Create build directory"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Build release binary
llms.txt:llms.txt:    run_cmd "cargo build --release --bin vexy_json" "Build release CLI binary"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Build library
llms.txt-llms.txt-    run_cmd "cargo build --release --lib" "Build release library"
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Copy artifacts
llms.txt-llms.txt-    if [ "$DRY_RUN" = false ]; then
llms.txt:llms.txt:        if [[ -f "target/release/vexy_json" ]]; then
llms.txt:llms.txt:            cp "target/release/vexy_json" "$BUILD_DIR/vexy_json-$VERSION-$(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]')"
llms.txt-llms.txt-        else
llms.txt:llms.txt:            warning "Release binary not found at target/release/vexy_json"
llms.txt-llms.txt-        fi
llms.txt-llms.txt-    fi
llms.txt-llms.txt-    
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    log "Building macOS installer..."
llms.txt-llms.txt-    
llms.txt:llms.txt:    local app_name="vexy_json"
llms.txt-llms.txt-    local installer_dir="$BUILD_DIR/macos-installer"
llms.txt:llms.txt:    local dmg_name="vexy_json-$VERSION-macos.dmg"
llms.txt-llms.txt-    
llms.txt-llms.txt-    run_cmd "mkdir -p '$installer_dir/pkg-root/usr/local/bin'" "Create installer structure"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Copy binary
llms.txt-llms.txt-    if [ "$DRY_RUN" = false ]; then
llms.txt:llms.txt:        cp "target/release/vexy_json" "$installer_dir/pkg-root/usr/local/bin/"
llms.txt-llms.txt-    fi
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Create package
llms.txt:llms.txt:    run_cmd "pkgbuild --root '$installer_dir/pkg-root' --identifier 'com.twardoch.vexy_json' --version '$VERSION' --install-location '/' '$installer_dir/$app_name.pkg'" "Create pkg installer"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Create DMG
llms.txt-llms.txt-    local dmg_temp_dir="$installer_dir/dmg-temp"
--
llms.txt-llms.txt-        cat > "$dmg_temp_dir/README.txt" << EOF
llms.txt-llms.txt-VEXY_JSON v$VERSION
llms.txt-llms.txt-
llms.txt:llms.txt:This package will install the vexy_json command-line tool to /usr/local/bin.
llms.txt-llms.txt-
llms.txt:llms.txt:After installation, you can use vexy_json from the command line:
llms.txt:llms.txt:  echo '{"key": "value"}' | vexy_json
llms.txt-llms.txt-
llms.txt:llms.txt:For more information, visit: https://github.com/twardoch/vexy_json
llms.txt-llms.txt-EOF
llms.txt-llms.txt-    fi
llms.txt-llms.txt-    
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Build static binary for Linux
llms.txt-llms.txt-    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
llms.txt:llms.txt:        run_cmd "cargo build --release --target x86_64-unknown-linux-musl --bin vexy_json" "Build static Linux binary"
llms.txt-llms.txt-        
llms.txt-llms.txt-        if [ "$DRY_RUN" = false ]; then
llms.txt:llms.txt:            cp "target/x86_64-unknown-linux-musl/release/vexy_json" "$BUILD_DIR/vexy_json-$VERSION-x86_64-linux-musl"
llms.txt-llms.txt-        fi
llms.txt-llms.txt-    else
llms.txt-llms.txt-        warning "Skipping Linux builds (not on Linux)"
--
llms.txt-llms.txt-create_release_archive() {
llms.txt-llms.txt-    log "Creating release archives..."
llms.txt-llms.txt-    
llms.txt:llms.txt:    local archive_dir="$BUILD_DIR/vexy_json-$VERSION"
llms.txt-llms.txt-    run_cmd "mkdir -p '$archive_dir'" "Create archive directory"
llms.txt-llms.txt-    
llms.txt-llms.txt-    if [ "$DRY_RUN" = false ]; then
--
llms.txt-llms.txt-        done
llms.txt-llms.txt-        
llms.txt-llms.txt-        # Copy built artifacts
llms.txt:llms.txt:        if [[ -f "target/release/vexy_json" ]]; then
llms.txt:llms.txt:            cp "target/release/vexy_json" "$archive_dir/" || warning "Failed to copy binary"
llms.txt-llms.txt-        else
llms.txt-llms.txt-            warning "No release binary found to include in archive"
llms.txt-llms.txt-        fi
llms.txt-llms.txt-        
llms.txt-llms.txt-        # Create source archive
llms.txt:llms.txt:        git archive --format=tar.gz --prefix="vexy_json-$VERSION-src/" HEAD > "$BUILD_DIR/vexy_json-$VERSION-src.tar.gz" || {
llms.txt-llms.txt-            warning "Failed to create source archive"
llms.txt-llms.txt-        }
llms.txt-llms.txt-        
llms.txt-llms.txt-        # Create binary archive if we have files
llms.txt-llms.txt-        if [[ -d "$archive_dir" ]] && [[ -n $(ls -A "$archive_dir") ]]; then
llms.txt-llms.txt-            cd "$BUILD_DIR"
llms.txt:llms.txt:            tar -czf "vexy_json-$VERSION-$(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]').tar.gz" "vexy_json-$VERSION" || {
llms.txt-llms.txt-                warning "Failed to create binary archive"
llms.txt-llms.txt-            }
llms.txt-llms.txt-            cd "$PROJECT_ROOT"
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    if ! command -v gh &> /dev/null; then
llms.txt-llms.txt-        warning "GitHub CLI not found, skipping automated release creation"
llms.txt:llms.txt:        info "Manually create release at: https://github.com/twardoch/vexy_json/releases/new?tag=v$VERSION"
llms.txt-llms.txt-        return 0
llms.txt-llms.txt-    fi
llms.txt-llms.txt-    
--
llms.txt-llms.txt-## 📦 Installation
llms.txt-llms.txt-
llms.txt-llms.txt-```bash
llms.txt:llms.txt:cargo install vexy_json --version 2.0.0
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt-llms.txt-Or download pre-built binaries from the assets below.
llms.txt-llms.txt-
llms.txt-llms.txt----
llms.txt-llms.txt-
llms.txt:llms.txt:**Full Changelog**: https://github.com/twardoch/vexy_json/compare/v1.5.27...v2.0.0
llms.txt-llms.txt-EOF
llms.txt-llms.txt-    fi
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Collect assets
llms.txt-llms.txt-    local assets=()
llms.txt:llms.txt:    if [[ -f "$BUILD_DIR/vexy_json-$VERSION-macos.dmg" ]]; then
llms.txt:llms.txt:        assets+=("$BUILD_DIR/vexy_json-$VERSION-macos.dmg")
llms.txt-llms.txt-    fi
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Find all tar.gz files
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    warning "Crates.io publishing requires manual intervention"
llms.txt-llms.txt-    info "Run the following commands to publish:"
llms.txt:llms.txt:    info "  cargo publish -p vexy_json-test-utils"
llms.txt:llms.txt:    info "  cargo publish -p vexy_json-core"
llms.txt:llms.txt:    info "  cargo publish -p vexy_json-serde"
llms.txt:llms.txt:    info "  cargo publish -p vexy_json-cli"
llms.txt:llms.txt:    info "  cargo publish -p vexy_json-wasm"
llms.txt:llms.txt:    info "  cargo publish -p vexy_json-c-api"
llms.txt:llms.txt:    info "  cargo publish -p vexy_json"
llms.txt-llms.txt-    
llms.txt-llms.txt-    if [ "$DRY_RUN" = false ]; then
llms.txt-llms.txt-        read -p "Publish to crates.io now? (y/N): " -n 1 -r
llms.txt-llms.txt-        echo
llms.txt-llms.txt-        if [[ $REPLY =~ ^[Yy]$ ]]; then
llms.txt-llms.txt-            # Publish in dependency order
llms.txt:llms.txt:            run_cmd "cargo publish -p vexy_json-test-utils" "Publish vexy_json-test-utils"
llms.txt-llms.txt-            sleep 10  # Wait for crates.io to process
llms.txt:llms.txt:            run_cmd "cargo publish -p vexy_json-core" "Publish vexy_json-core"
llms.txt-llms.txt-            sleep 10
llms.txt:llms.txt:            run_cmd "cargo publish -p vexy_json-serde" "Publish vexy_json-serde"
llms.txt-llms.txt-            sleep 10
llms.txt:llms.txt:            run_cmd "cargo publish -p vexy_json-cli" "Publish vexy_json-cli"
llms.txt-llms.txt-            sleep 10
llms.txt:llms.txt:            run_cmd "cargo publish -p vexy_json-wasm" "Publish vexy_json-wasm"
llms.txt-llms.txt-            sleep 10
llms.txt:llms.txt:            run_cmd "cargo publish -p vexy_json-c-api" "Publish vexy_json-c-api"
llms.txt-llms.txt-            sleep 10
llms.txt:llms.txt:            run_cmd "cargo publish -p vexy_json" "Publish main vexy_json crate"
llms.txt-llms.txt-            
llms.txt-llms.txt-            success "All crates published to crates.io"
llms.txt-llms.txt-        fi
--
llms.txt-llms.txt-    echo -e "${BLUE}Release artifacts created in: $BUILD_DIR${NC}"
llms.txt-llms.txt-    echo -e "${BLUE}Git tag created and pushed: v$VERSION${NC}"
llms.txt-llms.txt-    echo -e "${BLUE}Next steps:${NC}"
llms.txt:llms.txt:    echo "  1. Verify GitHub release: https://github.com/twardoch/vexy_json/releases"
llms.txt-llms.txt-    echo "  2. Update documentation websites"
llms.txt-llms.txt-    echo "  3. Announce the release"
llms.txt-llms.txt-    echo
--
llms.txt-llms.txt-
llms.txt-llms.txt-# Update workspace dependencies
llms.txt-llms.txt-echo "Updating workspace dependencies..."
llms.txt:llms.txt:update_file "Cargo.toml" 'vexy_json-core = { version = ".*"' "s/vexy_json-core = { version = \".*\"/vexy_json-core = { version = \"$VERSION\"/"
llms.txt:llms.txt:update_file "Cargo.toml" 'vexy_json = { version = ".*"' "s/vexy_json = { version = \".*\"/vexy_json = { version = \"$VERSION\"/"
llms.txt-llms.txt-
llms.txt-llms.txt-# Update Python bindings
llms.txt-llms.txt-echo "Updating Python bindings..."
--
llms.txt-llms.txt-
llms.txt-llms.txt-# Update Homebrew formula (only the version, not the URL)
llms.txt-llms.txt-echo "Updating Homebrew formula..."
llms.txt:llms.txt:if [ -f "Formula/vexy_json.rb" ]; then
llms.txt-llms.txt-    # Only update if this looks like a release version (not -dev)
llms.txt-llms.txt-    if [[ ! "$VERSION" =~ -dev$ ]]; then
llms.txt:llms.txt:        update_file "Formula/vexy_json.rb" 'version ".*"' "s/version \".*\"/version \"$VERSION\"/"
llms.txt-llms.txt-        # Note: The URL in the formula should be updated during release
llms.txt-llms.txt-    else
llms.txt-llms.txt-        echo -e "${YELLOW}⚠${NC} Skipping Homebrew formula update for dev version"
--
llms.txt-llms.txt-echo "..."
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/scripts/verify_features.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-function runTest((testCase))
--
llms.txt-llms.txt-async function runAllTests(())
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/debug_comment_line_endings.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/debug_number.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_dot_numbers.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_full_parse.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_implicit.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_parse.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_point_zero.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_positive_numbers.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_rust_parse.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_strict_comment.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_trailing_decimal.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/trace_parse.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/lib.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/basic_tests.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comma_handling.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comment_handling.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/error_handling.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/feature_tests.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/forgiving_features.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/jsonic_advanced_features.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod complex_structures;
--
llms.txt-llms.txt-mod unicode_tests;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/jsonic_compat.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/jsonic_comprehensive_tests.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod basic_parsing;
--
llms.txt-llms.txt-mod error_handling;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/jsonic_real_world_scenarios.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod configuration_files;
--
llms.txt-llms.txt-mod performance_scenarios;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/lexer_tests.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/lib_integration.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/newline_as_comma.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/number_formats.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/property_tests.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct ArbitraryJsonValue {
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/string_handling.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/supported_jsonic.rs
llms.txt-llms.txt-# Language: rust
llms.txt---
llms.txt-crates/c-api/examples/cpp_example.cpp-/**
llms.txt-crates/c-api/examples/cpp_example.cpp- * @file cpp_example.cpp
llms.txt:crates/c-api/examples/cpp_example.cpp: * @brief Example usage of the vexy_json C++ header-only wrapper
llms.txt-crates/c-api/examples/cpp_example.cpp- */
llms.txt-crates/c-api/examples/cpp_example.cpp-
llms.txt-crates/c-api/examples/cpp_example.cpp-#include <iostream>
llms.txt-crates/c-api/examples/cpp_example.cpp-#include <string>
llms.txt:crates/c-api/examples/cpp_example.cpp:#include "../include/vexy_json.hpp"
llms.txt-crates/c-api/examples/cpp_example.cpp-
llms.txt-crates/c-api/examples/cpp_example.cpp-int main() {
llms.txt-crates/c-api/examples/cpp_example.cpp-    // Example 1: Basic parsing with default options
llms.txt-crates/c-api/examples/cpp_example.cpp-    try {
llms.txt:crates/c-api/examples/cpp_example.cpp:        std::string json = vexy_json::parse(R"({"name": "John", "age": 30})");
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cout << "Example 1 - Basic parsing:\n" << json << "\n\n";
llms.txt:crates/c-api/examples/cpp_example.cpp:    } catch (const vexy_json::ParseError& e) {
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cerr << "Parse error: " << e.what() << "\n";
llms.txt-crates/c-api/examples/cpp_example.cpp-    }
llms.txt-crates/c-api/examples/cpp_example.cpp-    
--
llms.txt-crates/c-api/examples/cpp_example.cpp-            trailing: "comma",
llms.txt-crates/c-api/examples/cpp_example.cpp-        })";
llms.txt-crates/c-api/examples/cpp_example.cpp-        
llms.txt:crates/c-api/examples/cpp_example.cpp:        auto options = vexy_json::ParserOptions()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .allowComments()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .allowUnquotedKeys()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .allowSingleQuotes()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .allowTrailingCommas();
llms.txt-crates/c-api/examples/cpp_example.cpp-            
llms.txt:crates/c-api/examples/cpp_example.cpp:        std::string result = vexy_json::parse(forgiving_json, options);
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cout << "Example 2 - Forgiving JSON parsing:\n" << result << "\n\n";
llms.txt:crates/c-api/examples/cpp_example.cpp:    } catch (const vexy_json::ParseError& e) {
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cerr << "Parse error: " << e.what() << "\n";
llms.txt-crates/c-api/examples/cpp_example.cpp-    }
llms.txt-crates/c-api/examples/cpp_example.cpp-    
llms.txt-crates/c-api/examples/cpp_example.cpp-    // Example 3: Using a parser instance for multiple parses
llms.txt-crates/c-api/examples/cpp_example.cpp-    try {
llms.txt:crates/c-api/examples/cpp_example.cpp:        auto options = vexy_json::ParserOptions()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .allowComments()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .allowTrailingCommas()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .enableRepair();
llms.txt-crates/c-api/examples/cpp_example.cpp-            
llms.txt:crates/c-api/examples/cpp_example.cpp:        vexy_json::Parser parser(options);
llms.txt-crates/c-api/examples/cpp_example.cpp-        
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::vector<std::string> inputs = {
llms.txt-crates/c-api/examples/cpp_example.cpp-            R"({"valid": true})",
--
llms.txt-crates/c-api/examples/cpp_example.cpp-                std::string result = parser.parseToString(input);
llms.txt-crates/c-api/examples/cpp_example.cpp-                std::cout << "Input:  " << input << "\n";
llms.txt-crates/c-api/examples/cpp_example.cpp-                std::cout << "Output: " << result << "\n\n";
llms.txt:crates/c-api/examples/cpp_example.cpp:            } catch (const vexy_json::ParseError& e) {
llms.txt-crates/c-api/examples/cpp_example.cpp-                std::cout << "Failed to parse: " << e.what() << "\n\n";
llms.txt-crates/c-api/examples/cpp_example.cpp-            }
llms.txt-crates/c-api/examples/cpp_example.cpp-        }
--
llms.txt-crates/c-api/examples/cpp_example.cpp-            "city": 
llms.txt-crates/c-api/examples/cpp_example.cpp-        })";
llms.txt-crates/c-api/examples/cpp_example.cpp-        
llms.txt:crates/c-api/examples/cpp_example.cpp:        auto options = vexy_json::ParserOptions()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .enableRepair()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .reportRepairs();
llms.txt-crates/c-api/examples/cpp_example.cpp-            
llms.txt:crates/c-api/examples/cpp_example.cpp:        auto result = vexy_json::parseDetailed(broken_json, options);
llms.txt-crates/c-api/examples/cpp_example.cpp-        
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cout << "Example 4 - Detailed parsing with repairs:\n";
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cout << "Output: " << result.json() << "\n";
--
llms.txt-crates/c-api/examples/cpp_example.cpp-            }
llms.txt-crates/c-api/examples/cpp_example.cpp-        }
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cout << "\n";
llms.txt:crates/c-api/examples/cpp_example.cpp:    } catch (const vexy_json::ParseError& e) {
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cerr << "Parse error: " << e.what() << "\n";
llms.txt-crates/c-api/examples/cpp_example.cpp-    }
llms.txt-crates/c-api/examples/cpp_example.cpp-    
--
llms.txt-crates/c-api/examples/cpp_example.cpp-        auto invalid_json = R"({"unclosed": )";
llms.txt-crates/c-api/examples/cpp_example.cpp-        
llms.txt-crates/c-api/examples/cpp_example.cpp-        // This will throw
llms.txt:crates/c-api/examples/cpp_example.cpp:        auto options = vexy_json::ParserOptions(); // Repair disabled by default
llms.txt:crates/c-api/examples/cpp_example.cpp:        std::string result = vexy_json::parse(invalid_json, options);
llms.txt-crates/c-api/examples/cpp_example.cpp-        
llms.txt:crates/c-api/examples/cpp_example.cpp:    } catch (const vexy_json::ParseError& e) {
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cout << "Caught expected error: " << e.what() << "\n\n";
llms.txt-crates/c-api/examples/cpp_example.cpp-    }
llms.txt-crates/c-api/examples/cpp_example.cpp-    
llms.txt-crates/c-api/examples/cpp_example.cpp-    // Example 6: Version information
llms.txt-crates/c-api/examples/cpp_example.cpp-    std::cout << "Example 6 - Version information:\n";
llms.txt:crates/c-api/examples/cpp_example.cpp:    std::cout << "vexy_json version: " << vexy_json::version() << "\n";
llms.txt-crates/c-api/examples/cpp_example.cpp-    
llms.txt-crates/c-api/examples/cpp_example.cpp-    return 0;
llms.txt-crates/c-api/examples/cpp_example.cpp-}
llms.txt---
llms.txt-crates/cli/src/main.rs-// this_file: crates/cli/src/main.rs
llms.txt-crates/cli/src/main.rs-
llms.txt:crates/cli/src/main.rs://! Enhanced vexy_json CLI with comprehensive JSON processing capabilities.
llms.txt-crates/cli/src/main.rs-
llms.txt-crates/cli/src/main.rs-use clap::{Args, Parser};
llms.txt-crates/cli/src/main.rs-use colored::*;
--
llms.txt-crates/cli/src/main.rs-use std::path::PathBuf;
llms.txt-crates/cli/src/main.rs-use thiserror::Error;
llms.txt-crates/cli/src/main.rs-use tokio::time::{sleep, Duration};
llms.txt:crates/cli/src/main.rs:use vexy_json_core::ast::Value;
llms.txt:crates/cli/src/main.rs:use vexy_json_core::error::{EnhancedParseResult, ParsingTier, RepairType};
llms.txt:crates/cli/src/main.rs:use vexy_json_core::{
llms.txt-crates/cli/src/main.rs-    parse_with_detailed_repair_tracking,
llms.txt-crates/cli/src/main.rs-    parse_with_fallback, ParserOptions, ParallelConfig, ParallelParser,
llms.txt-crates/cli/src/main.rs-};
llms.txt-crates/cli/src/main.rs-
llms.txt-crates/cli/src/main.rs-#[derive(Parser, Debug)]
llms.txt-crates/cli/src/main.rs-#[clap(
llms.txt:crates/cli/src/main.rs:    name = "vexy_json", 
llms.txt-crates/cli/src/main.rs-    version = env!("VEXY_JSON_VERSION", env!("CARGO_PKG_VERSION")), 
llms.txt-crates/cli/src/main.rs-    about = "A forgiving JSON parser and processor",
llms.txt:crates/cli/src/main.rs:    long_about = "vexy_json processes JSON with forgiving syntax including comments, trailing commas, unquoted keys, and more."
llms.txt-crates/cli/src/main.rs-)]
llms.txt-crates/cli/src/main.rs-struct CliArgs {
llms.txt-crates/cli/src/main.rs-    /// Input files to process (if none provided, reads from stdin)
--
llms.txt-crates/cli/src/main.rs-    Ok(())
llms.txt-crates/cli/src/main.rs-}
llms.txt-crates/cli/src/main.rs-
llms.txt:crates/cli/src/main.rs:fn format_parse_error(error: &vexy_json_core::Error, file: &str, content: &str) -> CliError {
llms.txt-crates/cli/src/main.rs-    // Try to extract position information from the error
llms.txt-crates/cli/src/main.rs-    let error_str = error.to_string();
llms.txt-crates/cli/src/main.rs-
llms.txt---
llms.txt:issues/602.txt:Read the @llms.txt code snapshot and into `vexify.txt` record all occurrences of all case variants of `vexy_json` found in the codebase. 
llms.txt-issues/602.txt-
llms.txt:issues/602.txt:Write a `vexify.py` tool that will generally replace both in the current codebase and in the entire git history the name `vexy_json` with `vexy json` but in a smart way: 
llms.txt-issues/602.txt-
llms.txt:issues/602.txt:- In filenames, it should replace `vexy_json` with `vexy_json`
llms.txt:issues/602.txt:- In code, it should replace `vexy_json` with `vexy_json` when it is used as a variable or function name, not in comments or strings.
llms.txt-issues/602.txt-- In documentation, comments and UI strings (like in HTML) it should replace the all-uppercase `Vexy JSON` with `Vexy JSON`.
llms.txt-issues/602.txt-- Cases like `VexyJSONConfig`, `VexyJSONWrapper` or so should become `VexyJSONConfig`, `VexyJSONWrapper`
llms.txt:issues/602.txt:- It should report all changes made, including filenames, code changes, and documentation updates, and then report the places where `vexy_json` still occurs.
llms.txt-issues/602.txt-
llms.txt-issues/602.txt-Make it Fire CLI. If `--deep` is given, it should also rewrite the git history. Without `--deep`, it should only modify the current state of the codebase.
llms.txt---
llms.txt:debug_test2.rs:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-debug_test2.rs-
llms.txt-debug_test2.rs-fn main() {
llms.txt-debug_test2.rs-    let options = ParserOptions {
--
llms.txt-benches/comparison.rs-use criterion::{criterion_group, criterion_main, BenchmarkId, Criterion};
llms.txt-benches/comparison.rs-use std::fs;
llms.txt-benches/comparison.rs-use std::hint::black_box;
llms.txt:benches/comparison.rs:use vexy_json::parse;
llms.txt-benches/comparison.rs-
llms.txt-benches/comparison.rs-fn get_json_data(name: &str) -> String {
llms.txt-benches/comparison.rs-    fs::read_to_string(format!("benches/data/{}.json", name)).expect("Unable to read file")
--
llms.txt-benches/comparison.rs-
llms.txt-benches/comparison.rs-    for &case in test_cases {
llms.txt-benches/comparison.rs-        let json_data = get_json_data(case);
llms.txt:benches/comparison.rs:        group.bench_with_input(BenchmarkId::new("vexy_json", case), &json_data, |b, data| {
llms.txt-benches/comparison.rs-            b.iter(|| parse(black_box(data)))
llms.txt-benches/comparison.rs-        });
llms.txt-benches/comparison.rs-    }
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-/**
llms.txt:crates/c-api/include/vexy_json.hpp: * @file vexy_json.hpp
llms.txt:crates/c-api/include/vexy_json.hpp: * @brief C++ header-only wrapper for the vexy_json JSON parser
llms.txt:crates/c-api/include/vexy_json.hpp- *
llms.txt:crates/c-api/include/vexy_json.hpp: * This header provides a modern C++ interface for the vexy_json JSON parser,
llms.txt:crates/c-api/include/vexy_json.hpp- * with RAII, exceptions, and STL container support.
llms.txt:crates/c-api/include/vexy_json.hpp- */
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-#include <string_view>
llms.txt:crates/c-api/include/vexy_json.hpp-#include <utility>
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp:#include "vexy_json.h"
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp:namespace vexy_json {
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp-/**
llms.txt:crates/c-api/include/vexy_json.hpp: * @brief Exception thrown by vexy_json operations
llms.txt:crates/c-api/include/vexy_json.hpp- */
llms.txt:crates/c-api/include/vexy_json.hpp-class ParseError : public std::runtime_error {
llms.txt:crates/c-api/include/vexy_json.hpp-public:
llms.txt:crates/c-api/include/vexy_json.hpp-    explicit ParseError(const std::string& message) 
llms.txt:crates/c-api/include/vexy_json.hpp:        : std::runtime_error("vexy_json parse error: " + message) {}
llms.txt:crates/c-api/include/vexy_json.hpp-};
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp-/**
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp- */
llms.txt:crates/c-api/include/vexy_json.hpp-class ParserOptions {
llms.txt:crates/c-api/include/vexy_json.hpp-public:
llms.txt:crates/c-api/include/vexy_json.hpp:    ParserOptions() : options_(vexy_json_default_options()) {}
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-    ParserOptions& allowComments(bool value = true) {
llms.txt:crates/c-api/include/vexy_json.hpp-        options_.allow_comments = value;
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-        return *this;
llms.txt:crates/c-api/include/vexy_json.hpp-    }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp:    const vexy_json_parser_options* get() const { return &options_; }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-private:
llms.txt:crates/c-api/include/vexy_json.hpp:    vexy_json_parser_options options_;
llms.txt:crates/c-api/include/vexy_json.hpp-};
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp-/**
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-public:
llms.txt:crates/c-api/include/vexy_json.hpp-    ParseResult() = default;
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp:    explicit ParseResult(vexy_json_parse_result result) 
llms.txt:crates/c-api/include/vexy_json.hpp:        : result_(std::make_unique<vexy_json_parse_result>(result)) {
llms.txt:crates/c-api/include/vexy_json.hpp-        if (result.error) {
llms.txt:crates/c-api/include/vexy_json.hpp-            error_ = result.error;
llms.txt:crates/c-api/include/vexy_json.hpp-        }
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-    ~ParseResult() {
llms.txt:crates/c-api/include/vexy_json.hpp-        if (result_) {
llms.txt:crates/c-api/include/vexy_json.hpp:            vexy_json_free_result(*result_);
llms.txt:crates/c-api/include/vexy_json.hpp-        }
llms.txt:crates/c-api/include/vexy_json.hpp-    }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-    }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-private:
llms.txt:crates/c-api/include/vexy_json.hpp:    std::unique_ptr<vexy_json_parse_result> result_;
llms.txt:crates/c-api/include/vexy_json.hpp-    std::optional<std::string> json_;
llms.txt:crates/c-api/include/vexy_json.hpp-    std::optional<std::string> error_;
llms.txt:crates/c-api/include/vexy_json.hpp-};
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-public:
llms.txt:crates/c-api/include/vexy_json.hpp-    DetailedParseResult() = default;
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp:    explicit DetailedParseResult(vexy_json_detailed_result result) 
llms.txt:crates/c-api/include/vexy_json.hpp:        : result_(std::make_unique<vexy_json_detailed_result>(result)) {
llms.txt:crates/c-api/include/vexy_json.hpp-        if (result.error) {
llms.txt:crates/c-api/include/vexy_json.hpp-            error_ = result.error;
llms.txt:crates/c-api/include/vexy_json.hpp-        }
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-    ~DetailedParseResult() {
llms.txt:crates/c-api/include/vexy_json.hpp-        if (result_) {
llms.txt:crates/c-api/include/vexy_json.hpp:            vexy_json_free_detailed_result(*result_);
llms.txt:crates/c-api/include/vexy_json.hpp-        }
llms.txt:crates/c-api/include/vexy_json.hpp-    }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-    const std::vector<Repair>& repairs() const { return repairs_; }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-private:
llms.txt:crates/c-api/include/vexy_json.hpp:    std::unique_ptr<vexy_json_detailed_result> result_;
llms.txt:crates/c-api/include/vexy_json.hpp-    std::optional<std::string> json_;
llms.txt:crates/c-api/include/vexy_json.hpp-    std::optional<std::string> error_;
llms.txt:crates/c-api/include/vexy_json.hpp-    std::vector<Repair> repairs_;
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-    Parser() : Parser(ParserOptions{}) {}
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-    explicit Parser(const ParserOptions& options) 
llms.txt:crates/c-api/include/vexy_json.hpp:        : parser_(vexy_json_parser_new(options.get())) {
llms.txt:crates/c-api/include/vexy_json.hpp-        if (!parser_) {
llms.txt:crates/c-api/include/vexy_json.hpp:            throw std::runtime_error("Failed to create vexy_json parser");
llms.txt:crates/c-api/include/vexy_json.hpp-        }
llms.txt:crates/c-api/include/vexy_json.hpp-    }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-    Parser& operator=(Parser&& other) noexcept {
llms.txt:crates/c-api/include/vexy_json.hpp-        if (this != &other) {
llms.txt:crates/c-api/include/vexy_json.hpp-            if (parser_) {
llms.txt:crates/c-api/include/vexy_json.hpp:                vexy_json_parser_free(parser_);
llms.txt:crates/c-api/include/vexy_json.hpp-            }
llms.txt:crates/c-api/include/vexy_json.hpp-            parser_ = other.parser_;
llms.txt:crates/c-api/include/vexy_json.hpp-            other.parser_ = nullptr;
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-    ~Parser() {
llms.txt:crates/c-api/include/vexy_json.hpp-        if (parser_) {
llms.txt:crates/c-api/include/vexy_json.hpp:            vexy_json_parser_free(parser_);
llms.txt:crates/c-api/include/vexy_json.hpp-        }
llms.txt:crates/c-api/include/vexy_json.hpp-    }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-    ParseResult parse(std::string_view input) const {
llms.txt:crates/c-api/include/vexy_json.hpp-        std::string input_str(input);
llms.txt:crates/c-api/include/vexy_json.hpp:        return ParseResult(vexy_json_parser_parse(parser_, input_str.c_str()));
llms.txt:crates/c-api/include/vexy_json.hpp-    }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-    std::string parseToString(std::string_view input) const {
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-    }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-private:
llms.txt:crates/c-api/include/vexy_json.hpp:    vexy_json_parser parser_;
llms.txt:crates/c-api/include/vexy_json.hpp-};
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp-/**
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp- */
llms.txt:crates/c-api/include/vexy_json.hpp-inline std::string parse(std::string_view input) {
llms.txt:crates/c-api/include/vexy_json.hpp-    std::string input_str(input);
llms.txt:crates/c-api/include/vexy_json.hpp:    auto result = ParseResult(vexy_json_parse(input_str.c_str()));
llms.txt:crates/c-api/include/vexy_json.hpp-    return result.json();
llms.txt:crates/c-api/include/vexy_json.hpp-}
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp-inline std::string parse(std::string_view input, const ParserOptions& options) {
llms.txt:crates/c-api/include/vexy_json.hpp-    std::string input_str(input);
llms.txt:crates/c-api/include/vexy_json.hpp:    auto result = ParseResult(vexy_json_parse_with_options(input_str.c_str(), options.get()));
llms.txt:crates/c-api/include/vexy_json.hpp-    return result.json();
llms.txt:crates/c-api/include/vexy_json.hpp-}
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp-inline DetailedParseResult parseDetailed(std::string_view input, const ParserOptions& options) {
llms.txt:crates/c-api/include/vexy_json.hpp-    std::string input_str(input);
llms.txt:crates/c-api/include/vexy_json.hpp:    return DetailedParseResult(vexy_json_parse_detailed(input_str.c_str(), options.get()));
llms.txt:crates/c-api/include/vexy_json.hpp-}
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp-/**
llms.txt:crates/c-api/include/vexy_json.hpp: * @brief Get the version of the vexy_json library
llms.txt:crates/c-api/include/vexy_json.hpp- */
llms.txt:crates/c-api/include/vexy_json.hpp-inline std::string version() {
llms.txt:crates/c-api/include/vexy_json.hpp:    return vexy_json_version();
llms.txt:crates/c-api/include/vexy_json.hpp-}
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp:} // namespace vexy_json
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp-#endif // VEXY_JSON_HPP
llms.txt---
llms.txt:src/bin/test_full_parse.rs:use vexy_json_core::{parse, lexer::{Lexer, JsonLexer}, parser::{Parser, ParserOptions}};
llms.txt-src/bin/test_full_parse.rs-
llms.txt-src/bin/test_full_parse.rs-fn main() {
llms.txt-src/bin/test_full_parse.rs-    let input = "1.";
llms.txt---
llms.txt:crates/c-api/examples/Makefile:# Makefile for vexy_json C++ examples
llms.txt-crates/c-api/examples/Makefile-
llms.txt-crates/c-api/examples/Makefile-CXX = g++
llms.txt-crates/c-api/examples/Makefile-CXXFLAGS = -std=c++17 -Wall -Wextra -O2
llms.txt:crates/c-api/examples/Makefile:LDFLAGS = -L../../../target/release -lvexy_json
llms.txt-crates/c-api/examples/Makefile-INCLUDES = -I../include
llms.txt-crates/c-api/examples/Makefile-
llms.txt-crates/c-api/examples/Makefile-# For macOS, add rpath to find the library
llms.txt---
llms.txt-crates/cli/Cargo.toml-[package]
llms.txt:crates/cli/Cargo.toml:name = "vexy_json-cli"
llms.txt-crates/cli/Cargo.toml-version = "2.2.3"
llms.txt-crates/cli/Cargo.toml-edition = "2021"
llms.txt-crates/cli/Cargo.toml-
llms.txt-crates/cli/Cargo.toml-
llms.txt-crates/cli/Cargo.toml-[[bin]]
llms.txt:crates/cli/Cargo.toml:name = "vexy_json"
llms.txt-crates/cli/Cargo.toml-path = "src/main.rs"
llms.txt-crates/cli/Cargo.toml-
llms.txt-crates/cli/Cargo.toml-
--
llms.txt-crates/cli/Cargo.toml-dirs = "5.0"
llms.txt-crates/cli/Cargo.toml-
llms.txt-crates/cli/Cargo.toml-
llms.txt:crates/cli/Cargo.toml:[dependencies.vexy_json-core]
llms.txt-crates/cli/Cargo.toml-path = "../core"
llms.txt-crates/cli/Cargo.toml-
llms.txt-crates/cli/Cargo.toml-
llms.txt---
llms.txt:issues/610.txt:Read the @llms.txt codebase snapshot. Note: recently we have renamed the project from `ZZSON` to `Vexy JSON`. We have search-replaced many strings like `zzson` to `vexy_json`, but mistakes may have been made. Please review all files, check if the changes have been performed consistently. . Run build scripts. Then into @PLAN.md write a detailed plan to improve and fix the code, and then into @TODO.md write a linearized version of that. Then /work on it. 
llms.txt---
llms.txt-benches/real_world_benchmarks.rs-
llms.txt-benches/real_world_benchmarks.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
llms.txt-benches/real_world_benchmarks.rs-use std::fs;
llms.txt:benches/real_world_benchmarks.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-benches/real_world_benchmarks.rs-
llms.txt-benches/real_world_benchmarks.rs-fn collect_benchmark_files() -> Vec<(String, String, String)> {
llms.txt-benches/real_world_benchmarks.rs-    let mut files = Vec::new();
llms.txt---
llms.txt:src/bin/test_point_zero.rs:use vexy_json::{parse, Value, Number};
llms.txt-src/bin/test_point_zero.rs-
llms.txt-src/bin/test_point_zero.rs-fn main() {
llms.txt-src/bin/test_point_zero.rs-    let test_cases = vec!["1.0", "-1.0", "0.0", "+1.0"];
llms.txt---
llms.txt-crates/c-api/Cargo.toml-[package]
llms.txt:crates/c-api/Cargo.toml:name = "vexy_json-c-api"
llms.txt-crates/c-api/Cargo.toml-version = "2.2.3"
llms.txt-crates/c-api/Cargo.toml-authors = [ "Vexy JSON Contributors" ]
llms.txt-crates/c-api/Cargo.toml-edition = "2021"
llms.txt-crates/c-api/Cargo.toml-license = "MIT OR Apache-2.0"
llms.txt:crates/c-api/Cargo.toml:description = "C API for the vexy_json JSON parser"
llms.txt:crates/c-api/Cargo.toml:repository = "https://github.com/twardoch/pub-vexy_json"
llms.txt-crates/c-api/Cargo.toml-
llms.txt-crates/c-api/Cargo.toml-
llms.txt-crates/c-api/Cargo.toml-[lib]
llms.txt:crates/c-api/Cargo.toml:name = "vexy_json_c_api"
llms.txt-crates/c-api/Cargo.toml-crate-type = [ "cdylib", "staticlib" ]
llms.txt-crates/c-api/Cargo.toml-
llms.txt-crates/c-api/Cargo.toml-
--
llms.txt-crates/c-api/Cargo.toml-serde_json = "1.0"
llms.txt-crates/c-api/Cargo.toml-
llms.txt-crates/c-api/Cargo.toml-
llms.txt:crates/c-api/Cargo.toml:[dependencies.vexy_json-core]
llms.txt-crates/c-api/Cargo.toml-path = "../core"
llms.txt-crates/c-api/Cargo.toml-features = [ "serde" ]
llms.txt-crates/c-api/Cargo.toml-
llms.txt---
llms.txt:README.md:# vexy_json Documentation & Web Tool
llms.txt-README.md-
llms.txt:README.md:This directory contains the documentation website and interactive web tool for vexy_json.
llms.txt-README.md-
llms.txt-README.md-## Recent Updates
llms.txt-README.md-
--
llms.txt-README.md-- **Real-time parsing** with debounced input
llms.txt-README.md-- **Syntax highlighting** for JSON input
llms.txt-README.md-- **Error highlighting** with position indicators
llms.txt:README.md:- **Example library** showcasing vexy_json features
llms.txt-README.md-- **Download functionality** for parsed results
llms.txt-README.md-- **Share URLs** for collaboration
llms.txt-README.md-- **Performance metrics** display
llms.txt---
llms.txt:issues/104.txt:Analyze the entire codebase. Then in ./IDEAS.md write an extensive spec that will describe in minute detail step-by-step how to extend the vexy_json parser with the functionality of INTELLIGENT completion of opening or closing braces. Right now our tolerant and forgiving JSON-esque parser can fix various things but it cannot overcome the situation of a braces mismatch. The original reference jsonic parser written in JS, of which vexy_json is a Rust port, does not have that functionality. But I want it.
llms.txt-issues/104.txt-
llms.txt---
llms.txt:src/bin/debug_number.rs:use vexy_json::parse;
llms.txt-src/bin/debug_number.rs-
llms.txt-src/bin/debug_number.rs-fn main() {
llms.txt-src/bin/debug_number.rs-    let test_cases = vec!["1_000_000", "0x10", "0o77", "0b1010"];
llms.txt---
llms.txt:crates/c-api/README_CPP.md:# vexy_json C++ Header-Only Wrapper
llms.txt-crates/c-api/README_CPP.md-
llms.txt:crates/c-api/README_CPP.md:This directory contains a modern C++ header-only wrapper for the vexy_json JSON parser, providing an idiomatic C++ interface with RAII, exceptions, and STL integration.
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-## Features
llms.txt-crates/c-api/README_CPP.md-
llms.txt:crates/c-api/README_CPP.md:- **Header-only**: Just include `vexy_json.hpp` - no additional C++ files to compile
llms.txt-crates/c-api/README_CPP.md-- **RAII**: Automatic memory management with smart pointers
llms.txt-crates/c-api/README_CPP.md-- **Exception safety**: Strong exception guarantee with proper error handling
llms.txt-crates/c-api/README_CPP.md-- **Modern C++**: Uses C++17 features like `std::string_view` and `std::optional`
--
llms.txt-crates/c-api/README_CPP.md-## Requirements
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-- C++17 or later compiler
llms.txt:crates/c-api/README_CPP.md:- The vexy_json C library (linked separately)
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-## Installation
llms.txt-crates/c-api/README_CPP.md-
llms.txt:crates/c-api/README_CPP.md:1. Include the `vexy_json.hpp` header in your project
llms.txt:crates/c-api/README_CPP.md:2. Link against the vexy_json C library
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-## Quick Start
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-```cpp
llms.txt:crates/c-api/README_CPP.md:#include "vexy_json.hpp"
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-// Simple parsing
llms.txt:crates/c-api/README_CPP.md:std::string json = vexy_json::parse(R"({"key": "value"})");
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-// Parsing with options
llms.txt:crates/c-api/README_CPP.md:auto options = vexy_json::ParserOptions()
llms.txt-crates/c-api/README_CPP.md-    .allowComments()
llms.txt-crates/c-api/README_CPP.md-    .allowTrailingCommas()
llms.txt-crates/c-api/README_CPP.md-    .enableRepair();
llms.txt-crates/c-api/README_CPP.md-    
llms.txt:crates/c-api/README_CPP.md:std::string result = vexy_json::parse(input, options);
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-// Using a parser instance
llms.txt:crates/c-api/README_CPP.md:vexy_json::Parser parser(options);
llms.txt-crates/c-api/README_CPP.md-std::string result = parser.parseToString(input);
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-// Detailed parsing with repair information
llms.txt:crates/c-api/README_CPP.md:auto detailed = vexy_json::parseDetailed(input, options);
llms.txt-crates/c-api/README_CPP.md-std::cout << "JSON: " << detailed.json() << "\n";
llms.txt-crates/c-api/README_CPP.md-for (const auto& repair : detailed.repairs()) {
llms.txt-crates/c-api/README_CPP.md-    std::cout << "Repair: " << repair.description << "\n";
--
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-## API Reference
llms.txt-crates/c-api/README_CPP.md-
llms.txt:crates/c-api/README_CPP.md:### Namespace `vexy_json`
llms.txt-crates/c-api/README_CPP.md-
llms.txt:crates/c-api/README_CPP.md:All C++ wrapper functionality is in the `vexy_json` namespace.
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-### Classes
llms.txt-crates/c-api/README_CPP.md-
--
llms.txt-crates/c-api/README_CPP.md-- `parse(std::string_view)` - Quick parse with default options
llms.txt-crates/c-api/README_CPP.md-- `parse(std::string_view, const ParserOptions&)` - Quick parse with options
llms.txt-crates/c-api/README_CPP.md-- `parseDetailed(std::string_view, const ParserOptions&)` - Parse with repair info
llms.txt:crates/c-api/README_CPP.md:- `version()` - Get vexy_json library version
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-## Examples
llms.txt-crates/c-api/README_CPP.md-
--
llms.txt-crates/c-api/README_CPP.md-## Building the Examples
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-```bash
llms.txt:crates/c-api/README_CPP.md:# Assuming you have built the vexy_json C library
llms.txt:crates/c-api/README_CPP.md:g++ -std=c++17 examples/cpp_example.cpp -lvexy_json -o cpp_example
llms.txt-crates/c-api/README_CPP.md-./cpp_example
llms.txt-crates/c-api/README_CPP.md-```
llms.txt-crates/c-api/README_CPP.md-
llms.txt---
llms.txt:src/bin/test_positive_numbers.rs:use vexy_json::parse;
llms.txt-src/bin/test_positive_numbers.rs-
llms.txt-src/bin/test_positive_numbers.rs-fn main() {
llms.txt-src/bin/test_positive_numbers.rs-    let test_cases = vec!["+1", "+1.", "+1.0", "+123", "+0", "+0.9"];
llms.txt---
llms.txt:src/bin/trace_parse.rs:use vexy_json_core::parse;
llms.txt-src/bin/trace_parse.rs-
llms.txt-src/bin/trace_parse.rs-fn main() {
llms.txt-src/bin/trace_parse.rs-    let input = "1.";
llms.txt---
llms.txt-crates/wasm/src/lib.rs-use serde_json::Value;
llms.txt-crates/wasm/src/lib.rs-use wasm_bindgen::prelude::*;
llms.txt:crates/wasm/src/lib.rs:use vexy_json_core::{parse, parse_with_options, ParserOptions};
llms.txt-crates/wasm/src/lib.rs-
llms.txt-crates/wasm/src/lib.rs-#[wasm_bindgen]
llms.txt-crates/wasm/src/lib.rs-extern "C" {
--
llms.txt-crates/wasm/src/lib.rs-/// Stringify a JSON value with pretty printing
llms.txt-crates/wasm/src/lib.rs-#[wasm_bindgen]
llms.txt-crates/wasm/src/lib.rs-pub fn stringify_value(input: &str, indent: Option<u32>) -> Result<String, JsValue> {
llms.txt:crates/wasm/src/lib.rs:    // First parse with vexy_json to handle forgiving syntax
llms.txt-crates/wasm/src/lib.rs-    let value = parse(input).map_err(|e| JsValue::from_str(&e.to_string()))?;
llms.txt-crates/wasm/src/lib.rs-
llms.txt-crates/wasm/src/lib.rs-    // Convert to serde_json::Value
llms.txt---
llms.txt:src/bin/test_parse.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-src/bin/test_parse.rs-
llms.txt-src/bin/test_parse.rs-fn main() {
llms.txt-src/bin/test_parse.rs-    println!("Testing parse('1.'):");
llms.txt---
llms.txt:src/bin/debug_comment_line_endings.rs:use vexy_json::{parse, Value};
llms.txt-src/bin/debug_comment_line_endings.rs-
llms.txt-src/bin/debug_comment_line_endings.rs-fn main() {
llms.txt-src/bin/debug_comment_line_endings.rs-    let inputs = vec![
llms.txt---
llms.txt-issues/105.txt-Analyze the entire `./llms.txt` codebase snapshot. 
llms.txt-issues/105.txt-
llms.txt:issues/105.txt:Our code, `vexy_json` is a Rust port of the `jsonic` parser written in JS. Neither of the tolerant and forgiving JSON-esque parsers (our `vexy_json` or the original `jsonic`) can overcome the problem of mismatching brackets or braces. 
llms.txt-issues/105.txt-
llms.txt-issues/105.txt-It would be very useful if this were possible. 
llms.txt-issues/105.txt-
--
llms.txt-issues/105.txt-3. The parse continues after the object. The AST now has the `"bar"` key mapped to an array node that is marked incomplete/error, but the `"foo":123` entry remains intact, and the overall AST is a top-level object node (rather than nothing).
llms.txt-issues/105.txt-4. The IDE can highlight the error at the position of `}` and possibly at end-of-file (saying one brace was inserted implicitly). But crucially, it can still allow navigation of the AST (e.g. the user can fold the object, see both keys, etc.).
llms.txt-issues/105.txt-
llms.txt:issues/105.txt:To implement similar features in a **Rust-based tolerant JSON parser** (like extending `vexy_json` or `jsonic` with mismatch recovery), one can combine these approaches:
llms.txt-issues/105.txt-
llms.txt-issues/105.txt-* **Insert error nodes** on-the-fly in the parser: e.g. if expecting `]` but got `}`, push an error and treat it as the end of the array. If end-of-file reached but stack isn’t empty, auto-insert the needed `]` or `}` tokens (recording errors for each).
llms.txt-issues/105.txt-* **Use a recovery combinator or manual check** after a failed parse: e.g. if a value parser fails inside an array, skip forward until a `]` or `}` is found, or until a comma that indicates the next element, then continue. This could be done by a loop scanning the char stream or by a higher-level library feature.
--
llms.txt-issues/105.txt-
llms.txt-issues/105.txt-Error-tolerant parsing is an active area of language tooling research and development. Techniques range from simple heuristics (skip to next `}`) to sophisticated grammar transformations that guarantee a parse for any input. **State-of-the-art academic work** (like PEG labeled failures or minimal edit algorithms) has started to find its way into practical tools, meaning library authors no longer have to choose between strict compliance and usability. Open-source libraries such as **Chumsky** (Rust) and **LPegLabel** (Lua) demonstrate that we can recover from errors while still using high-level parser definitions. And specialized JSON fixers like **`json_repair`**, **JSON5/JSONC parsers**, and **tolerantjson** for Python show concrete strategies to handle unbalanced delimiters, missing commas, and more in real JSON inputs.
llms.txt-issues/105.txt-
llms.txt:issues/105.txt:For implementing a tolerant parser in Rust (as with `vexy_json` or similar), a combined approach is recommended:
llms.txt-issues/105.txt-
llms.txt-issues/105.txt-* Use a **stack-based mechanism** or parser combinator to detect and auto-correct bracket mismatches in one pass.
llms.txt-issues/105.txt-* Represent the parse result in a way that **retains malformed parts** (e.g. an `Enum Value { Valid(...), Error(...) }`), so that no information is lost.
--
llms.txt-issues/105.txt-
llms.txt-issues/105.txt-Into `./issues/106.txt` write an extensive spec that will describe in minute detail step-by-step how to incorporate https://docs.rs/json-repair/ into our project. 
llms.txt-issues/105.txt-
llms.txt:issues/105.txt:The general idea is that it should be an option, and we should have a parser that parses using the fastest method first, then falls back to our core `vexy_json` slower one, and only if that fails falls back to `json-repair`. 
llms.txt-issues/105.txt-
llms.txt---
llms.txt-crates/serde/src/lib.rs-use serde::{Deserialize, Serialize};
llms.txt:crates/serde/src/lib.rs:use vexy_json_core::ast::Value;
llms.txt-crates/serde/src/lib.rs-
llms.txt-crates/serde/src/lib.rs-// This is a placeholder for Serde integration.
llms.txt:crates/serde/src/lib.rs:// Actual implementation would involve implementing Serialize/Deserialize for vexy_json_core::Value
llms.txt-crates/serde/src/lib.rs-// or providing helper functions for conversion.
llms.txt-crates/serde/src/lib.rs-
llms.txt-crates/serde/src/lib.rs-#[derive(Debug, PartialEq, Serialize, Deserialize)]
llms.txt---
llms.txt:debug_test5.rs:use vexy_json::parse;
llms.txt-debug_test5.rs-
llms.txt-debug_test5.rs-fn main() {
llms.txt-debug_test5.rs-    // Test if the # is being treated as a comment
llms.txt---
llms.txt:src/bin/test_dot_numbers.rs:use vexy_json::parse;
llms.txt-src/bin/test_dot_numbers.rs-
llms.txt-src/bin/test_dot_numbers.rs-fn main() {
llms.txt-src/bin/test_dot_numbers.rs-    let test_cases = vec![".1", "-.1", "+.1", ".0", ".123"];
llms.txt---
llms.txt-crates/serde/Cargo.toml-[package]
llms.txt:crates/serde/Cargo.toml:name = "vexy_json-serde"
llms.txt-crates/serde/Cargo.toml-version = "2.2.3"
llms.txt-crates/serde/Cargo.toml-edition = "2021"
llms.txt-crates/serde/Cargo.toml-
--
llms.txt-crates/serde/Cargo.toml-path = "src/lib.rs"
llms.txt-crates/serde/Cargo.toml-
llms.txt-crates/serde/Cargo.toml-
llms.txt:crates/serde/Cargo.toml:[dependencies.vexy_json-core]
llms.txt-crates/serde/Cargo.toml-path = "../core"
llms.txt-crates/serde/Cargo.toml-features = [ "serde" ]
llms.txt-crates/serde/Cargo.toml-
llms.txt---
llms.txt:debug_test4.rs:use vexy_json::parse;
llms.txt-debug_test4.rs-
llms.txt-debug_test4.rs-fn main() {
llms.txt-debug_test4.rs-    // Test individual parts
llms.txt---
llms.txt:src/bin/test_trailing_decimal.rs:use vexy_json::{parse, Value, Number};
llms.txt-src/bin/test_trailing_decimal.rs-
llms.txt-src/bin/test_trailing_decimal.rs-fn main() {
llms.txt-src/bin/test_trailing_decimal.rs-    let test_cases = vec!["1.", "-1.", "+1.", "0.", "123."];
--
llms.txt-TODO.md-# this_file: docs/internal/TODO.md
llms.txt-TODO.md-
llms.txt-TODO.md-## Phase 1: jsonic References Removal (IMMEDIATE)
llms.txt:TODO.md:- [ ] Rename test files: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
llms.txt-TODO.md-- [ ] Update documentation: Remove "jsonic" from HTML, markdown files
llms.txt:TODO.md:- [ ] Clean code references: Replace "jsonic" with "vexy_json" in comments/variables
llms.txt-TODO.md-- [ ] Update configurations: Clean pyproject.toml and Cargo.toml references
llms.txt-TODO.md-- [ ] Verify completeness: Re-run grep to ensure no "jsonic" references remain
llms.txt-TODO.md-
llms.txt---
llms.txt:src/bin/test_implicit.rs:use vexy_json_core::{parse, parse_with_options, ParserOptions};
llms.txt-src/bin/test_implicit.rs-
llms.txt-src/bin/test_implicit.rs-fn main() {
llms.txt-src/bin/test_implicit.rs-    // Test with default options (implicit top level enabled)
llms.txt---
llms.txt:issues/107.txt:$ ./target/release/vexy_json --help
llms.txt-issues/107.txt-A forgiving JSON parser - Rust port of jsonic
llms.txt-issues/107.txt-
llms.txt:issues/107.txt:Usage: vexy_json
llms.txt-issues/107.txt-
llms.txt-issues/107.txt-Options:
llms.txt-issues/107.txt-  -h, --help     Print help
llms.txt-issues/107.txt-  -V, --version  Print version
llms.txt:issues/107.txt:(.venv) ~/Developer/vcs/github.twardoch/pub/vexy_json
llms.txt:issues/107.txt:[14:53:12] $ ./target/release/vexy_json-cli --help
llms.txt:issues/107.txt:Usage: vexy_json-cli
llms.txt-issues/107.txt-
llms.txt-issues/107.txt-Options:
llms.txt-issues/107.txt-  -h, --help     Print help
llms.txt-issues/107.txt-  -V, --version  Print version
llms.txt-issues/107.txt-
llms.txt-issues/107.txt-
llms.txt:issues/107.txt:——— why two executables? (vexy_json and vexy_json-cli) 
llms.txt---
llms.txt-crates/wasm/test.mjs-const __dirname = dirname(__filename);
llms.txt-crates/wasm/test.mjs-
llms.txt-crates/wasm/test.mjs-// Dynamically import the WASM module
llms.txt:crates/wasm/test.mjs:const wasmModule = await import(join(__dirname, 'pkg', 'vexy_json_wasm.js'));
llms.txt-crates/wasm/test.mjs-const { default: init, parse_js, parse_with_options_js, is_valid, format } = wasmModule;
llms.txt-crates/wasm/test.mjs-
llms.txt-crates/wasm/test.mjs-// Initialize WASM with the WASM file path
llms.txt:crates/wasm/test.mjs:const wasmPath = join(__dirname, 'pkg', 'vexy_json_wasm_bg.wasm');
llms.txt-crates/wasm/test.mjs-const wasmBytes = readFileSync(wasmPath);
llms.txt-crates/wasm/test.mjs-await init(wasmBytes);
llms.txt-crates/wasm/test.mjs-
llms.txt:crates/wasm/test.mjs:console.log('Testing vexy_json WASM module...\n');
llms.txt-crates/wasm/test.mjs-
llms.txt-crates/wasm/test.mjs-// Test 1: Basic parsing
llms.txt-crates/wasm/test.mjs-console.log('Test 1: Basic parsing');
--
llms.txt-oss-fuzz/build.sh-source $HOME/.cargo/env
llms.txt-oss-fuzz/build.sh-
llms.txt-oss-fuzz/build.sh-# Navigate to the project directory
llms.txt:oss-fuzz/build.sh:cd $SRC/vexy_json
llms.txt-oss-fuzz/build.sh-
llms.txt-oss-fuzz/build.sh-# Build the project
llms.txt-oss-fuzz/build.sh-cargo build --release
llms.txt---
llms.txt:crates/core/benches/parser_benchmarks.rs://! Comprehensive benchmark suite for vexy_json parser performance.
llms.txt-crates/core/benches/parser_benchmarks.rs-//!
llms.txt-crates/core/benches/parser_benchmarks.rs-//! This benchmark suite measures various aspects of parser performance including:
llms.txt-crates/core/benches/parser_benchmarks.rs-//! - Basic parsing speed
--
llms.txt-crates/core/benches/parser_benchmarks.rs-
llms.txt-crates/core/benches/parser_benchmarks.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
llms.txt-crates/core/benches/parser_benchmarks.rs-use std::fs;
llms.txt:crates/core/benches/parser_benchmarks.rs:use vexy_json_core::{
llms.txt-crates/core/benches/parser_benchmarks.rs-    parse, parse_optimized, parse_optimized_v2,
llms.txt-crates/core/benches/parser_benchmarks.rs-    parse_optimized_with_options, parse_v2_with_stats, parse_with_stats, ParserOptions,
llms.txt-crates/core/benches/parser_benchmarks.rs-};
llms.txt---
llms.txt-crates/wasm/Cargo.toml-[package]
llms.txt:crates/wasm/Cargo.toml:name = "vexy_json-wasm"
llms.txt-crates/wasm/Cargo.toml-version = "2.2.3"
llms.txt-crates/wasm/Cargo.toml-edition = "2021"
llms.txt:crates/wasm/Cargo.toml:description = "WebAssembly bindings for vexy_json - a forgiving JSON parser"
llms.txt:crates/wasm/Cargo.toml:repository = "https://github.com/twardoch/vexy_json"
llms.txt-crates/wasm/Cargo.toml-license = "MIT OR Apache-2.0"
llms.txt-crates/wasm/Cargo.toml-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-crates/wasm/Cargo.toml-
--
llms.txt-crates/wasm/Cargo.toml-features = [ "derive" ]
llms.txt-crates/wasm/Cargo.toml-
llms.txt-crates/wasm/Cargo.toml-
llms.txt:crates/wasm/Cargo.toml:[dependencies.vexy_json-core]
llms.txt-crates/wasm/Cargo.toml-path = "../core"
llms.txt-crates/wasm/Cargo.toml-features = [ "serde" ]
llms.txt-crates/wasm/Cargo.toml-
llms.txt---
llms.txt:debug_test10.rs:use vexy_json::parse;
llms.txt-debug_test10.rs-
llms.txt-debug_test10.rs-fn main() {
llms.txt-debug_test10.rs-    // Test the exact failing case
--
llms.txt-crates/core/src/error/result.rs-
llms.txt-crates/core/src/error/result.rs-use super::types::Error;
llms.txt-crates/core/src/error/result.rs-
llms.txt:crates/core/src/error/result.rs:/// Convenience type alias for Results using vexy_json's Error type.
llms.txt-crates/core/src/error/result.rs-///
llms.txt-crates/core/src/error/result.rs-/// This makes function signatures more concise throughout the codebase
llms.txt-crates/core/src/error/result.rs-/// while maintaining type safety. Most parsing functions return this type.
llms.txt---
llms.txt:crates/core/final_benchmark_results.txt:   Compiling vexy_json-core v0.2.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/crates/core)
llms.txt-crates/core/final_benchmark_results.txt-warning: unnecessary qualification
llms.txt-crates/core/final_benchmark_results.txt-   --> crates/core/src/optimization/memory_pool.rs:157:34
llms.txt-crates/core/final_benchmark_results.txt-    |
--
llms.txt-crates/core/final_benchmark_results.txt-    |
llms.txt-crates/core/final_benchmark_results.txt-    = note: `#[warn(useless_ptr_null_checks)]` on by default
llms.txt-crates/core/final_benchmark_results.txt-
llms.txt:crates/core/final_benchmark_results.txt:warning: `vexy_json-core` (lib) generated 58 warnings (run `cargo fix --lib -p vexy_json-core` to apply 1 suggestion)
llms.txt-crates/core/final_benchmark_results.txt-warning: unused import: `parse_optimized_v2_with_options`
llms.txt-crates/core/final_benchmark_results.txt-  --> crates/core/benches/parser_benchmarks.rs:12:38
llms.txt-crates/core/final_benchmark_results.txt-   |
--
llms.txt-crates/core/final_benchmark_results.txt-55 |     pub const MALFORMED_JSON: &str = r#"{'name': 'John', age: 30, "items": [1, 2, 3,]}"#;
llms.txt-crates/core/final_benchmark_results.txt-   |               ^^^^^^^^^^^^^^
llms.txt-crates/core/final_benchmark_results.txt-
llms.txt:crates/core/final_benchmark_results.txt:warning: `vexy_json-core` (lib test) generated 59 warnings (58 duplicates)
llms.txt:crates/core/final_benchmark_results.txt:warning: `vexy_json-core` (bench "parser_benchmarks") generated 3 warnings (run `cargo fix --bench "parser_benchmarks"` to apply 1 suggestion)
llms.txt-crates/core/final_benchmark_results.txt-    Finished `bench` profile [optimized] target(s) in 1m 06s
llms.txt:crates/core/final_benchmark_results.txt:     Running unittests src/lib.rs (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/target/release/deps/vexy_json_core-61b1bad5e05d5e9e)
llms.txt-crates/core/final_benchmark_results.txt-
llms.txt-crates/core/final_benchmark_results.txt-running 100 tests
llms.txt-crates/core/final_benchmark_results.txt-test error::recovery::tests::test_number_format_fix ... ignored
--
llms.txt-crates/core/final_benchmark_results.txt-
llms.txt-crates/core/final_benchmark_results.txt-test result: ok. 0 passed; 0 failed; 100 ignored; 0 measured; 0 filtered out; finished in 0.00s
llms.txt-crates/core/final_benchmark_results.txt-
llms.txt:crates/core/final_benchmark_results.txt:     Running benches/parser_benchmarks.rs (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/target/release/deps/parser_benchmarks-6ba04f7e4c288a89)
llms.txt-crates/core/final_benchmark_results.txt-Gnuplot not found, using plotters backend
llms.txt-crates/core/final_benchmark_results.txt-Benchmarking basic_parsing/simple_object
llms.txt-crates/core/final_benchmark_results.txt-Benchmarking basic_parsing/simple_object: Warming up for 3.0000 s
--
llms.txt-CHANGELOG.md-### 🔧 Fixed
llms.txt-CHANGELOG.md-
llms.txt-CHANGELOG.md-#### Post-Migration Cleanup (v2.3.1)
llms.txt:CHANGELOG.md:- Fixed C API header struct naming mismatch: `vexy_json_parser_options` → `VexyJsonParserOptions`
llms.txt-CHANGELOG.md-- Fixed Python test file naming inconsistencies: `VexyJSONParser` → `VexyJsonParser`
llms.txt-CHANGELOG.md-- Added missing struct fields to enable compilation:
llms.txt-CHANGELOG.md-  - Added `confidence` field to `ContextRule` struct
--
llms.txt-CHANGELOG.md-  - Fixed unreachable patterns
llms.txt-CHANGELOG.md-
llms.txt-CHANGELOG.md-### 🚀 Added
llms.txt:CHANGELOG.md:- Created `vexify.py` tool for renaming project from vexy_json to vexy_json
llms.txt-CHANGELOG.md-  - Intelligent handling of different contexts (filenames, code, documentation)
llms.txt-CHANGELOG.md-  - Support for compound words (e.g., VexyJSONConfig → VexyJSONConfig)
llms.txt-CHANGELOG.md-  - Optional `--deep` flag for git history rewriting
--
llms.txt-CHANGELOG.md-
llms.txt-CHANGELOG.md-**Old (v1.x):**
llms.txt-CHANGELOG.md-```rust
llms.txt:CHANGELOG.md:use vexy_json::parse;
llms.txt-CHANGELOG.md-let value = parse(json_string)?;
llms.txt-CHANGELOG.md-```
llms.txt-CHANGELOG.md-
llms.txt-CHANGELOG.md-**New (v2.0) - Still Compatible:**
llms.txt-CHANGELOG.md-```rust
llms.txt:CHANGELOG.md:use vexy_json::parse;
llms.txt-CHANGELOG.md-let value = parse(json_string)?; // Still works!
llms.txt-CHANGELOG.md-```
llms.txt-CHANGELOG.md-
llms.txt-CHANGELOG.md-**New (v2.0) - Enhanced Features:**
llms.txt-CHANGELOG.md-```rust
llms.txt:CHANGELOG.md:use vexy_json::{parse_with_options, ParserOptions};
llms.txt:CHANGELOG.md:use vexy_json::streaming::StreamingParser;
llms.txt:CHANGELOG.md:use vexy_json::parallel_chunked::parse_parallel_chunked;
llms.txt-CHANGELOG.md-
llms.txt-CHANGELOG.md-// Advanced options
llms.txt-CHANGELOG.md-let options = ParserOptions {
--
llms.txt-CHANGELOG.md-
llms.txt-CHANGELOG.md-### Release Links
llms.txt-CHANGELOG.md-
llms.txt:CHANGELOG.md:[2.0.0]: https://github.com/twardoch/vexy_json/compare/v1.5.27...v2.0.0
llms.txt:CHANGELOG.md:[1.5.27]: https://github.com/twardoch/vexy_json/compare/v1.5.26...v1.5.27
llms.txt:CHANGELOG.md:[1.5.26]: https://github.com/twardoch/vexy_json/compare/v1.5.25...v1.5.26
llms.txt:CHANGELOG.md:[1.5.25]: https://github.com/twardoch/vexy_json/compare/v1.5.24...v1.5.25
llms.txt:CHANGELOG.md:[1.5.24]: https://github.com/twardoch/vexy_json/compare/v1.5.23...v1.5.24
llms.txt:CHANGELOG.md:[1.5.23]: https://github.com/twardoch/vexy_json/releases/tag/v1.5.23
llms.txt:CHANGELOG.md:[Unreleased]: https://github.com/twardoch/vexy_json/compare/v2.0.0...HEAD
llms.txt---
llms.txt:crates/core/benchmark_results_v2.txt:   Compiling vexy_json-core v0.2.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/crates/core)
llms.txt-crates/core/benchmark_results_v2.txt-warning: unnecessary qualification
llms.txt-crates/core/benchmark_results_v2.txt-   --> crates/core/src/optimization/memory_pool.rs:157:34
llms.txt-crates/core/benchmark_results_v2.txt-    |
--
llms.txt-crates/core/benchmark_results_v2.txt-
llms.txt-crates/core/benchmark_results_v2.txt-Some errors have detailed explanations: E0505, E0515.
llms.txt-crates/core/benchmark_results_v2.txt-For more information about an error, try `rustc --explain E0505`.
llms.txt:crates/core/benchmark_results_v2.txt:warning: `vexy_json-core` (lib) generated 3 warnings
llms.txt:crates/core/benchmark_results_v2.txt:error: could not compile `vexy_json-core` (lib) due to 4 previous errors; 3 warnings emitted
llms.txt-crates/core/benchmark_results_v2.txt-warning: build failed, waiting for other jobs to finish...
llms.txt:crates/core/benchmark_results_v2.txt:warning: `vexy_json-core` (lib test) generated 3 warnings (3 duplicates)
llms.txt:crates/core/benchmark_results_v2.txt:error: could not compile `vexy_json-core` (lib test) due to 4 previous errors; 3 warnings emitted
llms.txt---
llms.txt-oss-fuzz/README.md-To set up OSS-Fuzz integration:
llms.txt-oss-fuzz/README.md-
llms.txt-oss-fuzz/README.md-1. Fork the [OSS-Fuzz repository](https://github.com/google/oss-fuzz)
llms.txt:oss-fuzz/README.md:2. Create a new directory under `projects/vexy_json/`
llms.txt:oss-fuzz/README.md:3. Copy the files from this directory to `projects/vexy_json/`
llms.txt-oss-fuzz/README.md-4. Submit a pull request to the OSS-Fuzz repository
llms.txt-oss-fuzz/README.md-
llms.txt-oss-fuzz/README.md-## Testing Locally
--
llms.txt-oss-fuzz/README.md-cd oss-fuzz
llms.txt-oss-fuzz/README.md-
llms.txt-oss-fuzz/README.md-# Copy project files
llms.txt:oss-fuzz/README.md:cp -r /path/to/vexy_json/oss-fuzz projects/vexy_json/
llms.txt-oss-fuzz/README.md-
llms.txt-oss-fuzz/README.md-# Build the project
llms.txt:oss-fuzz/README.md:python infra/helper.py build_image vexy_json
llms.txt:oss-fuzz/README.md:python infra/helper.py build_fuzzers vexy_json
llms.txt-oss-fuzz/README.md-
llms.txt-oss-fuzz/README.md-# Run fuzzers
llms.txt:oss-fuzz/README.md:python infra/helper.py run_fuzzer vexy_json json_structure
llms.txt-oss-fuzz/README.md-```
llms.txt-oss-fuzz/README.md-
llms.txt-oss-fuzz/README.md-## Fuzzing Targets
--
llms.txt-oss-fuzz/README.md-## Coverage
llms.txt-oss-fuzz/README.md-
llms.txt-oss-fuzz/README.md-Coverage reports are automatically generated and can be viewed at:
llms.txt:oss-fuzz/README.md:https://storage.googleapis.com/oss-fuzz-coverage/vexy_json/latest/index.html
llms.txt-oss-fuzz/README.md-
llms.txt-oss-fuzz/README.md-## Bug Reports
llms.txt-oss-fuzz/README.md-
--
llms.txt-WORK.md-#### Phase 0: Critical Fixes (Completed)
llms.txt-WORK.md-
llms.txt-WORK.md-1. **Fixed C API struct naming mismatch**
llms.txt:WORK.md:   - Changed `vexy_json_parser_options` to `VexyJsonParserOptions` in vexy_json.h:135
llms.txt-WORK.md-   - This prevents C/C++ linking failures
llms.txt-WORK.md-
llms.txt-WORK.md-2. **Fixed Python test naming issues**
llms.txt:WORK.md:   - Updated test_vexy_json.py to use `VexyJSON` instead of `VEXYJSON`
llms.txt-WORK.md-   - Fixed imports: `VEXYJSONParser` → `VexyJSONParser`, `VEXYJSONConfig` → `VexyJSONConfig`
llms.txt-WORK.md-   - Fixed class name: `VEXYJSONWrapper` → `VexyJSONWrapper`
llms.txt-WORK.md-
--
llms.txt-WORK.md-### Build Output Summary
llms.txt-WORK.md-
llms.txt-WORK.md-```
llms.txt:WORK.md:cargo build --package vexy_json-core --package vexy_json-cli
llms.txt-WORK.md-Finished `dev` profile [unoptimized + debuginfo] target(s) in 9.59s
llms.txt:WORK.md:warning: `vexy_json-core` (lib) generated 24 warnings
llms.txt-WORK.md-```
llms.txt-WORK.md-
llms.txt-WORK.md-### 🔄 Current Work Items
llms.txt---
llms.txt:issues/106.txt:# JSON Repair Integration Specification for vexy_json
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-## Executive Summary
llms.txt-issues/106.txt-
llms.txt:issues/106.txt:This document provides a detailed specification for integrating the `json-repair` crate into the vexy_json project to handle mismatched brackets and braces - a limitation that neither our `vexy_json` nor the original `jsonic` parser can currently overcome. The integration will implement a three-tier parsing approach with performance-optimized fallback chains.
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-## 1. Problem Statement
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-### Current Limitations
llms.txt:issues/106.txt:- Both `vexy_json` and `jsonic` fail on mismatched brackets/braces (e.g., `{key: "value"]`, `[1, 2, 3}`)
llms.txt-issues/106.txt-- No error recovery mechanism for structural delimiter mismatches
llms.txt-issues/106.txt-- Complete parsing failure rather than partial recovery with error reporting
llms.txt-issues/106.txt-- Missing brackets at end-of-input cause total failure
--
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-```
llms.txt-issues/106.txt-Input JSON → Tier 1: Fast Path → Tier 2: Forgiving Path → Tier 3: Repair Path → Output
llms.txt:issues/106.txt:             (serde_json)      (vexy_json core)         (json-repair)
llms.txt-issues/106.txt-```
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-**Tier 1: Fast Path (serde_json)**
--
llms.txt-issues/106.txt-- Zero-copy optimization where possible
llms.txt-issues/106.txt-- Immediate failure on any syntax error
llms.txt-issues/106.txt-
llms.txt:issues/106.txt:**Tier 2: Forgiving Path (vexy_json core)**
llms.txt:issues/106.txt:- Current vexy_json parser with all forgiving features
llms.txt-issues/106.txt-- Handles comments, trailing commas, unquoted keys, etc.
llms.txt-issues/106.txt-- Fails on bracket mismatches
llms.txt-issues/106.txt-
--
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-### Version Compatibility
llms.txt-issues/106.txt-- `json-repair` 0.2.x: Stable API, bracket balancing, minimal dependencies
llms.txt:issues/106.txt:- Compatible with current `vexy_json` dependency stack
llms.txt-issues/106.txt-- No conflicting dependencies identified
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-## 4. Core Implementation
--
llms.txt-issues/106.txt-#[derive(Debug, Clone)]
llms.txt-issues/106.txt-pub enum ParsingTier {
llms.txt-issues/106.txt-    Fast,      // serde_json succeeded
llms.txt:issues/106.txt:    Forgiving, // vexy_json succeeded
llms.txt-issues/106.txt-    Repair,    // json-repair succeeded
llms.txt-issues/106.txt-}
llms.txt-issues/106.txt-
--
llms.txt-issues/106.txt-        };
llms.txt-issues/106.txt-    }
llms.txt-issues/106.txt-
llms.txt:issues/106.txt:    // Tier 2: Forgiving Path - vexy_json core
llms.txt-issues/106.txt-    match parse_with_options(input, options) {
llms.txt-issues/106.txt-        Ok(value) => {
llms.txt-issues/106.txt-            return ParseResult {
--
llms.txt-issues/106.txt-            // Track what repairs were made
llms.txt-issues/106.txt-            repairs.extend(detect_repairs(input, &repaired_json));
llms.txt-issues/106.txt-
llms.txt:issues/106.txt:            // Parse the repaired JSON with vexy_json
llms.txt-issues/106.txt-            match parse_with_options(&repaired_json, options) {
llms.txt-issues/106.txt-                Ok(value) => ParseResult {
llms.txt-issues/106.txt-                    value,
--
llms.txt-issues/106.txt-```rust
llms.txt-issues/106.txt-// In crates/cli/src/main.rs
llms.txt-issues/106.txt-#[derive(Parser)]
llms.txt:issues/106.txt:#[command(name = "vexy_json")]
llms.txt-issues/106.txt-struct Cli {
llms.txt-issues/106.txt-    // ... existing options ...
llms.txt-issues/106.txt-    
--
llms.txt-issues/106.txt-// In tests/repair_integration.rs
llms.txt-issues/106.txt-#[cfg(test)]
llms.txt-issues/106.txt-mod integration_tests {
llms.txt:issues/106.txt:    use vexy_json::{parse_with_fallback, ParserOptions, ParsingTier};
llms.txt-issues/106.txt-    
llms.txt-issues/106.txt-    #[test]
llms.txt-issues/106.txt-    fn test_complex_bracket_mismatch() {
--
llms.txt-issues/106.txt-```rust
llms.txt-issues/106.txt-// In benches/repair_benchmark.rs
llms.txt-issues/106.txt-use criterion::{black_box, criterion_group, criterion_main, Criterion};
llms.txt:issues/106.txt:use vexy_json::{parse_with_fallback, ParserOptions};
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-fn bench_parsing_tiers(c: &mut Criterion) {
llms.txt-issues/106.txt-    let mut group = c.benchmark_group("parsing_tiers");
--
llms.txt-issues/106.txt-```markdown
llms.txt-issues/106.txt-## Enhanced Error Recovery
llms.txt-issues/106.txt-
llms.txt:issues/106.txt:vexy_json now features advanced error recovery capabilities that can handle mismatched brackets and braces:
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-```rust
llms.txt:issues/106.txt:use vexy_json::{parse_with_fallback, ParserOptions};
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-// This will now succeed with automatic repair
llms.txt-issues/106.txt-let broken_json = r#"{"key": "value"]"#;
--
llms.txt-issues/106.txt-### Three-Tier Parsing
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-1. **Fast Tier**: Uses `serde_json` for maximum performance on valid JSON
llms.txt:issues/106.txt:2. **Forgiving Tier**: Uses vexy_json's forgiving features for relaxed JSON syntax
llms.txt-issues/106.txt-3. **Repair Tier**: Uses `json-repair` for automatic bracket balancing and error correction
llms.txt-issues/106.txt-```
llms.txt-issues/106.txt-
--
llms.txt-issues/106.txt-///
llms.txt-issues/106.txt-/// This function implements a three-tier parsing strategy:
llms.txt-issues/106.txt-/// 1. Fast path using `serde_json` for valid JSON
llms.txt:issues/106.txt:/// 2. Forgiving path using vexy_json's tolerant parsing
llms.txt-issues/106.txt-/// 3. Repair path using `json-repair` for bracket mismatches
llms.txt-issues/106.txt-///
llms.txt-issues/106.txt-/// # Examples
llms.txt-issues/106.txt-///
llms.txt-issues/106.txt-/// ```rust
llms.txt:issues/106.txt:/// use vexy_json::{parse_with_fallback, ParserOptions};
llms.txt-issues/106.txt-///
llms.txt-issues/106.txt-/// // Valid JSON - uses fast path
llms.txt-issues/106.txt-/// let valid = r#"{"key": "value"}"#;
--
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-```rust
llms.txt-issues/106.txt-// This still works exactly as before
llms.txt:issues/106.txt:let value = vexy_json::parse(r#"{"key": "value"}"#)?;
llms.txt-issues/106.txt-```
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-### 11.2 New Features Adoption
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-```rust
llms.txt-issues/106.txt-// Opt into new features gradually
llms.txt:issues/106.txt:use vexy_json::{parse_with_fallback, ParserOptions};
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-// Enable repair with configuration
llms.txt-issues/106.txt-let options = ParserOptions {
--
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-## 15. Conclusion
llms.txt-issues/106.txt-
llms.txt:issues/106.txt:This specification provides a comprehensive roadmap for integrating `json-repair` into vexy_json while maintaining backward compatibility and performance. The three-tier parsing approach ensures optimal performance for valid JSON while providing robust error recovery for malformed input.
llms.txt-issues/106.txt-
llms.txt:issues/106.txt:The implementation will significantly expand vexy_json's capabilities while maintaining its core design principles of being fast, forgiving, and user-friendly.
llms.txt---
llms.txt-crates/core/src/error/mod.rs-// this_file: src/error/mod.rs
llms.txt-crates/core/src/error/mod.rs-
llms.txt:crates/core/src/error/mod.rs://! Error handling module for vexy_json parser.
llms.txt-crates/core/src/error/mod.rs-//!
llms.txt-crates/core/src/error/mod.rs-//! This module provides comprehensive error handling capabilities including:
llms.txt-crates/core/src/error/mod.rs-//! - Structured error codes with unique identifiers
llms.txt---
llms.txt:crates/core/examples/advanced_repair.rs:use vexy_json_core::repair::{AdvancedJsonRepairer, TypeCoercionRules};
llms.txt-crates/core/examples/advanced_repair.rs-
llms.txt-crates/core/examples/advanced_repair.rs-fn main() {
llms.txt-crates/core/examples/advanced_repair.rs-    println!("=== Vexy JSON Advanced Repair Examples ===\n");
--
llms.txt-crates/core/src/lib.rs-    unused_qualifications
llms.txt-crates/core/src/lib.rs-)]
llms.txt-crates/core/src/lib.rs-
llms.txt:crates/core/src/lib.rs://! Core parsing logic for vexy_json, a forgiving JSON parser.
llms.txt-crates/core/src/lib.rs-
llms.txt:crates/core/src/lib.rs:/// Abstract Syntax Tree components for vexy_json parsing.
llms.txt-crates/core/src/lib.rs-pub mod ast;
llms.txt-crates/core/src/lib.rs-
llms.txt:crates/core/src/lib.rs:/// Error types and result type alias for the vexy_json parser.
llms.txt-crates/core/src/lib.rs-pub mod error;
llms.txt-crates/core/src/lib.rs-
llms.txt:crates/core/src/lib.rs:/// Lexical analyzer (tokenizer) for vexy_json parsing.
llms.txt-crates/core/src/lib.rs-pub mod lexer;
llms.txt-crates/core/src/lib.rs-
llms.txt-crates/core/src/lib.rs-/// Parser implementation for converting tokens to JSON values.
llms.txt---
llms.txt-crates/core/Cargo.toml-[package]
llms.txt:crates/core/Cargo.toml:name = "vexy_json-core"
llms.txt-crates/core/Cargo.toml-version = "2.2.3"
llms.txt-crates/core/Cargo.toml-edition = "2021"
llms.txt-crates/core/Cargo.toml-
--
llms.txt-oss-fuzz/Dockerfile-    && rm -rf /var/lib/apt/lists/*
llms.txt-oss-fuzz/Dockerfile-
llms.txt-oss-fuzz/Dockerfile-# Copy the project source
llms.txt:oss-fuzz/Dockerfile:COPY . $SRC/vexy_json
llms.txt-oss-fuzz/Dockerfile-
llms.txt-oss-fuzz/Dockerfile-# Set the working directory
llms.txt:oss-fuzz/Dockerfile:WORKDIR $SRC/vexy_json
llms.txt-oss-fuzz/Dockerfile-
llms.txt-oss-fuzz/Dockerfile-# Copy the build script
llms.txt-oss-fuzz/Dockerfile-COPY oss-fuzz/build.sh $SRC/build.sh
--
llms.txt-docs/tool.md-- Plugin system support
llms.txt-docs/tool.md-
llms.txt-docs/tool.md-<div style="text-align: center; margin: 2em 0;">
llms.txt:docs/tool.md:  <a href="{{ '/vexy_json-tool/' | relative_url }}" class="btn btn-primary" style="font-size: 1.1em; padding: 0.7em 1.5em; margin: 0.5em;">
llms.txt-docs/tool.md-    🚀 Vexy JSON Tool
llms.txt-docs/tool.md-  </a>
llms.txt-docs/tool.md-  <a href="{{ '/jsonic-tool/' | relative_url }}" class="btn btn-secondary" style="font-size: 1.1em; padding: 0.7em 1.5em; margin: 0.5em;">
--
llms.txt-docs/tool.md-- ✅ **Dark/light themes** - Choose your preferred color scheme
llms.txt-docs/tool.md-- ✅ **Mobile responsive** - Works on all devices
llms.txt-docs/tool.md-
llms.txt:docs/tool.md:## [∞](#vexy_json-specific-features) Vexy JSON Specific Features
llms.txt-docs/tool.md-
llms.txt-docs/tool.md-- Single-line comments (`//` and `#`)
llms.txt-docs/tool.md-- Multi-line comments (`/* */`)
llms.txt---
llms.txt-crates/python/src/lib.rs-// this_file: crates/python/src/lib.rs
llms.txt-crates/python/src/lib.rs-
llms.txt:crates/python/src/lib.rs://! Python bindings for vexy_json - a forgiving JSON parser.
llms.txt-crates/python/src/lib.rs-//!
llms.txt:crates/python/src/lib.rs://! This module provides Python bindings for the vexy_json library using PyO3,
llms.txt-crates/python/src/lib.rs-//! allowing Python users to parse forgiving JSON with the same capabilities
llms.txt-crates/python/src/lib.rs-//! as the Rust library.
llms.txt-crates/python/src/lib.rs-
llms.txt-crates/python/src/lib.rs-use pyo3::prelude::*;
llms.txt-crates/python/src/lib.rs-use pyo3::types::{PyDict, PyList};
llms.txt-crates/python/src/lib.rs-use pyo3::exceptions::{PyValueError, PyTypeError};
llms.txt:crates/python/src/lib.rs:use vexy_json_core::{parse, parse_with_options, ParserOptions};
llms.txt:crates/python/src/lib.rs:use vexy_json_core::ast::Value;
llms.txt-crates/python/src/lib.rs-use rustc_hash::FxHashMap;
llms.txt-crates/python/src/lib.rs-
llms.txt:crates/python/src/lib.rs:/// Convert a vexy_json Value to a Python object
llms.txt-crates/python/src/lib.rs-fn value_to_python(py: Python, value: &Value) -> PyResult<PyObject> {
llms.txt-crates/python/src/lib.rs-    match value {
llms.txt-crates/python/src/lib.rs-        Value::Null => Ok(py.None()),
llms.txt-crates/python/src/lib.rs-        Value::Bool(b) => Ok(b.to_object(py)),
llms.txt-crates/python/src/lib.rs-        Value::Number(num) => match num {
llms.txt:crates/python/src/lib.rs:            vexy_json_core::ast::Number::Integer(i) => Ok(i.to_object(py)),
llms.txt:crates/python/src/lib.rs:            vexy_json_core::ast::Number::Float(f) => Ok(f.to_object(py)),
llms.txt-crates/python/src/lib.rs-        },
llms.txt-crates/python/src/lib.rs-        Value::String(s) => Ok(s.to_object(py)),
llms.txt-crates/python/src/lib.rs-        Value::Array(arr) => {
--
llms.txt-crates/python/src/lib.rs-    }
llms.txt-crates/python/src/lib.rs-}
llms.txt-crates/python/src/lib.rs-
llms.txt:crates/python/src/lib.rs:/// Convert a Python object to a vexy_json Value
llms.txt-crates/python/src/lib.rs-fn python_to_value(py: Python, obj: &Bound<'_, PyAny>) -> PyResult<Value> {
llms.txt-crates/python/src/lib.rs-    if obj.is_none() {
llms.txt-crates/python/src/lib.rs-        Ok(Value::Null)
llms.txt-crates/python/src/lib.rs-    } else if let Ok(b) = obj.extract::<bool>() {
llms.txt-crates/python/src/lib.rs-        Ok(Value::Bool(b))
llms.txt-crates/python/src/lib.rs-    } else if let Ok(i) = obj.extract::<i64>() {
llms.txt:crates/python/src/lib.rs:        Ok(Value::Number(vexy_json_core::ast::Number::Integer(i)))
llms.txt-crates/python/src/lib.rs-    } else if let Ok(f) = obj.extract::<f64>() {
llms.txt:crates/python/src/lib.rs:        Ok(Value::Number(vexy_json_core::ast::Number::Float(f)))
llms.txt-crates/python/src/lib.rs-    } else if let Ok(s) = obj.extract::<String>() {
llms.txt-crates/python/src/lib.rs-        Ok(Value::String(s))
llms.txt-crates/python/src/lib.rs-    } else if let Ok(list) = obj.downcast::<PyList>() {
--
llms.txt-crates/python/src/lib.rs-        Ok(Value::Object(map))
llms.txt-crates/python/src/lib.rs-    } else {
llms.txt-crates/python/src/lib.rs-        Err(PyTypeError::new_err(format!(
llms.txt:crates/python/src/lib.rs:            "Cannot convert Python object of type {} to vexy_json Value",
llms.txt-crates/python/src/lib.rs-            obj.get_type().name()?
llms.txt-crates/python/src/lib.rs-        )))
llms.txt-crates/python/src/lib.rs-    }
--
llms.txt-crates/python/src/lib.rs-///     ValueError: If the input is not valid JSON
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt:crates/python/src/lib.rs:///     >>> result = vexy_json.parse('{"key": "value", trailing: true,}')
llms.txt-crates/python/src/lib.rs-///     >>> print(result)
llms.txt-crates/python/src/lib.rs-///     {'key': 'value', 'trailing': True}
llms.txt-crates/python/src/lib.rs-#[pyfunction]
--
llms.txt-crates/python/src/lib.rs-///     ValueError: If the input is not valid JSON
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt:crates/python/src/lib.rs:///     >>> result = vexy_json.parse_with_options('key: value', implicit_top_level=True)
llms.txt-crates/python/src/lib.rs-///     >>> print(result)
llms.txt-crates/python/src/lib.rs-///     {'key': 'value'}
llms.txt-crates/python/src/lib.rs-#[pyfunction]
--
llms.txt-crates/python/src/lib.rs-///     bool: True if the input is valid, False otherwise
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt:crates/python/src/lib.rs:///     >>> vexy_json.is_valid('{"valid": true}')
llms.txt-crates/python/src/lib.rs-///     True
llms.txt:crates/python/src/lib.rs:///     >>> vexy_json.is_valid('invalid json')
llms.txt-crates/python/src/lib.rs-///     False
llms.txt-crates/python/src/lib.rs-#[pyfunction]
llms.txt-crates/python/src/lib.rs-fn is_valid(input: &str) -> bool {
--
llms.txt-crates/python/src/lib.rs-///     TypeError: If the object cannot be serialized to JSON
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt-crates/python/src/lib.rs-///     >>> data = {'key': 'value', 'number': 42}
llms.txt:crates/python/src/lib.rs:///     >>> vexy_json.dumps(data)
llms.txt-crates/python/src/lib.rs-///     '{"key":"value","number":42}'
llms.txt:crates/python/src/lib.rs:///     >>> vexy_json.dumps(data, indent=2)
llms.txt-crates/python/src/lib.rs-///     '{\n  "key": "value",\n  "number": 42\n}'
llms.txt-crates/python/src/lib.rs-#[pyfunction]
llms.txt-crates/python/src/lib.rs-#[pyo3(signature = (obj, indent = None))]
--
llms.txt-crates/python/src/lib.rs-        Value::Null => "null".to_string(),
llms.txt-crates/python/src/lib.rs-        Value::Bool(b) => b.to_string(),
llms.txt-crates/python/src/lib.rs-        Value::Number(num) => match num {
llms.txt:crates/python/src/lib.rs:            vexy_json_core::ast::Number::Integer(i) => i.to_string(),
llms.txt:crates/python/src/lib.rs:            vexy_json_core::ast::Number::Float(f) => f.to_string(),
llms.txt-crates/python/src/lib.rs-        },
llms.txt-crates/python/src/lib.rs-        Value::String(s) => format!("\"{}\"", s.replace("\"", "\\\"")),
llms.txt-crates/python/src/lib.rs-        Value::Array(arr) => {
--
llms.txt-crates/python/src/lib.rs-///     ValueError: If the content is not valid JSON
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt-crates/python/src/lib.rs-///     >>> with open('data.json', 'r') as f:
llms.txt:crates/python/src/lib.rs:///     ...     result = vexy_json.load(f)
llms.txt-crates/python/src/lib.rs-#[pyfunction]
llms.txt-crates/python/src/lib.rs-#[pyo3(signature = (fp, **kwargs))]
llms.txt-crates/python/src/lib.rs-fn load(py: Python, fp: &Bound<'_, PyAny>, kwargs: Option<&Bound<'_, PyDict>>) -> PyResult<PyObject> {
--
llms.txt-crates/python/src/lib.rs-///     TypeError: If the object cannot be serialized
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt-crates/python/src/lib.rs-///     >>> data = {'key': 'value'}
llms.txt-crates/python/src/lib.rs-///     >>> with open('output.json', 'w') as f:
llms.txt:crates/python/src/lib.rs:///     ...     vexy_json.dump(data, f, indent=2)
llms.txt-crates/python/src/lib.rs-#[pyfunction]
llms.txt-crates/python/src/lib.rs-#[pyo3(signature = (obj, fp, indent = None))]
llms.txt-crates/python/src/lib.rs-fn dump(py: Python, obj: &Bound<'_, PyAny>, fp: &Bound<'_, PyAny>, indent: Option<usize>) -> PyResult<()> {
--
llms.txt-crates/python/src/lib.rs-/// JSON files or streams.
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt:crates/python/src/lib.rs:///     >>> with vexy_json.StreamingParser() as parser:
llms.txt-crates/python/src/lib.rs-///     ...     for item in parser.parse_stream(file_handle):
llms.txt-crates/python/src/lib.rs-///     ...         print(item)
llms.txt-crates/python/src/lib.rs-#[pyclass]
--
llms.txt-crates/python/src/lib.rs-    ///     Iterator of parsed JSON objects
llms.txt-crates/python/src/lib.rs-    ///
llms.txt-crates/python/src/lib.rs-    /// Example:
llms.txt:crates/python/src/lib.rs:    ///     >>> with vexy_json.StreamingParser() as parser:
llms.txt-crates/python/src/lib.rs-    ///     ...     for item in parser.parse_stream(file_handle):
llms.txt-crates/python/src/lib.rs-    ///     ...         process(item)
llms.txt-crates/python/src/lib.rs-    fn parse_stream(&mut self, _py: Python, fp: &Bound<'_, PyAny>) -> PyResult<StreamingIterator> {
--
llms.txt-crates/python/src/lib.rs-    ///     Iterator of parsed JSON objects
llms.txt-crates/python/src/lib.rs-    ///
llms.txt-crates/python/src/lib.rs-    /// Example:
llms.txt:crates/python/src/lib.rs:    ///     >>> with vexy_json.StreamingParser() as parser:
llms.txt-crates/python/src/lib.rs-    ///     ...     for item in parser.parse_lines(file_handle):
llms.txt-crates/python/src/lib.rs-    ///     ...         process(item)
llms.txt-crates/python/src/lib.rs-    fn parse_lines(&mut self, _py: Python, fp: &Bound<'_, PyAny>) -> PyResult<LineIterator> {
--
llms.txt-crates/python/src/lib.rs-///     ImportError: If NumPy is not available
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt:crates/python/src/lib.rs:///     >>> arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-crates/python/src/lib.rs-///     >>> print(type(arr))
llms.txt-crates/python/src/lib.rs-///     <class 'numpy.ndarray'>
llms.txt-crates/python/src/lib.rs-#[pyfunction]
--
llms.txt-crates/python/src/lib.rs-                // Fast path for numeric arrays
llms.txt-crates/python/src/lib.rs-                let numbers: Vec<f64> = arr.iter().map(|v| {
llms.txt-crates/python/src/lib.rs-                    match v {
llms.txt:crates/python/src/lib.rs:                        Value::Number(vexy_json_core::ast::Number::Integer(i)) => *i as f64,
llms.txt:crates/python/src/lib.rs:                        Value::Number(vexy_json_core::ast::Number::Float(f)) => *f,
llms.txt-crates/python/src/lib.rs-                        _ => 0.0, // Should not happen due to all_numbers check
llms.txt-crates/python/src/lib.rs-                    }
llms.txt-crates/python/src/lib.rs-                }).collect();
--
llms.txt-crates/python/src/lib.rs-///     numpy.ndarray: The parsed array with zero-copy optimization when possible
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt:crates/python/src/lib.rs:///     >>> arr = vexy_json.loads_numpy_zerocopy('[1.0, 2.0, 3.0]', dtype='float64')
llms.txt-crates/python/src/lib.rs-#[pyfunction]
llms.txt-crates/python/src/lib.rs-#[pyo3(signature = (input, dtype = None))]
llms.txt-crates/python/src/lib.rs-fn loads_numpy_zerocopy(py: Python, input: &str, dtype: Option<&str>) -> PyResult<PyObject> {
--
llms.txt-crates/python/src/lib.rs-            
llms.txt-crates/python/src/lib.rs-            for item in &arr {
llms.txt-crates/python/src/lib.rs-                match item {
llms.txt:crates/python/src/lib.rs:                    Value::Number(vexy_json_core::ast::Number::Integer(_)) => {
llms.txt-crates/python/src/lib.rs-                        all_floats = false;
llms.txt-crates/python/src/lib.rs-                    }
llms.txt:crates/python/src/lib.rs:                    Value::Number(vexy_json_core::ast::Number::Float(_)) => {
llms.txt-crates/python/src/lib.rs-                        all_integers = false;
llms.txt-crates/python/src/lib.rs-                    }
llms.txt-crates/python/src/lib.rs-                    _ => {
--
llms.txt-crates/python/src/lib.rs-                // Zero-copy path for integers
llms.txt-crates/python/src/lib.rs-                let integers: Vec<i64> = arr.iter().map(|v| {
llms.txt-crates/python/src/lib.rs-                    match v {
llms.txt:crates/python/src/lib.rs:                        Value::Number(vexy_json_core::ast::Number::Integer(i)) => *i,
llms.txt-crates/python/src/lib.rs-                        _ => 0, // Should not happen
llms.txt-crates/python/src/lib.rs-                    }
llms.txt-crates/python/src/lib.rs-                }).collect();
--
llms.txt-crates/python/src/lib.rs-                // Zero-copy path for floats or mixed numbers
llms.txt-crates/python/src/lib.rs-                let floats: Vec<f64> = arr.iter().map(|v| {
llms.txt-crates/python/src/lib.rs-                    match v {
llms.txt:crates/python/src/lib.rs:                        Value::Number(vexy_json_core::ast::Number::Integer(i)) => *i as f64,
llms.txt:crates/python/src/lib.rs:                        Value::Number(vexy_json_core::ast::Number::Float(f)) => *f,
llms.txt-crates/python/src/lib.rs-                        _ => 0.0, // Should not happen
llms.txt-crates/python/src/lib.rs-                    }
llms.txt-crates/python/src/lib.rs-                }).collect();
--
llms.txt-crates/python/src/lib.rs-///     pandas.DataFrame: The parsed JSON as a DataFrame
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt:crates/python/src/lib.rs:///     >>> df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
llms.txt-crates/python/src/lib.rs-///     >>> print(type(df))
llms.txt-crates/python/src/lib.rs-///     <class 'pandas.core.frame.DataFrame'>
llms.txt-crates/python/src/lib.rs-#[pyfunction]
--
llms.txt-crates/python/src/lib.rs-
llms.txt-crates/python/src/lib.rs-/// A Python module for parsing forgiving JSON
llms.txt-crates/python/src/lib.rs-#[pymodule]
llms.txt:crates/python/src/lib.rs:fn _vexy_json(m: &Bound<'_, PyModule>) -> PyResult<()> {
llms.txt-crates/python/src/lib.rs-    m.add_function(wrap_pyfunction!(parse_json, m)?)?;
llms.txt-crates/python/src/lib.rs-    m.add_function(wrap_pyfunction!(parse_with_options_py, m)?)?;
llms.txt-crates/python/src/lib.rs-    m.add_function(wrap_pyfunction!(is_valid, m)?)?;
--
llms.txt-crates/python/src/lib.rs-    // Add version information
llms.txt-crates/python/src/lib.rs-    m.add("__version__", env!("VEXY_JSON_VERSION", env!("CARGO_PKG_VERSION")))?;
llms.txt-crates/python/src/lib.rs-    m.add("__author__", "Adam Twardoch")?;
llms.txt:crates/python/src/lib.rs:    m.add("__description__", "A forgiving JSON parser - Python bindings for vexy_json")?;
llms.txt-crates/python/src/lib.rs-    
llms.txt-crates/python/src/lib.rs-    Ok(())
llms.txt-crates/python/src/lib.rs-}
--
llms.txt-docs/json-repair.md-### Simple Usage
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::repair::JsonRepairer;
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-let mut repairer = JsonRepairer::new(10); // Max 10 repairs
llms.txt-docs/json-repair.md-let malformed = r#"{"key": "value", "missing": "quote}"#;
--
llms.txt-docs/json-repair.md-### Configuration
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::repair::advanced::{AdvancedJsonRepairer, TypeCoercionRules};
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-let mut repairer = AdvancedJsonRepairer::new()
llms.txt-docs/json-repair.md-    .with_confidence_threshold(0.7)
--
llms.txt-docs/json-repair.md-Each repair strategy has a confidence score:
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::repair::advanced::RepairConfidence;
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-let (fixed, strategies) = repairer.repair(input)?;
llms.txt-docs/json-repair.md-
--
llms.txt-docs/json-repair.md-### Detailed Repair Tracking
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::parser::parse_with_detailed_repair_tracking;
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-let result = parse_with_detailed_repair_tracking(input, options)?;
llms.txt-docs/json-repair.md-
--
llms.txt-docs/json-repair.md-3. **Repair Tier**: Automatic repair for malformed JSON
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::parser::parse_with_fallback;
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-let result = parse_with_fallback(input, options);
llms.txt-docs/json-repair.md-// Automatically tries all three tiers
--
llms.txt-docs/json-repair.md-### Tracking Repair History
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::repair::advanced::AdvancedJsonRepairer;
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-let mut repairer = AdvancedJsonRepairer::new();
llms.txt-docs/json-repair.md-
--
llms.txt-docs/json-repair.md-### Implementing Custom Repairs
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::repair::advanced::{RepairStrategy, RepairAction, RepairType, RepairConfidence};
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-fn create_custom_repair(input: &str) -> Option<RepairStrategy> {
llms.txt-docs/json-repair.md-    // Custom logic to detect and fix specific issues
--
llms.txt-docs/json-repair.md-### Automatic Repair During Parsing
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::{parse_with_options, ParserOptions};
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-let options = ParserOptions {
llms.txt-docs/json-repair.md-    enable_repair: true,
--
llms.txt-docs/json-repair.md-### Repair-First Parsing
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::parser::parse_with_fallback;
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-// Always try repair if normal parsing fails
llms.txt-docs/json-repair.md-let result = parse_with_fallback(input, options);
--
llms.txt-docs/json-repair.md-### Repair Failures
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::repair::JsonRepairer;
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-let mut repairer = JsonRepairer::new(5);
llms.txt-docs/json-repair.md-match repairer.repair(input) {
--
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-## Overview
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-
llms.txt:crates/core/PHASE_2_COMPLETION_SUMMARY.md:Phase 2 focused on implementing comprehensive performance optimizations for the vexy_json JSON parser. This phase involved three key areas: memory optimization, lazy evaluation, and streaming parsing capabilities.
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-## Completed Components
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-
--
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-## Conclusion
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-
llms.txt:crates/core/PHASE_2_COMPLETION_SUMMARY.md:Phase 2 successfully established a comprehensive performance optimization foundation for vexy_json. While some optimizations show overhead in their current form, the infrastructure is solid and provides multiple avenues for future improvements.
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-The implementation demonstrates sophisticated memory management, streaming capabilities, and lazy evaluation patterns that will serve as the foundation for continued performance enhancements in future phases.
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-
--
llms.txt-crates/core/src/error/repair.rs-pub enum ParsingTier {
llms.txt-crates/core/src/error/repair.rs-    /// Fast path using serde_json succeeded
llms.txt-crates/core/src/error/repair.rs-    Fast,
llms.txt:crates/core/src/error/repair.rs:    /// Forgiving path using vexy_json core succeeded
llms.txt-crates/core/src/error/repair.rs-    Forgiving,
llms.txt-crates/core/src/error/repair.rs-    /// Repair path using json-repair succeeded
llms.txt-crates/core/src/error/repair.rs-    Repair,
llms.txt---
llms.txt:crates/core/examples/error_reporting.rs:use vexy_json_core::error::reporter::{full_error_report, plain_error_report, quick_error_report};
llms.txt:crates/core/examples/error_reporting.rs:use vexy_json_core::parse;
llms.txt-crates/core/examples/error_reporting.rs-
llms.txt-crates/core/examples/error_reporting.rs-fn main() {
llms.txt-crates/core/examples/error_reporting.rs-    // Example 1: Missing closing brace
--
llms.txt-issues/103.txt-In @docs we have @docs/tool.html
llms.txt-issues/103.txt-
llms.txt-issues/103.txt-1. We want that page to share navigation with the remaining Jekyll site, somehow. 
llms.txt:issues/103.txt:2. More importantly, we want a "sister web page" with the identical design which will allow the end-user to use the `jsonic` library (analogous to our `vexy_json` in @docs/tool.html)
llms.txt-issues/103.txt-
llms.txt-issues/103.txt-Into @PLAN.md develop a very detailed and specific plan for the above. 
llms.txt-issues/103.txt-
llms.txt---
llms.txt-oss-fuzz/project.yaml-# this_file: oss-fuzz/project.yaml
llms.txt-oss-fuzz/project.yaml-
llms.txt:oss-fuzz/project.yaml:homepage: "https://github.com/twardoch/pub/vexy_json"
llms.txt-oss-fuzz/project.yaml-language: rust
llms.txt-oss-fuzz/project.yaml-primary_contact: "adam@twardoch.com"
llms.txt-oss-fuzz/project.yaml-auto_ccs:
--
llms.txt-oss-fuzz/project.yaml-coverage_extra_args: "--target-dir=/tmp/coverage"
llms.txt-oss-fuzz/project.yaml-
llms.txt-oss-fuzz/project.yaml-# Additional configuration
llms.txt:oss-fuzz/project.yaml:main_repo: "https://github.com/twardoch/pub/vexy_json"
llms.txt-oss-fuzz/project.yaml-file_github_issue: true
llms.txt---
llms.txt-docs/benchmarks.md-
llms.txt-docs/benchmarks.md-# Benchmark Results
llms.txt-docs/benchmarks.md-
llms.txt:docs/benchmarks.md:This section presents the parsing performance benchmarks for `vexy_json` (Rust).
llms.txt-docs/benchmarks.md-Benchmarks were run on the following environment:
llms.txt-docs/benchmarks.md-
llms.txt-docs/benchmarks.md-*   **CPU**: [e.g., Intel Core i7-10700K]
--
llms.txt-docs/benchmarks.md-
llms.txt-docs/benchmarks.md-Lower values (nanoseconds per iteration) are better.
llms.txt-docs/benchmarks.md-
llms.txt:docs/benchmarks.md:| Test Case | `vexy_json` (ns/iter) |
llms.txt-docs/benchmarks.md-|---|---|
llms.txt-docs/benchmarks.md-| simple | 7782 |
llms.txt-docs/benchmarks.md-| array | 7836 |
llms.txt---
llms.txt:crates/core/src/error/recovery_v2.rs://! Smart error recovery engine for vexy_json parsing
llms.txt-crates/core/src/error/recovery_v2.rs-//!
llms.txt-crates/core/src/error/recovery_v2.rs-//! This module implements advanced error recovery strategies including:
llms.txt-crates/core/src/error/recovery_v2.rs-//! - ML-based pattern recognition for common errors
llms.txt---
llms.txt-crates/python/README.md-# this_file: crates/python/README.md
llms.txt-crates/python/README.md-
llms.txt:crates/python/README.md:# vexy_json Python Bindings
llms.txt-crates/python/README.md-
llms.txt:crates/python/README.md:Python bindings for the vexy_json library - a forgiving JSON parser written in Rust.
llms.txt-crates/python/README.md-
llms.txt-crates/python/README.md-## Installation
llms.txt-crates/python/README.md-
llms.txt-crates/python/README.md-```bash
llms.txt:crates/python/README.md:pip install vexy_json
llms.txt-crates/python/README.md-```
llms.txt-crates/python/README.md-
llms.txt-crates/python/README.md-## Usage
llms.txt-crates/python/README.md-
llms.txt-crates/python/README.md-```python
llms.txt:crates/python/README.md:import vexy_json
llms.txt-crates/python/README.md-
llms.txt-crates/python/README.md-# Parse forgiving JSON
llms.txt:crates/python/README.md:result = vexy_json.parse('{"key": "value", trailing: true,}')
llms.txt-crates/python/README.md-print(result)  # {'key': 'value', 'trailing': True}
llms.txt-crates/python/README.md-
llms.txt-crates/python/README.md-# Use NumPy integration
llms.txt-crates/python/README.md-import numpy as np
llms.txt:crates/python/README.md:arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-crates/python/README.md-print(type(arr))  # <class 'numpy.ndarray'>
llms.txt-crates/python/README.md-```
llms.txt-crates/python/README.md-
--
llms.txt-crates/python/README.md-- pandas DataFrame integration
llms.txt-crates/python/README.md-- JSON repair functionality
llms.txt-crates/python/README.md-
llms.txt:crates/python/README.md:For more information, see the [main vexy_json documentation](https://github.com/twardoch/vexy_json).
llms.txt---
llms.txt-docs/plugin-development.md-Let's create a simple plugin that converts all string values to uppercase:
llms.txt-docs/plugin-development.md-
llms.txt-docs/plugin-development.md-```rust
llms.txt:docs/plugin-development.md:use vexy_json_core::plugin::ParserPlugin;
llms.txt:docs/plugin-development.md:use vexy_json_core::ast::Value;
llms.txt:docs/plugin-development.md:use vexy_json_core::error::Result;
llms.txt-docs/plugin-development.md-use std::any::Any;
llms.txt-docs/plugin-development.md-
llms.txt-docs/plugin-development.md-pub struct UppercasePlugin;
--
llms.txt-docs/plugin-development.md-A plugin that validates data against business rules:
llms.txt-docs/plugin-development.md-
llms.txt-docs/plugin-development.md-```rust
llms.txt:docs/plugin-development.md:use vexy_json_core::error::Error;
llms.txt-docs/plugin-development.md-
llms.txt-docs/plugin-development.md-pub struct ValidationPlugin {
llms.txt-docs/plugin-development.md-    rules: Vec<ValidationRule>,
--
llms.txt-docs/plugin-development.md-#[cfg(test)]
llms.txt-docs/plugin-development.md-mod tests {
llms.txt-docs/plugin-development.md-    use super::*;
llms.txt:docs/plugin-development.md:    use vexy_json::parse;
llms.txt-docs/plugin-development.md-
llms.txt-docs/plugin-development.md-    #[test]
llms.txt-docs/plugin-development.md-    fn test_uppercase_plugin() {
--
llms.txt-docs/plugin-development.md-```rust
llms.txt-docs/plugin-development.md-#[test]
llms.txt-docs/plugin-development.md-fn test_plugin_integration() {
llms.txt:docs/plugin-development.md:    use vexy_json::{parse_with_options, ParserOptions};
llms.txt-docs/plugin-development.md-    
llms.txt-docs/plugin-development.md-    let json = r#"{"name": "john", "age": 25}"#;
llms.txt-docs/plugin-development.md-    let mut plugin = UppercasePlugin;
--
llms.txt-docs/plugin-development.md-    MacroError { macro_name: String },
llms.txt-docs/plugin-development.md-}
llms.txt-docs/plugin-development.md-
llms.txt:docs/plugin-development.md:impl From<PluginError> for vexy_json_core::error::Error {
llms.txt-docs/plugin-development.md-    fn from(err: PluginError) -> Self {
llms.txt:docs/plugin-development.md:        vexy_json_core::error::Error::Custom(err.to_string())
llms.txt-docs/plugin-development.md-    }
llms.txt-docs/plugin-development.md-}
llms.txt-docs/plugin-development.md-```
--
llms.txt-docs/plugin-development.md-
llms.txt-docs/plugin-development.md-```toml
llms.txt-docs/plugin-development.md-[package]
llms.txt:docs/plugin-development.md:name = "vexy_json-plugin-myplugin"
llms.txt-docs/plugin-development.md-version = "0.1.0"
llms.txt-docs/plugin-development.md-edition = "2021"
llms.txt-docs/plugin-development.md-
llms.txt-docs/plugin-development.md-[dependencies]
llms.txt:docs/plugin-development.md:vexy_json-core = "2.0"
llms.txt-docs/plugin-development.md-```
llms.txt-docs/plugin-development.md-
llms.txt-docs/plugin-development.md-## Best Practices Summary
--
llms.txt-crates/test-utils/Cargo.toml-path = "src/lib.rs"
llms.txt-crates/test-utils/Cargo.toml-
llms.txt-crates/test-utils/Cargo.toml-
llms.txt:crates/test-utils/Cargo.toml:[dependencies.vexy_json-core]
llms.txt-crates/test-utils/Cargo.toml-path = "../core"
llms.txt---
llms.txt:debug_test9.rs:use vexy_json::parse;
llms.txt-debug_test9.rs-
llms.txt-debug_test9.rs-fn main() {
llms.txt-debug_test9.rs-    // Test if the basic newline-separated object works
--
llms.txt-issues/101.txt-
llms.txt-issues/101.txt-## http://127.0.0.1:8081/debug-pages/test-wasm.html
llms.txt-issues/101.txt-
llms.txt:issues/101.txt:vexy_json WebAssembly Test Page
llms.txt:issues/101.txt:Testing the vexy_json WASM module functionality...
llms.txt-issues/101.txt-
llms.txt-issues/101.txt-WASM Module Initialization
llms.txt-issues/101.txt-✅ Module loaded successfully
llms.txt-issues/101.txt-Version Info
llms.txt:issues/101.txt:vexy_json vundefined
llms.txt-issues/101.txt-undefined
llms.txt-issues/101.txt-Basic JSON Parsing
llms.txt-issues/101.txt-Input: {"key": "value"}
llms.txt---
llms.txt-crates/core/src/optimization/mod.rs-// this_file: crates/core/src/optimization/mod.rs
llms.txt-crates/core/src/optimization/mod.rs-
llms.txt:crates/core/src/optimization/mod.rs://! Performance optimization modules for vexy_json parsing.
llms.txt-crates/core/src/optimization/mod.rs-//!
llms.txt-crates/core/src/optimization/mod.rs-//! This module contains optimized implementations of core parsing
llms.txt-crates/core/src/optimization/mod.rs-//! functionality to improve performance while maintaining compatibility.
--
llms.txt-CLAUDE.md-
llms.txt-CLAUDE.md-## 1. Project Overview
llms.txt-CLAUDE.md-
llms.txt:CLAUDE.md:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-CLAUDE.md-
llms.txt-CLAUDE.md-## 2. Development Status
llms.txt-CLAUDE.md-
--
llms.txt-CLAUDE.md-    -   `src/error/mod.rs`: Implements custom error types for parsing failures.
llms.txt-CLAUDE.md--   `crates/cli`: The command-line interface.
llms.txt-CLAUDE.md-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:CLAUDE.md:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`.
llms.txt:CLAUDE.md:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments.
llms.txt-CLAUDE.md--   `crates/test-utils`: Utility functions for testing.
llms.txt-CLAUDE.md-
llms.txt-CLAUDE.md-### 3.2. Core Features
--
llms.txt-CLAUDE.md-    -   Benchmarking is performed using `criterion.rs`, with benchmarks defined in the `benches/` directory.
llms.txt-CLAUDE.md--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt-CLAUDE.md--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json` and `jsonic`.
llms.txt:CLAUDE.md:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-CLAUDE.md-
llms.txt-CLAUDE.md-## 4. Development Workflow
llms.txt-CLAUDE.md-
--
llms.txt-crates/core/new_benchmark_results.txt-50 |     pub const BG_WHITE: &'static str = "\x1b[47m";
llms.txt-crates/core/new_benchmark_results.txt-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
llms.txt-crates/core/new_benchmark_results.txt-
llms.txt:crates/core/new_benchmark_results.txt:warning: `vexy_json-core` (lib) generated 58 warnings (run `cargo fix --lib -p vexy_json-core` to apply 1 suggestion)
llms.txt-crates/core/new_benchmark_results.txt-warning: returned pointer of `as_ptr` call is never null, so checking it for null will always return false
llms.txt-crates/core/new_benchmark_results.txt-   --> crates/core/src/optimization/memory_pool.rs:380:18
llms.txt-crates/core/new_benchmark_results.txt-    |
--
llms.txt-crates/core/new_benchmark_results.txt-    |
llms.txt-crates/core/new_benchmark_results.txt-    = note: `#[warn(useless_ptr_null_checks)]` on by default
llms.txt-crates/core/new_benchmark_results.txt-
llms.txt:crates/core/new_benchmark_results.txt:   Compiling vexy_json-core v0.2.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/crates/core)
llms.txt:crates/core/new_benchmark_results.txt:warning: `vexy_json-core` (lib test) generated 59 warnings (58 duplicates)
llms.txt:crates/core/new_benchmark_results.txt:error[E0432]: unresolved imports `vexy_json_core::parse_optimized_v2`, `vexy_json_core::parse_optimized_v2_with_options`, `vexy_json_core::parse_v2_with_stats`
llms.txt-crates/core/new_benchmark_results.txt-  --> crates/core/benches/parser_benchmarks.rs:12:18
llms.txt-crates/core/new_benchmark_results.txt-   |
llms.txt-crates/core/new_benchmark_results.txt-12 |                  parse_optimized_v2, parse_optimized_v2_with_options, parse_v2_with_stats, ParserOptions};
--
llms.txt-crates/core/new_benchmark_results.txt-   |
llms.txt-crates/core/new_benchmark_results.txt-
llms.txt-crates/core/new_benchmark_results.txt-For more information about this error, try `rustc --explain E0432`.
llms.txt:crates/core/new_benchmark_results.txt:error: could not compile `vexy_json-core` (bench "parser_benchmarks") due to 1 previous error
llms.txt---
llms.txt-benches/performance_comparison.rs-// this_file: benches/performance_comparison.rs
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
llms.txt:benches/performance_comparison.rs:use vexy_json::parse as vexy_json_parse;
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-fn benchmark_parser_comparison(c: &mut Criterion) {
llms.txt-benches/performance_comparison.rs-    let mut group = c.benchmark_group("parser_comparison");
--
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    // Benchmark simple JSON
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
llms.txt:benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "simple"),
llms.txt-benches/performance_comparison.rs-        &simple_json,
llms.txt:benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
llms.txt-benches/performance_comparison.rs-    );
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
--
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    // Benchmark nested JSON
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
llms.txt:benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "nested"),
llms.txt-benches/performance_comparison.rs-        &nested_json,
llms.txt:benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
llms.txt-benches/performance_comparison.rs-    );
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
--
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    // Benchmark large array
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
llms.txt:benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "large_array"),
llms.txt-benches/performance_comparison.rs-        &large_array_json,
llms.txt:benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
llms.txt-benches/performance_comparison.rs-    );
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
--
llms.txt-benches/performance_comparison.rs-fn benchmark_forgiving_features(c: &mut Criterion) {
llms.txt-benches/performance_comparison.rs-    let mut group = c.benchmark_group("forgiving_features");
llms.txt-benches/performance_comparison.rs-
llms.txt:benches/performance_comparison.rs:    // Test vexy_json's forgiving features (serde_json can't parse these)
llms.txt-benches/performance_comparison.rs-    let forgiving_json = r#"{
llms.txt-benches/performance_comparison.rs-        // Comment
llms.txt-benches/performance_comparison.rs-        name: 'John',
--
llms.txt-benches/performance_comparison.rs-    let standard_json = r#"{"name": "John", "age": 30, "tags": ["rust", "json"]}"#;
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
llms.txt:benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "forgiving"),
llms.txt-benches/performance_comparison.rs-        &forgiving_json,
llms.txt:benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
llms.txt-benches/performance_comparison.rs-    );
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
llms.txt:benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "standard"),
llms.txt-benches/performance_comparison.rs-        &standard_json,
llms.txt:benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
llms.txt-benches/performance_comparison.rs-    );
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
--
llms.txt-benches/performance_comparison.rs-    let string_heavy = generate_string_heavy_json();
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
llms.txt:benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "string_heavy"),
llms.txt-benches/performance_comparison.rs-        &string_heavy,
llms.txt:benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
llms.txt-benches/performance_comparison.rs-    );
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
--
llms.txt-benches/performance_comparison.rs-        .map(|i| format!(r#"{{"id": {}, "name": "item{}", "active": true}}"#, i, i))
llms.txt-benches/performance_comparison.rs-        .collect();
llms.txt-benches/performance_comparison.rs-
llms.txt:benches/performance_comparison.rs:    group.bench_function("vexy_json_small_objects", |b| {
llms.txt-benches/performance_comparison.rs-        b.iter(|| {
llms.txt-benches/performance_comparison.rs-            for obj in &small_objects {
llms.txt:benches/performance_comparison.rs:                let _ = vexy_json_parse(black_box(obj));
llms.txt-benches/performance_comparison.rs-            }
llms.txt-benches/performance_comparison.rs-        })
llms.txt-benches/performance_comparison.rs-    });
llms.txt---
llms.txt:crates/core/src/lexer/mod.rs://! Modular lexer architecture for vexy_json parsing
llms.txt-crates/core/src/lexer/mod.rs-//!
llms.txt-crates/core/src/lexer/mod.rs-//! This module provides a trait-based lexer design that allows for
llms.txt-crates/core/src/lexer/mod.rs-//! different lexer implementations optimized for various use cases:
--
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-# Feedback & Support
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:We value your feedback and are committed to improving vexy_json based on user experiences. This page explains how to report issues, request features, and get support.
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-## 🔧 Web Tool Feedback
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:The [vexy_json web tool](tool.html) includes a built-in feedback system that makes it easy to report issues and suggest improvements.
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-### How to Use the Feedback System
llms.txt-docs/feedback.md-
--
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-## 📋 GitHub Issues
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:For detailed bug reports and feature requests, use our [GitHub Issues](https://github.com/twardoch/vexy_json/issues):
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-### Bug Reports
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:Use the [Bug Report Template](https://github.com/twardoch/vexy_json/issues/new?template=bug_report.md) and include:
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-- **Clear description** of the bug
llms.txt-docs/feedback.md-- **Steps to reproduce** the issue
--
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-### Feature Requests
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:Use the [Feature Request Template](https://github.com/twardoch/vexy_json/issues/new?template=feature_request.md) and include:
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-- **Problem description** - What need does this address?
llms.txt-docs/feedback.md-- **Proposed solution** - What would you like to see?
--
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-### Performance Issues
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:Use the [Performance Issue Template](https://github.com/twardoch/vexy_json/issues/new?template=performance_issue.md) and include:
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-- **Performance problem** description
llms.txt-docs/feedback.md-- **Input characteristics** (size, complexity)
--
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-## 💬 Community Discussion
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:For questions, ideas, and general discussion, use [GitHub Discussions](https://github.com/twardoch/vexy_json/discussions):
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-- **Q&A** - Ask questions about usage
llms.txt-docs/feedback.md-- **Ideas** - Share feature ideas and get feedback
llms.txt:docs/feedback.md:- **Show and Tell** - Share how you're using vexy_json
llms.txt-docs/feedback.md-- **General** - Any other discussion
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-## 📧 Direct Contact
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-For security issues or private matters, you can contact the maintainer directly:
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:- **Email**: adam+vexy_json@twardoch.com
llms.txt-docs/feedback.md-- **Security**: Please use responsible disclosure for security issues
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-## 🎯 What Makes Good Feedback
--
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md----
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:**Thank you for helping make vexy_json better!** Your feedback drives improvements and helps us build a tool that works well for everyone.
llms.txt---
llms.txt-AGENTS.md-
llms.txt-AGENTS.md-## 1. Project Overview
llms.txt-AGENTS.md-
llms.txt:AGENTS.md:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-AGENTS.md-
llms.txt-AGENTS.md-## 2. Development Status
llms.txt-AGENTS.md-
--
llms.txt-AGENTS.md-    -   `src/error/mod.rs`: Implements custom error types for parsing failures.
llms.txt-AGENTS.md--   `crates/cli`: The command-line interface.
llms.txt-AGENTS.md-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:AGENTS.md:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`.
llms.txt:AGENTS.md:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments.
llms.txt-AGENTS.md--   `crates/test-utils`: Utility functions for testing.
llms.txt-AGENTS.md-
llms.txt-AGENTS.md-### 3.2. Core Features
--
llms.txt-AGENTS.md-    -   Benchmarking is performed using `criterion.rs`, with benchmarks defined in the `benches/` directory.
llms.txt-AGENTS.md--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt-AGENTS.md--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json` and `jsonic`.
llms.txt:AGENTS.md:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-AGENTS.md-
llms.txt-AGENTS.md-## 4. Development Workflow
llms.txt-AGENTS.md-
--
llms.txt-docs/plugins/builtin/schema-validation.md-### Basic Usage
llms.txt-docs/plugins/builtin/schema-validation.md-
llms.txt-docs/plugins/builtin/schema-validation.md-```rust
llms.txt:docs/plugins/builtin/schema-validation.md:use vexy_json::{parse, ParserOptions};
llms.txt:docs/plugins/builtin/schema-validation.md:use vexy_json_core::plugin::plugins::SchemaValidationPlugin;
llms.txt-docs/plugins/builtin/schema-validation.md-
llms.txt-docs/plugins/builtin/schema-validation.md-// Define a schema
llms.txt-docs/plugins/builtin/schema-validation.md-let schema = parse(r#"{
--
llms.txt-docs/plugins/builtin/schema-validation.md-The plugin can be integrated into the parsing pipeline:
llms.txt-docs/plugins/builtin/schema-validation.md-
llms.txt-docs/plugins/builtin/schema-validation.md-```rust
llms.txt:docs/plugins/builtin/schema-validation.md:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-docs/plugins/builtin/schema-validation.md-
llms.txt-docs/plugins/builtin/schema-validation.md-// Create parser options with validation
llms.txt-docs/plugins/builtin/schema-validation.md-let options = ParserOptions {
--
llms.txt-docs/plugins/builtin/schema-validation.md-#[cfg(test)]
llms.txt-docs/plugins/builtin/schema-validation.md-mod tests {
llms.txt-docs/plugins/builtin/schema-validation.md-    use super::*;
llms.txt:docs/plugins/builtin/schema-validation.md:    use vexy_json::parse;
llms.txt-docs/plugins/builtin/schema-validation.md-
llms.txt-docs/plugins/builtin/schema-validation.md-    #[test]
llms.txt-docs/plugins/builtin/schema-validation.md-    fn test_basic_validation() {
llms.txt---
llms.txt:crates/python/tests/test_vexy_json.py-#!/usr/bin/env python3
llms.txt:crates/python/tests/test_vexy_json.py:# Test file for vexy_json renaming
llms.txt:crates/python/tests/test_vexy_json.py-
llms.txt:crates/python/tests/test_vexy_json.py:import vexy_json
llms.txt:crates/python/tests/test_vexy_json.py:from vexy_json import VexyJSONParser, VexyJSONConfig
llms.txt:crates/python/tests/test_vexy_json.py-
llms.txt:crates/python/tests/test_vexy_json.py-
llms.txt:crates/python/tests/test_vexy_json.py-class VexyJSONWrapper:
llms.txt---
llms.txt:crates/python/tests/test_vexy_json.py-        self.config = VexyJSONConfig()
llms.txt:crates/python/tests/test_vexy_json.py-
llms.txt:crates/python/tests/test_vexy_json.py-    def parse(self, data):
llms.txt:crates/python/tests/test_vexy_json.py:        # Parse vexy_json data
llms.txt:crates/python/tests/test_vexy_json.py-        return self.parser.parse(data)
llms.txt:crates/python/tests/test_vexy_json.py-
llms.txt:crates/python/tests/test_vexy_json.py-
llms.txt:crates/python/tests/test_vexy_json.py:# Test with a string that contains "vexy_json"
llms.txt:crates/python/tests/test_vexy_json.py:test_string = "This is a vexy_json parser"
llms.txt:crates/python/tests/test_vexy_json.py:print(f"Vexy JSON version: {vexy_json.__version__}")
llms.txt---
llms.txt-crates/core/src/error/types.rs-    }
llms.txt-crates/core/src/error/types.rs-}
llms.txt-crates/core/src/error/types.rs-
llms.txt:crates/core/src/error/types.rs:/// Error types that can occur during vexy_json parsing.
llms.txt-crates/core/src/error/types.rs-///
llms.txt-crates/core/src/error/types.rs-/// Each error variant contains positional information to help users
llms.txt-crates/core/src/error/types.rs-/// locate and fix parsing issues in their input. The error types
--
llms.txt-benches/lexer_microbenchmarks.rs-// this_file: benches/lexer_microbenchmarks.rs
llms.txt-benches/lexer_microbenchmarks.rs-
llms.txt-benches/lexer_microbenchmarks.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
llms.txt:benches/lexer_microbenchmarks.rs:use vexy_json_core::lexer::{FastLexer, JsonLexer, LexerConfig, LexerMode};
llms.txt-benches/lexer_microbenchmarks.rs-
llms.txt-benches/lexer_microbenchmarks.rs-fn bench_tokenize_simple_json(c: &mut Criterion) {
llms.txt-benches/lexer_microbenchmarks.rs-    let mut group = c.benchmark_group("tokenize simple json");
llms.txt---
llms.txt-docs/packaging-macos.md-# macOS Packaging Guide
llms.txt-docs/packaging-macos.md-
llms.txt:docs/packaging-macos.md:This guide explains how to package vexy_json for macOS distribution as a `.dmg` containing a `.pkg` installer.
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-## Prerequisites
llms.txt-docs/packaging-macos.md-
--
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-This script will:
llms.txt-docs/packaging-macos.md-1. Build the release binary using `cargo build --release`
llms.txt:docs/packaging-macos.md:2. Create a `.pkg` installer that installs vexy_json to `/usr/local/bin`
llms.txt-docs/packaging-macos.md-3. Wrap the `.pkg` in a `.dmg` for easy distribution
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-## Output
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-The script produces:
llms.txt:docs/packaging-macos.md:- `vexy_json-{VERSION}-macos.dmg` - The distributable disk image
llms.txt-docs/packaging-macos.md-- Contains the `.pkg` installer and a README
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-## Installation
llms.txt-docs/packaging-macos.md-
llms.txt:docs/packaging-macos.md:Users can install vexy_json by:
llms.txt-docs/packaging-macos.md-1. Opening the `.dmg` file
llms.txt-docs/packaging-macos.md-2. Double-clicking the `.pkg` installer
llms.txt-docs/packaging-macos.md-3. Following the installation wizard
llms.txt:docs/packaging-macos.md:4. The `vexy_json` command will be available in their terminal
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-## Code Signing (Optional)
llms.txt-docs/packaging-macos.md-
--
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-# Sign the DMG
llms.txt-docs/packaging-macos.md-codesign --sign "Developer ID Application: Your Name (TEAMID)" \
llms.txt:docs/packaging-macos.md:    --timestamp vexy_json-*.dmg
llms.txt-docs/packaging-macos.md-```
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-## Notarization (Recommended)
--
llms.txt-docs/packaging-macos.md-```bash
llms.txt-docs/packaging-macos.md-# Submit for notarization
llms.txt-docs/packaging-macos.md-xcrun altool --notarize-app \
llms.txt:docs/packaging-macos.md:    --primary-bundle-id "com.twardoch.vexy_json" \
llms.txt-docs/packaging-macos.md-    --username "your-apple-id@example.com" \
llms.txt-docs/packaging-macos.md-    --password "@keychain:AC_PASSWORD" \
llms.txt:docs/packaging-macos.md:    --file vexy_json-*.dmg
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-# Staple the notarization ticket
llms.txt:docs/packaging-macos.md:xcrun stapler staple vexy_json-*.dmg
llms.txt-docs/packaging-macos.md-```
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-## Automation
--
llms.txt-crates/python/pyproject.toml-
llms.txt-crates/python/pyproject.toml-
llms.txt-crates/python/pyproject.toml-[project]
llms.txt:crates/python/pyproject.toml:name = "vexy_json"
llms.txt:crates/python/pyproject.toml:description = "A forgiving JSON parser - Python bindings for the Rust vexy_json library"
llms.txt-crates/python/pyproject.toml-readme = "README.md"
llms.txt-crates/python/pyproject.toml-requires-python = ">=3.8"
llms.txt-crates/python/pyproject.toml-classifiers = [
--
llms.txt-crates/python/pyproject.toml-
llms.txt-crates/python/pyproject.toml-
llms.txt-crates/python/pyproject.toml-[project.urls]
llms.txt:crates/python/pyproject.toml:Homepage = "https://github.com/twardoch/vexy_json"
llms.txt:crates/python/pyproject.toml:Repository = "https://github.com/twardoch/vexy_json.git"
llms.txt:crates/python/pyproject.toml:Issues = "https://github.com/twardoch/vexy_json/issues"
llms.txt:crates/python/pyproject.toml:Documentation = "https://twardoch.github.io/vexy_json/"
llms.txt-crates/python/pyproject.toml-
llms.txt-crates/python/pyproject.toml-
llms.txt-crates/python/pyproject.toml-[project.optional-dependencies]
--
llms.txt-crates/python/pyproject.toml-[tool.maturin]
llms.txt-crates/python/pyproject.toml-features = [ "pyo3/extension-module" ]
llms.txt-crates/python/pyproject.toml-python-source = "python"
llms.txt:crates/python/pyproject.toml:module-name = "vexy_json._vexy_json"
llms.txt:crates/python/pyproject.toml:include = [ "python/vexy_json/__init__.pyi", "python/vexy_json/py.typed" ]
llms.txt-crates/python/pyproject.toml-
llms.txt-crates/python/pyproject.toml-
llms.txt-crates/python/pyproject.toml-[tool.pytest.ini_options]
llms.txt---
llms.txt-crates/core/src/ast/mod.rs-// this_file: src/ast/mod.rs
llms.txt-crates/core/src/ast/mod.rs-
llms.txt:crates/core/src/ast/mod.rs://! Abstract Syntax Tree components for vexy_json parsing.
llms.txt-crates/core/src/ast/mod.rs-//!
llms.txt:crates/core/src/ast/mod.rs://! This module contains the core AST types used throughout the vexy_json parser:
llms.txt-crates/core/src/ast/mod.rs-//! - `Token`: Lexical tokens produced by the lexer
llms.txt:crates/core/src/ast/mod.rs://! - `Value`: Parsed JSON values with support for all vexy_json extensions
llms.txt-crates/core/src/ast/mod.rs-//! - `Number`: Numeric value representation supporting integers and floats
llms.txt-crates/core/src/ast/mod.rs-//!
llms.txt-crates/core/src/ast/mod.rs-//! These types form the foundation of the parsing pipeline, from lexical analysis
--
llms.txt-crates/python/tests/test_typing.py-# Test basic functionality without importing numpy/pandas
llms.txt-crates/python/tests/test_typing.py-def test_basic_functionality():
llms.txt-crates/python/tests/test_typing.py-    """Test basic parsing functionality with type hints."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test basic parsing
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.parse('{"key": "value"}')
llms.txt-crates/python/tests/test_typing.py-    assert result == {"key": "value"}
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test loads alias
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.loads('{"key": "value"}')
llms.txt-crates/python/tests/test_typing.py-    assert result == {"key": "value"}
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test validation
llms.txt:crates/python/tests/test_typing.py:    assert vexy_json.is_valid('{"valid": true}') is True
llms.txt:crates/python/tests/test_typing.py:    assert vexy_json.is_valid('invalid') is False
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test dumps
llms.txt-crates/python/tests/test_typing.py-    data = {"key": "value", "number": 42}
llms.txt:crates/python/tests/test_typing.py:    json_str = vexy_json.dumps(data)
llms.txt-crates/python/tests/test_typing.py-    assert "key" in json_str
llms.txt-crates/python/tests/test_typing.py-    assert "value" in json_str
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test pretty printing
llms.txt:crates/python/tests/test_typing.py:    pretty_str = vexy_json.dumps(data, indent=2)
llms.txt-crates/python/tests/test_typing.py-    assert "\n" in pretty_str
llms.txt-crates/python/tests/test_typing.py-    assert "  " in pretty_str
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-def test_file_operations():
llms.txt-crates/python/tests/test_typing.py-    """Test file I/O operations with type hints."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test with StringIO
llms.txt-crates/python/tests/test_typing.py-    json_data = '{"test": "data", "number": 123}'
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test load
llms.txt-crates/python/tests/test_typing.py-    fp = io.StringIO(json_data)
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.load(fp)
llms.txt-crates/python/tests/test_typing.py-    assert result == {"test": "data", "number": 123}
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test dump
llms.txt-crates/python/tests/test_typing.py-    output = io.StringIO()
llms.txt:crates/python/tests/test_typing.py:    vexy_json.dump({"key": "value"}, output)
llms.txt-crates/python/tests/test_typing.py-    output.seek(0)
llms.txt-crates/python/tests/test_typing.py-    dumped = output.read()
llms.txt-crates/python/tests/test_typing.py-    assert "key" in dumped
--
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-def test_streaming_parser():
llms.txt-crates/python/tests/test_typing.py-    """Test streaming parser with type hints."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test streaming parser creation
llms.txt:crates/python/tests/test_typing.py:    parser = vexy_json.StreamingParser()
llms.txt-crates/python/tests/test_typing.py-    assert parser is not None
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test context manager
llms.txt:crates/python/tests/test_typing.py:    with vexy_json.StreamingParser() as parser:
llms.txt-crates/python/tests/test_typing.py-        assert parser is not None
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test with file-like object
llms.txt-crates/python/tests/test_typing.py-    json_lines = '{"line": 1}\n{"line": 2}\n{"line": 3}\n'
llms.txt-crates/python/tests/test_typing.py-    fp = io.StringIO(json_lines)
llms.txt-crates/python/tests/test_typing.py-    
llms.txt:crates/python/tests/test_typing.py:    with vexy_json.StreamingParser() as parser:
llms.txt-crates/python/tests/test_typing.py-        results = list(parser.parse_lines(fp))
llms.txt-crates/python/tests/test_typing.py-        assert len(results) == 3
llms.txt-crates/python/tests/test_typing.py-        assert results[0] == {"line": 1}
--
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-def test_parse_with_options():
llms.txt-crates/python/tests/test_typing.py-    """Test parse_with_options with all parameter types."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test with all parameters
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.parse_with_options(
llms.txt-crates/python/tests/test_typing.py-        'key: "value", // comment\n',
llms.txt-crates/python/tests/test_typing.py-        allow_comments=True,
llms.txt-crates/python/tests/test_typing.py-        allow_trailing_commas=True,
--
llms.txt-crates/python/tests/test_typing.py-@pytest.mark.skipif(sys.version_info < (3, 9), reason="requires Python 3.9+")
llms.txt-crates/python/tests/test_typing.py-def test_numpy_integration():
llms.txt-crates/python/tests/test_typing.py-    """Test NumPy integration if available."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    try:
llms.txt-crates/python/tests/test_typing.py-        import numpy as np
llms.txt-crates/python/tests/test_typing.py-        
llms.txt-crates/python/tests/test_typing.py-        # Test loads_numpy
llms.txt:crates/python/tests/test_typing.py:        arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-crates/python/tests/test_typing.py-        assert isinstance(arr, np.ndarray)
llms.txt-crates/python/tests/test_typing.py-        assert arr.tolist() == [1, 2, 3, 4, 5]
llms.txt-crates/python/tests/test_typing.py-        
llms.txt-crates/python/tests/test_typing.py-        # Test loads_numpy_zerocopy
llms.txt:crates/python/tests/test_typing.py:        arr = vexy_json.loads_numpy_zerocopy('[1.0, 2.0, 3.0]')
llms.txt-crates/python/tests/test_typing.py-        assert isinstance(arr, np.ndarray)
llms.txt-crates/python/tests/test_typing.py-        assert arr.tolist() == [1.0, 2.0, 3.0]
llms.txt-crates/python/tests/test_typing.py-        
llms.txt-crates/python/tests/test_typing.py-        # Test with dtype specification
llms.txt:crates/python/tests/test_typing.py:        arr = vexy_json.loads_numpy('[1, 2, 3]', dtype='float32')
llms.txt-crates/python/tests/test_typing.py-        assert isinstance(arr, np.ndarray)
llms.txt-crates/python/tests/test_typing.py-        assert arr.dtype == np.float32
llms.txt-crates/python/tests/test_typing.py-        
--
llms.txt-crates/python/tests/test_typing.py-@pytest.mark.skipif(sys.version_info < (3, 9), reason="requires Python 3.9+")
llms.txt-crates/python/tests/test_typing.py-def test_pandas_integration():
llms.txt-crates/python/tests/test_typing.py-    """Test pandas integration if available."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    try:
llms.txt-crates/python/tests/test_typing.py-        import pandas as pd
llms.txt-crates/python/tests/test_typing.py-        
llms.txt-crates/python/tests/test_typing.py-        # Test loads_dataframe
llms.txt:crates/python/tests/test_typing.py:        df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
llms.txt-crates/python/tests/test_typing.py-        assert isinstance(df, pd.DataFrame)
llms.txt-crates/python/tests/test_typing.py-        assert df.shape == (2, 2)
llms.txt-crates/python/tests/test_typing.py-        assert df.columns.tolist() == ["a", "b"]
--
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-def test_error_handling():
llms.txt-crates/python/tests/test_typing.py-    """Test error handling with proper exception types."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test ValueError for invalid JSON
llms.txt-crates/python/tests/test_typing.py-    with pytest.raises(ValueError, match="Parse error"):
llms.txt:crates/python/tests/test_typing.py:        vexy_json.parse('invalid json')
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test TypeError for non-serializable objects
llms.txt-crates/python/tests/test_typing.py-    with pytest.raises(TypeError):
llms.txt:crates/python/tests/test_typing.py:        vexy_json.dumps(object())
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-def test_module_metadata():
llms.txt-crates/python/tests/test_typing.py-    """Test module metadata and version information."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test version information
llms.txt:crates/python/tests/test_typing.py:    assert hasattr(vexy_json, '__version__')
llms.txt:crates/python/tests/test_typing.py:    assert isinstance(vexy_json.__version__, str)
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test author information
llms.txt:crates/python/tests/test_typing.py:    assert hasattr(vexy_json, '__author__')
llms.txt:crates/python/tests/test_typing.py:    assert isinstance(vexy_json.__author__, str)
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test description
llms.txt:crates/python/tests/test_typing.py:    assert hasattr(vexy_json, '__description__')
llms.txt:crates/python/tests/test_typing.py:    assert isinstance(vexy_json.__description__, str)
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-def test_forgiving_features():
llms.txt-crates/python/tests/test_typing.py-    """Test all forgiving JSON features."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test comments
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.parse('{"key": "value" /* comment */}')
llms.txt-crates/python/tests/test_typing.py-    assert result == {"key": "value"}
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test trailing commas
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.parse('{"key": "value",}')
llms.txt-crates/python/tests/test_typing.py-    assert result == {"key": "value"}
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test unquoted keys
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.parse('{key: "value"}')
llms.txt-crates/python/tests/test_typing.py-    assert result == {"key": "value"}
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test single quotes
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.parse("{'key': 'value'}")
llms.txt-crates/python/tests/test_typing.py-    assert result == {"key": "value"}
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test implicit top-level object
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.parse('key: "value"')
llms.txt-crates/python/tests/test_typing.py-    assert result == {"key": "value"}
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test implicit top-level array
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.parse('"a", "b", "c"')
llms.txt-crates/python/tests/test_typing.py-    assert result == ["a", "b", "c"]
llms.txt---
llms.txt-crates/core/src/ast/value.rs-// this_file: src/ast/value.rs
llms.txt-crates/core/src/ast/value.rs-
llms.txt:crates/core/src/ast/value.rs://! Value types and implementations for the vexy_json AST.
llms.txt-crates/core/src/ast/value.rs-//!
llms.txt-crates/core/src/ast/value.rs-//! This module defines the core value types that represent parsed JSON data
llms.txt:crates/core/src/ast/value.rs://! in the vexy_json AST. It supports all standard JSON types plus the extensions
llms.txt:crates/core/src/ast/value.rs://! provided by vexy_json's forgiving syntax.
llms.txt-crates/core/src/ast/value.rs-
llms.txt-crates/core/src/ast/value.rs-use rustc_hash::FxHashMap;
llms.txt-crates/core/src/ast/value.rs-use std::fmt;
--
llms.txt-crates/core/src/ast/token.rs-// this_file: src/ast/token.rs
llms.txt-crates/core/src/ast/token.rs-#![allow(missing_docs)]
llms.txt-crates/core/src/ast/token.rs-
llms.txt:crates/core/src/ast/token.rs://! Token types and definitions for the vexy_json lexer.
llms.txt-crates/core/src/ast/token.rs-//!
llms.txt-crates/core/src/ast/token.rs-//! This module defines all the token types that can be produced during
llms.txt:crates/core/src/ast/token.rs://! lexical analysis of vexy_json input. The tokens support both standard JSON
llms.txt:crates/core/src/ast/token.rs://! syntax and vexy_json's forgiving extensions like comments and unquoted strings.
llms.txt-crates/core/src/ast/token.rs-
llms.txt:crates/core/src/ast/token.rs:/// Represents a token in the vexy_json language.
llms.txt-crates/core/src/ast/token.rs-///
llms.txt-crates/core/src/ast/token.rs-/// This enum is used by the lexer to break down the input string into meaningful units.
llms.txt-crates/core/src/ast/token.rs-use logos::Logos;
--
llms.txt-docs/assets/js/examples.js-// this_file: docs/assets/js/examples.js
llms.txt-docs/assets/js/examples.js-
llms.txt-docs/assets/js/examples.js-/**
llms.txt:docs/assets/js/examples.js: * Comprehensive examples system for the vexy_json web tool
llms.txt-docs/assets/js/examples.js- * Showcases all forgiving JSON parsing features
llms.txt-docs/assets/js/examples.js- */
llms.txt-docs/assets/js/examples.js-
--
llms.txt-docs/assets/js/examples.js-    category: 'Standard',
llms.txt-docs/assets/js/examples.js-    description: 'Standard JSON parsing according to RFC 8259',
llms.txt-docs/assets/js/examples.js-    content: `{
llms.txt:docs/assets/js/examples.js:  "name": "vexy_json",
llms.txt-docs/assets/js/examples.js-  "version": "%%VEXY_JSON_VERSION%%",
llms.txt-docs/assets/js/examples.js-  "description": "A forgiving JSON parser for Rust",
llms.txt-docs/assets/js/examples.js-  "features": ["forgiving", "fast", "rust"],
--
llms.txt-docs/assets/js/examples.js-  advanced: {
llms.txt-docs/assets/js/examples.js-    title: 'All Features Combined',
llms.txt-docs/assets/js/examples.js-    category: 'Advanced',
llms.txt:docs/assets/js/examples.js:    description: 'Showcase of all vexy_json forgiving features together',
llms.txt-docs/assets/js/examples.js-    content: `// Advanced configuration example
llms.txt:docs/assets/js/examples.js:// Shows all vexy_json features working together
llms.txt-docs/assets/js/examples.js-
llms.txt-docs/assets/js/examples.js-name: "Advanced Demo"           // Unquoted key
llms.txt-docs/assets/js/examples.js-version: '%%VEXY_JSON_VERSION%%'               // Single quotes
--
llms.txt-benches/comprehensive_comparison.rs-#[derive(Debug, Clone)]
llms.txt-benches/comprehensive_comparison.rs-struct BenchmarkResult {
llms.txt-benches/comprehensive_comparison.rs-    name: String,
llms.txt:benches/comprehensive_comparison.rs:    vexy_json_time: Option<Duration>,
llms.txt:benches/comprehensive_comparison.rs:    vexy_json_success: bool,
llms.txt:benches/comprehensive_comparison.rs:    vexy_json_error: Option<String>,
llms.txt-benches/comprehensive_comparison.rs-    jsonic_time: Option<Duration>,
llms.txt-benches/comprehensive_comparison.rs-    jsonic_success: bool,
llms.txt-benches/comprehensive_comparison.rs-    jsonic_error: Option<String>,
--
llms.txt-benches/comprehensive_comparison.rs-        }
llms.txt-benches/comprehensive_comparison.rs-    }
llms.txt-benches/comprehensive_comparison.rs-
llms.txt:benches/comprehensive_comparison.rs:    fn run_vexy_json_benchmark(
llms.txt-benches/comprehensive_comparison.rs-        &self,
llms.txt-benches/comprehensive_comparison.rs-        _name: &str,
llms.txt-benches/comprehensive_comparison.rs-        content: &str,
llms.txt-benches/comprehensive_comparison.rs-    ) -> (Option<Duration>, bool, Option<String>) {
llms.txt-benches/comprehensive_comparison.rs-        let start = Instant::now();
llms.txt-benches/comprehensive_comparison.rs-
llms.txt:benches/comprehensive_comparison.rs:        match vexy_json::parse(content) {
llms.txt-benches/comprehensive_comparison.rs-            Ok(_) => (Some(start.elapsed()), true, None),
llms.txt-benches/comprehensive_comparison.rs-            Err(e) => (Some(start.elapsed()), false, Some(e.to_string())),
llms.txt-benches/comprehensive_comparison.rs-        }
--
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        // Run multiple iterations for better accuracy
llms.txt-benches/comprehensive_comparison.rs-        const ITERATIONS: usize = 100;
llms.txt:benches/comprehensive_comparison.rs:        let mut vexy_json_times = Vec::new();
llms.txt-benches/comprehensive_comparison.rs-        let mut jsonic_times = Vec::new();
llms.txt:benches/comprehensive_comparison.rs:        let mut vexy_json_successes = 0;
llms.txt-benches/comprehensive_comparison.rs-        let mut jsonic_successes = 0;
llms.txt:benches/comprehensive_comparison.rs:        let mut vexy_json_last_error = None;
llms.txt-benches/comprehensive_comparison.rs-        let mut jsonic_last_error = None;
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        // Warm up
llms.txt-benches/comprehensive_comparison.rs-        for _ in 0..10 {
llms.txt:benches/comprehensive_comparison.rs:            let _ = self.run_vexy_json_benchmark(name, &content);
llms.txt-benches/comprehensive_comparison.rs-            let _ = self.run_jsonic_benchmark(name, &content);
llms.txt-benches/comprehensive_comparison.rs-        }
llms.txt-benches/comprehensive_comparison.rs-
llms.txt:benches/comprehensive_comparison.rs:        // Benchmark vexy_json
llms.txt-benches/comprehensive_comparison.rs-        for _ in 0..ITERATIONS {
llms.txt:benches/comprehensive_comparison.rs:            let (time, success, error) = self.run_vexy_json_benchmark(name, &content);
llms.txt-benches/comprehensive_comparison.rs-            if let Some(t) = time {
llms.txt:benches/comprehensive_comparison.rs:                vexy_json_times.push(t);
llms.txt-benches/comprehensive_comparison.rs-            }
llms.txt-benches/comprehensive_comparison.rs-            if success {
llms.txt:benches/comprehensive_comparison.rs:                vexy_json_successes += 1;
llms.txt-benches/comprehensive_comparison.rs-            }
llms.txt-benches/comprehensive_comparison.rs-            if let Some(e) = error {
llms.txt:benches/comprehensive_comparison.rs:                vexy_json_last_error = Some(e);
llms.txt-benches/comprehensive_comparison.rs-            }
llms.txt-benches/comprehensive_comparison.rs-        }
llms.txt-benches/comprehensive_comparison.rs-
--
llms.txt-benches/comprehensive_comparison.rs-        }
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        // Calculate averages
llms.txt:benches/comprehensive_comparison.rs:        let vexy_json_avg = if !vexy_json_times.is_empty() {
llms.txt:benches/comprehensive_comparison.rs:            Some(vexy_json_times.iter().sum::<Duration>() / vexy_json_times.len() as u32)
llms.txt-benches/comprehensive_comparison.rs-        } else {
llms.txt-benches/comprehensive_comparison.rs-            None
llms.txt-benches/comprehensive_comparison.rs-        };
--
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        let result = BenchmarkResult {
llms.txt-benches/comprehensive_comparison.rs-            name: name.to_string(),
llms.txt:benches/comprehensive_comparison.rs:            vexy_json_time: vexy_json_avg,
llms.txt:benches/comprehensive_comparison.rs:            vexy_json_success: vexy_json_successes > ITERATIONS / 2,
llms.txt:benches/comprehensive_comparison.rs:            vexy_json_error: vexy_json_last_error,
llms.txt-benches/comprehensive_comparison.rs-            jsonic_time: jsonic_avg,
llms.txt-benches/comprehensive_comparison.rs-            jsonic_success: jsonic_successes > ITERATIONS / 2,
llms.txt-benches/comprehensive_comparison.rs-            jsonic_error: jsonic_last_error,
--
llms.txt-benches/comprehensive_comparison.rs-        };
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        println!(
llms.txt:benches/comprehensive_comparison.rs:            "  vexy_json: {:?} (success: {})",
llms.txt:benches/comprehensive_comparison.rs:            result.vexy_json_time, result.vexy_json_success
llms.txt-benches/comprehensive_comparison.rs-        );
llms.txt-benches/comprehensive_comparison.rs-        println!(
llms.txt-benches/comprehensive_comparison.rs-            "  jsonic: {:?} (success: {})",
--
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        // Title and introduction
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("# Benchmark Results\n\n");
llms.txt:benches/comprehensive_comparison.rs:        markdown.push_str("Comprehensive performance comparison between vexy_json (Rust) and jsonic (JavaScript) parsers.\n\n");
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        // Metadata
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("## Test Environment\n\n");
--
llms.txt-benches/comprehensive_comparison.rs-        // Summary statistics
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("## Summary\n\n");
llms.txt-benches/comprehensive_comparison.rs-        let total_tests = self.results.len();
llms.txt:benches/comprehensive_comparison.rs:        let vexy_json_successes = self.results.iter().filter(|r| r.vexy_json_success).count();
llms.txt-benches/comprehensive_comparison.rs-        let jsonic_successes = self.results.iter().filter(|r| r.jsonic_success).count();
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str(&format!("- **Total test cases**: {}\n", total_tests));
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str(&format!(
llms.txt:benches/comprehensive_comparison.rs:            "- **vexy_json success rate**: {:.1}% ({}/{})\n",
llms.txt:benches/comprehensive_comparison.rs:            (vexy_json_successes as f64 / total_tests as f64) * 100.0,
llms.txt:benches/comprehensive_comparison.rs:            vexy_json_successes,
llms.txt-benches/comprehensive_comparison.rs-            total_tests
llms.txt-benches/comprehensive_comparison.rs-        ));
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str(&format!(
--
llms.txt-benches/comprehensive_comparison.rs-        ));
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        // Performance comparison
llms.txt:benches/comprehensive_comparison.rs:        let mut vexy_json_faster_count = 0;
llms.txt-benches/comprehensive_comparison.rs-        let mut jsonic_faster_count = 0;
llms.txt-benches/comprehensive_comparison.rs-        let mut speed_ratios = Vec::new();
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        for result in &self.results {
llms.txt:benches/comprehensive_comparison.rs:            if let (Some(vexy_json_time), Some(jsonic_time)) =
llms.txt:benches/comprehensive_comparison.rs:                (result.vexy_json_time, result.jsonic_time)
llms.txt-benches/comprehensive_comparison.rs-            {
llms.txt:benches/comprehensive_comparison.rs:                if vexy_json_time < jsonic_time {
llms.txt:benches/comprehensive_comparison.rs:                    vexy_json_faster_count += 1;
llms.txt-benches/comprehensive_comparison.rs-                } else {
llms.txt-benches/comprehensive_comparison.rs-                    jsonic_faster_count += 1;
llms.txt-benches/comprehensive_comparison.rs-                }
llms.txt-benches/comprehensive_comparison.rs-
llms.txt:benches/comprehensive_comparison.rs:                let ratio = jsonic_time.as_nanos() as f64 / vexy_json_time.as_nanos() as f64;
llms.txt-benches/comprehensive_comparison.rs-                speed_ratios.push(ratio);
llms.txt-benches/comprehensive_comparison.rs-            }
llms.txt-benches/comprehensive_comparison.rs-        }
--
llms.txt-benches/comprehensive_comparison.rs-        if !speed_ratios.is_empty() {
llms.txt-benches/comprehensive_comparison.rs-            let avg_speedup = speed_ratios.iter().sum::<f64>() / speed_ratios.len() as f64;
llms.txt-benches/comprehensive_comparison.rs-            markdown.push_str(&format!(
llms.txt:benches/comprehensive_comparison.rs:                "- **Average vexy_json speedup**: {:.2}x\n",
llms.txt-benches/comprehensive_comparison.rs-                avg_speedup
llms.txt-benches/comprehensive_comparison.rs-            ));
llms.txt-benches/comprehensive_comparison.rs-            markdown.push_str(&format!(
llms.txt:benches/comprehensive_comparison.rs:                "- **vexy_json faster in**: {}/{} cases\n",
llms.txt:benches/comprehensive_comparison.rs:                vexy_json_faster_count,
llms.txt-benches/comprehensive_comparison.rs-                speed_ratios.len()
llms.txt-benches/comprehensive_comparison.rs-            ));
llms.txt-benches/comprehensive_comparison.rs-        }
--
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        // Detailed results table
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("## Detailed Results\n\n");
llms.txt:benches/comprehensive_comparison.rs:        markdown.push_str("| Test Case | Input Size | vexy_json Time | vexy_json Success | jsonic Time | jsonic Success | Speedup |\n");
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("|-----------|------------|------------|---------------|-------------|----------------|----------|\n");
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        for result in &self.results {
llms.txt:benches/comprehensive_comparison.rs:            let vexy_json_time_str = match result.vexy_json_time {
llms.txt-benches/comprehensive_comparison.rs-                Some(time) => format!("{:.3}ms", time.as_secs_f64() * 1000.0),
llms.txt-benches/comprehensive_comparison.rs-                None => "N/A".to_string(),
llms.txt-benches/comprehensive_comparison.rs-            };
--
llms.txt-benches/comprehensive_comparison.rs-                None => "N/A".to_string(),
llms.txt-benches/comprehensive_comparison.rs-            };
llms.txt-benches/comprehensive_comparison.rs-
llms.txt:benches/comprehensive_comparison.rs:            let speedup_str = match (result.vexy_json_time, result.jsonic_time) {
llms.txt:benches/comprehensive_comparison.rs:                (Some(vexy_json), Some(jsonic)) => {
llms.txt:benches/comprehensive_comparison.rs:                    let ratio = jsonic.as_nanos() as f64 / vexy_json.as_nanos() as f64;
llms.txt-benches/comprehensive_comparison.rs-                    format!("{:.2}x", ratio)
llms.txt-benches/comprehensive_comparison.rs-                }
llms.txt-benches/comprehensive_comparison.rs-                _ => "N/A".to_string(),
llms.txt-benches/comprehensive_comparison.rs-            };
llms.txt-benches/comprehensive_comparison.rs-
llms.txt:benches/comprehensive_comparison.rs:            let vexy_json_success_icon = if result.vexy_json_success {
llms.txt-benches/comprehensive_comparison.rs-                "✅"
llms.txt-benches/comprehensive_comparison.rs-            } else {
llms.txt-benches/comprehensive_comparison.rs-                "❌"
--
llms.txt-benches/comprehensive_comparison.rs-                "| {} | {} bytes | {} | {} | {} | {} | {} |\n",
llms.txt-benches/comprehensive_comparison.rs-                result.name,
llms.txt-benches/comprehensive_comparison.rs-                result.input_size,
llms.txt:benches/comprehensive_comparison.rs:                vexy_json_time_str,
llms.txt:benches/comprehensive_comparison.rs:                vexy_json_success_icon,
llms.txt-benches/comprehensive_comparison.rs-                jsonic_time_str,
llms.txt-benches/comprehensive_comparison.rs-                jsonic_success_icon,
llms.txt-benches/comprehensive_comparison.rs-                speedup_str
--
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("\n");
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        // Error analysis
llms.txt:benches/comprehensive_comparison.rs:        let vexy_json_errors: Vec<_> = self
llms.txt-benches/comprehensive_comparison.rs-            .results
llms.txt-benches/comprehensive_comparison.rs-            .iter()
llms.txt:benches/comprehensive_comparison.rs:            .filter(|r| !r.vexy_json_success && r.vexy_json_error.is_some())
llms.txt-benches/comprehensive_comparison.rs-            .collect();
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        let jsonic_errors: Vec<_> = self
--
llms.txt-benches/comprehensive_comparison.rs-            .filter(|r| !r.jsonic_success && r.jsonic_error.is_some())
llms.txt-benches/comprehensive_comparison.rs-            .collect();
llms.txt-benches/comprehensive_comparison.rs-
llms.txt:benches/comprehensive_comparison.rs:        if !vexy_json_errors.is_empty() || !jsonic_errors.is_empty() {
llms.txt-benches/comprehensive_comparison.rs-            markdown.push_str("## Error Analysis\n\n");
llms.txt-benches/comprehensive_comparison.rs-
llms.txt:benches/comprehensive_comparison.rs:            if !vexy_json_errors.is_empty() {
llms.txt:benches/comprehensive_comparison.rs:                markdown.push_str("### vexy_json Errors\n\n");
llms.txt:benches/comprehensive_comparison.rs:                for result in vexy_json_errors {
llms.txt-benches/comprehensive_comparison.rs-                    markdown.push_str(&format!(
llms.txt-benches/comprehensive_comparison.rs-                        "**{}**: {}\n\n",
llms.txt-benches/comprehensive_comparison.rs-                        result.name,
llms.txt:benches/comprehensive_comparison.rs:                        result.vexy_json_error.as_ref().unwrap()
llms.txt-benches/comprehensive_comparison.rs-                    ));
llms.txt-benches/comprehensive_comparison.rs-                }
llms.txt-benches/comprehensive_comparison.rs-            }
--
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("## Methodology\n\n");
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("- Each test case is run 100 times after 10 warm-up runs\n");
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("- Times are averaged across all successful runs\n");
llms.txt:benches/comprehensive_comparison.rs:        markdown.push_str("- vexy_json is tested via direct Rust function calls\n");
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str(&format!(
llms.txt-benches/comprehensive_comparison.rs-            "- jsonic is tested via `{} --bun {} < input`\n",
llms.txt-benches/comprehensive_comparison.rs-            format!("{}/.bun/bin/bun", std::env::var("HOME").unwrap_or_default()),
llms.txt-benches/comprehensive_comparison.rs-            "/usr/local/bin/jsonic"
llms.txt-benches/comprehensive_comparison.rs-        ));
llms.txt:benches/comprehensive_comparison.rs:        markdown.push_str("- Speedup is calculated as `jsonic_time / vexy_json_time`\n");
llms.txt-benches/comprehensive_comparison.rs-        markdown
llms.txt-benches/comprehensive_comparison.rs-            .push_str("- Success is determined by whether parsing completes without errors\n\n");
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("---\n\n");
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str(
llms.txt:benches/comprehensive_comparison.rs:            "*This report was automatically generated by the vexy_json benchmark suite.*\n",
llms.txt-benches/comprehensive_comparison.rs-        );
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        markdown
llms.txt-benches/comprehensive_comparison.rs-    }
llms.txt-benches/comprehensive_comparison.rs-}
llms.txt-benches/comprehensive_comparison.rs-fn main() {
llms.txt:benches/comprehensive_comparison.rs:    println!("Running comprehensive vexy_json vs jsonic benchmark...");
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-    let mut suite = BenchmarkSuite::new();
llms.txt-benches/comprehensive_comparison.rs-
llms.txt---
llms.txt:crates/python/python/vexy_json/py.typed:# this_file: crates/python/python/vexy_json/py.typed
llms.txt:crates/python/python/vexy_json/py.typed-
llms.txt:crates/python/python/vexy_json/py.typed-# Marker file for PEP 561 indicating that this package supports typing
llms.txt---
llms.txt-docs/development/agents.md-
llms.txt-docs/development/agents.md-## 1. Project Overview
llms.txt-docs/development/agents.md-
llms.txt:docs/development/agents.md:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-docs/development/agents.md-
llms.txt-docs/development/agents.md-## 2. Development Status
llms.txt-docs/development/agents.md-
--
llms.txt-docs/development/agents.md-    -   `src/error/mod.rs`: Implements custom error types for parsing failures.
llms.txt-docs/development/agents.md--   `crates/cli`: The command-line interface.
llms.txt-docs/development/agents.md-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:docs/development/agents.md:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`.
llms.txt:docs/development/agents.md:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments.
llms.txt-docs/development/agents.md--   `crates/test-utils`: Utility functions for testing.
llms.txt-docs/development/agents.md-
llms.txt-docs/development/agents.md-### 3.2. Core Features
--
llms.txt-docs/development/agents.md-    -   Benchmarking is performed using `criterion.rs`, with benchmarks defined in the `benches/` directory.
llms.txt-docs/development/agents.md--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt-docs/development/agents.md--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json` and `jsonic`.
llms.txt:docs/development/agents.md:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-docs/development/agents.md-
llms.txt-docs/development/agents.md-## 4. Development Workflow
llms.txt-docs/development/agents.md-
llms.txt---
llms.txt-crates/python/Cargo.toml-[package]
llms.txt:crates/python/Cargo.toml:name = "vexy_json-python"
llms.txt-crates/python/Cargo.toml-version = "2.2.3"
llms.txt-crates/python/Cargo.toml-edition = "2021"
llms.txt:crates/python/Cargo.toml:description = "Python bindings for vexy_json - a forgiving JSON parser"
llms.txt:crates/python/Cargo.toml:repository = "https://github.com/twardoch/vexy_json"
llms.txt-crates/python/Cargo.toml-license = "MIT OR Apache-2.0"
llms.txt-crates/python/Cargo.toml-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-crates/python/Cargo.toml-
llms.txt-crates/python/Cargo.toml-
llms.txt-crates/python/Cargo.toml-[lib]
llms.txt:crates/python/Cargo.toml:name = "vexy_json"
llms.txt-crates/python/Cargo.toml-crate-type = [ "cdylib" ]
llms.txt-crates/python/Cargo.toml-
llms.txt-crates/python/Cargo.toml-
--
llms.txt-crates/python/Cargo.toml-features = [ "extension-module" ]
llms.txt-crates/python/Cargo.toml-
llms.txt-crates/python/Cargo.toml-
llms.txt:crates/python/Cargo.toml:[dependencies.vexy_json-core]
llms.txt-crates/python/Cargo.toml-path = "../core"
llms.txt-crates/python/Cargo.toml-
llms.txt-crates/python/Cargo.toml-
llms.txt---
llms.txt-crates/python/tests/test_basic.py-"""
llms.txt:crates/python/tests/test_basic.py:Basic functionality tests for vexy_json Python bindings.
llms.txt-crates/python/tests/test_basic.py-"""
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-import pytest
llms.txt:crates/python/tests/test_basic.py:import vexy_json
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-class TestBasicParsing:
--
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_parse_simple_object(self):
llms.txt-crates/python/tests/test_basic.py-        """Test parsing a simple JSON object."""
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse('{"key": "value"}')
llms.txt-crates/python/tests/test_basic.py-        assert result == {"key": "value"}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_parse_simple_array(self):
llms.txt-crates/python/tests/test_basic.py-        """Test parsing a simple JSON array."""
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse("[1, 2, 3]")
llms.txt-crates/python/tests/test_basic.py-        assert result == [1, 2, 3]
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_parse_null(self):
llms.txt-crates/python/tests/test_basic.py-        """Test parsing null value."""
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse("null")
llms.txt-crates/python/tests/test_basic.py-        assert result is None
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_parse_boolean(self):
llms.txt-crates/python/tests/test_basic.py-        """Test parsing boolean values."""
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse("true") is True
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse("false") is False
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_parse_numbers(self):
llms.txt-crates/python/tests/test_basic.py-        """Test parsing various number formats."""
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse("42") == 42
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse("-42") == -42
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse("3.14") == 3.14
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse("-3.14") == -3.14
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse("1e5") == 100000.0
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse("1.5e2") == 150.0
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_parse_strings(self):
llms.txt-crates/python/tests/test_basic.py-        """Test parsing string values."""
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse('"hello"') == "hello"
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse('"hello world"') == "hello world"
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse('""') == ""
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_parse_nested_structures(self):
llms.txt-crates/python/tests/test_basic.py-        """Test parsing nested objects and arrays."""
--
llms.txt-crates/python/tests/test_basic.py-            }
llms.txt-crates/python/tests/test_basic.py-        }
llms.txt-crates/python/tests/test_basic.py-        """
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(complex_json)
llms.txt-crates/python/tests/test_basic.py-        expected = {
llms.txt-crates/python/tests/test_basic.py-            "users": [{"name": "Alice", "age": 30}, {"name": "Bob", "age": 25}],
llms.txt-crates/python/tests/test_basic.py-            "metadata": {"count": 2, "active": True},
--
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-class TestForgivingFeatures:
llms.txt:crates/python/tests/test_basic.py:    """Test vexy_json's forgiving JSON features."""
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_comments(self):
llms.txt-crates/python/tests/test_basic.py-        """Test single-line and multi-line comments."""
--
llms.txt-crates/python/tests/test_basic.py-            "age": 30
llms.txt-crates/python/tests/test_basic.py-        }
llms.txt-crates/python/tests/test_basic.py-        """
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(json_with_comments)
llms.txt-crates/python/tests/test_basic.py-        assert result == {"name": "Alice", "age": 30}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_trailing_commas(self):
llms.txt-crates/python/tests/test_basic.py-        """Test trailing commas in objects and arrays."""
llms.txt-crates/python/tests/test_basic.py-        # Object with trailing comma
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse('{"a": 1, "b": 2,}')
llms.txt-crates/python/tests/test_basic.py-        assert result == {"a": 1, "b": 2}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Array with trailing comma
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse("[1, 2, 3,]")
llms.txt-crates/python/tests/test_basic.py-        assert result == [1, 2, 3]
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_unquoted_keys(self):
llms.txt-crates/python/tests/test_basic.py-        """Test unquoted object keys."""
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse('{key: "value", another_key: 42}')
llms.txt-crates/python/tests/test_basic.py-        assert result == {"key": "value", "another_key": 42}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_single_quotes(self):
llms.txt-crates/python/tests/test_basic.py-        """Test single-quoted strings."""
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse("{'key': 'value'}")
llms.txt-crates/python/tests/test_basic.py-        assert result == {"key": "value"}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_implicit_top_level(self):
llms.txt-crates/python/tests/test_basic.py-        """Test implicit top-level objects and arrays."""
llms.txt-crates/python/tests/test_basic.py-        # Implicit object
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse('key: "value", number: 42')
llms.txt-crates/python/tests/test_basic.py-        assert result == {"key": "value", "number": 42}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Implicit array
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse("1, 2, 3")
llms.txt-crates/python/tests/test_basic.py-        assert result == [1, 2, 3]
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_newline_as_comma(self):
--
llms.txt-crates/python/tests/test_basic.py-            "b": 2
llms.txt-crates/python/tests/test_basic.py-        }
llms.txt-crates/python/tests/test_basic.py-        """
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(json_with_newlines)
llms.txt-crates/python/tests/test_basic.py-        assert result == {"a": 1, "b": 2}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_combined_features(self):
--
llms.txt-crates/python/tests/test_basic.py-            active: true,
llms.txt-crates/python/tests/test_basic.py-        }
llms.txt-crates/python/tests/test_basic.py-        """
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(forgiving_json)
llms.txt-crates/python/tests/test_basic.py-        assert result == {"name": "Alice", "age": 30, "active": True}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-
--
llms.txt-crates/python/tests/test_basic.py-        json_with_comment = '{"key": "value", // comment}'
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should work with comments enabled (default)
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(json_with_comment)
llms.txt-crates/python/tests/test_basic.py-        assert result == {"key": "value"}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should fail with comments disabled
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse_with_options(json_with_comment, allow_comments=False)
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_disable_trailing_commas(self):
llms.txt-crates/python/tests/test_basic.py-        """Test disabling trailing comma support."""
llms.txt-crates/python/tests/test_basic.py-        json_with_trailing = '{"a": 1, "b": 2,}'
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should work with trailing commas enabled (default)
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(json_with_trailing)
llms.txt-crates/python/tests/test_basic.py-        assert result == {"a": 1, "b": 2}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should fail with trailing commas disabled
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse_with_options(
llms.txt-crates/python/tests/test_basic.py-                json_with_trailing, allow_trailing_commas=False
llms.txt-crates/python/tests/test_basic.py-            )
llms.txt-crates/python/tests/test_basic.py-
--
llms.txt-crates/python/tests/test_basic.py-        json_unquoted = '{key: "value"}'
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should work with unquoted keys enabled (default)
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(json_unquoted)
llms.txt-crates/python/tests/test_basic.py-        assert result == {"key": "value"}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should fail with unquoted keys disabled
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse_with_options(json_unquoted, allow_unquoted_keys=False)
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_disable_single_quotes(self):
llms.txt-crates/python/tests/test_basic.py-        """Test disabling single quote support."""
llms.txt-crates/python/tests/test_basic.py-        json_single_quotes = "{'key': 'value'}"
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should work with single quotes enabled (default)
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(json_single_quotes)
llms.txt-crates/python/tests/test_basic.py-        assert result == {"key": "value"}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should fail with single quotes disabled
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse_with_options(json_single_quotes, allow_single_quotes=False)
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_disable_implicit_top_level(self):
llms.txt-crates/python/tests/test_basic.py-        """Test disabling implicit top-level support."""
llms.txt-crates/python/tests/test_basic.py-        implicit_object = 'key: "value"'
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should work with implicit top-level enabled (default)
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(implicit_object)
llms.txt-crates/python/tests/test_basic.py-        assert result == {"key": "value"}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should fail with implicit top-level disabled
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse_with_options(implicit_object, implicit_top_level=False)
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_max_depth_limit(self):
llms.txt-crates/python/tests/test_basic.py-        """Test maximum depth limitation."""
--
llms.txt-crates/python/tests/test_basic.py-        deep_json = '{"a":' * 10 + "1" + "}" * 10
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should work with default max_depth (128)
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(deep_json)
llms.txt-crates/python/tests/test_basic.py-        assert isinstance(result, dict)
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should fail with low max_depth
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse_with_options(deep_json, max_depth=5)
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-class TestValidation:
--
llms.txt-crates/python/tests/test_basic.py-        ]
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        for case in valid_cases:
llms.txt:crates/python/tests/test_basic.py:            assert vexy_json.is_valid(case), f"Should be valid: {case}"
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_is_valid_false_cases(self):
llms.txt-crates/python/tests/test_basic.py-        """Test cases that should be invalid."""
--
llms.txt-crates/python/tests/test_basic.py-        ]
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        for case in invalid_cases:
llms.txt:crates/python/tests/test_basic.py:            assert not vexy_json.is_valid(case), f"Should be invalid: {case}"
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-class TestErrorHandling:
--
llms.txt-crates/python/tests/test_basic.py-    def test_parse_error_exception(self):
llms.txt-crates/python/tests/test_basic.py-        """Test that parse errors raise ValueError."""
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError, match="Parse error"):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse("{invalid json}")
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_parse_with_options_error(self):
llms.txt-crates/python/tests/test_basic.py-        """Test that parse_with_options errors raise ValueError."""
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError, match="Parse error"):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse_with_options("{invalid}", allow_comments=False)
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_empty_input(self):
llms.txt-crates/python/tests/test_basic.py-        """Test parsing empty input."""
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse("")
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_malformed_json(self):
llms.txt-crates/python/tests/test_basic.py-        """Test various malformed JSON inputs."""
--
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        for case in malformed_cases:
llms.txt-crates/python/tests/test_basic.py-            with pytest.raises(ValueError):
llms.txt:crates/python/tests/test_basic.py:                vexy_json.parse(case)
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-if __name__ == "__main__":
llms.txt---
llms.txt:bindings/python/src/vexy_json/__init__.py-"""
llms.txt:bindings/python/src/vexy_json/__init__.py:vexy_json - A forgiving JSON parser for Python
llms.txt:bindings/python/src/vexy_json/__init__.py-
llms.txt:bindings/python/src/vexy_json/__init__.py-This module provides a fast, forgiving JSON parser that can handle:
llms.txt:bindings/python/src/vexy_json/__init__.py-- Comments (// and /* */)
llms.txt---
llms.txt:bindings/python/src/vexy_json/__init__.py-- Automatic error repair
llms.txt:bindings/python/src/vexy_json/__init__.py-
llms.txt:bindings/python/src/vexy_json/__init__.py-Example:
llms.txt:bindings/python/src/vexy_json/__init__.py:    >>> import vexy_json
llms.txt:bindings/python/src/vexy_json/__init__.py:    >>> data = vexy_json.parse('{ unquoted: true, /* comment */ trailing: "comma", }')
llms.txt:bindings/python/src/vexy_json/__init__.py-    >>> print(data)
llms.txt:bindings/python/src/vexy_json/__init__.py-    {'unquoted': True, 'trailing': 'comma'}
llms.txt:bindings/python/src/vexy_json/__init__.py-"""
llms.txt:bindings/python/src/vexy_json/__init__.py-
llms.txt:bindings/python/src/vexy_json/__init__.py:from .vexy_json import (
llms.txt:bindings/python/src/vexy_json/__init__.py-    parse,
llms.txt:bindings/python/src/vexy_json/__init__.py-    parse_with_options,
llms.txt:bindings/python/src/vexy_json/__init__.py-    dumps,
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi:# this_file: crates/python/vexy_json.pyi
llms.txt:crates/python/python/vexy_json/__init__.pyi-
llms.txt:crates/python/python/vexy_json/__init__.pyi-"""
llms.txt:crates/python/python/vexy_json/__init__.pyi:Type stubs for vexy_json Python bindings.
llms.txt:crates/python/python/vexy_json/__init__.pyi-
llms.txt:crates/python/python/vexy_json/__init__.pyi:This file provides type hints for the vexy_json Python module, which is implemented in Rust.
llms.txt:crates/python/python/vexy_json/__init__.pyi-"""
llms.txt:crates/python/python/vexy_json/__init__.pyi-
llms.txt:crates/python/python/vexy_json/__init__.pyi-from typing import Any, Dict, List, Union, Optional, IO, Iterator, ContextManager
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        ValueError: If the input is not valid JSON
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> result = vexy_json.parse('{"key": "value", trailing: true,}')
llms.txt:crates/python/python/vexy_json/__init__.pyi-        >>> print(result)
llms.txt:crates/python/python/vexy_json/__init__.pyi-        {'key': 'value', 'trailing': True}
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        ValueError: If the input is not valid JSON
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> result = vexy_json.parse_with_options('key: value', implicit_top_level=True)
llms.txt:crates/python/python/vexy_json/__init__.pyi-        >>> print(result)
llms.txt:crates/python/python/vexy_json/__init__.pyi-        {'key': 'value'}
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        True if the input is valid, False otherwise
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> vexy_json.is_valid('{"valid": true}')
llms.txt:crates/python/python/vexy_json/__init__.pyi-        True
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> vexy_json.is_valid('invalid json')
llms.txt:crates/python/python/vexy_json/__init__.pyi-        False
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt:crates/python/python/vexy_json/__init__.pyi-    ...
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        TypeError: If the object cannot be serialized to JSON
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi-        >>> data = {'key': 'value', 'number': 42}
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> vexy_json.dumps(data)
llms.txt:crates/python/python/vexy_json/__init__.pyi-        '{"key":"value","number":42}'
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> vexy_json.dumps(data, indent=2)
llms.txt:crates/python/python/vexy_json/__init__.pyi-        '{\n  "key": "value",\n  "number": 42\n}'
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt:crates/python/python/vexy_json/__init__.pyi-    ...
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        ValueError: If the content is not valid JSON
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi-        >>> with open('data.json', 'r') as f:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        ...     result = vexy_json.load(f)
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt:crates/python/python/vexy_json/__init__.pyi-    ...
llms.txt:crates/python/python/vexy_json/__init__.pyi-
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        TypeError: If the object cannot be serialized
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi-        >>> data = {'key': 'value'}
llms.txt:crates/python/python/vexy_json/__init__.pyi-        >>> with open('output.json', 'w') as f:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        ...     vexy_json.dump(data, f, indent=2)
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt:crates/python/python/vexy_json/__init__.pyi-    ...
llms.txt:crates/python/python/vexy_json/__init__.pyi-
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        ImportError: If NumPy is not available
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt:crates/python/python/vexy_json/__init__.pyi-        >>> print(type(arr))
llms.txt:crates/python/python/vexy_json/__init__.pyi-        <class 'numpy.ndarray'>
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        The parsed array with zero-copy optimization when possible
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> arr = vexy_json.loads_numpy_zerocopy('[1.0, 2.0, 3.0]', dtype='float64')
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt:crates/python/python/vexy_json/__init__.pyi-    ...
llms.txt:crates/python/python/vexy_json/__init__.pyi-
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        The parsed JSON as a DataFrame
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
llms.txt:crates/python/python/vexy_json/__init__.pyi-        >>> print(type(df))
llms.txt:crates/python/python/vexy_json/__init__.pyi-        <class 'pandas.core.frame.DataFrame'>
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-    JSON files or streams.
llms.txt:crates/python/python/vexy_json/__init__.pyi-    
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> with vexy_json.StreamingParser() as parser:
llms.txt:crates/python/python/vexy_json/__init__.pyi-        ...     for item in parser.parse_stream(file_handle):
llms.txt:crates/python/python/vexy_json/__init__.pyi-        ...         print(item)
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-            Iterator of parsed JSON objects
llms.txt:crates/python/python/vexy_json/__init__.pyi-            
llms.txt:crates/python/python/vexy_json/__init__.pyi-        Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:            >>> with vexy_json.StreamingParser() as parser:
llms.txt:crates/python/python/vexy_json/__init__.pyi-            ...     for item in parser.parse_stream(file_handle):
llms.txt:crates/python/python/vexy_json/__init__.pyi-            ...         process(item)
llms.txt:crates/python/python/vexy_json/__init__.pyi-        """
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-            Iterator of parsed JSON objects
llms.txt:crates/python/python/vexy_json/__init__.pyi-            
llms.txt:crates/python/python/vexy_json/__init__.pyi-        Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:            >>> with vexy_json.StreamingParser() as parser:
llms.txt:crates/python/python/vexy_json/__init__.pyi-            ...     for item in parser.parse_lines(file_handle):
llms.txt:crates/python/python/vexy_json/__init__.pyi-            ...         process(item)
llms.txt:crates/python/python/vexy_json/__init__.pyi-        """
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.py-"""
llms.txt:crates/python/python/vexy_json/__init__.py:vexy_json - A forgiving JSON parser for Python.
llms.txt:crates/python/python/vexy_json/__init__.py-
llms.txt:crates/python/python/vexy_json/__init__.py:This module provides Python bindings for the vexy_json library, which is a Rust port
llms.txt:crates/python/python/vexy_json/__init__.py-of the JavaScript jsonic library. It allows parsing of "forgiving" JSON that includes
llms.txt:crates/python/python/vexy_json/__init__.py-features like comments, trailing commas, unquoted keys, and more.
llms.txt:crates/python/python/vexy_json/__init__.py-
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.py-- JSON repair functionality
llms.txt:crates/python/python/vexy_json/__init__.py-"""
llms.txt:crates/python/python/vexy_json/__init__.py-
llms.txt:crates/python/python/vexy_json/__init__.py:from ._vexy_json import (
llms.txt:crates/python/python/vexy_json/__init__.py-    parse_json as parse,
llms.txt:crates/python/python/vexy_json/__init__.py-    parse_with_options_py as parse_with_options,
llms.txt:crates/python/python/vexy_json/__init__.py-    is_valid,
llms.txt---
llms.txt-benches/profiling.rs-// this_file: benches/profiling.rs
llms.txt-benches/profiling.rs-
llms.txt-benches/profiling.rs-use criterion::{black_box, criterion_group, criterion_main, Criterion};
llms.txt:benches/profiling.rs:use vexy_json::parse;
llms.txt-benches/profiling.rs-
llms.txt-benches/profiling.rs-fn profiling_heavy_workload(c: &mut Criterion) {
llms.txt-benches/profiling.rs-    // Create a large, complex JSON that will stress the parser
--
llms.txt-docs/development/gemini.md-
llms.txt-docs/development/gemini.md-## 1. Project Overview
llms.txt-docs/development/gemini.md-
llms.txt:docs/development/gemini.md:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-docs/development/gemini.md-
llms.txt-docs/development/gemini.md-## 2. Development Status
llms.txt-docs/development/gemini.md-
--
llms.txt-docs/development/gemini.md-    -   `src/error/mod.rs`: Implements custom error types for parsing failures.
llms.txt-docs/development/gemini.md--   `crates/cli`: The command-line interface.
llms.txt-docs/development/gemini.md-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:docs/development/gemini.md:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`.
llms.txt:docs/development/gemini.md:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments.
llms.txt-docs/development/gemini.md--   `crates/test-utils`: Utility functions for testing.
llms.txt-docs/development/gemini.md-
llms.txt-docs/development/gemini.md-### 3.2. Core Features
--
llms.txt-docs/development/gemini.md-    -   Benchmarking is performed using `criterion.rs`, with benchmarks defined in the `benches/` directory.
llms.txt-docs/development/gemini.md--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt-docs/development/gemini.md--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json` and `jsonic`.
llms.txt:docs/development/gemini.md:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-docs/development/gemini.md-
llms.txt-docs/development/gemini.md-## 4. Development Workflow
llms.txt-docs/development/gemini.md-
--
llms.txt-docs/web-tool.md-
llms.txt-docs/web-tool.md-# Interactive Web Tools
llms.txt-docs/web-tool.md-
llms.txt:docs/web-tool.md:The vexy_json project provides two interactive web tools for parsing JSON with different libraries, both featuring identical modern interfaces and seamless Jekyll integration.
llms.txt-docs/web-tool.md-
llms.txt-docs/web-tool.md-## Available Tools
llms.txt-docs/web-tool.md-
llms.txt:docs/web-tool.md:### [Vexy JSON Parser]({{ '/vexy_json-tool/' | relative_url }})
llms.txt:docs/web-tool.md:- **Library**: vexy_json (Rust compiled to WebAssembly)
llms.txt:docs/web-tool.md:- **URL**: [https://twardoch.github.io/vexy_json/vexy_json-tool/](https://twardoch.github.io/vexy_json/vexy_json-tool/)
llms.txt:docs/web-tool.md:- **Features**: WebAssembly-powered parsing with all vexy_json forgiving features
llms.txt-docs/web-tool.md-
llms.txt-docs/web-tool.md-### [Jsonic Parser]({{ '/jsonic-tool/' | relative_url }})
llms.txt-docs/web-tool.md-- **Library**: jsonic (JavaScript via CDN)
llms.txt:docs/web-tool.md:- **URL**: [https://twardoch.github.io/vexy_json/jsonic-tool/](https://twardoch.github.io/vexy_json/jsonic-tool/)
llms.txt-docs/web-tool.md-- **Features**: Flexible JSON with object merging and property chains
llms.txt-docs/web-tool.md-
llms.txt-docs/web-tool.md-### [Tools Overview]({{ '/tools/' | relative_url }})
llms.txt---
llms.txt-docs/assets/js/browser-compatibility.js-// this_file: docs/assets/js/browser-compatibility.js
llms.txt:docs/assets/js/browser-compatibility.js:// Browser compatibility and feature detection for vexy_json web tool
llms.txt-docs/assets/js/browser-compatibility.js-
llms.txt-docs/assets/js/browser-compatibility.js-/**
llms.txt-docs/assets/js/browser-compatibility.js- * Browser compatibility utility class
--
llms.txt-docs/tool.html-  <head>
llms.txt-docs/tool.html-    <meta charset="UTF-8" />
llms.txt-docs/tool.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:docs/tool.html:    <title>vexy_json - Forgiving JSON Parser</title>
llms.txt-docs/tool.html-    <meta
llms.txt-docs/tool.html-      name="description"
llms.txt:docs/tool.html:      content="Interactive web tool for parsing forgiving JSON with vexy_json - supports comments, unquoted keys, trailing commas, and more."
llms.txt-docs/tool.html-    />
llms.txt-docs/tool.html-
llms.txt-docs/tool.html-    <!-- Favicon -->
--
llms.txt-docs/tool.html-    <div class="navbar bg-base-100 shadow-lg">
llms.txt-docs/tool.html-      <div class="container mx-auto">
llms.txt-docs/tool.html-        <div class="flex-1">
llms.txt:docs/tool.html:          <a href="index.html" class="btn btn-ghost text-xl">vexy_json</a>
llms.txt-docs/tool.html-        </div>
llms.txt-docs/tool.html-        <div class="flex-none">
llms.txt-docs/tool.html-          <ul class="menu menu-horizontal px-1">
llms.txt-docs/tool.html-            <li><a href="index.html">Docs</a></li>
llms.txt-docs/tool.html-            <li>
llms.txt:docs/tool.html:              <a href="https://github.com/twardoch/vexy_json" target="_blank"
llms.txt-docs/tool.html-                >GitHub</a
llms.txt-docs/tool.html-              >
llms.txt-docs/tool.html-            </li>
--
llms.txt-docs/tool.html-    <main class="container mx-auto px-4 py-8">
llms.txt-docs/tool.html-      <!-- Header -->
llms.txt-docs/tool.html-      <div class="text-center mb-8">
llms.txt:docs/tool.html:        <h1 class="text-4xl font-bold mb-4">vexy_json Parser</h1>
llms.txt-docs/tool.html-        <p class="text-lg text-base-content/70">
llms.txt-docs/tool.html-          A forgiving JSON parser that supports comments, unquoted keys,
llms.txt-docs/tool.html-          trailing commas, and more.
--
llms.txt-docs/tool.html-              >
llms.txt-docs/tool.html-{
llms.txt-docs/tool.html-  // You can use comments!
llms.txt:docs/tool.html:  name: "vexy_json",
llms.txt-docs/tool.html-  features: [
llms.txt-docs/tool.html-    'comments',
llms.txt-docs/tool.html-    'unquoted keys',
--
llms.txt-docs/tool.html-                class="tab-content bg-base-100 border-base-300 rounded-box p-6"
llms.txt-docs/tool.html-              >
llms.txt-docs/tool.html-                <pre class="text-sm"><code>{
llms.txt:docs/tool.html:  "name": "vexy_json",
llms.txt-docs/tool.html-  "version": "1.1.0",
llms.txt-docs/tool.html-  "features": ["forgiving", "fast", "rust"]
llms.txt-docs/tool.html-}</code></pre>
--
llms.txt-docs/tool.html-      <div class="grid grid-flow-col gap-4">
llms.txt-docs/tool.html-        <a href="index.html" class="link link-hover">Documentation</a>
llms.txt-docs/tool.html-        <a href="api.html" class="link link-hover">API Reference</a>
llms.txt:docs/tool.html:        <a href="https://github.com/twardoch/vexy_json" class="link link-hover"
llms.txt-docs/tool.html-          >Source Code</a
llms.txt-docs/tool.html-        >
llms.txt:docs/tool.html:        <a href="https://crates.io/crates/vexy_json" class="link link-hover"
llms.txt-docs/tool.html-          >crates.io</a
llms.txt-docs/tool.html-        >
llms.txt-docs/tool.html-      </div>
llms.txt-docs/tool.html-      <div>
llms.txt:docs/tool.html:        <p>vexy_json - A forgiving JSON parser. Built with Rust and WebAssembly.</p>
llms.txt-docs/tool.html-      </div>
llms.txt-docs/tool.html-    </footer>
llms.txt-docs/tool.html-
--
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-# WebAssembly (WASM) API Reference
llms.txt-docs/wasm.md-
llms.txt:docs/wasm.md:`vexy_json` provides WebAssembly bindings for use in JavaScript environments (browsers, Node.js). The WASM module exposes parsing functions that mirror the Rust API, including forgiving features and strict mode.
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-## Usage
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```js
llms.txt:docs/wasm.md:import init, { parse_json, parse_json_with_options } from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-await init();
llms.txt-docs/wasm.md-const result = parse_json_with_options('{a:1}', { allow_comments: true });
--
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```toml
llms.txt-docs/wasm.md-[dependencies]
llms.txt:docs/wasm.md:vexy_json = { version = "2.0.0", features = ["wasm"] }
llms.txt-docs/wasm.md-```
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-After building your Rust project with the `wasm` feature (e.g., using `wasm-pack`), you can import the generated JavaScript module.
--
llms.txt-docs/wasm.md-**Example:**
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```javascript
llms.txt:docs/wasm.md:import init from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-async function run() {
llms.txt-docs/wasm.md-  await init();
llms.txt:docs/wasm.md:  console.log("vexy_json WASM module loaded.");
llms.txt:docs/wasm.md:  // Now you can use other vexy_json functions
llms.txt-docs/wasm.md-}
llms.txt-docs/wasm.md-run();
llms.txt-docs/wasm.md-```
--
llms.txt-docs/wasm.md-**Example:**
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```javascript
llms.txt:docs/wasm.md:import { parse_json } from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-try {
llms.txt-docs/wasm.md-  const result = parse_json(`{
--
llms.txt-docs/wasm.md-**Example:**
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```javascript
llms.txt:docs/wasm.md:import { parse_json_with_options } from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-// Strict JSON mode
llms.txt-docs/wasm.md-const strictOptions = {
--
llms.txt-docs/wasm.md-**Example:**
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```javascript
llms.txt:docs/wasm.md:import { validate_json } from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-console.log(validate_json('{"key": "value"}')); // true
llms.txt-docs/wasm.md-console.log(validate_json('{key: "value"}'));   // true (unquoted keys allowed by default)
--
llms.txt-docs/wasm.md-**Example:**
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```javascript
llms.txt:docs/wasm.md:import { get_parser_options, parse_json_with_options } from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-const defaultOptions = get_parser_options();
llms.txt-docs/wasm.md-console.log(defaultOptions.allowComments); // true
--
llms.txt-docs/wasm.md-**Example:**
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```javascript
llms.txt:docs/wasm.md:import { parse_json, stringify_value } from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-const parsed = parse_json('{key: "value", num: 42}');
llms.txt-docs/wasm.md-const jsonString = stringify_value(parsed); // '{"key":"value","num":42}'
--
llms.txt-docs/wasm.md-get_version_info(): object
llms.txt-docs/wasm.md-```
llms.txt-docs/wasm.md-
llms.txt:docs/wasm.md:Returns version and build information for the `vexy_json` library. Useful for debugging and compatibility checking.
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-- Returns: A JavaScript object with properties like `version`, `description`, `authors`, `homepage`, `repository`, and `license`.
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-**Example:**
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```javascript
llms.txt:docs/wasm.md:import { get_version_info } from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-const info = get_version_info();
llms.txt:docs/wasm.md:console.log(`vexy_json v${info.version} - ${info.description}`);
llms.txt-docs/wasm.md-```
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-## `ParseError` Class
--
llms.txt-docs/wasm.md-**Example (Error Handling):**
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```javascript
llms.txt:docs/wasm.md:import { parse_json } from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-try {
llms.txt-docs/wasm.md-  parse_json('{invalid json');
llms.txt-docs/wasm.md-} catch (e) {
llms.txt-docs/wasm.md-  if (e instanceof Error && e.message.startsWith('Parse Error:')) { // Basic check for ParseError
llms.txt:docs/wasm.md:    console.error(`Caught vexy_json ParseError: ${e.message} at position ${e.position}`);
llms.txt-docs/wasm.md-  } else {
llms.txt-docs/wasm.md-    console.error(`Caught unexpected error: ${e}`);
llms.txt-docs/wasm.md-  }
llms.txt---
llms.txt-crates/core/src/streaming/mod.rs-// this_file: src/streaming/mod.rs
llms.txt-crates/core/src/streaming/mod.rs-
llms.txt:crates/core/src/streaming/mod.rs://! Streaming parser implementation for vexy_json.
llms.txt-crates/core/src/streaming/mod.rs-//!
llms.txt-crates/core/src/streaming/mod.rs-//! This module provides a streaming JSON parser that can process input
llms.txt-crates/core/src/streaming/mod.rs-//! incrementally, making it suitable for parsing large files or real-time
--
llms.txt-docs/design/python-api.md-nav_order: 1
llms.txt-docs/design/python-api.md----
llms.txt-docs/design/python-api.md-
llms.txt:docs/design/python-api.md:# Python API Design for vexy_json
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-## Overview
llms.txt-docs/design/python-api.md-
llms.txt:docs/design/python-api.md:This document outlines the design for Python bindings for the vexy_json library, drawing from PyO3 best practices and existing Python JSON parser APIs (json, orjson, ujson).
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-## Core Design Principles
llms.txt-docs/design/python-api.md-
--
llms.txt-docs/design/python-api.md-### Basic Functions (Similar to json module)
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-```python
llms.txt:docs/design/python-api.md:import vexy_json
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-# Basic parsing - similar to json.loads()
llms.txt-docs/design/python-api.md-def loads(s: str, *, 
--
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-```python
llms.txt-docs/design/python-api.md-class ParserOptions:
llms.txt:docs/design/python-api.md:    """Configuration options for vexy_json parser."""
llms.txt-docs/design/python-api.md-    
llms.txt-docs/design/python-api.md-    def __init__(self, 
llms.txt-docs/design/python-api.md-                 allow_comments: bool = True,
--
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-```python
llms.txt-docs/design/python-api.md-class VexyJsonError(Exception):
llms.txt:docs/design/python-api.md:    """Base exception for vexy_json errors."""
llms.txt-docs/design/python-api.md-    pass
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-class ParseError(VexyJsonError):
--
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-- **`loads()`** instead of `parse()` for consistency with `json` module
llms.txt-docs/design/python-api.md-- **Keyword-only arguments** for options to prevent positional confusion
llms.txt:docs/design/python-api.md:- **Boolean defaults** match vexy_json's forgiving nature
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-### 2. Error Handling
llms.txt-docs/design/python-api.md-
--
llms.txt-docs/design/python-api.md-- **Standard library compatibility**: `loads()` and `dumps()` work as drop-in replacements
llms.txt-docs/design/python-api.md-- **orjson inspiration**: Performance-focused design with bytes handling
llms.txt-docs/design/python-api.md-- **ujson similarity**: Simple API with performance benefits
llms.txt:docs/design/python-api.md:- **vexy_json extensions**: Forgiving features as the key differentiator
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-This design balances Python idioms with the performance benefits of Rust, providing a comprehensive JSON parsing solution that extends beyond standard JSON capabilities.
llms.txt---
llms.txt-bindings/python/src/lib.rs-use pyo3::types::{PyDict, PyList};
llms.txt-bindings/python/src/lib.rs-use pythonize::{depythonize, pythonize};
llms.txt-bindings/python/src/lib.rs-use serde_json::Value as JsonValue;
llms.txt:bindings/python/src/lib.rs:use vexy_json_core::{
llms.txt-bindings/python/src/lib.rs-    parse as core_parse, parse_with_options as core_parse_with_options, Parser, ParserOptions,
llms.txt-bindings/python/src/lib.rs-    RepairMode,
llms.txt-bindings/python/src/lib.rs-};
--
llms.txt-bindings/python/src/lib.rs-    }
llms.txt-bindings/python/src/lib.rs-}
llms.txt-bindings/python/src/lib.rs-
llms.txt:bindings/python/src/lib.rs:/// Parser options for configuring vexy_json behavior
llms.txt-bindings/python/src/lib.rs-#[pyclass]
llms.txt-bindings/python/src/lib.rs-#[derive(Clone)]
llms.txt-bindings/python/src/lib.rs-struct Options {
--
llms.txt-bindings/python/src/lib.rs-    repairs: Vec<Repair>,
llms.txt-bindings/python/src/lib.rs-}
llms.txt-bindings/python/src/lib.rs-
llms.txt:bindings/python/src/lib.rs:/// vexy_json parser instance
llms.txt-bindings/python/src/lib.rs-#[pyclass]
llms.txt-bindings/python/src/lib.rs-struct Parser {
llms.txt:bindings/python/src/lib.rs:    parser: vexy_json_core::Parser,
llms.txt-bindings/python/src/lib.rs-}
llms.txt-bindings/python/src/lib.rs-
llms.txt-bindings/python/src/lib.rs-#[pymethods]
--
llms.txt-bindings/python/src/lib.rs-    fn new(options: Option<Options>) -> Self {
llms.txt-bindings/python/src/lib.rs-        let opts = options.map(|o| o.inner).unwrap_or_default();
llms.txt-bindings/python/src/lib.rs-        Parser {
llms.txt:bindings/python/src/lib.rs:            parser: vexy_json_core::Parser::new(opts),
llms.txt-bindings/python/src/lib.rs-        }
llms.txt-bindings/python/src/lib.rs-    }
llms.txt-bindings/python/src/lib.rs-
--
llms.txt-bindings/python/src/lib.rs-    Ok(())
llms.txt-bindings/python/src/lib.rs-}
llms.txt-bindings/python/src/lib.rs-
llms.txt:bindings/python/src/lib.rs:/// Get vexy_json version
llms.txt-bindings/python/src/lib.rs-#[pyfunction]
llms.txt-bindings/python/src/lib.rs-fn version() -> &'static str {
llms.txt-bindings/python/src/lib.rs-    env!("CARGO_PKG_VERSION")
--
llms.txt-bindings/python/src/lib.rs-    pythonize(py, value).map_err(|e| PyValueError::new_err(format!("Conversion error: {}", e)))
llms.txt-bindings/python/src/lib.rs-}
llms.txt-bindings/python/src/lib.rs-
llms.txt:bindings/python/src/lib.rs:/// vexy_json - A forgiving JSON parser for Python
llms.txt-bindings/python/src/lib.rs-#[pymodule]
llms.txt:bindings/python/src/lib.rs:fn vexy_json(m: &Bound<'_, PyModule>) -> PyResult<()> {
llms.txt-bindings/python/src/lib.rs-    m.add_class::<ParseError>()?;
llms.txt-bindings/python/src/lib.rs-    m.add_class::<Repair>()?;
llms.txt-bindings/python/src/lib.rs-    m.add_class::<Options>()?;
--
llms.txt-docs/transform.md-### Basic Usage
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::{normalize, normalize_with_options, NormalizerOptions};
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-// Basic normalization with default options
llms.txt-docs/transform.md-let json = r#"{"b": 2, "a": 1, "c": null}"#;
--
llms.txt-docs/transform.md-Produces deterministic JSON output suitable for hashing and comparison:
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::CanonicalNormalizer;
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-let normalizer = CanonicalNormalizer::new();
llms.txt-docs/transform.md-let canonical = normalizer.normalize(json).unwrap();
--
llms.txt-docs/transform.md-Removes unnecessary elements and optimizes for size:
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::CleanupNormalizer;
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-let normalizer = CleanupNormalizer::new();
llms.txt-docs/transform.md-let cleaned = normalizer.normalize(json).unwrap();
--
llms.txt-docs/transform.md-### Basic Usage
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::{optimize, optimize_with_options, OptimizerOptions};
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-// Basic optimization with default options
llms.txt-docs/transform.md-let json = r#"{"count": 42.0, "items": [1, 2, 3]}"#;
--
llms.txt-docs/transform.md-Optimizes for minimal memory usage:
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::MemoryOptimizer;
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-let optimized = MemoryOptimizer::minimize_memory(&json).unwrap();
llms.txt-docs/transform.md-```
--
llms.txt-docs/transform.md-Optimizes for maximum performance:
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::PerformanceOptimizer;
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-let optimized = PerformanceOptimizer::maximize_performance(&json).unwrap();
llms.txt-docs/transform.md-```
--
llms.txt-docs/transform.md-Track optimization effectiveness:
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::AstOptimizer;
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-let mut optimizer = AstOptimizer::new();
llms.txt-docs/transform.md-let optimized = optimizer.optimize(&json).unwrap();
--
llms.txt-docs/transform.md-Combine normalization and optimization:
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::{parse, transform::{normalize, optimize}};
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-let json = r#"{"z": 1.0, "a": 2.0, "b": null}"#;
llms.txt-docs/transform.md-let value = parse(json).unwrap();
--
llms.txt-docs/transform.md-Create custom transformation pipelines:
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::{NormalizerOptions, OptimizerOptions};
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-fn custom_transform(json: &str) -> Result<String, Error> {
llms.txt-docs/transform.md-    // First normalize
--
llms.txt-docs/transform.md-Both normalization and optimization can fail:
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::normalize;
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-match normalize(json) {
llms.txt-docs/transform.md-    Ok(normalized) => println!("Success: {}", normalized),
--
llms.txt-docs/transform.md-### With Parsing
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::{parse_with_options, transform::normalize, ParserOptions};
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-let options = ParserOptions {
llms.txt-docs/transform.md-    allow_comments: true,
--
llms.txt-docs/transform.md-### With Streaming
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::{streaming::parse_streaming, transform::optimize};
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-for value in parse_streaming(reader)? {
llms.txt-docs/transform.md-    let optimized = optimize(&value?)?;
llms.txt---
llms.txt-tests/error_handling.rs-// this_file: tests/error_handling.rs
llms.txt-tests/error_handling.rs-
llms.txt:tests/error_handling.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-tests/error_handling.rs-
llms.txt-tests/error_handling.rs-/// Comprehensive error handling tests ported from jsonic error.test.js
llms.txt:tests/error_handling.rs:/// These tests ensure vexy_json properly handles malformed input and provides meaningful error messages.
llms.txt-tests/error_handling.rs-/// Reference: ref/jsonic/test/error.test.js
llms.txt-tests/error_handling.rs-
llms.txt-tests/error_handling.rs-#[test]
--
llms.txt-tests/error_handling.rs-
llms.txt-tests/error_handling.rs-#[test]
llms.txt-tests/error_handling.rs-fn test_valid_edge_cases() {
llms.txt:tests/error_handling.rs:    // Test what vexy_json actually supports vs jsonic expectations
llms.txt-tests/error_handling.rs-    // Reference: jsonic error.test.js line 205-213
llms.txt-tests/error_handling.rs-
llms.txt:tests/error_handling.rs:    // vexy_json may not support implicit null like jsonic does
llms.txt-tests/error_handling.rs-    assert!(
llms.txt-tests/error_handling.rs-        parse(",]").is_err(),
llms.txt:tests/error_handling.rs:        "Implicit null in array not supported in vexy_json"
llms.txt-tests/error_handling.rs-    );
llms.txt-tests/error_handling.rs-
llms.txt:tests/error_handling.rs:    // Object with trailing values - test if vexy_json supports this
llms.txt-tests/error_handling.rs-    if let Ok(obj_result) = parse("{a:}") {
llms.txt:tests/error_handling.rs:        if let vexy_json::Value::Object(map) = obj_result {
llms.txt:tests/error_handling.rs:            assert_eq!(map.get("a"), Some(&vexy_json::Value::Null));
llms.txt-tests/error_handling.rs-        }
llms.txt-tests/error_handling.rs-    } else {
llms.txt:tests/error_handling.rs:        // vexy_json may not support trailing colons
llms.txt-tests/error_handling.rs-        assert!(
llms.txt-tests/error_handling.rs-            parse("{a:}").is_err(),
llms.txt:tests/error_handling.rs:            "Trailing colon not supported in vexy_json"
llms.txt-tests/error_handling.rs-        );
llms.txt-tests/error_handling.rs-    }
llms.txt-tests/error_handling.rs-
--
llms.txt-tests/error_handling.rs-    // Special case: array notation with object content
llms.txt-tests/error_handling.rs-    // Reference: jsonic error.test.js line 209-213
llms.txt-tests/error_handling.rs-
llms.txt:tests/error_handling.rs:    // vexy_json doesn't support object notation inside arrays like jsonic does
llms.txt-tests/error_handling.rs-    assert!(
llms.txt-tests/error_handling.rs-        parse("[a:1]").is_err(),
llms.txt:tests/error_handling.rs:        "Object notation in array not supported in vexy_json"
llms.txt-tests/error_handling.rs-    );
llms.txt-tests/error_handling.rs-
llms.txt:tests/error_handling.rs:    // Test what vexy_json does support instead
llms.txt-tests/error_handling.rs-    assert!(
llms.txt-tests/error_handling.rs-        parse("[{\"a\":1}]").is_ok(),
llms.txt-tests/error_handling.rs-        "Proper object in array should work"
--
llms.txt-tests/error_handling.rs-    // Test handling of unprintable characters
llms.txt-tests/error_handling.rs-    // Reference: jsonic error.test.js line 119-122
llms.txt-tests/error_handling.rs-
llms.txt:tests/error_handling.rs:    // vexy_json may allow null characters in strings (unlike strict JSON)
llms.txt-tests/error_handling.rs-    // Test what actually happens vs what jsonic does
llms.txt-tests/error_handling.rs-    let null_char_result = parse("\"\x00\"");
llms.txt-tests/error_handling.rs-    if null_char_result.is_ok() {
llms.txt:tests/error_handling.rs:        // If vexy_json allows it, that's different from jsonic but valid
llms.txt:tests/error_handling.rs:        assert!(true, "vexy_json allows null character in string");
llms.txt-tests/error_handling.rs-    } else {
llms.txt-tests/error_handling.rs-        assert!(null_char_result.is_err(), "Null character should error");
llms.txt-tests/error_handling.rs-    }
--
llms.txt-tests/error_handling.rs-#[test]
llms.txt-tests/error_handling.rs-fn test_empty_input_edge_cases() {
llms.txt-tests/error_handling.rs-    // Test various empty or whitespace inputs
llms.txt:tests/error_handling.rs:    assert_eq!(parse("").unwrap(), vexy_json::Value::Null);
llms.txt:tests/error_handling.rs:    assert_eq!(parse("   ").unwrap(), vexy_json::Value::Null);
llms.txt:tests/error_handling.rs:    assert_eq!(parse("\t").unwrap(), vexy_json::Value::Null);
llms.txt:tests/error_handling.rs:    assert_eq!(parse("\n").unwrap(), vexy_json::Value::Null);
llms.txt:tests/error_handling.rs:    assert_eq!(parse("\r").unwrap(), vexy_json::Value::Null);
llms.txt-tests/error_handling.rs-}
llms.txt-tests/error_handling.rs-
llms.txt-tests/error_handling.rs-#[test]
--
llms.txt-tests/error_handling.rs-        "Unclosed comment after content should error"
llms.txt-tests/error_handling.rs-    );
llms.txt-tests/error_handling.rs-
llms.txt:tests/error_handling.rs:    // Test if vexy_json supports comments - it may not support them at all
llms.txt-tests/error_handling.rs-    let comment_result = parse("/* closed */ a");
llms.txt-tests/error_handling.rs-    if comment_result.is_ok() {
llms.txt:tests/error_handling.rs:        assert!(true, "vexy_json supports comments by default");
llms.txt-tests/error_handling.rs-    } else {
llms.txt-tests/error_handling.rs-        // Try with parser options
llms.txt-tests/error_handling.rs-        let mut opts = ParserOptions::default();
--
llms.txt-tests/error_handling.rs-        let with_options = parse_with_options("/* closed */ a", opts);
llms.txt-tests/error_handling.rs-
llms.txt-tests/error_handling.rs-        if with_options.is_ok() {
llms.txt:tests/error_handling.rs:            assert!(true, "vexy_json supports comments with options");
llms.txt-tests/error_handling.rs-        } else {
llms.txt:tests/error_handling.rs:            // vexy_json may not support comments at all - that's valid
llms.txt-tests/error_handling.rs-            assert!(
llms.txt-tests/error_handling.rs-                true,
llms.txt:tests/error_handling.rs:                "vexy_json does not support comments - this is valid behavior"
llms.txt-tests/error_handling.rs-            );
llms.txt-tests/error_handling.rs-        }
llms.txt-tests/error_handling.rs-    }
--
llms.txt-benches/parser_comparison.rs-//! - Stack-based iterative parser (iterative)
llms.txt-benches/parser_comparison.rs-
llms.txt-benches/parser_comparison.rs-use criterion::{black_box, criterion_group, criterion_main, Criterion, BenchmarkId};
llms.txt:benches/parser_comparison.rs:use vexy_json_core::{
llms.txt-benches/parser_comparison.rs-    parse_with_options, 
llms.txt-benches/parser_comparison.rs-    parse_optimized_with_options,
llms.txt-benches/parser_comparison.rs-    parse_optimized_v2_with_options,
--
llms.txt-docs/development/refactor-plan.md-
llms.txt-docs/development/refactor-plan.md-# REFACTOR.md – Authoring Brief (Revised for Lean & Refactor Principles)
llms.txt-docs/development/refactor-plan.md-
llms.txt:docs/development/refactor-plan.md:This document is the canonical, **action-oriented**, **self-contained**, and **phased** roadmap for the vexy_json refactor sprint. It integrates the detailed refactor playbook and quality principles from [`REFACTOR_PROMPT.md`](REFACTOR_PROMPT.md) and the minimalization/dead code removal guidance from [`LEAN.md`](LEAN.md). It is written for a technically strong engineer new to this repository.
llms.txt-docs/development/refactor-plan.md-
llms.txt-docs/development/refactor-plan.md----
llms.txt-docs/development/refactor-plan.md-
llms.txt-docs/development/refactor-plan.md-## 1. Executive Summary
llms.txt-docs/development/refactor-plan.md-
llms.txt:docs/development/refactor-plan.md:The vexy_json codebase is a monolithic Rust crate implementing a forgiving JSON parser, CLI, and WASM module. Its tightly coupled structure, legacy/dead code, and lack of clear boundaries hinder maintainability, performance, and extensibility. This refactor will:
llms.txt-docs/development/refactor-plan.md-
llms.txt-docs/development/refactor-plan.md-- Decouple components into a Cargo workspace of focused crates.
llms.txt-docs/development/refactor-plan.md-- Remove dead/legacy code and minimize dependencies.
--
llms.txt-docs/development/refactor-plan.md-- Enforce production-grade, review-friendly, and performance-aware practices.
llms.txt-docs/development/refactor-plan.md-- Improve documentation, developer experience, and CI/CD quality gates.
llms.txt-docs/development/refactor-plan.md-
llms.txt:docs/development/refactor-plan.md:Upon completion, vexy_json will be a lean, maintainable, and extensible parser suite, with robust testing, clear architecture, and a minimal core suitable for embedding or distribution.
llms.txt-docs/development/refactor-plan.md-
llms.txt-docs/development/refactor-plan.md----
llms.txt-docs/development/refactor-plan.md-
--
llms.txt-docs/development/refactor-plan.md-
llms.txt-docs/development/refactor-plan.md-Refactor into a Cargo workspace with these crates:
llms.txt-docs/development/refactor-plan.md-
llms.txt:docs/development/refactor-plan.md:- **vexy_json-core**: Core parser, lexer, value types, errors. No I/O, CLI, or WASM logic.
llms.txt:docs/development/refactor-plan.md:- **vexy_json-cli**: CLI wrapper, feature-gated.
llms.txt:docs/development/refactor-plan.md:- **vexy_json-wasm**: WASM bindings, feature-gated.
llms.txt:docs/development/refactor-plan.md:- **vexy_json-serde**: Serde integration, feature-gated.
llms.txt-docs/development/refactor-plan.md-- **test-utils**: Shared test helpers.
llms.txt-docs/development/refactor-plan.md-- **examples/**, **benches/**: Kept for development, excluded from lean/core builds.
llms.txt-docs/development/refactor-plan.md-
--
llms.txt-docs/development/refactor-plan.md-## 6. Testing & Quality Gates
llms.txt-docs/development/refactor-plan.md-
llms.txt-docs/development/refactor-plan.md-- **Coverage Baseline:** Measure with `cargo-tarpaulin`.
llms.txt:docs/development/refactor-plan.md:- **Target Coverage:** `vexy_json-core` ≥95%, CLI ≥80%, WASM ≥90%.
llms.txt-docs/development/refactor-plan.md-- **Testing Pyramid:** Unit, integration, property-based, and performance tests.
llms.txt-docs/development/refactor-plan.md-- **CI Workflow:** Format, lint, test, coverage, bench, build artifacts.
llms.txt-docs/development/refactor-plan.md-- **Deliverable Checklist per PR:**
--
llms.txt-docs/development/refactor-plan.md-
llms.txt-docs/development/refactor-plan.md-| Week  | Deliverable                                 | Success Metric                                 |
llms.txt-docs/development/refactor-plan.md-|-------|---------------------------------------------|------------------------------------------------|
llms.txt:docs/development/refactor-plan.md:| 1-2   | Workspace setup & `vexy_json-core` created      | CI green, core builds, dead code removed.      |
llms.txt-docs/development/refactor-plan.md-| 3-4   | Lexer refactored, emits spans               | Token struct has span, parser updated.         |
llms.txt-docs/development/refactor-plan.md-| 5-8   | New parser implemented                      | Property tests pass.                           |
llms.txt-docs/development/refactor-plan.md-| 9-10  | CLI/WASM migrated to new parser             | All integration tests pass.                    |
--
llms.txt-docs/design/cli-enhancements.md-nav_order: 2
llms.txt-docs/design/cli-enhancements.md----
llms.txt-docs/design/cli-enhancements.md-
llms.txt:docs/design/cli-enhancements.md:# CLI Enhancements Design for vexy_json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-## Overview
llms.txt-docs/design/cli-enhancements.md-
llms.txt:docs/design/cli-enhancements.md:This document outlines the design for comprehensive CLI enhancements to the vexy_json command-line tool, building on the current basic implementation to provide a powerful and user-friendly JSON processing experience.
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-## Current State Analysis
llms.txt-docs/design/cli-enhancements.md-
--
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-## Enhancement Goals
llms.txt-docs/design/cli-enhancements.md-
llms.txt:docs/design/cli-enhancements.md:1. **User Experience**: Make vexy_json the go-to CLI tool for JSON processing
llms.txt-docs/design/cli-enhancements.md-2. **Feature Parity**: Match or exceed capabilities of popular JSON tools (jq, jsonlint)
llms.txt-docs/design/cli-enhancements.md-3. **Rust Integration**: Leverage Rust's performance and safety for robust operations
llms.txt-docs/design/cli-enhancements.md-4. **Flexibility**: Support various workflows from simple formatting to complex transformations
--
llms.txt-docs/design/cli-enhancements.md-### Basic Usage (Enhanced)
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Current (unchanged for compatibility)
llms.txt:docs/design/cli-enhancements.md:echo '{"key": "value"}' | vexy_json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# New file input/output
llms.txt:docs/design/cli-enhancements.md:vexy_json input.json                    # Read from file, output to stdout
llms.txt:docs/design/cli-enhancements.md:vexy_json input.json -o output.json     # Read from file, write to file
llms.txt:docs/design/cli-enhancements.md:vexy_json -i input.json -o output.json  # Explicit input/output
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Multiple files
llms.txt:docs/design/cli-enhancements.md:vexy_json file1.json file2.json         # Process multiple files
llms.txt:docs/design/cli-enhancements.md:vexy_json *.json                        # Glob support
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-### Formatting Options
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Pretty printing (default when output is terminal)
llms.txt:docs/design/cli-enhancements.md:vexy_json --pretty input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json -p input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Compact output (default when piped)
llms.txt:docs/design/cli-enhancements.md:vexy_json --compact input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json -c input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Custom indentation
llms.txt:docs/design/cli-enhancements.md:vexy_json --indent 4 input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json --indent tab input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Sort keys
llms.txt:docs/design/cli-enhancements.md:vexy_json --sort-keys input.json
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-### Validation and Analysis
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Validate only (exit code indicates success/failure)
llms.txt:docs/design/cli-enhancements.md:vexy_json --validate input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json -v input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Show statistics
llms.txt:docs/design/cli-enhancements.md:vexy_json --stats input.json
llms.txt-docs/design/cli-enhancements.md-# Output: {"objects": 5, "arrays": 3, "strings": 12, ...}
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Detailed error reporting
llms.txt:docs/design/cli-enhancements.md:vexy_json --strict input.json    # Fail on any forgiving features
llms.txt:docs/design/cli-enhancements.md:vexy_json --explain input.json   # Show what forgiving features were used
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-### Parser Options Control
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Disable specific forgiving features
llms.txt:docs/design/cli-enhancements.md:vexy_json --no-comments input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json --no-trailing-commas input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json --no-unquoted-keys input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json --no-single-quotes input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Enable specific features (when starting from strict mode)
llms.txt:docs/design/cli-enhancements.md:vexy_json --strict --allow-comments input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Newline as comma mode
llms.txt:docs/design/cli-enhancements.md:vexy_json --newline-as-comma input.json
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-### Watch Mode
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Watch file for changes
llms.txt:docs/design/cli-enhancements.md:vexy_json --watch input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json -w input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Watch with auto-output
llms.txt:docs/design/cli-enhancements.md:vexy_json -w input.json -o output.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Watch directory
llms.txt:docs/design/cli-enhancements.md:vexy_json -w ./config/
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-### Batch Processing
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Process all JSON files in directory
llms.txt:docs/design/cli-enhancements.md:vexy_json --batch ./data/ --output-dir ./processed/
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# With transformation
llms.txt:docs/design/cli-enhancements.md:vexy_json --batch ./data/ --pretty --sort-keys -o ./formatted/
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Parallel processing
llms.txt:docs/design/cli-enhancements.md:vexy_json --parallel ./data/*.json
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-### Query and Filtering (Future Enhancement)
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Basic path extraction (jq-like)
llms.txt:docs/design/cli-enhancements.md:vexy_json input.json --get ".users[0].name"
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Multiple paths
llms.txt:docs/design/cli-enhancements.md:vexy_json input.json --get ".name" --get ".age"
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Simple filtering
llms.txt:docs/design/cli-enhancements.md:vexy_json input.json --filter ".age > 30"
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-### Output Control
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Output to stderr instead of stdout
llms.txt:docs/design/cli-enhancements.md:vexy_json --stderr input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Silent mode (only exit codes)
llms.txt:docs/design/cli-enhancements.md:vexy_json --silent input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json -s input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Different output formats
llms.txt:docs/design/cli-enhancements.md:vexy_json --output-format yaml input.json  # Future
llms.txt:docs/design/cli-enhancements.md:vexy_json --output-format toml input.json  # Future
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-### Advanced Features
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Diff two JSON files (structural comparison)
llms.txt:docs/design/cli-enhancements.md:vexy_json --diff file1.json file2.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Merge JSON files
llms.txt:docs/design/cli-enhancements.md:vexy_json --merge base.json override.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Schema validation (future)
llms.txt:docs/design/cli-enhancements.md:vexy_json --schema schema.json data.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Performance profiling
llms.txt:docs/design/cli-enhancements.md:vexy_json --profile large-file.json
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-## Implementation Architecture
--
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-## Conclusion
llms.txt-docs/design/cli-enhancements.md-
llms.txt:docs/design/cli-enhancements.md:These CLI enhancements will transform vexy_json from a basic JSON parser into a comprehensive JSON processing toolkit. By focusing on user experience, performance, and flexibility, vexy_json can become the preferred choice for developers working with forgiving JSON formats.
llms.txt---
llms.txt-docs/python-bindings.md-## Installation
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```bash
llms.txt:docs/python-bindings.md:pip install vexy_json
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-## Basic Usage
--
llms.txt-docs/python-bindings.md-### Parsing JSON
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Standard JSON parsing
llms.txt:docs/python-bindings.md:data = vexy_json.loads('{"name": "John", "age": 30}')
llms.txt-docs/python-bindings.md-print(data)  # {'name': 'John', 'age': 30}
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Parse with forgiving features
llms.txt:docs/python-bindings.md:data = vexy_json.loads('''
llms.txt-docs/python-bindings.md-{
llms.txt-docs/python-bindings.md-    name: "John",  // Unquoted keys and comments
llms.txt-docs/python-bindings.md-    age: 30,       // Trailing comma is okay
--
llms.txt-docs/python-bindings.md-The Vexy JSON Python bindings provide full compatibility with the standard `json` module:
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Drop-in replacement for json.loads()
llms.txt:docs/python-bindings.md:data = vexy_json.loads('{"key": "value"}')
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# All standard json functions are available
llms.txt:docs/python-bindings.md:json_str = vexy_json.dumps(data)
llms.txt:docs/python-bindings.md:json_str = vexy_json.dumps(data, indent=2)
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# File operations
llms.txt-docs/python-bindings.md-with open('data.json', 'r') as f:
llms.txt:docs/python-bindings.md:    data = vexy_json.load(f)
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-with open('output.json', 'w') as f:
llms.txt:docs/python-bindings.md:    vexy_json.dump(data, f, indent=2)
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-## Advanced Parsing Options
--
llms.txt-docs/python-bindings.md-### Custom Parser Options
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Parse with custom options
llms.txt:docs/python-bindings.md:data = vexy_json.parse_with_options(
llms.txt-docs/python-bindings.md-    json_string,
llms.txt-docs/python-bindings.md-    allow_comments=True,
llms.txt-docs/python-bindings.md-    allow_trailing_commas=True,
--
llms.txt-docs/python-bindings.md-### Validation
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Check if JSON is valid
llms.txt:docs/python-bindings.md:is_valid = vexy_json.is_valid('{"valid": true}')
llms.txt-docs/python-bindings.md-print(is_valid)  # True
llms.txt-docs/python-bindings.md-
llms.txt:docs/python-bindings.md:is_valid = vexy_json.is_valid('invalid json')
llms.txt-docs/python-bindings.md-print(is_valid)  # False
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
--
llms.txt-docs/python-bindings.md-### Streaming Parser with Context Manager
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Parse large JSON files efficiently
llms.txt:docs/python-bindings.md:with vexy_json.StreamingParser() as parser:
llms.txt-docs/python-bindings.md-    with open('large_file.json', 'r') as f:
llms.txt-docs/python-bindings.md-        for item in parser.parse_stream(f):
llms.txt-docs/python-bindings.md-            process(item)
--
llms.txt-docs/python-bindings.md-### NDJSON Support
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Parse NDJSON (newline-delimited JSON)
llms.txt:docs/python-bindings.md:with vexy_json.StreamingParser() as parser:
llms.txt-docs/python-bindings.md-    with open('data.ndjson', 'r') as f:
llms.txt-docs/python-bindings.md-        for item in parser.parse_lines(f):
llms.txt-docs/python-bindings.md-            process(item)
--
llms.txt-docs/python-bindings.md-### Custom Streaming Options
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Create streaming parser with custom options
llms.txt:docs/python-bindings.md:parser = vexy_json.StreamingParser(
llms.txt-docs/python-bindings.md-    allow_comments=True,
llms.txt-docs/python-bindings.md-    allow_trailing_commas=True,
llms.txt-docs/python-bindings.md-    enable_repair=True
--
llms.txt-docs/python-bindings.md-### Direct Array Parsing
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-import numpy as np
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Parse JSON array directly to NumPy array
llms.txt:docs/python-bindings.md:arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-docs/python-bindings.md-print(type(arr))  # <class 'numpy.ndarray'>
llms.txt-docs/python-bindings.md-print(arr.dtype)  # int64
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Specify dtype
llms.txt:docs/python-bindings.md:arr = vexy_json.loads_numpy('[1.1, 2.2, 3.3]', dtype='float32')
llms.txt-docs/python-bindings.md-print(arr.dtype)  # float32
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-### Zero-Copy Optimization
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Optimized parsing for numeric data
llms.txt:docs/python-bindings.md:arr = vexy_json.loads_numpy_zerocopy('[1, 2, 3, 4, 5]', dtype='int64')
llms.txt-docs/python-bindings.md-# Uses zero-copy when possible for better performance
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-### Mixed Data Types
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Handle mixed arrays
llms.txt:docs/python-bindings.md:arr = vexy_json.loads_numpy('[1, 2.5, 3, 4.7]')
llms.txt-docs/python-bindings.md-print(arr.dtype)  # float64 (automatically promoted)
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Non-numeric data falls back to object arrays
llms.txt:docs/python-bindings.md:arr = vexy_json.loads_numpy('["a", "b", "c"]')
llms.txt-docs/python-bindings.md-print(arr.dtype)  # object
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
--
llms.txt-docs/python-bindings.md-### DataFrame Conversion
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-import pandas as pd
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Parse JSON to DataFrame
llms.txt-docs/python-bindings.md-json_data = '[{"name": "John", "age": 30}, {"name": "Jane", "age": 25}]'
llms.txt:docs/python-bindings.md:df = vexy_json.loads_dataframe(json_data)
llms.txt-docs/python-bindings.md-print(type(df))  # <class 'pandas.core.frame.DataFrame'>
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Specify orientation
llms.txt:docs/python-bindings.md:df = vexy_json.loads_dataframe(json_data, orient='records')
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-## Error Handling
--
llms.txt-docs/python-bindings.md-### Parse Errors
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-try:
llms.txt:docs/python-bindings.md:    data = vexy_json.loads('invalid json')
llms.txt-docs/python-bindings.md-except ValueError as e:
llms.txt-docs/python-bindings.md-    print(f"Parse error: {e}")
llms.txt-docs/python-bindings.md-```
--
llms.txt-docs/python-bindings.md-### Repair Functionality
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Automatic repair of common JSON issues
llms.txt-docs/python-bindings.md-try:
llms.txt:docs/python-bindings.md:    data = vexy_json.loads('{"key": "value",}')  # Trailing comma
llms.txt-docs/python-bindings.md-    print(data)  # Successfully parsed
llms.txt-docs/python-bindings.md-except ValueError as e:
llms.txt-docs/python-bindings.md-    print(f"Even repair failed: {e}")
--
llms.txt-docs/python-bindings.md-### Choosing the Right Function
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# For standard JSON, use loads() for compatibility
llms.txt:docs/python-bindings.md:data = vexy_json.loads(standard_json)
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# For forgiving JSON, use parse_with_options()
llms.txt:docs/python-bindings.md:data = vexy_json.parse_with_options(
llms.txt-docs/python-bindings.md-    forgiving_json,
llms.txt-docs/python-bindings.md-    allow_comments=True,
llms.txt-docs/python-bindings.md-    allow_trailing_commas=True
llms.txt-docs/python-bindings.md-)
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# For numerical data, use NumPy integration
llms.txt:docs/python-bindings.md:arr = vexy_json.loads_numpy(json_array)
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# For tabular data, use pandas integration
llms.txt:docs/python-bindings.md:df = vexy_json.loads_dataframe(json_records)
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-### Memory Efficiency
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Streaming for large files
llms.txt:docs/python-bindings.md:with vexy_json.StreamingParser() as parser:
llms.txt-docs/python-bindings.md-    for item in parser.parse_stream(large_file):
llms.txt-docs/python-bindings.md-        # Process items one at a time
llms.txt-docs/python-bindings.md-        # Memory usage stays constant
--
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt-docs/python-bindings.md-from typing import Any, Dict, List, Optional, Union
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-def process_json(json_str: str) -> Dict[str, Any]:
llms.txt:docs/python-bindings.md:    return vexy_json.loads(json_str)
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-def safe_parse(json_str: str) -> Optional[Dict[str, Any]]:
llms.txt-docs/python-bindings.md-    try:
llms.txt:docs/python-bindings.md:        return vexy_json.loads(json_str)
llms.txt-docs/python-bindings.md-    except ValueError:
llms.txt-docs/python-bindings.md-        return None
llms.txt-docs/python-bindings.md-```
--
llms.txt-docs/python-bindings.md-### Error Handling
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-def safe_parse_json(json_str: str, default=None):
llms.txt-docs/python-bindings.md-    """Safely parse JSON with fallback."""
llms.txt-docs/python-bindings.md-    try:
llms.txt:docs/python-bindings.md:        return vexy_json.loads(json_str)
llms.txt-docs/python-bindings.md-    except ValueError as e:
llms.txt-docs/python-bindings.md-        print(f"JSON parse error: {e}")
llms.txt-docs/python-bindings.md-        return default
--
llms.txt-docs/python-bindings.md-### Memory Management
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# For large datasets, prefer streaming
llms.txt-docs/python-bindings.md-def process_large_json(filename):
llms.txt:docs/python-bindings.md:    with vexy_json.StreamingParser() as parser:
llms.txt-docs/python-bindings.md-        with open(filename, 'r') as f:
llms.txt-docs/python-bindings.md-            for item in parser.parse_stream(f):
llms.txt-docs/python-bindings.md-                yield process_item(item)
--
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt-docs/python-bindings.md-import requests
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-response = requests.get('https://api.example.com/data')
llms.txt:docs/python-bindings.md:data = vexy_json.loads(response.text)
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-### With FastAPI
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt-docs/python-bindings.md-from fastapi import FastAPI
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-app = FastAPI()
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-@app.post("/parse-json")
llms.txt-docs/python-bindings.md-async def parse_json(content: str):
llms.txt-docs/python-bindings.md-    try:
llms.txt:docs/python-bindings.md:        data = vexy_json.loads(content)
llms.txt-docs/python-bindings.md-        return {"success": True, "data": data}
llms.txt-docs/python-bindings.md-    except ValueError as e:
llms.txt-docs/python-bindings.md-        return {"success": False, "error": str(e)}
--
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt-docs/python-bindings.md-from django.http import JsonResponse
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-def parse_json_view(request):
llms.txt-docs/python-bindings.md-    try:
llms.txt:docs/python-bindings.md:        data = vexy_json.loads(request.body)
llms.txt-docs/python-bindings.md-        # Process data
llms.txt-docs/python-bindings.md-        return JsonResponse({"success": True})
llms.txt-docs/python-bindings.md-    except ValueError as e:
--
llms.txt-docs/python-bindings.md-data = json.loads(json_string)
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# After
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt:docs/python-bindings.md:data = vexy_json.loads(json_string)  # Same interface, more forgiving
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-### Gradual Migration
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt-docs/python-bindings.md-import json
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-def parse_json_fallback(json_str):
llms.txt-docs/python-bindings.md-    """Try standard JSON first, fall back to Vexy JSON."""
llms.txt-docs/python-bindings.md-    try:
llms.txt-docs/python-bindings.md-        return json.loads(json_str)
llms.txt-docs/python-bindings.md-    except json.JSONDecodeError:
llms.txt:docs/python-bindings.md:        return vexy_json.loads(json_str)  # More forgiving parsing
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-## Advanced Features
--
llms.txt-docs/python-bindings.md-### Custom Serialization
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-from dataclasses import dataclass
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-@dataclass
--
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Convert to dict first, then serialize
llms.txt-docs/python-bindings.md-person = Person("John", 30)
llms.txt:docs/python-bindings.md:json_str = vexy_json.dumps(person.__dict__)
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-### Configuration Management
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Parse configuration files with comments
llms.txt-docs/python-bindings.md-config_str = '''
--
llms.txt-docs/python-bindings.md-}
llms.txt-docs/python-bindings.md-'''
llms.txt-docs/python-bindings.md-
llms.txt:docs/python-bindings.md:config = vexy_json.loads(config_str)
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-This comprehensive Python API provides all the power of Vexy JSON with the familiar interface Python developers expect.
--
llms.txt-crates/core/src/streaming/simple_lexer.rs-//! Simple streaming lexer that works with the existing Token enum.
llms.txt-crates/core/src/streaming/simple_lexer.rs-//!
llms.txt-crates/core/src/streaming/simple_lexer.rs-//! This lexer processes input incrementally and emits tokens compatible
llms.txt:crates/core/src/streaming/simple_lexer.rs://! with the existing vexy_json token structure.
llms.txt-crates/core/src/streaming/simple_lexer.rs-
llms.txt-crates/core/src/streaming/simple_lexer.rs-use crate::ast::Token;
llms.txt-crates/core/src/streaming/simple_lexer.rs-use crate::error::{Error, Result, Span};
llms.txt-crates/core/src/streaming/simple_lexer.rs-
llms.txt:crates/core/src/streaming/simple_lexer.rs:/// A simple streaming lexer for vexy_json
llms.txt-crates/core/src/streaming/simple_lexer.rs-#[derive(Debug, Clone)]
llms.txt-crates/core/src/streaming/simple_lexer.rs-pub struct SimpleStreamingLexer {
llms.txt-crates/core/src/streaming/simple_lexer.rs-    /// Current position in the overall input stream
llms.txt---
llms.txt-docs/assets/js/tool.js-// this_file: docs/assets/js/tool.js
llms.txt:docs/assets/js/tool.js:// Main JavaScript for vexy_json web tool
llms.txt-docs/assets/js/tool.js-import init, {
llms.txt-docs/assets/js/tool.js-    parse_json,
llms.txt-docs/assets/js/tool.js-    parse_json_with_options,
--
llms.txt-docs/assets/js/tool.js-    get_parser_options,
llms.txt-docs/assets/js/tool.js-    stringify_value,
llms.txt-docs/assets/js/tool.js-    get_version_info
llms.txt:docs/assets/js/tool.js:} from '../../pkg/vexy_json_wasm.js';
llms.txt-docs/assets/js/tool.js-
llms.txt-docs/assets/js/tool.js-// Import enhanced components
llms.txt-docs/assets/js/tool.js-import { EXAMPLES, getExample } from './examples.js';
--
llms.txt-docs/assets/js/tool.js-                    respectDNT: true,
llms.txt-docs/assets/js/tool.js-                    anonymizeIPs: true,
llms.txt-docs/assets/js/tool.js-                    consentRequired: false, // Implicit consent for basic usage analytics
llms.txt:docs/assets/js/tool.js:                    trackingId: 'vexy_json-web-tool'
llms.txt-docs/assets/js/tool.js-                });
llms.txt-docs/assets/js/tool.js-            }
llms.txt-docs/assets/js/tool.js-        } catch (error) {
--
llms.txt-docs/assets/js/tool.js-
llms.txt-docs/assets/js/tool.js-            // Get version info and display it
llms.txt-docs/assets/js/tool.js-            const versionInfo = get_version_info();
llms.txt:docs/assets/js/tool.js:            console.log(`vexy_json ${versionInfo.version} loaded successfully`);
llms.txt-docs/assets/js/tool.js-            console.log(`Browser compatibility score: ${support.score}/100`);
llms.txt-docs/assets/js/tool.js-
llms.txt-docs/assets/js/tool.js-            // Hide loading, show interface
--
llms.txt-benches/parser_microbenchmarks.rs-// this_file: benches/parser_microbenchmarks.rs
llms.txt-benches/parser_microbenchmarks.rs-
llms.txt-benches/parser_microbenchmarks.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
llms.txt:benches/parser_microbenchmarks.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt:benches/parser_microbenchmarks.rs:use vexy_json_core::lexer::{FastLexer, JsonLexer, LexerConfig};
llms.txt-benches/parser_microbenchmarks.rs-
llms.txt-benches/parser_microbenchmarks.rs-fn bench_parse_small_object(c: &mut Criterion) {
llms.txt-benches/parser_microbenchmarks.rs-    let mut group = c.benchmark_group("parse small object");
llms.txt---
llms.txt-tests/lib_integration.rs-// this_file: tests/lib_integration.rs
llms.txt-tests/lib_integration.rs-
llms.txt:tests/lib_integration.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt:tests/lib_integration.rs:use vexy_json_core::lexer::{JsonLexer, Lexer};
llms.txt-tests/lib_integration.rs-
llms.txt-tests/lib_integration.rs-#[test]
llms.txt-tests/lib_integration.rs-fn basic_parsing() {
--
llms.txt-docs/debug-pages/deep-debug.html-      import init, {
llms.txt-docs/debug-pages/deep-debug.html-        parse_json,
llms.txt-docs/debug-pages/deep-debug.html-        parse_json_with_options,
llms.txt:docs/debug-pages/deep-debug.html:      } from '../pkg/vexy_json_wasm.js';
llms.txt-docs/debug-pages/deep-debug.html-
llms.txt-docs/debug-pages/deep-debug.html-      let log = '';
llms.txt-docs/debug-pages/deep-debug.html-      function appendLog(message) {
--
llms.txt-docs/test-wasm.html-  <head>
llms.txt-docs/test-wasm.html-    <meta charset="UTF-8" />
llms.txt-docs/test-wasm.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:docs/test-wasm.html:    <title>vexy_json WASM Test</title>
llms.txt-docs/test-wasm.html-    <style>
llms.txt-docs/test-wasm.html-      body {
llms.txt-docs/test-wasm.html-        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
--
llms.txt-docs/test-wasm.html-    </style>
llms.txt-docs/test-wasm.html-  </head>
llms.txt-docs/test-wasm.html-  <body>
llms.txt:docs/test-wasm.html:    <h1>vexy_json WASM Test Page</h1>
llms.txt-docs/test-wasm.html-    <div class="version" id="version">Loading WASM module...</div>
llms.txt-docs/test-wasm.html-
llms.txt-docs/test-wasm.html-    <div class="container">
--
llms.txt-docs/test-wasm.html-        get_version_info,
llms.txt-docs/test-wasm.html-        get_parser_options,
llms.txt-docs/test-wasm.html-        validate_json,
llms.txt:docs/test-wasm.html:      } from './pkg/vexy_json_wasm.js';
llms.txt-docs/test-wasm.html-
llms.txt-docs/test-wasm.html-      let wasmReady = false;
llms.txt-docs/test-wasm.html-
--
llms.txt-docs/test-wasm.html-          // Display version info
llms.txt-docs/test-wasm.html-          const versionInfo = JSON.parse(get_version_info());
llms.txt-docs/test-wasm.html-          document.getElementById('version').innerHTML = `
llms.txt:docs/test-wasm.html:                    <strong>vexy_json WASM</strong> v${versionInfo.version} - ${versionInfo.description}
llms.txt-docs/test-wasm.html-                `;
llms.txt-docs/test-wasm.html-          document.getElementById('version').className = 'version';
llms.txt-docs/test-wasm.html-
llms.txt---
llms.txt-bindings/python/examples/config_parser.py-#!/usr/bin/env python3
llms.txt:bindings/python/examples/config_parser.py:"""Example: Using vexy_json for configuration files"""
llms.txt-bindings/python/examples/config_parser.py-
llms.txt:bindings/python/examples/config_parser.py:import vexy_json
llms.txt-bindings/python/examples/config_parser.py-import sys
llms.txt-bindings/python/examples/config_parser.py-
llms.txt-bindings/python/examples/config_parser.py-# Example configuration with forgiving JSON features
--
llms.txt-bindings/python/examples/config_parser.py-    """Load configuration from file or use default template"""
llms.txt-bindings/python/examples/config_parser.py-    if filename:
llms.txt-bindings/python/examples/config_parser.py-        try:
llms.txt:bindings/python/examples/config_parser.py:            config = vexy_json.load(filename)
llms.txt-bindings/python/examples/config_parser.py-            print(f"Loaded configuration from: {filename}")
llms.txt-bindings/python/examples/config_parser.py-        except Exception as e:
llms.txt-bindings/python/examples/config_parser.py-            print(f"Error loading config file: {e}")
llms.txt-bindings/python/examples/config_parser.py-            sys.exit(1)
llms.txt-bindings/python/examples/config_parser.py-    else:
llms.txt-bindings/python/examples/config_parser.py-        print("Using default configuration template")
llms.txt:bindings/python/examples/config_parser.py:        config = vexy_json.parse(CONFIG_TEMPLATE)
llms.txt-bindings/python/examples/config_parser.py-
llms.txt-bindings/python/examples/config_parser.py-    return config
llms.txt-bindings/python/examples/config_parser.py-
--
llms.txt-bindings/python/examples/config_parser.py-
llms.txt-bindings/python/examples/config_parser.py-
llms.txt-bindings/python/examples/config_parser.py-def main():
llms.txt:bindings/python/examples/config_parser.py:    print("vexy_json Configuration Parser Example")
llms.txt-bindings/python/examples/config_parser.py-    print("=" * 50)
llms.txt-bindings/python/examples/config_parser.py-
llms.txt-bindings/python/examples/config_parser.py-    # Load configuration
--
llms.txt-bindings/python/examples/config_parser.py-    # Example: Save configuration
llms.txt-bindings/python/examples/config_parser.py-    if not config_file:
llms.txt-bindings/python/examples/config_parser.py-        output_file = "config_example.json"
llms.txt:bindings/python/examples/config_parser.py:        vexy_json.dump(config, output_file, indent=2)
llms.txt-bindings/python/examples/config_parser.py-        print(f"\nSaved example configuration to: {output_file}")
llms.txt-bindings/python/examples/config_parser.py-
llms.txt-bindings/python/examples/config_parser.py-
--
llms.txt-docs/release-notes.md-nav_order: 11
llms.txt-docs/release-notes.md----
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:# vexy_json v2.0.0 Release Notes
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-**🚀 Major Release - January 2025**
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:We're thrilled to announce **vexy_json v2.0.0**, a groundbreaking release that transforms vexy_json from a capable JSON parser into a high-performance, enterprise-ready parsing platform. This release introduces streaming APIs, parallel processing, a plugin architecture, and significant performance improvements.
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-## 🌟 Highlights
llms.txt-docs/release-notes.md-
--
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md----
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:# vexy_json v1.0.0 Release Notes
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-**🚀 Stable Release - January 7, 2025**
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:We're excited to announce the stable release of **vexy_json v1.0.0**, a production-ready forgiving JSON parser for Rust. This is a complete port of the JavaScript library [jsonic](https://github.com/jsonicjs/jsonic), bringing powerful and flexible JSON parsing capabilities to the Rust ecosystem.
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:## 🎉 What is vexy_json?
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:vexy_json is a forgiving JSON parser that extends standard JSON with developer-friendly features while maintaining full compatibility with RFC 8259. It allows you to parse relaxed JSON syntax commonly found in configuration files, making JSON more human-readable and maintainable.
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-## ✨ Key Features
llms.txt-docs/release-notes.md-
--
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```toml
llms.txt-docs/release-notes.md-[dependencies]
llms.txt:docs/release-notes.md:vexy_json = "1.0.0"
llms.txt-docs/release-notes.md-```
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-### CLI Tool
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```bash
llms.txt:docs/release-notes.md:cargo install vexy_json
llms.txt-docs/release-notes.md-```
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-## 🎯 Usage Examples
--
llms.txt-docs/release-notes.md-### Basic Library Usage
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```rust
llms.txt:docs/release-notes.md:use vexy_json::parse;
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-// Standard JSON
llms.txt-docs/release-notes.md-let data = parse(r#"{"name": "Alice", "age": 30}"#)?;
--
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```bash
llms.txt-docs/release-notes.md-# Process configuration files
llms.txt:docs/release-notes.md:echo "{debug: true, port: 3000}" | vexy_json
llms.txt-docs/release-notes.md-# Output: {"debug":true,"port":3000}
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-# Handle files with comments
llms.txt:docs/release-notes.md:cat config.jsonc | vexy_json > config.json
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-# Pipeline integration
llms.txt:docs/release-notes.md:curl api.example.com/config | vexy_json | jq '.database'
llms.txt-docs/release-notes.md-```
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-### Serde Integration
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```rust
llms.txt:docs/release-notes.md:use vexy_json::from_str;
llms.txt-docs/release-notes.md-use serde::Deserialize;
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-#[derive(Deserialize)]
--
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-## 🔄 jsonic Compatibility
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:vexy_json achieves **complete compatibility** with the jsonic JavaScript library:
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-- All 17 jsonic compatibility tests pass
llms.txt-docs/release-notes.md-- Identical parsing behavior for all supported features
--
llms.txt-docs/release-notes.md-Customize parsing behavior with `ParserOptions`:
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```rust
llms.txt:docs/release-notes.md:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-let mut options = ParserOptions::default();
llms.txt-docs/release-notes.md-options.allow_comments = false;           // Disable comments
--
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-## 🏗️ Architecture
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:vexy_json is built with a clean, modular architecture:
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-- **Lexer**: High-performance tokenization with zero-copy strings
llms.txt-docs/release-notes.md-- **Parser**: Recursive descent parser with configurable grammar
--
llms.txt-docs/release-notes.md-Process large JSON files incrementally without loading them entirely into memory:
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```rust
llms.txt:docs/release-notes.md:use vexy_json::{StreamingParser, StreamingEvent};
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-let mut parser = StreamingParser::new();
llms.txt-docs/release-notes.md-parser.feed(chunk1)?;
--
llms.txt-docs/release-notes.md-Automatically process large files using multiple CPU cores:
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```rust
llms.txt:docs/release-notes.md:use vexy_json::parse_parallel;
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-let json_files = vec![file1, file2, file3, file4];
llms.txt-docs/release-notes.md-let results = parse_parallel(json_files);
llms.txt-docs/release-notes.md-```
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-#### Plugin System
llms.txt:docs/release-notes.md:Extend vexy_json with custom functionality:
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```rust
llms.txt:docs/release-notes.md:use vexy_json::{Plugin, parse_with_plugins};
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-struct MyPlugin;
llms.txt-docs/release-notes.md-impl Plugin for MyPlugin {
--
llms.txt-docs/release-notes.md-Native support for newline-delimited JSON:
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```rust
llms.txt:docs/release-notes.md:use vexy_json::NdJsonParser;
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-let mut parser = NdJsonParser::new();
llms.txt-docs/release-notes.md-let values = parser.feed(ndjson_content)?;
--
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-#### Watch Mode
llms.txt-docs/release-notes.md-```bash
llms.txt:docs/release-notes.md:vexy_json --watch config.json --output formatted.json
llms.txt-docs/release-notes.md-```
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-#### Batch Processing
llms.txt-docs/release-notes.md-```bash
llms.txt:docs/release-notes.md:vexy_json --batch ./data/ --output-dir ./processed/ --parallel
llms.txt-docs/release-notes.md-```
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-#### Advanced Formatting
llms.txt-docs/release-notes.md-```bash
llms.txt:docs/release-notes.md:vexy_json input.json --pretty --sort-keys --indent 4
llms.txt-docs/release-notes.md-```
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-### 🔧 API Improvements
--
llms.txt-docs/release-notes.md-**Ready to upgrade?** 
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```bash
llms.txt:docs/release-notes.md:cargo add vexy_json@2.0.0
llms.txt-docs/release-notes.md-```
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-For migration guidance, see our [Migration Guide](migration-guide/).
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:**Questions or feedback?** Open an issue on [GitHub](https://github.com/twardoch/vexy_json/issues).
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-**Happy parsing! 🦀**
llms.txt---
llms.txt-docs/developer-guide.md-nav_order: 2
llms.txt-docs/developer-guide.md----
llms.txt-docs/developer-guide.md-
llms.txt:docs/developer-guide.md:# Developer Guide for Extending the vexy_json Web Tool
llms.txt-docs/developer-guide.md-
llms.txt:docs/developer-guide.md:This guide is for developers who want to contribute to or extend the `vexy_json` web tool. It covers the project structure, build process, and key development considerations.
llms.txt-docs/developer-guide.md-
llms.txt-docs/developer-guide.md-## Project Structure
llms.txt-docs/developer-guide.md-
llms.txt:docs/developer-guide.md:The `vexy_json` project uses a multi-crate Cargo workspace structure with Jekyll integration for web tools.
llms.txt-docs/developer-guide.md-
llms.txt-docs/developer-guide.md-### Workspace Structure
llms.txt-docs/developer-guide.md-
--
llms.txt-docs/developer-guide.md-    *   `_config.yml`: Jekyll configuration file.
llms.txt-docs/developer-guide.md-    *   `tool.html`: Vexy JSON interactive tool (WebAssembly-powered)
llms.txt-docs/developer-guide.md-    *   `jsonic.html`: Jsonic interactive tool (CDN-powered)
llms.txt:docs/developer-guide.md:    *   `vexy_json-tool.md`: Jekyll wrapper for Vexy JSON tool
llms.txt-docs/developer-guide.md-    *   `jsonic-tool.md`: Jekyll wrapper for Jsonic tool
llms.txt-docs/developer-guide.md-    *   `tool.md`: Tools overview page
llms.txt-docs/developer-guide.md-    *   `assets/`: Static assets for the web tools.
llms.txt-docs/developer-guide.md-        *   `css/`: CSS files, including `tool.css` and `enhanced-features.css`.
llms.txt-docs/developer-guide.md-        *   `js/`: JavaScript files for both tools
llms.txt:docs/developer-guide.md:    *   `pkg/`: Contains the compiled WebAssembly module (`vexy_json_bg.wasm`, `vexy_json.js`, `vexy_json.d.ts`).
llms.txt-docs/developer-guide.md-
llms.txt-docs/developer-guide.md-## Development Environment Setup
llms.txt-docs/developer-guide.md-
--
llms.txt-docs/developer-guide.md-
llms.txt-docs/developer-guide.md-This is the main JavaScript file for the web tool. It handles UI interactions, calls the WASM functions, and updates the display.
llms.txt-docs/developer-guide.md-
llms.txt:docs/developer-guide.md:*   **WASM Module Import**: The `pkg/vexy_json_wasm.js` module (generated by `wasm-pack`) is imported here.
llms.txt-docs/developer-guide.md-*   **Asynchronous Operations**: WASM module loading and initialization are asynchronous. Ensure you `await` the `init()` function.
llms.txt-docs/developer-guide.md-*   **UI Updates**: Use standard DOM manipulation to update the input/output areas, error messages, and other UI elements.
llms.txt-docs/developer-guide.md-*   **Event Listeners**: Attach event listeners to buttons, toggles, and text areas to respond to user actions.
--
llms.txt-docs/development/RELEASE_CANDIDATE.md-
llms.txt-docs/development/RELEASE_CANDIDATE.md-### Core Parsing API
llms.txt-docs/development/RELEASE_CANDIDATE.md-```rust
llms.txt:docs/development/RELEASE_CANDIDATE.md:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-docs/development/RELEASE_CANDIDATE.md-
llms.txt-docs/development/RELEASE_CANDIDATE.md-// Simple parsing
llms.txt-docs/development/RELEASE_CANDIDATE.md-let value = parse(r#"{"key": "value"}"#)?;
--
llms.txt-docs/development/RELEASE_CANDIDATE.md-
llms.txt-docs/development/RELEASE_CANDIDATE.md-### Streaming API
llms.txt-docs/development/RELEASE_CANDIDATE.md-```rust
llms.txt:docs/development/RELEASE_CANDIDATE.md:use vexy_json::streaming::StreamingParser;
llms.txt-docs/development/RELEASE_CANDIDATE.md-
llms.txt-docs/development/RELEASE_CANDIDATE.md-let mut parser = StreamingParser::new();
llms.txt-docs/development/RELEASE_CANDIDATE.md-for chunk in file_chunks {
--
llms.txt-docs/development/RELEASE_CANDIDATE.md-
llms.txt-docs/development/RELEASE_CANDIDATE.md-### Parallel Processing API
llms.txt-docs/development/RELEASE_CANDIDATE.md-```rust
llms.txt:docs/development/RELEASE_CANDIDATE.md:use vexy_json::parallel_chunked::{parse_parallel_chunked, ChunkedConfig};
llms.txt-docs/development/RELEASE_CANDIDATE.md-
llms.txt-docs/development/RELEASE_CANDIDATE.md-let config = ChunkedConfig {
llms.txt-docs/development/RELEASE_CANDIDATE.md-    chunk_size: 1024 * 1024, // 1MB chunks
--
llms.txt-docs/development/RELEASE_CANDIDATE.md-
llms.txt-docs/development/RELEASE_CANDIDATE.md-### Plugin System API
llms.txt-docs/development/RELEASE_CANDIDATE.md-```rust
llms.txt:docs/development/RELEASE_CANDIDATE.md:use vexy_json::plugin::{ParserPlugin, PluginRegistry};
llms.txt-docs/development/RELEASE_CANDIDATE.md-
llms.txt-docs/development/RELEASE_CANDIDATE.md-struct CustomPlugin;
llms.txt-docs/development/RELEASE_CANDIDATE.md-impl ParserPlugin for CustomPlugin {
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-# API Reference v2.0.0
llms.txt-docs/api.md-
llms.txt:docs/api.md:This section provides detailed documentation for the `vexy_json` Rust library v2.0.0. The API is designed to be intuitive and idiomatic for Rust developers, with powerful new features for streaming, parallel processing, and extensibility.
llms.txt-docs/api.md-
llms.txt:docs/api.md:## `vexy_json::parse`
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub fn parse(input: &str) -> Result<Value, Error>
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt:docs/api.md:Parses a JSON-like string into a `vexy_json::Value` enum using default parser options. This is the primary entry point for using the library.
llms.txt-docs/api.md-
llms.txt-docs/api.md-- `input`: The string slice containing the JSON-like data to parse.
llms.txt-docs/api.md-- Returns:
llms.txt-docs/api.md-    - `Ok(Value)`: If parsing is successful, returns a `Value` enum representing the parsed data.
llms.txt-docs/api.md-    - `Err(Error)`: If an error occurs during parsing, returns an `Error` detailing the issue.
llms.txt-docs/api.md-
llms.txt:docs/api.md:## `vexy_json::parse_with_options`
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub fn parse_with_options(input: &str, options: ParserOptions) -> Result<Value, Error>
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt:docs/api.md:Parses a JSON-like string into a `vexy_json::Value` enum with custom parser options. This allows fine-grained control over which forgiving features are enabled.
llms.txt-docs/api.md-
llms.txt-docs/api.md-- `input`: The string slice containing the JSON-like data to parse.
llms.txt-docs/api.md-- `options`: A `ParserOptions` struct configuring the parser's behavior.
--
llms.txt-docs/api.md-    - `Ok(Value)`: If parsing is successful, returns a `Value` enum representing the parsed data.
llms.txt-docs/api.md-    - `Err(Error)`: If an error occurs during parsing, returns an `Error` detailing the issue.
llms.txt-docs/api.md-
llms.txt:docs/api.md:## `vexy_json::ParserOptions`
llms.txt-docs/api.md-
llms.txt:docs/api.md:This struct defines the configurable options for the `vexy_json` parser.
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub struct ParserOptions {
--
llms.txt-docs/api.md-`ParserOptions` implements `Default`, so you can create a default instance and then modify specific fields:
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt:docs/api.md:use vexy_json::ParserOptions;
llms.txt-docs/api.md-
llms.txt-docs/api.md-let mut options = ParserOptions::default();
llms.txt-docs/api.md-options.allow_comments = false; // Disable comments
llms.txt-docs/api.md-options.max_depth = 64; // Set a custom max depth
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt:docs/api.md:## `vexy_json::Value` Enum
llms.txt-docs/api.md-
llms.txt:docs/api.md:This enum represents the different types of JSON values that `vexy_json` can parse.
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub enum Value {
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-- `Null`: Represents a JSON `null` value.
llms.txt-docs/api.md-- `Bool(bool)`: Represents a JSON boolean (`true` or `false`).
llms.txt:docs/api.md:- `Number(Number)`: Represents a JSON numeric value. See `vexy_json::Number` for details.
llms.txt-docs/api.md-- `String(String)`: Represents a JSON string.
llms.txt-docs/api.md-- `Array(Vec<Value>)`: Represents a JSON array, a vector of `Value` enums.
llms.txt-docs/api.md-- `Object(HashMap<String, Value>)`: Represents a JSON object, a hash map of string keys to `Value` enums.
--
llms.txt-docs/api.md-- `as_array() -> Option<&Vec<Value>>`
llms.txt-docs/api.md-- `as_object() -> Option<&HashMap<String, Value>>`
llms.txt-docs/api.md-
llms.txt:docs/api.md:## `vexy_json::Number` Enum
llms.txt-docs/api.md-
llms.txt-docs/api.md-This enum represents a JSON number, which can be either an integer or a floating-point number.
llms.txt-docs/api.md-
--
llms.txt-docs/api.md-- `Integer(i64)`: An integer value that fits in an `i64`.
llms.txt-docs/api.md-- `Float(f64)`: A floating-point value.
llms.txt-docs/api.md-
llms.txt:docs/api.md:## `vexy_json::Error` Enum
llms.txt-docs/api.md-
llms.txt-docs/api.md-This enum defines the types of errors that can occur during parsing.
llms.txt-docs/api.md-
--
llms.txt-docs/api.md-- `InvalidEscape(usize)`: An invalid escape sequence was found in a string at a given position.
llms.txt-docs/api.md-- `InvalidUnicode(usize)`: An invalid Unicode escape sequence was found at a given position.
llms.txt-docs/api.md-- `UnterminatedString(usize)`: A string literal was not properly terminated, starting at a given position.
llms.txt:docs/api.md:- `TrailingComma(usize)`: A trailing comma was found where not allowed (though typically allowed by `vexy_json`'s forgiving nature, this error might occur in strict modes or specific contexts) at a given position.
llms.txt-docs/api.md-- `Expected { expected: String, found: String, position: usize }`: The parser expected a specific token or value but found something else at a given position.
llms.txt-docs/api.md-- `DepthLimitExceeded(usize)`: The maximum recursion depth was exceeded while parsing nested structures at a given position.
llms.txt-docs/api.md-- `Custom(String)`: A custom error with a descriptive message.
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-## Serde Integration
llms.txt-docs/api.md-
llms.txt:docs/api.md:`vexy_json` provides optional integration with the `serde` serialization framework. When the `serde` feature is enabled in your `Cargo.toml`, `vexy_json::Value` and `vexy_json::Number` implement the `Serialize` and `Deserialize` traits. This allows easy conversion between `vexy_json::Value` and other data formats supported by Serde (e.g., `serde_json::Value`).
llms.txt-docs/api.md-
llms.txt:docs/api.md:To enable this feature, add `serde` to your `vexy_json` dependency in `Cargo.toml`:
llms.txt-docs/api.md-
llms.txt-docs/api.md-```toml
llms.txt-docs/api.md-[dependencies]
llms.txt:docs/api.md:vexy_json = { version = "2.0.0", features = ["serde"] }
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt-docs/api.md-**Example:**
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt:docs/api.md:use vexy_json::{parse, Value};
llms.txt-docs/api.md-use serde_json; // Requires `serde_json` crate
llms.txt-docs/api.md-
llms.txt-docs/api.md-fn main() {
llms.txt-docs/api.md-    let json_str = r#"{ "name": "Alice", "age": 30 }"#;
llms.txt:docs/api.md:    let vexy_json_value: Value = parse(json_str).unwrap();
llms.txt-docs/api.md-
llms.txt:docs/api.md:    // Convert vexy_json::Value to serde_json::Value
llms.txt:docs/api.md:    let serde_value: serde_json::Value = serde_json::to_value(vexy_json_value).unwrap();
llms.txt-docs/api.md-    println!("Converted to serde_json::Value: {}", serde_value);
llms.txt-docs/api.md-
llms.txt:docs/api.md:    // Convert serde_json::Value back to vexy_json::Value
llms.txt:docs/api.md:    let new_vexy_json_value: Value = serde_json::from_value(serde_value).unwrap();
llms.txt:docs/api.md:    println!("Converted back to vexy_json::Value: {:?}", new_vexy_json_value);
llms.txt-docs/api.md-}
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt-docs/api.md-## WebAssembly (WASM) Bindings
llms.txt-docs/api.md-
llms.txt:docs/api.md:`vexy_json` offers WebAssembly bindings, allowing it to be used directly in JavaScript environments (e.g., web browsers, Node.js). This is enabled via the `wasm` feature.
llms.txt-docs/api.md-
llms.txt:docs/api.md:To enable this feature, add `wasm` to your `vexy_json` dependency in `Cargo.toml`:
llms.txt-docs/api.md-
llms.txt-docs/api.md-```toml
llms.txt-docs/api.md-[dependencies]
llms.txt:docs/api.md:vexy_json = { version = "2.0.0", features = ["wasm"] }
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt-docs/api.md-For detailed documentation on the WebAssembly API, including JavaScript examples, please refer to the [WASM API Reference](wasm/).
llms.txt-docs/api.md-
llms.txt-docs/api.md-## Streaming API (New in v2.0.0)
llms.txt-docs/api.md-
llms.txt:docs/api.md:`vexy_json` v2.0.0 introduces a powerful streaming parser for processing large JSON files incrementally.
llms.txt-docs/api.md-
llms.txt:docs/api.md:### `vexy_json::StreamingParser`
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub struct StreamingParser { /* ... */ }
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-Example usage:
llms.txt-docs/api.md-```rust
llms.txt:docs/api.md:use vexy_json::{StreamingParser, StreamingEvent};
llms.txt-docs/api.md-
llms.txt-docs/api.md-let mut parser = StreamingParser::new();
llms.txt-docs/api.md-parser.feed(r#"{"key": "value"}"#)?;
--
llms.txt-docs/api.md-}
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt:docs/api.md:### `vexy_json::StreamingEvent`
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub enum StreamingEvent {
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-## Parallel Processing (New in v2.0.0)
llms.txt-docs/api.md-
llms.txt:docs/api.md:`vexy_json` v2.0.0 includes parallel processing capabilities for batch operations using the `rayon` crate.
llms.txt-docs/api.md-
llms.txt:docs/api.md:### `vexy_json::parse_parallel`
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub fn parse_parallel<I>(inputs: I) -> Vec<Result<Value, Error>>
--
llms.txt-docs/api.md-Process multiple JSON strings in parallel:
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt:docs/api.md:use vexy_json::parse_parallel;
llms.txt-docs/api.md-
llms.txt-docs/api.md-let json_strings = vec![
llms.txt-docs/api.md-    r#"{"id": 1, "name": "Alice"}"#,
--
llms.txt-docs/api.md-}
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt:docs/api.md:### `vexy_json::ParallelOptions`
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub struct ParallelOptions {
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-## Plugin System (New in v2.0.0)
llms.txt-docs/api.md-
llms.txt:docs/api.md:`vexy_json` v2.0.0 introduces a plugin architecture for extending parsing capabilities.
llms.txt-docs/api.md-
llms.txt:docs/api.md:### `vexy_json::Plugin` Trait
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub trait Plugin: Send + Sync {
--
llms.txt-docs/api.md-Example plugin implementation:
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt:docs/api.md:use vexy_json::{Plugin, Value, Error};
llms.txt-docs/api.md-
llms.txt-docs/api.md-struct DateNormalizerPlugin;
llms.txt-docs/api.md-
--
llms.txt-docs/api.md-}
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt:docs/api.md:### `vexy_json::parse_with_plugins`
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub fn parse_with_plugins(
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-Usage example:
llms.txt-docs/api.md-```rust
llms.txt:docs/api.md:use vexy_json::{parse_with_plugins, ParserOptions};
llms.txt-docs/api.md-
llms.txt-docs/api.md-let plugins: Vec<Box<dyn Plugin>> = vec![
llms.txt-docs/api.md-    Box::new(DateNormalizerPlugin),
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-## NDJSON Support (New in v2.0.0)
llms.txt-docs/api.md-
llms.txt:docs/api.md:### `vexy_json::NdJsonParser`
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub struct NdJsonParser { /* ... */ }
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-Example:
llms.txt-docs/api.md-```rust
llms.txt:docs/api.md:use vexy_json::NdJsonParser;
llms.txt-docs/api.md-
llms.txt-docs/api.md-let mut parser = NdJsonParser::new();
llms.txt-docs/api.md-let input = r#"{"id": 1}
llms.txt---
llms.txt-bindings/python/examples/basic_usage.py-#!/usr/bin/env python3
llms.txt:bindings/python/examples/basic_usage.py:"""Basic usage examples for vexy_json"""
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt:bindings/python/examples/basic_usage.py:import vexy_json
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-def main():
llms.txt:bindings/python/examples/basic_usage.py:    print("vexy_json - Forgiving JSON Parser Examples")
llms.txt-bindings/python/examples/basic_usage.py-    print("=" * 50)
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-    # Example 1: Basic parsing
llms.txt-bindings/python/examples/basic_usage.py-    print("\n1. Basic JSON parsing:")
llms.txt-bindings/python/examples/basic_usage.py-    json_str = '{"name": "Alice", "age": 30}'
llms.txt:bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_str)
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Input:  {json_str}")
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
llms.txt-bindings/python/examples/basic_usage.py-
--
llms.txt-bindings/python/examples/basic_usage.py-        "city": "New York"
llms.txt-bindings/python/examples/basic_usage.py-    }
llms.txt-bindings/python/examples/basic_usage.py-    """
llms.txt:bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_with_comments)
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-    # Example 3: Trailing commas
llms.txt-bindings/python/examples/basic_usage.py-    print("\n3. JSON with trailing commas:")
llms.txt-bindings/python/examples/basic_usage.py-    json_trailing = '{"items": [1, 2, 3,], "total": 3,}'
llms.txt:bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_trailing)
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Input:  {json_trailing}")
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-    # Example 4: Unquoted keys
llms.txt-bindings/python/examples/basic_usage.py-    print("\n4. JSON with unquoted keys:")
llms.txt-bindings/python/examples/basic_usage.py-    json_unquoted = '{name: "Charlie", age: 35, active: true}'
llms.txt:bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_unquoted)
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Input:  {json_unquoted}")
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-    # Example 5: Single quotes
llms.txt-bindings/python/examples/basic_usage.py-    print("\n5. JSON with single quotes:")
llms.txt-bindings/python/examples/basic_usage.py-    json_single = "{'name': 'David', 'language': 'Python'}"
llms.txt:bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_single)
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Input:  {json_single}")
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-    # Example 6: Implicit object
llms.txt-bindings/python/examples/basic_usage.py-    print("\n6. Implicit top-level object:")
llms.txt-bindings/python/examples/basic_usage.py-    json_implicit = 'name: "Eve", role: "developer", experience: 5'
llms.txt:bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_implicit)
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Input:  {json_implicit}")
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
llms.txt-bindings/python/examples/basic_usage.py-
--
llms.txt-bindings/python/examples/basic_usage.py-        }
llms.txt-bindings/python/examples/basic_usage.py-    }
llms.txt-bindings/python/examples/basic_usage.py-    """
llms.txt:bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_mixed)
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-    # Example 8: Using Options
llms.txt-bindings/python/examples/basic_usage.py-    print("\n8. Using custom options (strict mode):")
llms.txt:bindings/python/examples/basic_usage.py:    strict_opts = vexy_json.Options.strict()
llms.txt-bindings/python/examples/basic_usage.py-    try:
llms.txt-bindings/python/examples/basic_usage.py-        # This will fail with strict options
llms.txt:bindings/python/examples/basic_usage.py:        vexy_json.parse_with_options("{unquoted: true}", strict_opts)
llms.txt-bindings/python/examples/basic_usage.py-    except ValueError as e:
llms.txt-bindings/python/examples/basic_usage.py-        print(f"Expected error with strict mode: {e}")
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-    # Example 9: Serialization
llms.txt-bindings/python/examples/basic_usage.py-    print("\n9. Serializing Python objects:")
llms.txt-bindings/python/examples/basic_usage.py-    data = {"users": ["Alice", "Bob"], "count": 2, "active": True}
llms.txt:bindings/python/examples/basic_usage.py:    json_output = vexy_json.dumps(data, indent=2)
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Serialized:\n{json_output}")
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-    # Example 10: Parser instance
llms.txt-bindings/python/examples/basic_usage.py-    print("\n10. Using Parser instance:")
llms.txt:bindings/python/examples/basic_usage.py:    parser = vexy_json.Parser()
llms.txt-bindings/python/examples/basic_usage.py-    results = []
llms.txt-bindings/python/examples/basic_usage.py-    for json_str in ['{"a": 1}', "[1, 2, 3]", '"hello"']:
llms.txt-bindings/python/examples/basic_usage.py-        results.append(parser.parse(json_str))
llms.txt---
llms.txt:docs/assets/js/analytics.js:// Analytics placeholder for vexy_json web tool
llms.txt-docs/assets/js/analytics.js-// This file provides a basic analytics interface to prevent 404 errors
llms.txt-docs/assets/js/analytics.js-// and allows for future analytics implementation
llms.txt-docs/assets/js/analytics.js-
--
llms.txt-benches/stack_overflow_test.rs-//! should outperform recursive parsers by avoiding stack overflow issues.
llms.txt-benches/stack_overflow_test.rs-
llms.txt-benches/stack_overflow_test.rs-use criterion::{black_box, criterion_group, criterion_main, Criterion, BenchmarkId};
llms.txt:benches/stack_overflow_test.rs:use vexy_json_core::{
llms.txt-benches/stack_overflow_test.rs-    parse_recursive,
llms.txt-benches/stack_overflow_test.rs-    parse_iterative,
llms.txt-benches/stack_overflow_test.rs-    ParserOptions,
--
llms.txt-crates/core/src/parser/iterative.rs-/// # Examples
llms.txt-crates/core/src/parser/iterative.rs-///
llms.txt-crates/core/src/parser/iterative.rs-/// ```
llms.txt:crates/core/src/parser/iterative.rs:/// use vexy_json_core::parser::iterative::parse_iterative;
llms.txt:crates/core/src/parser/iterative.rs:/// use vexy_json_core::parser::ParserOptions;
llms.txt-crates/core/src/parser/iterative.rs-///
llms.txt-crates/core/src/parser/iterative.rs-/// let json = r#"{"key": "value", "numbers": [1, 2, 3]}"#;
llms.txt-crates/core/src/parser/iterative.rs-/// let options = ParserOptions::default();
llms.txt---
llms.txt-tests/forgiving_features.rs-use rustc_hash::FxHashMap;
llms.txt:tests/forgiving_features.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
llms.txt-tests/forgiving_features.rs-
llms.txt-tests/forgiving_features.rs-#[test]
llms.txt-tests/forgiving_features.rs-fn test_single_quoted_strings() {
--
llms.txt-tests/forgiving_features.rs-    let result = parse("{name: 'John', age: 30}").unwrap();
llms.txt-tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
llms.txt-tests/forgiving_features.rs-    expected.insert("name".to_string(), Value::String("John".to_string()));
llms.txt:tests/forgiving_features.rs:    expected.insert("age".to_string(), Value::Number(vexy_json::Number::Integer(30)));
llms.txt-tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
llms.txt-tests/forgiving_features.rs-}
llms.txt-tests/forgiving_features.rs-
--
llms.txt-tests/forgiving_features.rs-    assert_eq!(
llms.txt-tests/forgiving_features.rs-        result,
llms.txt-tests/forgiving_features.rs-        Value::Array(vec![
llms.txt:tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(1)),
llms.txt:tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(2)),
llms.txt:tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(3)),
llms.txt-tests/forgiving_features.rs-        ])
llms.txt-tests/forgiving_features.rs-    );
llms.txt-tests/forgiving_features.rs-
llms.txt-tests/forgiving_features.rs-    let result = parse("{a: 1, b: 2,}").unwrap();
llms.txt-tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
llms.txt:tests/forgiving_features.rs:    expected.insert("a".to_string(), Value::Number(vexy_json::Number::Integer(1)));
llms.txt:tests/forgiving_features.rs:    expected.insert("b".to_string(), Value::Number(vexy_json::Number::Integer(2)));
llms.txt-tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
llms.txt-tests/forgiving_features.rs-}
llms.txt-tests/forgiving_features.rs-
--
llms.txt-tests/forgiving_features.rs-fn test_single_line_comments() {
llms.txt-tests/forgiving_features.rs-    // TODO: Fix parsing when comment is at the beginning of input
llms.txt-tests/forgiving_features.rs-    // let result = parse("// This is a comment\n42").unwrap();
llms.txt:tests/forgiving_features.rs:    // assert_eq!(result, Value::Number(vexy_json::Number::Integer(42)));
llms.txt-tests/forgiving_features.rs-
llms.txt-tests/forgiving_features.rs-    // let result = parse("# This is also a comment\n42").unwrap();
llms.txt:tests/forgiving_features.rs:    // assert_eq!(result, Value::Number(vexy_json::Number::Integer(42)));
llms.txt-tests/forgiving_features.rs-
llms.txt-tests/forgiving_features.rs-    let result = parse("{a: 1, // comment\nb: 2}").unwrap();
llms.txt-tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
llms.txt:tests/forgiving_features.rs:    expected.insert("a".to_string(), Value::Number(vexy_json::Number::Integer(1)));
llms.txt:tests/forgiving_features.rs:    expected.insert("b".to_string(), Value::Number(vexy_json::Number::Integer(2)));
llms.txt-tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
llms.txt-tests/forgiving_features.rs-}
llms.txt-tests/forgiving_features.rs-
--
llms.txt-tests/forgiving_features.rs-fn test_multi_line_comments() {
llms.txt-tests/forgiving_features.rs-    // TODO: Fix parsing when comment is at the beginning of input
llms.txt-tests/forgiving_features.rs-    // let result = parse("/* This is a \nmulti-line comment */\n42").unwrap();
llms.txt:tests/forgiving_features.rs:    // assert_eq!(result, Value::Number(vexy_json::Number::Integer(42)));
llms.txt-tests/forgiving_features.rs-
llms.txt-tests/forgiving_features.rs-    let result = parse("{a: 1, /* comment */ b: 2}").unwrap();
llms.txt-tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
llms.txt:tests/forgiving_features.rs:    expected.insert("a".to_string(), Value::Number(vexy_json::Number::Integer(1)));
llms.txt:tests/forgiving_features.rs:    expected.insert("b".to_string(), Value::Number(vexy_json::Number::Integer(2)));
llms.txt-tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
llms.txt-tests/forgiving_features.rs-}
llms.txt-tests/forgiving_features.rs-
--
llms.txt-tests/forgiving_features.rs-fn test_implicit_object() {
llms.txt-tests/forgiving_features.rs-    let result = parse("a: 1").unwrap();
llms.txt-tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
llms.txt:tests/forgiving_features.rs:    expected.insert("a".to_string(), Value::Number(vexy_json::Number::Integer(1)));
llms.txt-tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
llms.txt-tests/forgiving_features.rs-
llms.txt-tests/forgiving_features.rs-    let result = parse("name: 'John', age: 30").unwrap();
llms.txt-tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
llms.txt-tests/forgiving_features.rs-    expected.insert("name".to_string(), Value::String("John".to_string()));
llms.txt:tests/forgiving_features.rs:    expected.insert("age".to_string(), Value::Number(vexy_json::Number::Integer(30)));
llms.txt-tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
llms.txt-tests/forgiving_features.rs-}
llms.txt-tests/forgiving_features.rs-
--
llms.txt-tests/forgiving_features.rs-    assert_eq!(
llms.txt-tests/forgiving_features.rs-        result,
llms.txt-tests/forgiving_features.rs-        Value::Array(vec![
llms.txt:tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(1)),
llms.txt:tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(2)),
llms.txt:tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(3)),
llms.txt-tests/forgiving_features.rs-        ])
llms.txt-tests/forgiving_features.rs-    );
llms.txt-tests/forgiving_features.rs-
--
llms.txt-tests/forgiving_features.rs-    let result = parse(input).unwrap();
llms.txt-tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
llms.txt-tests/forgiving_features.rs-    expected.insert("name".to_string(), Value::String("John".to_string()));
llms.txt:tests/forgiving_features.rs:    expected.insert("age".to_string(), Value::Number(vexy_json::Number::Integer(30)));
llms.txt-tests/forgiving_features.rs-    expected.insert(
llms.txt-tests/forgiving_features.rs-        "hobbies".to_string(),
llms.txt-tests/forgiving_features.rs-        Value::Array(vec![
--
llms.txt-docs/development/RELEASE_PROCESS.md-
llms.txt-docs/development/RELEASE_PROCESS.md-### Binaries
llms.txt-docs/development/RELEASE_PROCESS.md-- **macOS**: Universal binary (x86_64 + ARM64)
llms.txt:docs/development/RELEASE_PROCESS.md:  - `vexy_json-2.0.0-macos.zip` - Standalone binary
llms.txt:docs/development/RELEASE_PROCESS.md:  - `vexy_json-2.0.0-macos.dmg` - Installer with PKG
llms.txt-docs/development/RELEASE_PROCESS.md-- **Linux**: 
llms.txt:docs/development/RELEASE_PROCESS.md:  - `vexy_json-2.0.0-linux-x86_64.tar.gz` - x86_64 binary
llms.txt:docs/development/RELEASE_PROCESS.md:  - `vexy_json-2.0.0-linux-aarch64.tar.gz` - ARM64 binary
llms.txt-docs/development/RELEASE_PROCESS.md-- **Windows**:
llms.txt:docs/development/RELEASE_PROCESS.md:  - `vexy_json-2.0.0-windows-x86_64.zip` - x86_64 binary
llms.txt-docs/development/RELEASE_PROCESS.md-
llms.txt-docs/development/RELEASE_PROCESS.md-### WASM Package
llms.txt:docs/development/RELEASE_PROCESS.md:- `vexy_json-wasm-2.0.0.tar.gz` - WebAssembly module with TypeScript bindings
llms.txt-docs/development/RELEASE_PROCESS.md-
llms.txt-docs/development/RELEASE_PROCESS.md-### Source
llms.txt-docs/development/RELEASE_PROCESS.md-- Source code archives (automatically created by GitHub)
--
llms.txt-docs/development/RELEASE_PROCESS.md-
llms.txt-docs/development/RELEASE_PROCESS.md-The macOS installer includes:
llms.txt-docs/development/RELEASE_PROCESS.md-- Universal binary supporting Intel and Apple Silicon
llms.txt:docs/development/RELEASE_PROCESS.md:- PKG installer that places `vexy_json` in `/usr/local/bin`
llms.txt-docs/development/RELEASE_PROCESS.md-- Code-signed DMG (requires Apple Developer certificate)
llms.txt-docs/development/RELEASE_PROCESS.md-- Automatic PATH configuration
llms.txt-docs/development/RELEASE_PROCESS.md-
--
llms.txt-docs/development/RELEASE_PROCESS.md-1. **Verify Installation Methods**:
llms.txt-docs/development/RELEASE_PROCESS.md-   ```bash
llms.txt-docs/development/RELEASE_PROCESS.md-   # Homebrew (macOS)
llms.txt:docs/development/RELEASE_PROCESS.md:   brew update && brew install vexy_json
llms.txt-docs/development/RELEASE_PROCESS.md-   
llms.txt-docs/development/RELEASE_PROCESS.md-   # Cargo
llms.txt:docs/development/RELEASE_PROCESS.md:   cargo install vexy_json-cli
llms.txt-docs/development/RELEASE_PROCESS.md-   
llms.txt-docs/development/RELEASE_PROCESS.md-   # npm (WASM)
llms.txt:docs/development/RELEASE_PROCESS.md:   npm install vexy_json-wasm
llms.txt-docs/development/RELEASE_PROCESS.md-   ```
llms.txt-docs/development/RELEASE_PROCESS.md-
llms.txt-docs/development/RELEASE_PROCESS.md-2. **Update Documentation**:
llms.txt-docs/development/RELEASE_PROCESS.md-   - The docs site auto-updates via GitHub Pages
llms.txt:docs/development/RELEASE_PROCESS.md:   - Verify at: https://twardoch.github.io/vexy_json/
llms.txt-docs/development/RELEASE_PROCESS.md-
llms.txt-docs/development/RELEASE_PROCESS.md-3. **Announce Release**:
llms.txt-docs/development/RELEASE_PROCESS.md-   - GitHub Discussions
--
llms.txt-docs/debug-pages/browser-test.html-  <head>
llms.txt-docs/debug-pages/browser-test.html-    <meta charset="UTF-8" />
llms.txt-docs/debug-pages/browser-test.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:docs/debug-pages/browser-test.html:    <title>vexy_json Browser Compatibility Test</title>
llms.txt-docs/debug-pages/browser-test.html-    <style>
llms.txt-docs/debug-pages/browser-test.html-      body {
llms.txt-docs/debug-pages/browser-test.html-        font-family: Arial, sans-serif;
--
llms.txt-docs/debug-pages/browser-test.html-    </style>
llms.txt-docs/debug-pages/browser-test.html-  </head>
llms.txt-docs/debug-pages/browser-test.html-  <body>
llms.txt:docs/debug-pages/browser-test.html:    <h1>vexy_json Browser Compatibility Test</h1>
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-    <div class="test-section">
llms.txt-docs/debug-pages/browser-test.html-      <h2>Browser Information</h2>
--
llms.txt-docs/debug-pages/browser-test.html-      <h2>WASM Module Loading</h2>
llms.txt-docs/debug-pages/browser-test.html-      <div id="module-loading">
llms.txt-docs/debug-pages/browser-test.html-        <div class="loading"></div>
llms.txt:docs/debug-pages/browser-test.html:        <span>Loading vexy_json WebAssembly module...</span>
llms.txt-docs/debug-pages/browser-test.html-      </div>
llms.txt-docs/debug-pages/browser-test.html-      <div id="module-tests"></div>
llms.txt-docs/debug-pages/browser-test.html-    </div>
--
llms.txt-docs/debug-pages/browser-test.html-    </div>
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-    <script type="module">
llms.txt:docs/debug-pages/browser-test.html:      let vexy_json = null;
llms.txt-docs/debug-pages/browser-test.html-      let wasmModule = null;
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-      // Test results storage
--
llms.txt-docs/debug-pages/browser-test.html-        }
llms.txt-docs/debug-pages/browser-test.html-      }
llms.txt-docs/debug-pages/browser-test.html-
llms.txt:docs/debug-pages/browser-test.html:      // Load vexy_json module
llms.txt-docs/debug-pages/browser-test.html-      async function loadVexyJsonModule() {
llms.txt-docs/debug-pages/browser-test.html-        try {
llms.txt-docs/debug-pages/browser-test.html-          document.getElementById('module-loading').innerHTML =
llms.txt:docs/debug-pages/browser-test.html:            '<div class="loading"></div>Loading vexy_json module...';
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-          // Import the module
llms.txt:docs/debug-pages/browser-test.html:          const module = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/browser-test.html-          await module.default(); // Initialize WASM
llms.txt:docs/debug-pages/browser-test.html:          vexy_json = module;
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-          document.getElementById('module-loading').innerHTML =
llms.txt:docs/debug-pages/browser-test.html:            '<div class="test-result success">✓ vexy_json module loaded successfully</div>';
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-          // Test module functions
llms.txt-docs/debug-pages/browser-test.html-          testModuleFunctions();
llms.txt-docs/debug-pages/browser-test.html-        } catch (error) {
llms.txt-docs/debug-pages/browser-test.html-          document.getElementById(
llms.txt-docs/debug-pages/browser-test.html-            'module-loading'
llms.txt:docs/debug-pages/browser-test.html:          ).innerHTML = `<div class="test-result error">✗ Failed to load vexy_json module: ${error.message}</div>`;
llms.txt-docs/debug-pages/browser-test.html-          addResult(
llms.txt-docs/debug-pages/browser-test.html-            'module',
llms.txt-docs/debug-pages/browser-test.html-            'Module Loading',
--
llms.txt-docs/debug-pages/browser-test.html-      }
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-      function testModuleFunctions() {
llms.txt:docs/debug-pages/browser-test.html:        if (!vexy_json) return;
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-        try {
llms.txt-docs/debug-pages/browser-test.html-          // Test version info
llms.txt:docs/debug-pages/browser-test.html:          const version = vexy_json.get_version_info();
llms.txt-docs/debug-pages/browser-test.html-          addResult(
llms.txt-docs/debug-pages/browser-test.html-            'module',
llms.txt-docs/debug-pages/browser-test.html-            'get_version_info()',
--
llms.txt-docs/debug-pages/browser-test.html-          );
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-          // Test parser options
llms.txt:docs/debug-pages/browser-test.html:          const options = vexy_json.get_parser_options();
llms.txt-docs/debug-pages/browser-test.html-          addResult(
llms.txt-docs/debug-pages/browser-test.html-            'module',
llms.txt-docs/debug-pages/browser-test.html-            'get_parser_options()',
--
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-          // Test basic parsing
llms.txt-docs/debug-pages/browser-test.html-          const simpleJson = '{"test": true}';
llms.txt:docs/debug-pages/browser-test.html:          const result = vexy_json.parse_json(simpleJson);
llms.txt-docs/debug-pages/browser-test.html-          addResult(
llms.txt-docs/debug-pages/browser-test.html-            'module',
llms.txt-docs/debug-pages/browser-test.html-            'parse_json() basic',
--
llms.txt-docs/debug-pages/browser-test.html-            allow_unquoted_keys: true,
llms.txt-docs/debug-pages/browser-test.html-            allow_trailing_commas: true,
llms.txt-docs/debug-pages/browser-test.html-          };
llms.txt:docs/debug-pages/browser-test.html:          const resultWithOptions = vexy_json.parse_json_with_options(
llms.txt-docs/debug-pages/browser-test.html-            forgivingJson,
llms.txt-docs/debug-pages/browser-test.html-            optionsTest.allow_comments,
llms.txt-docs/debug-pages/browser-test.html-            optionsTest.allow_trailing_commas,
--
llms.txt-docs/debug-pages/browser-test.html-          );
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-          // Test validation
llms.txt:docs/debug-pages/browser-test.html:          const isValid = vexy_json.validate_json('{"valid": true}');
llms.txt-docs/debug-pages/browser-test.html-          addResult(
llms.txt-docs/debug-pages/browser-test.html-            'module',
llms.txt-docs/debug-pages/browser-test.html-            'validate_json()',
--
llms.txt-docs/debug-pages/browser-test.html-      }
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-      function runParsingTests() {
llms.txt:docs/debug-pages/browser-test.html:        if (!vexy_json) {
llms.txt-docs/debug-pages/browser-test.html-          addResult(
llms.txt-docs/debug-pages/browser-test.html-            'parsing',
llms.txt-docs/debug-pages/browser-test.html-            'Module Required',
llms.txt-docs/debug-pages/browser-test.html-            false,
llms.txt:docs/debug-pages/browser-test.html:            'vexy_json module not loaded'
llms.txt-docs/debug-pages/browser-test.html-          );
llms.txt-docs/debug-pages/browser-test.html-          return;
llms.txt-docs/debug-pages/browser-test.html-        }
--
llms.txt-docs/debug-pages/browser-test.html-              allow_single_quotes: true,
llms.txt-docs/debug-pages/browser-test.html-            };
llms.txt-docs/debug-pages/browser-test.html-
llms.txt:docs/debug-pages/browser-test.html:            const result = vexy_json.parse_json_with_options(
llms.txt-docs/debug-pages/browser-test.html-              test.input,
llms.txt-docs/debug-pages/browser-test.html-              options.allow_comments,
llms.txt-docs/debug-pages/browser-test.html-              options.allow_trailing_commas,
--
llms.txt-docs/debug-pages/browser-test.html-      }
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-      function runPerformanceTests() {
llms.txt:docs/debug-pages/browser-test.html:        if (!vexy_json) {
llms.txt-docs/debug-pages/browser-test.html-          addResult(
llms.txt-docs/debug-pages/browser-test.html-            'performance',
llms.txt-docs/debug-pages/browser-test.html-            'Module Required',
llms.txt-docs/debug-pages/browser-test.html-            false,
llms.txt:docs/debug-pages/browser-test.html:            'vexy_json module not loaded'
llms.txt-docs/debug-pages/browser-test.html-          );
llms.txt-docs/debug-pages/browser-test.html-          return;
llms.txt-docs/debug-pages/browser-test.html-        }
--
llms.txt-docs/debug-pages/browser-test.html-        Object.entries(testData).forEach(([size, data]) => {
llms.txt-docs/debug-pages/browser-test.html-          try {
llms.txt-docs/debug-pages/browser-test.html-            const startTime = performance.now();
llms.txt:docs/debug-pages/browser-test.html:            const result = vexy_json.parse_json(data);
llms.txt-docs/debug-pages/browser-test.html-            const endTime = performance.now();
llms.txt-docs/debug-pages/browser-test.html-            const duration = endTime - startTime;
llms.txt-docs/debug-pages/browser-test.html-
--
llms.txt-docs/debug-pages/browser-test.html-        const input = document.getElementById('test-input').value;
llms.txt-docs/debug-pages/browser-test.html-        const resultDiv = document.getElementById('interactive-result');
llms.txt-docs/debug-pages/browser-test.html-
llms.txt:docs/debug-pages/browser-test.html:        if (!vexy_json) {
llms.txt-docs/debug-pages/browser-test.html-          resultDiv.innerHTML =
llms.txt:docs/debug-pages/browser-test.html:            '<div class="test-result error">vexy_json module not loaded</div>';
llms.txt-docs/debug-pages/browser-test.html-          return;
llms.txt-docs/debug-pages/browser-test.html-        }
llms.txt-docs/debug-pages/browser-test.html-
--
llms.txt-docs/debug-pages/browser-test.html-            newline_as_comma: true,
llms.txt-docs/debug-pages/browser-test.html-          };
llms.txt-docs/debug-pages/browser-test.html-
llms.txt:docs/debug-pages/browser-test.html:          const result = vexy_json.parse_json_with_options(
llms.txt-docs/debug-pages/browser-test.html-            input,
llms.txt-docs/debug-pages/browser-test.html-            options.allow_comments,
llms.txt-docs/debug-pages/browser-test.html-            options.allow_trailing_commas,
--
llms.txt-docs/debug-pages/browser-test.html-        downloadDiv.innerHTML = `
llms.txt-docs/debug-pages/browser-test.html-                <h2>Test Report</h2>
llms.txt-docs/debug-pages/browser-test.html-                <div class="test-result info">
llms.txt:docs/debug-pages/browser-test.html:                    All tests completed. <a href="${url}" download="vexy_json-browser-test-${
llms.txt-docs/debug-pages/browser-test.html-          results.browser.browser
llms.txt-docs/debug-pages/browser-test.html-        }-${Date.now()}.json">Download detailed report</a>
llms.txt-docs/debug-pages/browser-test.html-                </div>
--
llms.txt-docs/development/lean-minimalization.md-
llms.txt-docs/development/lean-minimalization.md-# LEAN.md
llms.txt-docs/development/lean-minimalization.md-
llms.txt:docs/development/lean-minimalization.md:## vexy_json: Definitive Lean/Minimalization Checklist & Rationale
llms.txt-docs/development/lean-minimalization.md-
llms.txt:docs/development/lean-minimalization.md:This actionable document is for reducing the vexy_json codebase to the absolutely minimal, efficient, and dependency-free parser crate, suitable for distribution or embedding.
llms.txt-docs/development/lean-minimalization.md-
llms.txt-docs/development/lean-minimalization.md----
llms.txt-docs/development/lean-minimalization.md-### SECTION 1 — **REMOVE ENTIRELY / DEAD CODE**
llms.txt---
llms.txt-benches/simd_benchmarks.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
llms.txt:benches/simd_benchmarks.rs:use vexy_json_core::optimization::simd::*;
llms.txt-benches/simd_benchmarks.rs-
llms.txt-benches/simd_benchmarks.rs-fn generate_test_strings() -> Vec<(&'static str, String)> {
llms.txt-benches/simd_benchmarks.rs-    vec![
--
llms.txt-docs/python/index.md-nav_order: 6
llms.txt-docs/python/index.md----
llms.txt-docs/python/index.md-
llms.txt:docs/python/index.md:# vexy_json - Forgiving JSON Parser for Python
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-A Python library for parsing "forgiving" JSON, which is JSON that includes features like:
llms.txt-docs/python/index.md-
--
llms.txt-docs/python/index.md-- Implicit top-level objects and arrays
llms.txt-docs/python/index.md-- Newlines as comma separators
llms.txt-docs/python/index.md-
llms.txt:docs/python/index.md:This is a Python binding for the Rust [vexy_json](https://github.com/twardoch/vexy_json) library, which is a port of the JavaScript [jsonic](https://github.com/jsonicjs/jsonic) library.
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-## Installation
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-```bash
llms.txt:docs/python/index.md:pip install vexy_json
llms.txt-docs/python/index.md-```
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-## Quick Start
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-```python
llms.txt:docs/python/index.md:import vexy_json
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-# Parse forgiving JSON
llms.txt:docs/python/index.md:result = vexy_json.parse('''
llms.txt-docs/python/index.md-{
llms.txt-docs/python/index.md-    // This is a comment
llms.txt-docs/python/index.md-    name: "Alice",
--
llms.txt-docs/python/index.md-### Basic Parsing
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-```python
llms.txt:docs/python/index.md:import vexy_json
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-# Standard JSON
llms.txt:docs/python/index.md:data = vexy_json.parse('{"key": "value"}')
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-# Forgiving features
llms.txt:docs/python/index.md:data = vexy_json.parse('''
llms.txt-docs/python/index.md-{
llms.txt-docs/python/index.md-    // Comments are allowed
llms.txt-docs/python/index.md-    unquoted_key: "value",
--
llms.txt-docs/python/index.md-### Custom Options
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-```python
llms.txt:docs/python/index.md:import vexy_json
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-# Parse with specific options
llms.txt:docs/python/index.md:data = vexy_json.parse_with_options(
llms.txt-docs/python/index.md-    'key: value',
llms.txt-docs/python/index.md-    allow_comments=True,
llms.txt-docs/python/index.md-    allow_trailing_commas=True,
--
llms.txt-docs/python/index.md-### Validation
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-```python
llms.txt:docs/python/index.md:import vexy_json
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-# Check if JSON is valid
llms.txt:docs/python/index.md:if vexy_json.is_valid('{"valid": true}'):
llms.txt-docs/python/index.md-    print("Valid JSON!")
llms.txt-docs/python/index.md-
llms.txt:docs/python/index.md:if not vexy_json.is_valid('invalid json'):
llms.txt-docs/python/index.md-    print("Invalid JSON!")
llms.txt-docs/python/index.md-```
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-### Serialization
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-```python
llms.txt:docs/python/index.md:import vexy_json
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-data = {'name': 'Alice', 'age': 30}
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-# Compact output
llms.txt:docs/python/index.md:json_str = vexy_json.dumps(data)
llms.txt-docs/python/index.md-print(json_str)
llms.txt-docs/python/index.md-# Output: {"name":"Alice","age":30}
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-# Pretty printed output
llms.txt:docs/python/index.md:json_str = vexy_json.dumps(data, indent=2)
llms.txt-docs/python/index.md-print(json_str)
llms.txt-docs/python/index.md-# Output:
llms.txt-docs/python/index.md-# {
--
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-## Comparison with Standard Library
llms.txt-docs/python/index.md-
llms.txt:docs/python/index.md:Unlike Python's built-in `json` module, vexy_json is forgiving and accepts non-standard JSON:
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-```python
llms.txt-docs/python/index.md-import json
llms.txt:docs/python/index.md:import vexy_json
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-forgiving_json = '''
llms.txt-docs/python/index.md-{
--
llms.txt-docs/python/index.md-    print(f"json module failed: {e}")
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-# This works fine
llms.txt:docs/python/index.md:result = vexy_json.parse(forgiving_json)
llms.txt:docs/python/index.md:print(f"vexy_json parsed: {result}")
llms.txt-docs/python/index.md-```
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-## Performance
llms.txt-docs/python/index.md-
llms.txt:docs/python/index.md:vexy_json is implemented in Rust and should be competitive with other JSON parsers for most use cases. The forgiving features add minimal overhead.
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-## License
llms.txt-docs/python/index.md-
--
llms.txt-docs/troubleshooting.md-
llms.txt-docs/troubleshooting.md-# Troubleshooting
llms.txt-docs/troubleshooting.md-
llms.txt:docs/troubleshooting.md:This page documents common issues and their solutions when using vexy_json, particularly with WebAssembly bindings.
llms.txt-docs/troubleshooting.md-
llms.txt-docs/troubleshooting.md-## WebAssembly Issues
llms.txt-docs/troubleshooting.md-
--
llms.txt-docs/troubleshooting.md-2. Clear browser cache
llms.txt-docs/troubleshooting.md-3. Add cache-busting query parameters to module imports:
llms.txt-docs/troubleshooting.md-   ```javascript
llms.txt:docs/troubleshooting.md:   import init from './pkg/vexy_json_wasm.js?v=' + Date.now();
llms.txt-docs/troubleshooting.md-   ```
llms.txt-docs/troubleshooting.md-
llms.txt-docs/troubleshooting.md-### WASM Module Loading Failures
--
llms.txt-docs/troubleshooting.md-
llms.txt-docs/troubleshooting.md-1. **Incorrect MIME type**: Ensure your web server serves `.wasm` files with `application/wasm` MIME type
llms.txt-docs/troubleshooting.md-2. **CORS issues**: Serve files from a proper HTTP server, not file:// protocol
llms.txt:docs/troubleshooting.md:3. **Path issues**: Verify the path to `pkg/vexy_json_wasm.js` and `pkg/vexy_json_bg.wasm` is correct
llms.txt-docs/troubleshooting.md-
llms.txt-docs/troubleshooting.md-**Testing Setup**:
llms.txt-docs/troubleshooting.md-Use a simple HTTP server for testing:
--
llms.txt-docs/troubleshooting.md-
llms.txt-docs/troubleshooting.md-If you encounter issues not covered here:
llms.txt-docs/troubleshooting.md-
llms.txt:docs/troubleshooting.md:1. Check the [GitHub Issues](https://github.com/twardoch/vexy_json/issues)
llms.txt-docs/troubleshooting.md-2. Review the [API documentation](api.md)
llms.txt:docs/troubleshooting.md:3. Examine the [test files](https://github.com/twardoch/vexy_json/tree/main/tests) for usage examples
llms.txt-docs/troubleshooting.md-4. Create a new issue with:
llms.txt:docs/troubleshooting.md:   - Your vexy_json version
llms.txt-docs/troubleshooting.md-   - Browser and version
llms.txt-docs/troubleshooting.md-   - Minimal reproduction case
llms.txt-docs/troubleshooting.md-   - Expected vs actual behavior
llms.txt---
llms.txt:bindings/python/README.md:# vexy_json Python Bindings
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-Fast, forgiving JSON parser for Python - a port of the JavaScript library jsonic.
llms.txt-bindings/python/README.md-
--
llms.txt-bindings/python/README.md-## Installation
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```bash
llms.txt:bindings/python/README.md:pip install vexy_json
llms.txt-bindings/python/README.md-```
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-### Building from source
--
llms.txt-bindings/python/README.md-## Quick Start
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:import vexy_json
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-# Parse forgiving JSON
llms.txt:bindings/python/README.md:data = vexy_json.parse('''
llms.txt-bindings/python/README.md-{
llms.txt-bindings/python/README.md-    // Comments are allowed
llms.txt-bindings/python/README.md-    name: "John",        // Unquoted keys
--
llms.txt-bindings/python/README.md-Parse a JSON string with default forgiving options.
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:data = vexy_json.parse('{"key": "value"}')
llms.txt-bindings/python/README.md-```
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-#### `parse_with_options(input: str, options: Options) -> Any`
llms.txt-bindings/python/README.md-Parse a JSON string with custom options.
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:opts = vexy_json.Options(allow_comments=False)
llms.txt:bindings/python/README.md:data = vexy_json.parse_with_options(json_str, opts)
llms.txt-bindings/python/README.md-```
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-#### `dumps(obj: Any, indent: int = None, sort_keys: bool = False) -> str`
llms.txt-bindings/python/README.md-Serialize a Python object to JSON string.
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:json_str = vexy_json.dumps({"key": "value"}, indent=2)
llms.txt-bindings/python/README.md-```
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-#### `load(filename: str, options: Options = None) -> Any`
llms.txt-bindings/python/README.md-Load JSON from a file.
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:data = vexy_json.load("config.json")
llms.txt-bindings/python/README.md-```
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-#### `dump(obj: Any, filename: str, indent: int = None, sort_keys: bool = False)`
llms.txt-bindings/python/README.md-Save Python object as JSON to a file.
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:vexy_json.dump(data, "output.json", indent=2)
llms.txt-bindings/python/README.md-```
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-### Classes
--
llms.txt-bindings/python/README.md-Parser configuration options.
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:opts = vexy_json.Options(
llms.txt-bindings/python/README.md-    allow_comments=True,         # Allow // and /* */ comments
llms.txt-bindings/python/README.md-    allow_trailing_commas=True,  # Allow trailing commas
llms.txt-bindings/python/README.md-    allow_unquoted_keys=True,    # Allow unquoted object keys
--
llms.txt-bindings/python/README.md-Reusable parser instance for better performance when parsing multiple documents.
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:parser = vexy_json.Parser(options)
llms.txt-bindings/python/README.md-data = parser.parse(json_str)
llms.txt-bindings/python/README.md-```
llms.txt-bindings/python/README.md-
--
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-### Configuration Files
llms.txt-bindings/python/README.md-
llms.txt:bindings/python/README.md:vexy_json is perfect for configuration files that need to be human-friendly:
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:config = vexy_json.parse('''
llms.txt-bindings/python/README.md-{
llms.txt-bindings/python/README.md-    // Server configuration
llms.txt-bindings/python/README.md-    server: {
--
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-### Error Recovery
llms.txt-bindings/python/README.md-
llms.txt:bindings/python/README.md:vexy_json can automatically fix common JSON errors:
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt-bindings/python/README.md-# Missing commas
llms.txt:bindings/python/README.md:fixed = vexy_json.parse('{"a": 1 "b": 2}')  # {'a': 1, 'b': 2}
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-# Unclosed strings
llms.txt:bindings/python/README.md:fixed = vexy_json.parse('{"name": "John')   # {'name': 'John'}
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-# Trailing commas
llms.txt:bindings/python/README.md:fixed = vexy_json.parse('[1, 2, 3,]')       # [1, 2, 3]
llms.txt-bindings/python/README.md-```
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-### Strict Mode
--
llms.txt-bindings/python/README.md-For standard JSON compliance:
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:strict_parser = vexy_json.Parser(vexy_json.Options.strict())
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-# This will raise an error
llms.txt-bindings/python/README.md-try:
--
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-## Performance
llms.txt-bindings/python/README.md-
llms.txt:bindings/python/README.md:vexy_json is built with Rust and is designed to be fast:
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-- Written in Rust for native performance
llms.txt-bindings/python/README.md-- Efficient memory usage
--
llms.txt-docs/debug-pages/options-test.html-      import init, {
llms.txt-docs/debug-pages/options-test.html-        parse_json_with_options,
llms.txt-docs/debug-pages/options-test.html-        get_parser_options,
llms.txt:docs/debug-pages/options-test.html:      } from '../pkg/vexy_json_wasm.js';
llms.txt-docs/debug-pages/options-test.html-
llms.txt-docs/debug-pages/options-test.html-      let log = '';
llms.txt-docs/debug-pages/options-test.html-      function appendLog(message) {
--
llms.txt-docs/development/distribution-builds.md-nav_order: 4
llms.txt-docs/development/distribution-builds.md----
llms.txt-docs/development/distribution-builds.md-
llms.txt:docs/development/distribution-builds.md:# vexy_json Distribution Build Scripts
llms.txt-docs/development/distribution-builds.md-
llms.txt:docs/development/distribution-builds.md:This directory contains robust, maintainable scripts for building vexy_json CLI deliverables for all major platforms:
llms.txt-docs/development/distribution-builds.md-
llms.txt-docs/development/distribution-builds.md-- **macOS**: Universal binary, .pkg installer, and .dmg disk image
llms.txt-docs/development/distribution-builds.md-- **Windows**: .exe in a .zip archive
--
llms.txt-docs/development/distribution-builds.md-
llms.txt-docs/development/distribution-builds.md-## Support
llms.txt-docs/development/distribution-builds.md-
llms.txt:docs/development/distribution-builds.md:For issues, see the main vexy_json repository or open an issue.
llms.txt---
llms.txt-benches/parsing.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
llms.txt:benches/parsing.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-benches/parsing.rs-
llms.txt-benches/parsing.rs-fn benchmark_simple_object(c: &mut Criterion) {
llms.txt-benches/parsing.rs-    let json = r#"{"name": "John", "age": 30, "active": true}"#;
--
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-The v2.0.0 release will include:
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-### Binaries
llms.txt:docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-2.0.0-macos.dmg` - macOS installer with PKG
llms.txt:docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-2.0.0-macos.zip` - macOS standalone binary
llms.txt:docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-2.0.0-linux-x86_64.tar.gz` - Linux x86_64
llms.txt:docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-2.0.0-linux-aarch64.tar.gz` - Linux ARM64
llms.txt:docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-2.0.0-windows-x86_64.zip` - Windows x86_64
llms.txt:docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-wasm-2.0.0.tar.gz` - WASM package
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-### Features
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-- SIMD-accelerated parsing (2-3x faster)
--
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-1. Review and commit all changes
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-2. Run `./scripts/release-github.sh --version 2.0.0`
llms.txt:docs/development/RELEASE_v2.0.0_SUMMARY.md:3. Monitor the release at https://github.com/twardoch/vexy_json/actions
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-4. Once complete, announce the release
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-The repository is now fully prepared for a professional v2.0.0 release with comprehensive CI/CD automation!
--
llms.txt-docs/debug-pages/simple-test.html-    <pre id="output"></pre>
llms.txt-docs/debug-pages/simple-test.html-
llms.txt-docs/debug-pages/simple-test.html-    <script type="module">
llms.txt:docs/debug-pages/simple-test.html:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
llms.txt-docs/debug-pages/simple-test.html-
llms.txt-docs/debug-pages/simple-test.html-      let initialized = false;
llms.txt-docs/debug-pages/simple-test.html-
--
llms.txt-docs/assets/js/editor.js-
llms.txt-docs/assets/js/editor.js-/**
llms.txt-docs/assets/js/editor.js- * Enhanced editor functionality using CodeMirror for better syntax highlighting
llms.txt:docs/assets/js/editor.js: * and editing experience in the vexy_json web tool.
llms.txt-docs/assets/js/editor.js- */
llms.txt-docs/assets/js/editor.js-
llms.txt-docs/assets/js/editor.js-// CodeMirror imports from CDN - loaded via HTML script tags
--
llms.txt-docs/assets/js/editor.js-                }
llms.txt-docs/assets/js/editor.js-                return null;
llms.txt-docs/assets/js/editor.js-            }),
llms.txt:docs/assets/js/editor.js:            // Custom styling for vexy_json features
llms.txt-docs/assets/js/editor.js-            EditorView.theme({
llms.txt-docs/assets/js/editor.js-                '.cm-editor': {
llms.txt-docs/assets/js/editor.js-                    fontSize: '14px',
--
llms.txt-crates/core/src/parser/mod.rs-#[cfg(feature = "serde")]
llms.txt-crates/core/src/parser/mod.rs-use serde::{Deserialize, Serialize};
llms.txt-crates/core/src/parser/mod.rs-
llms.txt:crates/core/src/parser/mod.rs:/// Configuration options for the vexy_json parser.
llms.txt-crates/core/src/parser/mod.rs-///
llms.txt-crates/core/src/parser/mod.rs-/// These options control which forgiving features are enabled during parsing.
llms.txt-crates/core/src/parser/mod.rs-/// By default, all forgiving features are enabled.
--
llms.txt-crates/core/src/parser/mod.rs-    }
llms.txt-crates/core/src/parser/mod.rs-}
llms.txt-crates/core/src/parser/mod.rs-
llms.txt:crates/core/src/parser/mod.rs:/// The vexy_json parser.
llms.txt-crates/core/src/parser/mod.rs-///
llms.txt-crates/core/src/parser/mod.rs-/// Parses tokens from a Lexer into a Value tree structure.
llms.txt-crates/core/src/parser/mod.rs-/// Supports both strict JSON and various forgiving extensions.
--
llms.txt-crates/core/src/parser/mod.rs-/// # Examples
llms.txt-crates/core/src/parser/mod.rs-///
llms.txt-crates/core/src/parser/mod.rs-/// ```
llms.txt:crates/core/src/parser/mod.rs:/// use vexy_json_core::parse;
llms.txt-crates/core/src/parser/mod.rs-///
llms.txt-crates/core/src/parser/mod.rs-/// // Standard JSON
llms.txt-crates/core/src/parser/mod.rs-/// let result = parse(r#"{"key": "value"}"#);
--
llms.txt-crates/core/src/parser/mod.rs-/// # Examples
llms.txt-crates/core/src/parser/mod.rs-///
llms.txt-crates/core/src/parser/mod.rs-/// ```
llms.txt:crates/core/src/parser/mod.rs:/// use vexy_json_core::{parse_with_options, ParserOptions};
llms.txt-crates/core/src/parser/mod.rs-///
llms.txt-crates/core/src/parser/mod.rs-/// let mut options = ParserOptions::default();
llms.txt-crates/core/src/parser/mod.rs-/// options.allow_comments = false;
--
llms.txt-crates/core/src/parser/mod.rs-    parser.parse()
llms.txt-crates/core/src/parser/mod.rs-}
llms.txt-crates/core/src/parser/mod.rs-
llms.txt:crates/core/src/parser/mod.rs:/// Enhanced parsing with three-tier fallback strategy (serde_json → vexy_json → repair)
llms.txt-crates/core/src/parser/mod.rs-///
llms.txt-crates/core/src/parser/mod.rs-/// This function implements a progressive parsing strategy:
llms.txt-crates/core/src/parser/mod.rs-/// 1. First tries serde_json for maximum performance on valid JSON
llms.txt:crates/core/src/parser/mod.rs:/// 2. Falls back to vexy_json for forgiving parsing of non-standard JSON
llms.txt-crates/core/src/parser/mod.rs-/// 3. Finally attempts repair for malformed JSON (bracket imbalances, etc.)
llms.txt-crates/core/src/parser/mod.rs-///
llms.txt-crates/core/src/parser/mod.rs-/// Returns an `EnhancedParseResult` that includes information about which
--
llms.txt-crates/core/src/parser/mod.rs-pub fn parse_with_fallback(input: &str, options: ParserOptions) -> EnhancedParseResult<Value> {
llms.txt-crates/core/src/parser/mod.rs-    // Tier 1: Try serde_json for maximum performance on valid JSON
llms.txt-crates/core/src/parser/mod.rs-    if let Ok(serde_value) = serde_json::from_str::<serde_json::Value>(input) {
llms.txt:crates/core/src/parser/mod.rs:        // Convert serde_json::Value to vexy_json::Value
llms.txt:crates/core/src/parser/mod.rs:        let vexy_json_value = convert_serde_to_vexy_json(serde_value);
llms.txt:crates/core/src/parser/mod.rs:        return EnhancedParseResult::success(vexy_json_value, ParsingTier::Fast);
llms.txt-crates/core/src/parser/mod.rs-    }
llms.txt-crates/core/src/parser/mod.rs-
llms.txt:crates/core/src/parser/mod.rs:    // Tier 2: Try vexy_json for forgiving parsing
llms.txt-crates/core/src/parser/mod.rs-    match parse_with_options(input, options.clone()) {
llms.txt-crates/core/src/parser/mod.rs-        Ok(value) => EnhancedParseResult::success(value, ParsingTier::Forgiving),
llms.txt-crates/core/src/parser/mod.rs-        Err(error) => {
--
llms.txt-crates/core/src/parser/mod.rs-
llms.txt-crates/core/src/parser/mod.rs-    match repairer.repair(input) {
llms.txt-crates/core/src/parser/mod.rs-        Ok((repaired_json, repairs)) => {
llms.txt:crates/core/src/parser/mod.rs:            // Try to parse the repaired JSON with vexy_json
llms.txt-crates/core/src/parser/mod.rs-            match parse_with_options(&repaired_json, options.clone()) {
llms.txt-crates/core/src/parser/mod.rs-                Ok(value) => {
llms.txt-crates/core/src/parser/mod.rs-                    EnhancedParseResult::success_with_repairs(value, repairs, ParsingTier::Repair)
--
llms.txt-crates/core/src/parser/mod.rs-    }
llms.txt-crates/core/src/parser/mod.rs-}
llms.txt-crates/core/src/parser/mod.rs-
llms.txt:crates/core/src/parser/mod.rs:/// Convert serde_json::Value to vexy_json::Value
llms.txt:crates/core/src/parser/mod.rs:fn convert_serde_to_vexy_json(serde_value: serde_json::Value) -> Value {
llms.txt-crates/core/src/parser/mod.rs-    match serde_value {
llms.txt-crates/core/src/parser/mod.rs-        serde_json::Value::Null => Value::Null,
llms.txt-crates/core/src/parser/mod.rs-        serde_json::Value::Bool(b) => Value::Bool(b),
--
llms.txt-crates/core/src/parser/mod.rs-        }
llms.txt-crates/core/src/parser/mod.rs-        serde_json::Value::String(s) => Value::String(s),
llms.txt-crates/core/src/parser/mod.rs-        serde_json::Value::Array(arr) => {
llms.txt:crates/core/src/parser/mod.rs:            let converted: Vec<Value> = arr.into_iter().map(convert_serde_to_vexy_json).collect();
llms.txt-crates/core/src/parser/mod.rs-            Value::Array(converted)
llms.txt-crates/core/src/parser/mod.rs-        }
llms.txt-crates/core/src/parser/mod.rs-        serde_json::Value::Object(obj) => {
llms.txt-crates/core/src/parser/mod.rs-            let converted: FxHashMap<String, Value> = obj
llms.txt-crates/core/src/parser/mod.rs-                .into_iter()
llms.txt:crates/core/src/parser/mod.rs:                .map(|(k, v)| (k, convert_serde_to_vexy_json(v)))
llms.txt-crates/core/src/parser/mod.rs-                .collect();
llms.txt-crates/core/src/parser/mod.rs-            Value::Object(converted)
llms.txt-crates/core/src/parser/mod.rs-        }
llms.txt---
llms.txt-tests/comma_handling.rs-// this_file: tests/comma_handling.rs
llms.txt-tests/comma_handling.rs-
llms.txt:tests/comma_handling.rs:use vexy_json::{parse, Value};
llms.txt-tests/comma_handling.rs-
llms.txt-tests/comma_handling.rs-/// Comma handling tests ported from jsonic comma.test.js
llms.txt-tests/comma_handling.rs-/// Tests implicit commas (newlines as separators), optional commas, trailing commas, and edge cases
--
llms.txt-tests/comma_handling.rs-    let result = parse("{a:1\nb:2}");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) if obj.len() == 2 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports newlines as comma separators in objects");
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("b").and_then(|v| v.as_f64()), Some(2.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed object newline as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json doesn't support newlines as separators in objects: {:?}",
llms.txt-tests/comma_handling.rs-                e
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
--
llms.txt-tests/comma_handling.rs-    let result = parse("[1\n2]");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 2 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports newlines as comma separators in arrays");
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[0].as_f64(), Some(1.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[1].as_f64(), Some(2.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed array newline as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json doesn't support newlines as separators in arrays: {:?}",
llms.txt-tests/comma_handling.rs-                e
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
--
llms.txt-tests/comma_handling.rs-    let result = parse("a:1,b:2");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) if obj.len() == 2 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports implicit top-level objects");
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("b").and_then(|v| v.as_f64()), Some(2.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed implicit object as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json doesn't support implicit objects: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    let result = parse("1,2,3");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 3 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports implicit top-level arrays");
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[0].as_f64(), Some(1.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[1].as_f64(), Some(2.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[2].as_f64(), Some(3.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed implicit array as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json doesn't support implicit arrays: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-}
--
llms.txt-tests/comma_handling.rs-    let result = parse("a:1\nb:2");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) if obj.len() == 2 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports implicit objects with newline separators");
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("b").and_then(|v| v.as_f64()), Some(2.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed implicit object with newlines as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json doesn't support implicit objects with newlines: {:?}",
llms.txt-tests/comma_handling.rs-                e
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
--
llms.txt-tests/comma_handling.rs-    let result = parse("1\n2\n3");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 3 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports implicit arrays with newline separators");
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[0].as_f64(), Some(1.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[1].as_f64(), Some(2.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[2].as_f64(), Some(3.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed implicit array with newlines as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json doesn't support implicit arrays with newlines: {:?}",
llms.txt-tests/comma_handling.rs-                e
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
--
llms.txt-tests/comma_handling.rs-    let result = parse("a\nb\nc");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 3 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports implicit string arrays with newlines");
llms.txt-tests/comma_handling.rs-            if let (Some(Value::String(s1)), Some(Value::String(s2)), Some(Value::String(s3))) =
llms.txt-tests/comma_handling.rs-                (arr.get(0), arr.get(1), arr.get(2))
llms.txt-tests/comma_handling.rs-            {
--
llms.txt-tests/comma_handling.rs-            }
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed string sequence as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json doesn't support string sequences with newlines: {:?}",
llms.txt-tests/comma_handling.rs-                e
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
--
llms.txt-tests/comma_handling.rs-    let result = parse("[1,]");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 1 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports trailing commas in arrays");
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[0].as_f64(), Some(1.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed trailing comma array as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json doesn't support trailing commas in arrays: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    let result = parse("{a:1,}");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) if obj.len() == 1 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports trailing commas in objects");
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed trailing comma object as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json doesn't support trailing commas in objects: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-}
--
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json parsed [,,] as array with {} elements: {:?}",
llms.txt-tests/comma_handling.rs-                arr.len(),
llms.txt-tests/comma_handling.rs-                arr
llms.txt-tests/comma_handling.rs-            );
llms.txt:tests/comma_handling.rs:            // This tests if vexy_json supports jsonic-style null insertion for empty comma positions
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed [,,] as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on multiple commas [,,]: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json parsed [1,,3] as array with {} elements: {:?}",
llms.txt-tests/comma_handling.rs-                arr.len(),
llms.txt-tests/comma_handling.rs-                arr
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed [1,,3] as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on [1,,3]: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json parsed [,1] as array with {} elements: {:?}",
llms.txt-tests/comma_handling.rs-                arr.len(),
llms.txt-tests/comma_handling.rs-                arr
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed [,1] as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on leading comma [,1]: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-}
--
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json parsed {{,,}} as object with {} entries: {:?}",
llms.txt-tests/comma_handling.rs-                obj.len(),
llms.txt-tests/comma_handling.rs-                obj
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed {{,,}} as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on {{,,}}: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json parsed {{,a:1}} as object with {} entries: {:?}",
llms.txt-tests/comma_handling.rs-                obj.len(),
llms.txt-tests/comma_handling.rs-                obj
llms.txt-tests/comma_handling.rs-            );
--
llms.txt-tests/comma_handling.rs-            }
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed {{,a:1}} as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on {{,a:1}}: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json parsed {{,a:1,}} as object with {} entries: {:?}",
llms.txt-tests/comma_handling.rs-                obj.len(),
llms.txt-tests/comma_handling.rs-                obj
llms.txt-tests/comma_handling.rs-            );
--
llms.txt-tests/comma_handling.rs-            }
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed {{,a:1,}} as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on {{,a:1,}}: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-}
--
llms.txt-tests/comma_handling.rs-    let result = parse("[[a],]");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed [[a],] as: {:?}", arr);
llms.txt-tests/comma_handling.rs-            if arr.len() == 1 {
llms.txt-tests/comma_handling.rs-                if let Some(Value::Array(inner)) = arr.get(0) {
llms.txt-tests/comma_handling.rs-                    if inner.len() == 1 {
--
llms.txt-tests/comma_handling.rs-            }
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed nested array as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on nested arrays: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    let result = parse("[[a][b]]");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed [[a][b]] as: {:?}", arr);
llms.txt:tests/comma_handling.rs:            // Test if vexy_json supports implicit comma between adjacent arrays
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed [[a][b]] as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on [[a][b]]: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    let result = parse("[{a:1},]");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed [{{a:1}},] as: {:?}", arr);
llms.txt-tests/comma_handling.rs-            if arr.len() == 1 {
llms.txt-tests/comma_handling.rs-                if let Some(Value::Object(obj)) = arr.get(0) {
llms.txt-tests/comma_handling.rs-                    assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
--
llms.txt-tests/comma_handling.rs-            }
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed object in array as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on object in array: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-}
--
llms.txt-tests/comma_handling.rs-    let result = parse("{a:1},");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed {{a:1}}, as implicit array: {:?}", arr);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json parsed {{a:1}}, as object (ignored trailing comma): {:?}",
llms.txt-tests/comma_handling.rs-                obj
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed {{a:1}}, as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on {{a:1}},: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    let result = parse("a:1 b:2");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) if obj.len() == 2 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports space-separated object properties");
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("b").and_then(|v| v.as_f64()), Some(2.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed space-separated as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json doesn't support space-separated properties: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    let result = parse("true\nfalse\nnull");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 3 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports mixed value types with newlines");
llms.txt-tests/comma_handling.rs-            assert!(matches!(arr[0], Value::Bool(true)));
llms.txt-tests/comma_handling.rs-            assert!(matches!(arr[1], Value::Bool(false)));
llms.txt-tests/comma_handling.rs-            assert!(matches!(arr[2], Value::Null));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed mixed types as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on mixed types: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-}
--
llms.txt-docs/development/implementation-summary.md-nav_order: 3
llms.txt-docs/development/implementation-summary.md----
llms.txt-docs/development/implementation-summary.md-
llms.txt:docs/development/implementation-summary.md:# Task Implementation Summary - vexy_json WebAssembly & Feature Verification
llms.txt-docs/development/implementation-summary.md-
llms.txt-docs/development/implementation-summary.md-## Overview
llms.txt:docs/development/implementation-summary.md:This document summarizes the implementation and verification of the next tasks from PLAN.md and TODO.md for the vexy_json project.
llms.txt-docs/development/implementation-summary.md-
llms.txt-docs/development/implementation-summary.md-## Tasks Completed ✅
llms.txt-docs/development/implementation-summary.md-
--
llms.txt-docs/development/implementation-summary.md-- **Browser Compatibility**: Tested in Chrome with automated cross-browser testing framework
llms.txt-docs/development/implementation-summary.md-- **Test Results**: WebAssembly initialization test passed (44ms duration)
llms.txt-docs/development/implementation-summary.md-- **File Locations**:
llms.txt:docs/development/implementation-summary.md:  - WASM files: `docs/pkg/vexy_json_bg.wasm`, `docs/pkg/vexy_json_wasm.js`
llms.txt-docs/development/implementation-summary.md-  - Test page: `docs/test-wasm.html`
llms.txt-docs/development/implementation-summary.md-  - Cross-browser test: `scripts/cross-browser-test.js`
llms.txt-docs/development/implementation-summary.md-
--
llms.txt-docs/development/implementation-summary.md-```json
llms.txt-docs/development/implementation-summary.md-{
llms.txt-docs/development/implementation-summary.md-  // Configuration with comments
llms.txt:docs/development/implementation-summary.md:  name: 'vexy_json',           // Unquoted key, single quotes
llms.txt-docs/development/implementation-summary.md-  version: "1.2.4",        /* Version string */
llms.txt-docs/development/implementation-summary.md-  features: [
llms.txt-docs/development/implementation-summary.md-    "comments",
--
llms.txt-docs/development/implementation-summary.md-- `scripts/cross-browser-test.js` - Improved timing and error handling
llms.txt-docs/development/implementation-summary.md-
llms.txt-docs/development/implementation-summary.md-### Verified Files:
llms.txt:docs/development/implementation-summary.md:- `docs/pkg/vexy_json_bg.wasm` - WebAssembly binary
llms.txt:docs/development/implementation-summary.md:- `docs/pkg/vexy_json_wasm.js` - JavaScript bindings
llms.txt-docs/development/implementation-summary.md-- `docs/test-wasm.html` - Browser test page
llms.txt-docs/development/implementation-summary.md-- `docs/tool.html` - Interactive web tool
llms.txt-docs/development/implementation-summary.md-
--
llms.txt-docs/development/implementation-summary.md-- ✅ All forgiving JSON features working consistently (100% test coverage)
llms.txt-docs/development/implementation-summary.md-- ✅ Git-tag-based semver properly implemented (v1.2.4)
llms.txt-docs/development/implementation-summary.md-
llms.txt:docs/development/implementation-summary.md:The vexy_json project now has robust WebAssembly support with comprehensive feature verification and proper version management.
llms.txt---
llms.txt-docs/development/RELEASE_CHECKLIST.md-```
llms.txt-docs/development/RELEASE_CHECKLIST.md-
llms.txt-docs/development/RELEASE_CHECKLIST.md-### Homebrew (macOS)
llms.txt:docs/development/RELEASE_CHECKLIST.md:- [ ] Update Formula/vexy_json.rb with new version and SHA256
llms.txt:docs/development/RELEASE_CHECKLIST.md:- [ ] Test installation: `brew install --build-from-source ./Formula/vexy_json.rb`
llms.txt-docs/development/RELEASE_CHECKLIST.md-- [ ] Submit PR to homebrew-core (if applicable)
llms.txt-docs/development/RELEASE_CHECKLIST.md-
llms.txt-docs/development/RELEASE_CHECKLIST.md-## Communication
--
llms.txt-docs/debug-pages/console-debug.html-        parse_json,
llms.txt-docs/debug-pages/console-debug.html-        parse_json_with_options,
llms.txt-docs/debug-pages/console-debug.html-        get_parser_options,
llms.txt:docs/debug-pages/console-debug.html:      } from '../pkg/vexy_json_wasm.js?v=' + Date.now();
llms.txt-docs/debug-pages/console-debug.html-
llms.txt-docs/debug-pages/console-debug.html-      let log = '';
llms.txt-docs/debug-pages/console-debug.html-      function appendLog(message) {
--
llms.txt-docs/debug-pages/token-debug.html-        parse_json,
llms.txt-docs/debug-pages/token-debug.html-        parse_json_with_options,
llms.txt-docs/debug-pages/token-debug.html-        get_parser_options,
llms.txt:docs/debug-pages/token-debug.html:      } from '../pkg/vexy_json_wasm.js';
llms.txt-docs/debug-pages/token-debug.html-
llms.txt-docs/debug-pages/token-debug.html-      let log = '';
llms.txt-docs/debug-pages/token-debug.html-      function appendLog(message) {
--
llms.txt-benches/benchmark.rs-
llms.txt-benches/benchmark.rs-struct BenchmarkResult {
llms.txt-benches/benchmark.rs-    case: String,
llms.txt:benches/benchmark.rs:    vexy_json_ns: f64,
llms.txt-benches/benchmark.rs-}
llms.txt---
llms.txt:docs/vexy_json-tool.md-title: "Vexy JSON Parser"
llms.txt:docs/vexy_json-tool.md-description: "Interactive Vexy JSON parser with comments and flexible syntax"
llms.txt:docs/vexy_json-tool.md-nav_order: 10
llms.txt:docs/vexy_json-tool.md:permalink: /vexy_json-tool/
llms.txt:docs/vexy_json-tool.md----
llms.txt:docs/vexy_json-tool.md-
llms.txt:docs/vexy_json-tool.md-# Vexy JSON Interactive Parser
llms.txt---
llms.txt-docs/wasm/npm-package.md-nav_order: 2
llms.txt-docs/wasm/npm-package.md----
llms.txt-docs/wasm/npm-package.md-
llms.txt:docs/wasm/npm-package.md:# @twardoch/vexy_json-wasm
llms.txt-docs/wasm/npm-package.md-
llms.txt:docs/wasm/npm-package.md:WebAssembly bindings for [vexy_json](https://github.com/twardoch/vexy_json), a forgiving JSON parser that's a Rust port of [jsonic](https://github.com/jsonicjs/jsonic).
llms.txt-docs/wasm/npm-package.md-
llms.txt-docs/wasm/npm-package.md-## Installation
llms.txt-docs/wasm/npm-package.md-
llms.txt-docs/wasm/npm-package.md-```bash
llms.txt:docs/wasm/npm-package.md:npm install @twardoch/vexy_json-wasm
llms.txt-docs/wasm/npm-package.md-```
llms.txt-docs/wasm/npm-package.md-
llms.txt-docs/wasm/npm-package.md-## Usage
llms.txt-docs/wasm/npm-package.md-
llms.txt-docs/wasm/npm-package.md-```javascript
llms.txt:docs/wasm/npm-package.md:import init, { parse_js, parse_with_options_js, is_valid, format } from '@twardoch/vexy_json-wasm';
llms.txt-docs/wasm/npm-package.md-
llms.txt-docs/wasm/npm-package.md-// Initialize the WASM module
llms.txt-docs/wasm/npm-package.md-await init();
--
llms.txt-docs/wasm/npm-package.md-
llms.txt-docs/wasm/npm-package.md-## Features
llms.txt-docs/wasm/npm-package.md-
llms.txt:docs/wasm/npm-package.md:vexy_json supports all standard JSON features plus:
llms.txt-docs/wasm/npm-package.md-
llms.txt-docs/wasm/npm-package.md-- **Comments**: Single-line (`//`) and multi-line (`/* */`)
llms.txt-docs/wasm/npm-package.md-- **Trailing commas**: In objects and arrays
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py:"""Tests for vexy_json Python bindings"""
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-import pytest
llms.txt:bindings/python/tests/test_vexy_json.py:import vexy_json
llms.txt:bindings/python/tests/test_vexy_json.py-import json
llms.txt:bindings/python/tests/test_vexy_json.py-import tempfile
llms.txt:bindings/python/tests/test_vexy_json.py-import os
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-    """Test basic JSON parsing functionality"""
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parse_simple_object(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('{"name": "John", "age": 30}')
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"name": "John", "age": 30}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parse_simple_array(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('[1, 2, 3, "hello"]')
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == [1, 2, 3, "hello"]
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parse_nested_structure(self):
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-            "total": 2
llms.txt:bindings/python/tests/test_vexy_json.py-        }
llms.txt:bindings/python/tests/test_vexy_json.py-        """
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse(input_json)
llms.txt:bindings/python/tests/test_vexy_json.py-        expected = {
llms.txt:bindings/python/tests/test_vexy_json.py-            "users": [{"name": "Alice", "age": 25}, {"name": "Bob", "age": 30}],
llms.txt:bindings/python/tests/test_vexy_json.py-            "total": 2,
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == expected
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parse_primitives(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse("true") is True
llms.txt:bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse("false") is False
llms.txt:bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse("null") is None
llms.txt:bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse("42") == 42
llms.txt:bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse("3.14") == 3.14
llms.txt:bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse('"hello"') == "hello"
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-class TestForgivingFeatures:
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-            "value": 42
llms.txt:bindings/python/tests/test_vexy_json.py-        }
llms.txt:bindings/python/tests/test_vexy_json.py-        """
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse(input_json)
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"name": "Test", "value": 42}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_trailing_commas(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('{"a": 1, "b": 2,}')
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"a": 1, "b": 2}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse("[1, 2, 3,]")
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == [1, 2, 3]
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_unquoted_keys(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('{name: "John", age: 30}')
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"name": "John", "age": 30}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_single_quotes(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse("{'name': 'John', 'city': 'NYC'}")
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"name": "John", "city": "NYC"}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_implicit_object(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('name: "John", age: 30')
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"name": "John", "age": 30}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_newline_as_comma(self):
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-            "c": 3
llms.txt:bindings/python/tests/test_vexy_json.py-        }
llms.txt:bindings/python/tests/test_vexy_json.py-        """
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse(input_json)
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"a": 1, "b": 2, "c": 3}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_mixed_forgiving_features(self):
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-            }
llms.txt:bindings/python/tests/test_vexy_json.py-        }
llms.txt:bindings/python/tests/test_vexy_json.py-        """
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse(input_json)
llms.txt:bindings/python/tests/test_vexy_json.py-        expected = {
llms.txt:bindings/python/tests/test_vexy_json.py-            "server": "localhost",
llms.txt:bindings/python/tests/test_vexy_json.py-            "port": 8080,
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-    """Test parser options"""
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_default_options(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        opts = vexy_json.Options.default()
llms.txt:bindings/python/tests/test_vexy_json.py-        assert opts.allow_comments is True
llms.txt:bindings/python/tests/test_vexy_json.py-        assert opts.allow_trailing_commas is True
llms.txt:bindings/python/tests/test_vexy_json.py-        assert opts.allow_unquoted_keys is True
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_strict_options(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        opts = vexy_json.Options.strict()
llms.txt:bindings/python/tests/test_vexy_json.py-        assert opts.allow_comments is False
llms.txt:bindings/python/tests/test_vexy_json.py-        assert opts.allow_trailing_commas is False
llms.txt:bindings/python/tests/test_vexy_json.py-        assert opts.allow_unquoted_keys is False
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_custom_options(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        opts = vexy_json.Options(
llms.txt:bindings/python/tests/test_vexy_json.py-            allow_comments=False, allow_trailing_commas=True, max_depth=50
llms.txt:bindings/python/tests/test_vexy_json.py-        )
llms.txt:bindings/python/tests/test_vexy_json.py-        assert opts.allow_comments is False
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-        assert opts.max_depth == 50
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parse_with_strict_options(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        opts = vexy_json.Options.strict()
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-        # Valid JSON should work
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse_with_options('{"valid": true}', opts)
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"valid": True}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-        # Invalid JSON should fail with strict options
llms.txt:bindings/python/tests/test_vexy_json.py-        with pytest.raises(ValueError):
llms.txt:bindings/python/tests/test_vexy_json.py:            vexy_json.parse_with_options("{unquoted: true}", opts)
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-class TestParser:
llms.txt:bindings/python/tests/test_vexy_json.py-    """Test Parser class"""
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parser_creation(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        parser = vexy_json.Parser()
llms.txt:bindings/python/tests/test_vexy_json.py-        assert parser is not None
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parser_with_options(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        opts = vexy_json.Options(allow_comments=False)
llms.txt:bindings/python/tests/test_vexy_json.py:        parser = vexy_json.Parser(opts)
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-        # Should parse valid JSON
llms.txt:bindings/python/tests/test_vexy_json.py-        result = parser.parse('{"valid": true}')
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"valid": True}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parser_reuse(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        parser = vexy_json.Parser()
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-        # Parse multiple inputs with same parser
llms.txt:bindings/python/tests/test_vexy_json.py-        results = []
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-            temp_path = f.name
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-        try:
llms.txt:bindings/python/tests/test_vexy_json.py:            data = vexy_json.load(temp_path)
llms.txt:bindings/python/tests/test_vexy_json.py-            assert data == {"test": True, "value": 42}
llms.txt:bindings/python/tests/test_vexy_json.py-        finally:
llms.txt:bindings/python/tests/test_vexy_json.py-            os.unlink(temp_path)
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-            temp_path = f.name
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-        try:
llms.txt:bindings/python/tests/test_vexy_json.py:            vexy_json.dump(data, temp_path)
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-            # Read back with standard json to verify
llms.txt:bindings/python/tests/test_vexy_json.py-            with open(temp_path, "r") as f:
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-            temp_path = f.name
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-        try:
llms.txt:bindings/python/tests/test_vexy_json.py:            vexy_json.dump(data, temp_path, indent=2)
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-            with open(temp_path, "r") as f:
llms.txt:bindings/python/tests/test_vexy_json.py-                content = f.read()
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_dumps_basic(self):
llms.txt:bindings/python/tests/test_vexy_json.py-        data = {"name": "Test", "value": 42}
llms.txt:bindings/python/tests/test_vexy_json.py:        json_str = vexy_json.dumps(data)
llms.txt:bindings/python/tests/test_vexy_json.py-        # Parse it back to verify
llms.txt:bindings/python/tests/test_vexy_json.py-        assert json.loads(json_str) == data
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_dumps_with_indent(self):
llms.txt:bindings/python/tests/test_vexy_json.py-        data = {"a": 1, "b": 2}
llms.txt:bindings/python/tests/test_vexy_json.py:        json_str = vexy_json.dumps(data, indent=2)
llms.txt:bindings/python/tests/test_vexy_json.py-        assert "\n" in json_str  # Should have newlines
llms.txt:bindings/python/tests/test_vexy_json.py-        assert json.loads(json_str) == data
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-            "list": [1, 2, 3],
llms.txt:bindings/python/tests/test_vexy_json.py-            "dict": {"nested": True},
llms.txt:bindings/python/tests/test_vexy_json.py-        }
llms.txt:bindings/python/tests/test_vexy_json.py:        json_str = vexy_json.dumps(data)
llms.txt:bindings/python/tests/test_vexy_json.py-        assert json.loads(json_str) == data
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parse_error(self):
llms.txt:bindings/python/tests/test_vexy_json.py-        # Completely invalid JSON
llms.txt:bindings/python/tests/test_vexy_json.py-        with pytest.raises(ValueError):
llms.txt:bindings/python/tests/test_vexy_json.py:            opts = vexy_json.Options(enable_repair=False)
llms.txt:bindings/python/tests/test_vexy_json.py:            vexy_json.parse_with_options("{{{invalid}}}", opts)
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_repair_mode(self):
llms.txt:bindings/python/tests/test_vexy_json.py-        # With repair enabled (default), should handle some errors
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('{"broken":')
llms.txt:bindings/python/tests/test_vexy_json.py-        # Should repair to something valid
llms.txt:bindings/python/tests/test_vexy_json.py-        assert isinstance(result, dict)
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_loads_alias(self):
llms.txt:bindings/python/tests/test_vexy_json.py-        # loads should be an alias for parse
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.loads('{"test": true}')
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"test": True}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_version(self):
llms.txt:bindings/python/tests/test_vexy_json.py-        # Should have version info
llms.txt:bindings/python/tests/test_vexy_json.py:        assert vexy_json.version() is not None
llms.txt:bindings/python/tests/test_vexy_json.py:        assert vexy_json.__version__ is not None
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-if __name__ == "__main__":
llms.txt---
llms.txt-docs/debug-pages/debug-test.html-    <p id="result">Loading...</p>
llms.txt-docs/debug-pages/debug-test.html-
llms.txt-docs/debug-pages/debug-test.html-    <script type="module">
llms.txt:docs/debug-pages/debug-test.html:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
llms.txt-docs/debug-pages/debug-test.html-
llms.txt-docs/debug-pages/debug-test.html-      async function test() {
llms.txt-docs/debug-pages/debug-test.html-        try {
--
llms.txt-docs/assets/js/jsonic-tool.js-    }
llms.txt-docs/assets/js/jsonic-tool.js-
llms.txt-docs/assets/js/jsonic-tool.js-    getParserOptions() {
llms.txt:docs/assets/js/jsonic-tool.js:        // Jsonic uses a different options format than vexy_json
llms.txt-docs/assets/js/jsonic-tool.js-        const options = {};
llms.txt-docs/assets/js/jsonic-tool.js-
llms.txt:docs/assets/js/jsonic-tool.js:        // Note: Jsonic doesn't have as many granular options as vexy_json
llms.txt-docs/assets/js/jsonic-tool.js-        // Most features are enabled by default
llms.txt-docs/assets/js/jsonic-tool.js-        const strictMode = document.getElementById('jsonic-strict')?.checked || false;
llms.txt-docs/assets/js/jsonic-tool.js-
--
llms.txt-tests/jsonic_advanced_features.rs-//! including potential future features and edge cases that push the boundaries of the parser.
llms.txt-tests/jsonic_advanced_features.rs-
llms.txt-tests/jsonic_advanced_features.rs-use rustc_hash::FxHashMap;
llms.txt:tests/jsonic_advanced_features.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
llms.txt-tests/jsonic_advanced_features.rs-
llms.txt-tests/jsonic_advanced_features.rs-/// Helper functions for creating test values
llms.txt-tests/jsonic_advanced_features.rs-#[allow(dead_code)]
--
llms.txt-tests/jsonic_advanced_features.rs-}
llms.txt-tests/jsonic_advanced_features.rs-
llms.txt-tests/jsonic_advanced_features.rs-fn n(num: i64) -> Value {
llms.txt:tests/jsonic_advanced_features.rs:    Value::Number(vexy_json::Number::Integer(num))
llms.txt-tests/jsonic_advanced_features.rs-}
llms.txt-tests/jsonic_advanced_features.rs-
llms.txt-tests/jsonic_advanced_features.rs-fn f(num: f64) -> Value {
llms.txt:tests/jsonic_advanced_features.rs:    Value::Number(vexy_json::Number::Float(num))
llms.txt-tests/jsonic_advanced_features.rs-}
llms.txt-tests/jsonic_advanced_features.rs-
llms.txt-tests/jsonic_advanced_features.rs-#[allow(dead_code)]
--
llms.txt-tests/jsonic_advanced_features.rs-        let small_result = parse("1e-300").unwrap();
llms.txt-tests/jsonic_advanced_features.rs-        assert!(matches!(
llms.txt-tests/jsonic_advanced_features.rs-            small_result,
llms.txt:tests/jsonic_advanced_features.rs:            Value::Number(vexy_json::Number::Float(_))
llms.txt-tests/jsonic_advanced_features.rs-        ));
llms.txt-tests/jsonic_advanced_features.rs-
llms.txt-tests/jsonic_advanced_features.rs-        // Very large floats
llms.txt-tests/jsonic_advanced_features.rs-        let large_result = parse("1e300").unwrap();
llms.txt-tests/jsonic_advanced_features.rs-        assert!(matches!(
llms.txt-tests/jsonic_advanced_features.rs-            large_result,
llms.txt:tests/jsonic_advanced_features.rs:            Value::Number(vexy_json::Number::Float(_))
llms.txt-tests/jsonic_advanced_features.rs-        ));
llms.txt-tests/jsonic_advanced_features.rs-    }
llms.txt-tests/jsonic_advanced_features.rs-
--
llms.txt-docs/debug-pages/error-debug.html-      import init, {
llms.txt-docs/debug-pages/error-debug.html-        parse_json,
llms.txt-docs/debug-pages/error-debug.html-        parse_json_with_options,
llms.txt:docs/debug-pages/error-debug.html:      } from '../pkg/vexy_json_wasm.js';
llms.txt-docs/debug-pages/error-debug.html-
llms.txt-docs/debug-pages/error-debug.html-      let log = '';
llms.txt-docs/debug-pages/error-debug.html-      function appendLog(message) {
--
llms.txt-crates/core/src/parser/recursive.rs-/// # Examples
llms.txt-crates/core/src/parser/recursive.rs-///
llms.txt-crates/core/src/parser/recursive.rs-/// ```
llms.txt:crates/core/src/parser/recursive.rs:/// use vexy_json_core::parser::recursive::parse_recursive;
llms.txt:crates/core/src/parser/recursive.rs:/// use vexy_json_core::parser::ParserOptions;
llms.txt-crates/core/src/parser/recursive.rs-///
llms.txt-crates/core/src/parser/recursive.rs-/// let json = r#"{"key": "value", "number": 42}"#;
llms.txt-crates/core/src/parser/recursive.rs-/// let options = ParserOptions::default();
--
llms.txt-docs/debug-pages/test-basic-wasm.html-  <head>
llms.txt-docs/debug-pages/test-basic-wasm.html-    <meta charset="UTF-8" />
llms.txt-docs/debug-pages/test-basic-wasm.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:docs/debug-pages/test-basic-wasm.html:    <title>Basic vexy_json WASM Test</title>
llms.txt-docs/debug-pages/test-basic-wasm.html-    <style>
llms.txt-docs/debug-pages/test-basic-wasm.html-      body {
llms.txt-docs/debug-pages/test-basic-wasm.html-        font-family: monospace;
--
llms.txt-docs/debug-pages/test-basic-wasm.html-    </style>
llms.txt-docs/debug-pages/test-basic-wasm.html-  </head>
llms.txt-docs/debug-pages/test-basic-wasm.html-  <body>
llms.txt:docs/debug-pages/test-basic-wasm.html:    <h1>Basic vexy_json WASM Test</h1>
llms.txt-docs/debug-pages/test-basic-wasm.html-    <div id="results"></div>
llms.txt-docs/debug-pages/test-basic-wasm.html-
llms.txt-docs/debug-pages/test-basic-wasm.html-    <script type="module">
--
llms.txt-docs/debug-pages/test-basic-wasm.html-          }
llms.txt-docs/debug-pages/test-basic-wasm.html-          addResult('✅ WebAssembly supported', 'success');
llms.txt-docs/debug-pages/test-basic-wasm.html-
llms.txt:docs/debug-pages/test-basic-wasm.html:          addResult('Loading vexy_json module...');
llms.txt:docs/debug-pages/test-basic-wasm.html:          const vexy_json = await import('../pkg/vexy_json_wasm.js');
llms.txt:docs/debug-pages/test-basic-wasm.html:          await vexy_json.default();
llms.txt:docs/debug-pages/test-basic-wasm.html:          addResult('✅ vexy_json module loaded', 'success');
llms.txt-docs/debug-pages/test-basic-wasm.html-
llms.txt-docs/debug-pages/test-basic-wasm.html-          // Test basic parsing
llms.txt-docs/debug-pages/test-basic-wasm.html-          addResult('Testing basic JSON parsing...');
llms.txt:docs/debug-pages/test-basic-wasm.html:          const result1 = vexy_json.parse_json('{"test": true}');
llms.txt-docs/debug-pages/test-basic-wasm.html-          addResult(`✅ Basic parsing: ${JSON.stringify(result1)}`, 'success');
llms.txt-docs/debug-pages/test-basic-wasm.html-
llms.txt-docs/debug-pages/test-basic-wasm.html-          // Test forgiving features
llms.txt-docs/debug-pages/test-basic-wasm.html-          addResult('Testing forgiving features...');
llms.txt:docs/debug-pages/test-basic-wasm.html:          const result2 = vexy_json.parse_json(
llms.txt-docs/debug-pages/test-basic-wasm.html-            '{key: "value", /* comment */ trailing: "comma",}'
llms.txt-docs/debug-pages/test-basic-wasm.html-          );
llms.txt-docs/debug-pages/test-basic-wasm.html-          addResult(
--
llms.txt-docs/debug-pages/test-basic-wasm.html-
llms.txt-docs/debug-pages/test-basic-wasm.html-          // Test validation
llms.txt-docs/debug-pages/test-basic-wasm.html-          addResult('Testing validation...');
llms.txt:docs/debug-pages/test-basic-wasm.html:          const valid = vexy_json.validate_json('{"valid": true}');
llms.txt:docs/debug-pages/test-basic-wasm.html:          const invalid = vexy_json.validate_json('{invalid}');
llms.txt-docs/debug-pages/test-basic-wasm.html-          addResult(
llms.txt-docs/debug-pages/test-basic-wasm.html-            `✅ Validation: valid=${valid}, invalid=${invalid}`,
llms.txt-docs/debug-pages/test-basic-wasm.html-            'success'
--
llms.txt-docs/debug-pages/test-basic-wasm.html-          // Test error handling
llms.txt-docs/debug-pages/test-basic-wasm.html-          addResult('Testing error handling...');
llms.txt-docs/debug-pages/test-basic-wasm.html-          try {
llms.txt:docs/debug-pages/test-basic-wasm.html:            vexy_json.parse_json('{unclosed');
llms.txt-docs/debug-pages/test-basic-wasm.html-            addResult('❌ Should have thrown error', 'error');
llms.txt-docs/debug-pages/test-basic-wasm.html-          } catch (error) {
llms.txt-docs/debug-pages/test-basic-wasm.html-            addResult(`✅ Error handling: ${error.message}`, 'success');
--
llms.txt-docs/debug-pages/test-browsers.html-    <!-- this_file: docs/test-browsers.html -->
llms.txt-docs/debug-pages/test-browsers.html-    <meta charset="UTF-8" />
llms.txt-docs/debug-pages/test-browsers.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:docs/debug-pages/test-browsers.html:    <title>vexy_json Cross-Browser Test Suite</title>
llms.txt-docs/debug-pages/test-browsers.html-    <link
llms.txt-docs/debug-pages/test-browsers.html-      href="https://cdn.jsdelivr.net/npm/daisyui@4.4.19/dist/full.min.css"
llms.txt-docs/debug-pages/test-browsers.html-      rel="stylesheet"
--
llms.txt-docs/debug-pages/test-browsers.html-        <div class="hero-content text-center">
llms.txt-docs/debug-pages/test-browsers.html-          <div class="max-w-md">
llms.txt-docs/debug-pages/test-browsers.html-            <h1 class="text-3xl font-bold">
llms.txt:docs/debug-pages/test-browsers.html:              vexy_json Cross-Browser Test Suite
llms.txt-docs/debug-pages/test-browsers.html-            </h1>
llms.txt-docs/debug-pages/test-browsers.html-            <p class="py-6">
llms.txt-docs/debug-pages/test-browsers.html-              Comprehensive testing for WASM compatibility across browsers
--
llms.txt-docs/debug-pages/test-browsers.html-          name: 'WASM Module Loading',
llms.txt-docs/debug-pages/test-browsers.html-          test: async () => {
llms.txt-docs/debug-pages/test-browsers.html-            try {
llms.txt:docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/test-browsers.html-              return {
llms.txt-docs/debug-pages/test-browsers.html-                success: true,
llms.txt-docs/debug-pages/test-browsers.html-                message: 'WASM module loaded successfully',
--
llms.txt-docs/debug-pages/test-browsers.html-          name: 'Basic JSON Parsing',
llms.txt-docs/debug-pages/test-browsers.html-          test: async () => {
llms.txt-docs/debug-pages/test-browsers.html-            try {
llms.txt:docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/test-browsers.html-              const result = wasmModule.parse_json('{"test": "value"}');
llms.txt-docs/debug-pages/test-browsers.html-              const parsed = JSON.parse(result);
llms.txt-docs/debug-pages/test-browsers.html-              if (parsed.test === 'value') {
--
llms.txt-docs/debug-pages/test-browsers.html-          name: 'Comment Support',
llms.txt-docs/debug-pages/test-browsers.html-          test: async () => {
llms.txt-docs/debug-pages/test-browsers.html-            try {
llms.txt:docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/test-browsers.html-              const input = '{"test": "value" /* comment */}';
llms.txt-docs/debug-pages/test-browsers.html-              const result = wasmModule.parse_json(input);
llms.txt-docs/debug-pages/test-browsers.html-              const parsed = JSON.parse(result);
--
llms.txt-docs/debug-pages/test-browsers.html-          name: 'Unquoted Keys',
llms.txt-docs/debug-pages/test-browsers.html-          test: async () => {
llms.txt-docs/debug-pages/test-browsers.html-            try {
llms.txt:docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/test-browsers.html-              const input = '{test: "value"}';
llms.txt-docs/debug-pages/test-browsers.html-              const result = wasmModule.parse_json(input);
llms.txt-docs/debug-pages/test-browsers.html-              const parsed = JSON.parse(result);
--
llms.txt-docs/debug-pages/test-browsers.html-          name: 'Trailing Commas',
llms.txt-docs/debug-pages/test-browsers.html-          test: async () => {
llms.txt-docs/debug-pages/test-browsers.html-            try {
llms.txt:docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/test-browsers.html-              const input = '{"test": "value",}';
llms.txt-docs/debug-pages/test-browsers.html-              const result = wasmModule.parse_json(input);
llms.txt-docs/debug-pages/test-browsers.html-              const parsed = JSON.parse(result);
--
llms.txt-docs/debug-pages/test-browsers.html-          name: 'Error Handling',
llms.txt-docs/debug-pages/test-browsers.html-          test: async () => {
llms.txt-docs/debug-pages/test-browsers.html-            try {
llms.txt:docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/test-browsers.html-              try {
llms.txt-docs/debug-pages/test-browsers.html-                wasmModule.parse_json('invalid json {{{');
llms.txt-docs/debug-pages/test-browsers.html-                return {
--
llms.txt-docs/debug-pages/test-browsers.html-          name: 'Performance Test',
llms.txt-docs/debug-pages/test-browsers.html-          test: async () => {
llms.txt-docs/debug-pages/test-browsers.html-            try {
llms.txt:docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/test-browsers.html-              const largeJson = JSON.stringify({
llms.txt-docs/debug-pages/test-browsers.html-                array: Array(1000)
llms.txt-docs/debug-pages/test-browsers.html-                  .fill()
--
llms.txt-docs/debug-pages/test-browsers.html-          name: 'Memory Management',
llms.txt-docs/debug-pages/test-browsers.html-          test: async () => {
llms.txt-docs/debug-pages/test-browsers.html-            try {
llms.txt:docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/test-browsers.html-
llms.txt-docs/debug-pages/test-browsers.html-              // Run multiple parse operations to test memory management
llms.txt-docs/debug-pages/test-browsers.html-              for (let i = 0; i < 100; i++) {
--
llms.txt-docs/debug-pages/test-browsers.html-        resultsEl.innerHTML += `<span class="test-fail">Failed: ${failCount}</span>\n`;
llms.txt-docs/debug-pages/test-browsers.html-
llms.txt-docs/debug-pages/test-browsers.html-        if (failCount === 0) {
llms.txt:docs/debug-pages/test-browsers.html:          resultsEl.innerHTML += `\n🎉 All tests passed! vexy_json WASM is compatible with this browser.`;
llms.txt-docs/debug-pages/test-browsers.html-        } else {
llms.txt-docs/debug-pages/test-browsers.html-          resultsEl.innerHTML += `\n⚠️ Some tests failed. Check the results above for details.`;
llms.txt-docs/debug-pages/test-browsers.html-        }
--
llms.txt-docs/assets/js/feedback.js-// this_file: docs/assets/js/feedback.js
llms.txt-docs/assets/js/feedback.js-
llms.txt-docs/assets/js/feedback.js-/**
llms.txt:docs/assets/js/feedback.js: * Feedback System for vexy_json Web Tool
llms.txt-docs/assets/js/feedback.js- * 
llms.txt-docs/assets/js/feedback.js- * Provides user feedback collection functionality including:
llms.txt-docs/assets/js/feedback.js- * - Feedback widget with different categories
--
llms.txt-docs/assets/js/feedback.js-    constructor() {
llms.txt-docs/assets/js/feedback.js-        this.isInitialized = false;
llms.txt-docs/assets/js/feedback.js-        this.feedbackData = {};
llms.txt:docs/assets/js/feedback.js:        this.rateLimitKey = 'vexy_json_feedback_rate_limit';
llms.txt:docs/assets/js/feedback.js:        this.feedbackStorageKey = 'vexy_json_feedback_history';
llms.txt-docs/assets/js/feedback.js-        this.maxFeedbackPerDay = 5; // Rate limiting
llms.txt-docs/assets/js/feedback.js-
llms.txt-docs/assets/js/feedback.js-        // GitHub repository info for issue creation
llms.txt:docs/assets/js/feedback.js:        this.githubRepo = 'twardoch/vexy_json';
llms.txt-docs/assets/js/feedback.js-        this.githubIssueUrl = `https://github.com/${this.githubRepo}/issues/new`;
llms.txt-docs/assets/js/feedback.js-
llms.txt-docs/assets/js/feedback.js-        this.init();
--
llms.txt-docs/assets/js/feedback.js-            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-4 h-4">
llms.txt-docs/assets/js/feedback.js-              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
llms.txt-docs/assets/js/feedback.js-            </svg>
llms.txt:docs/assets/js/feedback.js:            <span>This feedback will be used to improve vexy_json. Technical information helps us debug issues. No personal data is collected unless you provide it.</span>
llms.txt-docs/assets/js/feedback.js-          </div>
llms.txt-docs/assets/js/feedback.js-        </div>
llms.txt-docs/assets/js/feedback.js-        
--
llms.txt-docs/assets/js/feedback.js-            }
llms.txt-docs/assets/js/feedback.js-        }
llms.txt-docs/assets/js/feedback.js-
llms.txt:docs/assets/js/feedback.js:        body += `\n---\n*This issue was created via the vexy_json web tool feedback system.*`;
llms.txt-docs/assets/js/feedback.js-
llms.txt-docs/assets/js/feedback.js-        return {
llms.txt-docs/assets/js/feedback.js-            title: `${typeEmojis[data.type]} ${data.subject}`,
--
llms.txt-docs/plugin-registry.md-**Purpose**: Validate JSON against a schema  
llms.txt-docs/plugin-registry.md-**Usage**:
llms.txt-docs/plugin-registry.md-```rust
llms.txt:docs/plugin-registry.md:use vexy_json_core::plugin::plugins::SchemaValidationPlugin;
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-let schema = parse(r#"{"type": "object", "properties": {"name": {"type": "string"}}}"#)?;
llms.txt-docs/plugin-registry.md-let validator = SchemaValidationPlugin::new(schema);
--
llms.txt-docs/plugin-registry.md-**Purpose**: Parse ISO 8601 dates and convert them to structured objects  
llms.txt-docs/plugin-registry.md-**Usage**:
llms.txt-docs/plugin-registry.md-```rust
llms.txt:docs/plugin-registry.md:use vexy_json_core::plugin::plugins::DateTimePlugin;
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-let mut datetime_plugin = DateTimePlugin::new();
llms.txt-docs/plugin-registry.md-datetime_plugin.transform_value(&mut value, "$")?;
--
llms.txt-docs/plugin-registry.md-**Purpose**: Parse non-standard number formats (hex, binary, underscores)  
llms.txt-docs/plugin-registry.md-**Usage**:
llms.txt-docs/plugin-registry.md-```rust
llms.txt:docs/plugin-registry.md:use vexy_json_core::plugin::plugins::CustomNumberFormatPlugin;
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-let mut number_plugin = CustomNumberFormatPlugin::new();
llms.txt-docs/plugin-registry.md-let result = number_plugin.on_number("0xFF", "$")?;
--
llms.txt-docs/plugin-registry.md-**Purpose**: Preserve comments during parsing  
llms.txt-docs/plugin-registry.md-**Usage**:
llms.txt-docs/plugin-registry.md-```rust
llms.txt:docs/plugin-registry.md:use vexy_json_core::plugin::plugins::CommentPreservationPlugin;
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-let mut comment_plugin = CommentPreservationPlugin::new();
llms.txt-docs/plugin-registry.md-comment_plugin.add_comment("Description".to_string(), "$.field", false);
--
llms.txt-docs/plugin-registry.md-All plugins must implement the `ParserPlugin` trait:
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-```rust
llms.txt:docs/plugin-registry.md:use vexy_json_core::plugin::ParserPlugin;
llms.txt:docs/plugin-registry.md:use vexy_json_core::ast::Value;
llms.txt:docs/plugin-registry.md:use vexy_json_core::error::Result;
llms.txt-docs/plugin-registry.md-use std::any::Any;
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-struct MyPlugin;
--
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-#### Direct Integration
llms.txt-docs/plugin-registry.md-```rust
llms.txt:docs/plugin-registry.md:use vexy_json_core::parser::Parser;
llms.txt:docs/plugin-registry.md:use vexy_json_core::plugin::ParserPluginManager;
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-let mut manager = ParserPluginManager::new();
llms.txt-docs/plugin-registry.md-manager.register(Box::new(MyPlugin));
--
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-#### Parser Options
llms.txt-docs/plugin-registry.md-```rust
llms.txt:docs/plugin-registry.md:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-let options = ParserOptions {
llms.txt-docs/plugin-registry.md-    plugins: vec![Box::new(MyPlugin)],
--
llms.txt-docs/plugin-registry.md-#[cfg(test)]
llms.txt-docs/plugin-registry.md-mod tests {
llms.txt-docs/plugin-registry.md-    use super::*;
llms.txt:docs/plugin-registry.md:    use vexy_json::parse;
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-    #[test]
llms.txt-docs/plugin-registry.md-    fn test_my_plugin() {
--
llms.txt-bindings/python/pyproject.toml-
llms.txt-bindings/python/pyproject.toml-
llms.txt-bindings/python/pyproject.toml-[project]
llms.txt:bindings/python/pyproject.toml:name = "vexy_json"
llms.txt-bindings/python/pyproject.toml-version = "2.2.3"
llms.txt-bindings/python/pyproject.toml-description = "A forgiving JSON parser for Python - port of the JavaScript library jsonic"
llms.txt-bindings/python/pyproject.toml-readme = "README.md"
--
llms.txt-bindings/python/pyproject.toml-
llms.txt-bindings/python/pyproject.toml-
llms.txt-bindings/python/pyproject.toml-[project.urls]
llms.txt:bindings/python/pyproject.toml:Homepage = "https://github.com/twardoch/vexy_json"
llms.txt:bindings/python/pyproject.toml:Repository = "https://github.com/twardoch/vexy_json"
llms.txt:bindings/python/pyproject.toml:Issues = "https://github.com/twardoch/vexy_json/issues"
llms.txt-bindings/python/pyproject.toml-
llms.txt-bindings/python/pyproject.toml-
llms.txt-bindings/python/pyproject.toml-[tool.maturin]
llms.txt-bindings/python/pyproject.toml-python-source = "src"
llms.txt:bindings/python/pyproject.toml:module-name = "vexy_json.vexy_json"
llms.txt-bindings/python/pyproject.toml-features = [ "pyo3/extension-module" ]
llms.txt---
llms.txt-docs/drafts/work-progress.md-
llms.txt-docs/drafts/work-progress.md-**Project Status**: ✅ **CORE DEVELOPMENT COMPLETE**
llms.txt-docs/drafts/work-progress.md-
llms.txt:docs/drafts/work-progress.md:All core development goals have been achieved as of January 8, 2025. The vexy_json parser is fully functional with:
llms.txt-docs/drafts/work-progress.md-- Complete forgiving JSON parsing capabilities
llms.txt-docs/drafts/work-progress.md-- 100% test suite pass rate
llms.txt-docs/drafts/work-progress.md-- Jekyll web tool integration
--
llms.txt-docs/drafts/work-progress.md-- [x] Create repair action tracking and reporting system
llms.txt-docs/drafts/work-progress.md-
llms.txt-docs/drafts/work-progress.md-### Implementation Details:
llms.txt:docs/drafts/work-progress.md:- **Three-tier parsing strategy**: serde_json (fast) → vexy_json (forgiving) → repair (tolerant)
llms.txt-docs/drafts/work-progress.md-- **Internal repair implementation**: Custom `JsonRepairer` for bracket balancing
llms.txt-docs/drafts/work-progress.md-- **Enhanced error types**: Added `RepairFailed`, `BracketMismatch`, `UnbalancedBrackets`, `MaxRepairsExceeded`
llms.txt-docs/drafts/work-progress.md-- **Repair tracking**: `RepairAction` and `RepairType` enums with detailed reporting
--
llms.txt-docs/drafts/work-progress.md-- [x] Study theoretical foundations (PEG with labeled failures, GLR parsers, etc.)
llms.txt-docs/drafts/work-progress.md-- [x] Investigate practical heuristics for bracket balancing
llms.txt-docs/drafts/work-progress.md-- [x] Create comprehensive specification for `json-repair` integration (see issues/106.txt)
llms.txt:docs/drafts/work-progress.md:- [x] Design fallback chain architecture (fastest → core vexy_json → json-repair)
llms.txt-docs/drafts/work-progress.md-- [x] Plan implementation strategy with minimal disruption to existing code
llms.txt-docs/drafts/work-progress.md-
llms.txt-docs/drafts/work-progress.md-### Research Findings:
--
llms.txt-docs/drafts/work-progress.md-- Identified `json-repair` crate as viable solution for bracket mismatch handling
llms.txt-docs/drafts/work-progress.md-- Found multiple approaches: panic-mode recovery, PEG labeled failures, GLR parsing
llms.txt-docs/drafts/work-progress.md-- Documented strategies from academic research and practical implementations
llms.txt:docs/drafts/work-progress.md:- Key insight: Three-tier parsing approach (serde_json → vexy_json → json-repair) for optimal performance
llms.txt-docs/drafts/work-progress.md-
llms.txt-docs/drafts/work-progress.md-## Recently Completed: Streaming Parser Implementation ✅
llms.txt-docs/drafts/work-progress.md-
--
llms.txt-docs/drafts/work-progress.md-
llms.txt-docs/drafts/work-progress.md-**Status**: ✅ COMPLETED (January 8, 2025)
llms.txt-docs/drafts/work-progress.md-
llms.txt:docs/drafts/work-progress.md:Successfully implemented comprehensive Python bindings that make vexy_json available to Python users via PyO3 bindings:
llms.txt-docs/drafts/work-progress.md-
llms.txt-docs/drafts/work-progress.md-- **Core API**: Complete Python bindings with `parse()`, `loads()`, `parse_with_options()`, `is_valid()`, `dumps()`
llms.txt-docs/drafts/work-progress.md-- **File Operations**: Added `load()` and `dump()` functions for file-like objects
--
llms.txt-docs/drafts/work-progress.md-
llms.txt-docs/drafts/work-progress.md-**Status**: ✅ COMPLETED (January 8, 2025)
llms.txt-docs/drafts/work-progress.md-
llms.txt:docs/drafts/work-progress.md:Successfully implemented comprehensive CLI enhancements that transform vexy_json from a basic parser into a powerful JSON processing tool:
llms.txt-docs/drafts/work-progress.md-
llms.txt-docs/drafts/work-progress.md-- **Enhanced CLI Interface**: 15+ new command-line options and flags
llms.txt-docs/drafts/work-progress.md-- **Advanced Processing**: Watch mode (`--watch`), parallel processing (`--parallel`), batch operations
llms.txt---
llms.txt-docs/build-status.md-# Build Status Dashboard
llms.txt-docs/build-status.md-
llms.txt:docs/build-status.md:This page provides an overview of the current build status and health metrics for the vexy_json project.
llms.txt-docs/build-status.md-
llms.txt-docs/build-status.md-## Continuous Integration Status
llms.txt-docs/build-status.md-
--
llms.txt-docs/build-status.md-
llms.txt-docs/build-status.md-| Workflow | Status | Description |
llms.txt-docs/build-status.md-|----------|--------|-------------|
llms.txt:docs/build-status.md:| WASM Build | [![Build Status](https://github.com/twardoch/vexy_json/workflows/Build%20and%20Deploy%20WASM/badge.svg)](https://github.com/twardoch/vexy_json/actions/workflows/wasm-build.yml) | Builds WebAssembly module and deploys to GitHub Pages |
llms.txt:docs/build-status.md:| Security Audit | [![Security Audit](https://github.com/twardoch/vexy_json/workflows/Security%20Audit/badge.svg)](https://github.com/twardoch/vexy_json/actions/workflows/security.yml) | Checks for security vulnerabilities in dependencies |
llms.txt:docs/build-status.md:| Release | [![Release](https://github.com/twardoch/vexy_json/workflows/Release/badge.svg)](https://github.com/twardoch/vexy_json/actions/workflows/release.yml) | Automated release process for tagged versions |
llms.txt-docs/build-status.md-
llms.txt-docs/build-status.md-### Package Registries
llms.txt-docs/build-status.md-
llms.txt-docs/build-status.md-| Registry | Version | Downloads |
llms.txt-docs/build-status.md-|----------|---------|-----------|
llms.txt:docs/build-status.md:| crates.io | [![crates.io](https://img.shields.io/crates/v/vexy_json.svg)](https://crates.io/crates/vexy_json) | [![Downloads](https://img.shields.io/crates/d/vexy_json.svg)](https://crates.io/crates/vexy_json) |
llms.txt:docs/build-status.md:| docs.rs | [![docs.rs](https://docs.rs/vexy_json/badge.svg)](https://docs.rs/vexy_json) | - |
llms.txt:docs/build-status.md:| npm | [![npm](https://img.shields.io/npm/v/@vexy_json/vexy_json.svg)](https://www.npmjs.com/package/@vexy_json/vexy_json) | [![npm downloads](https://img.shields.io/npm/dm/@vexy_json/vexy_json.svg)](https://www.npmjs.com/package/@vexy_json/vexy_json) |
llms.txt-docs/build-status.md-
llms.txt-docs/build-status.md-## Code Quality Metrics
llms.txt-docs/build-status.md-
--
llms.txt-docs/build-status.md-## Deployment Status
llms.txt-docs/build-status.md-
llms.txt-docs/build-status.md-### Live Deployments
llms.txt:docs/build-status.md:- **Vexy JSON Tool**: [https://twardoch.github.io/vexy_json/vexy_json-tool/](https://twardoch.github.io/vexy_json/vexy_json-tool/)
llms.txt:docs/build-status.md:- **Jsonic Tool**: [https://twardoch.github.io/vexy_json/jsonic-tool/](https://twardoch.github.io/vexy_json/jsonic-tool/)
llms.txt:docs/build-status.md:- **Tools Overview**: [https://twardoch.github.io/vexy_json/tools/](https://twardoch.github.io/vexy_json/tools/)
llms.txt:docs/build-status.md:- **Documentation**: [https://docs.rs/vexy_json](https://docs.rs/vexy_json)
llms.txt-docs/build-status.md-- **GitHub Pages**: Automatically deployed on main branch updates
llms.txt-docs/build-status.md-
llms.txt-docs/build-status.md-### Release Artifacts
--
llms.txt-docs/build-status.md-- **As Needed**: Bug fixes and feature updates
llms.txt-docs/build-status.md-
llms.txt-docs/build-status.md-### Contact
llms.txt:docs/build-status.md:For build failures or urgent issues, please [create an issue](https://github.com/twardoch/vexy_json/issues/new) on GitHub.
llms.txt---
llms.txt-docs/debug-pages/direct-debug.html-    <pre id="log"></pre>
llms.txt-docs/debug-pages/direct-debug.html-
llms.txt-docs/debug-pages/direct-debug.html-    <script type="module">
llms.txt:docs/debug-pages/direct-debug.html:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
llms.txt-docs/debug-pages/direct-debug.html-
llms.txt-docs/debug-pages/direct-debug.html-      let log = '';
llms.txt-docs/debug-pages/direct-debug.html-      function appendLog(message) {
--
llms.txt-docs/assets/js/error-highlighting.js-// this_file: docs/assets/js/error-highlighting.js
llms.txt-docs/assets/js/error-highlighting.js-
llms.txt-docs/assets/js/error-highlighting.js-/**
llms.txt:docs/assets/js/error-highlighting.js: * Error highlighting system for the vexy_json web tool
llms.txt-docs/assets/js/error-highlighting.js- * Provides position-aware error display with line/column detection
llms.txt-docs/assets/js/error-highlighting.js- */
llms.txt-docs/assets/js/error-highlighting.js-
--
llms.txt-docs/assets/js/error-highlighting.js-    }
llms.txt-docs/assets/js/error-highlighting.js-
llms.txt-docs/assets/js/error-highlighting.js-    /**
llms.txt:docs/assets/js/error-highlighting.js:     * Parse vexy_json error message to extract position
llms.txt-docs/assets/js/error-highlighting.js-     * @param {string} errorMessage - Raw error message
llms.txt-docs/assets/js/error-highlighting.js-     * @returns {object} Parsed error information
llms.txt-docs/assets/js/error-highlighting.js-     */
--
llms.txt-benches/memory_benchmarks.rs-use std::alloc::{GlobalAlloc, Layout, System};
llms.txt-benches/memory_benchmarks.rs-use std::sync::atomic::{AtomicUsize, Ordering};
llms.txt-benches/memory_benchmarks.rs-use std::sync::Arc;
llms.txt:benches/memory_benchmarks.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-benches/memory_benchmarks.rs-
llms.txt-benches/memory_benchmarks.rs-/// A tracking allocator that wraps the system allocator
llms.txt-benches/memory_benchmarks.rs-/// to monitor memory allocations during benchmarks
--
llms.txt-docs/design.md-
llms.txt-docs/design.md-# Design
llms.txt-docs/design.md-
llms.txt:docs/design.md:This section contains design documents and architectural decisions for the vexy_json project.
llms.txt-docs/design.md-
llms.txt-docs/design.md-## Topics
llms.txt-docs/design.md-
--
llms.txt-tests/jsonic_real_world_scenarios.rs-//! when using jsonic for configuration files, data exchange, and other practical applications.
llms.txt-tests/jsonic_real_world_scenarios.rs-
llms.txt-tests/jsonic_real_world_scenarios.rs-use rustc_hash::FxHashMap;
llms.txt:tests/jsonic_real_world_scenarios.rs:use vexy_json::{parse, Value};
llms.txt-tests/jsonic_real_world_scenarios.rs-
llms.txt-tests/jsonic_real_world_scenarios.rs-/// Helper functions for creating test values
llms.txt-tests/jsonic_real_world_scenarios.rs-#[allow(dead_code)]
--
llms.txt-tests/jsonic_real_world_scenarios.rs-}
llms.txt-tests/jsonic_real_world_scenarios.rs-
llms.txt-tests/jsonic_real_world_scenarios.rs-fn n(num: i64) -> Value {
llms.txt:tests/jsonic_real_world_scenarios.rs:    Value::Number(vexy_json::Number::Integer(num))
llms.txt-tests/jsonic_real_world_scenarios.rs-}
llms.txt-tests/jsonic_real_world_scenarios.rs-
llms.txt-tests/jsonic_real_world_scenarios.rs-#[allow(dead_code)]
llms.txt-tests/jsonic_real_world_scenarios.rs-fn f(num: f64) -> Value {
llms.txt:tests/jsonic_real_world_scenarios.rs:    Value::Number(vexy_json::Number::Float(num))
llms.txt-tests/jsonic_real_world_scenarios.rs-}
llms.txt-tests/jsonic_real_world_scenarios.rs-
llms.txt-tests/jsonic_real_world_scenarios.rs-fn b(val: bool) -> Value {
--
llms.txt-docs/development.md-
llms.txt-docs/development.md-# Development
llms.txt-docs/development.md-
llms.txt:docs/development.md:This section contains documentation for developers working on the vexy_json project.
llms.txt-docs/development.md-
llms.txt-docs/development.md-## Topics
llms.txt-docs/development.md-
llms.txt---
llms.txt-bindings/python/Cargo.toml-[package]
llms.txt:bindings/python/Cargo.toml:name = "vexy_json-python"
llms.txt-bindings/python/Cargo.toml-version = "2.2.3"
llms.txt-bindings/python/Cargo.toml-edition = "2021"
llms.txt-bindings/python/Cargo.toml-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-bindings/python/Cargo.toml-license = "MIT OR Apache-2.0"
llms.txt:bindings/python/Cargo.toml:description = "Python bindings for vexy_json - a forgiving JSON parser"
llms.txt:bindings/python/Cargo.toml:repository = "https://github.com/twardoch/vexy_json"
llms.txt-bindings/python/Cargo.toml-keywords = [ "json", "parser", "forgiving", "repair", "python" ]
llms.txt-bindings/python/Cargo.toml-categories = [ "encoding", "parser-implementations" ]
llms.txt-bindings/python/Cargo.toml-
llms.txt-bindings/python/Cargo.toml-
llms.txt-bindings/python/Cargo.toml-[lib]
llms.txt:bindings/python/Cargo.toml:name = "vexy_json"
llms.txt-bindings/python/Cargo.toml-crate-type = [ "cdylib" ]
llms.txt-bindings/python/Cargo.toml-
llms.txt-bindings/python/Cargo.toml-
--
llms.txt-bindings/python/Cargo.toml-serde_json = "1.0"
llms.txt-bindings/python/Cargo.toml-
llms.txt-bindings/python/Cargo.toml-
llms.txt:bindings/python/Cargo.toml:[dependencies.vexy_json-core]
llms.txt-bindings/python/Cargo.toml-path = "../../crates/core"
llms.txt-bindings/python/Cargo.toml-version = "2.0.0"
llms.txt-bindings/python/Cargo.toml-
llms.txt---
llms.txt-tests/jsonic_compat.rs-use rustc_hash::FxHashMap;
llms.txt:tests/jsonic_compat.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
llms.txt-tests/jsonic_compat.rs-
llms.txt-tests/jsonic_compat.rs-/// Helper to create expected values more easily
llms.txt-tests/jsonic_compat.rs-fn obj(pairs: &[(&str, Value)]) -> Value {
--
llms.txt-tests/jsonic_compat.rs-}
llms.txt-tests/jsonic_compat.rs-
llms.txt-tests/jsonic_compat.rs-fn n(num: i64) -> Value {
llms.txt:tests/jsonic_compat.rs:    Value::Number(vexy_json::Number::Integer(num))
llms.txt-tests/jsonic_compat.rs-}
llms.txt-tests/jsonic_compat.rs-
llms.txt-tests/jsonic_compat.rs-fn f(num: f64) -> Value {
llms.txt:tests/jsonic_compat.rs:    Value::Number(vexy_json::Number::Float(num))
llms.txt-tests/jsonic_compat.rs-}
llms.txt-tests/jsonic_compat.rs-
llms.txt-tests/jsonic_compat.rs-#[test]
--
llms.txt-docs/debug-pages/test-wasm.html-  <head>
llms.txt-docs/debug-pages/test-wasm.html-    <meta charset="UTF-8" />
llms.txt-docs/debug-pages/test-wasm.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:docs/debug-pages/test-wasm.html:    <title>vexy_json WASM Test</title>
llms.txt-docs/debug-pages/test-wasm.html-    <style>
llms.txt-docs/debug-pages/test-wasm.html-      body {
llms.txt-docs/debug-pages/test-wasm.html-        font-family: Arial, sans-serif;
--
llms.txt-docs/debug-pages/test-wasm.html-    </style>
llms.txt-docs/debug-pages/test-wasm.html-  </head>
llms.txt-docs/debug-pages/test-wasm.html-  <body>
llms.txt:docs/debug-pages/test-wasm.html:    <h1>vexy_json WebAssembly Test Page</h1>
llms.txt:docs/debug-pages/test-wasm.html:    <p>Testing the vexy_json WASM module functionality...</p>
llms.txt-docs/debug-pages/test-wasm.html-
llms.txt-docs/debug-pages/test-wasm.html-    <div id="results"></div>
llms.txt-docs/debug-pages/test-wasm.html-
--
llms.txt-docs/debug-pages/test-wasm.html-        get_parser_options,
llms.txt-docs/debug-pages/test-wasm.html-        stringify_value,
llms.txt-docs/debug-pages/test-wasm.html-        get_version_info,
llms.txt:docs/debug-pages/test-wasm.html:      } from '../pkg/vexy_json_wasm.js';
llms.txt-docs/debug-pages/test-wasm.html-
llms.txt-docs/debug-pages/test-wasm.html-      const resultsDiv = document.getElementById('results');
llms.txt-docs/debug-pages/test-wasm.html-
--
llms.txt-docs/debug-pages/test-wasm.html-            addResult(
llms.txt-docs/debug-pages/test-wasm.html-              'Version Info',
llms.txt-docs/debug-pages/test-wasm.html-              true,
llms.txt:docs/debug-pages/test-wasm.html:              `vexy_json v${versionInfo.version}\n${versionInfo.description}`
llms.txt-docs/debug-pages/test-wasm.html-            );
llms.txt-docs/debug-pages/test-wasm.html-          } catch (e) {
llms.txt-docs/debug-pages/test-wasm.html-            addResult('Version Info', false, `Error: ${e.message}`);
--
llms.txt-docs/features.md-
llms.txt-docs/features.md-# Forgiving Features
llms.txt-docs/features.md-
llms.txt:docs/features.md:`vexy_json` is a forgiving JSON parser, handling common deviations from strict JSON (RFC 8259). Below are the supported forgiving features, enhanced in v2.0.0 with streaming, parallel processing, and plugin capabilities:
llms.txt-docs/features.md-
llms.txt-docs/features.md-## Comments
llms.txt-docs/features.md-
--
llms.txt-docs/features.md-Object keys can be unquoted if they are valid identifiers.
llms.txt-docs/features.md-
llms.txt-docs/features.md-```json
llms.txt:docs/features.md:{ name: "vexy_json", version: 1.0 }
llms.txt-docs/features.md-```
llms.txt-docs/features.md-
llms.txt-docs/features.md-## Trailing Commas
--
llms.txt-docs/features.md-
llms.txt-docs/features.md-All forgiving features can be disabled for strict RFC 8259 compliance.
llms.txt-docs/features.md-
llms.txt:docs/features.md:These forgiving features make `vexy_json` a flexible parser for configurations, data files, and other scenarios where strict JSON adherence might be relaxed.
llms.txt-docs/features.md-
llms.txt-docs/features.md-## New in v2.0.0: Advanced Features
llms.txt-docs/features.md-
--
llms.txt-docs/features.md-- Linear scalability with core count
llms.txt-docs/features.md-
llms.txt-docs/features.md-### Plugin Architecture
llms.txt:docs/features.md:Extend vexy_json with custom functionality:
llms.txt-docs/features.md-- Transform values during parsing
llms.txt-docs/features.md-- Add custom validation rules
llms.txt-docs/features.md-- Implement domain-specific logic
--
llms.txt-docs/_config.yml-author:
llms.txt-docs/_config.yml-  name: Adam Twardoch
llms.txt-docs/_config.yml-  url: https://github.com/twardoch
llms.txt:docs/_config.yml:baseurl: /vexy_json
llms.txt-docs/_config.yml-# Collections
llms.txt-docs/_config.yml-collections:
llms.txt-docs/_config.yml-  pages:
--
llms.txt-docs/_config.yml-  - '**/gems/jekyll-*/lib/site_template/_posts/*'
llms.txt-docs/_config.yml-  - 'internal/**/*'
llms.txt-docs/_config.yml-github:
llms.txt:docs/_config.yml:  repository_url: https://github.com/twardoch/vexy_json
llms.txt-docs/_config.yml-highlighter: rouge
llms.txt-docs/_config.yml-# Include WASM and tool files in build
llms.txt-docs/_config.yml-include:
--
llms.txt-docs/_config.yml-back_to_top_text: "Back to top"
llms.txt-docs/_config.yml-
llms.txt-docs/_config.yml-# Footer content
llms.txt:docs/_config.yml:footer_content: "Copyright &copy; 2025 Adam Twardoch. Distributed by an <a href=\"https://github.com/twardoch/vexy_json/tree/main/LICENSE\">MIT license.</a>"
llms.txt-docs/_config.yml-
llms.txt-docs/_config.yml-# External navigation links will be removed from here as just-the-docs handles them in the content
llms.txt-docs/_config.yml-# Plugin configuration
--
llms.txt-docs/_config.yml-  - jekyll-sitemap
llms.txt-docs/_config.yml-  - jekyll-optional-front-matter
llms.txt-docs/_config.yml-# Repository information
llms.txt:docs/_config.yml:repository: twardoch/vexy_json
llms.txt-docs/_config.yml-# Performance and caching
llms.txt-docs/_config.yml-sass:
llms.txt-docs/_config.yml-  style: compressed
--
llms.txt-docs/_config.yml-social:
llms.txt-docs/_config.yml-  - icon: github
llms.txt-docs/_config.yml-    name: GitHub
llms.txt:docs/_config.yml:    url: https://github.com/twardoch/vexy_json
llms.txt-docs/_config.yml-# WASM and static file configuration
llms.txt-docs/_config.yml-# Ensure proper MIME types for WebAssembly files
llms.txt-docs/_config.yml-static_files:
--
llms.txt-docs/_config.yml-  - /pkg/*.js
llms.txt-docs/_config.yml-  - /assets/**/*
llms.txt-docs/_config.yml-remote_theme: just-the-docs/just-the-docs
llms.txt:docs/_config.yml:# Site configuration for vexy_json documentation
llms.txt:docs/_config.yml:title: vexy_json - Forgiving JSON Parser
llms.txt-docs/_config.yml-url: https://twardoch.github.io
llms.txt-docs/_config.yml-# MIME type handling for GitHub Pages
llms.txt-docs/_config.yml-# Note: GitHub Pages automatically serves .wasm files with application/wasm MIME type
llms.txt---
llms.txt:debug_test7.rs:use vexy_json::parse;
llms.txt-debug_test7.rs-
llms.txt-debug_test7.rs-fn main() {
llms.txt-debug_test7.rs-    // Test the exact failing case
llms.txt---
llms.txt:tests/basic_tests.rs:use vexy_json::{parse, Value};
llms.txt-tests/basic_tests.rs-
llms.txt-tests/basic_tests.rs-#[test]
llms.txt-tests/basic_tests.rs-fn test_parse_null() {
llms.txt---
llms.txt-tests/comment_handling.rs-// this_file: tests/comment_handling.rs
llms.txt-tests/comment_handling.rs-
llms.txt:tests/comment_handling.rs:use vexy_json::{parse, Value};
llms.txt-tests/comment_handling.rs-
llms.txt-tests/comment_handling.rs-/// Comment handling tests ported from jsonic comment.test.js
llms.txt-tests/comment_handling.rs-/// Tests single-line, multi-line comments, hash behavior, and edge cases
--
llms.txt-tests/comment_handling.rs-    let result = parse("42 // comment");
llms.txt-tests/comment_handling.rs-    match result {
llms.txt-tests/comment_handling.rs-        Ok(val) if val.as_f64() == Some(42.0) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json supports // comments");
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Ok(other) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json parsed as: {:?}", other);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Err(e) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json error on // comments: {:?}", e);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-    }
llms.txt-tests/comment_handling.rs-}
--
llms.txt-tests/comment_handling.rs-    let result = parse("42 /* comment */");
llms.txt-tests/comment_handling.rs-    match result {
llms.txt-tests/comment_handling.rs-        Ok(val) if val.as_f64() == Some(42.0) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json supports /* */ comments");
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Ok(other) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json parsed as: {:?}", other);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Err(e) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json error on /* */ comments: {:?}", e);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-    }
llms.txt-tests/comment_handling.rs-}
--
llms.txt-tests/comment_handling.rs-    let result = parse("a#b");
llms.txt-tests/comment_handling.rs-    match result {
llms.txt-tests/comment_handling.rs-        Ok(Value::String(s)) if s == "a" => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json treats # as comment");
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Ok(Value::String(s)) if s.contains('#') => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json treats # as literal: {:?}", s);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Ok(other) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json parsed a#b as: {:?}", other);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Err(e) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json error on #: {:?}", e);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-    }
llms.txt-tests/comment_handling.rs-}
--
llms.txt-tests/comment_handling.rs-    let result = parse("[1, // comment\n2]");
llms.txt-tests/comment_handling.rs-    match result {
llms.txt-tests/comment_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 2 => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json supports comments in arrays");
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Ok(other) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json parsed array comment as: {:?}", other);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Err(_) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json doesn't support comments in arrays");
llms.txt-tests/comment_handling.rs-            let fallback = parse("[1, 2]").unwrap();
llms.txt-tests/comment_handling.rs-            assert!(matches!(fallback, Value::Array(_)));
llms.txt-tests/comment_handling.rs-        }
--
llms.txt-tests/comment_handling.rs-    let result = parse("42//");
llms.txt-tests/comment_handling.rs-    match result {
llms.txt-tests/comment_handling.rs-        Ok(val) if val.as_f64() == Some(42.0) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json supports empty // comments");
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Ok(other) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json parsed 42// as: {:?}", other);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Err(e) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json error on empty //: {:?}", e);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-    }
llms.txt-tests/comment_handling.rs-}
--
llms.txt-tests/comment_handling.rs-        Ok(Value::Object(obj)) => {
llms.txt-tests/comment_handling.rs-            if let Some(val) = obj.get("a") {
llms.txt-tests/comment_handling.rs-                if val.as_f64() == Some(1.0) {
llms.txt:tests/comment_handling.rs:                    println!("vexy_json supports comments at EOF");
llms.txt-tests/comment_handling.rs-                }
llms.txt-tests/comment_handling.rs-            }
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Ok(other) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json parsed EOF comment as: {:?}", other);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Err(e) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json error on EOF comment: {:?}", e);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-    }
llms.txt-tests/comment_handling.rs-}
llms.txt---
llms.txt:docs/drafts/publication-ready.md:# 🚀 vexy_json v1.1.0 - Ready for Publication
llms.txt-docs/drafts/publication-ready.md-
llms.txt-docs/drafts/publication-ready.md-## ✅ Status: READY FOR PUBLICATION
llms.txt-docs/drafts/publication-ready.md-
--
llms.txt-docs/drafts/publication-ready.md-## 📦 Package Details
llms.txt-docs/drafts/publication-ready.md-
llms.txt-docs/drafts/publication-ready.md-- **Version**: 1.1.0
llms.txt:docs/drafts/publication-ready.md:- **Name**: vexy_json
llms.txt-docs/drafts/publication-ready.md-- **Description**: A forgiving JSON parser - Rust port of jsonic
llms.txt:docs/drafts/publication-ready.md:- **Repository**: https://github.com/twardoch/vexy_json
llms.txt-docs/drafts/publication-ready.md-- **License**: MIT OR Apache-2.0
llms.txt-docs/drafts/publication-ready.md-- **Keywords**: json, parser, forgiving, jsonic
llms.txt-docs/drafts/publication-ready.md-- **Categories**: parser-implementations, encoding
--
llms.txt-docs/drafts/publication-ready.md-## 📊 What's Included
llms.txt-docs/drafts/publication-ready.md-
llms.txt-docs/drafts/publication-ready.md-- Core library with all forgiving JSON features
llms.txt:docs/drafts/publication-ready.md:- CLI tool (`vexy_json` binary)
llms.txt-docs/drafts/publication-ready.md-- WebAssembly bindings (optional feature)
llms.txt-docs/drafts/publication-ready.md-- Comprehensive test suite (73 tests)
llms.txt-docs/drafts/publication-ready.md-- Performance benchmarks
--
llms.txt-docs/contributing.md-nav_order: 7
llms.txt-docs/contributing.md----
llms.txt-docs/contributing.md-
llms.txt:docs/contributing.md:# Contributing to vexy_json
llms.txt-docs/contributing.md-
llms.txt:docs/contributing.md:We welcome contributions to `vexy_json`! Whether it's bug reports, feature requests, documentation improvements, or code contributions, your help is greatly appreciated.
llms.txt-docs/contributing.md-
llms.txt-docs/contributing.md-## How to Contribute
llms.txt-docs/contributing.md-
llms.txt:docs/contributing.md:1.  **Fork the Repository**: Start by forking the `vexy_json` repository on GitHub.
llms.txt-docs/contributing.md-2.  **Clone Your Fork**: Clone your forked repository to your local machine:
llms.txt-docs/contributing.md-    ```bash
llms.txt:docs/contributing.md:    git clone https://github.com/your-username/vexy_json.git
llms.txt:docs/contributing.md:    cd vexy_json
llms.txt-docs/contributing.md-    ```
llms.txt-docs/contributing.md-3.  **Create a New Branch**: Create a new branch for your feature or bug fix:
llms.txt-docs/contributing.md-    ```bash
--
llms.txt-docs/contributing.md-    ```bash
llms.txt-docs/contributing.md-    git push origin feature/your-feature-name
llms.txt-docs/contributing.md-    ```
llms.txt:docs/contributing.md:9.  **Create a Pull Request**: Open a pull request from your fork to the `main` branch of the `vexy_json` repository. Provide a detailed description of your changes.
llms.txt-docs/contributing.md-
llms.txt-docs/contributing.md-## Code Style and Conventions
llms.txt-docs/contributing.md-
--
llms.txt-docs/contributing.md-
llms.txt-docs/contributing.md-## Extending the Web Tool
llms.txt-docs/contributing.md-
llms.txt:docs/contributing.md:If you're looking to contribute specifically to the `vexy_json` web tool, please refer to the [Developer Guide for Extending the Web Tool](developer-guide.md) for detailed information on its structure, build process, and development considerations.
llms.txt-docs/contributing.md-
llms.txt-docs/contributing.md-## Reporting Bugs
llms.txt-docs/contributing.md-
llms.txt:docs/contributing.md:If you find a bug, please open an issue on the [GitHub Issues page](https://github.com/twardoch/vexy_json/issues). When reporting a bug, please include:
llms.txt-docs/contributing.md-
llms.txt-docs/contributing.md--   A clear and concise description of the bug.
llms.txt-docs/contributing.md--   Steps to reproduce the behavior.
--
llms.txt-docs/contributing.md-
llms.txt-docs/contributing.md-## Feature Requests
llms.txt-docs/contributing.md-
llms.txt:docs/contributing.md:Have an idea for a new feature? Open an issue on the [GitHub Issues page](https://github.com/twardoch/vexy_json/issues) to discuss it. Describe the feature, why you think it would be valuable, and any potential implementation details.
llms.txt-docs/contributing.md-
llms.txt:docs/contributing.md:Thank you for contributing to `vexy_json`!
llms.txt---
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-## Overview
llms.txt-docs/streaming-api.md-
llms.txt:docs/streaming-api.md:The vexy_json streaming parser provides an event-driven API for parsing JSON incrementally, making it suitable for:
llms.txt-docs/streaming-api.md-- Processing large JSON files without loading them entirely into memory
llms.txt-docs/streaming-api.md-- Real-time parsing of JSON data streams
llms.txt-docs/streaming-api.md-- Parsing newline-delimited JSON (NDJSON) files
--
llms.txt-docs/streaming-api.md-The main streaming parser that processes input incrementally and emits parsing events.
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-```rust
llms.txt:docs/streaming-api.md:use vexy_json::{StreamingParser, StreamingEvent};
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-let mut parser = StreamingParser::new();
llms.txt-docs/streaming-api.md-parser.feed(r#"{"key": "value"}"#)?;
--
llms.txt-docs/streaming-api.md-Utility for building Value objects from streaming events:
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-```rust
llms.txt:docs/streaming-api.md:use vexy_json::{StreamingParser, StreamingValueBuilder};
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-let mut parser = StreamingParser::new();
llms.txt-docs/streaming-api.md-let mut builder = StreamingValueBuilder::new();
--
llms.txt-docs/streaming-api.md-Parser for newline-delimited JSON where each line is a separate JSON value:
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-```rust
llms.txt:docs/streaming-api.md:use vexy_json::NdJsonParser;
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-let mut parser = NdJsonParser::new();
llms.txt-docs/streaming-api.md-let input = r#"{"id": 1, "name": "Alice"}
--
llms.txt-docs/streaming-api.md-Event-based NDJSON parser:
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-```rust
llms.txt:docs/streaming-api.md:use vexy_json::StreamingNdJsonParser;
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-let mut parser = StreamingNdJsonParser::new();
llms.txt-docs/streaming-api.md-parser.feed(r#"{"a": 1}
--
llms.txt-docs/streaming-api.md-Both streaming parsers support the same options as the regular parser:
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-```rust
llms.txt:docs/streaming-api.md:use vexy_json::{StreamingParser, ParserOptions};
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-let options = ParserOptions {
llms.txt-docs/streaming-api.md-    allow_comments: true,
--
llms.txt-docs/streaming-api.md-The streaming parser uses the same error types as the regular parser:
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-```rust
llms.txt:docs/streaming-api.md:use vexy_json::{StreamingParser, Error};
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-let mut parser = StreamingParser::new();
llms.txt-docs/streaming-api.md-
--
llms.txt-docs/migration-guide.md-nav_order: 10
llms.txt-docs/migration-guide.md----
llms.txt-docs/migration-guide.md-
llms.txt:docs/migration-guide.md:# Migration Guide: vexy_json v2.0.0
llms.txt-docs/migration-guide.md-
llms.txt:docs/migration-guide.md:This document provides comprehensive guidance for upgrading to vexy_json v2.0.0 from previous versions.
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-## Migrating from v1.x to v2.0.0
llms.txt-docs/migration-guide.md-
--
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-**After (v2.0.0):**
llms.txt-docs/migration-guide.md-```rust
llms.txt:docs/migration-guide.md:use vexy_json::StreamingParser;
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-let mut parser = StreamingParser::new();
llms.txt-docs/migration-guide.md-let file = std::fs::File::open("huge.json")?;
--
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-**After (v2.0.0):**
llms.txt-docs/migration-guide.md-```rust
llms.txt:docs/migration-guide.md:use vexy_json::parse_parallel;
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-let results = parse_parallel(json_files); // Automatically uses multiple cores
llms.txt-docs/migration-guide.md-```
--
llms.txt-docs/migration-guide.md-   - Some error variants have been renamed for clarity
llms.txt-docs/migration-guide.md-   - Add explicit imports if you match on specific error types:
llms.txt-docs/migration-guide.md-   ```rust
llms.txt:docs/migration-guide.md:   use vexy_json::Error::{UnexpectedChar, InvalidNumber};
llms.txt-docs/migration-guide.md-   ```
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-2. **Feature Flags**
--
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-### 📦 Dependency Updates
llms.txt-docs/migration-guide.md-
llms.txt:docs/migration-guide.md:If you depend on specific versions of vexy_json's dependencies:
llms.txt-docs/migration-guide.md-- `serde`: Now requires 1.0.190+
llms.txt-docs/migration-guide.md-- `wasm-bindgen`: Updated to 0.2.90
llms.txt-docs/migration-guide.md-- New dependencies: `rayon`, `crossbeam-channel`, `simd-json`
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-### 🔧 CLI Changes
llms.txt-docs/migration-guide.md-
llms.txt:docs/migration-guide.md:The CLI has been significantly enhanced. Update scripts that use vexy_json:
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-**New capabilities:**
llms.txt-docs/migration-guide.md-```bash
llms.txt-docs/migration-guide.md-# Watch mode
llms.txt:docs/migration-guide.md:vexy_json --watch input.json -o output.json
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-# Batch processing
llms.txt:docs/migration-guide.md:vexy_json --batch ./data/ --output-dir ./processed/
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-# Pretty printing with options
llms.txt:docs/migration-guide.md:vexy_json --pretty --sort-keys --indent 4 input.json
llms.txt-docs/migration-guide.md-```
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md----
llms.txt-docs/migration-guide.md-
llms.txt:docs/migration-guide.md:# Migration Guide: vexy_json v0.2.0
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-This section covers the earlier v0.2.0 refactor for historical reference.
llms.txt-docs/migration-guide.md-
--
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-**New exports available:**
llms.txt-docs/migration-guide.md-```rust
llms.txt:docs/migration-guide.md:use vexy_json::{ParseResult, Error};
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-// New type alias for semantic clarity
llms.txt-docs/migration-guide.md-fn parse_config() -> ParseResult<Config> {
--
llms.txt-docs/migration-guide.md-```javascript
llms.txt-docs/migration-guide.md-// Enhanced error objects with more information
llms.txt-docs/migration-guide.md-try {
llms.txt:docs/migration-guide.md:    const result = vexy_json.parse_json(input);
llms.txt-docs/migration-guide.md-} catch (error) {
llms.txt-docs/migration-guide.md-    console.log(error.message);        // Error description
llms.txt-docs/migration-guide.md-    console.log(error.position);       // Character position (if available)
--
llms.txt-docs/migration-guide.md-### For Rust Users
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-```rust
llms.txt:docs/migration-guide.md:use vexy_json::{parse, ParseResult, ParserOptions};
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-// Recommended: Use the new ParseResult type for clarity
llms.txt-docs/migration-guide.md-fn parse_config_file(content: &str) -> ParseResult<Config> {
--
llms.txt-docs/migration-guide.md-```javascript
llms.txt-docs/migration-guide.md-// Enhanced error handling with structured error objects
llms.txt-docs/migration-guide.md-try {
llms.txt:docs/migration-guide.md:    const result = vexy_json.parse_json(jsonString);
llms.txt-docs/migration-guide.md-    console.log('Parsed:', result);
llms.txt-docs/migration-guide.md-} catch (error) {
llms.txt-docs/migration-guide.md-    console.error(`Parse error at position ${error.position}: ${error.message}`);
--
llms.txt-docs/migration-guide.md-If you encounter any issues during migration:
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-1. **Check compatibility**: Ensure you're not using any undocumented internal APIs
llms.txt:docs/migration-guide.md:2. **Update imports**: Make sure you're importing from the main `vexy_json` crate
llms.txt-docs/migration-guide.md-3. **Test thoroughly**: Run your existing test suite to verify behavior
llms.txt-docs/migration-guide.md-4. **Report issues**: File bug reports with specific reproduction cases
llms.txt-docs/migration-guide.md-
llms.txt---
llms.txt:debug_test8.rs:use vexy_json::parse;
llms.txt-debug_test8.rs-
llms.txt-debug_test8.rs-fn main() {
llms.txt-debug_test8.rs-    println!("Testing: 'a:1\\nb:2'");
llms.txt---
llms.txt-tests/number_formats.rs-// this_file: tests/number_formats.rs
llms.txt-tests/number_formats.rs-
llms.txt:tests/number_formats.rs:use vexy_json::Number;
llms.txt:tests/number_formats.rs:use vexy_json::{parse, Value};
llms.txt-tests/number_formats.rs-
llms.txt-tests/number_formats.rs-/// Tests for extended number format support including hex, octal, binary, and underscore separators.
llms.txt-tests/number_formats.rs-/// These formats are commonly used in configuration files and match jsonic compatibility.
--
llms.txt-docs/features-overview.md-Vexy JSON accepts JSON that would be rejected by standard parsers:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::parse;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-// Comments are allowed
llms.txt-docs/features-overview.md-let json = r#"
--
llms.txt-docs/features-overview.md-Standardize JSON format for consistent processing:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::transform::normalize;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-let json = r#"{"z": 1, "a": 2, "b": null}"#;
llms.txt-docs/features-overview.md-let normalized = normalize(json).unwrap();
--
llms.txt-docs/features-overview.md-Improve JSON structure for performance:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::transform::optimize;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-let json = r#"{"count": 42.0, "price": 19.0}"#;
llms.txt-docs/features-overview.md-let optimized = optimize(&json).unwrap();
--
llms.txt-docs/features-overview.md-Automatically fix common JSON issues:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::repair::JsonRepairer;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-let mut repairer = JsonRepairer::new(10);
llms.txt-docs/features-overview.md-let broken = r#"{"key": "value", "missing": "quote}"#;
--
llms.txt-docs/features-overview.md-Process large JSON files efficiently:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::streaming::parse_streaming;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-for value in parse_streaming(reader)? {
llms.txt-docs/features-overview.md-    // Process each JSON value as it's parsed
--
llms.txt-docs/features-overview.md-Parse multiple JSON documents simultaneously:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::parallel::parse_parallel;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-let results = parse_parallel(&json_strings, ParallelConfig::default())?;
llms.txt-docs/features-overview.md-```
--
llms.txt-docs/features-overview.md-Full-featured Python bindings with NumPy and Pandas support:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```python
llms.txt:docs/features-overview.md:import vexy_json
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-# Standard JSON parsing
llms.txt:docs/features-overview.md:data = vexy_json.loads('{"name": "John", "age": 30}')
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-# NumPy integration
llms.txt-docs/features-overview.md-import numpy as np
llms.txt:docs/features-overview.md:array = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-# Pandas integration
llms.txt-docs/features-overview.md-import pandas as pd
llms.txt:docs/features-overview.md:df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-# Streaming support
llms.txt:docs/features-overview.md:with vexy_json.StreamingParser() as parser:
llms.txt-docs/features-overview.md-    for item in parser.parse_stream(file_handle):
llms.txt-docs/features-overview.md-        process(item)
llms.txt-docs/features-overview.md-```
--
llms.txt-docs/features-overview.md-Run Vexy JSON in browsers and JavaScript environments:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```javascript
llms.txt:docs/features-overview.md:import init, { parse } from 'vexy_json-wasm';
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-await init();
llms.txt-docs/features-overview.md-const result = parse('{"name": "John", age: 30}');
--
llms.txt-docs/features-overview.md-### Comprehensive Error Reporting
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::parse;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-match parse(invalid_json) {
llms.txt-docs/features-overview.md-    Ok(value) => println!("Parsed: {:?}", value),
--
llms.txt-docs/features-overview.md-### Automatic Recovery
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::parser::parse_with_fallback;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-// Tries multiple parsing strategies automatically
llms.txt-docs/features-overview.md-let result = parse_with_fallback(input, options);
--
llms.txt-docs/features-overview.md-### Repair with Confidence Scoring
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::repair::advanced::AdvancedJsonRepairer;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-let mut repairer = AdvancedJsonRepairer::new();
llms.txt-docs/features-overview.md-let (fixed, strategies) = repairer.repair(input)?;
--
llms.txt-docs/features-overview.md-Extend Vexy JSON with custom functionality:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::plugin::Plugin;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-struct CustomPlugin;
llms.txt-docs/features-overview.md-
--
llms.txt-docs/features-overview.md-### Schema Validation
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::plugin::SchemaValidationPlugin;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-let plugin = SchemaValidationPlugin::new(schema);
llms.txt-docs/features-overview.md-// Validates JSON against schema during parsing
--
llms.txt-docs/features-overview.md-### Date/Time Parsing
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::plugin::DateTimePlugin;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-let plugin = DateTimePlugin::new();
llms.txt-docs/features-overview.md-// Automatically parses ISO 8601 date strings
--
llms.txt-docs/features-overview.md-### Comment Preservation
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::plugin::CommentPreservationPlugin;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-let plugin = CommentPreservationPlugin::new();
llms.txt-docs/features-overview.md-// Preserves comments in parsed JSON
--
llms.txt-scripts/verify_features.js-
llms.txt-scripts/verify_features.js-/**
llms.txt-scripts/verify_features.js- * Verification script to test all forgiving JSON features
llms.txt:scripts/verify_features.js: * This tests the core vexy_json functionality to ensure everything works correctly
llms.txt-scripts/verify_features.js- */
llms.txt-scripts/verify_features.js-
llms.txt-scripts/verify_features.js-const { exec } = require('child_process');
--
llms.txt-scripts/verify_features.js-        name: 'Complex Mixed Features',
llms.txt-scripts/verify_features.js-        input: `{
llms.txt-scripts/verify_features.js-  // Configuration with comments
llms.txt:scripts/verify_features.js:  name: 'vexy_json',           // Unquoted key, single quotes
llms.txt-scripts/verify_features.js-  version: "1.1.0",        /* Version string */
llms.txt-scripts/verify_features.js-  features: [
llms.txt-scripts/verify_features.js-    "comments",
--
llms.txt-scripts/verify_features.js-];
llms.txt-scripts/verify_features.js-
llms.txt-scripts/verify_features.js-/**
llms.txt:scripts/verify_features.js: * Run a test case using the vexy_json binary
llms.txt-scripts/verify_features.js- */
llms.txt-scripts/verify_features.js-function runTest(testCase) {
llms.txt-scripts/verify_features.js-    return new Promise((resolve) => {
llms.txt-scripts/verify_features.js-        try {
llms.txt-scripts/verify_features.js-            // Instead of writing to file, pipe directly to the binary
llms.txt:scripts/verify_features.js:            const command = `echo '${testCase.input.replace(/'/g, "'\\''")}' | cargo run --bin vexy_json`;
llms.txt-scripts/verify_features.js-
llms.txt:scripts/verify_features.js:            // Run vexy_json with piped input
llms.txt-scripts/verify_features.js-            exec(command, (error, stdout, stderr) => {
llms.txt-scripts/verify_features.js-
llms.txt-scripts/verify_features.js-                const result = {
--
llms.txt-scripts/verify_features.js- * Run all tests and generate report
llms.txt-scripts/verify_features.js- */
llms.txt-scripts/verify_features.js-async function runAllTests() {
llms.txt:scripts/verify_features.js:    console.log('🧪 Running vexy_json Feature Verification Tests');
llms.txt-scripts/verify_features.js-    console.log('='.repeat(60));
llms.txt-scripts/verify_features.js-
llms.txt-scripts/verify_features.js-    const results = [];
--
llms.txt-docs/assets/images/flamegraph_detailed.svg-function format_percent(n) {
llms.txt-docs/assets/images/flamegraph_detailed.svg-    return n.toFixed(4) + "%";
llms.txt-docs/assets/images/flamegraph_detailed.svg-}
llms.txt:docs/assets/images/flamegraph_detailed.svg:]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="1195"><g><title>0x110953383 (1 samples, 0.08%)</title><rect x="0.0000%" y="341" width="0.0837%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>0x110953712 (1 samples, 0.08%)</title><rect x="0.0000%" y="325" width="0.0837%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>0x1109874d4 (1 samples, 0.08%)</title><rect x="0.0000%" y="309" width="0.0837%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>0x1109a4433 (1 samples, 0.08%)</title><rect x="0.0000%" y="293" width="0.0837%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>0x1109a4c89 (1 samples, 0.08%)</title><rect x="0.0000%" y="277" width="0.0837%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>0x11097a980 (1 samples, 0.08%)</title><rect x="0.0000%" y="261" width="0.0837%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>dyld4::ProcessConfig::ProcessConfig(dyld4::KernelArgs const*, dyld4::SyscallDelegate&amp;, lsl::Allocator&amp;) (1 samples, 0.08%)</title><rect x="0.0837%" y="309" width="0.0837%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.3337%" y="319.50"></text></g><g><title>dyld4::ProcessConfig::DyldCache::DyldCache(dyld4::ProcessConfig::Process&amp;, dyld4::ProcessConfig::Security const&amp;, dyld4::ProcessConfig::Logging const&amp;, dyld4::SyscallDelegate&amp;, lsl::Allocator&amp;, dyld4::ProcessConfig const&amp;) (1 samples, 0.08%)</title><rect x="0.0837%" y="293" width="0.0837%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.3337%" y="303.50"></text></g><g><title>dyld4::CacheFinder::CacheFinder(dyld4::ProcessConfig::Process const&amp;, dyld4::ProcessConfig::Logging const&amp;, dyld4::SyscallDelegate&amp;) (1 samples, 0.08%)</title><rect x="0.0837%" y="277" width="0.0837%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.3337%" y="287.50"></text></g><g><title>ignite (1 samples, 0.08%)</title><rect x="0.0837%" y="261" width="0.0837%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.3337%" y="271.50"></text></g><g><title>boot_boot (1 samples, 0.08%)</title><rect x="0.0837%" y="245" width="0.0837%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.3337%" y="255.50"></text></g><g><title>stage_fire (1 samples, 0.08%)</title><rect x="0.0837%" y="229" width="0.0837%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.3337%" y="239.50"></text></g><g><title>_graft_fetch_fire (1 samples, 0.08%)</title><rect x="0.0837%" y="213" width="0.0837%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.3337%" y="223.50"></text></g><g><title>__openat (1 samples, 0.08%)</title><rect x="0.0837%" y="197" width="0.0837%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.3337%" y="207.50"></text></g><g><title>dyld4::ExternallyViewableState::setLibSystemInitialized() (1 samples, 0.08%)</title><rect x="0.1674%" y="277" width="0.0837%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="0.4174%" y="287.50"></text></g><g><title>dyld4::ExternallyViewableState::setDyldState(unsigned char) (1 samples, 0.08%)</title><rect x="0.1674%" y="261" width="0.0837%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.4174%" y="271.50"></text></g><g><title>lsl::Allocator::~Allocator() (1 samples, 0.08%)</title><rect x="0.1674%" y="245" width="0.0837%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.4174%" y="255.50"></text></g><g><title>mach_vm_deallocate (1 samples, 0.08%)</title><rect x="0.1674%" y="229" width="0.0837%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.4174%" y="239.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.08%)</title><rect x="0.1674%" y="213" width="0.0837%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.4174%" y="223.50"></text></g><g><title>__libkernel_init (1 samples, 0.08%)</title><rect x="0.2510%" y="133" width="0.0837%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="0.5010%" y="143.50"></text></g><g><title>mach_init_doit (1 samples, 0.08%)</title><rect x="0.2510%" y="117" width="0.0837%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="0.5010%" y="127.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (3 samples, 0.25%)</title><rect x="0.1674%" y="293" width="0.2510%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="3"/><text x="0.4174%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (2 samples, 0.17%)</title><rect x="0.2510%" y="277" width="0.1674%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="2"/><text x="0.5010%" y="287.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (2 samples, 0.17%)</title><rect x="0.2510%" y="261" width="0.1674%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="2"/><text x="0.5010%" y="271.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (2 samples, 0.17%)</title><rect x="0.2510%" y="245" width="0.1674%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="2"/><text x="0.5010%" y="255.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (2 samples, 0.17%)</title><rect x="0.2510%" y="229" width="0.1674%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="2"/><text x="0.5010%" y="239.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (2 samples, 0.17%)</title><rect x="0.2510%" y="213" width="0.1674%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="2"/><text x="0.5010%" y="223.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (2 samples, 0.17%)</title><rect x="0.2510%" y="197" width="0.1674%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="2"/><text x="0.5010%" y="207.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (2 samples, 0.17%)</title><rect x="0.2510%" y="181" width="0.1674%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="2"/><text x="0.5010%" y="191.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (2 samples, 0.17%)</title><rect x="0.2510%" y="165" width="0.1674%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="2"/><text x="0.5010%" y="175.50"></text></g><g><title>libSystem_initializer (2 samples, 0.17%)</title><rect x="0.2510%" y="149" width="0.1674%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="2"/><text x="0.5010%" y="159.50"></text></g><g><title>libdispatch_init (1 samples, 0.08%)</title><rect x="0.3347%" y="133" width="0.0837%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="1"/><text x="0.5847%" y="143.50"></text></g><g><title>_os_object_init (1 samples, 0.08%)</title><rect x="0.3347%" y="117" width="0.0837%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="1"/><text x="0.5847%" y="127.50"></text></g><g><title>DYLD-STUB$$std::set_terminate(void (*)()) (1 samples, 0.08%)</title><rect x="0.3347%" y="101" width="0.0837%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="1"/><text x="0.5847%" y="111.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (1 samples, 0.08%)</title><rect x="0.4184%" y="293" width="0.0837%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="0.6684%" y="303.50"></text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="277" width="0.0837%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="1"/><text x="0.6684%" y="287.50"></text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="261" width="0.0837%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="1"/><text x="0.6684%" y="271.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="245" width="0.0837%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="1"/><text x="0.6684%" y="255.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="229" width="0.0837%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="1"/><text x="0.6684%" y="239.50"></text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="213" width="0.0837%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="1"/><text x="0.6684%" y="223.50"></text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="197" width="0.0837%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="1"/><text x="0.6684%" y="207.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="181" width="0.0837%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="1"/><text x="0.6684%" y="191.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="165" width="0.0837%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1"/><text x="0.6684%" y="175.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 0.08%)</title><rect x="0.4184%" y="149" width="0.0837%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1"/><text x="0.6684%" y="159.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.08%)</title><rect x="0.4184%" y="133" width="0.0837%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1"/><text x="0.6684%" y="143.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.08%)</title><rect x="0.4184%" y="117" width="0.0837%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1"/><text x="0.6684%" y="127.50"></text></g><g><title>dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&amp;, unsigned int, mach_o::LinkedDylibAttributes*) const (1 samples, 0.08%)</title><rect x="0.4184%" y="101" width="0.0837%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="1"/><text x="0.6684%" y="111.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (6 samples, 0.50%)</title><rect x="0.0837%" y="325" width="0.5021%" height="15" fill="rgb(250,191,14)" fg:x="1" fg:w="6"/><text x="0.3337%" y="335.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (5 samples, 0.42%)</title><rect x="0.1674%" y="309" width="0.4184%" height="15" fill="rgb(239,60,40)" fg:x="2" fg:w="5"/><text x="0.4174%" y="319.50"></text></g><g><title>dyld4::RuntimeState::partitionDelayLoads(std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt;, std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt;, lsl::Vector&lt;dyld4::Loader const*&gt;*) (1 samples, 0.08%)</title><rect x="0.5021%" y="293" width="0.0837%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="1"/><text x="0.7521%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::isDelayInit(dyld4::RuntimeState&amp;) const (1 samples, 0.08%)</title><rect x="0.5021%" y="277" width="0.0837%" height="15" fill="rgb(225,35,8)" fg:x="6" fg:w="1"/><text x="0.7521%" y="287.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="0.5858%" y="245" width="0.0837%" height="15" fill="rgb(250,213,24)" fg:x="7" fg:w="1"/><text x="0.8358%" y="255.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.08%)</title><rect x="0.6695%" y="229" width="0.0837%" height="15" fill="rgb(247,123,22)" fg:x="8" fg:w="1"/><text x="0.9195%" y="239.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="0.7531%" y="229" width="0.0837%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="1"/><text x="1.0031%" y="239.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="1.5063%" y="197" width="0.0837%" height="15" fill="rgb(231,145,46)" fg:x="18" fg:w="1"/><text x="1.7563%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 1.00%)</title><rect x="0.6695%" y="245" width="1.0042%" height="15" fill="rgb(251,118,11)" fg:x="8" fg:w="12"/><text x="0.9195%" y="255.50"></text></g><g><title>free_tiny (10 samples, 0.84%)</title><rect x="0.8368%" y="229" width="0.8368%" height="15" fill="rgb(217,147,25)" fg:x="10" fg:w="10"/><text x="1.0868%" y="239.50"></text></g><g><title>tiny_free_no_lock (7 samples, 0.59%)</title><rect x="1.0879%" y="213" width="0.5858%" height="15" fill="rgb(247,81,37)" fg:x="13" fg:w="7"/><text x="1.3379%" y="223.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="1.5900%" y="197" width="0.0837%" height="15" fill="rgb(209,12,38)" fg:x="19" fg:w="1"/><text x="1.8400%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.08%)</title><rect x="1.6736%" y="245" width="0.0837%" height="15" fill="rgb(227,1,9)" fg:x="20" fg:w="1"/><text x="1.9236%" y="255.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.08%)</title><rect x="1.7573%" y="229" width="0.0837%" height="15" fill="rgb(248,47,43)" fg:x="21" fg:w="1"/><text x="2.0073%" y="239.50"></text></g><g><title>_free (1 samples, 0.08%)</title><rect x="1.8410%" y="229" width="0.0837%" height="15" fill="rgb(221,10,30)" fg:x="22" fg:w="1"/><text x="2.0910%" y="239.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="1.9247%" y="229" width="0.1674%" height="15" fill="rgb(210,229,1)" fg:x="23" fg:w="2"/><text x="2.1747%" y="239.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="2.0921%" y="213" width="0.1674%" height="15" fill="rgb(222,148,37)" fg:x="25" fg:w="2"/><text x="2.3421%" y="223.50"></text></g><g><title>tiny_free_list_add_ptr (3 samples, 0.25%)</title><rect x="3.1799%" y="181" width="0.2510%" height="15" fill="rgb(234,67,33)" fg:x="38" fg:w="3"/><text x="3.4299%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 1.51%)</title><rect x="2.0921%" y="229" width="1.5063%" height="15" fill="rgb(247,98,35)" fg:x="25" fg:w="18"/><text x="2.3421%" y="239.50"></text></g><g><title>free_tiny (16 samples, 1.34%)</title><rect x="2.2594%" y="213" width="1.3389%" height="15" fill="rgb(247,138,52)" fg:x="27" fg:w="16"/><text x="2.5094%" y="223.50"></text></g><g><title>tiny_free_no_lock (11 samples, 0.92%)</title><rect x="2.6778%" y="197" width="0.9205%" height="15" fill="rgb(213,79,30)" fg:x="32" fg:w="11"/><text x="2.9278%" y="207.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="3.4310%" y="181" width="0.1674%" height="15" fill="rgb(246,177,23)" fg:x="41" fg:w="2"/><text x="3.6810%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (2 samples, 0.17%)</title><rect x="3.5983%" y="229" width="0.1674%" height="15" fill="rgb(230,62,27)" fg:x="43" fg:w="2"/><text x="3.8483%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.08%)</title><rect x="3.7657%" y="229" width="0.0837%" height="15" fill="rgb(216,154,8)" fg:x="45" fg:w="1"/><text x="4.0157%" y="239.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::checked_add (1 samples, 0.08%)</title><rect x="3.8494%" y="229" width="0.0837%" height="15" fill="rgb(244,35,45)" fg:x="46" fg:w="1"/><text x="4.0994%" y="239.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.08%)</title><rect x="3.9331%" y="213" width="0.0837%" height="15" fill="rgb(251,115,12)" fg:x="47" fg:w="1"/><text x="4.1831%" y="223.50"></text></g><g><title>__rustc::__rdl_dealloc (2 samples, 0.17%)</title><rect x="4.0167%" y="213" width="0.1674%" height="15" fill="rgb(240,54,50)" fg:x="48" fg:w="2"/><text x="4.2667%" y="223.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="4.1841%" y="213" width="0.0837%" height="15" fill="rgb(233,84,52)" fg:x="50" fg:w="1"/><text x="4.4341%" y="223.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="4.2678%" y="197" width="0.0837%" height="15" fill="rgb(207,117,47)" fg:x="51" fg:w="1"/><text x="4.5178%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="5.1046%" y="181" width="0.0837%" height="15" fill="rgb(249,43,39)" fg:x="61" fg:w="1"/><text x="5.3546%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="5.4393%" y="165" width="0.1674%" height="15" fill="rgb(209,38,44)" fg:x="65" fg:w="2"/><text x="5.6893%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 1.42%)</title><rect x="4.2678%" y="213" width="1.4226%" height="15" fill="rgb(236,212,23)" fg:x="51" fg:w="17"/><text x="4.5178%" y="223.50"></text></g><g><title>free_tiny (16 samples, 1.34%)</title><rect x="4.3515%" y="197" width="1.3389%" height="15" fill="rgb(242,79,21)" fg:x="52" fg:w="16"/><text x="4.6015%" y="207.50"></text></g><g><title>tiny_free_no_lock (6 samples, 0.50%)</title><rect x="5.1883%" y="181" width="0.5021%" height="15" fill="rgb(211,96,35)" fg:x="62" fg:w="6"/><text x="5.4383%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="5.6067%" y="165" width="0.0837%" height="15" fill="rgb(253,215,40)" fg:x="67" fg:w="1"/><text x="5.8567%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.08%)</title><rect x="5.6904%" y="213" width="0.0837%" height="15" fill="rgb(211,81,21)" fg:x="68" fg:w="1"/><text x="5.9404%" y="223.50"></text></g><g><title>_free (1 samples, 0.08%)</title><rect x="5.7741%" y="197" width="0.0837%" height="15" fill="rgb(208,190,38)" fg:x="69" fg:w="1"/><text x="6.0241%" y="207.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="5.8577%" y="197" width="0.0837%" height="15" fill="rgb(235,213,38)" fg:x="70" fg:w="1"/><text x="6.1077%" y="207.50"></text></g><g><title>free_tiny (6 samples, 0.50%)</title><rect x="5.9414%" y="181" width="0.5021%" height="15" fill="rgb(237,122,38)" fg:x="71" fg:w="6"/><text x="6.1914%" y="191.50"></text></g><g><title>tiny_free_no_lock (3 samples, 0.25%)</title><rect x="6.1925%" y="165" width="0.2510%" height="15" fill="rgb(244,218,35)" fg:x="74" fg:w="3"/><text x="6.4425%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="6.3598%" y="149" width="0.0837%" height="15" fill="rgb(240,68,47)" fg:x="76" fg:w="1"/><text x="6.6098%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.59%)</title><rect x="5.9414%" y="197" width="0.5858%" height="15" fill="rgb(210,16,53)" fg:x="71" fg:w="7"/><text x="6.1914%" y="207.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="6.4435%" y="181" width="0.0837%" height="15" fill="rgb(235,124,12)" fg:x="77" fg:w="1"/><text x="6.6935%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.08%)</title><rect x="6.5272%" y="197" width="0.0837%" height="15" fill="rgb(224,169,11)" fg:x="78" fg:w="1"/><text x="6.7772%" y="207.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="6.6946%" y="181" width="0.0837%" height="15" fill="rgb(250,166,2)" fg:x="80" fg:w="1"/><text x="6.9446%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.7782%" y="181" width="0.0837%" height="15" fill="rgb(242,216,29)" fg:x="81" fg:w="1"/><text x="7.0282%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (15 samples, 1.26%)</title><rect x="6.6109%" y="197" width="1.2552%" height="15" fill="rgb(230,116,27)" fg:x="79" fg:w="15"/><text x="6.8609%" y="207.50"></text></g><g><title>free_tiny (12 samples, 1.00%)</title><rect x="6.8619%" y="181" width="1.0042%" height="15" fill="rgb(228,99,48)" fg:x="82" fg:w="12"/><text x="7.1119%" y="191.50"></text></g><g><title>tiny_free_no_lock (5 samples, 0.42%)</title><rect x="7.4477%" y="165" width="0.4184%" height="15" fill="rgb(253,11,6)" fg:x="89" fg:w="5"/><text x="7.6977%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="7.6987%" y="149" width="0.1674%" height="15" fill="rgb(247,143,39)" fg:x="92" fg:w="2"/><text x="7.9487%" y="159.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="8.5356%" y="181" width="0.1674%" height="15" fill="rgb(236,97,10)" fg:x="102" fg:w="2"/><text x="8.7856%" y="191.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="8.7029%" y="181" width="0.0837%" height="15" fill="rgb(233,208,19)" fg:x="104" fg:w="1"/><text x="8.9529%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (3 samples, 0.25%)</title><rect x="9.0377%" y="165" width="0.2510%" height="15" fill="rgb(216,164,2)" fg:x="108" fg:w="3"/><text x="9.2877%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (43 samples, 3.60%)</title><rect x="5.7741%" y="213" width="3.5983%" height="15" fill="rgb(220,129,5)" fg:x="69" fg:w="43"/><text x="6.0241%" y="223.50">core..</text></g><g><title>free_tiny (18 samples, 1.51%)</title><rect x="7.8661%" y="197" width="1.5063%" height="15" fill="rgb(242,17,10)" fg:x="94" fg:w="18"/><text x="8.1161%" y="207.50"></text></g><g><title>tiny_free_no_lock (7 samples, 0.59%)</title><rect x="8.7866%" y="181" width="0.5858%" height="15" fill="rgb(242,107,0)" fg:x="105" fg:w="7"/><text x="9.0366%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="9.2887%" y="165" width="0.0837%" height="15" fill="rgb(251,28,31)" fg:x="111" fg:w="1"/><text x="9.5387%" y="175.50"></text></g><g><title>_free (2 samples, 0.17%)</title><rect x="9.3724%" y="197" width="0.1674%" height="15" fill="rgb(233,223,10)" fg:x="112" fg:w="2"/><text x="9.6224%" y="207.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.08%)</title><rect x="9.5397%" y="181" width="0.0837%" height="15" fill="rgb(215,21,27)" fg:x="114" fg:w="1"/><text x="9.7897%" y="191.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="9.6234%" y="181" width="0.1674%" height="15" fill="rgb(232,23,21)" fg:x="115" fg:w="2"/><text x="9.8734%" y="191.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="10.3766%" y="165" width="0.0837%" height="15" fill="rgb(244,5,23)" fg:x="124" fg:w="1"/><text x="10.6266%" y="175.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="10.4603%" y="165" width="0.0837%" height="15" fill="rgb(226,81,46)" fg:x="125" fg:w="1"/><text x="10.7103%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.33%)</title><rect x="11.8828%" y="149" width="0.3347%" height="15" fill="rgb(247,70,30)" fg:x="142" fg:w="4"/><text x="12.1328%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (37 samples, 3.10%)</title><rect x="9.5397%" y="197" width="3.0962%" height="15" fill="rgb(212,68,19)" fg:x="114" fg:w="37"/><text x="9.7897%" y="207.50">all..</text></g><g><title>free_tiny (34 samples, 2.85%)</title><rect x="9.7908%" y="181" width="2.8452%" height="15" fill="rgb(240,187,13)" fg:x="117" fg:w="34"/><text x="10.0408%" y="191.50">fr..</text></g><g><title>tiny_free_no_lock (25 samples, 2.09%)</title><rect x="10.5439%" y="165" width="2.0921%" height="15" fill="rgb(223,113,26)" fg:x="126" fg:w="25"/><text x="10.7939%" y="175.50">t..</text></g><g><title>tiny_free_list_remove_ptr (5 samples, 0.42%)</title><rect x="12.2176%" y="149" width="0.4184%" height="15" fill="rgb(206,192,2)" fg:x="146" fg:w="5"/><text x="12.4676%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (3 samples, 0.25%)</title><rect x="12.6360%" y="197" width="0.2510%" height="15" fill="rgb(241,108,4)" fg:x="151" fg:w="3"/><text x="12.8860%" y="207.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::overflowing_mul (1 samples, 0.08%)</title><rect x="12.8870%" y="197" width="0.0837%" height="15" fill="rgb(247,173,49)" fg:x="154" fg:w="1"/><text x="13.1370%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (3 samples, 0.25%)</title><rect x="12.9707%" y="181" width="0.2510%" height="15" fill="rgb(224,114,35)" fg:x="155" fg:w="3"/><text x="13.2207%" y="191.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="13.7238%" y="165" width="0.0837%" height="15" fill="rgb(245,159,27)" fg:x="164" fg:w="1"/><text x="13.9738%" y="175.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="13.8075%" y="165" width="0.0837%" height="15" fill="rgb(245,172,44)" fg:x="165" fg:w="1"/><text x="14.0575%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="13.8912%" y="165" width="0.0837%" height="15" fill="rgb(236,23,11)" fg:x="166" fg:w="1"/><text x="14.1412%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="14.3096%" y="149" width="0.1674%" height="15" fill="rgb(205,117,38)" fg:x="171" fg:w="2"/><text x="14.5596%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (20 samples, 1.67%)</title><rect x="12.9707%" y="197" width="1.6736%" height="15" fill="rgb(237,72,25)" fg:x="155" fg:w="20"/><text x="13.2207%" y="207.50"></text></g><g><title>free_tiny (17 samples, 1.42%)</title><rect x="13.2218%" y="181" width="1.4226%" height="15" fill="rgb(244,70,9)" fg:x="158" fg:w="17"/><text x="13.4718%" y="191.50"></text></g><g><title>tiny_free_no_lock (8 samples, 0.67%)</title><rect x="13.9749%" y="165" width="0.6695%" height="15" fill="rgb(217,125,39)" fg:x="167" fg:w="8"/><text x="14.2249%" y="175.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="14.4770%" y="149" width="0.1674%" height="15" fill="rgb(235,36,10)" fg:x="173" fg:w="2"/><text x="14.7270%" y="159.50"></text></g><g><title>free (1 samples, 0.08%)</title><rect x="14.6444%" y="197" width="0.0837%" height="15" fill="rgb(251,123,47)" fg:x="175" fg:w="1"/><text x="14.8944%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="15.0628%" y="181" width="0.0837%" height="15" fill="rgb(221,13,13)" fg:x="180" fg:w="1"/><text x="15.3128%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.33%)</title><rect x="15.7322%" y="165" width="0.3347%" height="15" fill="rgb(238,131,9)" fg:x="188" fg:w="4"/><text x="15.9822%" y="175.50"></text></g><g><title>free_tiny (19 samples, 1.59%)</title><rect x="14.7280%" y="197" width="1.5900%" height="15" fill="rgb(211,50,8)" fg:x="176" fg:w="19"/><text x="14.9780%" y="207.50"></text></g><g><title>tiny_free_no_lock (14 samples, 1.17%)</title><rect x="15.1464%" y="181" width="1.1715%" height="15" fill="rgb(245,182,24)" fg:x="181" fg:w="14"/><text x="15.3964%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.25%)</title><rect x="16.0669%" y="165" width="0.2510%" height="15" fill="rgb(242,14,37)" fg:x="192" fg:w="3"/><text x="16.3169%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (84 samples, 7.03%)</title><rect x="9.3724%" y="213" width="7.0293%" height="15" fill="rgb(246,228,12)" fg:x="112" fg:w="84"/><text x="9.6224%" y="223.50">core::ptr..</text></g><g><title>szone_try_free_default (1 samples, 0.08%)</title><rect x="16.3180%" y="197" width="0.0837%" height="15" fill="rgb(213,55,15)" fg:x="195" fg:w="1"/><text x="16.5680%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (158 samples, 13.22%)</title><rect x="3.9331%" y="229" width="13.2218%" height="15" fill="rgb(209,9,3)" fg:x="47" fg:w="158"/><text x="4.1831%" y="239.50">core::ptr::drop_in_p..</text></g><g><title>free_tiny (9 samples, 0.75%)</title><rect x="16.4017%" y="213" width="0.7531%" height="15" fill="rgb(230,59,30)" fg:x="196" fg:w="9"/><text x="16.6517%" y="223.50"></text></g><g><title>tiny_free_no_lock (6 samples, 0.50%)</title><rect x="16.6527%" y="197" width="0.5021%" height="15" fill="rgb(209,121,21)" fg:x="199" fg:w="6"/><text x="16.9027%" y="207.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="16.9874%" y="181" width="0.1674%" height="15" fill="rgb(220,109,13)" fg:x="203" fg:w="2"/><text x="17.2374%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (3 samples, 0.25%)</title><rect x="17.1548%" y="229" width="0.2510%" height="15" fill="rgb(232,18,1)" fg:x="205" fg:w="3"/><text x="17.4048%" y="239.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="17.2385%" y="213" width="0.1674%" height="15" fill="rgb(215,41,42)" fg:x="206" fg:w="2"/><text x="17.4885%" y="223.50"></text></g><g><title>tiny_free_no_lock (2 samples, 0.17%)</title><rect x="17.2385%" y="197" width="0.1674%" height="15" fill="rgb(224,123,36)" fg:x="206" fg:w="2"/><text x="17.4885%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="17.5732%" y="213" width="0.1674%" height="15" fill="rgb(240,125,3)" fg:x="210" fg:w="2"/><text x="17.8232%" y="223.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="17.7406%" y="213" width="0.0837%" height="15" fill="rgb(205,98,50)" fg:x="212" fg:w="1"/><text x="17.9906%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (197 samples, 16.49%)</title><rect x="1.7573%" y="245" width="16.4854%" height="15" fill="rgb(205,185,37)" fg:x="21" fg:w="197"/><text x="2.0073%" y="255.50">core::ptr::drop_in_place&lt;..</text></g><g><title>free_tiny (10 samples, 0.84%)</title><rect x="17.4059%" y="229" width="0.8368%" height="15" fill="rgb(238,207,15)" fg:x="208" fg:w="10"/><text x="17.6559%" y="239.50"></text></g><g><title>tiny_free_no_lock (5 samples, 0.42%)</title><rect x="17.8243%" y="213" width="0.4184%" height="15" fill="rgb(213,199,42)" fg:x="213" fg:w="5"/><text x="18.0743%" y="223.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="18.1590%" y="197" width="0.0837%" height="15" fill="rgb(235,201,11)" fg:x="217" fg:w="1"/><text x="18.4090%" y="207.50"></text></g><g><title>_free (1 samples, 0.08%)</title><rect x="18.2427%" y="229" width="0.0837%" height="15" fill="rgb(207,46,11)" fg:x="218" fg:w="1"/><text x="18.4927%" y="239.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="18.3264%" y="213" width="0.0837%" height="15" fill="rgb(241,35,35)" fg:x="219" fg:w="1"/><text x="18.5764%" y="223.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="18.9958%" y="197" width="0.0837%" height="15" fill="rgb(243,32,47)" fg:x="227" fg:w="1"/><text x="19.2458%" y="207.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="19.0795%" y="197" width="0.0837%" height="15" fill="rgb(247,202,23)" fg:x="228" fg:w="1"/><text x="19.3295%" y="207.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="19.7490%" y="181" width="0.1674%" height="15" fill="rgb(219,102,11)" fg:x="236" fg:w="2"/><text x="19.9990%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 1.76%)</title><rect x="18.3264%" y="229" width="1.7573%" height="15" fill="rgb(243,110,44)" fg:x="219" fg:w="21"/><text x="18.5764%" y="239.50"></text></g><g><title>free_tiny (20 samples, 1.67%)</title><rect x="18.4100%" y="213" width="1.6736%" height="15" fill="rgb(222,74,54)" fg:x="220" fg:w="20"/><text x="18.6600%" y="223.50"></text></g><g><title>tiny_free_no_lock (11 samples, 0.92%)</title><rect x="19.1632%" y="197" width="0.9205%" height="15" fill="rgb(216,99,12)" fg:x="229" fg:w="11"/><text x="19.4132%" y="207.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="19.9163%" y="181" width="0.1674%" height="15" fill="rgb(226,22,26)" fg:x="238" fg:w="2"/><text x="20.1663%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.08%)</title><rect x="20.0837%" y="229" width="0.0837%" height="15" fill="rgb(217,163,10)" fg:x="240" fg:w="1"/><text x="20.3337%" y="239.50"></text></g><g><title>_free (2 samples, 0.17%)</title><rect x="20.1674%" y="213" width="0.1674%" height="15" fill="rgb(213,25,53)" fg:x="241" fg:w="2"/><text x="20.4174%" y="223.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="20.3347%" y="213" width="0.0837%" height="15" fill="rgb(252,105,26)" fg:x="243" fg:w="1"/><text x="20.5847%" y="223.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="20.8368%" y="181" width="0.0837%" height="15" fill="rgb(220,39,43)" fg:x="249" fg:w="1"/><text x="21.0868%" y="191.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="20.9205%" y="181" width="0.0837%" height="15" fill="rgb(229,68,48)" fg:x="250" fg:w="1"/><text x="21.1705%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="21.6736%" y="165" width="0.0837%" height="15" fill="rgb(252,8,32)" fg:x="259" fg:w="1"/><text x="21.9236%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 1.67%)</title><rect x="20.4184%" y="213" width="1.6736%" height="15" fill="rgb(223,20,43)" fg:x="244" fg:w="20"/><text x="20.6684%" y="223.50"></text></g><g><title>free_tiny (20 samples, 1.67%)</title><rect x="20.4184%" y="197" width="1.6736%" height="15" fill="rgb(229,81,49)" fg:x="244" fg:w="20"/><text x="20.6684%" y="207.50"></text></g><g><title>tiny_free_no_lock (13 samples, 1.09%)</title><rect x="21.0042%" y="181" width="1.0879%" height="15" fill="rgb(236,28,36)" fg:x="251" fg:w="13"/><text x="21.2542%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (4 samples, 0.33%)</title><rect x="21.7573%" y="165" width="0.3347%" height="15" fill="rgb(249,185,26)" fg:x="260" fg:w="4"/><text x="22.0073%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.08%)</title><rect x="22.0921%" y="213" width="0.0837%" height="15" fill="rgb(249,174,33)" fg:x="264" fg:w="1"/><text x="22.3421%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.08%)</title><rect x="22.1757%" y="213" width="0.0837%" height="15" fill="rgb(233,201,37)" fg:x="265" fg:w="1"/><text x="22.4257%" y="223.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="22.2594%" y="197" width="0.1674%" height="15" fill="rgb(221,78,26)" fg:x="266" fg:w="2"/><text x="22.5094%" y="207.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.08%)</title><rect x="22.4268%" y="181" width="0.0837%" height="15" fill="rgb(250,127,30)" fg:x="268" fg:w="1"/><text x="22.6768%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="23.1799%" y="149" width="0.1674%" height="15" fill="rgb(230,49,44)" fg:x="277" fg:w="2"/><text x="23.4299%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (12 samples, 1.00%)</title><rect x="22.4268%" y="197" width="1.0042%" height="15" fill="rgb(229,67,23)" fg:x="268" fg:w="12"/><text x="22.6768%" y="207.50"></text></g><g><title>free_tiny (11 samples, 0.92%)</title><rect x="22.5105%" y="181" width="0.9205%" height="15" fill="rgb(249,83,47)" fg:x="269" fg:w="11"/><text x="22.7605%" y="191.50"></text></g><g><title>tiny_free_no_lock (8 samples, 0.67%)</title><rect x="22.7615%" y="165" width="0.6695%" height="15" fill="rgb(215,43,3)" fg:x="272" fg:w="8"/><text x="23.0115%" y="175.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="23.3473%" y="149" width="0.0837%" height="15" fill="rgb(238,154,13)" fg:x="279" fg:w="1"/><text x="23.5973%" y="159.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (3 samples, 0.25%)</title><rect x="23.7657%" y="181" width="0.2510%" height="15" fill="rgb(219,56,2)" fg:x="284" fg:w="3"/><text x="24.0157%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (3 samples, 0.25%)</title><rect x="24.5188%" y="165" width="0.2510%" height="15" fill="rgb(233,0,4)" fg:x="293" fg:w="3"/><text x="24.7688%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (32 samples, 2.68%)</title><rect x="22.2594%" y="213" width="2.6778%" height="15" fill="rgb(235,30,7)" fg:x="266" fg:w="32"/><text x="22.5094%" y="223.50">co..</text></g><g><title>free_tiny (18 samples, 1.51%)</title><rect x="23.4310%" y="197" width="1.5063%" height="15" fill="rgb(250,79,13)" fg:x="280" fg:w="18"/><text x="23.6810%" y="207.50"></text></g><g><title>tiny_free_no_lock (11 samples, 0.92%)</title><rect x="24.0167%" y="181" width="0.9205%" height="15" fill="rgb(211,146,34)" fg:x="287" fg:w="11"/><text x="24.2667%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="24.7699%" y="165" width="0.1674%" height="15" fill="rgb(228,22,38)" fg:x="296" fg:w="2"/><text x="25.0199%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (1 samples, 0.08%)</title><rect x="24.9372%" y="213" width="0.0837%" height="15" fill="rgb(235,168,5)" fg:x="298" fg:w="1"/><text x="25.1872%" y="223.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="25.6067%" y="197" width="0.0837%" height="15" fill="rgb(221,155,16)" fg:x="306" fg:w="1"/><text x="25.8567%" y="207.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="25.6904%" y="197" width="0.0837%" height="15" fill="rgb(215,215,53)" fg:x="307" fg:w="1"/><text x="25.9404%" y="207.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="25.7741%" y="197" width="0.0837%" height="15" fill="rgb(223,4,10)" fg:x="308" fg:w="1"/><text x="26.0241%" y="207.50"></text></g><g><title>free_tiny (20 samples, 1.67%)</title><rect x="25.0209%" y="213" width="1.6736%" height="15" fill="rgb(234,103,6)" fg:x="299" fg:w="20"/><text x="25.2709%" y="223.50"></text></g><g><title>tiny_free_no_lock (10 samples, 0.84%)</title><rect x="25.8577%" y="197" width="0.8368%" height="15" fill="rgb(227,97,0)" fg:x="309" fg:w="10"/><text x="26.1077%" y="207.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.33%)</title><rect x="26.3598%" y="181" width="0.3347%" height="15" fill="rgb(234,150,53)" fg:x="315" fg:w="4"/><text x="26.6098%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (79 samples, 6.61%)</title><rect x="20.1674%" y="229" width="6.6109%" height="15" fill="rgb(228,201,54)" fg:x="241" fg:w="79"/><text x="20.4174%" y="239.50">core::ptr..</text></g><g><title>szone_try_free_default (1 samples, 0.08%)</title><rect x="26.6946%" y="213" width="0.0837%" height="15" fill="rgb(222,22,37)" fg:x="319" fg:w="1"/><text x="26.9446%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;[vexy_json_core::ast::value::Value]&gt; (108 samples, 9.04%)</title><rect x="18.2427%" y="245" width="9.0377%" height="15" fill="rgb(237,53,32)" fg:x="218" fg:w="108"/><text x="18.4927%" y="255.50">core::ptr::dr..</text></g><g><title>free_tiny (6 samples, 0.50%)</title><rect x="26.7782%" y="229" width="0.5021%" height="15" fill="rgb(233,25,53)" fg:x="320" fg:w="6"/><text x="27.0282%" y="239.50"></text></g><g><title>tiny_free_no_lock (3 samples, 0.25%)</title><rect x="27.0293%" y="213" width="0.2510%" height="15" fill="rgb(210,40,34)" fg:x="323" fg:w="3"/><text x="27.2793%" y="223.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="27.1967%" y="197" width="0.0837%" height="15" fill="rgb(241,220,44)" fg:x="325" fg:w="1"/><text x="27.4467%" y="207.50"></text></g><g><title>free_small (2 samples, 0.17%)</title><rect x="27.2803%" y="245" width="0.1674%" height="15" fill="rgb(235,28,35)" fg:x="326" fg:w="2"/><text x="27.5303%" y="255.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (1 samples, 0.08%)</title><rect x="27.3640%" y="229" width="0.0837%" height="15" fill="rgb(210,56,17)" fg:x="327" fg:w="1"/><text x="27.6140%" y="239.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="27.4477%" y="245" width="0.1674%" height="15" fill="rgb(224,130,29)" fg:x="328" fg:w="2"/><text x="27.6977%" y="255.50"></text></g><g><title>tiny_free_no_lock (2 samples, 0.17%)</title><rect x="27.4477%" y="229" width="0.1674%" height="15" fill="rgb(235,212,8)" fg:x="328" fg:w="2"/><text x="27.6977%" y="239.50"></text></g><g><title>_tlv_get_addr (1 samples, 0.08%)</title><rect x="27.6151%" y="213" width="0.0837%" height="15" fill="rgb(223,33,50)" fg:x="330" fg:w="1"/><text x="27.8651%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.17%)</title><rect x="27.8661%" y="197" width="0.1674%" height="15" fill="rgb(219,149,13)" fg:x="333" fg:w="2"/><text x="28.1161%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.17%)</title><rect x="27.8661%" y="181" width="0.1674%" height="15" fill="rgb(250,156,29)" fg:x="333" fg:w="2"/><text x="28.1161%" y="191.50"></text></g><g><title>_realloc (2 samples, 0.17%)</title><rect x="27.8661%" y="165" width="0.1674%" height="15" fill="rgb(216,193,19)" fg:x="333" fg:w="2"/><text x="28.1161%" y="175.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.17%)</title><rect x="27.8661%" y="149" width="0.1674%" height="15" fill="rgb(216,135,14)" fg:x="333" fg:w="2"/><text x="28.1161%" y="159.50"></text></g><g><title>szone_realloc (2 samples, 0.17%)</title><rect x="27.8661%" y="133" width="0.1674%" height="15" fill="rgb(241,47,5)" fg:x="333" fg:w="2"/><text x="28.1161%" y="143.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="27.8661%" y="117" width="0.1674%" height="15" fill="rgb(233,42,35)" fg:x="333" fg:w="2"/><text x="28.1161%" y="127.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="27.9498%" y="101" width="0.0837%" height="15" fill="rgb(231,13,6)" fg:x="334" fg:w="1"/><text x="28.1998%" y="111.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="27.9498%" y="85" width="0.0837%" height="15" fill="rgb(207,181,40)" fg:x="334" fg:w="1"/><text x="28.1998%" y="95.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="28.0335%" y="197" width="0.2510%" height="15" fill="rgb(254,173,49)" fg:x="335" fg:w="3"/><text x="28.2835%" y="207.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.17%)</title><rect x="28.1172%" y="181" width="0.1674%" height="15" fill="rgb(221,1,38)" fg:x="336" fg:w="2"/><text x="28.3672%" y="191.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="28.6192%" y="181" width="0.0837%" height="15" fill="rgb(206,124,46)" fg:x="342" fg:w="1"/><text x="28.8692%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.08%)</title><rect x="28.6192%" y="165" width="0.0837%" height="15" fill="rgb(249,21,11)" fg:x="342" fg:w="1"/><text x="28.8692%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.33%)</title><rect x="29.4561%" y="165" width="0.3347%" height="15" fill="rgb(222,201,40)" fg:x="352" fg:w="4"/><text x="29.7061%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.17%)</title><rect x="29.6234%" y="149" width="0.1674%" height="15" fill="rgb(235,61,29)" fg:x="354" fg:w="2"/><text x="29.8734%" y="159.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="30.2092%" y="149" width="0.0837%" height="15" fill="rgb(219,207,3)" fg:x="361" fg:w="1"/><text x="30.4592%" y="159.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="30.2929%" y="149" width="0.0837%" height="15" fill="rgb(222,56,46)" fg:x="362" fg:w="1"/><text x="30.5429%" y="159.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="30.3766%" y="149" width="0.0837%" height="15" fill="rgb(239,76,54)" fg:x="363" fg:w="1"/><text x="30.6266%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.42%)</title><rect x="30.4603%" y="149" width="0.4184%" height="15" fill="rgb(231,124,27)" fg:x="364" fg:w="5"/><text x="30.7103%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.17%)</title><rect x="30.7113%" y="133" width="0.1674%" height="15" fill="rgb(249,195,6)" fg:x="367" fg:w="2"/><text x="30.9613%" y="143.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="30.8787%" y="149" width="0.1674%" height="15" fill="rgb(237,174,47)" fg:x="369" fg:w="2"/><text x="31.1287%" y="159.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="30.9623%" y="133" width="0.0837%" height="15" fill="rgb(206,201,31)" fg:x="370" fg:w="1"/><text x="31.2123%" y="143.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="30.9623%" y="117" width="0.0837%" height="15" fill="rgb(231,57,52)" fg:x="370" fg:w="1"/><text x="31.2123%" y="127.50"></text></g><g><title>set_tiny_meta_header_in_use (2 samples, 0.17%)</title><rect x="31.2971%" y="117" width="0.1674%" height="15" fill="rgb(248,177,22)" fg:x="374" fg:w="2"/><text x="31.5471%" y="127.50"></text></g><g><title>szone_malloc_should_clear (7 samples, 0.59%)</title><rect x="31.0460%" y="149" width="0.5858%" height="15" fill="rgb(215,211,37)" fg:x="371" fg:w="7"/><text x="31.2960%" y="159.50"></text></g><g><title>tiny_malloc_should_clear (7 samples, 0.59%)</title><rect x="31.0460%" y="133" width="0.5858%" height="15" fill="rgb(241,128,51)" fg:x="371" fg:w="7"/><text x="31.2960%" y="143.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="31.4644%" y="117" width="0.1674%" height="15" fill="rgb(227,165,31)" fg:x="376" fg:w="2"/><text x="31.7144%" y="127.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="31.5481%" y="101" width="0.0837%" height="15" fill="rgb(228,167,24)" fg:x="377" fg:w="1"/><text x="31.7981%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (36 samples, 3.01%)</title><rect x="28.7029%" y="181" width="3.0126%" height="15" fill="rgb(228,143,12)" fg:x="343" fg:w="36"/><text x="28.9529%" y="191.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 1.92%)</title><rect x="29.7908%" y="165" width="1.9247%" height="15" fill="rgb(249,149,8)" fg:x="356" fg:w="23"/><text x="30.0408%" y="175.50">h..</text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="31.6318%" y="149" width="0.0837%" height="15" fill="rgb(243,35,44)" fg:x="378" fg:w="1"/><text x="31.8818%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (4 samples, 0.33%)</title><rect x="32.2176%" y="165" width="0.3347%" height="15" fill="rgb(246,89,9)" fg:x="385" fg:w="4"/><text x="32.4676%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.08%)</title><rect x="32.5523%" y="165" width="0.0837%" height="15" fill="rgb(233,213,13)" fg:x="389" fg:w="1"/><text x="32.8023%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (39 samples, 3.26%)</title><rect x="31.7155%" y="181" width="3.2636%" height="15" fill="rgb(233,141,41)" fg:x="379" fg:w="39"/><text x="31.9655%" y="191.50">zzs..</text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (28 samples, 2.34%)</title><rect x="32.6360%" y="165" width="2.3431%" height="15" fill="rgb(239,167,4)" fg:x="390" fg:w="28"/><text x="32.8860%" y="175.50">&lt;..</text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.08%)</title><rect x="35.7322%" y="165" width="0.0837%" height="15" fill="rgb(209,217,16)" fg:x="427" fg:w="1"/><text x="35.9822%" y="175.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="35.8159%" y="165" width="0.0837%" height="15" fill="rgb(219,88,35)" fg:x="428" fg:w="1"/><text x="36.0659%" y="175.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="36.0669%" y="149" width="0.0837%" height="15" fill="rgb(220,193,23)" fg:x="431" fg:w="1"/><text x="36.3169%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.17%)</title><rect x="36.1506%" y="149" width="0.1674%" height="15" fill="rgb(230,90,52)" fg:x="432" fg:w="2"/><text x="36.4006%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="36.2343%" y="133" width="0.0837%" height="15" fill="rgb(252,106,19)" fg:x="433" fg:w="1"/><text x="36.4843%" y="143.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="36.4854%" y="133" width="0.0837%" height="15" fill="rgb(206,74,20)" fg:x="436" fg:w="1"/><text x="36.7354%" y="143.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="36.5690%" y="133" width="0.1674%" height="15" fill="rgb(230,138,44)" fg:x="437" fg:w="2"/><text x="36.8190%" y="143.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="36.7364%" y="133" width="0.0837%" height="15" fill="rgb(235,182,43)" fg:x="439" fg:w="1"/><text x="36.9864%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.25%)</title><rect x="36.8201%" y="133" width="0.2510%" height="15" fill="rgb(242,16,51)" fg:x="440" fg:w="3"/><text x="37.0701%" y="143.50"></text></g><g><title>free_tiny (4 samples, 0.33%)</title><rect x="37.0711%" y="133" width="0.3347%" height="15" fill="rgb(248,9,4)" fg:x="443" fg:w="4"/><text x="37.3211%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 2.01%)</title><rect x="35.8996%" y="165" width="2.0084%" height="15" fill="rgb(210,31,22)" fg:x="429" fg:w="24"/><text x="36.1496%" y="175.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (19 samples, 1.59%)</title><rect x="36.3180%" y="149" width="1.5900%" height="15" fill="rgb(239,54,39)" fg:x="434" fg:w="19"/><text x="36.5680%" y="159.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.50%)</title><rect x="37.4059%" y="133" width="0.5021%" height="15" fill="rgb(230,99,41)" fg:x="447" fg:w="6"/><text x="37.6559%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.50%)</title><rect x="37.4059%" y="117" width="0.5021%" height="15" fill="rgb(253,106,12)" fg:x="447" fg:w="6"/><text x="37.6559%" y="127.50"></text></g><g><title>set_tiny_meta_header_in_use (2 samples, 0.17%)</title><rect x="37.7406%" y="101" width="0.1674%" height="15" fill="rgb(213,46,41)" fg:x="451" fg:w="2"/><text x="37.9906%" y="111.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (3 samples, 0.25%)</title><rect x="38.3264%" y="149" width="0.2510%" height="15" fill="rgb(215,133,35)" fg:x="458" fg:w="3"/><text x="38.5764%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="38.5774%" y="149" width="0.2510%" height="15" fill="rgb(213,28,5)" fg:x="461" fg:w="3"/><text x="38.8274%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (14 samples, 1.17%)</title><rect x="37.9079%" y="165" width="1.1715%" height="15" fill="rgb(215,77,49)" fg:x="453" fg:w="14"/><text x="38.1579%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (3 samples, 0.25%)</title><rect x="38.8285%" y="149" width="0.2510%" height="15" fill="rgb(248,100,22)" fg:x="464" fg:w="3"/><text x="39.0785%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.25%)</title><rect x="39.4142%" y="149" width="0.2510%" height="15" fill="rgb(208,67,9)" fg:x="471" fg:w="3"/><text x="39.6642%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.17%)</title><rect x="39.4979%" y="133" width="0.1674%" height="15" fill="rgb(219,133,21)" fg:x="472" fg:w="2"/><text x="39.7479%" y="143.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="39.4979%" y="117" width="0.1674%" height="15" fill="rgb(246,46,29)" fg:x="472" fg:w="2"/><text x="39.7479%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="39.4979%" y="101" width="0.1674%" height="15" fill="rgb(246,185,52)" fg:x="472" fg:w="2"/><text x="39.7479%" y="111.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.08%)</title><rect x="39.5816%" y="85" width="0.0837%" height="15" fill="rgb(252,136,11)" fg:x="473" fg:w="1"/><text x="39.8316%" y="95.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.33%)</title><rect x="39.6653%" y="149" width="0.3347%" height="15" fill="rgb(219,138,53)" fg:x="474" fg:w="4"/><text x="39.9153%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (2 samples, 0.17%)</title><rect x="39.8326%" y="133" width="0.1674%" height="15" fill="rgb(211,51,23)" fg:x="476" fg:w="2"/><text x="40.0826%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.08%)</title><rect x="40.2510%" y="133" width="0.0837%" height="15" fill="rgb(247,221,28)" fg:x="481" fg:w="1"/><text x="40.5010%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="40.2510%" y="117" width="0.0837%" height="15" fill="rgb(251,222,45)" fg:x="481" fg:w="1"/><text x="40.5010%" y="127.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.17%)</title><rect x="40.5858%" y="101" width="0.1674%" height="15" fill="rgb(217,162,53)" fg:x="485" fg:w="2"/><text x="40.8358%" y="111.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.25%)</title><rect x="40.9205%" y="69" width="0.2510%" height="15" fill="rgb(229,93,14)" fg:x="489" fg:w="3"/><text x="41.1705%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.84%)</title><rect x="40.7531%" y="101" width="0.8368%" height="15" fill="rgb(209,67,49)" fg:x="487" fg:w="10"/><text x="41.0031%" y="111.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.84%)</title><rect x="40.7531%" y="85" width="0.8368%" height="15" fill="rgb(213,87,29)" fg:x="487" fg:w="10"/><text x="41.0031%" y="95.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.42%)</title><rect x="41.1715%" y="69" width="0.4184%" height="15" fill="rgb(205,151,52)" fg:x="492" fg:w="5"/><text x="41.4215%" y="79.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.42%)</title><rect x="41.1715%" y="53" width="0.4184%" height="15" fill="rgb(253,215,39)" fg:x="492" fg:w="5"/><text x="41.4215%" y="63.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (31 samples, 2.59%)</title><rect x="39.0795%" y="165" width="2.5941%" height="15" fill="rgb(221,220,41)" fg:x="467" fg:w="31"/><text x="39.3295%" y="175.50">zz..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (20 samples, 1.67%)</title><rect x="40.0000%" y="149" width="1.6736%" height="15" fill="rgb(218,133,21)" fg:x="478" fg:w="20"/><text x="40.2500%" y="159.50"></text></g><g><title>vexy_json_core::parser::unescape_string (16 samples, 1.34%)</title><rect x="40.3347%" y="133" width="1.3389%" height="15" fill="rgb(221,193,43)" fg:x="482" fg:w="16"/><text x="40.5847%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 1.09%)</title><rect x="40.5858%" y="117" width="1.0879%" height="15" fill="rgb(240,128,52)" fg:x="485" fg:w="13"/><text x="40.8358%" y="127.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="41.5900%" y="101" width="0.0837%" height="15" fill="rgb(253,114,12)" fg:x="497" fg:w="1"/><text x="41.8400%" y="111.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="41.7573%" y="149" width="0.2510%" height="15" fill="rgb(215,223,47)" fg:x="499" fg:w="3"/><text x="42.0073%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="41.9247%" y="133" width="0.0837%" height="15" fill="rgb(248,225,23)" fg:x="501" fg:w="1"/><text x="42.1747%" y="143.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.08%)</title><rect x="42.4268%" y="117" width="0.0837%" height="15" fill="rgb(250,108,0)" fg:x="507" fg:w="1"/><text x="42.6768%" y="127.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="42.5105%" y="117" width="0.0837%" height="15" fill="rgb(228,208,7)" fg:x="508" fg:w="1"/><text x="42.7605%" y="127.50"></text></g><g><title>szone_size (1 samples, 0.08%)</title><rect x="42.9289%" y="53" width="0.0837%" height="15" fill="rgb(244,45,10)" fg:x="513" fg:w="1"/><text x="43.1789%" y="63.50"></text></g><g><title>tiny_size (1 samples, 0.08%)</title><rect x="42.9289%" y="37" width="0.0837%" height="15" fill="rgb(207,125,25)" fg:x="513" fg:w="1"/><text x="43.1789%" y="47.50"></text></g><g><title>_malloc_zone_realloc (5 samples, 0.42%)</title><rect x="42.8452%" y="85" width="0.4184%" height="15" fill="rgb(210,195,18)" fg:x="512" fg:w="5"/><text x="43.0952%" y="95.50"></text></g><g><title>szone_realloc (4 samples, 0.33%)</title><rect x="42.9289%" y="69" width="0.3347%" height="15" fill="rgb(249,80,12)" fg:x="513" fg:w="4"/><text x="43.1789%" y="79.50"></text></g><g><title>tiny_try_realloc_in_place (3 samples, 0.25%)</title><rect x="43.0126%" y="53" width="0.2510%" height="15" fill="rgb(221,65,9)" fg:x="514" fg:w="3"/><text x="43.2626%" y="63.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="43.1799%" y="37" width="0.0837%" height="15" fill="rgb(235,49,36)" fg:x="516" fg:w="1"/><text x="43.4299%" y="47.50"></text></g><g><title>szone_realloc (1 samples, 0.08%)</title><rect x="43.2636%" y="85" width="0.0837%" height="15" fill="rgb(225,32,20)" fg:x="517" fg:w="1"/><text x="43.5136%" y="95.50"></text></g><g><title>_realloc (8 samples, 0.67%)</title><rect x="42.7615%" y="101" width="0.6695%" height="15" fill="rgb(215,141,46)" fg:x="511" fg:w="8"/><text x="43.0115%" y="111.50"></text></g><g><title>tiny_size (1 samples, 0.08%)</title><rect x="43.3473%" y="85" width="0.0837%" height="15" fill="rgb(250,160,47)" fg:x="518" fg:w="1"/><text x="43.5973%" y="95.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="43.4310%" y="85" width="0.0837%" height="15" fill="rgb(216,222,40)" fg:x="519" fg:w="1"/><text x="43.6810%" y="95.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.84%)</title><rect x="43.4310%" y="101" width="0.8368%" height="15" fill="rgb(234,217,39)" fg:x="519" fg:w="10"/><text x="43.6810%" y="111.50"></text></g><g><title>tiny_malloc_should_clear (9 samples, 0.75%)</title><rect x="43.5146%" y="85" width="0.7531%" height="15" fill="rgb(207,178,40)" fg:x="520" fg:w="9"/><text x="43.7646%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.42%)</title><rect x="43.8494%" y="69" width="0.4184%" height="15" fill="rgb(221,136,13)" fg:x="524" fg:w="5"/><text x="44.0994%" y="79.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="44.1841%" y="53" width="0.0837%" height="15" fill="rgb(249,199,10)" fg:x="528" fg:w="1"/><text x="44.4341%" y="63.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (32 samples, 2.68%)</title><rect x="41.6736%" y="165" width="2.6778%" height="15" fill="rgb(249,222,13)" fg:x="498" fg:w="32"/><text x="41.9236%" y="175.50">zz..</text></g><g><title>vexy_json_core::parser::unescape_string (28 samples, 2.34%)</title><rect x="42.0084%" y="149" width="2.3431%" height="15" fill="rgb(244,185,38)" fg:x="502" fg:w="28"/><text x="42.2584%" y="159.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (25 samples, 2.09%)</title><rect x="42.2594%" y="133" width="2.0921%" height="15" fill="rgb(236,202,9)" fg:x="505" fg:w="25"/><text x="42.5094%" y="143.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (21 samples, 1.76%)</title><rect x="42.5941%" y="117" width="1.7573%" height="15" fill="rgb(250,229,37)" fg:x="509" fg:w="21"/><text x="42.8441%" y="127.50"></text></g><g><title>szone_size (1 samples, 0.08%)</title><rect x="44.2678%" y="101" width="0.0837%" height="15" fill="rgb(206,174,23)" fg:x="529" fg:w="1"/><text x="44.5178%" y="111.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.17%)</title><rect x="44.4351%" y="133" width="0.1674%" height="15" fill="rgb(211,33,43)" fg:x="531" fg:w="2"/><text x="44.6851%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.08%)</title><rect x="44.6025%" y="133" width="0.0837%" height="15" fill="rgb(245,58,50)" fg:x="533" fg:w="1"/><text x="44.8525%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (5 samples, 0.42%)</title><rect x="44.3515%" y="165" width="0.4184%" height="15" fill="rgb(244,68,36)" fg:x="530" fg:w="5"/><text x="44.6015%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (5 samples, 0.42%)</title><rect x="44.3515%" y="149" width="0.4184%" height="15" fill="rgb(232,229,15)" fg:x="530" fg:w="5"/><text x="44.6015%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.08%)</title><rect x="44.6862%" y="133" width="0.0837%" height="15" fill="rgb(254,30,23)" fg:x="534" fg:w="1"/><text x="44.9362%" y="143.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.08%)</title><rect x="50.2929%" y="133" width="0.0837%" height="15" fill="rgb(235,160,14)" fg:x="601" fg:w="1"/><text x="50.5429%" y="143.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="50.3766%" y="133" width="0.0837%" height="15" fill="rgb(212,155,44)" fg:x="602" fg:w="1"/><text x="50.6266%" y="143.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="52.1339%" y="69" width="0.1674%" height="15" fill="rgb(226,2,50)" fg:x="623" fg:w="2"/><text x="52.3839%" y="79.50"></text></g><g><title>set_tiny_meta_header_in_use (2 samples, 0.17%)</title><rect x="52.3013%" y="69" width="0.1674%" height="15" fill="rgb(234,177,6)" fg:x="625" fg:w="2"/><text x="52.5513%" y="79.50"></text></g><g><title>szone_size (4 samples, 0.33%)</title><rect x="52.4686%" y="69" width="0.3347%" height="15" fill="rgb(217,24,9)" fg:x="627" fg:w="4"/><text x="52.7186%" y="79.50"></text></g><g><title>tiny_size (4 samples, 0.33%)</title><rect x="52.4686%" y="53" width="0.3347%" height="15" fill="rgb(220,13,46)" fg:x="627" fg:w="4"/><text x="52.7186%" y="63.50"></text></g><g><title>tiny_size (1 samples, 0.08%)</title><rect x="52.8033%" y="69" width="0.0837%" height="15" fill="rgb(239,221,27)" fg:x="631" fg:w="1"/><text x="53.0533%" y="79.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.25%)</title><rect x="55.1464%" y="53" width="0.2510%" height="15" fill="rgb(222,198,25)" fg:x="659" fg:w="3"/><text x="55.3964%" y="63.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.33%)</title><rect x="55.3975%" y="53" width="0.3347%" height="15" fill="rgb(211,99,13)" fg:x="662" fg:w="4"/><text x="55.6475%" y="63.50"></text></g><g><title>szone_realloc (56 samples, 4.69%)</title><rect x="51.4644%" y="85" width="4.6862%" height="15" fill="rgb(232,111,31)" fg:x="615" fg:w="56"/><text x="51.7144%" y="95.50">szone..</text></g><g><title>tiny_try_realloc_in_place (39 samples, 3.26%)</title><rect x="52.8870%" y="69" width="3.2636%" height="15" fill="rgb(245,82,37)" fg:x="632" fg:w="39"/><text x="53.1370%" y="79.50">tin..</text></g><g><title>tiny_free_list_remove_ptr (5 samples, 0.42%)</title><rect x="55.7322%" y="53" width="0.4184%" height="15" fill="rgb(227,149,46)" fg:x="666" fg:w="5"/><text x="55.9822%" y="63.50"></text></g><g><title>_malloc_zone_realloc (60 samples, 5.02%)</title><rect x="51.2134%" y="101" width="5.0209%" height="15" fill="rgb(218,36,50)" fg:x="612" fg:w="60"/><text x="51.4634%" y="111.50">_mallo..</text></g><g><title>tiny_try_realloc_in_place (1 samples, 0.08%)</title><rect x="56.1506%" y="85" width="0.0837%" height="15" fill="rgb(226,80,48)" fg:x="671" fg:w="1"/><text x="56.4006%" y="95.50"></text></g><g><title>_realloc (75 samples, 6.28%)</title><rect x="50.7950%" y="117" width="6.2762%" height="15" fill="rgb(238,224,15)" fg:x="607" fg:w="75"/><text x="51.0450%" y="127.50">_realloc</text></g><g><title>szone_size (10 samples, 0.84%)</title><rect x="56.2343%" y="101" width="0.8368%" height="15" fill="rgb(241,136,10)" fg:x="672" fg:w="10"/><text x="56.4843%" y="111.50"></text></g><g><title>tiny_size (9 samples, 0.75%)</title><rect x="56.3180%" y="85" width="0.7531%" height="15" fill="rgb(208,32,45)" fg:x="673" fg:w="9"/><text x="56.5680%" y="95.50"></text></g><g><title>rack_get_thread_index (2 samples, 0.17%)</title><rect x="57.0711%" y="101" width="0.1674%" height="15" fill="rgb(207,135,9)" fg:x="682" fg:w="2"/><text x="57.3211%" y="111.50"></text></g><g><title>szone_malloc_should_clear (19 samples, 1.59%)</title><rect x="57.0711%" y="117" width="1.5900%" height="15" fill="rgb(206,86,44)" fg:x="682" fg:w="19"/><text x="57.3211%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (17 samples, 1.42%)</title><rect x="57.2385%" y="101" width="1.4226%" height="15" fill="rgb(245,177,15)" fg:x="684" fg:w="17"/><text x="57.4885%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (7 samples, 0.59%)</title><rect x="58.0753%" y="85" width="0.5858%" height="15" fill="rgb(206,64,50)" fg:x="694" fg:w="7"/><text x="58.3253%" y="95.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="58.5774%" y="69" width="0.0837%" height="15" fill="rgb(234,36,40)" fg:x="700" fg:w="1"/><text x="58.8274%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (100 samples, 8.37%)</title><rect x="50.4603%" y="133" width="8.3682%" height="15" fill="rgb(213,64,8)" fg:x="603" fg:w="100"/><text x="50.7103%" y="143.50">alloc::raw_v..</text></g><g><title>szone_size (2 samples, 0.17%)</title><rect x="58.6611%" y="117" width="0.1674%" height="15" fill="rgb(210,75,36)" fg:x="701" fg:w="2"/><text x="58.9111%" y="127.50"></text></g><g><title>realloc (2 samples, 0.17%)</title><rect x="58.8285%" y="133" width="0.1674%" height="15" fill="rgb(229,88,21)" fg:x="703" fg:w="2"/><text x="59.0785%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (289 samples, 24.18%)</title><rect x="34.9791%" y="181" width="24.1841%" height="15" fill="rgb(252,204,47)" fg:x="418" fg:w="289"/><text x="35.2291%" y="191.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (172 samples, 14.39%)</title><rect x="44.7699%" y="165" width="14.3933%" height="15" fill="rgb(208,77,27)" fg:x="535" fg:w="172"/><text x="45.0199%" y="175.50">vexy_json_core::parser::un..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (110 samples, 9.21%)</title><rect x="49.9582%" y="149" width="9.2050%" height="15" fill="rgb(221,76,26)" fg:x="597" fg:w="110"/><text x="50.2082%" y="159.50">alloc::raw_ve..</text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="58.9958%" y="133" width="0.1674%" height="15" fill="rgb(225,139,18)" fg:x="705" fg:w="2"/><text x="59.2458%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="59.6653%" y="149" width="0.0837%" height="15" fill="rgb(230,137,11)" fg:x="713" fg:w="1"/><text x="59.9153%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="59.7490%" y="149" width="0.2510%" height="15" fill="rgb(212,28,1)" fg:x="714" fg:w="3"/><text x="59.9990%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (13 samples, 1.09%)</title><rect x="59.1632%" y="181" width="1.0879%" height="15" fill="rgb(248,164,17)" fg:x="707" fg:w="13"/><text x="59.4132%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (10 samples, 0.84%)</title><rect x="59.4142%" y="165" width="0.8368%" height="15" fill="rgb(222,171,42)" fg:x="710" fg:w="10"/><text x="59.6642%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (3 samples, 0.25%)</title><rect x="60.0000%" y="149" width="0.2510%" height="15" fill="rgb(243,84,45)" fg:x="717" fg:w="3"/><text x="60.2500%" y="159.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="60.5021%" y="149" width="0.0837%" height="15" fill="rgb(252,49,23)" fg:x="723" fg:w="1"/><text x="60.7521%" y="159.50"></text></g><g><title>szone_good_size (1 samples, 0.08%)</title><rect x="60.5858%" y="101" width="0.0837%" height="15" fill="rgb(215,19,7)" fg:x="724" fg:w="1"/><text x="60.8358%" y="111.50"></text></g><g><title>_realloc (2 samples, 0.17%)</title><rect x="60.5858%" y="133" width="0.1674%" height="15" fill="rgb(238,81,41)" fg:x="724" fg:w="2"/><text x="60.8358%" y="143.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.17%)</title><rect x="60.5858%" y="117" width="0.1674%" height="15" fill="rgb(210,199,37)" fg:x="724" fg:w="2"/><text x="60.8358%" y="127.50"></text></g><g><title>szone_realloc (1 samples, 0.08%)</title><rect x="60.6695%" y="101" width="0.0837%" height="15" fill="rgb(244,192,49)" fg:x="725" fg:w="1"/><text x="60.9195%" y="111.50"></text></g><g><title>szone_size (1 samples, 0.08%)</title><rect x="60.6695%" y="85" width="0.0837%" height="15" fill="rgb(226,211,11)" fg:x="725" fg:w="1"/><text x="60.9195%" y="95.50"></text></g><g><title>tiny_size (1 samples, 0.08%)</title><rect x="60.6695%" y="69" width="0.0837%" height="15" fill="rgb(236,162,54)" fg:x="725" fg:w="1"/><text x="60.9195%" y="79.50"></text></g><g><title>rack_get_thread_index (4 samples, 0.33%)</title><rect x="60.7531%" y="117" width="0.3347%" height="15" fill="rgb(220,229,9)" fg:x="726" fg:w="4"/><text x="61.0031%" y="127.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="61.8410%" y="85" width="0.0837%" height="15" fill="rgb(250,87,22)" fg:x="739" fg:w="1"/><text x="62.0910%" y="95.50"></text></g><g><title>szone_malloc_should_clear (15 samples, 1.26%)</title><rect x="60.7531%" y="133" width="1.2552%" height="15" fill="rgb(239,43,17)" fg:x="726" fg:w="15"/><text x="61.0031%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (11 samples, 0.92%)</title><rect x="61.0879%" y="117" width="0.9205%" height="15" fill="rgb(231,177,25)" fg:x="730" fg:w="11"/><text x="61.3379%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (8 samples, 0.67%)</title><rect x="61.3389%" y="101" width="0.6695%" height="15" fill="rgb(219,179,1)" fg:x="733" fg:w="8"/><text x="61.5889%" y="111.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="61.9247%" y="85" width="0.0837%" height="15" fill="rgb(238,219,53)" fg:x="740" fg:w="1"/><text x="62.1747%" y="95.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (411 samples, 34.39%)</title><rect x="27.6987%" y="213" width="34.3933%" height="15" fill="rgb(232,167,36)" fg:x="331" fg:w="411"/><text x="27.9487%" y="223.50">vexy_json_core::parser::Parser::parse_array</text></g><g><title>vexy_json_core::parser::Parser::parse_value (404 samples, 33.81%)</title><rect x="28.2845%" y="197" width="33.8075%" height="15" fill="rgb(244,19,51)" fg:x="338" fg:w="404"/><text x="28.5345%" y="207.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (22 samples, 1.84%)</title><rect x="60.2510%" y="181" width="1.8410%" height="15" fill="rgb(224,6,22)" fg:x="720" fg:w="22"/><text x="60.5010%" y="191.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 1.67%)</title><rect x="60.4184%" y="165" width="1.6736%" height="15" fill="rgb(224,145,5)" fg:x="722" fg:w="20"/><text x="60.6684%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 1.51%)</title><rect x="60.5858%" y="149" width="1.5063%" height="15" fill="rgb(234,130,49)" fg:x="724" fg:w="18"/><text x="60.8358%" y="159.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="62.0084%" y="133" width="0.0837%" height="15" fill="rgb(254,6,2)" fg:x="741" fg:w="1"/><text x="62.2584%" y="143.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2 samples, 0.17%)</title><rect x="62.4268%" y="197" width="0.1674%" height="15" fill="rgb(208,96,46)" fg:x="746" fg:w="2"/><text x="62.6768%" y="207.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="62.4268%" y="181" width="0.1674%" height="15" fill="rgb(239,3,39)" fg:x="746" fg:w="2"/><text x="62.6768%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="62.4268%" y="165" width="0.1674%" height="15" fill="rgb(233,210,1)" fg:x="746" fg:w="2"/><text x="62.6768%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="62.5105%" y="149" width="0.0837%" height="15" fill="rgb(244,137,37)" fg:x="747" fg:w="1"/><text x="62.7605%" y="159.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="62.5105%" y="133" width="0.0837%" height="15" fill="rgb(240,136,2)" fg:x="747" fg:w="1"/><text x="62.7605%" y="143.50"></text></g><g><title>core::str::validations::next_code_point (3 samples, 0.25%)</title><rect x="62.5941%" y="197" width="0.2510%" height="15" fill="rgb(239,18,37)" fg:x="748" fg:w="3"/><text x="62.8441%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.50%)</title><rect x="63.1799%" y="181" width="0.5021%" height="15" fill="rgb(218,185,22)" fg:x="755" fg:w="6"/><text x="63.4299%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.25%)</title><rect x="63.4310%" y="165" width="0.2510%" height="15" fill="rgb(225,218,4)" fg:x="758" fg:w="3"/><text x="63.6810%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.17%)</title><rect x="64.0167%" y="165" width="0.1674%" height="15" fill="rgb(230,182,32)" fg:x="765" fg:w="2"/><text x="64.2667%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.17%)</title><rect x="64.0167%" y="149" width="0.1674%" height="15" fill="rgb(242,56,43)" fg:x="765" fg:w="2"/><text x="64.2667%" y="159.50"></text></g><g><title>free_small (1 samples, 0.08%)</title><rect x="64.1841%" y="165" width="0.0837%" height="15" fill="rgb(233,99,24)" fg:x="767" fg:w="1"/><text x="64.4341%" y="175.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="64.2678%" y="165" width="0.1674%" height="15" fill="rgb(234,209,42)" fg:x="768" fg:w="2"/><text x="64.5178%" y="175.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="64.3515%" y="149" width="0.0837%" height="15" fill="rgb(227,7,12)" fg:x="769" fg:w="1"/><text x="64.6015%" y="159.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="64.3515%" y="133" width="0.0837%" height="15" fill="rgb(245,203,43)" fg:x="769" fg:w="1"/><text x="64.6015%" y="143.50"></text></g><g><title>small_malloc_should_clear (2 samples, 0.17%)</title><rect x="64.4351%" y="149" width="0.1674%" height="15" fill="rgb(238,205,33)" fg:x="770" fg:w="2"/><text x="64.6851%" y="159.50"></text></g><g><title>small_malloc_from_free_list (2 samples, 0.17%)</title><rect x="64.4351%" y="133" width="0.1674%" height="15" fill="rgb(231,56,7)" fg:x="770" fg:w="2"/><text x="64.6851%" y="143.50"></text></g><g><title>small_free_list_add_ptr (2 samples, 0.17%)</title><rect x="64.4351%" y="117" width="0.1674%" height="15" fill="rgb(244,186,29)" fg:x="770" fg:w="2"/><text x="64.6851%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23 samples, 1.92%)</title><rect x="62.8452%" y="197" width="1.9247%" height="15" fill="rgb(234,111,31)" fg:x="751" fg:w="23"/><text x="63.0952%" y="207.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 1.09%)</title><rect x="63.6820%" y="181" width="1.0879%" height="15" fill="rgb(241,149,10)" fg:x="761" fg:w="13"/><text x="63.9320%" y="191.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.33%)</title><rect x="64.4351%" y="165" width="0.3347%" height="15" fill="rgb(249,206,44)" fg:x="770" fg:w="4"/><text x="64.6851%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="64.6025%" y="149" width="0.1674%" height="15" fill="rgb(251,153,30)" fg:x="772" fg:w="2"/><text x="64.8525%" y="159.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.08%)</title><rect x="64.6862%" y="133" width="0.0837%" height="15" fill="rgb(239,152,38)" fg:x="773" fg:w="1"/><text x="64.9362%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (6 samples, 0.50%)</title><rect x="64.7699%" y="181" width="0.5021%" height="15" fill="rgb(249,139,47)" fg:x="774" fg:w="6"/><text x="65.0199%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (7 samples, 0.59%)</title><rect x="64.7699%" y="197" width="0.5858%" height="15" fill="rgb(244,64,35)" fg:x="774" fg:w="7"/><text x="65.0199%" y="207.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.08%)</title><rect x="65.2720%" y="181" width="0.0837%" height="15" fill="rgb(216,46,15)" fg:x="780" fg:w="1"/><text x="65.5220%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.08%)</title><rect x="65.3556%" y="181" width="0.0837%" height="15" fill="rgb(250,74,19)" fg:x="781" fg:w="1"/><text x="65.6056%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="65.3556%" y="165" width="0.0837%" height="15" fill="rgb(249,42,33)" fg:x="781" fg:w="1"/><text x="65.6056%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (2 samples, 0.17%)</title><rect x="65.3556%" y="197" width="0.1674%" height="15" fill="rgb(242,149,17)" fg:x="781" fg:w="2"/><text x="65.6056%" y="207.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (1 samples, 0.08%)</title><rect x="65.4393%" y="181" width="0.0837%" height="15" fill="rgb(244,29,21)" fg:x="782" fg:w="1"/><text x="65.6893%" y="191.50"></text></g><g><title>vexy_json_core::parser::unescape_string (1 samples, 0.08%)</title><rect x="65.4393%" y="165" width="0.0837%" height="15" fill="rgb(220,130,37)" fg:x="782" fg:w="1"/><text x="65.6893%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.08%)</title><rect x="65.4393%" y="149" width="0.0837%" height="15" fill="rgb(211,67,2)" fg:x="782" fg:w="1"/><text x="65.6893%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.4393%" y="133" width="0.0837%" height="15" fill="rgb(235,68,52)" fg:x="782" fg:w="1"/><text x="65.6893%" y="143.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="65.4393%" y="117" width="0.0837%" height="15" fill="rgb(246,142,3)" fg:x="782" fg:w="1"/><text x="65.6893%" y="127.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="66.4435%" y="181" width="0.0837%" height="15" fill="rgb(241,25,7)" fg:x="794" fg:w="1"/><text x="66.6935%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.08%)</title><rect x="66.4435%" y="165" width="0.0837%" height="15" fill="rgb(242,119,39)" fg:x="794" fg:w="1"/><text x="66.6935%" y="175.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="66.6109%" y="133" width="0.0837%" height="15" fill="rgb(241,98,45)" fg:x="796" fg:w="1"/><text x="66.8609%" y="143.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3 samples, 0.25%)</title><rect x="66.5272%" y="181" width="0.2510%" height="15" fill="rgb(254,28,30)" fg:x="795" fg:w="3"/><text x="66.7772%" y="191.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="66.5272%" y="165" width="0.2510%" height="15" fill="rgb(241,142,54)" fg:x="795" fg:w="3"/><text x="66.7772%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.25%)</title><rect x="66.5272%" y="149" width="0.2510%" height="15" fill="rgb(222,85,15)" fg:x="795" fg:w="3"/><text x="66.7772%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="66.6946%" y="133" width="0.0837%" height="15" fill="rgb(210,85,47)" fg:x="797" fg:w="1"/><text x="66.9446%" y="143.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="66.6946%" y="117" width="0.0837%" height="15" fill="rgb(224,206,25)" fg:x="797" fg:w="1"/><text x="66.9446%" y="127.50"></text></g><g><title>_free (2 samples, 0.17%)</title><rect x="66.7782%" y="181" width="0.1674%" height="15" fill="rgb(243,201,19)" fg:x="798" fg:w="2"/><text x="67.0282%" y="191.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="66.9456%" y="181" width="0.0837%" height="15" fill="rgb(236,59,4)" fg:x="800" fg:w="1"/><text x="67.1956%" y="191.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="67.0293%" y="181" width="0.0837%" height="15" fill="rgb(254,179,45)" fg:x="801" fg:w="1"/><text x="67.2793%" y="191.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="67.1130%" y="181" width="0.0837%" height="15" fill="rgb(226,14,10)" fg:x="802" fg:w="1"/><text x="67.3630%" y="191.50"></text></g><g><title>_free (1 samples, 0.08%)</title><rect x="67.5314%" y="165" width="0.0837%" height="15" fill="rgb(244,27,41)" fg:x="807" fg:w="1"/><text x="67.7814%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.33%)</title><rect x="67.6151%" y="165" width="0.3347%" height="15" fill="rgb(235,35,32)" fg:x="808" fg:w="4"/><text x="67.8651%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.25%)</title><rect x="67.6987%" y="149" width="0.2510%" height="15" fill="rgb(218,68,31)" fg:x="809" fg:w="3"/><text x="67.9487%" y="159.50"></text></g><g><title>free_tiny (1 samples, 0.08%)</title><rect x="68.1172%" y="149" width="0.0837%" height="15" fill="rgb(207,120,37)" fg:x="814" fg:w="1"/><text x="68.3672%" y="159.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="68.1172%" y="133" width="0.0837%" height="15" fill="rgb(227,98,0)" fg:x="814" fg:w="1"/><text x="68.3672%" y="143.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="68.2008%" y="133" width="0.0837%" height="15" fill="rgb(207,7,3)" fg:x="815" fg:w="1"/><text x="68.4508%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.50%)</title><rect x="67.9498%" y="165" width="0.5021%" height="15" fill="rgb(206,98,19)" fg:x="812" fg:w="6"/><text x="68.1998%" y="175.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="68.2008%" y="149" width="0.2510%" height="15" fill="rgb(217,5,26)" fg:x="815" fg:w="3"/><text x="68.4508%" y="159.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="68.2845%" y="133" width="0.1674%" height="15" fill="rgb(235,190,38)" fg:x="816" fg:w="2"/><text x="68.5345%" y="143.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="68.2845%" y="117" width="0.1674%" height="15" fill="rgb(247,86,24)" fg:x="816" fg:w="2"/><text x="68.5345%" y="127.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="68.3682%" y="101" width="0.0837%" height="15" fill="rgb(205,101,16)" fg:x="817" fg:w="1"/><text x="68.6182%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 1.34%)</title><rect x="67.1967%" y="181" width="1.3389%" height="15" fill="rgb(246,168,33)" fg:x="803" fg:w="16"/><text x="67.4467%" y="191.50"></text></g><g><title>malloc (1 samples, 0.08%)</title><rect x="68.4519%" y="165" width="0.0837%" height="15" fill="rgb(231,114,1)" fg:x="818" fg:w="1"/><text x="68.7019%" y="175.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="68.5356%" y="181" width="0.0837%" height="15" fill="rgb(207,184,53)" fg:x="819" fg:w="1"/><text x="68.7856%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="68.5356%" y="165" width="0.0837%" height="15" fill="rgb(224,95,51)" fg:x="819" fg:w="1"/><text x="68.7856%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="68.5356%" y="149" width="0.0837%" height="15" fill="rgb(212,188,45)" fg:x="819" fg:w="1"/><text x="68.7856%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (9 samples, 0.75%)</title><rect x="68.8703%" y="165" width="0.7531%" height="15" fill="rgb(223,154,38)" fg:x="823" fg:w="9"/><text x="69.1203%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="69.6234%" y="165" width="0.2510%" height="15" fill="rgb(251,22,52)" fg:x="832" fg:w="3"/><text x="69.8734%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (16 samples, 1.34%)</title><rect x="68.6192%" y="181" width="1.3389%" height="15" fill="rgb(229,209,22)" fg:x="820" fg:w="16"/><text x="68.8692%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto367_ctx366_x (1 samples, 0.08%)</title><rect x="69.8745%" y="165" width="0.0837%" height="15" fill="rgb(234,138,34)" fg:x="835" fg:w="1"/><text x="70.1245%" y="175.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.08%)</title><rect x="70.2092%" y="101" width="0.0837%" height="15" fill="rgb(212,95,11)" fg:x="839" fg:w="1"/><text x="70.4592%" y="111.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.08%)</title><rect x="70.2929%" y="101" width="0.0837%" height="15" fill="rgb(240,179,47)" fg:x="840" fg:w="1"/><text x="70.5429%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.50%)</title><rect x="70.0418%" y="165" width="0.5021%" height="15" fill="rgb(240,163,11)" fg:x="837" fg:w="6"/><text x="70.2918%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.50%)</title><rect x="70.0418%" y="149" width="0.5021%" height="15" fill="rgb(236,37,12)" fg:x="837" fg:w="6"/><text x="70.2918%" y="159.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.50%)</title><rect x="70.0418%" y="133" width="0.5021%" height="15" fill="rgb(232,164,16)" fg:x="837" fg:w="6"/><text x="70.2918%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.42%)</title><rect x="70.1255%" y="117" width="0.4184%" height="15" fill="rgb(244,205,15)" fg:x="838" fg:w="5"/><text x="70.3755%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="70.3766%" y="101" width="0.1674%" height="15" fill="rgb(223,117,47)" fg:x="841" fg:w="2"/><text x="70.6266%" y="111.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.17%)</title><rect x="70.7950%" y="149" width="0.1674%" height="15" fill="rgb(244,107,35)" fg:x="846" fg:w="2"/><text x="71.0450%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (8 samples, 0.67%)</title><rect x="70.5439%" y="165" width="0.6695%" height="15" fill="rgb(205,140,8)" fg:x="843" fg:w="8"/><text x="70.7939%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="70.9623%" y="149" width="0.2510%" height="15" fill="rgb(228,84,46)" fg:x="848" fg:w="3"/><text x="71.2123%" y="159.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="71.8828%" y="149" width="0.0837%" height="15" fill="rgb(254,188,9)" fg:x="859" fg:w="1"/><text x="72.1328%" y="159.50"></text></g><g><title>vexy_json_core::parser::unescape_string (1 samples, 0.08%)</title><rect x="71.8828%" y="133" width="0.0837%" height="15" fill="rgb(206,112,54)" fg:x="859" fg:w="1"/><text x="72.1328%" y="143.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="71.9665%" y="149" width="0.0837%" height="15" fill="rgb(216,84,49)" fg:x="860" fg:w="1"/><text x="72.2165%" y="159.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="72.0502%" y="149" width="0.0837%" height="15" fill="rgb(214,194,35)" fg:x="861" fg:w="1"/><text x="72.3002%" y="159.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.08%)</title><rect x="72.1339%" y="149" width="0.0837%" height="15" fill="rgb(249,28,3)" fg:x="862" fg:w="1"/><text x="72.3839%" y="159.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="72.9707%" y="133" width="0.0837%" height="15" fill="rgb(222,56,52)" fg:x="872" fg:w="1"/><text x="73.2207%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.84%)</title><rect x="73.0544%" y="133" width="0.8368%" height="15" fill="rgb(245,217,50)" fg:x="873" fg:w="10"/><text x="73.3044%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.33%)</title><rect x="73.5565%" y="117" width="0.3347%" height="15" fill="rgb(213,201,24)" fg:x="879" fg:w="4"/><text x="73.8065%" y="127.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="73.8912%" y="117" width="0.1674%" height="15" fill="rgb(248,116,28)" fg:x="883" fg:w="2"/><text x="74.1412%" y="127.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="74.0586%" y="117" width="0.1674%" height="15" fill="rgb(219,72,43)" fg:x="885" fg:w="2"/><text x="74.3086%" y="127.50"></text></g><g><title>rack_get_thread_index (2 samples, 0.17%)</title><rect x="74.2259%" y="101" width="0.1674%" height="15" fill="rgb(209,138,14)" fg:x="887" fg:w="2"/><text x="74.4759%" y="111.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.08%)</title><rect x="74.3933%" y="101" width="0.0837%" height="15" fill="rgb(222,18,33)" fg:x="889" fg:w="1"/><text x="74.6433%" y="111.50"></text></g><g><title>set_tiny_meta_header_in_use (3 samples, 0.25%)</title><rect x="74.8954%" y="85" width="0.2510%" height="15" fill="rgb(213,199,7)" fg:x="895" fg:w="3"/><text x="75.1454%" y="95.50"></text></g><g><title>szone_malloc_should_clear (13 samples, 1.09%)</title><rect x="74.2259%" y="117" width="1.0879%" height="15" fill="rgb(250,110,10)" fg:x="887" fg:w="13"/><text x="74.4759%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (10 samples, 0.84%)</title><rect x="74.4770%" y="101" width="0.8368%" height="15" fill="rgb(248,123,6)" fg:x="890" fg:w="10"/><text x="74.7270%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="75.1464%" y="85" width="0.1674%" height="15" fill="rgb(206,91,31)" fg:x="898" fg:w="2"/><text x="75.3964%" y="95.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (38 samples, 3.18%)</title><rect x="72.2176%" y="149" width="3.1799%" height="15" fill="rgb(211,154,13)" fg:x="863" fg:w="38"/><text x="72.4676%" y="159.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 1.51%)</title><rect x="73.8912%" y="133" width="1.5063%" height="15" fill="rgb(225,148,7)" fg:x="883" fg:w="18"/><text x="74.1412%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="75.3138%" y="117" width="0.0837%" height="15" fill="rgb(220,160,43)" fg:x="900" fg:w="1"/><text x="75.5638%" y="127.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (9 samples, 0.75%)</title><rect x="75.4812%" y="133" width="0.7531%" height="15" fill="rgb(213,52,39)" fg:x="902" fg:w="9"/><text x="75.7312%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="76.2343%" y="133" width="0.2510%" height="15" fill="rgb(243,137,7)" fg:x="911" fg:w="3"/><text x="76.4843%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (2 samples, 0.17%)</title><rect x="76.4854%" y="133" width="0.1674%" height="15" fill="rgb(230,79,13)" fg:x="914" fg:w="2"/><text x="76.7354%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (16 samples, 1.34%)</title><rect x="75.3975%" y="149" width="1.3389%" height="15" fill="rgb(247,105,23)" fg:x="901" fg:w="16"/><text x="75.6475%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto367_ctx366_x (1 samples, 0.08%)</title><rect x="76.6527%" y="133" width="0.0837%" height="15" fill="rgb(223,179,41)" fg:x="916" fg:w="1"/><text x="76.9027%" y="143.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="76.8201%" y="133" width="0.0837%" height="15" fill="rgb(218,9,34)" fg:x="918" fg:w="1"/><text x="77.0701%" y="143.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2 samples, 0.17%)</title><rect x="76.9038%" y="133" width="0.1674%" height="15" fill="rgb(222,106,8)" fg:x="919" fg:w="2"/><text x="77.1538%" y="143.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.08%)</title><rect x="76.9874%" y="117" width="0.0837%" height="15" fill="rgb(211,220,0)" fg:x="920" fg:w="1"/><text x="77.2374%" y="127.50"></text></g><g><title>free_tiny (7 samples, 0.59%)</title><rect x="77.0711%" y="133" width="0.5858%" height="15" fill="rgb(229,52,16)" fg:x="921" fg:w="7"/><text x="77.3211%" y="143.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="77.5732%" y="117" width="0.0837%" height="15" fill="rgb(212,155,18)" fg:x="927" fg:w="1"/><text x="77.8232%" y="127.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.84%)</title><rect x="77.6569%" y="133" width="0.8368%" height="15" fill="rgb(242,21,14)" fg:x="928" fg:w="10"/><text x="77.9069%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (9 samples, 0.75%)</title><rect x="77.7406%" y="117" width="0.7531%" height="15" fill="rgb(222,19,48)" fg:x="929" fg:w="9"/><text x="77.9906%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.25%)</title><rect x="78.2427%" y="101" width="0.2510%" height="15" fill="rgb(232,45,27)" fg:x="935" fg:w="3"/><text x="78.4927%" y="111.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="78.4937%" y="133" width="0.2510%" height="15" fill="rgb(249,103,42)" fg:x="938" fg:w="3"/><text x="78.7437%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.17%)</title><rect x="78.5774%" y="117" width="0.1674%" height="15" fill="rgb(246,81,33)" fg:x="939" fg:w="2"/><text x="78.8274%" y="127.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.08%)</title><rect x="78.9958%" y="101" width="0.0837%" height="15" fill="rgb(252,33,42)" fg:x="944" fg:w="1"/><text x="79.2458%" y="111.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.17%)</title><rect x="79.0795%" y="101" width="0.1674%" height="15" fill="rgb(209,212,41)" fg:x="945" fg:w="2"/><text x="79.3295%" y="111.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="79.3305%" y="69" width="0.0837%" height="15" fill="rgb(207,154,6)" fg:x="948" fg:w="1"/><text x="79.5805%" y="79.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (39 samples, 3.26%)</title><rect x="76.7364%" y="149" width="3.2636%" height="15" fill="rgb(223,64,47)" fg:x="917" fg:w="39"/><text x="76.9864%" y="159.50">zzs..</text></g><g><title>vexy_json_core::parser::unescape_string (15 samples, 1.26%)</title><rect x="78.7448%" y="133" width="1.2552%" height="15" fill="rgb(211,161,38)" fg:x="941" fg:w="15"/><text x="78.9948%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 1.00%)</title><rect x="78.9958%" y="117" width="1.0042%" height="15" fill="rgb(219,138,40)" fg:x="944" fg:w="12"/><text x="79.2458%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.75%)</title><rect x="79.2469%" y="101" width="0.7531%" height="15" fill="rgb(241,228,46)" fg:x="947" fg:w="9"/><text x="79.4969%" y="111.50"></text></g><g><title>szone_malloc_should_clear (8 samples, 0.67%)</title><rect x="79.3305%" y="85" width="0.6695%" height="15" fill="rgb(223,209,38)" fg:x="948" fg:w="8"/><text x="79.5805%" y="95.50"></text></g><g><title>tiny_malloc_should_clear (7 samples, 0.59%)</title><rect x="79.4142%" y="69" width="0.5858%" height="15" fill="rgb(236,164,45)" fg:x="949" fg:w="7"/><text x="79.6642%" y="79.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.25%)</title><rect x="79.7490%" y="53" width="0.2510%" height="15" fill="rgb(231,15,5)" fg:x="953" fg:w="3"/><text x="79.9990%" y="63.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.08%)</title><rect x="80.0000%" y="149" width="0.0837%" height="15" fill="rgb(252,35,15)" fg:x="956" fg:w="1"/><text x="80.2500%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (2 samples, 0.17%)</title><rect x="80.0837%" y="149" width="0.1674%" height="15" fill="rgb(248,181,18)" fg:x="957" fg:w="2"/><text x="80.3337%" y="159.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="80.5021%" y="133" width="0.0837%" height="15" fill="rgb(233,39,42)" fg:x="962" fg:w="1"/><text x="80.7521%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.5021%" y="117" width="0.0837%" height="15" fill="rgb(238,110,33)" fg:x="962" fg:w="1"/><text x="80.7521%" y="127.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="80.6695%" y="117" width="0.0837%" height="15" fill="rgb(233,195,10)" fg:x="964" fg:w="1"/><text x="80.9195%" y="127.50"></text></g><g><title>rack_get_thread_index (4 samples, 0.33%)</title><rect x="80.7531%" y="85" width="0.3347%" height="15" fill="rgb(254,105,3)" fg:x="965" fg:w="4"/><text x="81.0031%" y="95.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="82.3431%" y="69" width="0.0837%" height="15" fill="rgb(221,225,9)" fg:x="984" fg:w="1"/><text x="82.5931%" y="79.50"></text></g><g><title>szone_malloc_should_clear (23 samples, 1.92%)</title><rect x="80.7531%" y="101" width="1.9247%" height="15" fill="rgb(224,227,45)" fg:x="965" fg:w="23"/><text x="81.0031%" y="111.50">s..</text></g><g><title>tiny_malloc_should_clear (19 samples, 1.59%)</title><rect x="81.0879%" y="85" width="1.5900%" height="15" fill="rgb(229,198,43)" fg:x="969" fg:w="19"/><text x="81.3379%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.25%)</title><rect x="82.4268%" y="69" width="0.2510%" height="15" fill="rgb(206,209,35)" fg:x="985" fg:w="3"/><text x="82.6768%" y="79.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (153 samples, 12.80%)</title><rect x="69.9582%" y="181" width="12.8033%" height="15" fill="rgb(245,195,53)" fg:x="836" fg:w="153"/><text x="70.2082%" y="191.50">vexy_json_core::parser:..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (138 samples, 11.55%)</title><rect x="71.2134%" y="165" width="11.5481%" height="15" fill="rgb(240,92,26)" fg:x="851" fg:w="138"/><text x="71.4634%" y="175.50">vexy_json_core::parse..</text></g><g><title>vexy_json_core::parser::unescape_string (30 samples, 2.51%)</title><rect x="80.2510%" y="149" width="2.5105%" height="15" fill="rgb(207,40,23)" fg:x="959" fg:w="30"/><text x="80.5010%" y="159.50">zz..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (26 samples, 2.18%)</title><rect x="80.5858%" y="133" width="2.1757%" height="15" fill="rgb(223,111,35)" fg:x="963" fg:w="26"/><text x="80.8358%" y="143.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 2.01%)</title><rect x="80.7531%" y="117" width="2.0084%" height="15" fill="rgb(229,147,28)" fg:x="965" fg:w="24"/><text x="81.0031%" y="127.50">a..</text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="82.6778%" y="101" width="0.0837%" height="15" fill="rgb(211,29,28)" fg:x="988" fg:w="1"/><text x="82.9278%" y="111.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="83.5983%" y="165" width="0.1674%" height="15" fill="rgb(228,72,33)" fg:x="999" fg:w="2"/><text x="83.8483%" y="175.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.08%)</title><rect x="83.7657%" y="165" width="0.0837%" height="15" fill="rgb(205,214,31)" fg:x="1001" fg:w="1"/><text x="84.0157%" y="175.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.08%)</title><rect x="83.7657%" y="149" width="0.0837%" height="15" fill="rgb(224,111,15)" fg:x="1001" fg:w="1"/><text x="84.0157%" y="159.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.08%)</title><rect x="83.8494%" y="165" width="0.0837%" height="15" fill="rgb(253,21,26)" fg:x="1002" fg:w="1"/><text x="84.0994%" y="175.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="83.9331%" y="165" width="0.0837%" height="15" fill="rgb(245,139,43)" fg:x="1003" fg:w="1"/><text x="84.1831%" y="175.50"></text></g><g><title>free_tiny (1 samples, 0.08%)</title><rect x="84.0167%" y="165" width="0.0837%" height="15" fill="rgb(252,170,7)" fg:x="1004" fg:w="1"/><text x="84.2667%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.33%)</title><rect x="84.6862%" y="149" width="0.3347%" height="15" fill="rgb(231,118,14)" fg:x="1012" fg:w="4"/><text x="84.9362%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="84.9372%" y="133" width="0.0837%" height="15" fill="rgb(238,83,0)" fg:x="1015" fg:w="1"/><text x="85.1872%" y="143.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="85.1046%" y="117" width="0.0837%" height="15" fill="rgb(221,39,39)" fg:x="1017" fg:w="1"/><text x="85.3546%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.33%)</title><rect x="85.0209%" y="149" width="0.3347%" height="15" fill="rgb(222,119,46)" fg:x="1016" fg:w="4"/><text x="85.2709%" y="159.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="85.1046%" y="133" width="0.2510%" height="15" fill="rgb(222,165,49)" fg:x="1017" fg:w="3"/><text x="85.3546%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="85.1883%" y="117" width="0.1674%" height="15" fill="rgb(219,113,52)" fg:x="1018" fg:w="2"/><text x="85.4383%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 1.34%)</title><rect x="84.1004%" y="165" width="1.3389%" height="15" fill="rgb(214,7,15)" fg:x="1005" fg:w="16"/><text x="84.3504%" y="175.50"></text></g><g><title>malloc (1 samples, 0.08%)</title><rect x="85.3556%" y="149" width="0.0837%" height="15" fill="rgb(235,32,4)" fg:x="1020" fg:w="1"/><text x="85.6056%" y="159.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.33%)</title><rect x="85.4393%" y="165" width="0.3347%" height="15" fill="rgb(238,90,54)" fg:x="1021" fg:w="4"/><text x="85.6893%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (4 samples, 0.33%)</title><rect x="85.4393%" y="149" width="0.3347%" height="15" fill="rgb(213,208,19)" fg:x="1021" fg:w="4"/><text x="85.6893%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="85.6904%" y="133" width="0.0837%" height="15" fill="rgb(233,156,4)" fg:x="1024" fg:w="1"/><text x="85.9404%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (5 samples, 0.42%)</title><rect x="85.8577%" y="149" width="0.4184%" height="15" fill="rgb(207,194,5)" fg:x="1026" fg:w="5"/><text x="86.1077%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.17%)</title><rect x="86.2762%" y="149" width="0.1674%" height="15" fill="rgb(206,111,30)" fg:x="1031" fg:w="2"/><text x="86.5262%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (9 samples, 0.75%)</title><rect x="85.7741%" y="165" width="0.7531%" height="15" fill="rgb(243,70,54)" fg:x="1025" fg:w="9"/><text x="86.0241%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.08%)</title><rect x="86.4435%" y="149" width="0.0837%" height="15" fill="rgb(242,28,8)" fg:x="1033" fg:w="1"/><text x="86.6935%" y="159.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="86.9456%" y="133" width="0.0837%" height="15" fill="rgb(219,106,18)" fg:x="1039" fg:w="1"/><text x="87.1956%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.25%)</title><rect x="86.9456%" y="149" width="0.2510%" height="15" fill="rgb(244,222,10)" fg:x="1039" fg:w="3"/><text x="87.1956%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.17%)</title><rect x="87.0293%" y="133" width="0.1674%" height="15" fill="rgb(236,179,52)" fg:x="1040" fg:w="2"/><text x="87.2793%" y="143.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="87.0293%" y="117" width="0.1674%" height="15" fill="rgb(213,23,39)" fg:x="1040" fg:w="2"/><text x="87.2793%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="87.0293%" y="101" width="0.1674%" height="15" fill="rgb(238,48,10)" fg:x="1040" fg:w="2"/><text x="87.2793%" y="111.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="87.3640%" y="133" width="0.0837%" height="15" fill="rgb(251,196,23)" fg:x="1044" fg:w="1"/><text x="87.6140%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (5 samples, 0.42%)</title><rect x="87.1967%" y="149" width="0.4184%" height="15" fill="rgb(250,152,24)" fg:x="1042" fg:w="5"/><text x="87.4467%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (2 samples, 0.17%)</title><rect x="87.4477%" y="133" width="0.1674%" height="15" fill="rgb(209,150,17)" fg:x="1045" fg:w="2"/><text x="87.6977%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.08%)</title><rect x="87.8661%" y="133" width="0.0837%" height="15" fill="rgb(234,202,34)" fg:x="1050" fg:w="1"/><text x="88.1161%" y="143.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="87.9498%" y="101" width="0.0837%" height="15" fill="rgb(253,148,53)" fg:x="1051" fg:w="1"/><text x="88.1998%" y="111.50"></text></g><g><title>rack_get_thread_index (4 samples, 0.33%)</title><rect x="88.2008%" y="69" width="0.3347%" height="15" fill="rgb(218,129,16)" fg:x="1054" fg:w="4"/><text x="88.4508%" y="79.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (30 samples, 2.51%)</title><rect x="86.5272%" y="165" width="2.5105%" height="15" fill="rgb(216,85,19)" fg:x="1034" fg:w="30"/><text x="86.7772%" y="175.50">zz..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (17 samples, 1.42%)</title><rect x="87.6151%" y="149" width="1.4226%" height="15" fill="rgb(235,228,7)" fg:x="1047" fg:w="17"/><text x="87.8651%" y="159.50"></text></g><g><title>vexy_json_core::parser::unescape_string (13 samples, 1.09%)</title><rect x="87.9498%" y="133" width="1.0879%" height="15" fill="rgb(245,175,0)" fg:x="1051" fg:w="13"/><text x="88.1998%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 1.09%)</title><rect x="87.9498%" y="117" width="1.0879%" height="15" fill="rgb(208,168,36)" fg:x="1051" fg:w="13"/><text x="88.1998%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 1.00%)</title><rect x="88.0335%" y="101" width="1.0042%" height="15" fill="rgb(246,171,24)" fg:x="1052" fg:w="12"/><text x="88.2835%" y="111.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.84%)</title><rect x="88.2008%" y="85" width="0.8368%" height="15" fill="rgb(215,142,24)" fg:x="1054" fg:w="10"/><text x="88.4508%" y="95.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.50%)</title><rect x="88.5356%" y="69" width="0.5021%" height="15" fill="rgb(250,187,7)" fg:x="1058" fg:w="6"/><text x="88.7856%" y="79.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="88.8703%" y="53" width="0.1674%" height="15" fill="rgb(228,66,33)" fg:x="1062" fg:w="2"/><text x="89.1203%" y="63.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="89.1213%" y="149" width="0.0837%" height="15" fill="rgb(234,215,21)" fg:x="1065" fg:w="1"/><text x="89.3713%" y="159.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.17%)</title><rect x="89.2050%" y="149" width="0.1674%" height="15" fill="rgb(222,191,20)" fg:x="1066" fg:w="2"/><text x="89.4550%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.25%)</title><rect x="89.4561%" y="133" width="0.2510%" height="15" fill="rgb(245,79,54)" fg:x="1069" fg:w="3"/><text x="89.7061%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="89.6234%" y="117" width="0.0837%" height="15" fill="rgb(240,10,37)" fg:x="1071" fg:w="1"/><text x="89.8734%" y="127.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="89.7071%" y="101" width="0.0837%" height="15" fill="rgb(214,192,32)" fg:x="1072" fg:w="1"/><text x="89.9571%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.50%)</title><rect x="89.3724%" y="149" width="0.5021%" height="15" fill="rgb(209,36,54)" fg:x="1068" fg:w="6"/><text x="89.6224%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.17%)</title><rect x="89.7071%" y="133" width="0.1674%" height="15" fill="rgb(220,10,11)" fg:x="1072" fg:w="2"/><text x="89.9571%" y="143.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="89.7071%" y="117" width="0.1674%" height="15" fill="rgb(221,106,17)" fg:x="1072" fg:w="2"/><text x="89.9571%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="89.7908%" y="101" width="0.0837%" height="15" fill="rgb(251,142,44)" fg:x="1073" fg:w="1"/><text x="90.0408%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="89.7908%" y="85" width="0.0837%" height="15" fill="rgb(238,13,15)" fg:x="1073" fg:w="1"/><text x="90.0408%" y="95.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (3 samples, 0.25%)</title><rect x="90.1255%" y="133" width="0.2510%" height="15" fill="rgb(208,107,27)" fg:x="1077" fg:w="3"/><text x="90.3755%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="90.3766%" y="133" width="0.2510%" height="15" fill="rgb(205,136,37)" fg:x="1080" fg:w="3"/><text x="90.6266%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (10 samples, 0.84%)</title><rect x="89.8745%" y="149" width="0.8368%" height="15" fill="rgb(250,205,27)" fg:x="1074" fg:w="10"/><text x="90.1245%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto559_ctx537_x (1 samples, 0.08%)</title><rect x="90.6276%" y="133" width="0.0837%" height="15" fill="rgb(210,80,43)" fg:x="1083" fg:w="1"/><text x="90.8776%" y="143.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="90.7113%" y="133" width="0.0837%" height="15" fill="rgb(247,160,36)" fg:x="1084" fg:w="1"/><text x="90.9613%" y="143.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.08%)</title><rect x="90.7950%" y="133" width="0.0837%" height="15" fill="rgb(234,13,49)" fg:x="1085" fg:w="1"/><text x="91.0450%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (6 samples, 0.50%)</title><rect x="90.7113%" y="149" width="0.5021%" height="15" fill="rgb(234,122,0)" fg:x="1084" fg:w="6"/><text x="90.9613%" y="159.50"></text></g><g><title>free_tiny (4 samples, 0.33%)</title><rect x="90.8787%" y="133" width="0.3347%" height="15" fill="rgb(207,146,38)" fg:x="1086" fg:w="4"/><text x="91.1287%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.08%)</title><rect x="91.2134%" y="149" width="0.0837%" height="15" fill="rgb(207,177,25)" fg:x="1090" fg:w="1"/><text x="91.4634%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="91.3808%" y="117" width="0.0837%" height="15" fill="rgb(211,178,42)" fg:x="1092" fg:w="1"/><text x="91.6308%" y="127.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (3 samples, 0.25%)</title><rect x="91.2971%" y="149" width="0.2510%" height="15" fill="rgb(230,69,54)" fg:x="1091" fg:w="3"/><text x="91.5471%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="91.2971%" y="133" width="0.2510%" height="15" fill="rgb(214,135,41)" fg:x="1091" fg:w="3"/><text x="91.5471%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.08%)</title><rect x="91.4644%" y="117" width="0.0837%" height="15" fill="rgb(237,67,25)" fg:x="1093" fg:w="1"/><text x="91.7144%" y="127.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.08%)</title><rect x="91.8828%" y="101" width="0.0837%" height="15" fill="rgb(222,189,50)" fg:x="1098" fg:w="1"/><text x="92.1328%" y="111.50"></text></g><g><title>_malloc_zone_realloc (5 samples, 0.42%)</title><rect x="92.0502%" y="85" width="0.4184%" height="15" fill="rgb(245,148,34)" fg:x="1100" fg:w="5"/><text x="92.3002%" y="95.50"></text></g><g><title>szone_realloc (3 samples, 0.25%)</title><rect x="92.2176%" y="69" width="0.2510%" height="15" fill="rgb(222,29,6)" fg:x="1102" fg:w="3"/><text x="92.4676%" y="79.50"></text></g><g><title>szone_size (2 samples, 0.17%)</title><rect x="92.3013%" y="53" width="0.1674%" height="15" fill="rgb(221,189,43)" fg:x="1103" fg:w="2"/><text x="92.5513%" y="63.50"></text></g><g><title>tiny_size (2 samples, 0.17%)</title><rect x="92.3013%" y="37" width="0.1674%" height="15" fill="rgb(207,36,27)" fg:x="1103" fg:w="2"/><text x="92.5513%" y="47.50"></text></g><g><title>_realloc (9 samples, 0.75%)</title><rect x="91.9665%" y="101" width="0.7531%" height="15" fill="rgb(217,90,24)" fg:x="1099" fg:w="9"/><text x="92.2165%" y="111.50"></text></g><g><title>szone_size (3 samples, 0.25%)</title><rect x="92.4686%" y="85" width="0.2510%" height="15" fill="rgb(224,66,35)" fg:x="1105" fg:w="3"/><text x="92.7186%" y="95.50"></text></g><g><title>tiny_size (3 samples, 0.25%)</title><rect x="92.4686%" y="69" width="0.2510%" height="15" fill="rgb(221,13,50)" fg:x="1105" fg:w="3"/><text x="92.7186%" y="79.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="92.8870%" y="85" width="0.0837%" height="15" fill="rgb(236,68,49)" fg:x="1110" fg:w="1"/><text x="93.1370%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (22 samples, 1.84%)</title><rect x="91.8828%" y="117" width="1.8410%" height="15" fill="rgb(229,146,28)" fg:x="1098" fg:w="22"/><text x="92.1328%" y="127.50">a..</text></g><g><title>szone_malloc_should_clear (12 samples, 1.00%)</title><rect x="92.7197%" y="101" width="1.0042%" height="15" fill="rgb(225,31,38)" fg:x="1108" fg:w="12"/><text x="92.9697%" y="111.50"></text></g><g><title>tiny_malloc_should_clear (9 samples, 0.75%)</title><rect x="92.9707%" y="85" width="0.7531%" height="15" fill="rgb(250,208,3)" fg:x="1111" fg:w="9"/><text x="93.2207%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.42%)</title><rect x="93.3054%" y="69" width="0.4184%" height="15" fill="rgb(246,54,23)" fg:x="1115" fg:w="5"/><text x="93.5554%" y="79.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.25%)</title><rect x="93.4728%" y="53" width="0.2510%" height="15" fill="rgb(243,76,11)" fg:x="1117" fg:w="3"/><text x="93.7228%" y="63.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (57 samples, 4.77%)</title><rect x="89.0377%" y="165" width="4.7699%" height="15" fill="rgb(245,21,50)" fg:x="1064" fg:w="57"/><text x="89.2877%" y="175.50">vexy_json_..</text></g><g><title>vexy_json_core::parser::unescape_string (27 samples, 2.26%)</title><rect x="91.5481%" y="149" width="2.2594%" height="15" fill="rgb(228,9,43)" fg:x="1094" fg:w="27"/><text x="91.7981%" y="159.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (25 samples, 2.09%)</title><rect x="91.7155%" y="133" width="2.0921%" height="15" fill="rgb(208,100,47)" fg:x="1096" fg:w="25"/><text x="91.9655%" y="143.50">a..</text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.7238%" y="117" width="0.0837%" height="15" fill="rgb(232,26,8)" fg:x="1120" fg:w="1"/><text x="93.9738%" y="127.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.08%)</title><rect x="93.8075%" y="165" width="0.0837%" height="15" fill="rgb(216,166,38)" fg:x="1121" fg:w="1"/><text x="94.0575%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="94.0586%" y="133" width="0.0837%" height="15" fill="rgb(251,202,51)" fg:x="1124" fg:w="1"/><text x="94.3086%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (5 samples, 0.42%)</title><rect x="93.8912%" y="165" width="0.4184%" height="15" fill="rgb(254,216,34)" fg:x="1122" fg:w="5"/><text x="94.1412%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.33%)</title><rect x="93.9749%" y="149" width="0.3347%" height="15" fill="rgb(251,32,27)" fg:x="1123" fg:w="4"/><text x="94.2249%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.17%)</title><rect x="94.1423%" y="133" width="0.1674%" height="15" fill="rgb(208,127,28)" fg:x="1125" fg:w="2"/><text x="94.3923%" y="143.50"></text></g><g><title>_malloc_zone_malloc (3 samples, 0.25%)</title><rect x="94.6444%" y="133" width="0.2510%" height="15" fill="rgb(224,137,22)" fg:x="1131" fg:w="3"/><text x="94.8944%" y="143.50"></text></g><g><title>szone_good_size (1 samples, 0.08%)</title><rect x="95.1464%" y="85" width="0.0837%" height="15" fill="rgb(254,70,32)" fg:x="1137" fg:w="1"/><text x="95.3964%" y="95.50"></text></g><g><title>_realloc (3 samples, 0.25%)</title><rect x="95.0628%" y="117" width="0.2510%" height="15" fill="rgb(229,75,37)" fg:x="1136" fg:w="3"/><text x="95.3128%" y="127.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.17%)</title><rect x="95.1464%" y="101" width="0.1674%" height="15" fill="rgb(252,64,23)" fg:x="1137" fg:w="2"/><text x="95.3964%" y="111.50"></text></g><g><title>szone_realloc (1 samples, 0.08%)</title><rect x="95.2301%" y="85" width="0.0837%" height="15" fill="rgb(232,162,48)" fg:x="1138" fg:w="1"/><text x="95.4801%" y="95.50"></text></g><g><title>tiny_try_realloc_in_place (1 samples, 0.08%)</title><rect x="95.2301%" y="69" width="0.0837%" height="15" fill="rgb(246,160,12)" fg:x="1138" fg:w="1"/><text x="95.4801%" y="79.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.25%)</title><rect x="95.3138%" y="101" width="0.2510%" height="15" fill="rgb(247,166,0)" fg:x="1139" fg:w="3"/><text x="95.5638%" y="111.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (165 samples, 13.81%)</title><rect x="82.7615%" y="181" width="13.8075%" height="15" fill="rgb(249,219,21)" fg:x="989" fg:w="165"/><text x="83.0115%" y="191.50">vexy_json_core::parser::P..</text></g><g><title>vexy_json_core::parser::unescape_string (27 samples, 2.26%)</title><rect x="94.3096%" y="165" width="2.2594%" height="15" fill="rgb(205,209,3)" fg:x="1127" fg:w="27"/><text x="94.5596%" y="175.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (23 samples, 1.92%)</title><rect x="94.6444%" y="149" width="1.9247%" height="15" fill="rgb(243,44,1)" fg:x="1131" fg:w="23"/><text x="94.8944%" y="159.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 1.67%)</title><rect x="94.8954%" y="133" width="1.6736%" height="15" fill="rgb(206,159,16)" fg:x="1134" fg:w="20"/><text x="95.1454%" y="143.50"></text></g><g><title>szone_malloc_should_clear (15 samples, 1.26%)</title><rect x="95.3138%" y="117" width="1.2552%" height="15" fill="rgb(244,77,30)" fg:x="1139" fg:w="15"/><text x="95.5638%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (12 samples, 1.00%)</title><rect x="95.5649%" y="101" width="1.0042%" height="15" fill="rgb(218,69,12)" fg:x="1142" fg:w="12"/><text x="95.8149%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="96.4017%" y="85" width="0.1674%" height="15" fill="rgb(212,87,7)" fg:x="1152" fg:w="2"/><text x="96.6517%" y="95.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="96.4854%" y="69" width="0.0837%" height="15" fill="rgb(245,114,25)" fg:x="1153" fg:w="1"/><text x="96.7354%" y="79.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (2 samples, 0.17%)</title><rect x="96.5690%" y="181" width="0.1674%" height="15" fill="rgb(210,61,42)" fg:x="1154" fg:w="2"/><text x="96.8190%" y="191.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="96.8201%" y="165" width="0.0837%" height="15" fill="rgb(211,52,33)" fg:x="1157" fg:w="1"/><text x="97.0701%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="96.8201%" y="149" width="0.0837%" height="15" fill="rgb(234,58,33)" fg:x="1157" fg:w="1"/><text x="97.0701%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (5 samples, 0.42%)</title><rect x="96.7364%" y="181" width="0.4184%" height="15" fill="rgb(220,115,36)" fg:x="1156" fg:w="5"/><text x="96.9864%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="96.9038%" y="165" width="0.2510%" height="15" fill="rgb(243,153,54)" fg:x="1158" fg:w="3"/><text x="97.1538%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="96.9038%" y="149" width="0.2510%" height="15" fill="rgb(251,47,18)" fg:x="1158" fg:w="3"/><text x="97.1538%" y="159.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.17%)</title><rect x="97.6569%" y="149" width="0.1674%" height="15" fill="rgb(242,102,42)" fg:x="1167" fg:w="2"/><text x="97.9069%" y="159.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.25%)</title><rect x="97.9916%" y="117" width="0.2510%" height="15" fill="rgb(234,31,38)" fg:x="1171" fg:w="3"/><text x="98.2416%" y="127.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (399 samples, 33.39%)</title><rect x="65.5230%" y="197" width="33.3891%" height="15" fill="rgb(221,117,51)" fg:x="783" fg:w="399"/><text x="65.7730%" y="207.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (21 samples, 1.76%)</title><rect x="97.1548%" y="181" width="1.7573%" height="15" fill="rgb(212,20,18)" fg:x="1161" fg:w="21"/><text x="97.4048%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (15 samples, 1.26%)</title><rect x="97.6569%" y="165" width="1.2552%" height="15" fill="rgb(245,133,36)" fg:x="1167" fg:w="15"/><text x="97.9069%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 1.09%)</title><rect x="97.8243%" y="149" width="1.0879%" height="15" fill="rgb(212,6,19)" fg:x="1169" fg:w="13"/><text x="98.0743%" y="159.50"></text></g><g><title>szone_malloc_should_clear (11 samples, 0.92%)</title><rect x="97.9916%" y="133" width="0.9205%" height="15" fill="rgb(218,1,36)" fg:x="1171" fg:w="11"/><text x="98.2416%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (8 samples, 0.67%)</title><rect x="98.2427%" y="117" width="0.6695%" height="15" fill="rgb(246,84,54)" fg:x="1174" fg:w="8"/><text x="98.4927%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.33%)</title><rect x="98.5774%" y="101" width="0.3347%" height="15" fill="rgb(242,110,6)" fg:x="1178" fg:w="4"/><text x="98.8274%" y="111.50"></text></g><g><title>__rustc::__rdl_alloc (2 samples, 0.17%)</title><rect x="99.1632%" y="165" width="0.1674%" height="15" fill="rgb(214,47,5)" fg:x="1185" fg:w="2"/><text x="99.4132%" y="175.50"></text></g><g><title>_malloc_zone_realloc (3 samples, 0.25%)</title><rect x="99.4142%" y="133" width="0.2510%" height="15" fill="rgb(218,159,25)" fg:x="1188" fg:w="3"/><text x="99.6642%" y="143.50"></text></g><g><title>szone_realloc (3 samples, 0.25%)</title><rect x="99.4142%" y="117" width="0.2510%" height="15" fill="rgb(215,211,28)" fg:x="1188" fg:w="3"/><text x="99.6642%" y="127.50"></text></g><g><title>szone_size (2 samples, 0.17%)</title><rect x="99.4979%" y="101" width="0.1674%" height="15" fill="rgb(238,59,32)" fg:x="1189" fg:w="2"/><text x="99.7479%" y="111.50"></text></g><g><title>tiny_size (2 samples, 0.17%)</title><rect x="99.4979%" y="85" width="0.1674%" height="15" fill="rgb(226,82,3)" fg:x="1189" fg:w="2"/><text x="99.7479%" y="95.50"></text></g><g><title>_realloc (5 samples, 0.42%)</title><rect x="99.3305%" y="149" width="0.4184%" height="15" fill="rgb(240,164,32)" fg:x="1187" fg:w="5"/><text x="99.5805%" y="159.50"></text></g><g><title>szone_size (1 samples, 0.08%)</title><rect x="99.6653%" y="133" width="0.0837%" height="15" fill="rgb(232,46,7)" fg:x="1191" fg:w="1"/><text x="99.9153%" y="143.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="99.7490%" y="133" width="0.0837%" height="15" fill="rgb(229,129,53)" fg:x="1192" fg:w="1"/><text x="99.9990%" y="143.50"></text></g><g><title>all (1,195 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(234,188,29)" fg:x="0" fg:w="1195"/><text x="0.2500%" y="367.50"></text></g><g><title>start (1,194 samples, 99.92%)</title><rect x="0.0837%" y="341" width="99.9163%" height="15" fill="rgb(246,141,4)" fg:x="1" fg:w="1194"/><text x="0.3337%" y="351.50">start</text></g><g><title>main (1,188 samples, 99.41%)</title><rect x="0.5858%" y="325" width="99.4142%" height="15" fill="rgb(229,23,39)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="335.50">main</text></g><g><title>std::rt::lang_start_internal (1,188 samples, 99.41%)</title><rect x="0.5858%" y="309" width="99.4142%" height="15" fill="rgb(206,12,3)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="319.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (1,188 samples, 99.41%)</title><rect x="0.5858%" y="293" width="99.4142%" height="15" fill="rgb(252,226,20)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="303.50">std::rt::lang_start::_{{closure}}</text></g><g><title>core::ops::function::FnOnce::call_once (1,188 samples, 99.41%)</title><rect x="0.5858%" y="277" width="99.4142%" height="15" fill="rgb(216,123,35)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="287.50">core::ops::function::FnOnce::call_once</text></g><g><title>profile_parser::main (1,188 samples, 99.41%)</title><rect x="0.5858%" y="261" width="99.4142%" height="15" fill="rgb(212,68,40)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="271.50">profile_parser::main</text></g><g><title>vexy_json_core::parser::parse (865 samples, 72.38%)</title><rect x="27.6151%" y="245" width="72.3849%" height="15" fill="rgb(254,125,32)" fg:x="330" fg:w="865"/><text x="27.8651%" y="255.50">vexy_json_core::parser::parse</text></g><g><title>vexy_json_core::parser::Parser::parse (865 samples, 72.38%)</title><rect x="27.6151%" y="229" width="72.3849%" height="15" fill="rgb(253,97,22)" fg:x="330" fg:w="865"/><text x="27.8651%" y="239.50">vexy_json_core::parser::Parser::parse</text></g><g><title>vexy_json_core::parser::Parser::parse_value (453 samples, 37.91%)</title><rect x="62.0921%" y="213" width="37.9079%" height="15" fill="rgb(241,101,14)" fg:x="742" fg:w="453"/><text x="62.3421%" y="223.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (13 samples, 1.09%)</title><rect x="98.9121%" y="197" width="1.0879%" height="15" fill="rgb(238,103,29)" fg:x="1182" fg:w="13"/><text x="99.1621%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (11 samples, 0.92%)</title><rect x="99.0795%" y="181" width="0.9205%" height="15" fill="rgb(233,195,47)" fg:x="1184" fg:w="11"/><text x="99.3295%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.67%)</title><rect x="99.3305%" y="165" width="0.6695%" height="15" fill="rgb(246,218,30)" fg:x="1187" fg:w="8"/><text x="99.5805%" y="175.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="99.7490%" y="149" width="0.2510%" height="15" fill="rgb(219,145,47)" fg:x="1192" fg:w="3"/><text x="99.9990%" y="159.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="99.8326%" y="133" width="0.1674%" height="15" fill="rgb(243,12,26)" fg:x="1193" fg:w="2"/><text x="100.0826%" y="143.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="99.9163%" y="117" width="0.0837%" height="15" fill="rgb(214,87,16)" fg:x="1194" fg:w="1"/><text x="100.1663%" y="127.50"></text></g></svg></svg>
llms.txt---
llms.txt-tests/jsonic_comprehensive_tests.rs-//! to ensure 100% feature parity and comprehensive coverage of edge cases.
llms.txt-tests/jsonic_comprehensive_tests.rs-
llms.txt-tests/jsonic_comprehensive_tests.rs-use rustc_hash::FxHashMap;
llms.txt:tests/jsonic_comprehensive_tests.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
llms.txt-tests/jsonic_comprehensive_tests.rs-
llms.txt-tests/jsonic_comprehensive_tests.rs-/// Helper to create expected values more easily
llms.txt-tests/jsonic_comprehensive_tests.rs-fn obj(pairs: &[(&str, Value)]) -> Value {
--
llms.txt-tests/jsonic_comprehensive_tests.rs-}
llms.txt-tests/jsonic_comprehensive_tests.rs-
llms.txt-tests/jsonic_comprehensive_tests.rs-fn n(num: i64) -> Value {
llms.txt:tests/jsonic_comprehensive_tests.rs:    Value::Number(vexy_json::Number::Integer(num))
llms.txt-tests/jsonic_comprehensive_tests.rs-}
llms.txt-tests/jsonic_comprehensive_tests.rs-
llms.txt-tests/jsonic_comprehensive_tests.rs-fn f(num: f64) -> Value {
llms.txt:tests/jsonic_comprehensive_tests.rs:    Value::Number(vexy_json::Number::Float(num))
llms.txt-tests/jsonic_comprehensive_tests.rs-}
llms.txt-tests/jsonic_comprehensive_tests.rs-
llms.txt-tests/jsonic_comprehensive_tests.rs-fn b(val: bool) -> Value {
--
llms.txt-tests/jsonic_comprehensive_tests.rs-        let large_result = parse("999999999999999999999").unwrap();
llms.txt-tests/jsonic_comprehensive_tests.rs-        assert!(matches!(
llms.txt-tests/jsonic_comprehensive_tests.rs-            large_result,
llms.txt:tests/jsonic_comprehensive_tests.rs:            Value::Number(vexy_json::Number::Float(_))
llms.txt-tests/jsonic_comprehensive_tests.rs-        ));
llms.txt-tests/jsonic_comprehensive_tests.rs-    }
llms.txt-tests/jsonic_comprehensive_tests.rs-}
--
llms.txt-docs/index.md-nav_order: 1
llms.txt-docs/index.md----
llms.txt-docs/index.md-
llms.txt:docs/index.md:# Welcome to vexy_json v2.0.0
llms.txt-docs/index.md-
llms.txt:docs/index.md:`vexy_json` is a forgiving JSON parser written in Rust, inspired by the JavaScript library `jsonic`. It provides robust, flexible parsing for both strict and non-standard JSON, supporting features like comments, unquoted keys, trailing commas, implicit arrays/objects, and more. vexy_json is available as a Rust library, CLI tool, and WebAssembly module for browser/Node.js usage.
llms.txt-docs/index.md-
llms.txt-docs/index.md-## 🚀 New in Version 2.0.0
llms.txt-docs/index.md-
--
llms.txt-docs/index.md-## Quick Start (Rust)
llms.txt-docs/index.md-
llms.txt-docs/index.md-```rust
llms.txt:docs/index.md:use vexy_json::parse;
llms.txt-docs/index.md-
llms.txt-docs/index.md-fn main() {
llms.txt-docs/index.md-    let data = r#"{ key: 1, /* comment */ arr: [1,2,3,], hex: 0x10 }"#;
--
llms.txt-docs/index.md-
llms.txt-docs/index.md-## Contributing
llms.txt-docs/index.md-
llms.txt:docs/index.md:See [Contributing](contributing.md) for how to help improve vexy_json.
llms.txt-docs/index.md-
llms.txt:docs/index.md:📦 **[Download the latest CLI release](https://github.com/twardoch/vexy_json/releases/latest)** - Get the `vexy_json` command-line interface for your platform.
llms.txt-docs/index.md-
llms.txt-docs/index.md-## Features
llms.txt-docs/index.md-
llms.txt-docs/index.md-- **Forgiving Parsing**: Handles comments, trailing commas, unquoted keys, and implicit top-level objects/arrays.
llms.txt-docs/index.md-- **Rust Idiomatic API**: Designed with Rust's ownership, borrowing, and error handling principles in mind.
llms.txt-docs/index.md-- **Performance**: Optimized for speed and efficiency.
llms.txt:docs/index.md:- **Serde Integration**: Seamlessly convert `vexy_json::Value` to and from other data formats using the `serde` framework.
llms.txt:docs/index.md:- **WebAssembly (WASM) Bindings**: Use `vexy_json` directly in JavaScript environments.
llms.txt-docs/index.md-- **Interactive Web Tool**: Browser-based parser with real-time feedback and sharing capabilities.
llms.txt-docs/index.md-- **Compatibility**: Aims for API compatibility with the original `jsonic.js` where appropriate.
llms.txt-docs/index.md-
llms.txt-docs/index.md-## Getting Started
llms.txt-docs/index.md-
llms.txt:docs/index.md:To use `vexy_json` in your Rust project, add it to your `Cargo.toml`:
llms.txt-docs/index.md-
llms.txt-docs/index.md-```toml
llms.txt-docs/index.md-[dependencies]
llms.txt:docs/index.md:vexy_json = "2.0.0" # Replace with the latest version
llms.txt-docs/index.md-```
llms.txt-docs/index.md-
llms.txt-docs/index.md-Then, you can parse JSON-like strings:
llms.txt-docs/index.md-
llms.txt-docs/index.md-```rust
llms.txt:docs/index.md:use vexy_json::parse;
llms.txt-docs/index.md-
llms.txt-docs/index.md-fn main() {
llms.txt-docs/index.md-    let json_str = r#"
--
llms.txt-docs/index.md-
llms.txt-docs/index.md-## Project Status
llms.txt-docs/index.md-
llms.txt:docs/index.md:`vexy_json` v2.0.0 is production-ready with comprehensive features including streaming parsing, parallel processing, and a plugin architecture. We welcome contributions to expand the ecosystem!
llms.txt-docs/index.md-
llms.txt-docs/index.md-## License
llms.txt-docs/index.md-
llms.txt:docs/index.md:`vexy_json` is distributed under the MIT License. See the [LICENSE](https://github.com/twardoch/vexy_json/blob/main/LICENSE) file for more details.
llms.txt---
llms.txt:docs/assets/css/_tool.scss:/* Custom styles for vexy_json web tool */
llms.txt-docs/assets/css/_tool.scss-
llms.txt-docs/assets/css/_tool.scss-/* Editor enhancements */
llms.txt-docs/assets/css/_tool.scss-.textarea-editor {
--
llms.txt-docs/assets/css/style.scss----
llms.txt-docs/assets/css/style.scss-
llms.txt-docs/assets/css/style.scss-// @import "just-the-docs";
llms.txt:docs/assets/css/style.scss:// Custom styles for vexy_json documentation site
llms.txt-docs/assets/css/style.scss-// This file extends the just-the-docs theme with custom styling
llms.txt-docs/assets/css/style.scss-
llms.txt-docs/assets/css/style.scss-// Import our tool-specific styles
--
llms.txt-docs/assets/css/style.scss-
llms.txt-docs/assets/css/style.scss-// Custom color scheme refinements
llms.txt-docs/assets/css/style.scss-:root {
llms.txt:docs/assets/css/style.scss:  --vexy_json-primary: #0969da;
llms.txt:docs/assets/css/style.scss:  --vexy_json-secondary: #656d76;
llms.txt:docs/assets/css/style.scss:  --vexy_json-accent: #0550ae;
llms.txt:docs/assets/css/style.scss:  --vexy_json-success: #1a7f37;
llms.txt:docs/assets/css/style.scss:  --vexy_json-warning: #bf8700;
llms.txt:docs/assets/css/style.scss:  --vexy_json-danger: #cf222e;
llms.txt-docs/assets/css/style.scss-}
llms.txt-docs/assets/css/style.scss-
llms.txt-docs/assets/css/style.scss-// Enhanced code blocks for JSON examples
--
llms.txt-docs/assets/css/style.scss-      .nav-list-link {
llms.txt-docs/assets/css/style.scss-        &.active {
llms.txt-docs/assets/css/style.scss-          font-weight: 600;
llms.txt:docs/assets/css/style.scss:          color: var(--vexy_json-primary);
llms.txt-docs/assets/css/style.scss-        }
llms.txt-docs/assets/css/style.scss-      }
llms.txt-docs/assets/css/style.scss-    }
--
llms.txt-docs/assets/css/style.scss-  
llms.txt-docs/assets/css/style.scss-  .footer-content {
llms.txt-docs/assets/css/style.scss-    font-size: 14px;
llms.txt:docs/assets/css/style.scss:    color: var(--vexy_json-secondary);
llms.txt-docs/assets/css/style.scss-    
llms.txt-docs/assets/css/style.scss-    a {
llms.txt:docs/assets/css/style.scss:      color: var(--vexy_json-primary);
llms.txt-docs/assets/css/style.scss-      text-decoration: none;
llms.txt-docs/assets/css/style.scss-      
llms.txt-docs/assets/css/style.scss-      &:hover {
--
llms.txt-docs/assets/css/style.scss-}
llms.txt-docs/assets/css/style.scss-
llms.txt-docs/assets/css/style.scss-// Custom button styles
llms.txt:docs/assets/css/style.scss:.btn-vexy_json {
llms.txt:docs/assets/css/style.scss:  background-color: var(--vexy_json-primary);
llms.txt:docs/assets/css/style.scss:  border: 1px solid var(--vexy_json-primary);
llms.txt-docs/assets/css/style.scss-  color: white;
llms.txt-docs/assets/css/style.scss-  
llms.txt-docs/assets/css/style.scss-  &:hover {
llms.txt:docs/assets/css/style.scss:    background-color: var(--vexy_json-accent);
llms.txt:docs/assets/css/style.scss:    border-color: var(--vexy_json-accent);
llms.txt-docs/assets/css/style.scss-  }
llms.txt-docs/assets/css/style.scss-  
llms.txt-docs/assets/css/style.scss-  &:focus {
--
llms.txt-docs/assets/css/style.scss-    th {
llms.txt-docs/assets/css/style.scss-      background-color: var(--code-background-color);
llms.txt-docs/assets/css/style.scss-      font-weight: 600;
llms.txt:docs/assets/css/style.scss:      color: var(--vexy_json-primary);
llms.txt-docs/assets/css/style.scss-    }
llms.txt-docs/assets/css/style.scss-    
llms.txt-docs/assets/css/style.scss-    td {
--
llms.txt-docs/assets/css/style.scss-  
llms.txt-docs/assets/css/style.scss-  &.callout-info {
llms.txt-docs/assets/css/style.scss-    background-color: rgba(9, 105, 218, 0.1);
llms.txt:docs/assets/css/style.scss:    border-left-color: var(--vexy_json-primary);
llms.txt-docs/assets/css/style.scss-    
llms.txt-docs/assets/css/style.scss-    .callout-title {
llms.txt:docs/assets/css/style.scss:      color: var(--vexy_json-primary);
llms.txt-docs/assets/css/style.scss-      font-weight: 600;
llms.txt-docs/assets/css/style.scss-    }
llms.txt-docs/assets/css/style.scss-  }
llms.txt-docs/assets/css/style.scss-  
llms.txt-docs/assets/css/style.scss-  &.callout-warning {
llms.txt-docs/assets/css/style.scss-    background-color: rgba(191, 135, 0, 0.1);
llms.txt:docs/assets/css/style.scss:    border-left-color: var(--vexy_json-warning);
llms.txt-docs/assets/css/style.scss-    
llms.txt-docs/assets/css/style.scss-    .callout-title {
llms.txt:docs/assets/css/style.scss:      color: var(--vexy_json-warning);
llms.txt-docs/assets/css/style.scss-      font-weight: 600;
llms.txt-docs/assets/css/style.scss-    }
llms.txt-docs/assets/css/style.scss-  }
llms.txt-docs/assets/css/style.scss-  
llms.txt-docs/assets/css/style.scss-  &.callout-success {
llms.txt-docs/assets/css/style.scss-    background-color: rgba(26, 127, 55, 0.1);
llms.txt:docs/assets/css/style.scss:    border-left-color: var(--vexy_json-success);
llms.txt-docs/assets/css/style.scss-    
llms.txt-docs/assets/css/style.scss-    .callout-title {
llms.txt:docs/assets/css/style.scss:      color: var(--vexy_json-success);
llms.txt-docs/assets/css/style.scss-      font-weight: 600;
llms.txt-docs/assets/css/style.scss-    }
llms.txt-docs/assets/css/style.scss-  }
--
llms.txt-docs/assets/css/style.scss-    .stat-value {
llms.txt-docs/assets/css/style.scss-      font-size: 2em;
llms.txt-docs/assets/css/style.scss-      font-weight: 700;
llms.txt:docs/assets/css/style.scss:      color: var(--vexy_json-primary);
llms.txt-docs/assets/css/style.scss-      display: block;
llms.txt-docs/assets/css/style.scss-    }
llms.txt-docs/assets/css/style.scss-    
llms.txt-docs/assets/css/style.scss-    .stat-label {
llms.txt-docs/assets/css/style.scss-      font-size: 0.9em;
llms.txt:docs/assets/css/style.scss:      color: var(--vexy_json-secondary);
llms.txt-docs/assets/css/style.scss-      margin-top: 4px;
llms.txt-docs/assets/css/style.scss-    }
llms.txt-docs/assets/css/style.scss-  }
--
llms.txt-docs/assets/css/style.scss-// Dark mode adjustments
llms.txt-docs/assets/css/style.scss-@media (prefers-color-scheme: dark) {
llms.txt-docs/assets/css/style.scss-  :root {
llms.txt:docs/assets/css/style.scss:    --vexy_json-primary: #58a6ff;
llms.txt:docs/assets/css/style.scss:    --vexy_json-secondary: #8b949e;
llms.txt:docs/assets/css/style.scss:    --vexy_json-accent: #79c0ff;
llms.txt:docs/assets/css/style.scss:    --vexy_json-success: #3fb950;
llms.txt:docs/assets/css/style.scss:    --vexy_json-warning: #d29922;
llms.txt:docs/assets/css/style.scss:    --vexy_json-danger: #f85149;
llms.txt-docs/assets/css/style.scss-  }
llms.txt-docs/assets/css/style.scss-}
llms.txt-docs/assets/css/style.scss-
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\",\"number\":42}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.20s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Comments - Single Line",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\"}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Blocking waiting for file lock on package cache\n    Blocking waiting for file lock on package cache\n    Blocking waiting for file lock on package cache\n    Blocking waiting for file lock on package cache\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.72s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Comments - Multi Line",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\"}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.22s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Comments - Hash Style",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\"}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.27s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Unquoted Keys",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\",\"another\":123}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.23s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Single Quotes",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\",\"mixed\":\"quotes\"}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.22s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Trailing Commas - Object",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\",\"another\":123}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.24s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Trailing Commas - Array",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "[\"a\",\"b\",\"c\"]",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.21s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Implicit Array",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "[\"apple\",\"banana\",\"cherry\"]",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.24s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Implicit Object",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "{\"number\":42,\"key\":\"value\"}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.21s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Complex Mixed Features",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "description": "Complex JSON with multiple forgiving features",
llms.txt:docs/internal/test-results/feature-verification-report.json:      "input": "{\n  // Configuration with comments\n  name: 'vexy_json',           // Unquoted key, single quotes\n  version: \"1.1.0\",        /* Version string */\n  features: [\n    \"comments\",\n    'unquoted-keys',       // Mixed quotes\n    \"trailing-commas\",     // Trailing comma next\n  ],                       // Trailing comma in array\n  debug: true,             # Hash comment\n}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "output": "{\"version\":\"1.1.0\",\"debug\":true,\"name\":\"vexy_json\",\"features\":[\"comments\",\"unquoted-keys\",\"trailing-commas\"]}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.19s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    }
llms.txt-docs/internal/test-results/feature-verification-report.json-  ]
llms.txt-docs/internal/test-results/feature-verification-report.json-}
--
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-# Usage Guide v2.0.0
llms.txt-docs/usage.md-
llms.txt:docs/usage.md:This guide provides in-depth examples for using `vexy_json` v2.0.0 in Rust and JavaScript/WebAssembly, including the new streaming API, parallel processing, and plugin system.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-## Basic Parsing (Rust)
llms.txt-docs/usage.md-
llms.txt:docs/usage.md:The simplest way to use vexy_json is with the `parse` function:
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::parse;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    let json_data = r#"{ key: "value", num: 123, // comment\n trailing: [1,2,3,], hex: 0xFF }"#;
--
llms.txt-docs/usage.md-For more control, use `parse_with_options` and configure `ParserOptions`:
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    let input = "a:1, b:2";
--
llms.txt-docs/usage.md-See [docs/wasm.md](wasm.md) for full API details.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```js
llms.txt:docs/usage.md:import init, { parse_json_with_options } from './pkg/vexy_json_wasm.js';
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-await init();
llms.txt-docs/usage.md-const result = parse_json_with_options('{a:1}', { allow_comments: true });
--
llms.txt-docs/usage.md-For more control over the parsing behavior, you can use `parse_with_options` and configure `ParserOptions`.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    // Example: Strict JSON parsing (disabling all forgiving features)
--
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-## Handling Forgiving Features
llms.txt-docs/usage.md-
llms.txt:docs/usage.md:`vexy_json` excels at parsing JSON with common relaxations. Here are examples of how it handles them:
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-### Comments
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-Both single-line (`//`, `#`) and multi-line (`/* ... */`) comments are ignored.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::parse;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    let json_with_comments = r#"
--
llms.txt-docs/usage.md-Trailing commas in arrays and objects are gracefully handled.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::parse;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    let json_with_trailing_comma = r#"
--
llms.txt-docs/usage.md-Object keys do not need to be quoted, as long as they are valid identifiers.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::parse;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    let json_unquoted_keys = r#"{ firstName: "John", lastName: "Doe" }"#;
--
llms.txt-docs/usage.md-You don't need to wrap your entire input in `{}` or `[]` if it's clearly an object or an array.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::parse;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    // Implicit object
--
llms.txt-docs/usage.md-When the `newline_as_comma` option is enabled, newlines can act as implicit comma separators.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    let mut options = ParserOptions::default();
--
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-## Error Handling
llms.txt-docs/usage.md-
llms.txt:docs/usage.md:`vexy_json` returns a `Result<Value, Error>` which allows for robust error handling. You should always check the `Result` to handle potential parsing issues.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::parse;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    let invalid_json = r#"{ key: "value }"#; // Missing closing quote
--
llms.txt-docs/usage.md-### Basic Streaming Example
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::{StreamingParser, StreamingEvent};
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn process_large_file(json_content: &str) -> Result<(), Box<dyn std::error::Error>> {
llms.txt-docs/usage.md-    let mut parser = StreamingParser::new();
--
llms.txt-docs/usage.md-Perfect for network streams or reading files in chunks:
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::StreamingParser;
llms.txt-docs/usage.md-use std::io::{BufReader, BufRead};
llms.txt-docs/usage.md-use std::fs::File;
llms.txt-docs/usage.md-
--
llms.txt-docs/usage.md-### Basic Parallel Parsing
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::{parse_parallel, ParallelOptions};
llms.txt-docs/usage.md-use std::fs;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn process_json_files(directory: &str) -> Result<(), Box<dyn std::error::Error>> {
--
llms.txt-docs/usage.md-### Custom Parallel Options
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::{parse_parallel_with_options, ParallelOptions, ParserOptions};
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-let mut parallel_opts = ParallelOptions::default();
llms.txt-docs/usage.md-parallel_opts.num_threads = Some(8);  // Use 8 threads
--
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-## Plugin System (New in v2.0.0)
llms.txt-docs/usage.md-
llms.txt:docs/usage.md:Extend vexy_json with custom functionality through plugins.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-### Creating a Custom Plugin
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::{Plugin, Value, Error};
llms.txt-docs/usage.md-use std::collections::HashMap;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-// Plugin to redact sensitive information
--
llms.txt-docs/usage.md-Process streams of JSON objects separated by newlines.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::NdJsonParser;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn process_log_file(log_content: &str) -> Result<(), Box<dyn std::error::Error>> {
llms.txt-docs/usage.md-    let mut parser = NdJsonParser::new();
--
llms.txt-docs/usage.md-### Watch Mode
llms.txt-docs/usage.md-```bash
llms.txt-docs/usage.md-# Watch a file for changes and reformat on save
llms.txt:docs/usage.md:vexy_json --watch config.json --output formatted-config.json
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-# Watch a directory
llms.txt:docs/usage.md:vexy_json --watch ./configs/ --output-dir ./formatted/
llms.txt-docs/usage.md-```
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-### Batch Processing
llms.txt-docs/usage.md-```bash
llms.txt-docs/usage.md-# Process multiple files in parallel
llms.txt:docs/usage.md:vexy_json --parallel *.json --output-dir ./processed/
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-# Apply transformations during batch processing
llms.txt:docs/usage.md:vexy_json --batch ./data/ --pretty --sort-keys --output-dir ./formatted/
llms.txt-docs/usage.md-```
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-### Plugin Usage
llms.txt-docs/usage.md-```bash
llms.txt-docs/usage.md-# Use built-in plugins
llms.txt:docs/usage.md:vexy_json input.json --plugin redact-passwords --plugin validate-schema
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-# Load custom plugin
llms.txt:docs/usage.md:vexy_json input.json --plugin-path ./my-plugin.wasm
llms.txt-docs/usage.md-```
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-For more details on the web tool, including its features and how to use it, refer to the [Web Tool documentation](web-tool.md).
llms.txt---
llms.txt-tests/lexer_tests.rs-// this_file: tests/lexer_tests.rs
llms.txt-tests/lexer_tests.rs-
llms.txt:tests/lexer_tests.rs:use vexy_json::{parse, Value};
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-/// Lexer-specific tests ported from ref/jsonic/test/lex.test.js
llms.txt-tests/lexer_tests.rs-///
llms.txt:tests/lexer_tests.rs:/// These tests focus on the tokenization and lexing behavior of vexy_json,
llms.txt-tests/lexer_tests.rs-/// exploring how the parser handles various input patterns at the lexer level.
llms.txt:tests/lexer_tests.rs:/// Uses adaptive testing to discover vexy_json's actual capabilities.
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-#[test]
llms.txt-tests/lexer_tests.rs-fn test_basic_specials() {
--
llms.txt-tests/lexer_tests.rs-    // Test empty input - should parse successfully or fail gracefully
llms.txt-tests/lexer_tests.rs-    let result = parse("");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("✓ vexy_json handles empty input successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json reports error for empty input"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Test whitespace handling
llms.txt-tests/lexer_tests.rs-    let result = parse("   ");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("✓ vexy_json handles whitespace-only input"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json reports error for whitespace-only input"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Test single number
--
llms.txt-tests/lexer_tests.rs-                "Expected number 123, got: {:?}",
llms.txt-tests/lexer_tests.rs-                val
llms.txt-tests/lexer_tests.rs-            );
llms.txt:tests/lexer_tests.rs:            println!("✓ vexy_json parses single number: 123");
llms.txt-tests/lexer_tests.rs-        }
llms.txt-tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse single number: {}", e),
llms.txt-tests/lexer_tests.rs-    }
--
llms.txt-tests/lexer_tests.rs-    match parse("123%") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt-tests/lexer_tests.rs-            // Could be parsed as text or cause an error
llms.txt:tests/lexer_tests.rs:            println!("ℹ vexy_json parsed '123%' as: {:?}", val);
llms.txt-tests/lexer_tests.rs-        }
llms.txt-tests/lexer_tests.rs-        Err(_) => {
llms.txt:tests/lexer_tests.rs:            println!("ℹ vexy_json treats '123%' as invalid input");
llms.txt-tests/lexer_tests.rs-        }
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
--
llms.txt-tests/lexer_tests.rs-    // Single space
llms.txt-tests/lexer_tests.rs-    let result = parse(" ");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("✓ vexy_json handles single space"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json reports error for single space"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Tab character
llms.txt-tests/lexer_tests.rs-    let result = parse("\t");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("✓ vexy_json handles tab character"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json reports error for tab character"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Mixed spaces and tabs
llms.txt-tests/lexer_tests.rs-    let result = parse(" \t ");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("✓ vexy_json handles mixed whitespace"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json reports error for mixed whitespace"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
--
llms.txt-tests/lexer_tests.rs-    // Single opening brace
llms.txt-tests/lexer_tests.rs-    let result = parse("{");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single '{{' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for unmatched opening brace"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Double opening braces
llms.txt-tests/lexer_tests.rs-    let result = parse("{{");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed '{{' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for double opening braces"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Single closing brace
llms.txt-tests/lexer_tests.rs-    let result = parse("}");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single '}}' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for unmatched closing brace"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Proper brace pair
--
llms.txt-tests/lexer_tests.rs-            match &val {
llms.txt-tests/lexer_tests.rs-                Value::Object(obj) => {
llms.txt-tests/lexer_tests.rs-                    assert!(obj.is_empty(), "Expected empty object, got: {:?}", obj);
llms.txt:tests/lexer_tests.rs:                    println!("✓ vexy_json parses empty object correctly");
llms.txt-tests/lexer_tests.rs-                }
llms.txt-tests/lexer_tests.rs-                _ => panic!("Expected object, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-            }
--
llms.txt-tests/lexer_tests.rs-    // Single opening bracket
llms.txt-tests/lexer_tests.rs-    let result = parse("[");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single '[' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for unmatched opening bracket"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Single closing bracket
llms.txt-tests/lexer_tests.rs-    let result = parse("]");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single ']' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for unmatched closing bracket"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Proper bracket pair
--
llms.txt-tests/lexer_tests.rs-            match &val {
llms.txt-tests/lexer_tests.rs-                Value::Array(arr) => {
llms.txt-tests/lexer_tests.rs-                    assert!(arr.is_empty(), "Expected empty array, got: {:?}", arr);
llms.txt:tests/lexer_tests.rs:                    println!("✓ vexy_json parses empty array correctly");
llms.txt-tests/lexer_tests.rs-                }
llms.txt-tests/lexer_tests.rs-                _ => panic!("Expected array, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-            }
--
llms.txt-tests/lexer_tests.rs-    // Single colon
llms.txt-tests/lexer_tests.rs-    let result = parse(":");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single ':' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for lone colon"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Double colon
llms.txt-tests/lexer_tests.rs-    let result = parse("::");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed '::' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for double colon"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Single comma
llms.txt-tests/lexer_tests.rs-    let result = parse(",");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single ',' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for lone comma"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Double comma
llms.txt-tests/lexer_tests.rs-    let result = parse(",,");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed ',,' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for double comma"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
--
llms.txt-tests/lexer_tests.rs-            match &val {
llms.txt-tests/lexer_tests.rs-                Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                    assert_eq!(s, "a", "Expected 'a', got: {}", s);
llms.txt:tests/lexer_tests.rs:                    println!("✓ vexy_json supports # comments in lexer");
llms.txt-tests/lexer_tests.rs-                }
llms.txt:tests/lexer_tests.rs:                _ => println!("ℹ vexy_json parsed 'a#b' as: {:?}", val),
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json doesn't support # comments or treats as error"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Block comment
llms.txt-tests/lexer_tests.rs-    match parse("a/*x*/b") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt:tests/lexer_tests.rs:            println!("ℹ vexy_json parsed 'a/*x*/b' as: {:?}", val);
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json doesn't support /* */ comments or treats as error"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Comment with newline
llms.txt-tests/lexer_tests.rs-    match parse("a#b\nc") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt:tests/lexer_tests.rs:            println!("ℹ vexy_json parsed 'a#b\\nc' as: {:?}", val);
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json has issues with comments and newlines"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
--
llms.txt-tests/lexer_tests.rs-    // True value
llms.txt-tests/lexer_tests.rs-    match parse("true") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt:tests/lexer_tests.rs:            Value::Bool(true) => println!("✓ vexy_json lexer handles 'true' correctly"),
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected true boolean, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
llms.txt-tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse 'true': {}", e),
--
llms.txt-tests/lexer_tests.rs-    // False value
llms.txt-tests/lexer_tests.rs-    match parse("false") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt:tests/lexer_tests.rs:            Value::Bool(false) => println!("✓ vexy_json lexer handles 'false' correctly"),
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected false boolean, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
llms.txt-tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse 'false': {}", e),
--
llms.txt-tests/lexer_tests.rs-    // Null value
llms.txt-tests/lexer_tests.rs-    match parse("null") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt:tests/lexer_tests.rs:            Value::Null => println!("✓ vexy_json lexer handles 'null' correctly"),
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected null, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
llms.txt-tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse 'null': {}", e),
--
llms.txt-tests/lexer_tests.rs-            match &val {
llms.txt-tests/lexer_tests.rs-                Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                    assert_eq!(s, "truex", "Expected text 'truex', got: {}", s);
llms.txt:tests/lexer_tests.rs:                    println!("✓ vexy_json lexer treats 'truex' as text, not boolean");
llms.txt-tests/lexer_tests.rs-                }
llms.txt:tests/lexer_tests.rs:                _ => println!("ℹ vexy_json lexer parsed 'truex' as: {:?}", val),
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects 'truex'"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
--
llms.txt-tests/lexer_tests.rs-    match parse("321") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt-tests/lexer_tests.rs-            assert!(val.as_f64() == Some(321.0), "Expected 321, got: {:?}", val);
llms.txt:tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles integers correctly");
llms.txt-tests/lexer_tests.rs-        }
llms.txt-tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse integer: {}", e),
llms.txt-tests/lexer_tests.rs-    }
--
llms.txt-tests/lexer_tests.rs-    match parse("0") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt-tests/lexer_tests.rs-            assert!(val.as_f64() == Some(0.0), "Expected 0, got: {:?}", val);
llms.txt:tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles zero correctly");
llms.txt-tests/lexer_tests.rs-        }
llms.txt-tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse zero: {}", e),
llms.txt-tests/lexer_tests.rs-    }
--
llms.txt-tests/lexer_tests.rs-    match parse("1.2") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt-tests/lexer_tests.rs-            assert!(val.as_f64() == Some(1.2), "Expected 1.2, got: {:?}", val);
llms.txt:tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles decimal numbers correctly");
llms.txt-tests/lexer_tests.rs-        }
llms.txt-tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse decimal: {}", e),
llms.txt-tests/lexer_tests.rs-    }
--
llms.txt-tests/lexer_tests.rs-    match parse("-1.2") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt-tests/lexer_tests.rs-            assert!(val.as_f64() == Some(-1.2), "Expected -1.2, got: {:?}", val);
llms.txt:tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles negative numbers correctly");
llms.txt-tests/lexer_tests.rs-        }
llms.txt-tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse negative number: {}", e),
llms.txt-tests/lexer_tests.rs-    }
--
llms.txt-tests/lexer_tests.rs-    match parse("1e2") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt-tests/lexer_tests.rs-            assert!(val.as_f64() == Some(100.0), "Expected 100, got: {:?}", val);
llms.txt:tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles scientific notation");
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer doesn't support scientific notation"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Hexadecimal
llms.txt-tests/lexer_tests.rs-    match parse("0xA") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt-tests/lexer_tests.rs-            assert!(val.as_f64() == Some(10.0), "Expected 10, got: {:?}", val);
llms.txt:tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles hexadecimal numbers");
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer doesn't support hexadecimal"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Number with invalid trailing characters
--
llms.txt-tests/lexer_tests.rs-            match &val {
llms.txt-tests/lexer_tests.rs-                Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                    assert_eq!(s, "1x", "Expected text '1x', got: {}", s);
llms.txt:tests/lexer_tests.rs:                    println!("✓ vexy_json lexer treats '1x' as text");
llms.txt-tests/lexer_tests.rs-                }
llms.txt:tests/lexer_tests.rs:                _ => println!("ℹ vexy_json lexer parsed '1x' as: {:?}", val),
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects '1x'"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert!(s.is_empty(), "Expected empty string, got: '{}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles empty double-quoted strings");
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert_eq!(s, "abc", "Expected 'abc', got: '{}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles double-quoted strings with content");
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert_eq!(s, "abc", "Expected 'abc', got: '{}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles single-quoted strings");
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer doesn't support single-quoted strings"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Unterminated string
llms.txt-tests/lexer_tests.rs-    let result = parse("\"abc");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json lexer unexpectedly parsed unterminated string"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json lexer properly reports error for unterminated string"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // String with escape sequences
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert_eq!(s, "\t", "Expected tab character, got: '{:?}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles escape sequences");
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert_eq!(s, "@", "Expected '@', got: '{}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles unicode escapes");
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer doesn't support unicode escapes"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert_eq!(s, "a-b", "Expected 'a-b', got: '{}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles text with hyphens");
llms.txt-tests/lexer_tests.rs-            }
llms.txt:tests/lexer_tests.rs:            _ => println!("ℹ vexy_json lexer parsed 'a-b' as: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects 'a-b'"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Text with special characters
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert_eq!(s, "$a_", "Expected '$a_', got: '{}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles text with $ and _");
llms.txt-tests/lexer_tests.rs-            }
llms.txt:tests/lexer_tests.rs:            _ => println!("ℹ vexy_json lexer parsed '$a_' as: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects '$a_'"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Text with punctuation
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert_eq!(s, "!%~", "Expected '!%~', got: '{}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles punctuation text");
llms.txt-tests/lexer_tests.rs-            }
llms.txt:tests/lexer_tests.rs:            _ => println!("ℹ vexy_json lexer parsed '!%~' as: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects '!%~'"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
--
llms.txt-tests/lexer_tests.rs-                    obj.get("b").and_then(|v| v.as_f64()) == Some(2.0),
llms.txt-tests/lexer_tests.rs-                    "Expected b=2"
llms.txt-tests/lexer_tests.rs-                );
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles newlines in objects correctly");
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected object, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
--
llms.txt-tests/lexer_tests.rs-    // Test if newlines can act as separators
llms.txt-tests/lexer_tests.rs-    match parse("a\nb") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt:tests/lexer_tests.rs:            println!("ℹ vexy_json lexer parsed 'a\\nb' as: {:?}", val);
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects 'a\\nb'"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert_eq!(s, "[{}]:,", "Expected '[{{}}]:,', got: '{}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles special chars in strings");
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
--
llms.txt-tests/lexer_tests.rs-    match parse("1%") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt-tests/lexer_tests.rs-            // Could be treated as text or cause error
llms.txt:tests/lexer_tests.rs:            println!("ℹ vexy_json lexer parsed '1%' as: {:?}", val);
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects '1%'"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Object key followed by colon
llms.txt-tests/lexer_tests.rs-    match parse("a:") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt:tests/lexer_tests.rs:            println!("ℹ vexy_json lexer parsed 'a:' as: {:?}", val);
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects incomplete key-value pair"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
llms.txt:tests/lexer_tests.rs:/// Comprehensive lexer test that explores vexy_json's tokenization capabilities
llms.txt-tests/lexer_tests.rs-///
llms.txt:tests/lexer_tests.rs:/// This test serves as a diagnostic tool to understand how vexy_json's lexer
llms.txt-tests/lexer_tests.rs-/// handles various input patterns, providing insight into the tokenization
llms.txt-tests/lexer_tests.rs-/// process that underlies the parsing functionality.
llms.txt-tests/lexer_tests.rs-#[test]
llms.txt---
llms.txt:docs/assets/css/tool.css:/* Custom styles for vexy_json web tool */
llms.txt-docs/assets/css/tool.css-
llms.txt-docs/assets/css/tool.css-/* Editor enhancements */
llms.txt-docs/assets/css/tool.css-.textarea-editor {
llms.txt---
llms.txt-tests/supported_jsonic.rs-use rustc_hash::FxHashMap;
llms.txt:tests/supported_jsonic.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
llms.txt-tests/supported_jsonic.rs-
llms.txt-tests/supported_jsonic.rs-/// Helper to create expected values more easily
llms.txt-tests/supported_jsonic.rs-fn obj(pairs: &[(&str, Value)]) -> Value {
--
llms.txt-tests/supported_jsonic.rs-}
llms.txt-tests/supported_jsonic.rs-
llms.txt-tests/supported_jsonic.rs-fn n(num: i64) -> Value {
llms.txt:tests/supported_jsonic.rs:    Value::Number(vexy_json::Number::Integer(num))
llms.txt-tests/supported_jsonic.rs-}
llms.txt-tests/supported_jsonic.rs-
llms.txt-tests/supported_jsonic.rs-fn f(num: f64) -> Value {
llms.txt:tests/supported_jsonic.rs:    Value::Number(vexy_json::Number::Float(num))
llms.txt-tests/supported_jsonic.rs-}
llms.txt-tests/supported_jsonic.rs-
llms.txt-tests/supported_jsonic.rs-#[test]
--
llms.txt-scripts/build-wasm.sh-#!/bin/bash
llms.txt-scripts/build-wasm.sh-# this_file: build-wasm.sh
llms.txt-scripts/build-wasm.sh-
llms.txt:scripts/build-wasm.sh:# WebAssembly Build Script for vexy_json
llms.txt-scripts/build-wasm.sh-# Automated build script using wasm-pack with configurable dev/release modes
llms.txt-scripts/build-wasm.sh-# Outputs to docs/pkg/ directory for web integration
llms.txt-scripts/build-wasm.sh-
--
llms.txt-scripts/build-wasm.sh-BLUE='\033[0;34m'
llms.txt-scripts/build-wasm.sh-NC='\033[0m' # No Color
llms.txt-scripts/build-wasm.sh-
llms.txt:scripts/build-wasm.sh:echo -e "${BLUE}🔧 vexy_json WebAssembly Build Script${NC}"
llms.txt-scripts/build-wasm.sh-echo "=================================================="
llms.txt-scripts/build-wasm.sh-echo -e "Build mode: ${YELLOW}$BUILD_MODE${NC}"
llms.txt-scripts/build-wasm.sh-echo -e "Output directory: ${YELLOW}$OUTPUT_DIR${NC}"
--
llms.txt-scripts/build-wasm.sh-fi
llms.txt-scripts/build-wasm.sh-
llms.txt-scripts/build-wasm.sh-# Additional optimization with wasm-opt if available
llms.txt:scripts/build-wasm.sh:if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" ] && command -v wasm-opt &>/dev/null; then
llms.txt-scripts/build-wasm.sh-    echo -e "${BLUE}🔧 Optimizing WASM bundle with wasm-opt...${NC}"
llms.txt:scripts/build-wasm.sh:    ORIGINAL_SIZE=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt:scripts/build-wasm.sh:    wasm-opt -Oz "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" -o "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt"
llms.txt:scripts/build-wasm.sh:    if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt" ]; then
llms.txt:scripts/build-wasm.sh:        mv "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt" "$OUTPUT_DIR/vexy_json_wasm_bg.wasm"
llms.txt:scripts/build-wasm.sh:        OPTIMIZED_SIZE=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt-scripts/build-wasm.sh-        REDUCTION=$((ORIGINAL_SIZE - OPTIMIZED_SIZE))
llms.txt-scripts/build-wasm.sh-        echo -e "${GREEN}✅ Additional optimization saved ${YELLOW}$REDUCTION bytes${NC}"
llms.txt-scripts/build-wasm.sh-    fi
llms.txt-scripts/build-wasm.sh-fi
llms.txt-scripts/build-wasm.sh-
llms.txt-scripts/build-wasm.sh-# Report bundle size
llms.txt:scripts/build-wasm.sh:if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" ]; then
llms.txt:scripts/build-wasm.sh:    WASM_SIZE=$(du -h "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" | cut -f1)
llms.txt-scripts/build-wasm.sh-    echo -e "${GREEN}📦 Final WASM bundle size: ${YELLOW}$WASM_SIZE${NC}"
llms.txt-scripts/build-wasm.sh-
llms.txt-scripts/build-wasm.sh-    # Size warnings
llms.txt:scripts/build-wasm.sh:    WASM_SIZE_BYTES=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt-scripts/build-wasm.sh-    if [ "$WASM_SIZE_BYTES" -gt 1048576 ]; then # 1MB
llms.txt-scripts/build-wasm.sh-        echo -e "${YELLOW}⚠️  Warning: WASM bundle is larger than 1MB${NC}"
llms.txt-scripts/build-wasm.sh-        echo "   Consider optimizing for web deployment"
--
llms.txt-scripts/build-wasm.sh-echo
llms.txt-scripts/build-wasm.sh-echo -e "${BLUE}Example usage in HTML:${NC}"
llms.txt-scripts/build-wasm.sh-echo "  <script type=\"module\">"
llms.txt:scripts/build-wasm.sh:echo "    import init, { parse_json } from './pkg/vexy_json.js';"
llms.txt-scripts/build-wasm.sh-echo "    await init();"
llms.txt-scripts/build-wasm.sh-echo "    const result = parse_json('{\"test\": true}');"
llms.txt-scripts/build-wasm.sh-echo "  </script>"
llms.txt---
llms.txt:debug_test.rs:use vexy_json::parse;
llms.txt-debug_test.rs-
llms.txt-debug_test.rs-fn main() {
llms.txt-debug_test.rs-    let result = parse("a /* comment */ b");
--
llms.txt-docs/assets/images/flamegraph.svg-function format_percent(n) {
llms.txt-docs/assets/images/flamegraph.svg-    return n.toFixed(4) + "%";
llms.txt-docs/assets/images/flamegraph.svg-}
llms.txt:docs/assets/images/flamegraph.svg:]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="756"><g><title>0x7ff8169164d4 (1 samples, 0.13%)</title><rect x="0.0000%" y="405" width="0.1323%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>0x7ff816933433 (1 samples, 0.13%)</title><rect x="0.0000%" y="389" width="0.1323%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>0x7ff816933eb9 (1 samples, 0.13%)</title><rect x="0.0000%" y="373" width="0.1323%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>0x7ff81693195c (1 samples, 0.13%)</title><rect x="0.0000%" y="357" width="0.1323%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>0x7ff816931a12 (1 samples, 0.13%)</title><rect x="0.0000%" y="341" width="0.1323%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>dyld3::kdebug_trace_dyld_image(unsigned int, char const*, unsigned char const (*) [16], fsobj_id, fsid, void const*, unsigned int) (1 samples, 0.13%)</title><rect x="0.1323%" y="373" width="0.1323%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.3823%" y="383.50"></text></g><g><title>__kdebug_trace64 (1 samples, 0.13%)</title><rect x="0.1323%" y="357" width="0.1323%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.3823%" y="367.50"></text></g><g><title>__malloc_init (1 samples, 0.13%)</title><rect x="0.2646%" y="213" width="0.1323%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.5146%" y="223.50"></text></g><g><title>create_scalable_szone (1 samples, 0.13%)</title><rect x="0.2646%" y="197" width="0.1323%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.5146%" y="207.50"></text></g><g><title>rack_init (1 samples, 0.13%)</title><rect x="0.2646%" y="181" width="0.1323%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.5146%" y="191.50"></text></g><g><title>mvm_allocate_pages_plat (1 samples, 0.13%)</title><rect x="0.2646%" y="165" width="0.1323%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.5146%" y="175.50"></text></g><g><title>__mprotect (1 samples, 0.13%)</title><rect x="0.2646%" y="149" width="0.1323%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.5146%" y="159.50"></text></g><g><title>_libxpc_initializer (1 samples, 0.13%)</title><rect x="0.3968%" y="213" width="0.1323%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="0.6468%" y="223.50"></text></g><g><title>_xpc_collect_images (1 samples, 0.13%)</title><rect x="0.3968%" y="197" width="0.1323%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.6468%" y="207.50"></text></g><g><title>xpc_bundle_copy_services (1 samples, 0.13%)</title><rect x="0.3968%" y="181" width="0.1323%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.6468%" y="191.50"></text></g><g><title>_xpc_bundle_resolve (1 samples, 0.13%)</title><rect x="0.3968%" y="165" width="0.1323%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="0.6468%" y="175.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.13%)</title><rect x="0.3968%" y="149" width="0.1323%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="0.6468%" y="159.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.13%)</title><rect x="0.3968%" y="133" width="0.1323%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="0.6468%" y="143.50"></text></g><g><title>___xpc_bundle_resolve_block_invoke (1 samples, 0.13%)</title><rect x="0.3968%" y="117" width="0.1323%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="0.6468%" y="127.50"></text></g><g><title>_xpc_bundle_resolve_sync (1 samples, 0.13%)</title><rect x="0.3968%" y="101" width="0.1323%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="0.6468%" y="111.50"></text></g><g><title>_xpc_asprintf (1 samples, 0.13%)</title><rect x="0.3968%" y="85" width="0.1323%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="0.6468%" y="95.50"></text></g><g><title>_vasprintf (1 samples, 0.13%)</title><rect x="0.3968%" y="69" width="0.1323%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="0.6468%" y="79.50"></text></g><g><title>__vfprintf (1 samples, 0.13%)</title><rect x="0.3968%" y="53" width="0.1323%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="0.6468%" y="63.50"></text></g><g><title>localeconv_l (1 samples, 0.13%)</title><rect x="0.3968%" y="37" width="0.1323%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="0.6468%" y="47.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (3 samples, 0.40%)</title><rect x="0.2646%" y="373" width="0.3968%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="3"/><text x="0.5146%" y="383.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (3 samples, 0.40%)</title><rect x="0.2646%" y="357" width="0.3968%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="3"/><text x="0.5146%" y="367.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (3 samples, 0.40%)</title><rect x="0.2646%" y="341" width="0.3968%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="3"/><text x="0.5146%" y="351.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (3 samples, 0.40%)</title><rect x="0.2646%" y="325" width="0.3968%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="3"/><text x="0.5146%" y="335.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (3 samples, 0.40%)</title><rect x="0.2646%" y="309" width="0.3968%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="3"/><text x="0.5146%" y="319.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (3 samples, 0.40%)</title><rect x="0.2646%" y="293" width="0.3968%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="3"/><text x="0.5146%" y="303.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (3 samples, 0.40%)</title><rect x="0.2646%" y="277" width="0.3968%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="3"/><text x="0.5146%" y="287.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (3 samples, 0.40%)</title><rect x="0.2646%" y="261" width="0.3968%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="3"/><text x="0.5146%" y="271.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (3 samples, 0.40%)</title><rect x="0.2646%" y="245" width="0.3968%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="3"/><text x="0.5146%" y="255.50"></text></g><g><title>libSystem_initializer (3 samples, 0.40%)</title><rect x="0.2646%" y="229" width="0.3968%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="3"/><text x="0.5146%" y="239.50"></text></g><g><title>libdispatch_init (1 samples, 0.13%)</title><rect x="0.5291%" y="213" width="0.1323%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="1"/><text x="0.7791%" y="223.50"></text></g><g><title>_os_object_init (1 samples, 0.13%)</title><rect x="0.5291%" y="197" width="0.1323%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="1"/><text x="0.7791%" y="207.50"></text></g><g><title>_objc_init (1 samples, 0.13%)</title><rect x="0.5291%" y="181" width="0.1323%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="1"/><text x="0.7791%" y="191.50"></text></g><g><title>objc::DenseMap&lt;DisguisedPtr&lt;objc_class&gt;, objc::category_list, objc::DenseMapValueInfo&lt;objc::category_list&gt;, objc::DenseMapInfo&lt;DisguisedPtr&lt;objc_class&gt;&gt;, objc::detail::DenseMapPair&lt;DisguisedPtr&lt;objc_class&gt;, objc::category_list&gt;&gt;::init(unsigned int) (1 samples, 0.13%)</title><rect x="0.5291%" y="165" width="0.1323%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="1"/><text x="0.7791%" y="175.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="0.5291%" y="149" width="0.1323%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1"/><text x="0.7791%" y="159.50"></text></g><g><title>small_malloc_should_clear (1 samples, 0.13%)</title><rect x="0.5291%" y="133" width="0.1323%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1"/><text x="0.7791%" y="143.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (1 samples, 0.13%)</title><rect x="0.6614%" y="373" width="0.1323%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="1"/><text x="0.9114%" y="383.50"></text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="357" width="0.1323%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="1"/><text x="0.9114%" y="367.50"></text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="341" width="0.1323%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1"/><text x="0.9114%" y="351.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="325" width="0.1323%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1"/><text x="0.9114%" y="335.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="309" width="0.1323%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1"/><text x="0.9114%" y="319.50"></text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="293" width="0.1323%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1"/><text x="0.9114%" y="303.50"></text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="277" width="0.1323%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="1"/><text x="0.9114%" y="287.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="261" width="0.1323%" height="15" fill="rgb(250,191,14)" fg:x="5" fg:w="1"/><text x="0.9114%" y="271.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="245" width="0.1323%" height="15" fill="rgb(239,60,40)" fg:x="5" fg:w="1"/><text x="0.9114%" y="255.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 0.13%)</title><rect x="0.6614%" y="229" width="0.1323%" height="15" fill="rgb(206,27,48)" fg:x="5" fg:w="1"/><text x="0.9114%" y="239.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (6 samples, 0.79%)</title><rect x="0.1323%" y="405" width="0.7937%" height="15" fill="rgb(225,35,8)" fg:x="1" fg:w="6"/><text x="0.3823%" y="415.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (6 samples, 0.79%)</title><rect x="0.1323%" y="389" width="0.7937%" height="15" fill="rgb(250,213,24)" fg:x="1" fg:w="6"/><text x="0.3823%" y="399.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="373" width="0.1323%" height="15" fill="rgb(247,123,22)" fg:x="6" fg:w="1"/><text x="1.0437%" y="383.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="357" width="0.1323%" height="15" fill="rgb(231,138,38)" fg:x="6" fg:w="1"/><text x="1.0437%" y="367.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="341" width="0.1323%" height="15" fill="rgb(231,145,46)" fg:x="6" fg:w="1"/><text x="1.0437%" y="351.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="325" width="0.1323%" height="15" fill="rgb(251,118,11)" fg:x="6" fg:w="1"/><text x="1.0437%" y="335.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="309" width="0.1323%" height="15" fill="rgb(217,147,25)" fg:x="6" fg:w="1"/><text x="1.0437%" y="319.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="293" width="0.1323%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="1"/><text x="1.0437%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="277" width="0.1323%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="1"/><text x="1.0437%" y="287.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="261" width="0.1323%" height="15" fill="rgb(227,1,9)" fg:x="6" fg:w="1"/><text x="1.0437%" y="271.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="245" width="0.1323%" height="15" fill="rgb(248,47,43)" fg:x="6" fg:w="1"/><text x="1.0437%" y="255.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="229" width="0.1323%" height="15" fill="rgb(221,10,30)" fg:x="6" fg:w="1"/><text x="1.0437%" y="239.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="213" width="0.1323%" height="15" fill="rgb(210,229,1)" fg:x="6" fg:w="1"/><text x="1.0437%" y="223.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="197" width="0.1323%" height="15" fill="rgb(222,148,37)" fg:x="6" fg:w="1"/><text x="1.0437%" y="207.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="181" width="0.1323%" height="15" fill="rgb(234,67,33)" fg:x="6" fg:w="1"/><text x="1.0437%" y="191.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="165" width="0.1323%" height="15" fill="rgb(247,98,35)" fg:x="6" fg:w="1"/><text x="1.0437%" y="175.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="149" width="0.1323%" height="15" fill="rgb(247,138,52)" fg:x="6" fg:w="1"/><text x="1.0437%" y="159.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="133" width="0.1323%" height="15" fill="rgb(213,79,30)" fg:x="6" fg:w="1"/><text x="1.0437%" y="143.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="117" width="0.1323%" height="15" fill="rgb(246,177,23)" fg:x="6" fg:w="1"/><text x="1.0437%" y="127.50"></text></g><g><title>dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&amp;, unsigned int, mach_o::LinkedDylibAttributes*) const (1 samples, 0.13%)</title><rect x="0.7937%" y="101" width="0.1323%" height="15" fill="rgb(230,62,27)" fg:x="6" fg:w="1"/><text x="1.0437%" y="111.50"></text></g><g><title>__fcntl (1 samples, 0.13%)</title><rect x="0.9259%" y="373" width="0.1323%" height="15" fill="rgb(216,154,8)" fg:x="7" fg:w="1"/><text x="1.1759%" y="383.50"></text></g><g><title>_free (1 samples, 0.13%)</title><rect x="1.0582%" y="325" width="0.1323%" height="15" fill="rgb(244,35,45)" fg:x="8" fg:w="1"/><text x="1.3082%" y="335.50"></text></g><g><title>_szone_free (2 samples, 0.26%)</title><rect x="1.3228%" y="309" width="0.2646%" height="15" fill="rgb(251,115,12)" fg:x="10" fg:w="2"/><text x="1.5728%" y="319.50"></text></g><g><title>_free (1 samples, 0.13%)</title><rect x="2.1164%" y="293" width="0.1323%" height="15" fill="rgb(240,54,50)" fg:x="16" fg:w="1"/><text x="2.3664%" y="303.50"></text></g><g><title>_szone_free (4 samples, 0.53%)</title><rect x="2.2487%" y="293" width="0.5291%" height="15" fill="rgb(233,84,52)" fg:x="17" fg:w="4"/><text x="2.4987%" y="303.50"></text></g><g><title>_free (3 samples, 0.40%)</title><rect x="3.5714%" y="277" width="0.3968%" height="15" fill="rgb(207,117,47)" fg:x="27" fg:w="3"/><text x="3.8214%" y="287.50"></text></g><g><title>_szone_free (1 samples, 0.13%)</title><rect x="3.9683%" y="277" width="0.1323%" height="15" fill="rgb(249,43,39)" fg:x="30" fg:w="1"/><text x="4.2183%" y="287.50"></text></g><g><title>DYLD-STUB$$_platform_memset (3 samples, 0.40%)</title><rect x="4.7619%" y="261" width="0.3968%" height="15" fill="rgb(209,38,44)" fg:x="36" fg:w="3"/><text x="5.0119%" y="271.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="5.1587%" y="261" width="0.1323%" height="15" fill="rgb(236,212,23)" fg:x="39" fg:w="1"/><text x="5.4087%" y="271.50"></text></g><g><title>_szone_free (5 samples, 0.66%)</title><rect x="5.2910%" y="261" width="0.6614%" height="15" fill="rgb(242,79,21)" fg:x="40" fg:w="5"/><text x="5.5410%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (1 samples, 0.13%)</title><rect x="5.9524%" y="261" width="0.1323%" height="15" fill="rgb(211,96,35)" fg:x="45" fg:w="1"/><text x="6.2024%" y="271.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="8.4656%" y="245" width="0.1323%" height="15" fill="rgb(253,215,40)" fg:x="64" fg:w="1"/><text x="8.7156%" y="255.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="8.5979%" y="245" width="0.1323%" height="15" fill="rgb(211,81,21)" fg:x="65" fg:w="1"/><text x="8.8479%" y="255.50"></text></g><g><title>get_tiny_previous_free_msize (3 samples, 0.40%)</title><rect x="8.7302%" y="245" width="0.3968%" height="15" fill="rgb(208,190,38)" fg:x="66" fg:w="3"/><text x="8.9802%" y="255.50"></text></g><g><title>tiny_free_list_add_ptr (5 samples, 0.66%)</title><rect x="11.1111%" y="229" width="0.6614%" height="15" fill="rgb(235,213,38)" fg:x="84" fg:w="5"/><text x="11.3611%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (61 samples, 8.07%)</title><rect x="4.1005%" y="277" width="8.0688%" height="15" fill="rgb(237,122,38)" fg:x="31" fg:w="61"/><text x="4.3505%" y="287.50">core::ptr::..</text></g><g><title>free_tiny (46 samples, 6.08%)</title><rect x="6.0847%" y="261" width="6.0847%" height="15" fill="rgb(244,218,35)" fg:x="46" fg:w="46"/><text x="6.3347%" y="271.50">free_tiny</text></g><g><title>tiny_free_no_lock (23 samples, 3.04%)</title><rect x="9.1270%" y="245" width="3.0423%" height="15" fill="rgb(240,68,47)" fg:x="69" fg:w="23"/><text x="9.3770%" y="255.50">tin..</text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.40%)</title><rect x="11.7725%" y="229" width="0.3968%" height="15" fill="rgb(210,16,53)" fg:x="89" fg:w="3"/><text x="12.0225%" y="239.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="14.2857%" y="261" width="0.1323%" height="15" fill="rgb(235,124,12)" fg:x="108" fg:w="1"/><text x="14.5357%" y="271.50"></text></g><g><title>tiny_free_list_add_ptr (10 samples, 1.32%)</title><rect x="16.9312%" y="245" width="1.3228%" height="15" fill="rgb(224,169,11)" fg:x="128" fg:w="10"/><text x="17.1812%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (123 samples, 16.27%)</title><rect x="2.7778%" y="293" width="16.2698%" height="15" fill="rgb(250,166,2)" fg:x="21" fg:w="123"/><text x="3.0278%" y="303.50">core::ptr::drop_in_place&lt;..</text></g><g><title>free_tiny (52 samples, 6.88%)</title><rect x="12.1693%" y="277" width="6.8783%" height="15" fill="rgb(242,216,29)" fg:x="92" fg:w="52"/><text x="12.4193%" y="287.50">free_tiny</text></g><g><title>tiny_free_no_lock (35 samples, 4.63%)</title><rect x="14.4180%" y="261" width="4.6296%" height="15" fill="rgb(230,116,27)" fg:x="109" fg:w="35"/><text x="14.6680%" y="271.50">tiny_..</text></g><g><title>tiny_free_list_remove_ptr (6 samples, 0.79%)</title><rect x="18.2540%" y="245" width="0.7937%" height="15" fill="rgb(228,99,48)" fg:x="138" fg:w="6"/><text x="18.5040%" y="255.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="20.2381%" y="277" width="0.1323%" height="15" fill="rgb(253,11,6)" fg:x="153" fg:w="1"/><text x="20.4881%" y="287.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.13%)</title><rect x="20.3704%" y="277" width="0.1323%" height="15" fill="rgb(247,143,39)" fg:x="154" fg:w="1"/><text x="20.6204%" y="287.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.53%)</title><rect x="22.0899%" y="261" width="0.5291%" height="15" fill="rgb(236,97,10)" fg:x="167" fg:w="4"/><text x="22.3399%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (168 samples, 22.22%)</title><rect x="1.5873%" y="309" width="22.2222%" height="15" fill="rgb(233,208,19)" fg:x="12" fg:w="168"/><text x="1.8373%" y="319.50">core::ptr::drop_in_place&lt;vexy_json_core..</text></g><g><title>free_tiny (36 samples, 4.76%)</title><rect x="19.0476%" y="293" width="4.7619%" height="15" fill="rgb(216,164,2)" fg:x="144" fg:w="36"/><text x="19.2976%" y="303.50">free_t..</text></g><g><title>tiny_free_no_lock (25 samples, 3.31%)</title><rect x="20.5026%" y="277" width="3.3069%" height="15" fill="rgb(220,129,5)" fg:x="155" fg:w="25"/><text x="20.7526%" y="287.50">tin..</text></g><g><title>tiny_free_list_remove_ptr (9 samples, 1.19%)</title><rect x="22.6190%" y="261" width="1.1905%" height="15" fill="rgb(242,17,10)" fg:x="171" fg:w="9"/><text x="22.8690%" y="271.50"></text></g><g><title>free (2 samples, 0.26%)</title><rect x="23.8095%" y="309" width="0.2646%" height="15" fill="rgb(242,107,0)" fg:x="180" fg:w="2"/><text x="24.0595%" y="319.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.26%)</title><rect x="25.1323%" y="277" width="0.2646%" height="15" fill="rgb(251,28,31)" fg:x="190" fg:w="2"/><text x="25.3823%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (186 samples, 24.60%)</title><rect x="1.1905%" y="325" width="24.6032%" height="15" fill="rgb(233,223,10)" fg:x="9" fg:w="186"/><text x="1.4405%" y="335.50">core::ptr::drop_in_place&lt;vexy_json_core::as..</text></g><g><title>free_tiny (13 samples, 1.72%)</title><rect x="24.0741%" y="309" width="1.7196%" height="15" fill="rgb(215,21,27)" fg:x="182" fg:w="13"/><text x="24.3241%" y="319.50"></text></g><g><title>tiny_free_no_lock (9 samples, 1.19%)</title><rect x="24.6032%" y="293" width="1.1905%" height="15" fill="rgb(232,23,21)" fg:x="186" fg:w="9"/><text x="24.8532%" y="303.50"></text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.40%)</title><rect x="25.3968%" y="277" width="0.3968%" height="15" fill="rgb(244,5,23)" fg:x="192" fg:w="3"/><text x="25.6468%" y="287.50"></text></g><g><title>free_tiny (1 samples, 0.13%)</title><rect x="25.7937%" y="325" width="0.1323%" height="15" fill="rgb(226,81,46)" fg:x="195" fg:w="1"/><text x="26.0437%" y="335.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.13%)</title><rect x="27.2487%" y="261" width="0.1323%" height="15" fill="rgb(247,70,30)" fg:x="206" fg:w="1"/><text x="27.4987%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="27.9101%" y="245" width="0.3968%" height="15" fill="rgb(212,68,19)" fg:x="211" fg:w="3"/><text x="28.1601%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.13%)</title><rect x="28.1746%" y="229" width="0.1323%" height="15" fill="rgb(240,187,13)" fg:x="213" fg:w="1"/><text x="28.4246%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="28.7037%" y="229" width="0.3968%" height="15" fill="rgb(223,113,26)" fg:x="217" fg:w="3"/><text x="28.9537%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.26%)</title><rect x="28.8360%" y="213" width="0.2646%" height="15" fill="rgb(206,192,2)" fg:x="218" fg:w="2"/><text x="29.0860%" y="223.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="29.2328%" y="213" width="0.1323%" height="15" fill="rgb(241,108,4)" fg:x="221" fg:w="1"/><text x="29.4828%" y="223.50"></text></g><g><title>free_tiny (6 samples, 0.79%)</title><rect x="29.1005%" y="229" width="0.7937%" height="15" fill="rgb(247,173,49)" fg:x="220" fg:w="6"/><text x="29.3505%" y="239.50"></text></g><g><title>tiny_free_no_lock (4 samples, 0.53%)</title><rect x="29.3651%" y="213" width="0.5291%" height="15" fill="rgb(224,114,35)" fg:x="222" fg:w="4"/><text x="29.6151%" y="223.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.13%)</title><rect x="29.7619%" y="197" width="0.1323%" height="15" fill="rgb(245,159,27)" fg:x="225" fg:w="1"/><text x="30.0119%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (22 samples, 2.91%)</title><rect x="27.3810%" y="261" width="2.9101%" height="15" fill="rgb(245,172,44)" fg:x="207" fg:w="22"/><text x="27.6310%" y="271.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 1.98%)</title><rect x="28.3069%" y="245" width="1.9841%" height="15" fill="rgb(236,23,11)" fg:x="214" fg:w="15"/><text x="28.5569%" y="255.50">h..</text></g><g><title>szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="29.8942%" y="229" width="0.3968%" height="15" fill="rgb(205,117,38)" fg:x="226" fg:w="3"/><text x="30.1442%" y="239.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="29.8942%" y="213" width="0.3968%" height="15" fill="rgb(237,72,25)" fg:x="226" fg:w="3"/><text x="30.1442%" y="223.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="30.1587%" y="197" width="0.1323%" height="15" fill="rgb(244,70,9)" fg:x="228" fg:w="1"/><text x="30.4087%" y="207.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="30.5556%" y="245" width="0.1323%" height="15" fill="rgb(217,125,39)" fg:x="231" fg:w="1"/><text x="30.8056%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.26%)</title><rect x="30.6878%" y="245" width="0.2646%" height="15" fill="rgb(235,36,10)" fg:x="232" fg:w="2"/><text x="30.9378%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (14 samples, 1.85%)</title><rect x="30.2910%" y="261" width="1.8519%" height="15" fill="rgb(251,123,47)" fg:x="229" fg:w="14"/><text x="30.5410%" y="271.50">z..</text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (9 samples, 1.19%)</title><rect x="30.9524%" y="245" width="1.1905%" height="15" fill="rgb(221,13,13)" fg:x="234" fg:w="9"/><text x="31.2024%" y="255.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.13%)</title><rect x="32.6720%" y="245" width="0.1323%" height="15" fill="rgb(238,131,9)" fg:x="247" fg:w="1"/><text x="32.9220%" y="255.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.13%)</title><rect x="33.4656%" y="229" width="0.1323%" height="15" fill="rgb(211,50,8)" fg:x="253" fg:w="1"/><text x="33.7156%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.13%)</title><rect x="33.5979%" y="229" width="0.1323%" height="15" fill="rgb(245,182,24)" fg:x="254" fg:w="1"/><text x="33.8479%" y="239.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (3 samples, 0.40%)</title><rect x="33.9947%" y="213" width="0.3968%" height="15" fill="rgb(242,14,37)" fg:x="257" fg:w="3"/><text x="34.2447%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.53%)</title><rect x="34.3915%" y="213" width="0.5291%" height="15" fill="rgb(246,228,12)" fg:x="260" fg:w="4"/><text x="34.6415%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.26%)</title><rect x="34.6561%" y="197" width="0.2646%" height="15" fill="rgb(213,55,15)" fg:x="262" fg:w="2"/><text x="34.9061%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="34.9206%" y="197" width="0.1323%" height="15" fill="rgb(209,9,3)" fg:x="264" fg:w="1"/><text x="35.1706%" y="207.50"></text></g><g><title>free_tiny (3 samples, 0.40%)</title><rect x="34.9206%" y="213" width="0.3968%" height="15" fill="rgb(230,59,30)" fg:x="264" fg:w="3"/><text x="35.1706%" y="223.50"></text></g><g><title>tiny_free_no_lock (2 samples, 0.26%)</title><rect x="35.0529%" y="197" width="0.2646%" height="15" fill="rgb(209,121,21)" fg:x="265" fg:w="2"/><text x="35.3029%" y="207.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.26%)</title><rect x="35.0529%" y="181" width="0.2646%" height="15" fill="rgb(220,109,13)" fg:x="265" fg:w="2"/><text x="35.3029%" y="191.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="35.3175%" y="197" width="0.1323%" height="15" fill="rgb(232,18,1)" fg:x="267" fg:w="1"/><text x="35.5675%" y="207.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.13%)</title><rect x="35.7143%" y="181" width="0.1323%" height="15" fill="rgb(215,41,42)" fg:x="270" fg:w="1"/><text x="35.9643%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 3.17%)</title><rect x="32.8042%" y="245" width="3.1746%" height="15" fill="rgb(224,123,36)" fg:x="248" fg:w="24"/><text x="33.0542%" y="255.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 2.25%)</title><rect x="33.7302%" y="229" width="2.2487%" height="15" fill="rgb(240,125,3)" fg:x="255" fg:w="17"/><text x="33.9802%" y="239.50">h..</text></g><g><title>szone_malloc_should_clear (5 samples, 0.66%)</title><rect x="35.3175%" y="213" width="0.6614%" height="15" fill="rgb(205,98,50)" fg:x="267" fg:w="5"/><text x="35.5675%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (4 samples, 0.53%)</title><rect x="35.4497%" y="197" width="0.5291%" height="15" fill="rgb(205,185,37)" fg:x="268" fg:w="4"/><text x="35.6997%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="35.8466%" y="181" width="0.1323%" height="15" fill="rgb(238,207,15)" fg:x="271" fg:w="1"/><text x="36.0966%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (4 samples, 0.53%)</title><rect x="36.7725%" y="229" width="0.5291%" height="15" fill="rgb(213,199,42)" fg:x="278" fg:w="4"/><text x="37.0225%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="37.3016%" y="229" width="0.1323%" height="15" fill="rgb(235,201,11)" fg:x="282" fg:w="1"/><text x="37.5516%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (14 samples, 1.85%)</title><rect x="35.9788%" y="245" width="1.8519%" height="15" fill="rgb(207,46,11)" fg:x="272" fg:w="14"/><text x="36.2288%" y="255.50">z..</text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (3 samples, 0.40%)</title><rect x="37.4339%" y="229" width="0.3968%" height="15" fill="rgb(241,35,35)" fg:x="283" fg:w="3"/><text x="37.6839%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.13%)</title><rect x="38.3598%" y="229" width="0.1323%" height="15" fill="rgb(243,32,47)" fg:x="290" fg:w="1"/><text x="38.6098%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.13%)</title><rect x="38.3598%" y="213" width="0.1323%" height="15" fill="rgb(247,202,23)" fg:x="290" fg:w="1"/><text x="38.6098%" y="223.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="38.3598%" y="197" width="0.1323%" height="15" fill="rgb(219,102,11)" fg:x="290" fg:w="1"/><text x="38.6098%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.13%)</title><rect x="38.3598%" y="181" width="0.1323%" height="15" fill="rgb(243,110,44)" fg:x="290" fg:w="1"/><text x="38.6098%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="38.3598%" y="165" width="0.1323%" height="15" fill="rgb(222,74,54)" fg:x="290" fg:w="1"/><text x="38.6098%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="38.6243%" y="213" width="0.1323%" height="15" fill="rgb(216,99,12)" fg:x="292" fg:w="1"/><text x="38.8743%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="38.7566%" y="213" width="0.1323%" height="15" fill="rgb(226,22,26)" fg:x="293" fg:w="1"/><text x="39.0066%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.53%)</title><rect x="38.4921%" y="229" width="0.5291%" height="15" fill="rgb(217,163,10)" fg:x="291" fg:w="4"/><text x="38.7421%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="38.8889%" y="213" width="0.1323%" height="15" fill="rgb(213,25,53)" fg:x="294" fg:w="1"/><text x="39.1389%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (17 samples, 2.25%)</title><rect x="37.8307%" y="245" width="2.2487%" height="15" fill="rgb(252,105,26)" fg:x="286" fg:w="17"/><text x="38.0807%" y="255.50">z..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (8 samples, 1.06%)</title><rect x="39.0212%" y="229" width="1.0582%" height="15" fill="rgb(220,39,43)" fg:x="295" fg:w="8"/><text x="39.2712%" y="239.50"></text></g><g><title>vexy_json_core::parser::unescape_string (8 samples, 1.06%)</title><rect x="39.0212%" y="213" width="1.0582%" height="15" fill="rgb(229,68,48)" fg:x="295" fg:w="8"/><text x="39.2712%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.79%)</title><rect x="39.2857%" y="197" width="0.7937%" height="15" fill="rgb(252,8,32)" fg:x="297" fg:w="6"/><text x="39.5357%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.79%)</title><rect x="39.2857%" y="181" width="0.7937%" height="15" fill="rgb(223,20,43)" fg:x="297" fg:w="6"/><text x="39.5357%" y="191.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.79%)</title><rect x="39.2857%" y="165" width="0.7937%" height="15" fill="rgb(229,81,49)" fg:x="297" fg:w="6"/><text x="39.5357%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.66%)</title><rect x="39.4180%" y="149" width="0.6614%" height="15" fill="rgb(236,28,36)" fg:x="298" fg:w="5"/><text x="39.6680%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.53%)</title><rect x="39.5503%" y="133" width="0.5291%" height="15" fill="rgb(249,185,26)" fg:x="299" fg:w="4"/><text x="39.8003%" y="143.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="39.9471%" y="117" width="0.1323%" height="15" fill="rgb(249,174,33)" fg:x="302" fg:w="1"/><text x="40.1971%" y="127.50"></text></g><g><title>szone_good_size (1 samples, 0.13%)</title><rect x="41.2698%" y="149" width="0.1323%" height="15" fill="rgb(233,201,37)" fg:x="312" fg:w="1"/><text x="41.5198%" y="159.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="41.4021%" y="133" width="0.1323%" height="15" fill="rgb(221,78,26)" fg:x="313" fg:w="1"/><text x="41.6521%" y="143.50"></text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="41.5344%" y="133" width="0.1323%" height="15" fill="rgb(250,127,30)" fg:x="314" fg:w="1"/><text x="41.7844%" y="143.50"></text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="41.5344%" y="117" width="0.1323%" height="15" fill="rgb(230,49,44)" fg:x="314" fg:w="1"/><text x="41.7844%" y="127.50"></text></g><g><title>_malloc_zone_realloc (5 samples, 0.66%)</title><rect x="41.2698%" y="165" width="0.6614%" height="15" fill="rgb(229,67,23)" fg:x="312" fg:w="5"/><text x="41.5198%" y="175.50"></text></g><g><title>szone_realloc (4 samples, 0.53%)</title><rect x="41.4021%" y="149" width="0.5291%" height="15" fill="rgb(249,83,47)" fg:x="313" fg:w="4"/><text x="41.6521%" y="159.50"></text></g><g><title>tiny_try_realloc_in_place (2 samples, 0.26%)</title><rect x="41.6667%" y="133" width="0.2646%" height="15" fill="rgb(215,43,3)" fg:x="315" fg:w="2"/><text x="41.9167%" y="143.50"></text></g><g><title>_realloc (10 samples, 1.32%)</title><rect x="41.0053%" y="181" width="1.3228%" height="15" fill="rgb(238,154,13)" fg:x="310" fg:w="10"/><text x="41.2553%" y="191.50"></text></g><g><title>szone_size (3 samples, 0.40%)</title><rect x="41.9312%" y="165" width="0.3968%" height="15" fill="rgb(219,56,2)" fg:x="317" fg:w="3"/><text x="42.1812%" y="175.50"></text></g><g><title>tiny_size (3 samples, 0.40%)</title><rect x="41.9312%" y="149" width="0.3968%" height="15" fill="rgb(233,0,4)" fg:x="317" fg:w="3"/><text x="42.1812%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (25 samples, 3.31%)</title><rect x="40.0794%" y="245" width="3.3069%" height="15" fill="rgb(235,30,7)" fg:x="303" fg:w="25"/><text x="40.3294%" y="255.50">zzs..</text></g><g><title>vexy_json_core::parser::unescape_string (24 samples, 3.17%)</title><rect x="40.2116%" y="229" width="3.1746%" height="15" fill="rgb(250,79,13)" fg:x="304" fg:w="24"/><text x="40.4616%" y="239.50">zzs..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 2.65%)</title><rect x="40.7407%" y="213" width="2.6455%" height="15" fill="rgb(211,146,34)" fg:x="308" fg:w="20"/><text x="40.9907%" y="223.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 2.38%)</title><rect x="41.0053%" y="197" width="2.3810%" height="15" fill="rgb(228,22,38)" fg:x="310" fg:w="18"/><text x="41.2553%" y="207.50">al..</text></g><g><title>szone_malloc_should_clear (8 samples, 1.06%)</title><rect x="42.3280%" y="181" width="1.0582%" height="15" fill="rgb(235,168,5)" fg:x="320" fg:w="8"/><text x="42.5780%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (8 samples, 1.06%)</title><rect x="42.3280%" y="165" width="1.0582%" height="15" fill="rgb(221,155,16)" fg:x="320" fg:w="8"/><text x="42.5780%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.53%)</title><rect x="42.8571%" y="149" width="0.5291%" height="15" fill="rgb(215,215,53)" fg:x="324" fg:w="4"/><text x="43.1071%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.13%)</title><rect x="43.3862%" y="245" width="0.1323%" height="15" fill="rgb(223,4,10)" fg:x="328" fg:w="1"/><text x="43.6362%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (3 samples, 0.40%)</title><rect x="43.5185%" y="213" width="0.3968%" height="15" fill="rgb(234,103,6)" fg:x="329" fg:w="3"/><text x="43.7685%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (4 samples, 0.53%)</title><rect x="43.5185%" y="245" width="0.5291%" height="15" fill="rgb(227,97,0)" fg:x="329" fg:w="4"/><text x="43.7685%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.53%)</title><rect x="43.5185%" y="229" width="0.5291%" height="15" fill="rgb(234,150,53)" fg:x="329" fg:w="4"/><text x="43.7685%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="43.9153%" y="213" width="0.1323%" height="15" fill="rgb(228,201,54)" fg:x="332" fg:w="1"/><text x="44.1653%" y="223.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.13%)</title><rect x="51.0582%" y="213" width="0.1323%" height="15" fill="rgb(222,22,37)" fg:x="386" fg:w="1"/><text x="51.3082%" y="223.50"></text></g><g><title>_realloc (1 samples, 0.13%)</title><rect x="51.1905%" y="213" width="0.1323%" height="15" fill="rgb(237,53,32)" fg:x="387" fg:w="1"/><text x="51.4405%" y="223.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.13%)</title><rect x="51.5873%" y="197" width="0.1323%" height="15" fill="rgb(233,25,53)" fg:x="390" fg:w="1"/><text x="51.8373%" y="207.50"></text></g><g><title>szone_good_size (1 samples, 0.13%)</title><rect x="52.5132%" y="165" width="0.1323%" height="15" fill="rgb(210,40,34)" fg:x="397" fg:w="1"/><text x="52.7632%" y="175.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="52.9101%" y="149" width="0.1323%" height="15" fill="rgb(241,220,44)" fg:x="400" fg:w="1"/><text x="53.1601%" y="159.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="53.0423%" y="149" width="0.1323%" height="15" fill="rgb(235,28,35)" fg:x="401" fg:w="1"/><text x="53.2923%" y="159.50"></text></g><g><title>szone_size (11 samples, 1.46%)</title><rect x="53.1746%" y="149" width="1.4550%" height="15" fill="rgb(210,56,17)" fg:x="402" fg:w="11"/><text x="53.4246%" y="159.50"></text></g><g><title>tiny_size (11 samples, 1.46%)</title><rect x="53.1746%" y="133" width="1.4550%" height="15" fill="rgb(224,130,29)" fg:x="402" fg:w="11"/><text x="53.4246%" y="143.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.26%)</title><rect x="55.8201%" y="133" width="0.2646%" height="15" fill="rgb(235,212,8)" fg:x="422" fg:w="2"/><text x="56.0701%" y="143.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.26%)</title><rect x="56.0847%" y="133" width="0.2646%" height="15" fill="rgb(223,33,50)" fg:x="424" fg:w="2"/><text x="56.3347%" y="143.50"></text></g><g><title>_malloc_zone_realloc (34 samples, 4.50%)</title><rect x="52.2487%" y="181" width="4.4974%" height="15" fill="rgb(219,149,13)" fg:x="395" fg:w="34"/><text x="52.4987%" y="191.50">_mall..</text></g><g><title>szone_realloc (31 samples, 4.10%)</title><rect x="52.6455%" y="165" width="4.1005%" height="15" fill="rgb(250,156,29)" fg:x="398" fg:w="31"/><text x="52.8955%" y="175.50">szon..</text></g><g><title>tiny_try_realloc_in_place (16 samples, 2.12%)</title><rect x="54.6296%" y="149" width="2.1164%" height="15" fill="rgb(216,193,19)" fg:x="413" fg:w="16"/><text x="54.8796%" y="159.50">t..</text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.40%)</title><rect x="56.3492%" y="133" width="0.3968%" height="15" fill="rgb(216,135,14)" fg:x="426" fg:w="3"/><text x="56.5992%" y="143.50"></text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="56.7460%" y="181" width="0.1323%" height="15" fill="rgb(241,47,5)" fg:x="429" fg:w="1"/><text x="56.9960%" y="191.50"></text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="56.7460%" y="165" width="0.1323%" height="15" fill="rgb(233,42,35)" fg:x="429" fg:w="1"/><text x="56.9960%" y="175.50"></text></g><g><title>_realloc (40 samples, 5.29%)</title><rect x="51.7196%" y="197" width="5.2910%" height="15" fill="rgb(231,13,6)" fg:x="391" fg:w="40"/><text x="51.9696%" y="207.50">_reall..</text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="56.8783%" y="181" width="0.1323%" height="15" fill="rgb(207,181,40)" fg:x="430" fg:w="1"/><text x="57.1283%" y="191.50"></text></g><g><title>rack_get_thread_index (2 samples, 0.26%)</title><rect x="57.0106%" y="181" width="0.2646%" height="15" fill="rgb(254,173,49)" fg:x="431" fg:w="2"/><text x="57.2606%" y="191.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.13%)</title><rect x="57.2751%" y="181" width="0.1323%" height="15" fill="rgb(221,1,38)" fg:x="433" fg:w="1"/><text x="57.5251%" y="191.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="58.3333%" y="165" width="0.1323%" height="15" fill="rgb(206,124,46)" fg:x="441" fg:w="1"/><text x="58.5833%" y="175.50"></text></g><g><title>szone_malloc_should_clear (16 samples, 2.12%)</title><rect x="57.0106%" y="197" width="2.1164%" height="15" fill="rgb(249,21,11)" fg:x="431" fg:w="16"/><text x="57.2606%" y="207.50">s..</text></g><g><title>tiny_malloc_should_clear (13 samples, 1.72%)</title><rect x="57.4074%" y="181" width="1.7196%" height="15" fill="rgb(222,201,40)" fg:x="434" fg:w="13"/><text x="57.6574%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.66%)</title><rect x="58.4656%" y="165" width="0.6614%" height="15" fill="rgb(235,61,29)" fg:x="442" fg:w="5"/><text x="58.7156%" y="175.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.26%)</title><rect x="58.8624%" y="149" width="0.2646%" height="15" fill="rgb(219,207,3)" fg:x="445" fg:w="2"/><text x="59.1124%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (205 samples, 27.12%)</title><rect x="32.1429%" y="261" width="27.1164%" height="15" fill="rgb(222,56,46)" fg:x="243" fg:w="205"/><text x="32.3929%" y="271.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (115 samples, 15.21%)</title><rect x="44.0476%" y="245" width="15.2116%" height="15" fill="rgb(239,76,54)" fg:x="333" fg:w="115"/><text x="44.2976%" y="255.50">vexy_json_core::parser::une..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (64 samples, 8.47%)</title><rect x="50.7937%" y="229" width="8.4656%" height="15" fill="rgb(231,124,27)" fg:x="384" fg:w="64"/><text x="51.0437%" y="239.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::finish_grow (60 samples, 7.94%)</title><rect x="51.3228%" y="213" width="7.9365%" height="15" fill="rgb(249,195,6)" fg:x="388" fg:w="60"/><text x="51.5728%" y="223.50">alloc::raw_..</text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="59.1270%" y="197" width="0.1323%" height="15" fill="rgb(237,174,47)" fg:x="447" fg:w="1"/><text x="59.3770%" y="207.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.40%)</title><rect x="59.7884%" y="229" width="0.3968%" height="15" fill="rgb(206,201,31)" fg:x="452" fg:w="3"/><text x="60.0384%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (8 samples, 1.06%)</title><rect x="59.2593%" y="261" width="1.0582%" height="15" fill="rgb(231,57,52)" fg:x="448" fg:w="8"/><text x="59.5093%" y="271.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (5 samples, 0.66%)</title><rect x="59.6561%" y="245" width="0.6614%" height="15" fill="rgb(248,177,22)" fg:x="451" fg:w="5"/><text x="59.9061%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="60.1852%" y="229" width="0.1323%" height="15" fill="rgb(215,211,37)" fg:x="455" fg:w="1"/><text x="60.4352%" y="239.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="60.8466%" y="229" width="0.1323%" height="15" fill="rgb(241,128,51)" fg:x="460" fg:w="1"/><text x="61.0966%" y="239.50"></text></g><g><title>szone_good_size (1 samples, 0.13%)</title><rect x="60.9788%" y="181" width="0.1323%" height="15" fill="rgb(227,165,31)" fg:x="461" fg:w="1"/><text x="61.2288%" y="191.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.26%)</title><rect x="60.9788%" y="197" width="0.2646%" height="15" fill="rgb(228,167,24)" fg:x="461" fg:w="2"/><text x="61.2288%" y="207.50"></text></g><g><title>szone_realloc (1 samples, 0.13%)</title><rect x="61.1111%" y="181" width="0.1323%" height="15" fill="rgb(228,143,12)" fg:x="462" fg:w="1"/><text x="61.3611%" y="191.50"></text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="61.1111%" y="165" width="0.1323%" height="15" fill="rgb(249,149,8)" fg:x="462" fg:w="1"/><text x="61.3611%" y="175.50"></text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="61.1111%" y="149" width="0.1323%" height="15" fill="rgb(243,35,44)" fg:x="462" fg:w="1"/><text x="61.3611%" y="159.50"></text></g><g><title>_realloc (3 samples, 0.40%)</title><rect x="60.9788%" y="213" width="0.3968%" height="15" fill="rgb(246,89,9)" fg:x="461" fg:w="3"/><text x="61.2288%" y="223.50"></text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="61.2434%" y="197" width="0.1323%" height="15" fill="rgb(233,213,13)" fg:x="463" fg:w="1"/><text x="61.4934%" y="207.50"></text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="61.2434%" y="181" width="0.1323%" height="15" fill="rgb(233,141,41)" fg:x="463" fg:w="1"/><text x="61.4934%" y="191.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.13%)</title><rect x="61.6402%" y="181" width="0.1323%" height="15" fill="rgb(239,167,4)" fg:x="466" fg:w="1"/><text x="61.8902%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (271 samples, 35.85%)</title><rect x="26.0582%" y="293" width="35.8466%" height="15" fill="rgb(209,217,16)" fg:x="197" fg:w="271"/><text x="26.3082%" y="303.50">vexy_json_core::parser::Parser::parse_array</text></g><g><title>vexy_json_core::parser::Parser::parse_value (271 samples, 35.85%)</title><rect x="26.0582%" y="277" width="35.8466%" height="15" fill="rgb(219,88,35)" fg:x="197" fg:w="271"/><text x="26.3082%" y="287.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (12 samples, 1.59%)</title><rect x="60.3175%" y="261" width="1.5873%" height="15" fill="rgb(220,193,23)" fg:x="456" fg:w="12"/><text x="60.5675%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8 samples, 1.06%)</title><rect x="60.8466%" y="245" width="1.0582%" height="15" fill="rgb(230,90,52)" fg:x="460" fg:w="8"/><text x="61.0966%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.93%)</title><rect x="60.9788%" y="229" width="0.9259%" height="15" fill="rgb(252,106,19)" fg:x="461" fg:w="7"/><text x="61.2288%" y="239.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.53%)</title><rect x="61.3757%" y="213" width="0.5291%" height="15" fill="rgb(206,74,20)" fg:x="464" fg:w="4"/><text x="61.6257%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (4 samples, 0.53%)</title><rect x="61.3757%" y="197" width="0.5291%" height="15" fill="rgb(230,138,44)" fg:x="464" fg:w="4"/><text x="61.6257%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="61.7725%" y="181" width="0.1323%" height="15" fill="rgb(235,182,43)" fg:x="467" fg:w="1"/><text x="62.0225%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.13%)</title><rect x="61.7725%" y="165" width="0.1323%" height="15" fill="rgb(242,16,51)" fg:x="467" fg:w="1"/><text x="62.0225%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.13%)</title><rect x="62.4339%" y="261" width="0.1323%" height="15" fill="rgb(248,9,4)" fg:x="472" fg:w="1"/><text x="62.6839%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="62.6984%" y="245" width="0.3968%" height="15" fill="rgb(210,31,22)" fg:x="474" fg:w="3"/><text x="62.9484%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.40%)</title><rect x="62.6984%" y="229" width="0.3968%" height="15" fill="rgb(239,54,39)" fg:x="474" fg:w="3"/><text x="62.9484%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 1.06%)</title><rect x="62.1693%" y="277" width="1.0582%" height="15" fill="rgb(230,99,41)" fg:x="470" fg:w="8"/><text x="62.4193%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.66%)</title><rect x="62.5661%" y="261" width="0.6614%" height="15" fill="rgb(253,106,12)" fg:x="473" fg:w="5"/><text x="62.8161%" y="271.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="63.0952%" y="245" width="0.1323%" height="15" fill="rgb(213,46,41)" fg:x="477" fg:w="1"/><text x="63.3452%" y="255.50"></text></g><g><title>small_malloc_should_clear (1 samples, 0.13%)</title><rect x="63.0952%" y="229" width="0.1323%" height="15" fill="rgb(215,133,35)" fg:x="477" fg:w="1"/><text x="63.3452%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.53%)</title><rect x="63.2275%" y="277" width="0.5291%" height="15" fill="rgb(213,28,5)" fg:x="478" fg:w="4"/><text x="63.4775%" y="287.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.26%)</title><rect x="63.4921%" y="261" width="0.2646%" height="15" fill="rgb(215,77,49)" fg:x="480" fg:w="2"/><text x="63.7421%" y="271.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (1 samples, 0.13%)</title><rect x="63.7566%" y="277" width="0.1323%" height="15" fill="rgb(248,100,22)" fg:x="482" fg:w="1"/><text x="64.0066%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (1 samples, 0.13%)</title><rect x="64.0212%" y="261" width="0.1323%" height="15" fill="rgb(208,67,9)" fg:x="484" fg:w="1"/><text x="64.2712%" y="271.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="64.0212%" y="245" width="0.1323%" height="15" fill="rgb(219,133,21)" fg:x="484" fg:w="1"/><text x="64.2712%" y="255.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.26%)</title><rect x="64.1534%" y="261" width="0.2646%" height="15" fill="rgb(246,46,29)" fg:x="485" fg:w="2"/><text x="64.4034%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.53%)</title><rect x="64.6825%" y="245" width="0.5291%" height="15" fill="rgb(246,185,52)" fg:x="489" fg:w="4"/><text x="64.9325%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.26%)</title><rect x="64.9471%" y="229" width="0.2646%" height="15" fill="rgb(252,136,11)" fg:x="491" fg:w="2"/><text x="65.1971%" y="239.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="65.3439%" y="213" width="0.1323%" height="15" fill="rgb(219,138,53)" fg:x="494" fg:w="1"/><text x="65.5939%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 1.46%)</title><rect x="64.4180%" y="261" width="1.4550%" height="15" fill="rgb(211,51,23)" fg:x="487" fg:w="11"/><text x="64.6680%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.66%)</title><rect x="65.2116%" y="245" width="0.6614%" height="15" fill="rgb(247,221,28)" fg:x="493" fg:w="5"/><text x="65.4616%" y="255.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.53%)</title><rect x="65.3439%" y="229" width="0.5291%" height="15" fill="rgb(251,222,45)" fg:x="494" fg:w="4"/><text x="65.5939%" y="239.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="65.4762%" y="213" width="0.3968%" height="15" fill="rgb(217,162,53)" fg:x="495" fg:w="3"/><text x="65.7262%" y="223.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.26%)</title><rect x="65.6085%" y="197" width="0.2646%" height="15" fill="rgb(229,93,14)" fg:x="496" fg:w="2"/><text x="65.8585%" y="207.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="65.7407%" y="181" width="0.1323%" height="15" fill="rgb(209,67,49)" fg:x="497" fg:w="1"/><text x="65.9907%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="66.1376%" y="245" width="0.1323%" height="15" fill="rgb(213,87,29)" fg:x="500" fg:w="1"/><text x="66.3876%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.53%)</title><rect x="65.8730%" y="261" width="0.5291%" height="15" fill="rgb(205,151,52)" fg:x="498" fg:w="4"/><text x="66.1230%" y="271.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="66.2698%" y="245" width="0.1323%" height="15" fill="rgb(253,215,39)" fg:x="501" fg:w="1"/><text x="66.5198%" y="255.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="66.7989%" y="197" width="0.1323%" height="15" fill="rgb(221,220,41)" fg:x="505" fg:w="1"/><text x="67.0489%" y="207.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="67.0635%" y="181" width="0.1323%" height="15" fill="rgb(218,133,21)" fg:x="507" fg:w="1"/><text x="67.3135%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.66%)</title><rect x="66.6667%" y="245" width="0.6614%" height="15" fill="rgb(221,193,43)" fg:x="504" fg:w="5"/><text x="66.9167%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.66%)</title><rect x="66.6667%" y="229" width="0.6614%" height="15" fill="rgb(240,128,52)" fg:x="504" fg:w="5"/><text x="66.9167%" y="239.50"></text></g><g><title>szone_malloc_should_clear (5 samples, 0.66%)</title><rect x="66.6667%" y="213" width="0.6614%" height="15" fill="rgb(253,114,12)" fg:x="504" fg:w="5"/><text x="66.9167%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="66.9312%" y="197" width="0.3968%" height="15" fill="rgb(215,223,47)" fg:x="506" fg:w="3"/><text x="67.1812%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="67.1958%" y="181" width="0.1323%" height="15" fill="rgb(248,225,23)" fg:x="508" fg:w="1"/><text x="67.4458%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (4 samples, 0.53%)</title><rect x="67.5926%" y="229" width="0.5291%" height="15" fill="rgb(250,108,0)" fg:x="511" fg:w="4"/><text x="67.8426%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (8 samples, 1.06%)</title><rect x="67.3280%" y="245" width="1.0582%" height="15" fill="rgb(228,208,7)" fg:x="509" fg:w="8"/><text x="67.5780%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.26%)</title><rect x="68.1217%" y="229" width="0.2646%" height="15" fill="rgb(244,45,10)" fg:x="515" fg:w="2"/><text x="68.3717%" y="239.50"></text></g><g><title>__rustc::__rust_dealloc (1 samples, 0.13%)</title><rect x="68.9153%" y="229" width="0.1323%" height="15" fill="rgb(207,125,25)" fg:x="521" fg:w="1"/><text x="69.1653%" y="239.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.13%)</title><rect x="69.0476%" y="229" width="0.1323%" height="15" fill="rgb(210,195,18)" fg:x="522" fg:w="1"/><text x="69.2976%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.93%)</title><rect x="69.8413%" y="213" width="0.9259%" height="15" fill="rgb(249,80,12)" fg:x="528" fg:w="7"/><text x="70.0913%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.13%)</title><rect x="70.6349%" y="197" width="0.1323%" height="15" fill="rgb(221,65,9)" fg:x="534" fg:w="1"/><text x="70.8849%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17 samples, 2.25%)</title><rect x="69.1799%" y="229" width="2.2487%" height="15" fill="rgb(235,49,36)" fg:x="523" fg:w="17"/><text x="69.4299%" y="239.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.66%)</title><rect x="70.7672%" y="213" width="0.6614%" height="15" fill="rgb(225,32,20)" fg:x="535" fg:w="5"/><text x="71.0172%" y="223.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="71.0317%" y="197" width="0.3968%" height="15" fill="rgb(215,141,46)" fg:x="537" fg:w="3"/><text x="71.2817%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="71.0317%" y="181" width="0.3968%" height="15" fill="rgb(250,160,47)" fg:x="537" fg:w="3"/><text x="71.2817%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="71.2963%" y="165" width="0.1323%" height="15" fill="rgb(216,222,40)" fg:x="539" fg:w="1"/><text x="71.5463%" y="175.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="71.4286%" y="229" width="0.1323%" height="15" fill="rgb(234,217,39)" fg:x="540" fg:w="1"/><text x="71.6786%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (4 samples, 0.53%)</title><rect x="71.9577%" y="213" width="0.5291%" height="15" fill="rgb(207,178,40)" fg:x="544" fg:w="4"/><text x="72.2077%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.26%)</title><rect x="72.4868%" y="213" width="0.2646%" height="15" fill="rgb(221,136,13)" fg:x="548" fg:w="2"/><text x="72.7368%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (12 samples, 1.59%)</title><rect x="71.5608%" y="229" width="1.5873%" height="15" fill="rgb(249,199,10)" fg:x="541" fg:w="12"/><text x="71.8108%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (3 samples, 0.40%)</title><rect x="72.7513%" y="213" width="0.3968%" height="15" fill="rgb(249,222,13)" fg:x="550" fg:w="3"/><text x="73.0013%" y="223.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="73.6772%" y="213" width="0.1323%" height="15" fill="rgb(244,185,38)" fg:x="557" fg:w="1"/><text x="73.9272%" y="223.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2 samples, 0.26%)</title><rect x="73.8095%" y="213" width="0.2646%" height="15" fill="rgb(236,202,9)" fg:x="558" fg:w="2"/><text x="74.0595%" y="223.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.13%)</title><rect x="73.9418%" y="197" width="0.1323%" height="15" fill="rgb(250,229,37)" fg:x="559" fg:w="1"/><text x="74.1918%" y="207.50"></text></g><g><title>free_tiny (5 samples, 0.66%)</title><rect x="74.0741%" y="213" width="0.6614%" height="15" fill="rgb(206,174,23)" fg:x="560" fg:w="5"/><text x="74.3241%" y="223.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="74.7354%" y="197" width="0.1323%" height="15" fill="rgb(211,33,43)" fg:x="565" fg:w="1"/><text x="74.9854%" y="207.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.79%)</title><rect x="74.7354%" y="213" width="0.7937%" height="15" fill="rgb(245,58,50)" fg:x="565" fg:w="6"/><text x="74.9854%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.66%)</title><rect x="74.8677%" y="197" width="0.6614%" height="15" fill="rgb(244,68,36)" fg:x="566" fg:w="5"/><text x="75.1177%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.26%)</title><rect x="75.2646%" y="181" width="0.2646%" height="15" fill="rgb(232,229,15)" fg:x="569" fg:w="2"/><text x="75.5146%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (2 samples, 0.26%)</title><rect x="75.5291%" y="213" width="0.2646%" height="15" fill="rgb(254,30,23)" fg:x="571" fg:w="2"/><text x="75.7791%" y="223.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.40%)</title><rect x="76.1905%" y="149" width="0.3968%" height="15" fill="rgb(235,160,14)" fg:x="576" fg:w="3"/><text x="76.4405%" y="159.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.13%)</title><rect x="76.9841%" y="133" width="0.1323%" height="15" fill="rgb(212,155,44)" fg:x="582" fg:w="1"/><text x="77.2341%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (37 samples, 4.89%)</title><rect x="73.1481%" y="229" width="4.8942%" height="15" fill="rgb(226,2,50)" fg:x="553" fg:w="37"/><text x="73.3981%" y="239.50">vexy_json_..</text></g><g><title>vexy_json_core::parser::unescape_string (17 samples, 2.25%)</title><rect x="75.7937%" y="213" width="2.2487%" height="15" fill="rgb(234,177,6)" fg:x="573" fg:w="17"/><text x="76.0437%" y="223.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (15 samples, 1.98%)</title><rect x="76.0582%" y="197" width="1.9841%" height="15" fill="rgb(217,24,9)" fg:x="575" fg:w="15"/><text x="76.3082%" y="207.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 1.98%)</title><rect x="76.0582%" y="181" width="1.9841%" height="15" fill="rgb(220,13,46)" fg:x="575" fg:w="15"/><text x="76.3082%" y="191.50">a..</text></g><g><title>szone_malloc_should_clear (14 samples, 1.85%)</title><rect x="76.1905%" y="165" width="1.8519%" height="15" fill="rgb(239,221,27)" fg:x="576" fg:w="14"/><text x="76.4405%" y="175.50">s..</text></g><g><title>tiny_malloc_should_clear (11 samples, 1.46%)</title><rect x="76.5873%" y="149" width="1.4550%" height="15" fill="rgb(222,198,25)" fg:x="579" fg:w="11"/><text x="76.8373%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (7 samples, 0.93%)</title><rect x="77.1164%" y="133" width="0.9259%" height="15" fill="rgb(211,99,13)" fg:x="583" fg:w="7"/><text x="77.3664%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (1 samples, 0.13%)</title><rect x="78.0423%" y="229" width="0.1323%" height="15" fill="rgb(232,111,31)" fg:x="590" fg:w="1"/><text x="78.2923%" y="239.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="78.7037%" y="197" width="0.1323%" height="15" fill="rgb(245,82,37)" fg:x="595" fg:w="1"/><text x="78.9537%" y="207.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.40%)</title><rect x="79.3651%" y="165" width="0.3968%" height="15" fill="rgb(227,149,46)" fg:x="600" fg:w="3"/><text x="79.6151%" y="175.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="80.9524%" y="149" width="0.1323%" height="15" fill="rgb(218,36,50)" fg:x="612" fg:w="1"/><text x="81.2024%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (113 samples, 14.95%)</title><rect x="66.4021%" y="261" width="14.9471%" height="15" fill="rgb(226,80,48)" fg:x="502" fg:w="113"/><text x="66.6521%" y="271.50">vexy_json_core::parser::Par..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (98 samples, 12.96%)</title><rect x="68.3862%" y="245" width="12.9630%" height="15" fill="rgb(238,224,15)" fg:x="517" fg:w="98"/><text x="68.6362%" y="255.50">vexy_json_core::parser:..</text></g><g><title>vexy_json_core::parser::unescape_string (24 samples, 3.17%)</title><rect x="78.1746%" y="229" width="3.1746%" height="15" fill="rgb(241,136,10)" fg:x="591" fg:w="24"/><text x="78.4246%" y="239.50">zzs..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (21 samples, 2.78%)</title><rect x="78.5714%" y="213" width="2.7778%" height="15" fill="rgb(208,32,45)" fg:x="594" fg:w="21"/><text x="78.8214%" y="223.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 2.51%)</title><rect x="78.8360%" y="197" width="2.5132%" height="15" fill="rgb(207,135,9)" fg:x="596" fg:w="19"/><text x="79.0860%" y="207.50">al..</text></g><g><title>szone_malloc_should_clear (18 samples, 2.38%)</title><rect x="78.9683%" y="181" width="2.3810%" height="15" fill="rgb(206,86,44)" fg:x="597" fg:w="18"/><text x="79.2183%" y="191.50">sz..</text></g><g><title>tiny_malloc_should_clear (12 samples, 1.59%)</title><rect x="79.7619%" y="165" width="1.5873%" height="15" fill="rgb(245,177,15)" fg:x="603" fg:w="12"/><text x="80.0119%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.26%)</title><rect x="81.0847%" y="149" width="0.2646%" height="15" fill="rgb(206,64,50)" fg:x="613" fg:w="2"/><text x="81.3347%" y="159.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="81.2169%" y="133" width="0.1323%" height="15" fill="rgb(234,36,40)" fg:x="614" fg:w="1"/><text x="81.4669%" y="143.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.13%)</title><rect x="81.6138%" y="245" width="0.1323%" height="15" fill="rgb(213,64,8)" fg:x="617" fg:w="1"/><text x="81.8638%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (1 samples, 0.13%)</title><rect x="81.6138%" y="229" width="0.1323%" height="15" fill="rgb(210,75,36)" fg:x="617" fg:w="1"/><text x="81.8638%" y="239.50"></text></g><g><title>_tlv_get_addr (1 samples, 0.13%)</title><rect x="81.7460%" y="245" width="0.1323%" height="15" fill="rgb(229,88,21)" fg:x="618" fg:w="1"/><text x="81.9960%" y="255.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.13%)</title><rect x="81.8783%" y="245" width="0.1323%" height="15" fill="rgb(252,204,47)" fg:x="619" fg:w="1"/><text x="82.1283%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.26%)</title><rect x="82.2751%" y="229" width="0.2646%" height="15" fill="rgb(208,77,27)" fg:x="622" fg:w="2"/><text x="82.5251%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.93%)</title><rect x="82.0106%" y="245" width="0.9259%" height="15" fill="rgb(221,76,26)" fg:x="620" fg:w="7"/><text x="82.2606%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.40%)</title><rect x="82.5397%" y="229" width="0.3968%" height="15" fill="rgb(225,139,18)" fg:x="624" fg:w="3"/><text x="82.7897%" y="239.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="82.5397%" y="213" width="0.3968%" height="15" fill="rgb(230,137,11)" fg:x="624" fg:w="3"/><text x="82.7897%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="82.5397%" y="197" width="0.3968%" height="15" fill="rgb(212,28,1)" fg:x="624" fg:w="3"/><text x="82.7897%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="82.8042%" y="181" width="0.1323%" height="15" fill="rgb(248,164,17)" fg:x="626" fg:w="1"/><text x="83.0542%" y="191.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.53%)</title><rect x="82.9365%" y="245" width="0.5291%" height="15" fill="rgb(222,171,42)" fg:x="627" fg:w="4"/><text x="83.1865%" y="255.50"></text></g><g><title>tiny_malloc_should_clear (4 samples, 0.53%)</title><rect x="82.9365%" y="229" width="0.5291%" height="15" fill="rgb(243,84,45)" fg:x="627" fg:w="4"/><text x="83.1865%" y="239.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.40%)</title><rect x="83.0688%" y="213" width="0.3968%" height="15" fill="rgb(252,49,23)" fg:x="628" fg:w="3"/><text x="83.3188%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (8 samples, 1.06%)</title><rect x="83.9947%" y="229" width="1.0582%" height="15" fill="rgb(215,19,7)" fg:x="635" fg:w="8"/><text x="84.2447%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="85.0529%" y="229" width="0.1323%" height="15" fill="rgb(238,81,41)" fg:x="643" fg:w="1"/><text x="85.3029%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (15 samples, 1.98%)</title><rect x="83.4656%" y="245" width="1.9841%" height="15" fill="rgb(210,199,37)" fg:x="631" fg:w="15"/><text x="83.7156%" y="255.50">z..</text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (2 samples, 0.26%)</title><rect x="85.1852%" y="229" width="0.2646%" height="15" fill="rgb(244,192,49)" fg:x="644" fg:w="2"/><text x="85.4352%" y="239.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.13%)</title><rect x="85.7143%" y="229" width="0.1323%" height="15" fill="rgb(226,211,11)" fg:x="648" fg:w="1"/><text x="85.9643%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="85.7143%" y="213" width="0.1323%" height="15" fill="rgb(236,162,54)" fg:x="648" fg:w="1"/><text x="85.9643%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.26%)</title><rect x="85.8466%" y="229" width="0.2646%" height="15" fill="rgb(220,229,9)" fg:x="649" fg:w="2"/><text x="86.0966%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.26%)</title><rect x="85.8466%" y="213" width="0.2646%" height="15" fill="rgb(250,87,22)" fg:x="649" fg:w="2"/><text x="86.0966%" y="223.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.26%)</title><rect x="85.8466%" y="197" width="0.2646%" height="15" fill="rgb(239,43,17)" fg:x="649" fg:w="2"/><text x="86.0966%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.26%)</title><rect x="85.8466%" y="181" width="0.2646%" height="15" fill="rgb(231,177,25)" fg:x="649" fg:w="2"/><text x="86.0966%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="85.9788%" y="165" width="0.1323%" height="15" fill="rgb(219,179,1)" fg:x="650" fg:w="1"/><text x="86.2288%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.13%)</title><rect x="86.2434%" y="213" width="0.1323%" height="15" fill="rgb(238,219,53)" fg:x="652" fg:w="1"/><text x="86.4934%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="86.2434%" y="197" width="0.1323%" height="15" fill="rgb(232,167,36)" fg:x="652" fg:w="1"/><text x="86.4934%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.93%)</title><rect x="86.7725%" y="181" width="0.9259%" height="15" fill="rgb(244,19,51)" fg:x="656" fg:w="7"/><text x="87.0225%" y="191.50"></text></g><g><title>szone_malloc_should_clear (7 samples, 0.93%)</title><rect x="86.7725%" y="165" width="0.9259%" height="15" fill="rgb(224,6,22)" fg:x="656" fg:w="7"/><text x="87.0225%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.79%)</title><rect x="86.9048%" y="149" width="0.7937%" height="15" fill="rgb(224,145,5)" fg:x="657" fg:w="6"/><text x="87.1548%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.26%)</title><rect x="87.4339%" y="133" width="0.2646%" height="15" fill="rgb(234,130,49)" fg:x="661" fg:w="2"/><text x="87.6839%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (18 samples, 2.38%)</title><rect x="85.4497%" y="245" width="2.3810%" height="15" fill="rgb(254,6,2)" fg:x="646" fg:w="18"/><text x="85.6997%" y="255.50">zz..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (13 samples, 1.72%)</title><rect x="86.1111%" y="229" width="1.7196%" height="15" fill="rgb(208,96,46)" fg:x="651" fg:w="13"/><text x="86.3611%" y="239.50"></text></g><g><title>vexy_json_core::parser::unescape_string (11 samples, 1.46%)</title><rect x="86.3757%" y="213" width="1.4550%" height="15" fill="rgb(239,3,39)" fg:x="653" fg:w="11"/><text x="86.6257%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (10 samples, 1.32%)</title><rect x="86.5079%" y="197" width="1.3228%" height="15" fill="rgb(233,210,1)" fg:x="654" fg:w="10"/><text x="86.7579%" y="207.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="87.6984%" y="181" width="0.1323%" height="15" fill="rgb(244,137,37)" fg:x="663" fg:w="1"/><text x="87.9484%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="88.2275%" y="213" width="0.3968%" height="15" fill="rgb(240,136,2)" fg:x="667" fg:w="3"/><text x="88.4775%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.40%)</title><rect x="88.2275%" y="197" width="0.3968%" height="15" fill="rgb(239,18,37)" fg:x="667" fg:w="3"/><text x="88.4775%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="88.6243%" y="197" width="0.1323%" height="15" fill="rgb(218,185,22)" fg:x="670" fg:w="1"/><text x="88.8743%" y="207.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="88.7566%" y="181" width="0.1323%" height="15" fill="rgb(225,218,4)" fg:x="671" fg:w="1"/><text x="89.0066%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 1.06%)</title><rect x="87.9630%" y="229" width="1.0582%" height="15" fill="rgb(230,182,32)" fg:x="665" fg:w="8"/><text x="88.2130%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.40%)</title><rect x="88.6243%" y="213" width="0.3968%" height="15" fill="rgb(242,56,43)" fg:x="670" fg:w="3"/><text x="88.8743%" y="223.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.26%)</title><rect x="88.7566%" y="197" width="0.2646%" height="15" fill="rgb(233,99,24)" fg:x="671" fg:w="2"/><text x="89.0066%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.13%)</title><rect x="88.8889%" y="181" width="0.1323%" height="15" fill="rgb(234,209,42)" fg:x="672" fg:w="1"/><text x="89.1389%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (3 samples, 0.40%)</title><rect x="89.8148%" y="213" width="0.3968%" height="15" fill="rgb(227,7,12)" fg:x="679" fg:w="3"/><text x="90.0648%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (11 samples, 1.46%)</title><rect x="89.0212%" y="229" width="1.4550%" height="15" fill="rgb(245,203,43)" fg:x="673" fg:w="11"/><text x="89.2712%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.26%)</title><rect x="90.2116%" y="213" width="0.2646%" height="15" fill="rgb(238,205,33)" fg:x="682" fg:w="2"/><text x="90.4616%" y="223.50"></text></g><g><title>free_tiny (2 samples, 0.26%)</title><rect x="90.6085%" y="213" width="0.2646%" height="15" fill="rgb(231,56,7)" fg:x="685" fg:w="2"/><text x="90.8585%" y="223.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.26%)</title><rect x="90.8730%" y="213" width="0.2646%" height="15" fill="rgb(244,186,29)" fg:x="687" fg:w="2"/><text x="91.1230%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.26%)</title><rect x="90.8730%" y="197" width="0.2646%" height="15" fill="rgb(234,111,31)" fg:x="687" fg:w="2"/><text x="91.1230%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="91.0053%" y="181" width="0.1323%" height="15" fill="rgb(241,149,10)" fg:x="688" fg:w="1"/><text x="91.2553%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (6 samples, 0.79%)</title><rect x="90.4762%" y="229" width="0.7937%" height="15" fill="rgb(249,206,44)" fg:x="684" fg:w="6"/><text x="90.7262%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.13%)</title><rect x="91.1376%" y="213" width="0.1323%" height="15" fill="rgb(251,153,30)" fg:x="689" fg:w="1"/><text x="91.3876%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (1 samples, 0.13%)</title><rect x="91.2698%" y="229" width="0.1323%" height="15" fill="rgb(239,152,38)" fg:x="690" fg:w="1"/><text x="91.5198%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.13%)</title><rect x="91.2698%" y="213" width="0.1323%" height="15" fill="rgb(249,139,47)" fg:x="690" fg:w="1"/><text x="91.5198%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="91.2698%" y="197" width="0.1323%" height="15" fill="rgb(244,64,35)" fg:x="690" fg:w="1"/><text x="91.5198%" y="207.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="92.1958%" y="197" width="0.1323%" height="15" fill="rgb(216,46,15)" fg:x="697" fg:w="1"/><text x="92.4458%" y="207.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.26%)</title><rect x="92.3280%" y="165" width="0.2646%" height="15" fill="rgb(250,74,19)" fg:x="698" fg:w="2"/><text x="92.5780%" y="175.50"></text></g><g><title>szone_realloc (2 samples, 0.26%)</title><rect x="92.3280%" y="149" width="0.2646%" height="15" fill="rgb(249,42,33)" fg:x="698" fg:w="2"/><text x="92.5780%" y="159.50"></text></g><g><title>szone_size (2 samples, 0.26%)</title><rect x="92.3280%" y="133" width="0.2646%" height="15" fill="rgb(242,149,17)" fg:x="698" fg:w="2"/><text x="92.5780%" y="143.50"></text></g><g><title>tiny_size (2 samples, 0.26%)</title><rect x="92.3280%" y="117" width="0.2646%" height="15" fill="rgb(244,29,21)" fg:x="698" fg:w="2"/><text x="92.5780%" y="127.50"></text></g><g><title>_realloc (4 samples, 0.53%)</title><rect x="92.3280%" y="181" width="0.5291%" height="15" fill="rgb(220,130,37)" fg:x="698" fg:w="4"/><text x="92.5780%" y="191.50"></text></g><g><title>szone_size (2 samples, 0.26%)</title><rect x="92.5926%" y="165" width="0.2646%" height="15" fill="rgb(211,67,2)" fg:x="700" fg:w="2"/><text x="92.8426%" y="175.50"></text></g><g><title>tiny_size (2 samples, 0.26%)</title><rect x="92.5926%" y="149" width="0.2646%" height="15" fill="rgb(235,68,52)" fg:x="700" fg:w="2"/><text x="92.8426%" y="159.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="92.8571%" y="165" width="0.1323%" height="15" fill="rgb(246,142,3)" fg:x="702" fg:w="1"/><text x="93.1071%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (45 samples, 5.95%)</title><rect x="87.8307%" y="245" width="5.9524%" height="15" fill="rgb(241,25,7)" fg:x="664" fg:w="45"/><text x="88.0807%" y="255.50">vexy_json_co..</text></g><g><title>vexy_json_core::parser::unescape_string (18 samples, 2.38%)</title><rect x="91.4021%" y="229" width="2.3810%" height="15" fill="rgb(242,119,39)" fg:x="691" fg:w="18"/><text x="91.6521%" y="239.50">zz..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 1.59%)</title><rect x="92.1958%" y="213" width="1.5873%" height="15" fill="rgb(241,98,45)" fg:x="697" fg:w="12"/><text x="92.4458%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 1.46%)</title><rect x="92.3280%" y="197" width="1.4550%" height="15" fill="rgb(254,28,30)" fg:x="698" fg:w="11"/><text x="92.5780%" y="207.50"></text></g><g><title>szone_malloc_should_clear (7 samples, 0.93%)</title><rect x="92.8571%" y="181" width="0.9259%" height="15" fill="rgb(241,142,54)" fg:x="702" fg:w="7"/><text x="93.1071%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.79%)</title><rect x="92.9894%" y="165" width="0.7937%" height="15" fill="rgb(222,85,15)" fg:x="703" fg:w="6"/><text x="93.2394%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.53%)</title><rect x="93.2540%" y="149" width="0.5291%" height="15" fill="rgb(210,85,47)" fg:x="705" fg:w="4"/><text x="93.5040%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.13%)</title><rect x="93.7831%" y="245" width="0.1323%" height="15" fill="rgb(224,206,25)" fg:x="709" fg:w="1"/><text x="94.0331%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="93.9153%" y="213" width="0.1323%" height="15" fill="rgb(243,201,19)" fg:x="710" fg:w="1"/><text x="94.1653%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.40%)</title><rect x="94.0476%" y="213" width="0.3968%" height="15" fill="rgb(236,59,4)" fg:x="711" fg:w="3"/><text x="94.2976%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (5 samples, 0.66%)</title><rect x="93.9153%" y="245" width="0.6614%" height="15" fill="rgb(254,179,45)" fg:x="710" fg:w="5"/><text x="94.1653%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (5 samples, 0.66%)</title><rect x="93.9153%" y="229" width="0.6614%" height="15" fill="rgb(226,14,10)" fg:x="710" fg:w="5"/><text x="94.1653%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="94.4444%" y="213" width="0.1323%" height="15" fill="rgb(244,27,41)" fg:x="714" fg:w="1"/><text x="94.6944%" y="223.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.13%)</title><rect x="95.1058%" y="181" width="0.1323%" height="15" fill="rgb(235,35,32)" fg:x="719" fg:w="1"/><text x="95.3558%" y="191.50"></text></g><g><title>_realloc (3 samples, 0.40%)</title><rect x="95.1058%" y="197" width="0.3968%" height="15" fill="rgb(218,68,31)" fg:x="719" fg:w="3"/><text x="95.3558%" y="207.50"></text></g><g><title>szone_size (2 samples, 0.26%)</title><rect x="95.2381%" y="181" width="0.2646%" height="15" fill="rgb(207,120,37)" fg:x="720" fg:w="2"/><text x="95.4881%" y="191.50"></text></g><g><title>tiny_size (2 samples, 0.26%)</title><rect x="95.2381%" y="165" width="0.2646%" height="15" fill="rgb(227,98,0)" fg:x="720" fg:w="2"/><text x="95.4881%" y="175.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="95.6349%" y="181" width="0.1323%" height="15" fill="rgb(207,7,3)" fg:x="723" fg:w="1"/><text x="95.8849%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (115 samples, 15.21%)</title><rect x="81.3492%" y="261" width="15.2116%" height="15" fill="rgb(206,98,19)" fg:x="615" fg:w="115"/><text x="81.5992%" y="271.50">vexy_json_core::parser::Par..</text></g><g><title>vexy_json_core::parser::unescape_string (15 samples, 1.98%)</title><rect x="94.5767%" y="245" width="1.9841%" height="15" fill="rgb(217,5,26)" fg:x="715" fg:w="15"/><text x="94.8267%" y="255.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 1.59%)</title><rect x="94.9735%" y="229" width="1.5873%" height="15" fill="rgb(235,190,38)" fg:x="718" fg:w="12"/><text x="95.2235%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 1.59%)</title><rect x="94.9735%" y="213" width="1.5873%" height="15" fill="rgb(247,86,24)" fg:x="718" fg:w="12"/><text x="95.2235%" y="223.50"></text></g><g><title>szone_malloc_should_clear (8 samples, 1.06%)</title><rect x="95.5026%" y="197" width="1.0582%" height="15" fill="rgb(205,101,16)" fg:x="722" fg:w="8"/><text x="95.7526%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.79%)</title><rect x="95.7672%" y="181" width="0.7937%" height="15" fill="rgb(246,168,33)" fg:x="724" fg:w="6"/><text x="96.0172%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.66%)</title><rect x="95.8995%" y="165" width="0.6614%" height="15" fill="rgb(231,114,1)" fg:x="725" fg:w="5"/><text x="96.1495%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="96.5608%" y="229" width="0.1323%" height="15" fill="rgb(207,184,53)" fg:x="730" fg:w="1"/><text x="96.8108%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="96.6931%" y="229" width="0.1323%" height="15" fill="rgb(224,95,51)" fg:x="731" fg:w="1"/><text x="96.9431%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (3 samples, 0.40%)</title><rect x="96.5608%" y="261" width="0.3968%" height="15" fill="rgb(212,188,45)" fg:x="730" fg:w="3"/><text x="96.8108%" y="271.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.40%)</title><rect x="96.5608%" y="245" width="0.3968%" height="15" fill="rgb(223,154,38)" fg:x="730" fg:w="3"/><text x="96.8108%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="96.8254%" y="229" width="0.1323%" height="15" fill="rgb(251,22,52)" fg:x="732" fg:w="1"/><text x="97.0754%" y="239.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.26%)</title><rect x="97.2222%" y="229" width="0.2646%" height="15" fill="rgb(229,209,22)" fg:x="735" fg:w="2"/><text x="97.4722%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (265 samples, 35.05%)</title><rect x="63.8889%" y="277" width="35.0529%" height="15" fill="rgb(234,138,34)" fg:x="483" fg:w="265"/><text x="64.1389%" y="287.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (15 samples, 1.98%)</title><rect x="96.9577%" y="261" width="1.9841%" height="15" fill="rgb(212,95,11)" fg:x="733" fg:w="15"/><text x="97.2077%" y="271.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 1.72%)</title><rect x="97.2222%" y="245" width="1.7196%" height="15" fill="rgb(240,179,47)" fg:x="735" fg:w="13"/><text x="97.4722%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 1.46%)</title><rect x="97.4868%" y="229" width="1.4550%" height="15" fill="rgb(240,163,11)" fg:x="737" fg:w="11"/><text x="97.7368%" y="239.50"></text></g><g><title>szone_malloc_should_clear (8 samples, 1.06%)</title><rect x="97.8836%" y="213" width="1.0582%" height="15" fill="rgb(236,37,12)" fg:x="740" fg:w="8"/><text x="98.1336%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (7 samples, 0.93%)</title><rect x="98.0159%" y="197" width="0.9259%" height="15" fill="rgb(232,164,16)" fg:x="741" fg:w="7"/><text x="98.2659%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.40%)</title><rect x="98.5450%" y="181" width="0.3968%" height="15" fill="rgb(244,205,15)" fg:x="745" fg:w="3"/><text x="98.7950%" y="191.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="98.8095%" y="165" width="0.1323%" height="15" fill="rgb(223,117,47)" fg:x="747" fg:w="1"/><text x="99.0595%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.13%)</title><rect x="98.9418%" y="277" width="0.1323%" height="15" fill="rgb(244,107,35)" fg:x="748" fg:w="1"/><text x="99.1918%" y="287.50"></text></g><g><title>_realloc (2 samples, 0.26%)</title><rect x="99.3386%" y="229" width="0.2646%" height="15" fill="rgb(205,140,8)" fg:x="751" fg:w="2"/><text x="99.5886%" y="239.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.26%)</title><rect x="99.3386%" y="213" width="0.2646%" height="15" fill="rgb(228,84,46)" fg:x="751" fg:w="2"/><text x="99.5886%" y="223.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="99.6032%" y="213" width="0.1323%" height="15" fill="rgb(254,188,9)" fg:x="753" fg:w="1"/><text x="99.8532%" y="223.50"></text></g><g><title>all (756 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(206,112,54)" fg:x="0" fg:w="756"/><text x="0.2500%" y="447.50"></text></g><g><title>start (756 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(216,84,49)" fg:x="0" fg:w="756"/><text x="0.2500%" y="431.50">start</text></g><g><title>main (749 samples, 99.07%)</title><rect x="0.9259%" y="405" width="99.0741%" height="15" fill="rgb(214,194,35)" fg:x="7" fg:w="749"/><text x="1.1759%" y="415.50">main</text></g><g><title>std::rt::lang_start_internal (749 samples, 99.07%)</title><rect x="0.9259%" y="389" width="99.0741%" height="15" fill="rgb(249,28,3)" fg:x="7" fg:w="749"/><text x="1.1759%" y="399.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (748 samples, 98.94%)</title><rect x="1.0582%" y="373" width="98.9418%" height="15" fill="rgb(222,56,52)" fg:x="8" fg:w="748"/><text x="1.3082%" y="383.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (748 samples, 98.94%)</title><rect x="1.0582%" y="357" width="98.9418%" height="15" fill="rgb(245,217,50)" fg:x="8" fg:w="748"/><text x="1.3082%" y="367.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>profile_parser::main (748 samples, 98.94%)</title><rect x="1.0582%" y="341" width="98.9418%" height="15" fill="rgb(213,201,24)" fg:x="8" fg:w="748"/><text x="1.3082%" y="351.50">profile_parser::main</text></g><g><title>vexy_json_core::parser::parse (560 samples, 74.07%)</title><rect x="25.9259%" y="325" width="74.0741%" height="15" fill="rgb(248,116,28)" fg:x="196" fg:w="560"/><text x="26.1759%" y="335.50">vexy_json_core::parser::parse</text></g><g><title>vexy_json_core::parser::Parser::parse (560 samples, 74.07%)</title><rect x="25.9259%" y="309" width="74.0741%" height="15" fill="rgb(219,72,43)" fg:x="196" fg:w="560"/><text x="26.1759%" y="319.50">vexy_json_core::parser::Parser::parse</text></g><g><title>vexy_json_core::parser::Parser::parse_value (288 samples, 38.10%)</title><rect x="61.9048%" y="293" width="38.0952%" height="15" fill="rgb(209,138,14)" fg:x="468" fg:w="288"/><text x="62.1548%" y="303.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (7 samples, 0.93%)</title><rect x="99.0741%" y="277" width="0.9259%" height="15" fill="rgb(222,18,33)" fg:x="749" fg:w="7"/><text x="99.3241%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.66%)</title><rect x="99.3386%" y="261" width="0.6614%" height="15" fill="rgb(213,199,7)" fg:x="751" fg:w="5"/><text x="99.5886%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.66%)</title><rect x="99.3386%" y="245" width="0.6614%" height="15" fill="rgb(250,110,10)" fg:x="751" fg:w="5"/><text x="99.5886%" y="255.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="99.6032%" y="229" width="0.3968%" height="15" fill="rgb(248,123,6)" fg:x="753" fg:w="3"/><text x="99.8532%" y="239.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.26%)</title><rect x="99.7354%" y="213" width="0.2646%" height="15" fill="rgb(206,91,31)" fg:x="754" fg:w="2"/><text x="99.9854%" y="223.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="99.8677%" y="197" width="0.1323%" height="15" fill="rgb(211,154,13)" fg:x="755" fg:w="1"/><text x="100.1177%" y="207.50"></text></g></svg></svg>
llms.txt---
llms.txt:debug_test6.rs:use vexy_json::parse;
llms.txt-debug_test6.rs-
llms.txt-debug_test6.rs-fn main() {
llms.txt-debug_test6.rs-    // Test the pattern step by step
--
llms.txt-scripts/release.sh-    run_cmd "mkdir -p '$BUILD_DIR'" "Create build directory"
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Build release binary
llms.txt:scripts/release.sh:    run_cmd "cargo build --release --bin vexy_json" "Build release CLI binary"
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Build library
llms.txt-scripts/release.sh-    run_cmd "cargo build --release --lib" "Build release library"
--
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Copy artifacts
llms.txt-scripts/release.sh-    if [ "$DRY_RUN" = false ]; then
llms.txt:scripts/release.sh:        if [[ -f "target/release/vexy_json" ]]; then
llms.txt:scripts/release.sh:            cp "target/release/vexy_json" "$BUILD_DIR/vexy_json-$VERSION-$(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]')"
llms.txt-scripts/release.sh-        else
llms.txt:scripts/release.sh:            warning "Release binary not found at target/release/vexy_json"
llms.txt-scripts/release.sh-        fi
llms.txt-scripts/release.sh-    fi
llms.txt-scripts/release.sh-    
--
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    log "Building macOS installer..."
llms.txt-scripts/release.sh-    
llms.txt:scripts/release.sh:    local app_name="vexy_json"
llms.txt-scripts/release.sh-    local installer_dir="$BUILD_DIR/macos-installer"
llms.txt:scripts/release.sh:    local dmg_name="vexy_json-$VERSION-macos.dmg"
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    run_cmd "mkdir -p '$installer_dir/pkg-root/usr/local/bin'" "Create installer structure"
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Copy binary
llms.txt-scripts/release.sh-    if [ "$DRY_RUN" = false ]; then
llms.txt:scripts/release.sh:        cp "target/release/vexy_json" "$installer_dir/pkg-root/usr/local/bin/"
llms.txt-scripts/release.sh-    fi
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Create package
llms.txt:scripts/release.sh:    run_cmd "pkgbuild --root '$installer_dir/pkg-root' --identifier 'com.twardoch.vexy_json' --version '$VERSION' --install-location '/' '$installer_dir/$app_name.pkg'" "Create pkg installer"
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Create DMG
llms.txt-scripts/release.sh-    local dmg_temp_dir="$installer_dir/dmg-temp"
--
llms.txt-scripts/release.sh-        cat > "$dmg_temp_dir/README.txt" << EOF
llms.txt-scripts/release.sh-VEXY_JSON v$VERSION
llms.txt-scripts/release.sh-
llms.txt:scripts/release.sh:This package will install the vexy_json command-line tool to /usr/local/bin.
llms.txt-scripts/release.sh-
llms.txt:scripts/release.sh:After installation, you can use vexy_json from the command line:
llms.txt:scripts/release.sh:  echo '{"key": "value"}' | vexy_json
llms.txt-scripts/release.sh-
llms.txt:scripts/release.sh:For more information, visit: https://github.com/twardoch/vexy_json
llms.txt-scripts/release.sh-EOF
llms.txt-scripts/release.sh-    fi
llms.txt-scripts/release.sh-    
--
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Build static binary for Linux
llms.txt-scripts/release.sh-    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
llms.txt:scripts/release.sh:        run_cmd "cargo build --release --target x86_64-unknown-linux-musl --bin vexy_json" "Build static Linux binary"
llms.txt-scripts/release.sh-        
llms.txt-scripts/release.sh-        if [ "$DRY_RUN" = false ]; then
llms.txt:scripts/release.sh:            cp "target/x86_64-unknown-linux-musl/release/vexy_json" "$BUILD_DIR/vexy_json-$VERSION-x86_64-linux-musl"
llms.txt-scripts/release.sh-        fi
llms.txt-scripts/release.sh-    else
llms.txt-scripts/release.sh-        warning "Skipping Linux builds (not on Linux)"
--
llms.txt-scripts/release.sh-create_release_archive() {
llms.txt-scripts/release.sh-    log "Creating release archives..."
llms.txt-scripts/release.sh-    
llms.txt:scripts/release.sh:    local archive_dir="$BUILD_DIR/vexy_json-$VERSION"
llms.txt-scripts/release.sh-    run_cmd "mkdir -p '$archive_dir'" "Create archive directory"
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    if [ "$DRY_RUN" = false ]; then
--
llms.txt-scripts/release.sh-        done
llms.txt-scripts/release.sh-        
llms.txt-scripts/release.sh-        # Copy built artifacts
llms.txt:scripts/release.sh:        if [[ -f "target/release/vexy_json" ]]; then
llms.txt:scripts/release.sh:            cp "target/release/vexy_json" "$archive_dir/" || warning "Failed to copy binary"
llms.txt-scripts/release.sh-        else
llms.txt-scripts/release.sh-            warning "No release binary found to include in archive"
llms.txt-scripts/release.sh-        fi
llms.txt-scripts/release.sh-        
llms.txt-scripts/release.sh-        # Create source archive
llms.txt:scripts/release.sh:        git archive --format=tar.gz --prefix="vexy_json-$VERSION-src/" HEAD > "$BUILD_DIR/vexy_json-$VERSION-src.tar.gz" || {
llms.txt-scripts/release.sh-            warning "Failed to create source archive"
llms.txt-scripts/release.sh-        }
llms.txt-scripts/release.sh-        
llms.txt-scripts/release.sh-        # Create binary archive if we have files
llms.txt-scripts/release.sh-        if [[ -d "$archive_dir" ]] && [[ -n $(ls -A "$archive_dir") ]]; then
llms.txt-scripts/release.sh-            cd "$BUILD_DIR"
llms.txt:scripts/release.sh:            tar -czf "vexy_json-$VERSION-$(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]').tar.gz" "vexy_json-$VERSION" || {
llms.txt-scripts/release.sh-                warning "Failed to create binary archive"
llms.txt-scripts/release.sh-            }
llms.txt-scripts/release.sh-            cd "$PROJECT_ROOT"
--
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    if ! command -v gh &> /dev/null; then
llms.txt-scripts/release.sh-        warning "GitHub CLI not found, skipping automated release creation"
llms.txt:scripts/release.sh:        info "Manually create release at: https://github.com/twardoch/vexy_json/releases/new?tag=v$VERSION"
llms.txt-scripts/release.sh-        return 0
llms.txt-scripts/release.sh-    fi
llms.txt-scripts/release.sh-    
--
llms.txt-scripts/release.sh-## 📦 Installation
llms.txt-scripts/release.sh-
llms.txt-scripts/release.sh-```bash
llms.txt:scripts/release.sh:cargo install vexy_json --version 2.0.0
llms.txt-scripts/release.sh-```
llms.txt-scripts/release.sh-
llms.txt-scripts/release.sh-Or download pre-built binaries from the assets below.
llms.txt-scripts/release.sh-
llms.txt-scripts/release.sh----
llms.txt-scripts/release.sh-
llms.txt:scripts/release.sh:**Full Changelog**: https://github.com/twardoch/vexy_json/compare/v1.5.27...v2.0.0
llms.txt-scripts/release.sh-EOF
llms.txt-scripts/release.sh-    fi
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Collect assets
llms.txt-scripts/release.sh-    local assets=()
llms.txt:scripts/release.sh:    if [[ -f "$BUILD_DIR/vexy_json-$VERSION-macos.dmg" ]]; then
llms.txt:scripts/release.sh:        assets+=("$BUILD_DIR/vexy_json-$VERSION-macos.dmg")
llms.txt-scripts/release.sh-    fi
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Find all tar.gz files
--
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    warning "Crates.io publishing requires manual intervention"
llms.txt-scripts/release.sh-    info "Run the following commands to publish:"
llms.txt:scripts/release.sh:    info "  cargo publish -p vexy_json-test-utils"
llms.txt:scripts/release.sh:    info "  cargo publish -p vexy_json-core"
llms.txt:scripts/release.sh:    info "  cargo publish -p vexy_json-serde"
llms.txt:scripts/release.sh:    info "  cargo publish -p vexy_json-cli"
llms.txt:scripts/release.sh:    info "  cargo publish -p vexy_json-wasm"
llms.txt:scripts/release.sh:    info "  cargo publish -p vexy_json-c-api"
llms.txt:scripts/release.sh:    info "  cargo publish -p vexy_json"
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    if [ "$DRY_RUN" = false ]; then
llms.txt-scripts/release.sh-        read -p "Publish to crates.io now? (y/N): " -n 1 -r
llms.txt-scripts/release.sh-        echo
llms.txt-scripts/release.sh-        if [[ $REPLY =~ ^[Yy]$ ]]; then
llms.txt-scripts/release.sh-            # Publish in dependency order
llms.txt:scripts/release.sh:            run_cmd "cargo publish -p vexy_json-test-utils" "Publish vexy_json-test-utils"
llms.txt-scripts/release.sh-            sleep 10  # Wait for crates.io to process
llms.txt:scripts/release.sh:            run_cmd "cargo publish -p vexy_json-core" "Publish vexy_json-core"
llms.txt-scripts/release.sh-            sleep 10
llms.txt:scripts/release.sh:            run_cmd "cargo publish -p vexy_json-serde" "Publish vexy_json-serde"
llms.txt-scripts/release.sh-            sleep 10
llms.txt:scripts/release.sh:            run_cmd "cargo publish -p vexy_json-cli" "Publish vexy_json-cli"
llms.txt-scripts/release.sh-            sleep 10
llms.txt:scripts/release.sh:            run_cmd "cargo publish -p vexy_json-wasm" "Publish vexy_json-wasm"
llms.txt-scripts/release.sh-            sleep 10
llms.txt:scripts/release.sh:            run_cmd "cargo publish -p vexy_json-c-api" "Publish vexy_json-c-api"
llms.txt-scripts/release.sh-            sleep 10
llms.txt:scripts/release.sh:            run_cmd "cargo publish -p vexy_json" "Publish main vexy_json crate"
llms.txt-scripts/release.sh-            
llms.txt-scripts/release.sh-            success "All crates published to crates.io"
llms.txt-scripts/release.sh-        fi
--
llms.txt-scripts/release.sh-    echo -e "${BLUE}Release artifacts created in: $BUILD_DIR${NC}"
llms.txt-scripts/release.sh-    echo -e "${BLUE}Git tag created and pushed: v$VERSION${NC}"
llms.txt-scripts/release.sh-    echo -e "${BLUE}Next steps:${NC}"
llms.txt:scripts/release.sh:    echo "  1. Verify GitHub release: https://github.com/twardoch/vexy_json/releases"
llms.txt-scripts/release.sh-    echo "  2. Update documentation websites"
llms.txt-scripts/release.sh-    echo "  3. Announce the release"
llms.txt-scripts/release.sh-    echo
llms.txt---
llms.txt:docs/assets/css/enhanced-features.css:/* Enhanced features for vexy_json tool */
llms.txt-docs/assets/css/enhanced-features.css-
llms.txt-docs/assets/css/enhanced-features.css-/* WASM loading animations */
llms.txt-docs/assets/css/enhanced-features.css-.loading-fade {
llms.txt---
llms.txt-docs/release-process.md-# Release Process
llms.txt-docs/release-process.md-
llms.txt:docs/release-process.md:This document describes the automated release process for vexy_json.
llms.txt-docs/release-process.md-
llms.txt-docs/release-process.md-## Overview
llms.txt-docs/release-process.md-
--
llms.txt-docs/release-process.md-
llms.txt-docs/release-process.md-1. Delete the release from GitHub
llms.txt-docs/release-process.md-2. Yank the version from crates.io: `cargo yank --version 1.2.0`
llms.txt:docs/release-process.md:3. Unpublish from npm (within 72 hours): `npm unpublish @vexy_json/vexy_json@1.2.0`
llms.txt-docs/release-process.md-4. Delete the git tag: `git push --delete origin v1.2.0`
llms.txt-docs/release-process.md-
llms.txt-docs/release-process.md-## Troubleshooting
llms.txt---
llms.txt:examples/debug_comma_one.rs:use vexy_json::parse;
llms.txt-examples/debug_comma_one.rs-
llms.txt-examples/debug_comma_one.rs-fn main() {
llms.txt-examples/debug_comma_one.rs-    println!("Testing: \",1\"");
llms.txt---
llms.txt-tests/feature_tests.rs-// this_file: tests/feature_tests.rs
llms.txt-tests/feature_tests.rs-
llms.txt:tests/feature_tests.rs:use vexy_json::{parse, Value};
llms.txt-tests/feature_tests.rs-
llms.txt-tests/feature_tests.rs-/// Test basic JSON compliance - standard JSON parsing capabilities
llms.txt-tests/feature_tests.rs-#[test]
--
llms.txt-tests/feature_tests.rs-        total,
llms.txt-tests/feature_tests.rs-        (supported as f64 / total as f64) * 100.0
llms.txt-tests/feature_tests.rs-    );
llms.txt:tests/feature_tests.rs:    println!("✓ vexy_json demonstrates comprehensive JSON parsing capabilities");
llms.txt-tests/feature_tests.rs-
llms.txt-tests/feature_tests.rs-    // Verify we have reasonable feature coverage
llms.txt-tests/feature_tests.rs-    let coverage_percentage = (supported as f64 / total as f64) * 100.0;
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
llms.txt-scripts/cross-platform/build-macos-installer.sh-VERSION="${VERSION:-$(grep '^version' "$PROJECT_ROOT/Cargo.toml" | head -1 | cut -d'"' -f2)}"
llms.txt-scripts/cross-platform/build-macos-installer.sh-BUILD_DIR="$PROJECT_ROOT/target/macos-installer"
llms.txt:scripts/cross-platform/build-macos-installer.sh:APP_NAME="vexy_json"
llms.txt:scripts/cross-platform/build-macos-installer.sh:BUNDLE_ID="com.twardoch.vexy_json"
llms.txt:scripts/cross-platform/build-macos-installer.sh:DMG_NAME="vexy_json-$VERSION-macos.dmg"
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-# Utility functions
llms.txt-scripts/cross-platform/build-macos-installer.sh-log() {
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Build for Intel
llms.txt-scripts/cross-platform/build-macos-installer.sh-    log "Building for Intel (x86_64)..."
llms.txt:scripts/cross-platform/build-macos-installer.sh:    cargo build --release --bin vexy_json --target x86_64-apple-darwin
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Build for Apple Silicon
llms.txt-scripts/cross-platform/build-macos-installer.sh-    log "Building for Apple Silicon (aarch64)..."
llms.txt:scripts/cross-platform/build-macos-installer.sh:    cargo build --release --bin vexy_json --target aarch64-apple-darwin
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Create universal binary
llms.txt-scripts/cross-platform/build-macos-installer.sh-    log "Creating universal binary..."
llms.txt-scripts/cross-platform/build-macos-installer.sh-    mkdir -p "$PROJECT_ROOT/target/release"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    lipo -create -output "$PROJECT_ROOT/target/release/vexy_json" \
llms.txt:scripts/cross-platform/build-macos-installer.sh:        "$PROJECT_ROOT/target/x86_64-apple-darwin/release/vexy_json" \
llms.txt:scripts/cross-platform/build-macos-installer.sh:        "$PROJECT_ROOT/target/aarch64-apple-darwin/release/vexy_json"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Verify the universal binary
llms.txt:scripts/cross-platform/build-macos-installer.sh:    if lipo -info "$PROJECT_ROOT/target/release/vexy_json" | grep -q "x86_64 arm64"; then
llms.txt-scripts/cross-platform/build-macos-installer.sh-        success "Universal binary created successfully"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    else
llms.txt-scripts/cross-platform/build-macos-installer.sh-        error "Failed to create universal binary"
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-    mkdir -p "$pkg_root/usr/local/bin"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Copy the universal binary
llms.txt:scripts/cross-platform/build-macos-installer.sh:    cp "$PROJECT_ROOT/target/release/vexy_json" "$pkg_root/usr/local/bin/"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    chmod +x "$pkg_root/usr/local/bin/vexy_json"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Create scripts directory for pre/post install scripts
llms.txt-scripts/cross-platform/build-macos-installer.sh-    mkdir -p "$BUILD_DIR/scripts"
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-done
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-# Verify installation
llms.txt:scripts/cross-platform/build-macos-installer.sh:if command -v vexy_json &> /dev/null; then
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo "Vexy JSON installed successfully!"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    echo "Version: $(vexy_json --version 2>/dev/null || echo 'Unknown')"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    echo "You may need to restart your terminal or run 'source ~/.bashrc' (or similar) to use vexy_json."
llms.txt-scripts/cross-platform/build-macos-installer.sh-else
llms.txt:scripts/cross-platform/build-macos-installer.sh:    echo "Installation completed, but vexy_json may not be in your PATH."
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo "Try restarting your terminal or adding /usr/local/bin to your PATH."
llms.txt-scripts/cross-platform/build-macos-installer.sh-fi
llms.txt-scripts/cross-platform/build-macos-installer.sh-
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-    cat > "$dmg_temp_dir/README.txt" << EOF
llms.txt-scripts/cross-platform/build-macos-installer.sh-VEXY_JSON v$VERSION - High-Performance JSON Parser
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt:scripts/cross-platform/build-macos-installer.sh:This installer will install the vexy_json command-line tool to /usr/local/bin.
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-Installation Instructions:
llms.txt:scripts/cross-platform/build-macos-installer.sh:1. Double-click on vexy_json.pkg to run the installer
llms.txt-scripts/cross-platform/build-macos-installer.sh-2. Follow the installation prompts
llms.txt-scripts/cross-platform/build-macos-installer.sh-3. Restart your terminal or run 'source ~/.bashrc' to update your PATH
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt:scripts/cross-platform/build-macos-installer.sh:After installation, you can use vexy_json from the command line:
llms.txt:scripts/cross-platform/build-macos-installer.sh:  echo '{"key": "value"}' | vexy_json
llms.txt:scripts/cross-platform/build-macos-installer.sh:  vexy_json --help
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-Features:
llms.txt-scripts/cross-platform/build-macos-installer.sh-• SIMD-accelerated parsing (2-3x faster)
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-• Enhanced error recovery with suggestions
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-For more information:
llms.txt:scripts/cross-platform/build-macos-installer.sh:  Website: https://github.com/twardoch/vexy_json
llms.txt:scripts/cross-platform/build-macos-installer.sh:  Documentation: https://twardoch.github.io/vexy_json/
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-License: MIT OR Apache-2.0
llms.txt-scripts/cross-platform/build-macos-installer.sh-EOF
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-        log "DMG size: $dmg_size"
llms.txt-scripts/cross-platform/build-macos-installer.sh-        
llms.txt-scripts/cross-platform/build-macos-installer.sh-        # Verify DMG can be mounted
llms.txt:scripts/cross-platform/build-macos-installer.sh:        if hdiutil attach "$final_dmg" -readonly -nobrowse -mountpoint "/tmp/vexy_json-verify-$$"; then
llms.txt-scripts/cross-platform/build-macos-installer.sh-            log "DMG verification: mountable ✓"
llms.txt:scripts/cross-platform/build-macos-installer.sh:            hdiutil detach "/tmp/vexy_json-verify-$$" || true
llms.txt-scripts/cross-platform/build-macos-installer.sh-        else
llms.txt-scripts/cross-platform/build-macos-installer.sh-            warning "DMG verification failed - may not be mountable"
llms.txt-scripts/cross-platform/build-macos-installer.sh-        fi
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-    log "Creating ZIP alternative..."
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    local zip_dir="$BUILD_DIR/zip-package"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    local zip_file="$PROJECT_ROOT/vexy_json-$VERSION-macos.zip"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    mkdir -p "$zip_dir"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Copy binary
llms.txt:scripts/cross-platform/build-macos-installer.sh:    cp "$PROJECT_ROOT/target/release/vexy_json" "$zip_dir/"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Create installation script
llms.txt-scripts/cross-platform/build-macos-installer.sh-    cat > "$zip_dir/install.sh" << 'EOF'
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-# Check if we have write permissions
llms.txt-scripts/cross-platform/build-macos-installer.sh-if [[ ! -w "/usr/local/bin" ]]; then
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo "Note: You may be prompted for your password to install to /usr/local/bin"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    sudo cp vexy_json /usr/local/bin/
llms.txt:scripts/cross-platform/build-macos-installer.sh:    sudo chmod +x /usr/local/bin/vexy_json
llms.txt-scripts/cross-platform/build-macos-installer.sh-else
llms.txt:scripts/cross-platform/build-macos-installer.sh:    cp vexy_json /usr/local/bin/
llms.txt:scripts/cross-platform/build-macos-installer.sh:    chmod +x /usr/local/bin/vexy_json
llms.txt-scripts/cross-platform/build-macos-installer.sh-fi
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-echo "Vexy JSON installed successfully!"
llms.txt:scripts/cross-platform/build-macos-installer.sh:echo "Try: vexy_json --help"
llms.txt-scripts/cross-platform/build-macos-installer.sh-EOF
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    chmod +x "$zip_dir/install.sh"
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-    cat > "$zip_dir/README.txt" << EOF
llms.txt-scripts/cross-platform/build-macos-installer.sh-VEXY_JSON v$VERSION - Simple ZIP Installation
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt:scripts/cross-platform/build-macos-installer.sh:This is a simple ZIP package containing the vexy_json binary.
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-Installation:
llms.txt-scripts/cross-platform/build-macos-installer.sh-1. Run: ./install.sh
llms.txt-scripts/cross-platform/build-macos-installer.sh-   OR
llms.txt:scripts/cross-platform/build-macos-installer.sh:2. Manually copy 'vexy_json' to a directory in your PATH
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-Usage:
llms.txt:scripts/cross-platform/build-macos-installer.sh:  echo '{"key": "value"}' | vexy_json
llms.txt:scripts/cross-platform/build-macos-installer.sh:  vexy_json --help
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-For the full installer experience, download the .dmg file instead.
llms.txt-scripts/cross-platform/build-macos-installer.sh-EOF
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-    log "Verifying installation components..."
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Check if binary works
llms.txt:scripts/cross-platform/build-macos-installer.sh:    if "$PROJECT_ROOT/target/release/vexy_json" --version &> /dev/null; then
llms.txt-scripts/cross-platform/build-macos-installer.sh-        success "Binary verification: working ✓"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    else
llms.txt-scripts/cross-platform/build-macos-installer.sh-        error "Binary verification failed"
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-    fi
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Check package contents
llms.txt:scripts/cross-platform/build-macos-installer.sh:    if pkgutil --payload-files "$BUILD_DIR/$APP_NAME.pkg" | grep -q "usr/local/bin/vexy_json"; then
llms.txt-scripts/cross-platform/build-macos-installer.sh-        success "Package verification: contains binary ✓"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    else
llms.txt-scripts/cross-platform/build-macos-installer.sh-        error "Package verification failed"
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo -e "${BLUE}Generated files:${NC}"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo "  📦 DMG Installer: $DMG_NAME"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    if [[ -f "$PROJECT_ROOT/vexy_json-$VERSION-macos.zip" ]]; then
llms.txt:scripts/cross-platform/build-macos-installer.sh:        echo "  📁 ZIP Package: vexy_json-$VERSION-macos.zip"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    fi
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo "  🔧 PKG Installer: $BUILD_DIR/$APP_NAME.pkg"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    echo "  🔨 Universal Binary: $PROJECT_ROOT/target/release/vexy_json"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo -e "${BLUE}Installation instructions for users:${NC}"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo "  1. Download and open $DMG_NAME"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    echo "  2. Double-click vexy_json.pkg to install"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo "  3. Follow the installer prompts"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo "  4. Restart terminal or run 'source ~/.bashrc'"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo -e "${BLUE}Binary details:${NC}"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    lipo -info "$PROJECT_ROOT/target/release/vexy_json" | sed 's/^/  /'
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo -e "${BLUE}Next steps:${NC}"
--
llms.txt-tests/property_tests.rs-// this_file: tests/property_tests.rs
llms.txt-tests/property_tests.rs-
llms.txt-tests/property_tests.rs-use proptest::prelude::*;
llms.txt:tests/property_tests.rs:use vexy_json::{parse, Number, Value};
llms.txt-tests/property_tests.rs-use quickcheck::{Arbitrary, Gen, QuickCheck, TestResult};
llms.txt-tests/property_tests.rs-use quickcheck_macros::quickcheck;
llms.txt:tests/property_tests.rs:use vexy_json_core::{parse_with_options, ParserOptions};
llms.txt-tests/property_tests.rs-use rustc_hash::FxHashMap;
llms.txt:tests/property_tests.rs:// use vexy_json_core::streaming::{JsonEventHandler, parse_streaming, StreamingEvent};
llms.txt-tests/property_tests.rs-
llms.txt-tests/property_tests.rs-// A strategy for generating simple JSON strings
llms.txt-tests/property_tests.rs-fn simple_string_strategy() -> impl Strategy<Value = String> {
--
llms.txt-tests/property_tests.rs-// }
llms.txt-tests/property_tests.rs-// 
llms.txt-tests/property_tests.rs-// impl JsonEventHandler for EventCollector {
llms.txt:tests/property_tests.rs://     fn on_object_start(&mut self) -> Result<(), vexy_json_core::error::Error> {
llms.txt-tests/property_tests.rs-//         self.events.push("object_start".to_string());
llms.txt-tests/property_tests.rs-//         Ok(())
llms.txt-tests/property_tests.rs-//     }
llms.txt-tests/property_tests.rs-//     
llms.txt:tests/property_tests.rs://     fn on_object_end(&mut self) -> Result<(), vexy_json_core::error::Error> {
llms.txt-tests/property_tests.rs-//         self.events.push("object_end".to_string());
llms.txt-tests/property_tests.rs-//         Ok(())
llms.txt-tests/property_tests.rs-//     }
llms.txt-tests/property_tests.rs-//     
llms.txt:tests/property_tests.rs://     fn on_array_start(&mut self) -> Result<(), vexy_json_core::error::Error> {
llms.txt-tests/property_tests.rs-//         self.events.push("array_start".to_string());
llms.txt-tests/property_tests.rs-//         Ok(())
llms.txt-tests/property_tests.rs-//     }
llms.txt-tests/property_tests.rs-//     
llms.txt:tests/property_tests.rs://     fn on_array_end(&mut self) -> Result<(), vexy_json_core::error::Error> {
llms.txt-tests/property_tests.rs-//         self.events.push("array_end".to_string());
llms.txt-tests/property_tests.rs-//         Ok(())
llms.txt-tests/property_tests.rs-//     }
llms.txt-tests/property_tests.rs-//     
llms.txt:tests/property_tests.rs://     fn on_key(&mut self, key: &str) -> Result<(), vexy_json_core::error::Error> {
llms.txt-tests/property_tests.rs-//         self.events.push(format!("key:{}", key));
llms.txt-tests/property_tests.rs-//         Ok(())
llms.txt-tests/property_tests.rs-//     }
llms.txt-tests/property_tests.rs-//     
llms.txt:tests/property_tests.rs://     fn on_value(&mut self, value: &Value) -> Result<(), vexy_json_core::error::Error> {
llms.txt-tests/property_tests.rs-//         self.events.push(format!("value:{:?}", value));
llms.txt-tests/property_tests.rs-//         Ok(())
llms.txt-tests/property_tests.rs-//     }
--
llms.txt-fuzz/fuzz_targets/json_structure.rs-#![no_main]
llms.txt-fuzz/fuzz_targets/json_structure.rs-
llms.txt-fuzz/fuzz_targets/json_structure.rs-use libfuzzer_sys::fuzz_target;
llms.txt:fuzz/fuzz_targets/json_structure.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-fuzz/fuzz_targets/json_structure.rs-
llms.txt-fuzz/fuzz_targets/json_structure.rs-fuzz_target!(|data: &[u8]| {
llms.txt-fuzz/fuzz_targets/json_structure.rs-    if let Ok(s) = std::str::from_utf8(data) {
--
llms.txt-scripts/cross-browser-test.js-// this_file: scripts/cross-browser-test.js
llms.txt-scripts/cross-browser-test.js-
llms.txt-scripts/cross-browser-test.js-/**
llms.txt:scripts/cross-browser-test.js: * Cross-Browser Testing Script for vexy_json Web Tool
llms.txt-scripts/cross-browser-test.js- * 
llms.txt:scripts/cross-browser-test.js: * This script provides automated cross-browser testing capabilities for the vexy_json web tool.
llms.txt-scripts/cross-browser-test.js- * It systematically tests functionality across different browsers and generates comprehensive reports.
llms.txt-scripts/cross-browser-test.js- * 
llms.txt-scripts/cross-browser-test.js- * Usage:
--
llms.txt-scripts/cross-browser-test.js-        }
llms.txt-scripts/cross-browser-test.js-    });
llms.txt-scripts/cross-browser-test.js-
llms.txt:scripts/cross-browser-test.js:    console.log('🚀 Starting Cross-Browser Testing for vexy_json Web Tool');
llms.txt-scripts/cross-browser-test.js-    console.log(`🎯 Target URL: ${TEST_CONFIG.url}`);
llms.txt-scripts/cross-browser-test.js-
llms.txt-scripts/cross-browser-test.js-    const allResults = [];
llms.txt---
llms.txt:examples/test_implicit_array.rs:use vexy_json::parse;
llms.txt-examples/test_implicit_array.rs-
llms.txt-examples/test_implicit_array.rs-fn main() {
llms.txt-examples/test_implicit_array.rs-    let test_cases = vec![
--
llms.txt-scripts/release-github.sh-    log_info "GitHub Actions release workflow triggered!"
llms.txt-scripts/release-github.sh-    echo
llms.txt-scripts/release-github.sh-    echo "You can monitor the release progress at:"
llms.txt:scripts/release-github.sh:    echo "https://github.com/twardoch/vexy_json/actions"
llms.txt-scripts/release-github.sh-    echo
llms.txt-scripts/release-github.sh-    echo "Or watch it here:"
llms.txt-scripts/release-github.sh-    
--
llms.txt-scripts/release-github.sh-    RUN_ID=$(gh run list --workflow=release.yml --limit 1 --json databaseId --jq '.[0].databaseId')
llms.txt-scripts/release-github.sh-    
llms.txt-scripts/release-github.sh-    if [ -n "$RUN_ID" ]; then
llms.txt:scripts/release-github.sh:        echo "Workflow run: https://github.com/twardoch/vexy_json/actions/runs/$RUN_ID"
llms.txt-scripts/release-github.sh-        echo
llms.txt-scripts/release-github.sh-        echo "Watching workflow progress..."
llms.txt-scripts/release-github.sh-        gh run watch "$RUN_ID"
llms.txt---
llms.txt:Formula/vexy_json.rb-class VexyJson < Formula
llms.txt:Formula/vexy_json.rb-  desc "Forgiving JSON parser for Rust - a port of the JavaScript library jsonic"
llms.txt:Formula/vexy_json.rb:  homepage "https://github.com/twardoch/vexy_json"
llms.txt:Formula/vexy_json.rb:  url "https://github.com/twardoch/vexy_json/archive/refs/tags/v2.0.0.tar.gz"
llms.txt:Formula/vexy_json.rb-  sha256 "ce66e4af1e0aeb4f35456eb44aa82d5052e1a26c33adbaa1969284a5aa8c24ab"
llms.txt:Formula/vexy_json.rb-  license any_of: ["MIT", "Apache-2.0"]
llms.txt:Formula/vexy_json.rb:  head "https://github.com/twardoch/vexy_json.git", branch: "main"
llms.txt:Formula/vexy_json.rb-
llms.txt:Formula/vexy_json.rb-  depends_on "rust" => :build
llms.txt:Formula/vexy_json.rb-
llms.txt---
llms.txt:Formula/vexy_json.rb-
llms.txt:Formula/vexy_json.rb-  test do
llms.txt:Formula/vexy_json.rb-    # Test basic JSON parsing
llms.txt:Formula/vexy_json.rb:    assert_equal '{"key":"value"}', pipe_output("#{bin}/vexy_json", '{"key": "value"}').chomp
llms.txt:Formula/vexy_json.rb-
llms.txt:Formula/vexy_json.rb-    # Test forgiving JSON features
llms.txt:Formula/vexy_json.rb-    forgiving_json = '{ unquoted: true, trailing: "comma", }'
llms.txt:Formula/vexy_json.rb:    output = pipe_output("#{bin}/vexy_json", forgiving_json)
llms.txt:Formula/vexy_json.rb-    assert_match /"unquoted":true/, output
llms.txt:Formula/vexy_json.rb-    assert_match /"trailing":"comma"/, output
llms.txt:Formula/vexy_json.rb-
llms.txt:Formula/vexy_json.rb-    # Test error repair
llms.txt:Formula/vexy_json.rb-    broken_json = '{ "broken": '
llms.txt:Formula/vexy_json.rb:    output = pipe_output("#{bin}/vexy_json --repair", broken_json)
llms.txt:Formula/vexy_json.rb-    assert_match /"broken":null/, output
llms.txt:Formula/vexy_json.rb-
llms.txt:Formula/vexy_json.rb-    # Test version
llms.txt:Formula/vexy_json.rb:    assert_match version.to_s, shell_output("#{bin}/vexy_json --version")
llms.txt:Formula/vexy_json.rb-  end
llms.txt:Formula/vexy_json.rb-end
llms.txt---
llms.txt-scripts/package.json-{
llms.txt:scripts/package.json:    "name": "vexy_json-testing-scripts",
llms.txt-scripts/package.json-    "version": "1.0.0",
llms.txt:scripts/package.json:    "description": "Testing and monitoring scripts for vexy_json project",
llms.txt-scripts/package.json-    "main": "cross-browser-test.js",
llms.txt-scripts/package.json-    "scripts": {
llms.txt-scripts/package.json-        "test:browser": "node cross-browser-test.js",
--
llms.txt-scripts/package.json-        "testing",
llms.txt-scripts/package.json-        "cross-browser",
llms.txt-scripts/package.json-        "performance",
llms.txt:scripts/package.json:        "vexy_json"
llms.txt-scripts/package.json-    ],
llms.txt:scripts/package.json:    "author": "vexy_json team",
llms.txt-scripts/package.json-    "license": "MIT"
llms.txt-scripts/package.json-}
llms.txt---
llms.txt:examples/debug_implicit_array.rs:use vexy_json::parse;
llms.txt-examples/debug_implicit_array.rs-
llms.txt-examples/debug_implicit_array.rs-fn main() {
llms.txt-examples/debug_implicit_array.rs-    let input = "'a', 'b', 'c'";
llms.txt---
llms.txt:build-warnings.txt:   Compiling vexy_json-core v2.2.3 (/Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core)
llms.txt-build-warnings.txt-warning: methods `analyze_custom_error`, `analyze_context_error`, and `analyze_invalid_utf8` are never used
llms.txt-build-warnings.txt-   --> crates/core/src/error/recovery/mod.rs:542:8
llms.txt-build-warnings.txt-    |
--
llms.txt-build-warnings.txt-96 |     max_repairs: usize,
llms.txt-build-warnings.txt-   |     ^^^^^^^^^^^
llms.txt-build-warnings.txt-
llms.txt:build-warnings.txt:warning: `vexy_json-core` (lib) generated 27 warnings
llms.txt:build-warnings.txt:   Compiling vexy_json-cli v2.2.3 (/Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/cli)
llms.txt-build-warnings.txt-    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.92s
llms.txt---
llms.txt:examples/test_unquoted.rs:use vexy_json::{Lexer, Token};
llms.txt:examples/test_unquoted.rs:use vexy_json_core::lexer::JsonLexer;
llms.txt-examples/test_unquoted.rs-
llms.txt-examples/test_unquoted.rs-fn main() {
llms.txt-examples/test_unquoted.rs-    let mut lexer = Lexer::new("{a: 1}");
llms.txt---
llms.txt:Formula/README.md:# Homebrew Formula for vexy_json
llms.txt-Formula/README.md-
llms.txt:Formula/README.md:This directory contains the Homebrew formula for installing vexy_json on macOS.
llms.txt-Formula/README.md-
llms.txt-Formula/README.md-## Installation
llms.txt-Formula/README.md-
llms.txt:Formula/README.md:To install vexy_json using this formula:
llms.txt-Formula/README.md-
llms.txt-Formula/README.md-```bash
llms.txt-Formula/README.md-# Add this tap (once the formula is in a tap repository)
llms.txt:Formula/README.md:brew tap twardoch/vexy_json
llms.txt-Formula/README.md-
llms.txt:Formula/README.md:# Install vexy_json
llms.txt:Formula/README.md:brew install vexy_json
llms.txt-Formula/README.md-```
llms.txt-Formula/README.md-
llms.txt-Formula/README.md-Or install directly from the formula file:
llms.txt-Formula/README.md-
llms.txt-Formula/README.md-```bash
llms.txt:Formula/README.md:brew install ./Formula/vexy_json.rb
llms.txt-Formula/README.md-```
llms.txt-Formula/README.md-
llms.txt-Formula/README.md-## Testing the Formula
--
llms.txt-Formula/README.md-To test the formula locally:
llms.txt-Formula/README.md-
llms.txt-Formula/README.md-```bash
llms.txt:Formula/README.md:brew install --build-from-source ./Formula/vexy_json.rb
llms.txt:Formula/README.md:brew test vexy_json
llms.txt:Formula/README.md:brew audit --strict vexy_json
llms.txt-Formula/README.md-```
llms.txt-Formula/README.md-
llms.txt-Formula/README.md-## Updating the Formula
--
llms.txt-Formula/README.md-1. Update the `url` to point to the new release tag
llms.txt-Formula/README.md-2. Update the SHA256 checksum:
llms.txt-Formula/README.md-   ```bash
llms.txt:Formula/README.md:   curl -sL https://github.com/twardoch/vexy_json/archive/refs/tags/vX.Y.Z.tar.gz | shasum -a 256
llms.txt-Formula/README.md-   ```
llms.txt-Formula/README.md-3. Test the formula thoroughly
llms.txt-Formula/README.md-4. Submit to Homebrew or update your tap
--
llms.txt-fuzz/fuzz_targets/streaming.rs-#![no_main]
llms.txt-fuzz/fuzz_targets/streaming.rs-
llms.txt-fuzz/fuzz_targets/streaming.rs-use libfuzzer_sys::fuzz_target;
llms.txt:fuzz/fuzz_targets/streaming.rs:use vexy_json_core::streaming::{parse_streaming, BufferedStreamingConfig};
llms.txt-fuzz/fuzz_targets/streaming.rs-use std::io::Cursor;
llms.txt-fuzz/fuzz_targets/streaming.rs-
llms.txt-fuzz/fuzz_targets/streaming.rs-fuzz_target!(|data: &[u8]| {
llms.txt---
llms.txt-tests/string_handling.rs-// this_file: tests/string_handling.rs
llms.txt-tests/string_handling.rs-
llms.txt:tests/string_handling.rs:use vexy_json::{parse, Value};
llms.txt-tests/string_handling.rs-
llms.txt:tests/string_handling.rs:/// String handling tests adapted for vexy_json's actual capabilities
llms.txt:tests/string_handling.rs:/// NOTE: vexy_json supports single and double quoted strings but NOT backtick strings
llms.txt-tests/string_handling.rs-/// Reference: ref/jsonic/test/feature.test.js lines 421-592
llms.txt-tests/string_handling.rs-
llms.txt-tests/string_handling.rs-#[test]
llms.txt-tests/string_handling.rs-fn test_basic_string_types() {
llms.txt:tests/string_handling.rs:    // Test single and double quoted strings (vexy_json's supported types)
llms.txt-tests/string_handling.rs-    assert_eq!(parse("''").unwrap(), Value::String("".to_string()));
llms.txt-tests/string_handling.rs-    assert_eq!(parse(r#""""#).unwrap(), Value::String("".to_string()));
llms.txt-tests/string_handling.rs-
--
llms.txt-tests/string_handling.rs-
llms.txt-tests/string_handling.rs-#[test]
llms.txt-tests/string_handling.rs-fn test_string_escape_sequences() {
llms.txt:tests/string_handling.rs:    // Standard JSON escape sequences that vexy_json supports
llms.txt-tests/string_handling.rs-    assert_eq!(parse(r#""\n""#).unwrap(), Value::String("\n".to_string()));
llms.txt-tests/string_handling.rs-    assert_eq!(parse(r#""\t""#).unwrap(), Value::String("\t".to_string()));
llms.txt-tests/string_handling.rs-    assert_eq!(parse(r#""\r""#).unwrap(), Value::String("\r".to_string()));
--
llms.txt-tests/string_handling.rs-
llms.txt-tests/string_handling.rs-#[test]
llms.txt-tests/string_handling.rs-fn test_unicode_escapes() {
llms.txt:tests/string_handling.rs:    // Test unicode escape sequences (if supported by vexy_json)
llms.txt-tests/string_handling.rs-    let unicode_test = parse(r#""\u0061""#);
llms.txt-tests/string_handling.rs-    if unicode_test.is_ok() {
llms.txt-tests/string_handling.rs-        assert_eq!(unicode_test.unwrap(), Value::String("a".to_string()));
llms.txt-tests/string_handling.rs-    } else {
llms.txt:tests/string_handling.rs:        println!("vexy_json doesn't support unicode escapes - that's OK");
llms.txt-tests/string_handling.rs-    }
llms.txt-tests/string_handling.rs-}
llms.txt-tests/string_handling.rs-
--
llms.txt-tests/string_handling.rs-
llms.txt-tests/string_handling.rs-#[test]
llms.txt-tests/string_handling.rs-fn test_newline_handling() {
llms.txt:tests/string_handling.rs:    // Test how vexy_json handles newlines in strings
llms.txt-tests/string_handling.rs-    let unescaped_newline_result = parse("\"\n\"");
llms.txt-tests/string_handling.rs-    if unescaped_newline_result.is_ok() {
llms.txt:tests/string_handling.rs:        println!("vexy_json allows unescaped newlines in double quotes");
llms.txt-tests/string_handling.rs-    } else {
llms.txt:tests/string_handling.rs:        println!("vexy_json errors on unescaped newlines - following JSON standard");
llms.txt-tests/string_handling.rs-        assert!(unescaped_newline_result.is_err());
llms.txt-tests/string_handling.rs-    }
llms.txt-tests/string_handling.rs-
--
llms.txt-tests/string_handling.rs-    let unknown_escape_result = parse(r#""\w""#);
llms.txt-tests/string_handling.rs-    if unknown_escape_result.is_ok() {
llms.txt-tests/string_handling.rs-        if let Ok(Value::String(s)) = unknown_escape_result {
llms.txt:tests/string_handling.rs:            // Document whatever behavior vexy_json has
llms.txt:tests/string_handling.rs:            println!("vexy_json handles \\w as: {:?}", s);
llms.txt-tests/string_handling.rs-            assert!(
llms.txt-tests/string_handling.rs-                s == "w" || s == "\\w" || s == "\\\\w",
llms.txt-tests/string_handling.rs-                "Unknown escape behavior should be consistent"
llms.txt-tests/string_handling.rs-            );
llms.txt-tests/string_handling.rs-        }
llms.txt-tests/string_handling.rs-    } else {
llms.txt:tests/string_handling.rs:        println!("vexy_json errors on unknown escape sequences - that's valid behavior");
llms.txt-tests/string_handling.rs-    }
llms.txt-tests/string_handling.rs-}
llms.txt-tests/string_handling.rs-
--
llms.txt-tests/string_handling.rs-
llms.txt-tests/string_handling.rs-#[test]
llms.txt-tests/string_handling.rs-fn test_backslash_behavior() {
llms.txt:tests/string_handling.rs:    // Test how vexy_json handles backslashes in unknown escape sequences
llms.txt:tests/string_handling.rs:    // This is adaptive testing - we test what vexy_json actually does
llms.txt-tests/string_handling.rs-    let test_cases = vec![(r#""\q""#, "backslash + q"), (r#""\z""#, "backslash + z")];
llms.txt-tests/string_handling.rs-
llms.txt-tests/string_handling.rs-    for (input, description) in test_cases {
llms.txt-tests/string_handling.rs-        match parse(input) {
llms.txt-tests/string_handling.rs-            Ok(Value::String(s)) => {
llms.txt:tests/string_handling.rs:                println!("vexy_json handles {} as: {:?}", description, s);
llms.txt-tests/string_handling.rs-                // Just verify it's consistent behavior, whatever it is
llms.txt-tests/string_handling.rs-                assert!(!s.is_empty(), "String should not be empty");
llms.txt-tests/string_handling.rs-            }
--
llms.txt-tests/string_handling.rs-                );
llms.txt-tests/string_handling.rs-            }
llms.txt-tests/string_handling.rs-            Err(_) => {
llms.txt:tests/string_handling.rs:                println!("vexy_json errors on {} - that's valid behavior", description);
llms.txt-tests/string_handling.rs-            }
llms.txt-tests/string_handling.rs-        }
llms.txt-tests/string_handling.rs-    }
llms.txt---
llms.txt:examples/debug_comment_tokens.rs:use vexy_json::{Lexer, Token};
llms.txt:examples/debug_comment_tokens.rs:use vexy_json_core::lexer::JsonLexer;
llms.txt-examples/debug_comment_tokens.rs-
llms.txt-examples/debug_comment_tokens.rs-fn main() {
llms.txt-examples/debug_comment_tokens.rs-    let input = "// comment\n42";
llms.txt---
llms.txt:debug_double_decimal.rs:use vexy_json::parse;
llms.txt-debug_double_decimal.rs-
llms.txt-debug_double_decimal.rs-fn main() {
llms.txt-debug_double_decimal.rs-    println!("Testing double decimal parsing...");
--
llms.txt-scripts/build.sh-# Exit immediately if a command exits with a non-zero status.
llms.txt-scripts/build.sh-set -e
llms.txt-scripts/build.sh-cd "$(dirname "$0")/.."
llms.txt:scripts/build.sh:echo "Starting build process for vexy_json..."
llms.txt-scripts/build.sh-
llms.txt-scripts/build.sh-{
llms.txt:scripts/build.sh:    echo "Building the vexy_json project..."
llms.txt-scripts/build.sh-    # Build the project in release mode for optimized binaries
llms.txt-scripts/build.sh-    /Users/adam/.cargo/bin/cargo build --release
llms.txt-scripts/build.sh-
--
llms.txt-scripts/build.sh-
llms.txt-scripts/build.sh-    echo "Build and verification complete."
llms.txt-scripts/build.sh-    echo ""
llms.txt:scripts/build.sh:    echo "Library built at: ./target/release/libvexy_json.rlib"
llms.txt:scripts/build.sh:    echo "Documentation at: ./target/doc/vexy_json/index.html"
llms.txt-scripts/build.sh-    echo ""
llms.txt:scripts/build.sh:    echo "To use vexy_json in your project, add to Cargo.toml:"
llms.txt:scripts/build.sh:    echo '  vexy_json = { path = "'$(pwd)'" }'
llms.txt-scripts/build.sh-    echo ""
llms.txt-scripts/build.sh-    echo "Example usage:"
llms.txt:scripts/build.sh:    echo "  use vexy_json::parse;"
llms.txt-scripts/build.sh-    echo "  let value = parse(\"'hello', 'world'\").unwrap();"
llms.txt-scripts/build.sh-
llms.txt-scripts/build.sh-} >build.log.txt 2>&1
llms.txt---
llms.txt-tests/newline_as_comma.rs-use rustc_hash::FxHashMap;
llms.txt:tests/newline_as_comma.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
llms.txt-tests/newline_as_comma.rs-
llms.txt-tests/newline_as_comma.rs-fn n(num: i64) -> Value {
llms.txt:tests/newline_as_comma.rs:    Value::Number(vexy_json::Number::Integer(num))
llms.txt-tests/newline_as_comma.rs-}
llms.txt-tests/newline_as_comma.rs-
llms.txt-tests/newline_as_comma.rs-#[test]
llms.txt---
llms.txt-scripts/package-macos.sh-#!/bin/bash
llms.txt-scripts/package-macos.sh-# this_file: scripts/package-macos.sh
llms.txt:scripts/package-macos.sh:# Package vexy_json for macOS as a .pkg inside a .dmg
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-set -e
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-# Configuration
llms.txt:scripts/package-macos.sh:BINARY_NAME="vexy_json"
llms.txt-scripts/package-macos.sh-VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
llms.txt:scripts/package-macos.sh:BUNDLE_ID="com.twardoch.vexy_json"
llms.txt-scripts/package-macos.sh-INSTALL_LOCATION="/usr/local/bin"
llms.txt-scripts/package-macos.sh-BUILD_DIR="target/macos-package"
llms.txt-scripts/package-macos.sh-PKG_NAME="${BINARY_NAME}-${VERSION}.pkg"
llms.txt-scripts/package-macos.sh-DMG_NAME="${BINARY_NAME}-${VERSION}-macos.dmg"
llms.txt-scripts/package-macos.sh-
llms.txt:scripts/package-macos.sh:echo "Building vexy_json v${VERSION} for macOS..."
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-# Clean and create build directory
llms.txt-scripts/package-macos.sh-rm -rf "${BUILD_DIR}"
--
llms.txt-scripts/package-macos.sh-# Create postinstall script to set permissions
llms.txt-scripts/package-macos.sh-cat > "${BUILD_DIR}/scripts/postinstall" << 'EOF'
llms.txt-scripts/package-macos.sh-#!/bin/bash
llms.txt:scripts/package-macos.sh:chmod 755 /usr/local/bin/vexy_json
llms.txt-scripts/package-macos.sh-exit 0
llms.txt-scripts/package-macos.sh-EOF
llms.txt-scripts/package-macos.sh-chmod +x "${BUILD_DIR}/scripts/postinstall"
--
llms.txt-scripts/package-macos.sh-cat > "${BUILD_DIR}/distribution.xml" << EOF
llms.txt-scripts/package-macos.sh-<?xml version="1.0" encoding="UTF-8"?>
llms.txt-scripts/package-macos.sh-<installer-gui-script minSpecVersion="1">
llms.txt:scripts/package-macos.sh:    <title>vexy_json ${VERSION}</title>
llms.txt-scripts/package-macos.sh-    <organization>com.twardoch</organization>
llms.txt-scripts/package-macos.sh-    <domains enable_anywhere="true"/>
llms.txt-scripts/package-macos.sh-    <installation-check script="pm_install_check();"/>
--
llms.txt-scripts/package-macos.sh-    function pm_install_check() {
llms.txt-scripts/package-macos.sh-        if(system.compareVersions(system.version.ProductVersion,'10.10') &lt; 0) {
llms.txt-scripts/package-macos.sh-            my.result.title = 'Failure';
llms.txt:scripts/package-macos.sh:            my.result.message = 'You need at least macOS 10.10 to install vexy_json.';
llms.txt-scripts/package-macos.sh-            my.result.type = 'Fatal';
llms.txt-scripts/package-macos.sh-            return false;
llms.txt-scripts/package-macos.sh-        }
--
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-# Create README for DMG
llms.txt-scripts/package-macos.sh-cat > "${BUILD_DIR}/dmg/README.txt" << EOF
llms.txt:scripts/package-macos.sh:vexy_json ${VERSION} for macOS
llms.txt-scripts/package-macos.sh-========================
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-A forgiving JSON parser - Rust port of jsonic
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-Installation:
llms.txt-scripts/package-macos.sh-1. Double-click on ${PKG_NAME} to install
llms.txt:scripts/package-macos.sh:2. The 'vexy_json' command will be installed to /usr/local/bin
llms.txt-scripts/package-macos.sh-3. You may need to restart your terminal after installation
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-Usage:
llms.txt:scripts/package-macos.sh:  echo '{"foo": "bar",}' | vexy_json
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-For more information, visit:
llms.txt:scripts/package-macos.sh:https://github.com/twardoch/vexy_json
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-EOF
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-# Create the DMG
llms.txt-scripts/package-macos.sh-echo "Creating DMG..."
llms.txt:scripts/package-macos.sh:hdiutil create -volname "vexy_json ${VERSION}" \
llms.txt-scripts/package-macos.sh-    -srcfolder "${BUILD_DIR}/dmg" \
llms.txt-scripts/package-macos.sh-    -ov -format UDZO \
llms.txt-scripts/package-macos.sh-    "${DMG_NAME}"
--
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-echo "✅ Successfully created ${DMG_NAME}"
llms.txt-scripts/package-macos.sh-echo "   Package contains ${PKG_NAME} installer"
llms.txt:scripts/package-macos.sh:echo "   Will install vexy_json to ${INSTALL_LOCATION}"
llms.txt---
llms.txt-scripts/performance-monitor.js-// this_file: scripts/performance-monitor.js
llms.txt-scripts/performance-monitor.js-
llms.txt-scripts/performance-monitor.js-/**
llms.txt:scripts/performance-monitor.js: * Performance Monitoring Script for vexy_json WebAssembly Tool
llms.txt-scripts/performance-monitor.js- * 
llms.txt-scripts/performance-monitor.js- * This script sets up comprehensive performance monitoring for the deployed
llms.txt:scripts/performance-monitor.js: * vexy_json web tool, tracking key metrics like parsing performance, bundle loading,
llms.txt-scripts/performance-monitor.js- * user interactions, and system health.
llms.txt-scripts/performance-monitor.js- * 
llms.txt-scripts/performance-monitor.js- * Features:
--
llms.txt-scripts/performance-monitor.js-     * Monitor bundle size and loading performance
llms.txt-scripts/performance-monitor.js-     */
llms.txt-scripts/performance-monitor.js-    async monitorBundleMetrics() {
llms.txt:scripts/performance-monitor.js:        const baseUrl = 'https://twardoch.github.io/vexy_json';
llms.txt-scripts/performance-monitor.js-        const files = [
llms.txt:scripts/performance-monitor.js:            '/pkg/vexy_json.js',
llms.txt:scripts/performance-monitor.js:            '/pkg/vexy_json_bg.wasm',
llms.txt-scripts/performance-monitor.js-            '/tool.html',
llms.txt-scripts/performance-monitor.js-            '/assets/js/tool.js',
llms.txt-scripts/performance-monitor.js-            '/assets/css/tool.css'
--
llms.txt-scripts/performance-monitor.js-            {
llms.txt-scripts/performance-monitor.js-                name: 'forgiving', input: `{
llms.txt-scripts/performance-monitor.js-                // Comments test
llms.txt:scripts/performance-monitor.js:                name: 'vexy_json',  // single quotes
llms.txt-scripts/performance-monitor.js-                features: [
llms.txt-scripts/performance-monitor.js-                    'comments',
llms.txt-scripts/performance-monitor.js-                    'trailing commas', // trailing comma
--
llms.txt-scripts/performance-monitor.js-     * Run complete performance monitoring
llms.txt-scripts/performance-monitor.js-     */
llms.txt-scripts/performance-monitor.js-    async run() {
llms.txt:scripts/performance-monitor.js:        console.log('🚀 Starting vexy_json performance monitoring...\n');
llms.txt-scripts/performance-monitor.js-
llms.txt-scripts/performance-monitor.js-        try {
llms.txt-scripts/performance-monitor.js-            await this.monitorBundleMetrics();
llms.txt---
llms.txt:examples/test_implicit_objects.rs:use vexy_json::parse;
llms.txt-examples/test_implicit_objects.rs-
llms.txt-examples/test_implicit_objects.rs-fn main() {
llms.txt-examples/test_implicit_objects.rs-    let test_cases = vec![
llms.txt---
llms.txt:examples/test_single_brace.rs:use vexy_json::{parse, Value};
llms.txt-examples/test_single_brace.rs-
llms.txt-examples/test_single_brace.rs-fn main() {
llms.txt-examples/test_single_brace.rs-    println!("Testing single opening brace '{{'");
--
llms.txt-scripts/update-versions.sh-
llms.txt-scripts/update-versions.sh-# Update workspace dependencies
llms.txt-scripts/update-versions.sh-echo "Updating workspace dependencies..."
llms.txt:scripts/update-versions.sh:update_file "Cargo.toml" 'vexy_json-core = { version = ".*"' "s/vexy_json-core = { version = \".*\"/vexy_json-core = { version = \"$VERSION\"/"
llms.txt:scripts/update-versions.sh:update_file "Cargo.toml" 'vexy_json = { version = ".*"' "s/vexy_json = { version = \".*\"/vexy_json = { version = \"$VERSION\"/"
llms.txt-scripts/update-versions.sh-
llms.txt-scripts/update-versions.sh-# Update Python bindings
llms.txt-scripts/update-versions.sh-echo "Updating Python bindings..."
--
llms.txt-scripts/update-versions.sh-
llms.txt-scripts/update-versions.sh-# Update Homebrew formula (only the version, not the URL)
llms.txt-scripts/update-versions.sh-echo "Updating Homebrew formula..."
llms.txt:scripts/update-versions.sh:if [ -f "Formula/vexy_json.rb" ]; then
llms.txt-scripts/update-versions.sh-    # Only update if this looks like a release version (not -dev)
llms.txt-scripts/update-versions.sh-    if [[ ! "$VERSION" =~ -dev$ ]]; then
llms.txt:scripts/update-versions.sh:        update_file "Formula/vexy_json.rb" 'version ".*"' "s/version \".*\"/version \"$VERSION\"/"
llms.txt-scripts/update-versions.sh-        # Note: The URL in the formula should be updated during release
llms.txt-scripts/update-versions.sh-    else
llms.txt-scripts/update-versions.sh-        echo -e "${YELLOW}⚠${NC} Skipping Homebrew formula update for dev version"
--
llms.txt-fuzz/fuzz_targets/comments.rs-#![no_main]
llms.txt-fuzz/fuzz_targets/comments.rs-
llms.txt-fuzz/fuzz_targets/comments.rs-use libfuzzer_sys::fuzz_target;
llms.txt:fuzz/fuzz_targets/comments.rs:use vexy_json::{parse, ParserOptions};
llms.txt-fuzz/fuzz_targets/comments.rs-
llms.txt-fuzz/fuzz_targets/comments.rs-fuzz_target!(|data: &[u8]| {
llms.txt-fuzz/fuzz_targets/comments.rs-    if let Ok(s) = std::str::from_utf8(data) {
--
llms.txt-fuzz/fuzz_targets/comments.rs-                allow_comments: true,
llms.txt-fuzz/fuzz_targets/comments.rs-                ..Default::default()
llms.txt-fuzz/fuzz_targets/comments.rs-            };
llms.txt:fuzz/fuzz_targets/comments.rs:            let _ = vexy_json::parse_with_options(&comment_input, comment_options);
llms.txt-fuzz/fuzz_targets/comments.rs-            
llms.txt-fuzz/fuzz_targets/comments.rs-            // Test with comments disabled (should fail for most)
llms.txt-fuzz/fuzz_targets/comments.rs-            let no_comment_options = ParserOptions {
llms.txt-fuzz/fuzz_targets/comments.rs-                allow_comments: false,
llms.txt-fuzz/fuzz_targets/comments.rs-                ..Default::default()
llms.txt-fuzz/fuzz_targets/comments.rs-            };
llms.txt:fuzz/fuzz_targets/comments.rs:            let _ = vexy_json::parse_with_options(&comment_input, no_comment_options);
llms.txt-fuzz/fuzz_targets/comments.rs-        }
llms.txt-fuzz/fuzz_targets/comments.rs-        
llms.txt-fuzz/fuzz_targets/comments.rs-        // Test nested comment edge cases
llms.txt---
llms.txt:examples/test_inline_comment.rs:use vexy_json::parse;
llms.txt-examples/test_inline_comment.rs-
llms.txt-examples/test_inline_comment.rs-fn main() {
llms.txt-examples/test_inline_comment.rs-    let test_cases = vec![
--
llms.txt-examples/streaming_example.rs-
llms.txt-examples/streaming_example.rs-//! Example demonstrating the streaming parser capabilities.
llms.txt-examples/streaming_example.rs-
llms.txt:examples/streaming_example.rs:use vexy_json::{NdJsonParser, StreamingEvent, StreamingParser};
llms.txt-examples/streaming_example.rs-
llms.txt-examples/streaming_example.rs-fn main() -> Result<(), Box<dyn std::error::Error>> {
llms.txt-examples/streaming_example.rs-    println!("=== Streaming Parser Example ===\n");
llms.txt---
llms.txt:examples/trace_comment_parse.rs:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-examples/trace_comment_parse.rs-
llms.txt-examples/trace_comment_parse.rs-fn main() {
llms.txt-examples/trace_comment_parse.rs-    let input = "// comment\n42";
--
llms.txt-scripts/cross-platform/build-all.sh-    local output_dir="$PROJECT_ROOT/target/$target/release"
llms.txt-scripts/cross-platform/build-all.sh-    mkdir -p "$output_dir"
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt:scripts/cross-platform/build-all.sh:    if $build_cmd build --release --bin vexy_json --target "$target"; then
llms.txt-scripts/cross-platform/build-all.sh-        # Copy binary to build directory
llms.txt:scripts/cross-platform/build-all.sh:        local binary_name="vexy_json"
llms.txt-scripts/cross-platform/build-all.sh-        if [[ "$target" == *"windows"* ]]; then
llms.txt:scripts/cross-platform/build-all.sh:            binary_name="vexy_json.exe"
llms.txt-scripts/cross-platform/build-all.sh-        fi
llms.txt-scripts/cross-platform/build-all.sh-        
llms.txt:scripts/cross-platform/build-all.sh:        local output_name="vexy_json-$VERSION-$target"
llms.txt-scripts/cross-platform/build-all.sh-        if [[ "$target" == *"windows"* ]]; then
llms.txt-scripts/cross-platform/build-all.sh-            output_name="$output_name.exe"
llms.txt-scripts/cross-platform/build-all.sh-        fi
--
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt-scripts/cross-platform/build-all.sh-    # Create archives
llms.txt-scripts/cross-platform/build-all.sh-    cd "$BUILD_DIR"
llms.txt:scripts/cross-platform/build-all.sh:    tar -czf "vexy_json-$VERSION-wasm-web.tar.gz" wasm-web/
llms.txt:scripts/cross-platform/build-all.sh:    tar -czf "vexy_json-$VERSION-wasm-nodejs.tar.gz" wasm-nodejs/
llms.txt-scripts/cross-platform/build-all.sh-    cd "$PROJECT_ROOT"
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt-scripts/cross-platform/build-all.sh-    return 0
--
llms.txt-scripts/cross-platform/build-all.sh-create_universal_macos() {
llms.txt-scripts/cross-platform/build-all.sh-    log "Creating universal macOS binary..."
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt:scripts/cross-platform/build-all.sh:    local intel_binary="$BUILD_DIR/vexy_json-$VERSION-x86_64-apple-darwin"
llms.txt:scripts/cross-platform/build-all.sh:    local arm_binary="$BUILD_DIR/vexy_json-$VERSION-aarch64-apple-darwin"
llms.txt:scripts/cross-platform/build-all.sh:    local universal_binary="$BUILD_DIR/vexy_json-$VERSION-universal-apple-darwin"
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt-scripts/cross-platform/build-all.sh-    if [[ -f "$intel_binary" && -f "$arm_binary" ]]; then
llms.txt-scripts/cross-platform/build-all.sh-        if command -v lipo &> /dev/null; then
--
llms.txt-scripts/cross-platform/build-all.sh-    cd "$BUILD_DIR"
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt-scripts/cross-platform/build-all.sh-    # Create individual archives for each binary
llms.txt:scripts/cross-platform/build-all.sh:    for file in vexy_json-$VERSION-*; do
llms.txt-scripts/cross-platform/build-all.sh-        if [[ -f "$file" && "$file" != *.tar.gz && "$file" != *.zip ]]; then
llms.txt-scripts/cross-platform/build-all.sh-            local archive_name="${file}.tar.gz"
llms.txt-scripts/cross-platform/build-all.sh-            tar -czf "$archive_name" "$file"
--
llms.txt-scripts/cross-platform/build-all.sh-    done
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt-scripts/cross-platform/build-all.sh-    # Create a comprehensive archive with all binaries
llms.txt:scripts/cross-platform/build-all.sh:    tar -czf "vexy_json-$VERSION-all-platforms.tar.gz" vexy_json-$VERSION-*
llms.txt:scripts/cross-platform/build-all.sh:    success "Created comprehensive archive: vexy_json-$VERSION-all-platforms.tar.gz"
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt-scripts/cross-platform/build-all.sh-    cd "$PROJECT_ROOT"
llms.txt-scripts/cross-platform/build-all.sh-}
--
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt-scripts/cross-platform/build-all.sh-    # Generate SHA256 checksums
llms.txt-scripts/cross-platform/build-all.sh-    if command -v sha256sum &> /dev/null; then
llms.txt:scripts/cross-platform/build-all.sh:        sha256sum vexy_json-$VERSION-* > checksums.sha256
llms.txt-scripts/cross-platform/build-all.sh-    elif command -v shasum &> /dev/null; then
llms.txt:scripts/cross-platform/build-all.sh:        shasum -a 256 vexy_json-$VERSION-* > checksums.sha256
llms.txt-scripts/cross-platform/build-all.sh-    else
llms.txt-scripts/cross-platform/build-all.sh-        warning "No SHA256 utility found, skipping checksum generation"
llms.txt-scripts/cross-platform/build-all.sh-        cd "$PROJECT_ROOT"
--
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt-scripts/cross-platform/build-all.sh-    if [[ -d "$BUILD_DIR" ]]; then
llms.txt-scripts/cross-platform/build-all.sh-        echo -e "${BLUE}Generated files:${NC}"
llms.txt:scripts/cross-platform/build-all.sh:        ls -la "$BUILD_DIR" | grep -E "(vexy_json-|checksums)" | while read -r line; do
llms.txt-scripts/cross-platform/build-all.sh-            echo "  $line"
llms.txt-scripts/cross-platform/build-all.sh-        done
llms.txt-scripts/cross-platform/build-all.sh-    fi
--
llms.txt-fuzz/fuzz_targets/strings.rs-#![no_main]
llms.txt-fuzz/fuzz_targets/strings.rs-
llms.txt-fuzz/fuzz_targets/strings.rs-use libfuzzer_sys::fuzz_target;
llms.txt:fuzz/fuzz_targets/strings.rs:use vexy_json::{parse, ParserOptions};
llms.txt-fuzz/fuzz_targets/strings.rs-
llms.txt-fuzz/fuzz_targets/strings.rs-fuzz_target!(|data: &[u8]| {
llms.txt-fuzz/fuzz_targets/strings.rs-    if let Ok(s) = std::str::from_utf8(data) {
--
llms.txt-fuzz/fuzz_targets/strings.rs-                allow_unquoted_keys: true,
llms.txt-fuzz/fuzz_targets/strings.rs-                ..Default::default()
llms.txt-fuzz/fuzz_targets/strings.rs-            };
llms.txt:fuzz/fuzz_targets/strings.rs:            let _ = vexy_json::parse_with_options(&string_input, single_quote_options);
llms.txt-fuzz/fuzz_targets/strings.rs-        }
llms.txt-fuzz/fuzz_targets/strings.rs-        
llms.txt-fuzz/fuzz_targets/strings.rs-        // Test raw string parsing (edge case)
--
llms.txt-fuzz/fuzz_targets/unquoted_keys.rs-#![no_main]
llms.txt-fuzz/fuzz_targets/unquoted_keys.rs-
llms.txt-fuzz/fuzz_targets/unquoted_keys.rs-use libfuzzer_sys::fuzz_target;
llms.txt:fuzz/fuzz_targets/unquoted_keys.rs:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-fuzz/fuzz_targets/unquoted_keys.rs-
llms.txt-fuzz/fuzz_targets/unquoted_keys.rs-fuzz_target!(|data: &[u8]| {
llms.txt-fuzz/fuzz_targets/unquoted_keys.rs-    if let Ok(s) = std::str::from_utf8(data) {
--
llms.txt-fuzz/fuzz_targets/numbers.rs-#![no_main]
llms.txt-fuzz/fuzz_targets/numbers.rs-
llms.txt-fuzz/fuzz_targets/numbers.rs-use libfuzzer_sys::fuzz_target;
llms.txt:fuzz/fuzz_targets/numbers.rs:use vexy_json::{parse, ParserOptions};
llms.txt-fuzz/fuzz_targets/numbers.rs-
llms.txt-fuzz/fuzz_targets/numbers.rs-fuzz_target!(|data: &[u8]| {
llms.txt-fuzz/fuzz_targets/numbers.rs-    if let Ok(s) = std::str::from_utf8(data) {
--
llms.txt-fuzz/fuzz_targets/numbers.rs-                fast_repair: false,
llms.txt-fuzz/fuzz_targets/numbers.rs-                report_repairs: false,
llms.txt-fuzz/fuzz_targets/numbers.rs-            };
llms.txt:fuzz/fuzz_targets/numbers.rs:            let _ = vexy_json::parse_with_options(&number_input, strict_options);
llms.txt-fuzz/fuzz_targets/numbers.rs-        }
llms.txt-fuzz/fuzz_targets/numbers.rs-        
llms.txt-fuzz/fuzz_targets/numbers.rs-        // Test edge cases
--
llms.txt-fuzz/fuzz_targets/unicode.rs-#![no_main]
llms.txt-fuzz/fuzz_targets/unicode.rs-
llms.txt-fuzz/fuzz_targets/unicode.rs-use libfuzzer_sys::fuzz_target;
llms.txt:fuzz/fuzz_targets/unicode.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-fuzz/fuzz_targets/unicode.rs-
llms.txt-fuzz/fuzz_targets/unicode.rs-fuzz_target!(|data: &[u8]| {
llms.txt-fuzz/fuzz_targets/unicode.rs-    // Test with raw bytes (may include invalid UTF-8)
llms.txt---
llms.txt:examples/test_number_types.rs:use vexy_json::{parse, Value};
llms.txt-examples/test_number_types.rs-
llms.txt-examples/test_number_types.rs-fn main() {
llms.txt-examples/test_number_types.rs-    let test_cases = vec![
--
llms.txt-examples/test_number_types.rs-    for (input, expected_type) in test_cases {
llms.txt-examples/test_number_types.rs-        print!("Testing {:?} (expecting {}): ", input, expected_type);
llms.txt-examples/test_number_types.rs-        match parse(input) {
llms.txt:examples/test_number_types.rs:            Ok(Value::Number(vexy_json::Number::Integer(i))) => {
llms.txt-examples/test_number_types.rs-                println!("Integer({})", i);
llms.txt-examples/test_number_types.rs-            }
llms.txt:examples/test_number_types.rs:            Ok(Value::Number(vexy_json::Number::Float(f))) => {
llms.txt-examples/test_number_types.rs-                println!("Float({})", f);
llms.txt-examples/test_number_types.rs-            }
llms.txt-examples/test_number_types.rs-            Ok(other) => {
--
llms.txt-fuzz/fuzz_targets/repair.rs-#![no_main]
llms.txt-fuzz/fuzz_targets/repair.rs-
llms.txt-fuzz/fuzz_targets/repair.rs-use libfuzzer_sys::fuzz_target;
llms.txt:fuzz/fuzz_targets/repair.rs:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-fuzz/fuzz_targets/repair.rs-
llms.txt-fuzz/fuzz_targets/repair.rs-fuzz_target!(|data: &[u8]| {
llms.txt-fuzz/fuzz_targets/repair.rs-    if let Ok(s) = std::str::from_utf8(data) {
llms.txt---
llms.txt:examples/debug_comma_one_tokens.rs:use vexy_json::{Lexer, Token};
llms.txt:examples/debug_comma_one_tokens.rs:use vexy_json_core::lexer::JsonLexer;
llms.txt-examples/debug_comma_one_tokens.rs-
llms.txt-examples/debug_comma_one_tokens.rs-fn main() {
llms.txt-examples/debug_comma_one_tokens.rs-    let input = ",1";
llms.txt---
llms.txt:examples/debug_trailing_comma.rs:use vexy_json::{parse, Lexer, Token};
llms.txt:examples/debug_trailing_comma.rs:use vexy_json_core::lexer::JsonLexer;
llms.txt-examples/debug_trailing_comma.rs-
llms.txt-examples/debug_trailing_comma.rs-fn main() {
llms.txt-examples/debug_trailing_comma.rs-    let input = "[1, 2, 3,]";
llms.txt---
llms.txt-fuzz/Cargo.toml-[package]
llms.txt:fuzz/Cargo.toml:name = "vexy_json-core-fuzz"
llms.txt-fuzz/Cargo.toml-version = "0.0.0"
llms.txt-fuzz/Cargo.toml-publish = false
llms.txt-fuzz/Cargo.toml-edition = "2021"
--
llms.txt-fuzz/Cargo.toml-libfuzzer-sys = "0.4"
llms.txt-fuzz/Cargo.toml-
llms.txt-fuzz/Cargo.toml-
llms.txt:fuzz/Cargo.toml:[dependencies.vexy_json-core]
llms.txt-fuzz/Cargo.toml-path = "../crates/core"
llms.txt-fuzz/Cargo.toml-
llms.txt-fuzz/Cargo.toml-
llms.txt:fuzz/Cargo.toml:[dependencies.vexy_json]
llms.txt-fuzz/Cargo.toml-path = ".."
llms.txt-fuzz/Cargo.toml-
llms.txt-fuzz/Cargo.toml-
llms.txt---
llms.txt:examples/test_comment.rs:use vexy_json::{parse, parse_with_options, Error, Lexer, ParserOptions, Token};
llms.txt:examples/test_comment.rs:use vexy_json_core::lexer::JsonLexer;
llms.txt-examples/test_comment.rs-
llms.txt-examples/test_comment.rs-fn main() {
llms.txt-examples/test_comment.rs-    let input = "a#b";
--
llms.txt-examples/recursive_parser.rs-
llms.txt-examples/recursive_parser.rs-//! Example demonstrating the recursive descent parser
llms.txt-examples/recursive_parser.rs-
llms.txt:examples/recursive_parser.rs:use vexy_json_core::parser::recursive::parse_recursive;
llms.txt:examples/recursive_parser.rs:use vexy_json_core::parser::ParserOptions;
llms.txt:examples/recursive_parser.rs:use vexy_json_core::ast::{Value, Number};
llms.txt-examples/recursive_parser.rs-
llms.txt-examples/recursive_parser.rs-fn main() -> Result<(), Box<dyn std::error::Error>> {
llms.txt-examples/recursive_parser.rs-    println!("🧮 Recursive Descent Parser Demo");
llms.txt---
llms.txt:examples/simple.rs:use vexy_json::{parse, parse_with_options, Lexer, ParserOptions, Token};
llms.txt-examples/simple.rs-
llms.txt-examples/simple.rs-fn debug_string_positions(input: &str) {
llms.txt-examples/simple.rs-    println!("\nString positions in: {:?}", input);
--
llms.txt-examples/plugin_examples.rs-//! This example shows how to use the built-in plugins to extend
llms.txt-examples/plugin_examples.rs-//! Vexy JSON's parsing capabilities.
llms.txt-examples/plugin_examples.rs-
llms.txt:examples/plugin_examples.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt:examples/plugin_examples.rs:use vexy_json_core::plugin::plugins::{
llms.txt-examples/plugin_examples.rs-    SchemaValidationPlugin,
llms.txt-examples/plugin_examples.rs-    DateTimePlugin,
llms.txt-examples/plugin_examples.rs-    CustomNumberFormatPlugin,
llms.txt-examples/plugin_examples.rs-    CommentPreservationPlugin,
llms.txt-examples/plugin_examples.rs-};
llms.txt:examples/plugin_examples.rs:use vexy_json_core::plugin::ParserPlugin;
llms.txt-examples/plugin_examples.rs-
llms.txt-examples/plugin_examples.rs-fn main() -> Result<(), Box<dyn std::error::Error>> {
llms.txt-examples/plugin_examples.rs-    println!("🔌 Vexy JSON Plugin Examples");
llms.txt---
llms.txt-examples/profile_parser.rs-// this_file: examples/profile_parser.rs
llms.txt-examples/profile_parser.rs-
llms.txt:examples/profile_parser.rs:use vexy_json::parse;
llms.txt-examples/profile_parser.rs-
llms.txt-examples/profile_parser.rs-fn main() {
llms.txt-examples/profile_parser.rs-    // Heavy workload for profiling
llms.txt---
llms.txt:examples/test_comment_with_value.rs:use vexy_json::parse;
llms.txt-examples/test_comment_with_value.rs-
llms.txt-examples/test_comment_with_value.rs-fn main() {
llms.txt-examples/test_comment_with_value.rs-    let test_cases = vec![
llms.txt---
llms.txt:examples/test_single_quote.rs:use vexy_json::Lexer;
llms.txt:examples/test_single_quote.rs:use vexy_json_core::lexer::JsonLexer;
llms.txt-examples/test_single_quote.rs-
llms.txt-examples/test_single_quote.rs-fn main() {
llms.txt-examples/test_single_quote.rs-    let mut lexer = Lexer::new("'hello'");
--
llms.txt-examples/parser_comparison.rs-
llms.txt-examples/parser_comparison.rs-//! Example comparing different parser implementations
llms.txt-examples/parser_comparison.rs-
llms.txt:examples/parser_comparison.rs:use vexy_json_core::{
llms.txt-examples/parser_comparison.rs-    parse_with_options,
llms.txt-examples/parser_comparison.rs-    parse_optimized_with_options,
llms.txt-examples/parser_comparison.rs-    parse_optimized_v2_with_options,
--
llms.txt-examples/parser_comparison.rs-    parse_iterative,
llms.txt-examples/parser_comparison.rs-    ParserOptions,
llms.txt-examples/parser_comparison.rs-};
llms.txt:examples/parser_comparison.rs:use vexy_json_core::ast::{Value, Number};
llms.txt-examples/parser_comparison.rs-use std::time::Instant;
llms.txt-examples/parser_comparison.rs-
llms.txt-examples/parser_comparison.rs-fn main() -> Result<(), Box<dyn std::error::Error>> {
--
llms.txt-examples/parser_comparison.rs-        println!("JSON: {}", json);
llms.txt-examples/parser_comparison.rs-        
llms.txt-examples/parser_comparison.rs-        // Test all parsers
llms.txt:examples/parser_comparison.rs:        let parsers: Vec<(&str, fn(&str, ParserOptions) -> Result<Value, vexy_json_core::Error>)> = vec![
llms.txt-examples/parser_comparison.rs-            ("Original", parse_with_options),
llms.txt-examples/parser_comparison.rs-            ("Optimized", parse_optimized_with_options),
llms.txt-examples/parser_comparison.rs-            ("Optimized V2", parse_optimized_v2_with_options),
--
llms.txt-examples/parser_comparison.rs-        println!("JSON: {}", invalid_json);
llms.txt-examples/parser_comparison.rs-        
llms.txt-examples/parser_comparison.rs-        // Test error handling across parsers
llms.txt:examples/parser_comparison.rs:        let parsers: Vec<(&str, fn(&str, ParserOptions) -> Result<Value, vexy_json_core::Error>)> = vec![
llms.txt-examples/parser_comparison.rs-            ("Recursive", parse_recursive),
llms.txt-examples/parser_comparison.rs-            ("Iterative", parse_iterative),
llms.txt-examples/parser_comparison.rs-        ];
--
llms.txt-examples/parser_comparison.rs-    println!("Testing large JSON with 1000 key-value pairs");
llms.txt-examples/parser_comparison.rs-    println!("JSON size: {} bytes", large_json.len());
llms.txt-examples/parser_comparison.rs-    
llms.txt:examples/parser_comparison.rs:    let parsers: Vec<(&str, fn(&str, ParserOptions) -> Result<Value, vexy_json_core::Error>)> = vec![
llms.txt-examples/parser_comparison.rs-        ("Recursive", parse_recursive),
llms.txt-examples/parser_comparison.rs-        ("Iterative", parse_iterative),
llms.txt-examples/parser_comparison.rs-    ];
llms.txt---
llms.txt:examples/debug_lookahead.rs:use vexy_json::{Lexer, Token};
llms.txt:examples/debug_lookahead.rs:use vexy_json_core::lexer::JsonLexer;
llms.txt-examples/debug_lookahead.rs-
llms.txt-examples/debug_lookahead.rs-fn main() {
llms.txt-examples/debug_lookahead.rs-    let input = "/*a:1*/\nb:2";
llms.txt---
llms.txt-scripts/package-lock.json-{
llms.txt:scripts/package-lock.json:    "name": "vexy_json-testing-scripts",
llms.txt-scripts/package-lock.json-    "version": "1.0.0",
llms.txt-scripts/package-lock.json-    "lockfileVersion": 3,
llms.txt-scripts/package-lock.json-    "requires": true,
llms.txt-scripts/package-lock.json-    "packages": {
llms.txt-scripts/package-lock.json-        "": {
llms.txt:scripts/package-lock.json:            "name": "vexy_json-testing-scripts",
llms.txt-scripts/package-lock.json-            "version": "1.0.0",
llms.txt-scripts/package-lock.json-            "license": "MIT",
llms.txt-scripts/package-lock.json-            "dependencies": {
llms.txt---
llms.txt:examples/debug_test.rs:use vexy_json::parse;
llms.txt-examples/debug_test.rs-
llms.txt-examples/debug_test.rs-fn main() {
llms.txt-examples/debug_test.rs-    println!("Testing: /*a:1*/\nb:2");
--
llms.txt-
llms.txt-## http://127.0.0.1:8081/debug-pages/test-wasm.html
llms.txt-
llms.txt:vexy_json WebAssembly Test Page
llms.txt:Testing the vexy_json WASM module functionality...
llms.txt-
llms.txt-WASM Module Initialization
llms.txt-✅ Module loaded successfully
llms.txt-Version Info
llms.txt:vexy_json vundefined
llms.txt-undefined
llms.txt-Basic JSON Parsing
llms.txt-Input: {"key": "value"}
--
llms.txt-In @docs we have @docs/tool.html
llms.txt-
llms.txt-1. We want that page to share navigation with the remaining Jekyll site, somehow. 
llms.txt:2. More importantly, we want a "sister web page" with the identical design which will allow the end-user to use the `jsonic` library (analogous to our `vexy_json` in @docs/tool.html)
llms.txt-
llms.txt-Into @PLAN.md develop a very detailed and specific plan for the above. 
llms.txt-
--
llms.txt-<document index="160">
llms.txt-<source>issues/104.txt</source>
llms.txt-<document_content>
llms.txt:Analyze the entire codebase. Then in ./IDEAS.md write an extensive spec that will describe in minute detail step-by-step how to extend the vexy_json parser with the functionality of INTELLIGENT completion of opening or closing braces. Right now our tolerant and forgiving JSON-esque parser can fix various things but it cannot overcome the situation of a braces mismatch. The original reference jsonic parser written in JS, of which vexy_json is a Rust port, does not have that functionality. But I want it.
llms.txt-
llms.txt-
llms.txt-</document_content>
--
llms.txt-<document_content>
llms.txt-Analyze the entire `./llms.txt` codebase snapshot. 
llms.txt-
llms.txt:Our code, `vexy_json` is a Rust port of the `jsonic` parser written in JS. Neither of the tolerant and forgiving JSON-esque parsers (our `vexy_json` or the original `jsonic`) can overcome the problem of mismatching brackets or braces. 
llms.txt-
llms.txt-It would be very useful if this were possible. 
llms.txt-
--
llms.txt-3. The parse continues after the object. The AST now has the `"bar"` key mapped to an array node that is marked incomplete/error, but the `"foo":123` entry remains intact, and the overall AST is a top-level object node (rather than nothing).
llms.txt-4. The IDE can highlight the error at the position of `}` and possibly at end-of-file (saying one brace was inserted implicitly). But crucially, it can still allow navigation of the AST (e.g. the user can fold the object, see both keys, etc.).
llms.txt-
llms.txt:To implement similar features in a **Rust-based tolerant JSON parser** (like extending `vexy_json` or `jsonic` with mismatch recovery), one can combine these approaches:
llms.txt-
llms.txt-* **Insert error nodes** on-the-fly in the parser: e.g. if expecting `]` but got `}`, push an error and treat it as the end of the array. If end-of-file reached but stack isn’t empty, auto-insert the needed `]` or `}` tokens (recording errors for each).
llms.txt-* **Use a recovery combinator or manual check** after a failed parse: e.g. if a value parser fails inside an array, skip forward until a `]` or `}` is found, or until a comma that indicates the next element, then continue. This could be done by a loop scanning the char stream or by a higher-level library feature.
--
llms.txt-
llms.txt-Error-tolerant parsing is an active area of language tooling research and development. Techniques range from simple heuristics (skip to next `}`) to sophisticated grammar transformations that guarantee a parse for any input. **State-of-the-art academic work** (like PEG labeled failures or minimal edit algorithms) has started to find its way into practical tools, meaning library authors no longer have to choose between strict compliance and usability. Open-source libraries such as **Chumsky** (Rust) and **LPegLabel** (Lua) demonstrate that we can recover from errors while still using high-level parser definitions. And specialized JSON fixers like **`json_repair`**, **JSON5/JSONC parsers**, and **tolerantjson** for Python show concrete strategies to handle unbalanced delimiters, missing commas, and more in real JSON inputs.
llms.txt-
llms.txt:For implementing a tolerant parser in Rust (as with `vexy_json` or similar), a combined approach is recommended:
llms.txt-
llms.txt-* Use a **stack-based mechanism** or parser combinator to detect and auto-correct bracket mismatches in one pass.
llms.txt-* Represent the parse result in a way that **retains malformed parts** (e.g. an `Enum Value { Valid(...), Error(...) }`), so that no information is lost.
--
llms.txt-
llms.txt-Into `./issues/106.txt` write an extensive spec that will describe in minute detail step-by-step how to incorporate https://docs.rs/json-repair/ into our project. 
llms.txt-
llms.txt:The general idea is that it should be an option, and we should have a parser that parses using the fastest method first, then falls back to our core `vexy_json` slower one, and only if that fails falls back to `json-repair`. 
llms.txt-
llms.txt-
llms.txt-</document_content>
--
llms.txt-<document index="162">
llms.txt-<source>issues/106.txt</source>
llms.txt-<document_content>
llms.txt:# JSON Repair Integration Specification for vexy_json
llms.txt-
llms.txt-## Executive Summary
llms.txt-
llms.txt:This document provides a detailed specification for integrating the `json-repair` crate into the vexy_json project to handle mismatched brackets and braces - a limitation that neither our `vexy_json` nor the original `jsonic` parser can currently overcome. The integration will implement a three-tier parsing approach with performance-optimized fallback chains.
llms.txt-
llms.txt-## 1. Problem Statement
llms.txt-
llms.txt-### Current Limitations
llms.txt:- Both `vexy_json` and `jsonic` fail on mismatched brackets/braces (e.g., `{key: "value"]`, `[1, 2, 3}`)
llms.txt-- No error recovery mechanism for structural delimiter mismatches
llms.txt-- Complete parsing failure rather than partial recovery with error reporting
llms.txt-- Missing brackets at end-of-input cause total failure
--
llms.txt-
llms.txt-```
llms.txt-Input JSON → Tier 1: Fast Path → Tier 2: Forgiving Path → Tier 3: Repair Path → Output
llms.txt:             (serde_json)      (vexy_json core)         (json-repair)
llms.txt-```
llms.txt-
llms.txt-**Tier 1: Fast Path (serde_json)**
--
llms.txt-- Zero-copy optimization where possible
llms.txt-- Immediate failure on any syntax error
llms.txt-
llms.txt:**Tier 2: Forgiving Path (vexy_json core)**
llms.txt:- Current vexy_json parser with all forgiving features
llms.txt-- Handles comments, trailing commas, unquoted keys, etc.
llms.txt-- Fails on bracket mismatches
llms.txt-
--
llms.txt-
llms.txt-### Version Compatibility
llms.txt-- `json-repair` 0.2.x: Stable API, bracket balancing, minimal dependencies
llms.txt:- Compatible with current `vexy_json` dependency stack
llms.txt-- No conflicting dependencies identified
llms.txt-
llms.txt-## 4. Core Implementation
--
llms.txt-#[derive(Debug, Clone)]
llms.txt-pub enum ParsingTier {
llms.txt-    Fast,      // serde_json succeeded
llms.txt:    Forgiving, // vexy_json succeeded
llms.txt-    Repair,    // json-repair succeeded
llms.txt-}
llms.txt-
--
llms.txt-        };
llms.txt-    }
llms.txt-
llms.txt:    // Tier 2: Forgiving Path - vexy_json core
llms.txt-    match parse_with_options(input, options) {
llms.txt-        Ok(value) => {
llms.txt-            return ParseResult {
--
llms.txt-            // Track what repairs were made
llms.txt-            repairs.extend(detect_repairs(input, &repaired_json));
llms.txt-
llms.txt:            // Parse the repaired JSON with vexy_json
llms.txt-            match parse_with_options(&repaired_json, options) {
llms.txt-                Ok(value) => ParseResult {
llms.txt-                    value,
--
llms.txt-```rust
llms.txt-// In crates/cli/src/main.rs
llms.txt-#[derive(Parser)]
llms.txt:#[command(name = "vexy_json")]
llms.txt-struct Cli {
llms.txt-    // ... existing options ...
llms.txt-    
--
llms.txt-// In tests/repair_integration.rs
llms.txt-#[cfg(test)]
llms.txt-mod integration_tests {
llms.txt:    use vexy_json::{parse_with_fallback, ParserOptions, ParsingTier};
llms.txt-    
llms.txt-    #[test]
llms.txt-    fn test_complex_bracket_mismatch() {
--
llms.txt-```rust
llms.txt-// In benches/repair_benchmark.rs
llms.txt-use criterion::{black_box, criterion_group, criterion_main, Criterion};
llms.txt:use vexy_json::{parse_with_fallback, ParserOptions};
llms.txt-
llms.txt-fn bench_parsing_tiers(c: &mut Criterion) {
llms.txt-    let mut group = c.benchmark_group("parsing_tiers");
--
llms.txt-```markdown
llms.txt-## Enhanced Error Recovery
llms.txt-
llms.txt:vexy_json now features advanced error recovery capabilities that can handle mismatched brackets and braces:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_fallback, ParserOptions};
llms.txt-
llms.txt-// This will now succeed with automatic repair
llms.txt-let broken_json = r#"{"key": "value"]"#;
--
llms.txt-### Three-Tier Parsing
llms.txt-
llms.txt-1. **Fast Tier**: Uses `serde_json` for maximum performance on valid JSON
llms.txt:2. **Forgiving Tier**: Uses vexy_json's forgiving features for relaxed JSON syntax
llms.txt-3. **Repair Tier**: Uses `json-repair` for automatic bracket balancing and error correction
llms.txt-```
llms.txt-
--
llms.txt-///
llms.txt-/// This function implements a three-tier parsing strategy:
llms.txt-/// 1. Fast path using `serde_json` for valid JSON
llms.txt:/// 2. Forgiving path using vexy_json's tolerant parsing
llms.txt-/// 3. Repair path using `json-repair` for bracket mismatches
llms.txt-///
llms.txt-/// # Examples
llms.txt-///
llms.txt-/// ```rust
llms.txt:/// use vexy_json::{parse_with_fallback, ParserOptions};
llms.txt-///
llms.txt-/// // Valid JSON - uses fast path
llms.txt-/// let valid = r#"{"key": "value"}"#;
--
llms.txt-
llms.txt-```rust
llms.txt-// This still works exactly as before
llms.txt:let value = vexy_json::parse(r#"{"key": "value"}"#)?;
llms.txt-```
llms.txt-
llms.txt-### 11.2 New Features Adoption
llms.txt-
llms.txt-```rust
llms.txt-// Opt into new features gradually
llms.txt:use vexy_json::{parse_with_fallback, ParserOptions};
llms.txt-
llms.txt-// Enable repair with configuration
llms.txt-let options = ParserOptions {
--
llms.txt-
llms.txt-## 15. Conclusion
llms.txt-
llms.txt:This specification provides a comprehensive roadmap for integrating `json-repair` into vexy_json while maintaining backward compatibility and performance. The three-tier parsing approach ensures optimal performance for valid JSON while providing robust error recovery for malformed input.
llms.txt-
llms.txt:The implementation will significantly expand vexy_json's capabilities while maintaining its core design principles of being fast, forgiving, and user-friendly.
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt-<document index="163">
llms.txt-<source>issues/107.txt</source>
llms.txt-<document_content>
llms.txt:$ ./target/release/vexy_json --help
llms.txt-A forgiving JSON parser - Rust port of jsonic
llms.txt-
llms.txt:Usage: vexy_json
llms.txt-
llms.txt-Options:
llms.txt-  -h, --help     Print help
llms.txt-  -V, --version  Print version
llms.txt:(.venv) ~/Developer/vcs/github.twardoch/pub/vexy_json
llms.txt:[14:53:12] $ ./target/release/vexy_json-cli --help
llms.txt:Usage: vexy_json-cli
llms.txt-
llms.txt-Options:
llms.txt-  -h, --help     Print help
llms.txt-  -V, --version  Print version
llms.txt-
llms.txt-
llms.txt:——— why two executables? (vexy_json and vexy_json-cli) 
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-<document index="167">
llms.txt-<source>issues/602.txt</source>
llms.txt-<document_content>
llms.txt:Read the @llms.txt code snapshot and into `vexify.txt` record all occurrences of all case variants of `vexy_json` found in the codebase. 
llms.txt-
llms.txt:Write a `vexify.py` tool that will generally replace both in the current codebase and in the entire git history the name `vexy_json` with `vexy json` but in a smart way: 
llms.txt-
llms.txt:- In filenames, it should replace `vexy_json` with `vexy_json`
llms.txt:- In code, it should replace `vexy_json` with `vexy_json` when it is used as a variable or function name, not in comments or strings.
llms.txt-- In documentation, comments and UI strings (like in HTML) it should replace the all-uppercase `Vexy JSON` with `Vexy JSON`.
llms.txt-- Cases like `VexyJSONConfig`, `VexyJSONWrapper` or so should become `VexyJSONConfig`, `VexyJSONWrapper`
llms.txt:- It should report all changes made, including filenames, code changes, and documentation updates, and then report the places where `vexy_json` still occurs.
llms.txt-
llms.txt-Make it Fire CLI. If `--deep` is given, it should also rewrite the git history. Without `--deep`, it should only modify the current state of the codebase.
llms.txt-</document_content>
--
llms.txt-<document index="168">
llms.txt-<source>issues/610.txt</source>
llms.txt-<document_content>
llms.txt:Read the @llms.txt codebase snapshot. Note: recently we have renamed the project from `ZZSON` to `Vexy JSON`. We have search-replaced many strings like `zzson` to `vexy_json`, but mistakes may have been made. Please review all files, check if the changes have been performed consistently. . Run build scripts. Then into @PLAN.md write a detailed plan to improve and fix the code, and then into @TODO.md write a linearized version of that. Then /work on it. 
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt-<document index="169">
llms.txt-<source>issues/611.txt</source>
llms.txt-<document_content>
llms.txt:Read @grep.txt (the result of running `rg -C 3 "vexy" > grep.txt`) to see a list of occurrences of the phrase `vexy`. Our project is called "Vexy JSON". Review where we should use `Vexy JSON` and were `VEXYJSON` and where `vexy_json` and where `vexy-json` etc. Then into @TODO.md write a VERY DETAILED plan that will discuss in which occurrences we should keep the current spelling, and in which occurrences we need to change it and how. 
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
--
llms.txt-<source>llms.txt</source>
llms.txt-<document_content>
llms.txt-Project Structure:
llms.txt:📁 vexy-json
llms.txt-├── 📁 .github
llms.txt-│   ├── 📁 ISSUE_TEMPLATE
llms.txt-│   │   ├── 📄 bug_report.md
--
llms.txt-│       │   ├── 📄 basic_usage.py
llms.txt-│       │   └── 📄 config_parser.py
llms.txt-│       ├── 📁 src
llms.txt:│       │   ├── 📁 vexy_json
llms.txt-│       │   │   └── 📄 __init__.py
llms.txt-│       │   └── 📄 lib.rs
llms.txt-│       ├── 📁 tests
llms.txt:│       │   └── 📄 test_vexy_json.py
llms.txt-│       ├── 📄 Cargo.toml
llms.txt-│       ├── 📄 pyproject.toml
llms.txt-│       └── 📄 README.md
--
llms.txt-│   │   │   ├── 📄 cpp_example.cpp
llms.txt-│   │   │   └── 📄 Makefile
llms.txt-│   │   ├── 📁 include
llms.txt:│   │   │   ├── 📄 vexy_json.h
llms.txt:│   │   │   └── 📄 vexy_json.hpp
llms.txt-│   │   ├── 📁 src
llms.txt-│   │   │   └── 📄 lib.rs
llms.txt-│   │   ├── 📄 build.rs
--
llms.txt-│   │   └── 📄 PHASE_2_COMPLETION_SUMMARY.md
llms.txt-│   ├── 📁 python
llms.txt-│   │   ├── 📁 python
llms.txt:│   │   │   └── 📁 vexy_json
llms.txt-│   │   │       ├── 📄 __init__.py
llms.txt-│   │   │       ├── 📄 __init__.pyi
llms.txt-│   │   │       └── 📄 py.typed
--
llms.txt-│   │   ├── 📁 tests
llms.txt-│   │   │   ├── 📄 test_basic.py
llms.txt-│   │   │   ├── 📄 test_typing.py
llms.txt:│   │   │   └── 📄 test_vexy_json.py
llms.txt-│   │   ├── 📄 build.rs
llms.txt-│   │   ├── 📄 Cargo.toml
llms.txt-│   │   ├── 📄 pyproject.toml
--
llms.txt-│   ├── 📄 transform.md
llms.txt-│   ├── 📄 troubleshooting.md
llms.txt-│   ├── 📄 usage.md
llms.txt:│   ├── 📄 vexy_json-tool.md
llms.txt-│   ├── 📄 wasm.md
llms.txt-│   └── 📄 web-tool.md
llms.txt-├── 📁 examples
--
llms.txt-│   └── 📄 trace_comment_parse.rs
llms.txt-├── 📁 Formula
llms.txt-│   ├── 📄 README.md
llms.txt:│   └── 📄 vexy_json.rb
llms.txt-├── 📁 fuzz
llms.txt-│   ├── 📁 artifacts
llms.txt-│   │   ├── 📁 json_structure
--
llms.txt-│   │       ├── 📁 trace_parse-3ssm7sp9sn0g0
llms.txt-│   │       │   └── 📁 s-h94lxw93bs-0vx2y5h-91t3zm6eu39qrl7heuv6b252t
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-0gb56plrh2kbz
llms.txt-│   │       │   └── 📁 s-h94q5v350p-1ipl8ej-4g0j0yzz6kj4wsff0rkz4whra
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-0j003oif6icfz
llms.txt-│   │       │   └── 📁 s-h94lxtvprx-1nd35yr-d9ji6mqi8yg4wlj34ej4lm8e9
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-0lx4z1f7yos98
llms.txt-│   │       │   └── 📁 s-h94qa11m4a-1v1mg76-41z48jkkso7esnp76d8t8ejsy
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-0wrlmmo5dnbek
llms.txt-│   │       │   └── 📁 s-h94q5vmhkq-19sv387-5i9q8fvmvcpwdsylufqobasnb
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-110y1f142yh5u
llms.txt-│   │       │   └── 📁 s-h94q9vymtw-0bvwek1-63nwsqmc00544jk62283w75so
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-13enjyiqbpygv
llms.txt-│   │       │   └── 📁 s-h94lx5z99l-1nx47xh-9bpslqjnb3g3x5bc3csxjbz96
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-1ie2sfvp6h2va
llms.txt-│   │       │   └── 📁 s-h94qaipcfp-1lwl9k4-3qf1wzk3sw9qwbk7xuratyzut
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-1qub0bwt8ubsv
llms.txt-│   │       │   └── 📁 s-h94mpybgyq-1xt47pj-aavdcqtgp3fnocsv7ziy11idm
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-1ubcld57ngxkr
llms.txt-│   │       │   └── 📁 s-h94lx517ix-1o0aw5h-bs1193etxol4rcw38ilxvn7qw
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-1x53m5wo2sl7b
llms.txt-│   │       │   └── 📁 s-h94q5vmo2u-1tjfvcr-dv86o6hr0gbtt5uamdo4uahjx
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-1y20a1apsue9j
llms.txt-│   │       │   └── 📁 s-h94lxuvyx0-1dcbl7k-43tamkdbfd5jzhcepen167rbm
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-20oy8vnx9hq2n
llms.txt-│   │       │   └── 📁 s-h94lxsxz1c-1e9y478-9ecplutrz5b4tntwjlxhsmjeg
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-26zkm1a7g0dks
llms.txt-│   │       │   └── 📁 s-h94lx5zdp3-1i07583-duwa1f0fle6xdpfjo5rbcjipg
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-2rmhgwlzisa4m
llms.txt-│   │       │   └── 📁 s-h94q5v4i5l-0utkprk-207775kpjleznjw58ku5lls42
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-2zwpzxwslvbw9
llms.txt-│   │       │   └── 📁 s-h94q5v607o-0aauca2-1ej0gzvprt4mq0ypbnu8g4rii
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-36afk93hl19yy
llms.txt-│   │       │   └── 📁 s-h94q4dhaw2-1g4kmp5-6595d2wzpj7gofgage6xltr36
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-3rp5z1e4fxv67
llms.txt-│   │       │   └── 📁 s-h94lxw70kq-11j7h2m-8wd4hnazqc181whhd0pfrmv8b
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json-3v9aggw93jj3i
llms.txt-│   │       │   └── 📁 s-h94q5v3dum-0piqbmm-dgjmahr5hhsyxkah94rlu2ly9
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_c_api-0qqmlo9oesx21
llms.txt-│   │       │   └── 📁 s-h94q5v3d1s-0pgt74s-9svlumrqpzg52s56gppbdt8gh
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_c_api-0tpebst6siqty
llms.txt-│   │       │   └── 📁 s-h94lxu9p31-1cup6n3-cw1z78seuot9mmc83o7bktwii
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_c_api-1b3jjubb7lv0u
llms.txt-│   │       │   └── 📁 s-h94lx5ycgv-188it34-0zehocg9n6z1ghntphi75zbvh
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_c_api-34vfbtsvzy2n2
llms.txt-│   │       │   └── 📁 s-h94q5v3ci3-19y7jwh-b9c4fttxoxvtqwzlht65keo2j
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-06xwosag7nk4l
llms.txt-│   │       │   └── 📁 s-h94mqoxbcw-0w913ce-16xunhlrh7orwa1apa4rnqsjr
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-0it0hyr543gsk
llms.txt-│   │       │   └── 📁 s-h94mqm90c4-1r9c2i0-34vm0ognny3d0g8m9dy7lea5y
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-13lamtqz69oix
llms.txt-│   │       │   └── 📁 s-h94q4cfl7f-0wx3roq-8eqvyfaxl72w8itgkavv5piux
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-14m8olzhd98dn
llms.txt-│   │       │   └── 📁 s-h94l5vb4te-0yjeu5h-working
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-1g2het7lfe4aa
llms.txt-│   │       │   └── 📁 s-h94qadzm36-1oa2fp1-3yo1cqjpj2bhllree3sajh4rx
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-230vd4pzxhxq8
llms.txt-│   │       │   └── 📁 s-h94q5rm9gs-06pwgd7-ayt2qiwlwru9k92pw14xtmyi4
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-28s3d1kj2qmgp
llms.txt-│   │       │   └── 📁 s-h94lxqoha3-0l9368u-drpx4ayume9p51o88yu1muuyp
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-2dsang4gfhdjk
llms.txt-│   │       │   └── 📁 s-h94lxti4rp-0wf02nh-bp3t8bq5sxdtt0vbd26drwij5
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-2gngb8sv4nd3e
llms.txt-│   │       │   └── 📁 s-h94mpx62ce-1ot068v-33l9awvl2wbf2jau3p3ozzp0c
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-31nnwuidm0y2z
llms.txt-│   │       │   └── 📁 s-h94lx2qffr-1f3aoeo-3ls515zfdytgh7lhylo65w05o
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-3sx8xfx8vanqz
llms.txt-│   │       │   └── 📁 s-h94q5rl0y7-09qp4il-bbl5722i8sw8zy966nx7vb4oq
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_core-3te8417r5nxq8
llms.txt-│   │       │   └── 📁 s-h94q9tihxx-0116f71-8703yb80wiuq89dzjkfnschip
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-0725khmyocr0n
llms.txt-│   │       │   └── 📁 s-h94q5v2v67-0uwtryb-4e88q227tn12ard60hh5u7zyb
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-0vzy8ffsqe25m
llms.txt-│   │       │   └── 📁 s-h94lxsu3qs-0twyynw-214n76deb33gsu0j75r8krved
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-10tlyrhdp7uib
llms.txt-│   │       │   └── 📁 s-h94q9vp85z-0iv0l0e-3xd683kiqazr84xappd3foa8h
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-16tavgq2g3bme
llms.txt-│   │       │   └── 📁 s-h94q4dd827-12nsplb-430pdgta55x5utoseg3ckepjp
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-1c1800ncu9y45
llms.txt-│   │       │   └── 📁 s-h94lx4ysdh-0n25quq-8cztwun18aa7shwh1owhj3jp5
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-2tifbfs3whk9i
llms.txt-│   │       │   └── 📁 s-h94lxtw59s-0hsitax-0qsowemq0y3jtl6epwyuuds1w
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-3omqqeduu7at9
llms.txt-│   │       │   └── 📁 s-h94qaibzrh-0hlnq9n-ebzru4uzcovhvfq4zs6sk5ywl
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_serde-3onukjkuw0du5
llms.txt-│   │       │   └── 📁 s-h94q5uxj4v-0449lmw-f3rhrr1e0xvrijyn30yd8cx6i
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_wasm-0efx6y0te058o
llms.txt-│   │       │   └── 📁 s-h94q5v1z7x-06gvo6n-4xh2d9tgva7xxm5bsf1u7h135
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_wasm-10zshacvya02n
llms.txt-│   │       │   └── 📁 s-h94lx5ykol-0prsxya-4mb6r2jofcppp6x5o5v0swsel
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       ├── 📁 vexy_json_wasm-1jdxu4mfpumao
llms.txt-│   │       │   └── 📁 s-h94q5v2sgi-0a7yj3r-e1v4c6euctwqpnym6kp7pmpus
llms.txt-│   │       │       └── ... (depth limit reached)
llms.txt:│   │       └── 📁 vexy_json_wasm-1wktcdolw6zze
llms.txt-│   │           └── 📁 s-h94lxvb02b-0cbapxa-9sfup34g2roizsqlmb6rl9wte
llms.txt-│   │               └── ... (depth limit reached)
llms.txt-│   ├── 📁 release
--
llms.txt-<document_content>
llms.txt----
llms.txt-name: Bug report
llms.txt:about: Create a report to help us improve vexy_json
llms.txt-title: '[BUG] '
llms.txt-labels: bug
llms.txt-assignees: ''
--
llms.txt-```
llms.txt-
llms.txt----
llms.txt:*This issue was created using the vexy_json issue template. Please fill out all relevant sections to help us resolve your issue quickly.*
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-contact_links:
llms.txt-  - about: Check the documentation for usage examples and API reference
llms.txt-    name: � Documentation
llms.txt:    url: https://twardoch.github.io/vexy_json/
llms.txt:  - about: Try vexy_json in your browser with our interactive web tool
llms.txt-    name: � Web Tool
llms.txt:    url: https://twardoch.github.io/vexy_json/tool.html
llms.txt:  - about: Ask questions, share ideas, and discuss vexy_json with the community
llms.txt-    name: � Discussions
llms.txt:    url: https://github.com/twardoch/vexy_json/discussions
llms.txt-  - about: View package information and installation instructions
llms.txt-    name: 📦 crates.io
llms.txt:    url: https://crates.io/crates/vexy_json
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-<document_content>
llms.txt----
llms.txt-name: Feature request
llms.txt:about: Suggest an idea for vexy_json
llms.txt-title: '[FEATURE] '
llms.txt-labels: enhancement
llms.txt-assignees: ''
--
llms.txt-- [ ] Separate feature flag
llms.txt-
llms.txt----
llms.txt:*This issue was created using the vexy_json issue template. Please fill out all relevant sections to help us prioritize and implement your feature request.*
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-<document_content>
llms.txt----
llms.txt-name: Performance issue
llms.txt:about: Report a performance problem with vexy_json
llms.txt-title: '[PERFORMANCE] '
llms.txt-labels: performance
llms.txt-assignees: ''
--
llms.txt-If you've compared with other JSON parsers, please share the results:
llms.txt-- **Other parser**: [e.g. JSON.parse(), serde_json]
llms.txt-- **Other parser time**: [e.g. 100ms]
llms.txt:- **vexy_json time**: [e.g. 5000ms]
llms.txt-
llms.txt-**Additional context**
llms.txt-Add any other context about the performance issue here.
llms.txt-
llms.txt----
llms.txt:*This issue was created using the vexy_json issue template. Performance issues help us optimize the parser for real-world use cases.*
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-        run: |
llms.txt-          cd docs
llms.txt-          bundle install
llms.txt:          bundle exec jekyll build --baseurl "/vexy_json"
llms.txt-        env:
llms.txt-          JEKYLL_ENV: production
llms.txt-
--
llms.txt-            ### macOS
llms.txt-            ```bash
llms.txt-            # Using Homebrew
llms.txt:            brew install vexy_json
llms.txt-
llms.txt-            # Or download the installer
llms.txt:            # Download vexy_json-${{ steps.get_version.outputs.version }}-macos.dmg below
llms.txt-            ```
llms.txt-
llms.txt-            ### Linux
llms.txt-            ```bash
llms.txt-            # Download and extract
llms.txt:            curl -L https://github.com/twardoch/vexy_json/releases/download/v${{ steps.get_version.outputs.version }}/vexy_json-${{ steps.get_version.outputs.version }}-linux-x86_64.tar.gz | tar xz
llms.txt:            sudo mv vexy_json /usr/local/bin/
llms.txt-            ```
llms.txt-
llms.txt-            ### Windows
llms.txt-            ```powershell
llms.txt:            # Download vexy_json-${{ steps.get_version.outputs.version }}-windows-x86_64.zip below
llms.txt-            # Extract and add to PATH
llms.txt-            ```
llms.txt-
llms.txt-            ### Cargo
llms.txt-            ```bash
llms.txt:            cargo install vexy_json-cli
llms.txt-            ```
llms.txt-
llms.txt-            ## What's Changed
llms.txt-
llms.txt:            See [CHANGELOG.md](https://github.com/twardoch/vexy_json/blob/v${{ steps.get_version.outputs.version }}/CHANGELOG.md) for details.
llms.txt-
llms.txt-            ## Assets
llms.txt-
llms.txt:            - **macOS**: `vexy_json-${{ steps.get_version.outputs.version }}-macos.dmg` - Installer with PKG
llms.txt:            - **macOS**: `vexy_json-${{ steps.get_version.outputs.version }}-macos.zip` - Standalone binary
llms.txt:            - **Linux**: `vexy_json-${{ steps.get_version.outputs.version }}-linux-x86_64.tar.gz` - x86_64 binary
llms.txt:            - **Linux**: `vexy_json-${{ steps.get_version.outputs.version }}-linux-aarch64.tar.gz` - ARM64 binary
llms.txt:            - **Windows**: `vexy_json-${{ steps.get_version.outputs.version }}-windows-x86_64.zip` - x86_64 binary
llms.txt:            - **Source**: `vexy_json-${{ steps.get_version.outputs.version }}.tar.gz` - Source code
llms.txt-
llms.txt-  build-binaries:
llms.txt-    name: Build ${{ matrix.target }}
--
llms.txt-
llms.txt-      - name: Build
llms.txt-        run: |
llms.txt:          cargo build --release --target ${{ matrix.target }} --bin vexy_json
llms.txt-
llms.txt-      - name: Package Binary
llms.txt-        shell: bash
llms.txt-        run: |
llms.txt-          cd target/${{ matrix.target }}/release
llms.txt-          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
llms.txt:            7z a ../../../vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip vexy_json.exe
llms.txt-          else
llms.txt:            tar czf ../../../vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz vexy_json
llms.txt-          fi
llms.txt-
llms.txt-      - name: Upload Binary
--
llms.txt-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
llms.txt-        with:
llms.txt-          upload_url: ${{ needs.create-release.outputs.upload_url }}
llms.txt:          asset_path: ./vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
llms.txt:          asset_name: vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
llms.txt-          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}
llms.txt-
llms.txt-  build-macos-installer:
--
llms.txt-
llms.txt-      - name: Build Universal Binary
llms.txt-        run: |
llms.txt:          cargo build --release --target x86_64-apple-darwin --bin vexy_json
llms.txt:          cargo build --release --target aarch64-apple-darwin --bin vexy_json
llms.txt:          lipo -create -output vexy_json \
llms.txt:            target/x86_64-apple-darwin/release/vexy_json \
llms.txt:            target/aarch64-apple-darwin/release/vexy_json
llms.txt:          chmod +x vexy_json
llms.txt-
llms.txt-      - name: Create macOS ZIP
llms.txt-        run: |
llms.txt:          zip -9 vexy_json-${{ needs.create-release.outputs.version }}-macos.zip vexy_json
llms.txt-
llms.txt-      - name: Create macOS Installer
llms.txt-        run: |
--
llms.txt-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
llms.txt-        with:
llms.txt-          upload_url: ${{ needs.create-release.outputs.upload_url }}
llms.txt:          asset_path: ./vexy_json-${{ needs.create-release.outputs.version }}-macos.zip
llms.txt:          asset_name: vexy_json-${{ needs.create-release.outputs.version }}-macos.zip
llms.txt-          asset_content_type: application/zip
llms.txt-
llms.txt-      - name: Upload macOS DMG
--
llms.txt-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
llms.txt-        with:
llms.txt-          upload_url: ${{ needs.create-release.outputs.upload_url }}
llms.txt:          asset_path: ./dist/vexy_json-${{ needs.create-release.outputs.version }}.dmg
llms.txt:          asset_name: vexy_json-${{ needs.create-release.outputs.version }}-macos.dmg
llms.txt-          asset_content_type: application/x-apple-diskimage
llms.txt-
llms.txt-  build-wasm:
--
llms.txt-      - name: Package WASM
llms.txt-        run: |
llms.txt-          cd crates/wasm
llms.txt:          tar czf ../../vexy_json-wasm-${{ needs.create-release.outputs.version }}.tar.gz pkg/
llms.txt-
llms.txt-      - name: Upload WASM Package
llms.txt-        uses: actions/upload-release-asset@v1
--
llms.txt-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
llms.txt-        with:
llms.txt-          upload_url: ${{ needs.create-release.outputs.upload_url }}
llms.txt:          asset_path: ./vexy_json-wasm-${{ needs.create-release.outputs.version }}.tar.gz
llms.txt:          asset_name: vexy_json-wasm-${{ needs.create-release.outputs.version }}.tar.gz
llms.txt-          asset_content_type: application/gzip
llms.txt-
llms.txt-  publish-crates:
--
llms.txt-          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
llms.txt-        run: |
llms.txt-          # Publish in dependency order
llms.txt:          cargo publish -p vexy_json-core
llms.txt-          sleep 30
llms.txt:          cargo publish -p vexy_json-cli
llms.txt-          sleep 30
llms.txt:          cargo publish -p vexy_json-wasm
llms.txt-
llms.txt-  publish-npm:
llms.txt-    name: Publish to NPM
--
llms.txt-        run: |
llms.txt-          echo "Checking WASM build outputs..."
llms.txt-          ls -la docs/pkg/
llms.txt:          if [ ! -f "docs/pkg/vexy_json.js" ] || [ ! -f "docs/pkg/vexy_json_bg.wasm" ]; then
llms.txt-            echo "❌ WASM build failed - missing required files"
llms.txt-            exit 1
llms.txt-          fi
llms.txt-          echo "✅ WASM build successful"
llms.txt-          echo "Bundle sizes:"
llms.txt:          du -h docs/pkg/vexy_json.js docs/pkg/vexy_json_bg.wasm
llms.txt-
llms.txt-      - name: Upload WASM artifacts
llms.txt-        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
--
llms.txt-              await page.goto(`http://localhost:${port}/tool.html`);
llms.txt-              
llms.txt-              // Wait for WASM to load
llms.txt:              await page.waitForFunction(() => window.vexy_json !== undefined, { timeout: 10000 });
llms.txt-              
llms.txt-              // Test basic parsing
llms.txt-              const result = await page.evaluate(() => {
--
llms.txt-                
llms.txt-                const results = testCases.map(test => {
llms.txt-                  try {
llms.txt:                    const parsed = window.vexy_json.parse(test.input);
llms.txt-                    return { input: test.input, success: true, parsed };
llms.txt-                  } catch (e) {
llms.txt-                    return { input: test.input, success: false, error: e.message };
--
llms.txt-              const perfResult = await page.evaluate(() => {
llms.txt-                const largeJson = JSON.stringify(Array(1000).fill({key: "value"}));
llms.txt-                const start = performance.now();
llms.txt:                window.vexy_json.parse(largeJson);
llms.txt-                const end = performance.now();
llms.txt-                return end - start;
llms.txt-              });
--
llms.txt-      - name: Print deployment URL
llms.txt-        run: |
llms.txt-          echo "🚀 Deployed to GitHub Pages!"
llms.txt:          echo "📍 Tool URL: https://twardoch.github.io/vexy_json/tool.html"
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
--
llms.txt-
llms.txt-## 1. Project Overview
llms.txt-
llms.txt:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-
llms.txt-## 2. Development Status
llms.txt-
--
llms.txt-    -   `crates/core/examples/error_reporting.rs`: Example for error reporting.
llms.txt--   `crates/cli`: The command-line interface.
llms.txt-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:-   `crates/c-api`: Provides C and C++ bindings, including `examples/`, `include/` (with `vexy_json.h` and `vexy_json.hpp`), and `src/lib.rs`.
llms.txt:-   `crates/python`: Provides Python bindings, including `python/vexy_json/__init__.py`, `src/lib.rs`, and `tests/`.
llms.txt:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`, with `src/lib.rs`.
llms.txt:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments, including `src/lib.rs` and `test.mjs`.
llms.txt--   `crates/test-utils`: Utility functions for testing, with `src/lib.rs`.
llms.txt-
llms.txt-### 3.2. Core Features
--
llms.txt-    -   Property-based tests are implemented using `proptest` in `tests/property_tests.rs`.
llms.txt--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json`.
llms.txt:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-
llms.txt-## 4. Development Workflow
llms.txt-
--
llms.txt-### 🔧 Fixed
llms.txt-
llms.txt-#### Post-Migration Cleanup (v2.3.1)
llms.txt:- Fixed C API header struct naming mismatch: `vexy_json_parser_options` → `VexyJsonParserOptions`
llms.txt-- Fixed Python test file naming inconsistencies: `VexyJSONParser` → `VexyJsonParser`
llms.txt-- Added missing struct fields to enable compilation:
llms.txt-  - Added `confidence` field to `ContextRule` struct
--
llms.txt-  - Fixed unreachable patterns
llms.txt-
llms.txt-### 🚀 Added
llms.txt:- Created `vexify.py` tool for renaming project from vexy_json to vexy_json
llms.txt-  - Intelligent handling of different contexts (filenames, code, documentation)
llms.txt-  - Support for compound words (e.g., VexyJSONConfig → VexyJSONConfig)
llms.txt-  - Optional `--deep` flag for git history rewriting
--
llms.txt-
llms.txt-**Old (v1.x):**
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-let value = parse(json_string)?;
llms.txt-```
llms.txt-
llms.txt-**New (v2.0) - Still Compatible:**
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-let value = parse(json_string)?; // Still works!
llms.txt-```
llms.txt-
llms.txt-**New (v2.0) - Enhanced Features:**
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_options, ParserOptions};
llms.txt:use vexy_json::streaming::StreamingParser;
llms.txt:use vexy_json::parallel_chunked::parse_parallel_chunked;
llms.txt-
llms.txt-// Advanced options
llms.txt-let options = ParserOptions {
--
llms.txt-
llms.txt-### Release Links
llms.txt-
llms.txt:[2.0.0]: https://github.com/twardoch/vexy_json/compare/v1.5.27...v2.0.0
llms.txt:[1.5.27]: https://github.com/twardoch/vexy_json/compare/v1.5.26...v1.5.27
llms.txt:[1.5.26]: https://github.com/twardoch/vexy_json/compare/v1.5.25...v1.5.26
llms.txt:[1.5.25]: https://github.com/twardoch/vexy_json/compare/v1.5.24...v1.5.25
llms.txt:[1.5.24]: https://github.com/twardoch/vexy_json/compare/v1.5.23...v1.5.24
llms.txt:[1.5.23]: https://github.com/twardoch/vexy_json/releases/tag/v1.5.23
llms.txt:[Unreleased]: https://github.com/twardoch/vexy_json/compare/v2.0.0...HEAD
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-
llms.txt-## 1. Project Overview
llms.txt-
llms.txt:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-
llms.txt-## 2. Development Status
llms.txt-
--
llms.txt-    -   `crates/core/examples/error_reporting.rs`: Example for error reporting.
llms.txt--   `crates/cli`: The command-line interface.
llms.txt-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:-   `crates/c-api`: Provides C and C++ bindings, including `examples/`, `include/` (with `vexy_json.h` and `vexy_json.hpp`), and `src/lib.rs`.
llms.txt:-   `crates/python`: Provides Python bindings, including `python/vexy_json/__init__.py`, `src/lib.rs`, and `tests/`.
llms.txt:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`, with `src/lib.rs`.
llms.txt:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments, including `src/lib.rs` and `test.mjs`.
llms.txt--   `crates/test-utils`: Utility functions for testing, with `src/lib.rs`.
llms.txt-
llms.txt-### 3.2. Core Features
--
llms.txt-    -   Property-based tests are implemented using `proptest` in `tests/property_tests.rs`.
llms.txt--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json`.
llms.txt:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-
llms.txt-## 4. Development Workflow
llms.txt-
--
llms.txt-
llms.txt-
llms.txt-[package]
llms.txt:name = "vexy_json"
llms.txt-version = "2.2.3"
llms.txt-edition = "2021"
llms.txt-description = "A forgiving JSON parser that accepts non-standard JSON formats"
llms.txt-license = "MIT OR Apache-2.0"
llms.txt:repository = "https://github.com/twardoch/pub/vexy_json"
llms.txt:homepage = "https://github.com/twardoch/pub/vexy_json"
llms.txt-keywords = [ "json", "parser", "forgiving", "relaxed", "lenient" ]
llms.txt-categories = [ "parsing", "data-structures", "web-programming" ]
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "crates/core"
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-serde]
llms.txt-path = "crates/serde"
llms.txt-optional = true
llms.txt-
llms.txt-
llms.txt-[features]
llms.txt-default = [ "serde" ]
llms.txt:serde = [ "vexy_json-serde" ]
llms.txt-
llms.txt-
llms.txt-[dev-dependencies]
--
llms.txt-<document index="22">
llms.txt-<source>Formula/README.md</source>
llms.txt-<document_content>
llms.txt:# Homebrew Formula for vexy_json
llms.txt-
llms.txt:This directory contains the Homebrew formula for installing vexy_json on macOS.
llms.txt-
llms.txt-## Installation
llms.txt-
llms.txt:To install vexy_json using this formula:
llms.txt-
llms.txt-```bash
llms.txt-# Add this tap (once the formula is in a tap repository)
llms.txt:brew tap twardoch/vexy_json
llms.txt-
llms.txt:# Install vexy_json
llms.txt:brew install vexy_json
llms.txt-```
llms.txt-
llms.txt-Or install directly from the formula file:
llms.txt-
llms.txt-```bash
llms.txt:brew install ./Formula/vexy_json.rb
llms.txt-```
llms.txt-
llms.txt-## Testing the Formula
--
llms.txt-To test the formula locally:
llms.txt-
llms.txt-```bash
llms.txt:brew install --build-from-source ./Formula/vexy_json.rb
llms.txt:brew test vexy_json
llms.txt:brew audit --strict vexy_json
llms.txt-```
llms.txt-
llms.txt-## Updating the Formula
--
llms.txt-1. Update the `url` to point to the new release tag
llms.txt-2. Update the SHA256 checksum:
llms.txt-   ```bash
llms.txt:   curl -sL https://github.com/twardoch/vexy_json/archive/refs/tags/vX.Y.Z.tar.gz | shasum -a 256
llms.txt-   ```
llms.txt-3. Test the formula thoroughly
llms.txt-4. Submit to Homebrew or update your tap
--
llms.txt-</document>
llms.txt-
llms.txt-<document index="23">
llms.txt:<source>Formula/vexy_json.rb</source>
llms.txt-<document_content>
llms.txt-class VexyJson < Formula
llms.txt-  desc "Forgiving JSON parser for Rust - a port of the JavaScript library jsonic"
llms.txt:  homepage "https://github.com/twardoch/vexy_json"
llms.txt:  url "https://github.com/twardoch/vexy_json/archive/refs/tags/v2.0.0.tar.gz"
llms.txt-  sha256 "ce66e4af1e0aeb4f35456eb44aa82d5052e1a26c33adbaa1969284a5aa8c24ab"
llms.txt-  license any_of: ["MIT", "Apache-2.0"]
llms.txt:  head "https://github.com/twardoch/vexy_json.git", branch: "main"
llms.txt-
llms.txt-  depends_on "rust" => :build
llms.txt-
--
llms.txt-
llms.txt-  test do
llms.txt-    # Test basic JSON parsing
llms.txt:    assert_equal '{"key":"value"}', pipe_output("#{bin}/vexy_json", '{"key": "value"}').chomp
llms.txt-
llms.txt-    # Test forgiving JSON features
llms.txt-    forgiving_json = '{ unquoted: true, trailing: "comma", }'
llms.txt:    output = pipe_output("#{bin}/vexy_json", forgiving_json)
llms.txt-    assert_match /"unquoted":true/, output
llms.txt-    assert_match /"trailing":"comma"/, output
llms.txt-
llms.txt-    # Test error repair
llms.txt-    broken_json = '{ "broken": '
llms.txt:    output = pipe_output("#{bin}/vexy_json --repair", broken_json)
llms.txt-    assert_match /"broken":null/, output
llms.txt-
llms.txt-    # Test version
llms.txt:    assert_match version.to_s, shell_output("#{bin}/vexy_json --version")
llms.txt-  end
llms.txt-end
llms.txt-</document_content>
--
llms.txt-
llms.txt-## 1. Project Overview
llms.txt-
llms.txt:`vexy_json` is a forgiving JSON parser implemented in Rust. A reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-
llms.txt-## 2. Development Status
llms.txt-
--
llms.txt-    -   `crates/core/examples/error_reporting.rs`: Example for error reporting.
llms.txt--   `crates/cli`: The command-line interface.
llms.txt-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:-   `crates/c-api`: Provides C and C++ bindings, including `examples/`, `include/` (with `vexy_json.h` and `vexy_json.hpp`), and `src/lib.rs`.
llms.txt:-   `crates/python`: Provides Python bindings, including `python/vexy_json/__init__.py`, `src/lib.rs`, and `tests/`.
llms.txt:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`, with `src/lib.rs`.
llms.txt:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments, including `src/lib.rs` and `test.mjs`.
llms.txt--   `crates/test-utils`: Utility functions for testing, with `src/lib.rs`.
llms.txt-
llms.txt-### 3.2. Core Features
--
llms.txt-    -   Property-based tests are implemented using `proptest` in `tests/property_tests.rs`.
llms.txt--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json`.
llms.txt:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-
llms.txt-## 4. Development Workflow
llms.txt-
--
llms.txt-1. **Old Naming References**: Only 2 files contain "zzson" - both in documentation (PLAN.md and issue 610.txt)
llms.txt-2. **Python Bindings**: Test file previously used `VexyJSONParser` but was fixed to `VexyJsonParser`
llms.txt-3. **Naming Conventions**: Generally consistent across languages:
llms.txt:   - Rust: `vexy_json-*` (crate names), `VexyJson*` (types)
llms.txt-   - C/C++: `VexyJson*` (types)
llms.txt:   - Python: `vexy_json` (package), `VexyJson*` (classes)
llms.txt-   - JavaScript: `VexyJson*` (classes)
llms.txt-   - Documentation: "Vexy JSON" (with space)
llms.txt-
--
llms.txt-## Implementation Plan
llms.txt-
llms.txt-### Phase 1: jsonic References Removal (Immediate - 2-3 hours)
llms.txt:1. **Rename test files**: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
llms.txt-2. **Update documentation**: Remove "jsonic" from HTML, markdown, and tool descriptions
llms.txt:3. **Clean code references**: Replace "jsonic" with "vexy_json" in comments and variable names
llms.txt-4. **Update configurations**: Clean pyproject.toml and Cargo.toml references
llms.txt-5. **Verify completeness**: Re-run grep to ensure no "jsonic" references remain
llms.txt-
--
llms.txt-<document index="27">
llms.txt-<source>README.md</source>
llms.txt-<document_content>
llms.txt:# vexy_json Documentation & Web Tool
llms.txt-
llms.txt:This directory contains the documentation website and interactive web tool for vexy_json.
llms.txt-
llms.txt-## Recent Updates
llms.txt-
--
llms.txt-- **Real-time parsing** with debounced input
llms.txt-- **Syntax highlighting** for JSON input
llms.txt-- **Error highlighting** with position indicators
llms.txt:- **Example library** showcasing vexy_json features
llms.txt-- **Download functionality** for parsed results
llms.txt-- **Share URLs** for collaboration
llms.txt-- **Performance metrics** display
--
llms.txt-
llms.txt-## Phase 1: jsonic References Removal (IMMEDIATE)
llms.txt-
llms.txt:- [ ] Rename test files: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
llms.txt-- [ ] Update documentation: Remove "jsonic" from HTML, markdown files
llms.txt:- [ ] Clean code references: Replace "jsonic" with "vexy_json" in comments/variables
llms.txt-- [ ] Update configurations: Clean pyproject.toml and Cargo.toml references
llms.txt-- [ ] Verify completeness: Re-run grep to ensure no "jsonic" references remain
llms.txt-
--
llms.txt-- `/docs/pkg/package.json` - For web distribution
llms.txt-
llms.txt-### Other Files
llms.txt:- `/Formula/vexy_json.rb` - Homebrew formula (releases only)
llms.txt-- CLI `--version` output
llms.txt-- API version info methods
llms.txt-
--
llms.txt-#### Phase 0: Critical Fixes (Completed)
llms.txt-
llms.txt-1. **Fixed C API struct naming mismatch**
llms.txt:   - Changed `vexy_json_parser_options` to `VexyJsonParserOptions` in vexy_json.h:135
llms.txt-   - This prevents C/C++ linking failures
llms.txt-
llms.txt-2. **Fixed Python test naming issues**
llms.txt:   - Updated test_vexy_json.py to use `VexyJSON` instead of `VEXYJSON`
llms.txt-   - Fixed imports: `VEXYJSONParser` → `VexyJSONParser`, `VEXYJSONConfig` → `VexyJSONConfig`
llms.txt-   - Fixed class name: `VEXYJSONWrapper` → `VexyJSONWrapper`
llms.txt-
--
llms.txt-### Build Output Summary
llms.txt-
llms.txt-```
llms.txt:cargo build --package vexy_json-core --package vexy_json-cli
llms.txt-Finished `dev` profile [unoptimized + debuginfo] target(s) in 9.59s
llms.txt:warning: `vexy_json-core` (lib) generated 24 warnings
llms.txt-```
llms.txt-
llms.txt-### 🔄 Current Work Items
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/benchmark.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct BenchmarkResult {
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/comparison.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/comprehensive_comparison.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct BenchmarkResult {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/lexer_microbenchmarks.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/memory_benchmarks.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct TrackingAllocator {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/parser_comparison.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct TestData {
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/parser_microbenchmarks.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/parsing.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/performance_comparison.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/profiling.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/real_world_benchmarks.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/simd_benchmarks.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/stack_overflow_test.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-<source>bindings/python/Cargo.toml</source>
llms.txt-<document_content>
llms.txt-[package]
llms.txt:name = "vexy_json-python"
llms.txt-version = "2.2.3"
llms.txt-edition = "2021"
llms.txt-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-license = "MIT OR Apache-2.0"
llms.txt:description = "Python bindings for vexy_json - a forgiving JSON parser"
llms.txt:repository = "https://github.com/twardoch/vexy_json"
llms.txt-keywords = [ "json", "parser", "forgiving", "repair", "python" ]
llms.txt-categories = [ "encoding", "parser-implementations" ]
llms.txt-
llms.txt-
llms.txt-[lib]
llms.txt:name = "vexy_json"
llms.txt-crate-type = [ "cdylib" ]
llms.txt-
llms.txt-
--
llms.txt-serde_json = "1.0"
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "../../crates/core"
llms.txt-version = "2.0.0"
llms.txt-
--
llms.txt-<document index="33">
llms.txt-<source>bindings/python/README.md</source>
llms.txt-<document_content>
llms.txt:# vexy_json Python Bindings
llms.txt-
llms.txt-Fast, forgiving JSON parser for Python - a port of the JavaScript library jsonic.
llms.txt-
--
llms.txt-## Installation
llms.txt-
llms.txt-```bash
llms.txt:pip install vexy_json
llms.txt-```
llms.txt-
llms.txt-### Building from source
--
llms.txt-## Quick Start
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Parse forgiving JSON
llms.txt:data = vexy_json.parse('''
llms.txt-{
llms.txt-    // Comments are allowed
llms.txt-    name: "John",        // Unquoted keys
--
llms.txt-Parse a JSON string with default forgiving options.
llms.txt-
llms.txt-```python
llms.txt:data = vexy_json.parse('{"key": "value"}')
llms.txt-```
llms.txt-
llms.txt-#### `parse_with_options(input: str, options: Options) -> Any`
llms.txt-Parse a JSON string with custom options.
llms.txt-
llms.txt-```python
llms.txt:opts = vexy_json.Options(allow_comments=False)
llms.txt:data = vexy_json.parse_with_options(json_str, opts)
llms.txt-```
llms.txt-
llms.txt-#### `dumps(obj: Any, indent: int = None, sort_keys: bool = False) -> str`
llms.txt-Serialize a Python object to JSON string.
llms.txt-
llms.txt-```python
llms.txt:json_str = vexy_json.dumps({"key": "value"}, indent=2)
llms.txt-```
llms.txt-
llms.txt-#### `load(filename: str, options: Options = None) -> Any`
llms.txt-Load JSON from a file.
llms.txt-
llms.txt-```python
llms.txt:data = vexy_json.load("config.json")
llms.txt-```
llms.txt-
llms.txt-#### `dump(obj: Any, filename: str, indent: int = None, sort_keys: bool = False)`
llms.txt-Save Python object as JSON to a file.
llms.txt-
llms.txt-```python
llms.txt:vexy_json.dump(data, "output.json", indent=2)
llms.txt-```
llms.txt-
llms.txt-### Classes
--
llms.txt-Parser configuration options.
llms.txt-
llms.txt-```python
llms.txt:opts = vexy_json.Options(
llms.txt-    allow_comments=True,         # Allow // and /* */ comments
llms.txt-    allow_trailing_commas=True,  # Allow trailing commas
llms.txt-    allow_unquoted_keys=True,    # Allow unquoted object keys
--
llms.txt-Reusable parser instance for better performance when parsing multiple documents.
llms.txt-
llms.txt-```python
llms.txt:parser = vexy_json.Parser(options)
llms.txt-data = parser.parse(json_str)
llms.txt-```
llms.txt-
--
llms.txt-
llms.txt-### Configuration Files
llms.txt-
llms.txt:vexy_json is perfect for configuration files that need to be human-friendly:
llms.txt-
llms.txt-```python
llms.txt:config = vexy_json.parse('''
llms.txt-{
llms.txt-    // Server configuration
llms.txt-    server: {
--
llms.txt-
llms.txt-### Error Recovery
llms.txt-
llms.txt:vexy_json can automatically fix common JSON errors:
llms.txt-
llms.txt-```python
llms.txt-# Missing commas
llms.txt:fixed = vexy_json.parse('{"a": 1 "b": 2}')  # {'a': 1, 'b': 2}
llms.txt-
llms.txt-# Unclosed strings
llms.txt:fixed = vexy_json.parse('{"name": "John')   # {'name': 'John'}
llms.txt-
llms.txt-# Trailing commas
llms.txt:fixed = vexy_json.parse('[1, 2, 3,]')       # [1, 2, 3]
llms.txt-```
llms.txt-
llms.txt-### Strict Mode
--
llms.txt-For standard JSON compliance:
llms.txt-
llms.txt-```python
llms.txt:strict_parser = vexy_json.Parser(vexy_json.Options.strict())
llms.txt-
llms.txt-# This will raise an error
llms.txt-try:
--
llms.txt-
llms.txt-## Performance
llms.txt-
llms.txt:vexy_json is built with Rust and is designed to be fast:
llms.txt-
llms.txt-- Written in Rust for native performance
llms.txt-- Efficient memory usage
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/examples/basic_usage.py
llms.txt-# Language: python
llms.txt-
llms.txt:import vexy_json
llms.txt-
llms.txt-def main(()):
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/examples/config_parser.py
llms.txt-# Language: python
llms.txt-
llms.txt:import vexy_json
llms.txt-import sys
llms.txt-
llms.txt-def load_config((filename=None)):
--
llms.txt-
llms.txt-
llms.txt-[project]
llms.txt:name = "vexy_json"
llms.txt-version = "2.2.3"
llms.txt-description = "A forgiving JSON parser for Python - port of the JavaScript library jsonic"
llms.txt-readme = "README.md"
--
llms.txt-
llms.txt-
llms.txt-[project.urls]
llms.txt:Homepage = "https://github.com/twardoch/vexy_json"
llms.txt:Repository = "https://github.com/twardoch/vexy_json"
llms.txt:Issues = "https://github.com/twardoch/vexy_json/issues"
llms.txt-
llms.txt-
llms.txt-[tool.maturin]
llms.txt-python-source = "src"
llms.txt:module-name = "vexy_json.vexy_json"
llms.txt-features = [ "pyo3/extension-module" ]
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/src/lib.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct ParseError {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/src/vexy_json/__init__.py
llms.txt-# Language: python
llms.txt-
llms.txt:from .vexy_json import (
llms.txt-    parse,
llms.txt-    parse_with_options,
llms.txt-    dumps,
--
llms.txt-)
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/tests/test_vexy_json.py
llms.txt-# Language: python
llms.txt-
llms.txt-import pytest
llms.txt:import vexy_json
llms.txt-import json
llms.txt-import tempfile
llms.txt-import os
--
llms.txt-<document index="35">
llms.txt-<source>build-warnings.txt</source>
llms.txt-<document_content>
llms.txt:   Compiling vexy_json-core v2.2.3 (/Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core)
llms.txt-warning: methods `analyze_custom_error`, `analyze_context_error`, and `analyze_invalid_utf8` are never used
llms.txt-   --> crates/core/src/error/recovery/mod.rs:542:8
llms.txt-    |
--
llms.txt-96 |     max_repairs: usize,
llms.txt-   |     ^^^^^^^^^^^
llms.txt-
llms.txt:warning: `vexy_json-core` (lib) generated 27 warnings
llms.txt:   Compiling vexy_json-cli v2.2.3 (/Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/cli)
llms.txt-    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.92s
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/build.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-<source>build.sh</source>
llms.txt-<document_content>
llms.txt-#!/bin/bash
llms.txt:# Master build script for vexy_json project
llms.txt-# This script runs all build processes in the correct order
llms.txt-
llms.txt-set -e
--
llms.txt-BLUE='\033[0;34m'
llms.txt-NC='\033[0m' # No Color
llms.txt-
llms.txt:echo -e "${BLUE}🚀 vexy_json Master Build Script${NC}"
llms.txt-echo "=============================================="
llms.txt-echo
llms.txt-
--
llms.txt-echo -e "${GREEN}🎉 All build steps completed successfully!${NC}"
llms.txt-echo
llms.txt-echo -e "${BLUE}Build artifacts:${NC}"
llms.txt:echo "  • Rust library: target/release/libvexy_json.rlib"
llms.txt:echo "  • CLI binary: target/release/vexy_json"
llms.txt:echo "  • WebAssembly: docs/pkg/vexy_json_wasm_bg.wasm"
llms.txt:echo "  • Documentation: target/doc/vexy_json/index.html"
llms.txt-
llms.txt-if [[ "$OSTYPE" == "darwin"* ]]; then
llms.txt:    echo "  • macOS installer: vexy_json-${VERSION}-macos.dmg"
llms.txt-fi
llms.txt-
llms.txt-echo
--
llms.txt-<source>crates/c-api/Cargo.toml</source>
llms.txt-<document_content>
llms.txt-[package]
llms.txt:name = "vexy_json-c-api"
llms.txt-version = "2.2.3"
llms.txt-authors = [ "Vexy JSON Contributors" ]
llms.txt-edition = "2021"
llms.txt-license = "MIT OR Apache-2.0"
llms.txt:description = "C API for the vexy_json JSON parser"
llms.txt:repository = "https://github.com/twardoch/pub-vexy_json"
llms.txt-
llms.txt-
llms.txt-[lib]
llms.txt:name = "vexy_json_c_api"
llms.txt-crate-type = [ "cdylib", "staticlib" ]
llms.txt-
llms.txt-
--
llms.txt-serde_json = "1.0"
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "../core"
llms.txt-features = [ "serde" ]
llms.txt-
--
llms.txt-<document index="38">
llms.txt-<source>crates/c-api/README_CPP.md</source>
llms.txt-<document_content>
llms.txt:# vexy_json C++ Header-Only Wrapper
llms.txt-
llms.txt:This directory contains a modern C++ header-only wrapper for the vexy_json JSON parser, providing an idiomatic C++ interface with RAII, exceptions, and STL integration.
llms.txt-
llms.txt-## Features
llms.txt-
llms.txt:- **Header-only**: Just include `vexy_json.hpp` - no additional C++ files to compile
llms.txt-- **RAII**: Automatic memory management with smart pointers
llms.txt-- **Exception safety**: Strong exception guarantee with proper error handling
llms.txt-- **Modern C++**: Uses C++17 features like `std::string_view` and `std::optional`
--
llms.txt-## Requirements
llms.txt-
llms.txt-- C++17 or later compiler
llms.txt:- The vexy_json C library (linked separately)
llms.txt-
llms.txt-## Installation
llms.txt-
llms.txt:1. Include the `vexy_json.hpp` header in your project
llms.txt:2. Link against the vexy_json C library
llms.txt-
llms.txt-## Quick Start
llms.txt-
llms.txt-```cpp
llms.txt:#include "vexy_json.hpp"
llms.txt-
llms.txt-// Simple parsing
llms.txt:std::string json = vexy_json::parse(R"({"key": "value"})");
llms.txt-
llms.txt-// Parsing with options
llms.txt:auto options = vexy_json::ParserOptions()
llms.txt-    .allowComments()
llms.txt-    .allowTrailingCommas()
llms.txt-    .enableRepair();
llms.txt-    
llms.txt:std::string result = vexy_json::parse(input, options);
llms.txt-
llms.txt-// Using a parser instance
llms.txt:vexy_json::Parser parser(options);
llms.txt-std::string result = parser.parseToString(input);
llms.txt-
llms.txt-// Detailed parsing with repair information
llms.txt:auto detailed = vexy_json::parseDetailed(input, options);
llms.txt-std::cout << "JSON: " << detailed.json() << "\n";
llms.txt-for (const auto& repair : detailed.repairs()) {
llms.txt-    std::cout << "Repair: " << repair.description << "\n";
--
llms.txt-
llms.txt-## API Reference
llms.txt-
llms.txt:### Namespace `vexy_json`
llms.txt-
llms.txt:All C++ wrapper functionality is in the `vexy_json` namespace.
llms.txt-
llms.txt-### Classes
llms.txt-
--
llms.txt-- `parse(std::string_view)` - Quick parse with default options
llms.txt-- `parse(std::string_view, const ParserOptions&)` - Quick parse with options
llms.txt-- `parseDetailed(std::string_view, const ParserOptions&)` - Parse with repair info
llms.txt:- `version()` - Get vexy_json library version
llms.txt-
llms.txt-## Examples
llms.txt-
--
llms.txt-## Building the Examples
llms.txt-
llms.txt-```bash
llms.txt:# Assuming you have built the vexy_json C library
llms.txt:g++ -std=c++17 examples/cpp_example.cpp -lvexy_json -o cpp_example
llms.txt-./cpp_example
llms.txt-```
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/c-api/build.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-<document index="39">
llms.txt-<source>crates/c-api/examples/Makefile</source>
llms.txt-<document_content>
llms.txt:# Makefile for vexy_json C++ examples
llms.txt-
llms.txt-CXX = g++
llms.txt-CXXFLAGS = -std=c++17 -Wall -Wextra -O2
llms.txt:LDFLAGS = -L../../../target/release -lvexy_json
llms.txt-INCLUDES = -I../include
llms.txt-
llms.txt-# For macOS, add rpath to find the library
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/c-api/examples/cpp_example.cpp
llms.txt-# Language: cpp
llms.txt-
llms.txt-#include #include <iostream>
llms.txt-#include #include <string>
llms.txt:#include #include "../include/vexy_json.hpp"
llms.txt-
llms.txt-
llms.txt-<document index="40">
llms.txt:<source>crates/c-api/include/vexy_json.h</source>
llms.txt-<document_content>
llms.txt-/**
llms.txt: * @file vexy_json.h
llms.txt: * @brief C API for the vexy_json JSON parser
llms.txt- *
llms.txt: * This header provides a C-compatible API for the vexy_json JSON parser,
llms.txt- * allowing integration with C/C++ applications and other language bindings.
llms.txt- */
llms.txt-
--
llms.txt-#endif
llms.txt-
llms.txt-/**
llms.txt: * @brief Parser options for configuring vexy_json behavior
llms.txt- */
llms.txt-typedef struct VexyJsonParserOptions {
llms.txt-    bool allow_comments;
--
llms.txt-typedef void* VexyJsonParser;
llms.txt-
llms.txt-/**
llms.txt: * @brief Get the version of the vexy_json library
llms.txt- * @return Version string (do not free)
llms.txt- */
llms.txt:const char* vexy_json_version(void);
llms.txt-
llms.txt-/**
llms.txt- * @brief Parse JSON with default options
llms.txt- * @param input The JSON string to parse
llms.txt: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt- */
llms.txt:VexyJsonParseResult vexy_json_parse(const char* input);
llms.txt-
llms.txt-/**
llms.txt- * @brief Parse JSON with custom options
llms.txt- * @param input The JSON string to parse
llms.txt- * @param options Parser options
llms.txt: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt- */
llms.txt:VexyJsonParseResult vexy_json_parse_with_options(const char* input, const VexyJsonParserOptions* options);
llms.txt-
llms.txt-/**
llms.txt- * @brief Parse JSON and get detailed information including repairs
llms.txt- * @param input The JSON string to parse
llms.txt- * @param options Parser options
llms.txt: * @return Detailed result (must be freed with vexy_json_free_detailed_result)
llms.txt- */
llms.txt:VexyJsonDetailedResult vexy_json_parse_detailed(const char* input, const VexyJsonParserOptions* options);
llms.txt-
llms.txt-/**
llms.txt- * @brief Create a new parser instance
llms.txt- * @param options Parser options
llms.txt: * @return Parser handle (must be freed with vexy_json_parser_free)
llms.txt- */
llms.txt:VexyJsonParser vexy_json_parser_new(const VexyJsonParserOptions* options);
llms.txt-
llms.txt-/**
llms.txt- * @brief Parse JSON using a parser instance
llms.txt- * @param parser Parser handle
llms.txt- * @param input The JSON string to parse
llms.txt: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt- */
llms.txt:VexyJsonParseResult vexy_json_parser_parse(VexyJsonParser parser, const char* input);
llms.txt-
llms.txt-/**
llms.txt- * @brief Free a parser instance
llms.txt- * @param parser Parser handle
llms.txt- */
llms.txt:void vexy_json_parser_free(VexyJsonParser parser);
llms.txt-
llms.txt-/**
llms.txt- * @brief Free a parse result
llms.txt- * @param result Parse result to free
llms.txt- */
llms.txt:void vexy_json_free_result(VexyJsonParseResult result);
llms.txt-
llms.txt-/**
llms.txt- * @brief Free a detailed result
llms.txt- * @param result Detailed result to free
llms.txt- */
llms.txt:void vexy_json_free_detailed_result(VexyJsonDetailedResult result);
llms.txt-
llms.txt-/**
llms.txt- * @brief Get default parser options
llms.txt- * @return Default options
llms.txt- */
llms.txt:VexyJsonParserOptions vexy_json_default_options(void);
llms.txt-
llms.txt-#ifdef __cplusplus
llms.txt-}
--
llms.txt-</document>
llms.txt-
llms.txt-<document index="41">
llms.txt:<source>crates/c-api/include/vexy_json.hpp</source>
llms.txt-<document_content>
llms.txt-/**
llms.txt: * @file vexy_json.hpp
llms.txt: * @brief C++ header-only wrapper for the vexy_json JSON parser
llms.txt- *
llms.txt: * This header provides a modern C++ interface for the vexy_json JSON parser,
llms.txt- * with RAII, exceptions, and STL container support.
llms.txt- */
llms.txt-
--
llms.txt-#include <string_view>
llms.txt-#include <utility>
llms.txt-
llms.txt:#include "vexy_json.h"
llms.txt-
llms.txt:namespace vexy_json {
llms.txt-
llms.txt-/**
llms.txt: * @brief Exception thrown by vexy_json operations
llms.txt- */
llms.txt-class ParseError : public std::runtime_error {
llms.txt-public:
llms.txt-    explicit ParseError(const std::string& message) 
llms.txt:        : std::runtime_error("vexy_json parse error: " + message) {}
llms.txt-};
llms.txt-
llms.txt-/**
--
llms.txt- */
llms.txt-class ParserOptions {
llms.txt-public:
llms.txt:    ParserOptions() : options_(vexy_json_default_options()) {}
llms.txt-    
llms.txt-    ParserOptions& allowComments(bool value = true) {
llms.txt-        options_.allow_comments = value;
--
llms.txt-        return *this;
llms.txt-    }
llms.txt-    
llms.txt:    const vexy_json_parser_options* get() const { return &options_; }
llms.txt-    
llms.txt-private:
llms.txt:    vexy_json_parser_options options_;
llms.txt-};
llms.txt-
llms.txt-/**
--
llms.txt-public:
llms.txt-    ParseResult() = default;
llms.txt-    
llms.txt:    explicit ParseResult(vexy_json_parse_result result) 
llms.txt:        : result_(std::make_unique<vexy_json_parse_result>(result)) {
llms.txt-        if (result.error) {
llms.txt-            error_ = result.error;
llms.txt-        }
--
llms.txt-    
llms.txt-    ~ParseResult() {
llms.txt-        if (result_) {
llms.txt:            vexy_json_free_result(*result_);
llms.txt-        }
llms.txt-    }
llms.txt-    
--
llms.txt-    }
llms.txt-    
llms.txt-private:
llms.txt:    std::unique_ptr<vexy_json_parse_result> result_;
llms.txt-    std::optional<std::string> json_;
llms.txt-    std::optional<std::string> error_;
llms.txt-};
--
llms.txt-public:
llms.txt-    DetailedParseResult() = default;
llms.txt-    
llms.txt:    explicit DetailedParseResult(vexy_json_detailed_result result) 
llms.txt:        : result_(std::make_unique<vexy_json_detailed_result>(result)) {
llms.txt-        if (result.error) {
llms.txt-            error_ = result.error;
llms.txt-        }
--
llms.txt-    
llms.txt-    ~DetailedParseResult() {
llms.txt-        if (result_) {
llms.txt:            vexy_json_free_detailed_result(*result_);
llms.txt-        }
llms.txt-    }
llms.txt-    
--
llms.txt-    const std::vector<Repair>& repairs() const { return repairs_; }
llms.txt-    
llms.txt-private:
llms.txt:    std::unique_ptr<vexy_json_detailed_result> result_;
llms.txt-    std::optional<std::string> json_;
llms.txt-    std::optional<std::string> error_;
llms.txt-    std::vector<Repair> repairs_;
--
llms.txt-    Parser() : Parser(ParserOptions{}) {}
llms.txt-    
llms.txt-    explicit Parser(const ParserOptions& options) 
llms.txt:        : parser_(vexy_json_parser_new(options.get())) {
llms.txt-        if (!parser_) {
llms.txt:            throw std::runtime_error("Failed to create vexy_json parser");
llms.txt-        }
llms.txt-    }
llms.txt-    
--
llms.txt-    Parser& operator=(Parser&& other) noexcept {
llms.txt-        if (this != &other) {
llms.txt-            if (parser_) {
llms.txt:                vexy_json_parser_free(parser_);
llms.txt-            }
llms.txt-            parser_ = other.parser_;
llms.txt-            other.parser_ = nullptr;
--
llms.txt-    
llms.txt-    ~Parser() {
llms.txt-        if (parser_) {
llms.txt:            vexy_json_parser_free(parser_);
llms.txt-        }
llms.txt-    }
llms.txt-    
llms.txt-    ParseResult parse(std::string_view input) const {
llms.txt-        std::string input_str(input);
llms.txt:        return ParseResult(vexy_json_parser_parse(parser_, input_str.c_str()));
llms.txt-    }
llms.txt-    
llms.txt-    std::string parseToString(std::string_view input) const {
--
llms.txt-    }
llms.txt-    
llms.txt-private:
llms.txt:    vexy_json_parser parser_;
llms.txt-};
llms.txt-
llms.txt-/**
--
llms.txt- */
llms.txt-inline std::string parse(std::string_view input) {
llms.txt-    std::string input_str(input);
llms.txt:    auto result = ParseResult(vexy_json_parse(input_str.c_str()));
llms.txt-    return result.json();
llms.txt-}
llms.txt-
llms.txt-inline std::string parse(std::string_view input, const ParserOptions& options) {
llms.txt-    std::string input_str(input);
llms.txt:    auto result = ParseResult(vexy_json_parse_with_options(input_str.c_str(), options.get()));
llms.txt-    return result.json();
llms.txt-}
llms.txt-
llms.txt-inline DetailedParseResult parseDetailed(std::string_view input, const ParserOptions& options) {
llms.txt-    std::string input_str(input);
llms.txt:    return DetailedParseResult(vexy_json_parse_detailed(input_str.c_str(), options.get()));
llms.txt-}
llms.txt-
llms.txt-/**
llms.txt: * @brief Get the version of the vexy_json library
llms.txt- */
llms.txt-inline std::string version() {
llms.txt:    return vexy_json_version();
llms.txt-}
llms.txt-
llms.txt:} // namespace vexy_json
llms.txt-
llms.txt-#endif // VEXY_JSON_HPP
llms.txt-</document_content>
--
llms.txt-<document index="42">
llms.txt-<source>crates/c-api/src/lib.rs</source>
llms.txt-<document_content>
llms.txt://! C API for the vexy_json JSON parser.
llms.txt-//!
llms.txt-//! This crate provides a C-compatible API that can be used from C/C++
llms.txt-//! applications and for creating language bindings.
--
llms.txt-use libc::{c_char, size_t};
llms.txt-use std::ffi::{CStr, CString};
llms.txt-use std::ptr;
llms.txt:use vexy_json_core::ast::Value;
llms.txt:use vexy_json_core::{parse, parse_with_options, ParserOptions};
llms.txt-
llms.txt:/// Parser options for configuring vexy_json behavior
llms.txt-#[repr(C)]
llms.txt-pub struct VexyJsonParserOptions {
llms.txt-    pub allow_comments: bool,
--
llms.txt-    options: ParserOptions,
llms.txt-}
llms.txt-
llms.txt:/// Get the version of the vexy_json library
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_version() -> *const c_char {
llms.txt-    static VERSION: &str = concat!(env!("CARGO_PKG_VERSION"), "\0");
llms.txt-    VERSION.as_ptr() as *const c_char
llms.txt-}
llms.txt-
llms.txt-/// Parse JSON with default options
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_parse(input: *const c_char) -> VexyJsonParseResult {
llms.txt-    if input.is_null() {
llms.txt-        return VexyJsonParseResult {
llms.txt-            json: ptr::null_mut(),
--
llms.txt-
llms.txt-/// Parse JSON with custom options
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_parse_with_options(
llms.txt-    input: *const c_char,
llms.txt-    options: *const VexyJsonParserOptions,
llms.txt-) -> VexyJsonParseResult {
--
llms.txt-    }
llms.txt-
llms.txt-    if options.is_null() {
llms.txt:        return vexy_json_parse(input);
llms.txt-    }
llms.txt-
llms.txt-    let input_str = unsafe {
--
llms.txt-
llms.txt-/// Parse JSON and get detailed information including repairs
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_parse_detailed(
llms.txt-    input: *const c_char,
llms.txt-    options: *const VexyJsonParserOptions,
llms.txt-) -> VexyJsonDetailedResult {
llms.txt-    // For now, we'll implement this as a simple parse without repair tracking
llms.txt-    // TODO: Implement actual repair tracking
llms.txt-    let result = if options.is_null() {
llms.txt:        vexy_json_parse(input)
llms.txt-    } else {
llms.txt:        vexy_json_parse_with_options(input, options)
llms.txt-    };
llms.txt-
llms.txt-    VexyJsonDetailedResult {
--
llms.txt-
llms.txt-/// Create a new parser instance
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_parser_new(
llms.txt-    options: *const VexyJsonParserOptions,
llms.txt-) -> *mut VexyJsonParser {
llms.txt-    let rust_options = if options.is_null() {
--
llms.txt-
llms.txt-/// Parse JSON using a parser instance
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_parser_parse(
llms.txt-    parser: *mut VexyJsonParser,
llms.txt-    input: *const c_char,
llms.txt-) -> VexyJsonParseResult {
--
llms.txt-
llms.txt-/// Free a parser instance
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_parser_free(parser: *mut VexyJsonParser) {
llms.txt-    if !parser.is_null() {
llms.txt-        unsafe {
llms.txt-            let _ = Box::from_raw(parser);
--
llms.txt-
llms.txt-/// Free a parse result
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_free_result(result: VexyJsonParseResult) {
llms.txt-    if !result.json.is_null() {
llms.txt-        unsafe {
llms.txt-            let _ = CString::from_raw(result.json);
--
llms.txt-
llms.txt-/// Free a detailed result
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_free_detailed_result(result: VexyJsonDetailedResult) {
llms.txt-    if !result.json.is_null() {
llms.txt-        unsafe {
llms.txt-            let _ = CString::from_raw(result.json);
--
llms.txt-
llms.txt-/// Get default parser options
llms.txt-#[no_mangle]
llms.txt:pub extern "C" fn vexy_json_default_options() -> VexyJsonParserOptions {
llms.txt-    let rust_options = ParserOptions::default();
llms.txt-    rust_options_to_c(&rust_options)
llms.txt-}
--
llms.txt-<source>crates/cli/Cargo.toml</source>
llms.txt-<document_content>
llms.txt-[package]
llms.txt:name = "vexy_json-cli"
llms.txt-version = "2.2.3"
llms.txt-edition = "2021"
llms.txt-
llms.txt-
llms.txt-[[bin]]
llms.txt:name = "vexy_json"
llms.txt-path = "src/main.rs"
llms.txt-
llms.txt-
--
llms.txt-dirs = "5.0"
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "../core"
llms.txt-
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/cli/build.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/cli/src/main.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct CliArgs {
--
llms.txt-<source>crates/core/Cargo.toml</source>
llms.txt-<document_content>
llms.txt-[package]
llms.txt:name = "vexy_json-core"
llms.txt-version = "2.2.3"
llms.txt-edition = "2021"
llms.txt-
--
llms.txt-
llms.txt-## Overview
llms.txt-
llms.txt:Phase 2 focused on implementing comprehensive performance optimizations for the vexy_json JSON parser. This phase involved three key areas: memory optimization, lazy evaluation, and streaming parsing capabilities.
llms.txt-
llms.txt-## Completed Components
llms.txt-
--
llms.txt-
llms.txt-## Conclusion
llms.txt-
llms.txt:Phase 2 successfully established a comprehensive performance optimization foundation for vexy_json. While some optimizations show overhead in their current form, the infrastructure is solid and provides multiple avenues for future improvements.
llms.txt-
llms.txt-The implementation demonstrates sophisticated memory management, streaming capabilities, and lazy evaluation patterns that will serve as the foundation for continued performance enhancements in future phases.
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/benches/parser_benchmarks.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod samples;
--
llms.txt-<document index="49">
llms.txt-<source>crates/core/benchmark_results_v2.txt</source>
llms.txt-<document_content>
llms.txt:   Compiling vexy_json-core v0.2.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/crates/core)
llms.txt-warning: unnecessary qualification
llms.txt-   --> crates/core/src/optimization/memory_pool.rs:157:34
llms.txt-    |
--
llms.txt-
llms.txt-Some errors have detailed explanations: E0505, E0515.
llms.txt-For more information about an error, try `rustc --explain E0505`.
llms.txt:warning: `vexy_json-core` (lib) generated 3 warnings
llms.txt:error: could not compile `vexy_json-core` (lib) due to 4 previous errors; 3 warnings emitted
llms.txt-warning: build failed, waiting for other jobs to finish...
llms.txt:warning: `vexy_json-core` (lib test) generated 3 warnings (3 duplicates)
llms.txt:error: could not compile `vexy_json-core` (lib test) due to 4 previous errors; 3 warnings emitted
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/build.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/examples/advanced_repair.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/examples/error_reporting.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-<document index="50">
llms.txt-<source>crates/core/final_benchmark_results.txt</source>
llms.txt-<document_content>
llms.txt:   Compiling vexy_json-core v0.2.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/crates/core)
llms.txt-warning: unnecessary qualification
llms.txt-   --> crates/core/src/optimization/memory_pool.rs:157:34
llms.txt-    |
--
llms.txt-    |
llms.txt-    = note: `#[warn(useless_ptr_null_checks)]` on by default
llms.txt-
llms.txt:warning: `vexy_json-core` (lib) generated 58 warnings (run `cargo fix --lib -p vexy_json-core` to apply 1 suggestion)
llms.txt-warning: unused import: `parse_optimized_v2_with_options`
llms.txt-  --> crates/core/benches/parser_benchmarks.rs:12:38
llms.txt-   |
--
llms.txt-55 |     pub const MALFORMED_JSON: &str = r#"{'name': 'John', age: 30, "items": [1, 2, 3,]}"#;
llms.txt-   |               ^^^^^^^^^^^^^^
llms.txt-
llms.txt:warning: `vexy_json-core` (lib test) generated 59 warnings (58 duplicates)
llms.txt:warning: `vexy_json-core` (bench "parser_benchmarks") generated 3 warnings (run `cargo fix --bench "parser_benchmarks"` to apply 1 suggestion)
llms.txt-    Finished `bench` profile [optimized] target(s) in 1m 06s
llms.txt:     Running unittests src/lib.rs (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/target/release/deps/vexy_json_core-61b1bad5e05d5e9e)
llms.txt-
llms.txt-running 100 tests
llms.txt-test error::recovery::tests::test_number_format_fix ... ignored
--
llms.txt-
llms.txt-test result: ok. 0 passed; 0 failed; 100 ignored; 0 measured; 0 filtered out; finished in 0.00s
llms.txt-
llms.txt:     Running benches/parser_benchmarks.rs (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/target/release/deps/parser_benchmarks-6ba04f7e4c288a89)
llms.txt-Gnuplot not found, using plotters backend
llms.txt-Benchmarking basic_parsing/simple_object
llms.txt-Benchmarking basic_parsing/simple_object: Warming up for 3.0000 s
--
llms.txt-50 |     pub const BG_WHITE: &'static str = "\x1b[47m";
llms.txt-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
llms.txt-
llms.txt:warning: `vexy_json-core` (lib) generated 58 warnings (run `cargo fix --lib -p vexy_json-core` to apply 1 suggestion)
llms.txt-warning: returned pointer of `as_ptr` call is never null, so checking it for null will always return false
llms.txt-   --> crates/core/src/optimization/memory_pool.rs:380:18
llms.txt-    |
--
llms.txt-    |
llms.txt-    = note: `#[warn(useless_ptr_null_checks)]` on by default
llms.txt-
llms.txt:   Compiling vexy_json-core v0.2.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/crates/core)
llms.txt:warning: `vexy_json-core` (lib test) generated 59 warnings (58 duplicates)
llms.txt:error[E0432]: unresolved imports `vexy_json_core::parse_optimized_v2`, `vexy_json_core::parse_optimized_v2_with_options`, `vexy_json_core::parse_v2_with_stats`
llms.txt-  --> crates/core/benches/parser_benchmarks.rs:12:18
llms.txt-   |
llms.txt-12 |                  parse_optimized_v2, parse_optimized_v2_with_options, parse_v2_with_stats, ParserOptions};
--
llms.txt-   |
llms.txt-
llms.txt-For more information about this error, try `rustc --explain E0432`.
llms.txt:error: could not compile `vexy_json-core` (bench "parser_benchmarks") due to 1 previous error
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/ast/builder.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod build;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/ast/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod builder;
--
llms.txt-mod visitor;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/ast/token.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/ast/value.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/ml_patterns.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod recovery;
--
llms.txt-mod ml_patterns;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/recovery/context.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct ContextRule {
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/recovery/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod context;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/recovery/strategies.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/recovery_v2.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/repair.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct RepairAction {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/reporter.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/result.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/span.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/terminal.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/types.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/utils.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/array.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct LazyArray {
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod array;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/number.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/object.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct LazyObject {
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/string.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lexer/debug_lexer.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lexer/fast_lexer.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lexer/logos_lexer.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lexer/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod debug_lexer;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lib.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod ast;
--
llms.txt-mod parallel_chunked;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/benchmarks.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/memory_pool.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/memory_pool_v2.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/memory_pool_v3.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod benchmarks;
--
llms.txt-mod zero_copy;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/simd.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/string_parser.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/value_builder.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/zero_copy.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parallel.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parallel_chunked.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/array.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/boolean.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/iterative.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod array;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/null.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/number.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/object.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/optimized.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/optimized_v2.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/recursive.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/state.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct ParserState {
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/string.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/comment_preservation.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/custom_number.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/datetime.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod comment_preservation;
--
llms.txt-mod schema_validation;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/schema_validation.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/repair/advanced.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/repair.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod advanced;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/buffered/buffer.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/buffered/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod buffer;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/buffered/state.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct TempParsingState {
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/lexer.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod buffered;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/ndjson.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/simple_lexer.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/transform/mod.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod normalizer;
--
llms.txt-mod optimizer;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/transform/normalizer.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/transform/optimizer.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
--
llms.txt-<source>crates/python/Cargo.toml</source>
llms.txt-<document_content>
llms.txt-[package]
llms.txt:name = "vexy_json-python"
llms.txt-version = "2.2.3"
llms.txt-edition = "2021"
llms.txt:description = "Python bindings for vexy_json - a forgiving JSON parser"
llms.txt:repository = "https://github.com/twardoch/vexy_json"
llms.txt-license = "MIT OR Apache-2.0"
llms.txt-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-
llms.txt-
llms.txt-[lib]
llms.txt:name = "vexy_json"
llms.txt-crate-type = [ "cdylib" ]
llms.txt-
llms.txt-
--
llms.txt-features = [ "extension-module" ]
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "../core"
llms.txt-
llms.txt-
--
llms.txt-<document_content>
llms.txt-# this_file: crates/python/README.md
llms.txt-
llms.txt:# vexy_json Python Bindings
llms.txt-
llms.txt:Python bindings for the vexy_json library - a forgiving JSON parser written in Rust.
llms.txt-
llms.txt-## Installation
llms.txt-
llms.txt-```bash
llms.txt:pip install vexy_json
llms.txt-```
llms.txt-
llms.txt-## Usage
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Parse forgiving JSON
llms.txt:result = vexy_json.parse('{"key": "value", trailing: true,}')
llms.txt-print(result)  # {'key': 'value', 'trailing': True}
llms.txt-
llms.txt-# Use NumPy integration
llms.txt-import numpy as np
llms.txt:arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-print(type(arr))  # <class 'numpy.ndarray'>
llms.txt-```
llms.txt-
--
llms.txt-- pandas DataFrame integration
llms.txt-- JSON repair functionality
llms.txt-
llms.txt:For more information, see the [main vexy_json documentation](https://github.com/twardoch/vexy_json).
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/build.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-
llms.txt-
llms.txt-[project]
llms.txt:name = "vexy_json"
llms.txt:description = "A forgiving JSON parser - Python bindings for the Rust vexy_json library"
llms.txt-readme = "README.md"
llms.txt-requires-python = ">=3.8"
llms.txt-classifiers = [
--
llms.txt-
llms.txt-
llms.txt-[project.urls]
llms.txt:Homepage = "https://github.com/twardoch/vexy_json"
llms.txt:Repository = "https://github.com/twardoch/vexy_json.git"
llms.txt:Issues = "https://github.com/twardoch/vexy_json/issues"
llms.txt:Documentation = "https://twardoch.github.io/vexy_json/"
llms.txt-
llms.txt-
llms.txt-[project.optional-dependencies]
--
llms.txt-[tool.maturin]
llms.txt-features = [ "pyo3/extension-module" ]
llms.txt-python-source = "python"
llms.txt:module-name = "vexy_json._vexy_json"
llms.txt:include = [ "python/vexy_json/__init__.pyi", "python/vexy_json/py.typed" ]
llms.txt-
llms.txt-
llms.txt-[tool.pytest.ini_options]
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/python/vexy_json/__init__.py
llms.txt-# Language: python
llms.txt-
llms.txt:from ._vexy_json import (
llms.txt-    parse_json as parse,
llms.txt-    parse_with_options_py as parse_with_options,
llms.txt-    is_valid,
--
llms.txt-
llms.txt-
llms.txt-<document index="58">
llms.txt:<source>crates/python/python/vexy_json/__init__.pyi</source>
llms.txt-<document_content>
llms.txt:# this_file: crates/python/vexy_json.pyi
llms.txt-
llms.txt-"""
llms.txt:Type stubs for vexy_json Python bindings.
llms.txt-
llms.txt:This file provides type hints for the vexy_json Python module, which is implemented in Rust.
llms.txt-"""
llms.txt-
llms.txt-from typing import Any, Dict, List, Union, Optional, IO, Iterator, ContextManager
--
llms.txt-        ValueError: If the input is not valid JSON
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt:        >>> result = vexy_json.parse('{"key": "value", trailing: true,}')
llms.txt-        >>> print(result)
llms.txt-        {'key': 'value', 'trailing': True}
llms.txt-    """
--
llms.txt-        ValueError: If the input is not valid JSON
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt:        >>> result = vexy_json.parse_with_options('key: value', implicit_top_level=True)
llms.txt-        >>> print(result)
llms.txt-        {'key': 'value'}
llms.txt-    """
--
llms.txt-        True if the input is valid, False otherwise
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt:        >>> vexy_json.is_valid('{"valid": true}')
llms.txt-        True
llms.txt:        >>> vexy_json.is_valid('invalid json')
llms.txt-        False
llms.txt-    """
llms.txt-    ...
--
llms.txt-        TypeError: If the object cannot be serialized to JSON
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt-        >>> data = {'key': 'value', 'number': 42}
llms.txt:        >>> vexy_json.dumps(data)
llms.txt-        '{"key":"value","number":42}'
llms.txt:        >>> vexy_json.dumps(data, indent=2)
llms.txt-        '{\n  "key": "value",\n  "number": 42\n}'
llms.txt-    """
llms.txt-    ...
--
llms.txt-        ValueError: If the content is not valid JSON
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt-        >>> with open('data.json', 'r') as f:
llms.txt:        ...     result = vexy_json.load(f)
llms.txt-    """
llms.txt-    ...
llms.txt-
--
llms.txt-        TypeError: If the object cannot be serialized
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt-        >>> data = {'key': 'value'}
llms.txt-        >>> with open('output.json', 'w') as f:
llms.txt:        ...     vexy_json.dump(data, f, indent=2)
llms.txt-    """
llms.txt-    ...
llms.txt-
--
llms.txt-        ImportError: If NumPy is not available
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt:        >>> arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-        >>> print(type(arr))
llms.txt-        <class 'numpy.ndarray'>
llms.txt-    """
--
llms.txt-        The parsed array with zero-copy optimization when possible
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt:        >>> arr = vexy_json.loads_numpy_zerocopy('[1.0, 2.0, 3.0]', dtype='float64')
llms.txt-    """
llms.txt-    ...
llms.txt-
--
llms.txt-        The parsed JSON as a DataFrame
llms.txt-        
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt:        >>> df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
llms.txt-        >>> print(type(df))
llms.txt-        <class 'pandas.core.frame.DataFrame'>
llms.txt-    """
--
llms.txt-    JSON files or streams.
llms.txt-    
llms.txt-    Example:
llms.txt:        >>> import vexy_json
llms.txt:        >>> with vexy_json.StreamingParser() as parser:
llms.txt-        ...     for item in parser.parse_stream(file_handle):
llms.txt-        ...         print(item)
llms.txt-    """
--
llms.txt-            Iterator of parsed JSON objects
llms.txt-            
llms.txt-        Example:
llms.txt:            >>> with vexy_json.StreamingParser() as parser:
llms.txt-            ...     for item in parser.parse_stream(file_handle):
llms.txt-            ...         process(item)
llms.txt-        """
--
llms.txt-            Iterator of parsed JSON objects
llms.txt-            
llms.txt-        Example:
llms.txt:            >>> with vexy_json.StreamingParser() as parser:
llms.txt-            ...     for item in parser.parse_lines(file_handle):
llms.txt-            ...         process(item)
llms.txt-        """
--
llms.txt-</document>
llms.txt-
llms.txt-<document index="59">
llms.txt:<source>crates/python/python/vexy_json/py.typed</source>
llms.txt-<document_content>
llms.txt:# this_file: crates/python/python/vexy_json/py.typed
llms.txt-
llms.txt-# Marker file for PEP 561 indicating that this package supports typing
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/src/lib.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct StreamingParser {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/tests/test_basic.py
llms.txt-# Language: python
llms.txt-
llms.txt-import pytest
llms.txt:import vexy_json
llms.txt-
llms.txt-class TestBasicParsing:
llms.txt-    """Test basic JSON parsing functionality."""
--
llms.txt-        """Test parsing nested objects and arrays."""
llms.txt-
llms.txt-class TestForgivingFeatures:
llms.txt:    """Test vexy_json's forgiving JSON features."""
llms.txt-    def test_comments((self)):
llms.txt-        """Test single-line and multi-line comments."""
llms.txt-    def test_trailing_commas((self)):
--
llms.txt-    """Test various malformed JSON inputs."""
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/tests/test_typing.py
llms.txt-# Language: python
llms.txt-
llms.txt-import pytest
--
llms.txt-from typing import TYPE_CHECKING
llms.txt-import numpy as np
llms.txt-import pandas as pd
llms.txt:import vexy_json
llms.txt:import vexy_json
llms.txt:import vexy_json
llms.txt:import vexy_json
llms.txt:import vexy_json
llms.txt-import numpy as np
llms.txt:import vexy_json
llms.txt-import pandas as pd
llms.txt:import vexy_json
llms.txt:import vexy_json
llms.txt:import vexy_json
llms.txt-
llms.txt-def test_basic_functionality(()):
llms.txt-    """Test basic parsing functionality with type hints."""
--
llms.txt-    """Test all forgiving JSON features."""
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/tests/test_vexy_json.py
llms.txt-# Language: python
llms.txt-
llms.txt:import vexy_json
llms.txt:from vexy_json import VexyJSONParser, VexyJSONConfig
llms.txt-
llms.txt-class VexyJSONWrapper:
llms.txt-    """A wrapper for Vexy JSON functionality"""
--
llms.txt-<source>crates/serde/Cargo.toml</source>
llms.txt-<document_content>
llms.txt-[package]
llms.txt:name = "vexy_json-serde"
llms.txt-version = "2.2.3"
llms.txt-edition = "2021"
llms.txt-
--
llms.txt-path = "src/lib.rs"
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "../core"
llms.txt-features = [ "serde" ]
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/serde/src/lib.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct SerdeValue {
--
llms.txt-path = "src/lib.rs"
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "../core"
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/test-utils/src/lib.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-<source>crates/wasm/Cargo.toml</source>
llms.txt-<document_content>
llms.txt-[package]
llms.txt:name = "vexy_json-wasm"
llms.txt-version = "2.2.3"
llms.txt-edition = "2021"
llms.txt:description = "WebAssembly bindings for vexy_json - a forgiving JSON parser"
llms.txt:repository = "https://github.com/twardoch/vexy_json"
llms.txt-license = "MIT OR Apache-2.0"
llms.txt-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-
--
llms.txt-features = [ "derive" ]
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "../core"
llms.txt-features = [ "serde" ]
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/wasm/build.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/wasm/src/lib.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-const __dirname = dirname(__filename);
llms.txt-
llms.txt-// Dynamically import the WASM module
llms.txt:const wasmModule = await import(join(__dirname, 'pkg', 'vexy_json_wasm.js'));
llms.txt-const { default: init, parse_js, parse_with_options_js, is_valid, format } = wasmModule;
llms.txt-
llms.txt-// Initialize WASM with the WASM file path
llms.txt:const wasmPath = join(__dirname, 'pkg', 'vexy_json_wasm_bg.wasm');
llms.txt-const wasmBytes = readFileSync(wasmPath);
llms.txt-await init(wasmBytes);
llms.txt-
llms.txt:console.log('Testing vexy_json WASM module...\n');
llms.txt-
llms.txt-// Test 1: Basic parsing
llms.txt-console.log('Test 1: Basic parsing');
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_comment_colon.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_double_decimal.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_lexer_test.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test10.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test2.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test3.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test4.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test5.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test6.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test7.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test8.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test9.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-author:
llms.txt-  name: Adam Twardoch
llms.txt-  url: https://github.com/twardoch
llms.txt:baseurl: /vexy_json
llms.txt-# Collections
llms.txt-collections:
llms.txt-  pages:
--
llms.txt-  - '**/gems/jekyll-*/lib/site_template/_posts/*'
llms.txt-  - 'internal/**/*'
llms.txt-github:
llms.txt:  repository_url: https://github.com/twardoch/vexy_json
llms.txt-highlighter: rouge
llms.txt-# Include WASM and tool files in build
llms.txt-include:
--
llms.txt-back_to_top_text: "Back to top"
llms.txt-
llms.txt-# Footer content
llms.txt:footer_content: "Copyright &copy; 2025 Adam Twardoch. Distributed by an <a href=\"https://github.com/twardoch/vexy_json/tree/main/LICENSE\">MIT license.</a>"
llms.txt-
llms.txt-# External navigation links will be removed from here as just-the-docs handles them in the content
llms.txt-# Plugin configuration
--
llms.txt-  - jekyll-sitemap
llms.txt-  - jekyll-optional-front-matter
llms.txt-# Repository information
llms.txt:repository: twardoch/vexy_json
llms.txt-# Performance and caching
llms.txt-sass:
llms.txt-  style: compressed
--
llms.txt-social:
llms.txt-  - icon: github
llms.txt-    name: GitHub
llms.txt:    url: https://github.com/twardoch/vexy_json
llms.txt-# WASM and static file configuration
llms.txt-# Ensure proper MIME types for WebAssembly files
llms.txt-static_files:
--
llms.txt-  - /pkg/*.js
llms.txt-  - /assets/**/*
llms.txt-remote_theme: just-the-docs/just-the-docs
llms.txt:# Site configuration for vexy_json documentation
llms.txt:title: vexy_json - Forgiving JSON Parser
llms.txt-url: https://twardoch.github.io
llms.txt-# MIME type handling for GitHub Pages
llms.txt-# Note: GitHub Pages automatically serves .wasm files with application/wasm MIME type
--
llms.txt-
llms.txt-# API Reference v2.0.0
llms.txt-
llms.txt:This section provides detailed documentation for the `vexy_json` Rust library v2.0.0. The API is designed to be intuitive and idiomatic for Rust developers, with powerful new features for streaming, parallel processing, and extensibility.
llms.txt-
llms.txt:## `vexy_json::parse`
llms.txt-
llms.txt-```rust
llms.txt-pub fn parse(input: &str) -> Result<Value, Error>
llms.txt-```
llms.txt-
llms.txt:Parses a JSON-like string into a `vexy_json::Value` enum using default parser options. This is the primary entry point for using the library.
llms.txt-
llms.txt-- `input`: The string slice containing the JSON-like data to parse.
llms.txt-- Returns:
llms.txt-    - `Ok(Value)`: If parsing is successful, returns a `Value` enum representing the parsed data.
llms.txt-    - `Err(Error)`: If an error occurs during parsing, returns an `Error` detailing the issue.
llms.txt-
llms.txt:## `vexy_json::parse_with_options`
llms.txt-
llms.txt-```rust
llms.txt-pub fn parse_with_options(input: &str, options: ParserOptions) -> Result<Value, Error>
llms.txt-```
llms.txt-
llms.txt:Parses a JSON-like string into a `vexy_json::Value` enum with custom parser options. This allows fine-grained control over which forgiving features are enabled.
llms.txt-
llms.txt-- `input`: The string slice containing the JSON-like data to parse.
llms.txt-- `options`: A `ParserOptions` struct configuring the parser's behavior.
--
llms.txt-    - `Ok(Value)`: If parsing is successful, returns a `Value` enum representing the parsed data.
llms.txt-    - `Err(Error)`: If an error occurs during parsing, returns an `Error` detailing the issue.
llms.txt-
llms.txt:## `vexy_json::ParserOptions`
llms.txt-
llms.txt:This struct defines the configurable options for the `vexy_json` parser.
llms.txt-
llms.txt-```rust
llms.txt-pub struct ParserOptions {
--
llms.txt-`ParserOptions` implements `Default`, so you can create a default instance and then modify specific fields:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::ParserOptions;
llms.txt-
llms.txt-let mut options = ParserOptions::default();
llms.txt-options.allow_comments = false; // Disable comments
llms.txt-options.max_depth = 64; // Set a custom max depth
llms.txt-```
llms.txt-
llms.txt:## `vexy_json::Value` Enum
llms.txt-
llms.txt:This enum represents the different types of JSON values that `vexy_json` can parse.
llms.txt-
llms.txt-```rust
llms.txt-pub enum Value {
--
llms.txt-
llms.txt-- `Null`: Represents a JSON `null` value.
llms.txt-- `Bool(bool)`: Represents a JSON boolean (`true` or `false`).
llms.txt:- `Number(Number)`: Represents a JSON numeric value. See `vexy_json::Number` for details.
llms.txt-- `String(String)`: Represents a JSON string.
llms.txt-- `Array(Vec<Value>)`: Represents a JSON array, a vector of `Value` enums.
llms.txt-- `Object(HashMap<String, Value>)`: Represents a JSON object, a hash map of string keys to `Value` enums.
--
llms.txt-- `as_array() -> Option<&Vec<Value>>`
llms.txt-- `as_object() -> Option<&HashMap<String, Value>>`
llms.txt-
llms.txt:## `vexy_json::Number` Enum
llms.txt-
llms.txt-This enum represents a JSON number, which can be either an integer or a floating-point number.
llms.txt-
--
llms.txt-- `Integer(i64)`: An integer value that fits in an `i64`.
llms.txt-- `Float(f64)`: A floating-point value.
llms.txt-
llms.txt:## `vexy_json::Error` Enum
llms.txt-
llms.txt-This enum defines the types of errors that can occur during parsing.
llms.txt-
--
llms.txt-- `InvalidEscape(usize)`: An invalid escape sequence was found in a string at a given position.
llms.txt-- `InvalidUnicode(usize)`: An invalid Unicode escape sequence was found at a given position.
llms.txt-- `UnterminatedString(usize)`: A string literal was not properly terminated, starting at a given position.
llms.txt:- `TrailingComma(usize)`: A trailing comma was found where not allowed (though typically allowed by `vexy_json`'s forgiving nature, this error might occur in strict modes or specific contexts) at a given position.
llms.txt-- `Expected { expected: String, found: String, position: usize }`: The parser expected a specific token or value but found something else at a given position.
llms.txt-- `DepthLimitExceeded(usize)`: The maximum recursion depth was exceeded while parsing nested structures at a given position.
llms.txt-- `Custom(String)`: A custom error with a descriptive message.
--
llms.txt-
llms.txt-## Serde Integration
llms.txt-
llms.txt:`vexy_json` provides optional integration with the `serde` serialization framework. When the `serde` feature is enabled in your `Cargo.toml`, `vexy_json::Value` and `vexy_json::Number` implement the `Serialize` and `Deserialize` traits. This allows easy conversion between `vexy_json::Value` and other data formats supported by Serde (e.g., `serde_json::Value`).
llms.txt-
llms.txt:To enable this feature, add `serde` to your `vexy_json` dependency in `Cargo.toml`:
llms.txt-
llms.txt-```toml
llms.txt-[dependencies]
llms.txt:vexy_json = { version = "2.0.0", features = ["serde"] }
llms.txt-```
llms.txt-
llms.txt-**Example:**
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse, Value};
llms.txt-use serde_json; // Requires `serde_json` crate
llms.txt-
llms.txt-fn main() {
llms.txt-    let json_str = r#"{ "name": "Alice", "age": 30 }"#;
llms.txt:    let vexy_json_value: Value = parse(json_str).unwrap();
llms.txt-
llms.txt:    // Convert vexy_json::Value to serde_json::Value
llms.txt:    let serde_value: serde_json::Value = serde_json::to_value(vexy_json_value).unwrap();
llms.txt-    println!("Converted to serde_json::Value: {}", serde_value);
llms.txt-
llms.txt:    // Convert serde_json::Value back to vexy_json::Value
llms.txt:    let new_vexy_json_value: Value = serde_json::from_value(serde_value).unwrap();
llms.txt:    println!("Converted back to vexy_json::Value: {:?}", new_vexy_json_value);
llms.txt-}
llms.txt-```
llms.txt-
llms.txt-## WebAssembly (WASM) Bindings
llms.txt-
llms.txt:`vexy_json` offers WebAssembly bindings, allowing it to be used directly in JavaScript environments (e.g., web browsers, Node.js). This is enabled via the `wasm` feature.
llms.txt-
llms.txt:To enable this feature, add `wasm` to your `vexy_json` dependency in `Cargo.toml`:
llms.txt-
llms.txt-```toml
llms.txt-[dependencies]
llms.txt:vexy_json = { version = "2.0.0", features = ["wasm"] }
llms.txt-```
llms.txt-
llms.txt-For detailed documentation on the WebAssembly API, including JavaScript examples, please refer to the [WASM API Reference](wasm/).
llms.txt-
llms.txt-## Streaming API (New in v2.0.0)
llms.txt-
llms.txt:`vexy_json` v2.0.0 introduces a powerful streaming parser for processing large JSON files incrementally.
llms.txt-
llms.txt:### `vexy_json::StreamingParser`
llms.txt-
llms.txt-```rust
llms.txt-pub struct StreamingParser { /* ... */ }
--
llms.txt-
llms.txt-Example usage:
llms.txt-```rust
llms.txt:use vexy_json::{StreamingParser, StreamingEvent};
llms.txt-
llms.txt-let mut parser = StreamingParser::new();
llms.txt-parser.feed(r#"{"key": "value"}"#)?;
--
llms.txt-}
llms.txt-```
llms.txt-
llms.txt:### `vexy_json::StreamingEvent`
llms.txt-
llms.txt-```rust
llms.txt-pub enum StreamingEvent {
--
llms.txt-
llms.txt-## Parallel Processing (New in v2.0.0)
llms.txt-
llms.txt:`vexy_json` v2.0.0 includes parallel processing capabilities for batch operations using the `rayon` crate.
llms.txt-
llms.txt:### `vexy_json::parse_parallel`
llms.txt-
llms.txt-```rust
llms.txt-pub fn parse_parallel<I>(inputs: I) -> Vec<Result<Value, Error>>
--
llms.txt-Process multiple JSON strings in parallel:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse_parallel;
llms.txt-
llms.txt-let json_strings = vec![
llms.txt-    r#"{"id": 1, "name": "Alice"}"#,
--
llms.txt-}
llms.txt-```
llms.txt-
llms.txt:### `vexy_json::ParallelOptions`
llms.txt-
llms.txt-```rust
llms.txt-pub struct ParallelOptions {
--
llms.txt-
llms.txt-## Plugin System (New in v2.0.0)
llms.txt-
llms.txt:`vexy_json` v2.0.0 introduces a plugin architecture for extending parsing capabilities.
llms.txt-
llms.txt:### `vexy_json::Plugin` Trait
llms.txt-
llms.txt-```rust
llms.txt-pub trait Plugin: Send + Sync {
--
llms.txt-Example plugin implementation:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{Plugin, Value, Error};
llms.txt-
llms.txt-struct DateNormalizerPlugin;
llms.txt-
--
llms.txt-}
llms.txt-```
llms.txt-
llms.txt:### `vexy_json::parse_with_plugins`
llms.txt-
llms.txt-```rust
llms.txt-pub fn parse_with_plugins(
--
llms.txt-
llms.txt-Usage example:
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_plugins, ParserOptions};
llms.txt-
llms.txt-let plugins: Vec<Box<dyn Plugin>> = vec![
llms.txt-    Box::new(DateNormalizerPlugin),
--
llms.txt-
llms.txt-## NDJSON Support (New in v2.0.0)
llms.txt-
llms.txt:### `vexy_json::NdJsonParser`
llms.txt-
llms.txt-```rust
llms.txt-pub struct NdJsonParser { /* ... */ }
--
llms.txt-
llms.txt-Example:
llms.txt-```rust
llms.txt:use vexy_json::NdJsonParser;
llms.txt-
llms.txt-let mut parser = NdJsonParser::new();
llms.txt-let input = r#"{"id": 1}
--
llms.txt-<document index="69">
llms.txt-<source>docs/assets/css/_tool.scss</source>
llms.txt-<document_content>
llms.txt:/* Custom styles for vexy_json web tool */
llms.txt-
llms.txt-/* Editor enhancements */
llms.txt-.textarea-editor {
--
llms.txt----
llms.txt-
llms.txt-// @import "just-the-docs";
llms.txt:// Custom styles for vexy_json documentation site
llms.txt-// This file extends the just-the-docs theme with custom styling
llms.txt-
llms.txt-// Import our tool-specific styles
--
llms.txt-
llms.txt-// Custom color scheme refinements
llms.txt-:root {
llms.txt:  --vexy_json-primary: #0969da;
llms.txt:  --vexy_json-secondary: #656d76;
llms.txt:  --vexy_json-accent: #0550ae;
llms.txt:  --vexy_json-success: #1a7f37;
llms.txt:  --vexy_json-warning: #bf8700;
llms.txt:  --vexy_json-danger: #cf222e;
llms.txt-}
llms.txt-
llms.txt-// Enhanced code blocks for JSON examples
--
llms.txt-      .nav-list-link {
llms.txt-        &.active {
llms.txt-          font-weight: 600;
llms.txt:          color: var(--vexy_json-primary);
llms.txt-        }
llms.txt-      }
llms.txt-    }
--
llms.txt-  
llms.txt-  .footer-content {
llms.txt-    font-size: 14px;
llms.txt:    color: var(--vexy_json-secondary);
llms.txt-    
llms.txt-    a {
llms.txt:      color: var(--vexy_json-primary);
llms.txt-      text-decoration: none;
llms.txt-      
llms.txt-      &:hover {
--
llms.txt-}
llms.txt-
llms.txt-// Custom button styles
llms.txt:.btn-vexy_json {
llms.txt:  background-color: var(--vexy_json-primary);
llms.txt:  border: 1px solid var(--vexy_json-primary);
llms.txt-  color: white;
llms.txt-  
llms.txt-  &:hover {
llms.txt:    background-color: var(--vexy_json-accent);
llms.txt:    border-color: var(--vexy_json-accent);
llms.txt-  }
llms.txt-  
llms.txt-  &:focus {
--
llms.txt-    th {
llms.txt-      background-color: var(--code-background-color);
llms.txt-      font-weight: 600;
llms.txt:      color: var(--vexy_json-primary);
llms.txt-    }
llms.txt-    
llms.txt-    td {
--
llms.txt-  
llms.txt-  &.callout-info {
llms.txt-    background-color: rgba(9, 105, 218, 0.1);
llms.txt:    border-left-color: var(--vexy_json-primary);
llms.txt-    
llms.txt-    .callout-title {
llms.txt:      color: var(--vexy_json-primary);
llms.txt-      font-weight: 600;
llms.txt-    }
llms.txt-  }
llms.txt-  
llms.txt-  &.callout-warning {
llms.txt-    background-color: rgba(191, 135, 0, 0.1);
llms.txt:    border-left-color: var(--vexy_json-warning);
llms.txt-    
llms.txt-    .callout-title {
llms.txt:      color: var(--vexy_json-warning);
llms.txt-      font-weight: 600;
llms.txt-    }
llms.txt-  }
llms.txt-  
llms.txt-  &.callout-success {
llms.txt-    background-color: rgba(26, 127, 55, 0.1);
llms.txt:    border-left-color: var(--vexy_json-success);
llms.txt-    
llms.txt-    .callout-title {
llms.txt:      color: var(--vexy_json-success);
llms.txt-      font-weight: 600;
llms.txt-    }
llms.txt-  }
--
llms.txt-    .stat-value {
llms.txt-      font-size: 2em;
llms.txt-      font-weight: 700;
llms.txt:      color: var(--vexy_json-primary);
llms.txt-      display: block;
llms.txt-    }
llms.txt-    
llms.txt-    .stat-label {
llms.txt-      font-size: 0.9em;
llms.txt:      color: var(--vexy_json-secondary);
llms.txt-      margin-top: 4px;
llms.txt-    }
llms.txt-  }
--
llms.txt-// Dark mode adjustments
llms.txt-@media (prefers-color-scheme: dark) {
llms.txt-  :root {
llms.txt:    --vexy_json-primary: #58a6ff;
llms.txt:    --vexy_json-secondary: #8b949e;
llms.txt:    --vexy_json-accent: #79c0ff;
llms.txt:    --vexy_json-success: #3fb950;
llms.txt:    --vexy_json-warning: #d29922;
llms.txt:    --vexy_json-danger: #f85149;
llms.txt-  }
llms.txt-}
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/analytics.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-class AnalyticsCollector {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/browser-compatibility.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-class BrowserCompatibility {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/editor.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-class JsonEditor {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/error-highlighting.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-class ErrorHighlighter {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/examples.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-function getExamplesByCategory(())
--
llms.txt-function searchExamples((query))
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/feedback.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-class FeedbackSystem {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/jsonic-tool.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-class JsonicTool {
--
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/tool.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-import init, {
--
llms.txt-    get_parser_options,
llms.txt-    stringify_value,
llms.txt-    get_version_info
llms.txt:} from '../../pkg/vexy_json_wasm.js';
llms.txt-import { EXAMPLES, getExample } from './examples.js';
llms.txt-import { BrowserCompatibility } from './browser-compatibility.js';
llms.txt-import { AnalyticsCollector } from './analytics.js';
--
llms.txt-
llms.txt-# Benchmark Results
llms.txt-
llms.txt:This section presents the parsing performance benchmarks for `vexy_json` (Rust).
llms.txt-Benchmarks were run on the following environment:
llms.txt-
llms.txt-*   **CPU**: [e.g., Intel Core i7-10700K]
--
llms.txt-
llms.txt-Lower values (nanoseconds per iteration) are better.
llms.txt-
llms.txt:| Test Case | `vexy_json` (ns/iter) |
llms.txt-|---|---|
llms.txt-| simple | 7782 |
llms.txt-| array | 7836 |
--
llms.txt-<document_content>
llms.txt-# Build Status Dashboard
llms.txt-
llms.txt:This page provides an overview of the current build status and health metrics for the vexy_json project.
llms.txt-
llms.txt-## Continuous Integration Status
llms.txt-
--
llms.txt-
llms.txt-| Workflow | Status | Description |
llms.txt-|----------|--------|-------------|
llms.txt:| WASM Build | [![Build Status](https://github.com/twardoch/vexy_json/workflows/Build%20and%20Deploy%20WASM/badge.svg)](https://github.com/twardoch/vexy_json/actions/workflows/wasm-build.yml) | Builds WebAssembly module and deploys to GitHub Pages |
llms.txt:| Security Audit | [![Security Audit](https://github.com/twardoch/vexy_json/workflows/Security%20Audit/badge.svg)](https://github.com/twardoch/vexy_json/actions/workflows/security.yml) | Checks for security vulnerabilities in dependencies |
llms.txt:| Release | [![Release](https://github.com/twardoch/vexy_json/workflows/Release/badge.svg)](https://github.com/twardoch/vexy_json/actions/workflows/release.yml) | Automated release process for tagged versions |
llms.txt-
llms.txt-### Package Registries
llms.txt-
llms.txt-| Registry | Version | Downloads |
llms.txt-|----------|---------|-----------|
llms.txt:| crates.io | [![crates.io](https://img.shields.io/crates/v/vexy_json.svg)](https://crates.io/crates/vexy_json) | [![Downloads](https://img.shields.io/crates/d/vexy_json.svg)](https://crates.io/crates/vexy_json) |
llms.txt:| docs.rs | [![docs.rs](https://docs.rs/vexy_json/badge.svg)](https://docs.rs/vexy_json) | - |
llms.txt:| npm | [![npm](https://img.shields.io/npm/v/@vexy_json/vexy_json.svg)](https://www.npmjs.com/package/@vexy_json/vexy_json) | [![npm downloads](https://img.shields.io/npm/dm/@vexy_json/vexy_json.svg)](https://www.npmjs.com/package/@vexy_json/vexy_json) |
llms.txt-
llms.txt-## Code Quality Metrics
llms.txt-
--
llms.txt-## Deployment Status
llms.txt-
llms.txt-### Live Deployments
llms.txt:- **Vexy JSON Tool**: [https://twardoch.github.io/vexy_json/vexy_json-tool/](https://twardoch.github.io/vexy_json/vexy_json-tool/)
llms.txt:- **Jsonic Tool**: [https://twardoch.github.io/vexy_json/jsonic-tool/](https://twardoch.github.io/vexy_json/jsonic-tool/)
llms.txt:- **Tools Overview**: [https://twardoch.github.io/vexy_json/tools/](https://twardoch.github.io/vexy_json/tools/)
llms.txt:- **Documentation**: [https://docs.rs/vexy_json](https://docs.rs/vexy_json)
llms.txt-- **GitHub Pages**: Automatically deployed on main branch updates
llms.txt-
llms.txt-### Release Artifacts
--
llms.txt-- **As Needed**: Bug fixes and feature updates
llms.txt-
llms.txt-### Contact
llms.txt:For build failures or urgent issues, please [create an issue](https://github.com/twardoch/vexy_json/issues/new) on GitHub.
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-nav_order: 7
llms.txt----
llms.txt-
llms.txt:# Contributing to vexy_json
llms.txt-
llms.txt:We welcome contributions to `vexy_json`! Whether it's bug reports, feature requests, documentation improvements, or code contributions, your help is greatly appreciated.
llms.txt-
llms.txt-## How to Contribute
llms.txt-
llms.txt:1.  **Fork the Repository**: Start by forking the `vexy_json` repository on GitHub.
llms.txt-2.  **Clone Your Fork**: Clone your forked repository to your local machine:
llms.txt-    ```bash
llms.txt:    git clone https://github.com/your-username/vexy_json.git
llms.txt:    cd vexy_json
llms.txt-    ```
llms.txt-3.  **Create a New Branch**: Create a new branch for your feature or bug fix:
llms.txt-    ```bash
--
llms.txt-    ```bash
llms.txt-    git push origin feature/your-feature-name
llms.txt-    ```
llms.txt:9.  **Create a Pull Request**: Open a pull request from your fork to the `main` branch of the `vexy_json` repository. Provide a detailed description of your changes.
llms.txt-
llms.txt-## Code Style and Conventions
llms.txt-
--
llms.txt-
llms.txt-## Extending the Web Tool
llms.txt-
llms.txt:If you're looking to contribute specifically to the `vexy_json` web tool, please refer to the [Developer Guide for Extending the Web Tool](developer-guide.md) for detailed information on its structure, build process, and development considerations.
llms.txt-
llms.txt-## Reporting Bugs
llms.txt-
llms.txt:If you find a bug, please open an issue on the [GitHub Issues page](https://github.com/twardoch/vexy_json/issues). When reporting a bug, please include:
llms.txt-
llms.txt--   A clear and concise description of the bug.
llms.txt--   Steps to reproduce the behavior.
--
llms.txt-
llms.txt-## Feature Requests
llms.txt-
llms.txt:Have an idea for a new feature? Open an issue on the [GitHub Issues page](https://github.com/twardoch/vexy_json/issues) to discuss it. Describe the feature, why you think it would be valuable, and any potential implementation details.
llms.txt-
llms.txt:Thank you for contributing to `vexy_json`!
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
--
llms.txt-nav_order: 2
llms.txt----
llms.txt-
llms.txt:# CLI Enhancements Design for vexy_json
llms.txt-
llms.txt-## Overview
llms.txt-
llms.txt:This document outlines the design for comprehensive CLI enhancements to the vexy_json command-line tool, building on the current basic implementation to provide a powerful and user-friendly JSON processing experience.
llms.txt-
llms.txt-## Current State Analysis
llms.txt-
--
llms.txt-
llms.txt-## Enhancement Goals
llms.txt-
llms.txt:1. **User Experience**: Make vexy_json the go-to CLI tool for JSON processing
llms.txt-2. **Feature Parity**: Match or exceed capabilities of popular JSON tools (jq, jsonlint)
llms.txt-3. **Rust Integration**: Leverage Rust's performance and safety for robust operations
llms.txt-4. **Flexibility**: Support various workflows from simple formatting to complex transformations
--
llms.txt-### Basic Usage (Enhanced)
llms.txt-```bash
llms.txt-# Current (unchanged for compatibility)
llms.txt:echo '{"key": "value"}' | vexy_json
llms.txt-
llms.txt-# New file input/output
llms.txt:vexy_json input.json                    # Read from file, output to stdout
llms.txt:vexy_json input.json -o output.json     # Read from file, write to file
llms.txt:vexy_json -i input.json -o output.json  # Explicit input/output
llms.txt-
llms.txt-# Multiple files
llms.txt:vexy_json file1.json file2.json         # Process multiple files
llms.txt:vexy_json *.json                        # Glob support
llms.txt-```
llms.txt-
llms.txt-### Formatting Options
llms.txt-```bash
llms.txt-# Pretty printing (default when output is terminal)
llms.txt:vexy_json --pretty input.json
llms.txt:vexy_json -p input.json
llms.txt-
llms.txt-# Compact output (default when piped)
llms.txt:vexy_json --compact input.json
llms.txt:vexy_json -c input.json
llms.txt-
llms.txt-# Custom indentation
llms.txt:vexy_json --indent 4 input.json
llms.txt:vexy_json --indent tab input.json
llms.txt-
llms.txt-# Sort keys
llms.txt:vexy_json --sort-keys input.json
llms.txt-```
llms.txt-
llms.txt-### Validation and Analysis
llms.txt-```bash
llms.txt-# Validate only (exit code indicates success/failure)
llms.txt:vexy_json --validate input.json
llms.txt:vexy_json -v input.json
llms.txt-
llms.txt-# Show statistics
llms.txt:vexy_json --stats input.json
llms.txt-# Output: {"objects": 5, "arrays": 3, "strings": 12, ...}
llms.txt-
llms.txt-# Detailed error reporting
llms.txt:vexy_json --strict input.json    # Fail on any forgiving features
llms.txt:vexy_json --explain input.json   # Show what forgiving features were used
llms.txt-```
llms.txt-
llms.txt-### Parser Options Control
llms.txt-```bash
llms.txt-# Disable specific forgiving features
llms.txt:vexy_json --no-comments input.json
llms.txt:vexy_json --no-trailing-commas input.json
llms.txt:vexy_json --no-unquoted-keys input.json
llms.txt:vexy_json --no-single-quotes input.json
llms.txt-
llms.txt-# Enable specific features (when starting from strict mode)
llms.txt:vexy_json --strict --allow-comments input.json
llms.txt-
llms.txt-# Newline as comma mode
llms.txt:vexy_json --newline-as-comma input.json
llms.txt-```
llms.txt-
llms.txt-### Watch Mode
llms.txt-```bash
llms.txt-# Watch file for changes
llms.txt:vexy_json --watch input.json
llms.txt:vexy_json -w input.json
llms.txt-
llms.txt-# Watch with auto-output
llms.txt:vexy_json -w input.json -o output.json
llms.txt-
llms.txt-# Watch directory
llms.txt:vexy_json -w ./config/
llms.txt-```
llms.txt-
llms.txt-### Batch Processing
llms.txt-```bash
llms.txt-# Process all JSON files in directory
llms.txt:vexy_json --batch ./data/ --output-dir ./processed/
llms.txt-
llms.txt-# With transformation
llms.txt:vexy_json --batch ./data/ --pretty --sort-keys -o ./formatted/
llms.txt-
llms.txt-# Parallel processing
llms.txt:vexy_json --parallel ./data/*.json
llms.txt-```
llms.txt-
llms.txt-### Query and Filtering (Future Enhancement)
llms.txt-```bash
llms.txt-# Basic path extraction (jq-like)
llms.txt:vexy_json input.json --get ".users[0].name"
llms.txt-
llms.txt-# Multiple paths
llms.txt:vexy_json input.json --get ".name" --get ".age"
llms.txt-
llms.txt-# Simple filtering
llms.txt:vexy_json input.json --filter ".age > 30"
llms.txt-```
llms.txt-
llms.txt-### Output Control
llms.txt-```bash
llms.txt-# Output to stderr instead of stdout
llms.txt:vexy_json --stderr input.json
llms.txt-
llms.txt-# Silent mode (only exit codes)
llms.txt:vexy_json --silent input.json
llms.txt:vexy_json -s input.json
llms.txt-
llms.txt-# Different output formats
llms.txt:vexy_json --output-format yaml input.json  # Future
llms.txt:vexy_json --output-format toml input.json  # Future
llms.txt-```
llms.txt-
llms.txt-### Advanced Features
llms.txt-```bash
llms.txt-# Diff two JSON files (structural comparison)
llms.txt:vexy_json --diff file1.json file2.json
llms.txt-
llms.txt-# Merge JSON files
llms.txt:vexy_json --merge base.json override.json
llms.txt-
llms.txt-# Schema validation (future)
llms.txt:vexy_json --schema schema.json data.json
llms.txt-
llms.txt-# Performance profiling
llms.txt:vexy_json --profile large-file.json
llms.txt-```
llms.txt-
llms.txt-## Implementation Architecture
--
llms.txt-
llms.txt-## Conclusion
llms.txt-
llms.txt:These CLI enhancements will transform vexy_json from a basic JSON parser into a comprehensive JSON processing toolkit. By focusing on user experience, performance, and flexibility, vexy_json can become the preferred choice for developers working with forgiving JSON formats.
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-nav_order: 1
llms.txt----
llms.txt-
llms.txt:# Python API Design for vexy_json
llms.txt-
llms.txt-## Overview
llms.txt-
llms.txt:This document outlines the design for Python bindings for the vexy_json library, drawing from PyO3 best practices and existing Python JSON parser APIs (json, orjson, ujson).
llms.txt-
llms.txt-## Core Design Principles
llms.txt-
--
llms.txt-### Basic Functions (Similar to json module)
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Basic parsing - similar to json.loads()
llms.txt-def loads(s: str, *, 
--
llms.txt-
llms.txt-```python
llms.txt-class ParserOptions:
llms.txt:    """Configuration options for vexy_json parser."""
llms.txt-    
llms.txt-    def __init__(self, 
llms.txt-                 allow_comments: bool = True,
--
llms.txt-
llms.txt-```python
llms.txt-class VexyJsonError(Exception):
llms.txt:    """Base exception for vexy_json errors."""
llms.txt-    pass
llms.txt-
llms.txt-class ParseError(VexyJsonError):
--
llms.txt-
llms.txt-- **`loads()`** instead of `parse()` for consistency with `json` module
llms.txt-- **Keyword-only arguments** for options to prevent positional confusion
llms.txt:- **Boolean defaults** match vexy_json's forgiving nature
llms.txt-
llms.txt-### 2. Error Handling
llms.txt-
--
llms.txt-- **Standard library compatibility**: `loads()` and `dumps()` work as drop-in replacements
llms.txt-- **orjson inspiration**: Performance-focused design with bytes handling
llms.txt-- **ujson similarity**: Simple API with performance benefits
llms.txt:- **vexy_json extensions**: Forgiving features as the key differentiator
llms.txt-
llms.txt-This design balances Python idioms with the performance benefits of Rust, providing a comprehensive JSON parsing solution that extends beyond standard JSON capabilities.
llms.txt-</document_content>
--
llms.txt-
llms.txt-# Design
llms.txt-
llms.txt:This section contains design documents and architectural decisions for the vexy_json project.
llms.txt-
llms.txt-## Topics
llms.txt-
--
llms.txt-nav_order: 2
llms.txt----
llms.txt-
llms.txt:# Developer Guide for Extending the vexy_json Web Tool
llms.txt-
llms.txt:This guide is for developers who want to contribute to or extend the `vexy_json` web tool. It covers the project structure, build process, and key development considerations.
llms.txt-
llms.txt-## Project Structure
llms.txt-
llms.txt:The `vexy_json` project uses a multi-crate Cargo workspace structure with Jekyll integration for web tools.
llms.txt-
llms.txt-### Workspace Structure
llms.txt-
--
llms.txt-    *   `_config.yml`: Jekyll configuration file.
llms.txt-    *   `tool.html`: Vexy JSON interactive tool (WebAssembly-powered)
llms.txt-    *   `jsonic.html`: Jsonic interactive tool (CDN-powered)
llms.txt:    *   `vexy_json-tool.md`: Jekyll wrapper for Vexy JSON tool
llms.txt-    *   `jsonic-tool.md`: Jekyll wrapper for Jsonic tool
llms.txt-    *   `tool.md`: Tools overview page
llms.txt-    *   `assets/`: Static assets for the web tools.
llms.txt-        *   `css/`: CSS files, including `tool.css` and `enhanced-features.css`.
llms.txt-        *   `js/`: JavaScript files for both tools
llms.txt:    *   `pkg/`: Contains the compiled WebAssembly module (`vexy_json_bg.wasm`, `vexy_json.js`, `vexy_json.d.ts`).
llms.txt-
llms.txt-## Development Environment Setup
llms.txt-
--
llms.txt-
llms.txt-This is the main JavaScript file for the web tool. It handles UI interactions, calls the WASM functions, and updates the display.
llms.txt-
llms.txt:*   **WASM Module Import**: The `pkg/vexy_json_wasm.js` module (generated by `wasm-pack`) is imported here.
llms.txt-*   **Asynchronous Operations**: WASM module loading and initialization are asynchronous. Ensure you `await` the `init()` function.
llms.txt-*   **UI Updates**: Use standard DOM manipulation to update the input/output areas, error messages, and other UI elements.
llms.txt-*   **Event Listeners**: Attach event listeners to buttons, toggles, and text areas to respond to user actions.
--
llms.txt-
llms.txt-### Core Parsing API
llms.txt-```rust
llms.txt:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-
llms.txt-// Simple parsing
llms.txt-let value = parse(r#"{"key": "value"}"#)?;
--
llms.txt-
llms.txt-### Streaming API
llms.txt-```rust
llms.txt:use vexy_json::streaming::StreamingParser;
llms.txt-
llms.txt-let mut parser = StreamingParser::new();
llms.txt-for chunk in file_chunks {
--
llms.txt-
llms.txt-### Parallel Processing API
llms.txt-```rust
llms.txt:use vexy_json::parallel_chunked::{parse_parallel_chunked, ChunkedConfig};
llms.txt-
llms.txt-let config = ChunkedConfig {
llms.txt-    chunk_size: 1024 * 1024, // 1MB chunks
--
llms.txt-
llms.txt-### Plugin System API
llms.txt-```rust
llms.txt:use vexy_json::plugin::{ParserPlugin, PluginRegistry};
llms.txt-
llms.txt-struct CustomPlugin;
llms.txt-impl ParserPlugin for CustomPlugin {
--
llms.txt-```
llms.txt-
llms.txt-### Homebrew (macOS)
llms.txt:- [ ] Update Formula/vexy_json.rb with new version and SHA256
llms.txt:- [ ] Test installation: `brew install --build-from-source ./Formula/vexy_json.rb`
llms.txt-- [ ] Submit PR to homebrew-core (if applicable)
llms.txt-
llms.txt-## Communication
--
llms.txt-
llms.txt-### Binaries
llms.txt-- **macOS**: Universal binary (x86_64 + ARM64)
llms.txt:  - `vexy_json-2.0.0-macos.zip` - Standalone binary
llms.txt:  - `vexy_json-2.0.0-macos.dmg` - Installer with PKG
llms.txt-- **Linux**: 
llms.txt:  - `vexy_json-2.0.0-linux-x86_64.tar.gz` - x86_64 binary
llms.txt:  - `vexy_json-2.0.0-linux-aarch64.tar.gz` - ARM64 binary
llms.txt-- **Windows**:
llms.txt:  - `vexy_json-2.0.0-windows-x86_64.zip` - x86_64 binary
llms.txt-
llms.txt-### WASM Package
llms.txt:- `vexy_json-wasm-2.0.0.tar.gz` - WebAssembly module with TypeScript bindings
llms.txt-
llms.txt-### Source
llms.txt-- Source code archives (automatically created by GitHub)
--
llms.txt-
llms.txt-The macOS installer includes:
llms.txt-- Universal binary supporting Intel and Apple Silicon
llms.txt:- PKG installer that places `vexy_json` in `/usr/local/bin`
llms.txt-- Code-signed DMG (requires Apple Developer certificate)
llms.txt-- Automatic PATH configuration
llms.txt-
--
llms.txt-1. **Verify Installation Methods**:
llms.txt-   ```bash
llms.txt-   # Homebrew (macOS)
llms.txt:   brew update && brew install vexy_json
llms.txt-   
llms.txt-   # Cargo
llms.txt:   cargo install vexy_json-cli
llms.txt-   
llms.txt-   # npm (WASM)
llms.txt:   npm install vexy_json-wasm
llms.txt-   ```
llms.txt-
llms.txt-2. **Update Documentation**:
llms.txt-   - The docs site auto-updates via GitHub Pages
llms.txt:   - Verify at: https://twardoch.github.io/vexy_json/
llms.txt-
llms.txt-3. **Announce Release**:
llms.txt-   - GitHub Discussions
--
llms.txt-The v2.0.0 release will include:
llms.txt-
llms.txt-### Binaries
llms.txt:- `vexy_json-2.0.0-macos.dmg` - macOS installer with PKG
llms.txt:- `vexy_json-2.0.0-macos.zip` - macOS standalone binary
llms.txt:- `vexy_json-2.0.0-linux-x86_64.tar.gz` - Linux x86_64
llms.txt:- `vexy_json-2.0.0-linux-aarch64.tar.gz` - Linux ARM64
llms.txt:- `vexy_json-2.0.0-windows-x86_64.zip` - Windows x86_64
llms.txt:- `vexy_json-wasm-2.0.0.tar.gz` - WASM package
llms.txt-
llms.txt-### Features
llms.txt-- SIMD-accelerated parsing (2-3x faster)
--
llms.txt-
llms.txt-1. Review and commit all changes
llms.txt-2. Run `./scripts/release-github.sh --version 2.0.0`
llms.txt:3. Monitor the release at https://github.com/twardoch/vexy_json/actions
llms.txt-4. Once complete, announce the release
llms.txt-
llms.txt-The repository is now fully prepared for a professional v2.0.0 release with comprehensive CI/CD automation!
--
llms.txt-
llms.txt-## 1. Project Overview
llms.txt-
llms.txt:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-
llms.txt-## 2. Development Status
llms.txt-
--
llms.txt-    -   `src/error/mod.rs`: Implements custom error types for parsing failures.
llms.txt--   `crates/cli`: The command-line interface.
llms.txt-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`.
llms.txt:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments.
llms.txt--   `crates/test-utils`: Utility functions for testing.
llms.txt-
llms.txt-### 3.2. Core Features
--
llms.txt-    -   Benchmarking is performed using `criterion.rs`, with benchmarks defined in the `benches/` directory.
llms.txt--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json` and `jsonic`.
llms.txt:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-
llms.txt-## 4. Development Workflow
llms.txt-
--
llms.txt-nav_order: 4
llms.txt----
llms.txt-
llms.txt:# vexy_json Distribution Build Scripts
llms.txt-
llms.txt:This directory contains robust, maintainable scripts for building vexy_json CLI deliverables for all major platforms:
llms.txt-
llms.txt-- **macOS**: Universal binary, .pkg installer, and .dmg disk image
llms.txt-- **Windows**: .exe in a .zip archive
--
llms.txt-
llms.txt-## Support
llms.txt-
llms.txt:For issues, see the main vexy_json repository or open an issue.
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-
llms.txt-## 1. Project Overview
llms.txt-
llms.txt:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-
llms.txt-## 2. Development Status
llms.txt-
--
llms.txt-    -   `src/error/mod.rs`: Implements custom error types for parsing failures.
llms.txt--   `crates/cli`: The command-line interface.
llms.txt-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`.
llms.txt:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments.
llms.txt--   `crates/test-utils`: Utility functions for testing.
llms.txt-
llms.txt-### 3.2. Core Features
--
llms.txt-    -   Benchmarking is performed using `criterion.rs`, with benchmarks defined in the `benches/` directory.
llms.txt--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json` and `jsonic`.
llms.txt:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-
llms.txt-## 4. Development Workflow
llms.txt-
--
llms.txt-nav_order: 3
llms.txt----
llms.txt-
llms.txt:# Task Implementation Summary - vexy_json WebAssembly & Feature Verification
llms.txt-
llms.txt-## Overview
llms.txt:This document summarizes the implementation and verification of the next tasks from PLAN.md and TODO.md for the vexy_json project.
llms.txt-
llms.txt-## Tasks Completed ✅
llms.txt-
--
llms.txt-- **Browser Compatibility**: Tested in Chrome with automated cross-browser testing framework
llms.txt-- **Test Results**: WebAssembly initialization test passed (44ms duration)
llms.txt-- **File Locations**:
llms.txt:  - WASM files: `docs/pkg/vexy_json_bg.wasm`, `docs/pkg/vexy_json_wasm.js`
llms.txt-  - Test page: `docs/test-wasm.html`
llms.txt-  - Cross-browser test: `scripts/cross-browser-test.js`
llms.txt-
--
llms.txt-```json
llms.txt-{
llms.txt-  // Configuration with comments
llms.txt:  name: 'vexy_json',           // Unquoted key, single quotes
llms.txt-  version: "1.2.4",        /* Version string */
llms.txt-  features: [
llms.txt-    "comments",
--
llms.txt-- `scripts/cross-browser-test.js` - Improved timing and error handling
llms.txt-
llms.txt-### Verified Files:
llms.txt:- `docs/pkg/vexy_json_bg.wasm` - WebAssembly binary
llms.txt:- `docs/pkg/vexy_json_wasm.js` - JavaScript bindings
llms.txt-- `docs/test-wasm.html` - Browser test page
llms.txt-- `docs/tool.html` - Interactive web tool
llms.txt-
--
llms.txt-- ✅ All forgiving JSON features working consistently (100% test coverage)
llms.txt-- ✅ Git-tag-based semver properly implemented (v1.2.4)
llms.txt-
llms.txt:The vexy_json project now has robust WebAssembly support with comprehensive feature verification and proper version management.
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-
llms.txt-# LEAN.md
llms.txt-
llms.txt:## vexy_json: Definitive Lean/Minimalization Checklist & Rationale
llms.txt-
llms.txt:This actionable document is for reducing the vexy_json codebase to the absolutely minimal, efficient, and dependency-free parser crate, suitable for distribution or embedding.
llms.txt-
llms.txt----
llms.txt-### SECTION 1 — **REMOVE ENTIRELY / DEAD CODE**
--
llms.txt-
llms.txt-# REFACTOR.md – Authoring Brief (Revised for Lean & Refactor Principles)
llms.txt-
llms.txt:This document is the canonical, **action-oriented**, **self-contained**, and **phased** roadmap for the vexy_json refactor sprint. It integrates the detailed refactor playbook and quality principles from [`REFACTOR_PROMPT.md`](REFACTOR_PROMPT.md) and the minimalization/dead code removal guidance from [`LEAN.md`](LEAN.md). It is written for a technically strong engineer new to this repository.
llms.txt-
llms.txt----
llms.txt-
llms.txt-## 1. Executive Summary
llms.txt-
llms.txt:The vexy_json codebase is a monolithic Rust crate implementing a forgiving JSON parser, CLI, and WASM module. Its tightly coupled structure, legacy/dead code, and lack of clear boundaries hinder maintainability, performance, and extensibility. This refactor will:
llms.txt-
llms.txt-- Decouple components into a Cargo workspace of focused crates.
llms.txt-- Remove dead/legacy code and minimize dependencies.
--
llms.txt-- Enforce production-grade, review-friendly, and performance-aware practices.
llms.txt-- Improve documentation, developer experience, and CI/CD quality gates.
llms.txt-
llms.txt:Upon completion, vexy_json will be a lean, maintainable, and extensible parser suite, with robust testing, clear architecture, and a minimal core suitable for embedding or distribution.
llms.txt-
llms.txt----
llms.txt-
--
llms.txt-
llms.txt-Refactor into a Cargo workspace with these crates:
llms.txt-
llms.txt:- **vexy_json-core**: Core parser, lexer, value types, errors. No I/O, CLI, or WASM logic.
llms.txt:- **vexy_json-cli**: CLI wrapper, feature-gated.
llms.txt:- **vexy_json-wasm**: WASM bindings, feature-gated.
llms.txt:- **vexy_json-serde**: Serde integration, feature-gated.
llms.txt-- **test-utils**: Shared test helpers.
llms.txt-- **examples/**, **benches/**: Kept for development, excluded from lean/core builds.
llms.txt-
--
llms.txt-## 6. Testing & Quality Gates
llms.txt-
llms.txt-- **Coverage Baseline:** Measure with `cargo-tarpaulin`.
llms.txt:- **Target Coverage:** `vexy_json-core` ≥95%, CLI ≥80%, WASM ≥90%.
llms.txt-- **Testing Pyramid:** Unit, integration, property-based, and performance tests.
llms.txt-- **CI Workflow:** Format, lint, test, coverage, bench, build artifacts.
llms.txt-- **Deliverable Checklist per PR:**
--
llms.txt-
llms.txt-| Week  | Deliverable                                 | Success Metric                                 |
llms.txt-|-------|---------------------------------------------|------------------------------------------------|
llms.txt:| 1-2   | Workspace setup & `vexy_json-core` created      | CI green, core builds, dead code removed.      |
llms.txt-| 3-4   | Lexer refactored, emits spans               | Token struct has span, parser updated.         |
llms.txt-| 5-8   | New parser implemented                      | Property tests pass.                           |
llms.txt-| 9-10  | CLI/WASM migrated to new parser             | All integration tests pass.                    |
--
llms.txt-
llms.txt-# Development
llms.txt-
llms.txt:This section contains documentation for developers working on the vexy_json project.
llms.txt-
llms.txt-## Topics
llms.txt-
--
llms.txt-<document index="89">
llms.txt-<source>docs/drafts/publication-ready.md</source>
llms.txt-<document_content>
llms.txt:# 🚀 vexy_json v1.1.0 - Ready for Publication
llms.txt-
llms.txt-## ✅ Status: READY FOR PUBLICATION
llms.txt-
--
llms.txt-## 📦 Package Details
llms.txt-
llms.txt-- **Version**: 1.1.0
llms.txt:- **Name**: vexy_json
llms.txt-- **Description**: A forgiving JSON parser - Rust port of jsonic
llms.txt:- **Repository**: https://github.com/twardoch/vexy_json
llms.txt-- **License**: MIT OR Apache-2.0
llms.txt-- **Keywords**: json, parser, forgiving, jsonic
llms.txt-- **Categories**: parser-implementations, encoding
--
llms.txt-## 📊 What's Included
llms.txt-
llms.txt-- Core library with all forgiving JSON features
llms.txt:- CLI tool (`vexy_json` binary)
llms.txt-- WebAssembly bindings (optional feature)
llms.txt-- Comprehensive test suite (73 tests)
llms.txt-- Performance benchmarks
--
llms.txt-
llms.txt-**Project Status**: ✅ **CORE DEVELOPMENT COMPLETE**
llms.txt-
llms.txt:All core development goals have been achieved as of January 8, 2025. The vexy_json parser is fully functional with:
llms.txt-- Complete forgiving JSON parsing capabilities
llms.txt-- 100% test suite pass rate
llms.txt-- Jekyll web tool integration
--
llms.txt-- [x] Create repair action tracking and reporting system
llms.txt-
llms.txt-### Implementation Details:
llms.txt:- **Three-tier parsing strategy**: serde_json (fast) → vexy_json (forgiving) → repair (tolerant)
llms.txt-- **Internal repair implementation**: Custom `JsonRepairer` for bracket balancing
llms.txt-- **Enhanced error types**: Added `RepairFailed`, `BracketMismatch`, `UnbalancedBrackets`, `MaxRepairsExceeded`
llms.txt-- **Repair tracking**: `RepairAction` and `RepairType` enums with detailed reporting
--
llms.txt-- [x] Study theoretical foundations (PEG with labeled failures, GLR parsers, etc.)
llms.txt-- [x] Investigate practical heuristics for bracket balancing
llms.txt-- [x] Create comprehensive specification for `json-repair` integration (see issues/106.txt)
llms.txt:- [x] Design fallback chain architecture (fastest → core vexy_json → json-repair)
llms.txt-- [x] Plan implementation strategy with minimal disruption to existing code
llms.txt-
llms.txt-### Research Findings:
--
llms.txt-- Identified `json-repair` crate as viable solution for bracket mismatch handling
llms.txt-- Found multiple approaches: panic-mode recovery, PEG labeled failures, GLR parsing
llms.txt-- Documented strategies from academic research and practical implementations
llms.txt:- Key insight: Three-tier parsing approach (serde_json → vexy_json → json-repair) for optimal performance
llms.txt-
llms.txt-## Recently Completed: Streaming Parser Implementation ✅
llms.txt-
--
llms.txt-
llms.txt-**Status**: ✅ COMPLETED (January 8, 2025)
llms.txt-
llms.txt:Successfully implemented comprehensive Python bindings that make vexy_json available to Python users via PyO3 bindings:
llms.txt-
llms.txt-- **Core API**: Complete Python bindings with `parse()`, `loads()`, `parse_with_options()`, `is_valid()`, `dumps()`
llms.txt-- **File Operations**: Added `load()` and `dump()` functions for file-like objects
--
llms.txt-
llms.txt-**Status**: ✅ COMPLETED (January 8, 2025)
llms.txt-
llms.txt:Successfully implemented comprehensive CLI enhancements that transform vexy_json from a basic parser into a powerful JSON processing tool:
llms.txt-
llms.txt-- **Enhanced CLI Interface**: 15+ new command-line options and flags
llms.txt-- **Advanced Processing**: Watch mode (`--watch`), parallel processing (`--parallel`), batch operations
--
llms.txt-Vexy JSON accepts JSON that would be rejected by standard parsers:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::parse;
llms.txt-
llms.txt-// Comments are allowed
llms.txt-let json = r#"
--
llms.txt-Standardize JSON format for consistent processing:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::normalize;
llms.txt-
llms.txt-let json = r#"{"z": 1, "a": 2, "b": null}"#;
llms.txt-let normalized = normalize(json).unwrap();
--
llms.txt-Improve JSON structure for performance:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::optimize;
llms.txt-
llms.txt-let json = r#"{"count": 42.0, "price": 19.0}"#;
llms.txt-let optimized = optimize(&json).unwrap();
--
llms.txt-Automatically fix common JSON issues:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::repair::JsonRepairer;
llms.txt-
llms.txt-let mut repairer = JsonRepairer::new(10);
llms.txt-let broken = r#"{"key": "value", "missing": "quote}"#;
--
llms.txt-Process large JSON files efficiently:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::streaming::parse_streaming;
llms.txt-
llms.txt-for value in parse_streaming(reader)? {
llms.txt-    // Process each JSON value as it's parsed
--
llms.txt-Parse multiple JSON documents simultaneously:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::parallel::parse_parallel;
llms.txt-
llms.txt-let results = parse_parallel(&json_strings, ParallelConfig::default())?;
llms.txt-```
--
llms.txt-Full-featured Python bindings with NumPy and Pandas support:
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Standard JSON parsing
llms.txt:data = vexy_json.loads('{"name": "John", "age": 30}')
llms.txt-
llms.txt-# NumPy integration
llms.txt-import numpy as np
llms.txt:array = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-
llms.txt-# Pandas integration
llms.txt-import pandas as pd
llms.txt:df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
llms.txt-
llms.txt-# Streaming support
llms.txt:with vexy_json.StreamingParser() as parser:
llms.txt-    for item in parser.parse_stream(file_handle):
llms.txt-        process(item)
llms.txt-```
--
llms.txt-Run Vexy JSON in browsers and JavaScript environments:
llms.txt-
llms.txt-```javascript
llms.txt:import init, { parse } from 'vexy_json-wasm';
llms.txt-
llms.txt-await init();
llms.txt-const result = parse('{"name": "John", age: 30}');
--
llms.txt-### Comprehensive Error Reporting
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::parse;
llms.txt-
llms.txt-match parse(invalid_json) {
llms.txt-    Ok(value) => println!("Parsed: {:?}", value),
--
llms.txt-### Automatic Recovery
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::parser::parse_with_fallback;
llms.txt-
llms.txt-// Tries multiple parsing strategies automatically
llms.txt-let result = parse_with_fallback(input, options);
--
llms.txt-### Repair with Confidence Scoring
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::repair::advanced::AdvancedJsonRepairer;
llms.txt-
llms.txt-let mut repairer = AdvancedJsonRepairer::new();
llms.txt-let (fixed, strategies) = repairer.repair(input)?;
--
llms.txt-Extend Vexy JSON with custom functionality:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::Plugin;
llms.txt-
llms.txt-struct CustomPlugin;
llms.txt-
--
llms.txt-### Schema Validation
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::SchemaValidationPlugin;
llms.txt-
llms.txt-let plugin = SchemaValidationPlugin::new(schema);
llms.txt-// Validates JSON against schema during parsing
--
llms.txt-### Date/Time Parsing
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::DateTimePlugin;
llms.txt-
llms.txt-let plugin = DateTimePlugin::new();
llms.txt-// Automatically parses ISO 8601 date strings
--
llms.txt-### Comment Preservation
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::CommentPreservationPlugin;
llms.txt-
llms.txt-let plugin = CommentPreservationPlugin::new();
llms.txt-// Preserves comments in parsed JSON
--
llms.txt-
llms.txt-# Forgiving Features
llms.txt-
llms.txt:`vexy_json` is a forgiving JSON parser, handling common deviations from strict JSON (RFC 8259). Below are the supported forgiving features, enhanced in v2.0.0 with streaming, parallel processing, and plugin capabilities:
llms.txt-
llms.txt-## Comments
llms.txt-
--
llms.txt-Object keys can be unquoted if they are valid identifiers.
llms.txt-
llms.txt-```json
llms.txt:{ name: "vexy_json", version: 1.0 }
llms.txt-```
llms.txt-
llms.txt-## Trailing Commas
--
llms.txt-
llms.txt-All forgiving features can be disabled for strict RFC 8259 compliance.
llms.txt-
llms.txt:These forgiving features make `vexy_json` a flexible parser for configurations, data files, and other scenarios where strict JSON adherence might be relaxed.
llms.txt-
llms.txt-## New in v2.0.0: Advanced Features
llms.txt-
--
llms.txt-- Linear scalability with core count
llms.txt-
llms.txt-### Plugin Architecture
llms.txt:Extend vexy_json with custom functionality:
llms.txt-- Transform values during parsing
llms.txt-- Add custom validation rules
llms.txt-- Implement domain-specific logic
--
llms.txt-
llms.txt-# Feedback & Support
llms.txt-
llms.txt:We value your feedback and are committed to improving vexy_json based on user experiences. This page explains how to report issues, request features, and get support.
llms.txt-
llms.txt-## 🔧 Web Tool Feedback
llms.txt-
llms.txt:The [vexy_json web tool](tool.html) includes a built-in feedback system that makes it easy to report issues and suggest improvements.
llms.txt-
llms.txt-### How to Use the Feedback System
llms.txt-
--
llms.txt-
llms.txt-## 📋 GitHub Issues
llms.txt-
llms.txt:For detailed bug reports and feature requests, use our [GitHub Issues](https://github.com/twardoch/vexy_json/issues):
llms.txt-
llms.txt-### Bug Reports
llms.txt-
llms.txt:Use the [Bug Report Template](https://github.com/twardoch/vexy_json/issues/new?template=bug_report.md) and include:
llms.txt-
llms.txt-- **Clear description** of the bug
llms.txt-- **Steps to reproduce** the issue
--
llms.txt-
llms.txt-### Feature Requests
llms.txt-
llms.txt:Use the [Feature Request Template](https://github.com/twardoch/vexy_json/issues/new?template=feature_request.md) and include:
llms.txt-
llms.txt-- **Problem description** - What need does this address?
llms.txt-- **Proposed solution** - What would you like to see?
--
llms.txt-
llms.txt-### Performance Issues
llms.txt-
llms.txt:Use the [Performance Issue Template](https://github.com/twardoch/vexy_json/issues/new?template=performance_issue.md) and include:
llms.txt-
llms.txt-- **Performance problem** description
llms.txt-- **Input characteristics** (size, complexity)
--
llms.txt-
llms.txt-## 💬 Community Discussion
llms.txt-
llms.txt:For questions, ideas, and general discussion, use [GitHub Discussions](https://github.com/twardoch/vexy_json/discussions):
llms.txt-
llms.txt-- **Q&A** - Ask questions about usage
llms.txt-- **Ideas** - Share feature ideas and get feedback
llms.txt:- **Show and Tell** - Share how you're using vexy_json
llms.txt-- **General** - Any other discussion
llms.txt-
llms.txt-## 📧 Direct Contact
llms.txt-
llms.txt-For security issues or private matters, you can contact the maintainer directly:
llms.txt-
llms.txt:- **Email**: adam+vexy_json@twardoch.com
llms.txt-- **Security**: Please use responsible disclosure for security issues
llms.txt-
llms.txt-## 🎯 What Makes Good Feedback
--
llms.txt-
llms.txt----
llms.txt-
llms.txt:**Thank you for helping make vexy_json better!** Your feedback drives improvements and helps us build a tool that works well for everyone.
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-nav_order: 1
llms.txt----
llms.txt-
llms.txt:# Welcome to vexy_json v2.0.0
llms.txt-
llms.txt:`vexy_json` is a forgiving JSON parser written in Rust, inspired by the JavaScript library `jsonic`. It provides robust, flexible parsing for both strict and non-standard JSON, supporting features like comments, unquoted keys, trailing commas, implicit arrays/objects, and more. vexy_json is available as a Rust library, CLI tool, and WebAssembly module for browser/Node.js usage.
llms.txt-
llms.txt-## 🚀 New in Version 2.0.0
llms.txt-
--
llms.txt-## Quick Start (Rust)
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-fn main() {
llms.txt-    let data = r#"{ key: 1, /* comment */ arr: [1,2,3,], hex: 0x10 }"#;
--
llms.txt-
llms.txt-## Contributing
llms.txt-
llms.txt:See [Contributing](contributing.md) for how to help improve vexy_json.
llms.txt-
llms.txt:📦 **[Download the latest CLI release](https://github.com/twardoch/vexy_json/releases/latest)** - Get the `vexy_json` command-line interface for your platform.
llms.txt-
llms.txt-## Features
llms.txt-
llms.txt-- **Forgiving Parsing**: Handles comments, trailing commas, unquoted keys, and implicit top-level objects/arrays.
llms.txt-- **Rust Idiomatic API**: Designed with Rust's ownership, borrowing, and error handling principles in mind.
llms.txt-- **Performance**: Optimized for speed and efficiency.
llms.txt:- **Serde Integration**: Seamlessly convert `vexy_json::Value` to and from other data formats using the `serde` framework.
llms.txt:- **WebAssembly (WASM) Bindings**: Use `vexy_json` directly in JavaScript environments.
llms.txt-- **Interactive Web Tool**: Browser-based parser with real-time feedback and sharing capabilities.
llms.txt-- **Compatibility**: Aims for API compatibility with the original `jsonic.js` where appropriate.
llms.txt-
llms.txt-## Getting Started
llms.txt-
llms.txt:To use `vexy_json` in your Rust project, add it to your `Cargo.toml`:
llms.txt-
llms.txt-```toml
llms.txt-[dependencies]
llms.txt:vexy_json = "2.0.0" # Replace with the latest version
llms.txt-```
llms.txt-
llms.txt-Then, you can parse JSON-like strings:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-fn main() {
llms.txt-    let json_str = r#"
--
llms.txt-
llms.txt-## Project Status
llms.txt-
llms.txt:`vexy_json` v2.0.0 is production-ready with comprehensive features including streaming parsing, parallel processing, and a plugin architecture. We welcome contributions to expand the ecosystem!
llms.txt-
llms.txt-## License
llms.txt-
llms.txt:`vexy_json` is distributed under the MIT License. See the [LICENSE](https://github.com/twardoch/vexy_json/blob/main/LICENSE) file for more details.
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
--
llms.txt-### Simple Usage
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::repair::JsonRepairer;
llms.txt-
llms.txt-let mut repairer = JsonRepairer::new(10); // Max 10 repairs
llms.txt-let malformed = r#"{"key": "value", "missing": "quote}"#;
--
llms.txt-### Configuration
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::repair::advanced::{AdvancedJsonRepairer, TypeCoercionRules};
llms.txt-
llms.txt-let mut repairer = AdvancedJsonRepairer::new()
llms.txt-    .with_confidence_threshold(0.7)
--
llms.txt-Each repair strategy has a confidence score:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::repair::advanced::RepairConfidence;
llms.txt-
llms.txt-let (fixed, strategies) = repairer.repair(input)?;
llms.txt-
--
llms.txt-### Detailed Repair Tracking
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::parser::parse_with_detailed_repair_tracking;
llms.txt-
llms.txt-let result = parse_with_detailed_repair_tracking(input, options)?;
llms.txt-
--
llms.txt-3. **Repair Tier**: Automatic repair for malformed JSON
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::parser::parse_with_fallback;
llms.txt-
llms.txt-let result = parse_with_fallback(input, options);
llms.txt-// Automatically tries all three tiers
--
llms.txt-### Tracking Repair History
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::repair::advanced::AdvancedJsonRepairer;
llms.txt-
llms.txt-let mut repairer = AdvancedJsonRepairer::new();
llms.txt-
--
llms.txt-### Implementing Custom Repairs
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::repair::advanced::{RepairStrategy, RepairAction, RepairType, RepairConfidence};
llms.txt-
llms.txt-fn create_custom_repair(input: &str) -> Option<RepairStrategy> {
llms.txt-    // Custom logic to detect and fix specific issues
--
llms.txt-### Automatic Repair During Parsing
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::{parse_with_options, ParserOptions};
llms.txt-
llms.txt-let options = ParserOptions {
llms.txt-    enable_repair: true,
--
llms.txt-### Repair-First Parsing
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::parser::parse_with_fallback;
llms.txt-
llms.txt-// Always try repair if normal parsing fails
llms.txt-let result = parse_with_fallback(input, options);
--
llms.txt-### Repair Failures
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::repair::JsonRepairer;
llms.txt-
llms.txt-let mut repairer = JsonRepairer::new(5);
llms.txt-match repairer.repair(input) {
--
llms.txt-nav_order: 10
llms.txt----
llms.txt-
llms.txt:# Migration Guide: vexy_json v2.0.0
llms.txt-
llms.txt:This document provides comprehensive guidance for upgrading to vexy_json v2.0.0 from previous versions.
llms.txt-
llms.txt-## Migrating from v1.x to v2.0.0
llms.txt-
--
llms.txt-
llms.txt-**After (v2.0.0):**
llms.txt-```rust
llms.txt:use vexy_json::StreamingParser;
llms.txt-
llms.txt-let mut parser = StreamingParser::new();
llms.txt-let file = std::fs::File::open("huge.json")?;
--
llms.txt-
llms.txt-**After (v2.0.0):**
llms.txt-```rust
llms.txt:use vexy_json::parse_parallel;
llms.txt-
llms.txt-let results = parse_parallel(json_files); // Automatically uses multiple cores
llms.txt-```
--
llms.txt-   - Some error variants have been renamed for clarity
llms.txt-   - Add explicit imports if you match on specific error types:
llms.txt-   ```rust
llms.txt:   use vexy_json::Error::{UnexpectedChar, InvalidNumber};
llms.txt-   ```
llms.txt-
llms.txt-2. **Feature Flags**
--
llms.txt-
llms.txt-### 📦 Dependency Updates
llms.txt-
llms.txt:If you depend on specific versions of vexy_json's dependencies:
llms.txt-- `serde`: Now requires 1.0.190+
llms.txt-- `wasm-bindgen`: Updated to 0.2.90
llms.txt-- New dependencies: `rayon`, `crossbeam-channel`, `simd-json`
llms.txt-
llms.txt-### 🔧 CLI Changes
llms.txt-
llms.txt:The CLI has been significantly enhanced. Update scripts that use vexy_json:
llms.txt-
llms.txt-**New capabilities:**
llms.txt-```bash
llms.txt-# Watch mode
llms.txt:vexy_json --watch input.json -o output.json
llms.txt-
llms.txt-# Batch processing
llms.txt:vexy_json --batch ./data/ --output-dir ./processed/
llms.txt-
llms.txt-# Pretty printing with options
llms.txt:vexy_json --pretty --sort-keys --indent 4 input.json
llms.txt-```
llms.txt-
llms.txt----
llms.txt-
llms.txt:# Migration Guide: vexy_json v0.2.0
llms.txt-
llms.txt-This section covers the earlier v0.2.0 refactor for historical reference.
llms.txt-
--
llms.txt-
llms.txt-**New exports available:**
llms.txt-```rust
llms.txt:use vexy_json::{ParseResult, Error};
llms.txt-
llms.txt-// New type alias for semantic clarity
llms.txt-fn parse_config() -> ParseResult<Config> {
--
llms.txt-```javascript
llms.txt-// Enhanced error objects with more information
llms.txt-try {
llms.txt:    const result = vexy_json.parse_json(input);
llms.txt-} catch (error) {
llms.txt-    console.log(error.message);        // Error description
llms.txt-    console.log(error.position);       // Character position (if available)
--
llms.txt-### For Rust Users
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse, ParseResult, ParserOptions};
llms.txt-
llms.txt-// Recommended: Use the new ParseResult type for clarity
llms.txt-fn parse_config_file(content: &str) -> ParseResult<Config> {
--
llms.txt-```javascript
llms.txt-// Enhanced error handling with structured error objects
llms.txt-try {
llms.txt:    const result = vexy_json.parse_json(jsonString);
llms.txt-    console.log('Parsed:', result);
llms.txt-} catch (error) {
llms.txt-    console.error(`Parse error at position ${error.position}: ${error.message}`);
--
llms.txt-If you encounter any issues during migration:
llms.txt-
llms.txt-1. **Check compatibility**: Ensure you're not using any undocumented internal APIs
llms.txt:2. **Update imports**: Make sure you're importing from the main `vexy_json` crate
llms.txt-3. **Test thoroughly**: Run your existing test suite to verify behavior
llms.txt-4. **Report issues**: File bug reports with specific reproduction cases
llms.txt-
--
llms.txt-<document_content>
llms.txt-# macOS Packaging Guide
llms.txt-
llms.txt:This guide explains how to package vexy_json for macOS distribution as a `.dmg` containing a `.pkg` installer.
llms.txt-
llms.txt-## Prerequisites
llms.txt-
--
llms.txt-
llms.txt-This script will:
llms.txt-1. Build the release binary using `cargo build --release`
llms.txt:2. Create a `.pkg` installer that installs vexy_json to `/usr/local/bin`
llms.txt-3. Wrap the `.pkg` in a `.dmg` for easy distribution
llms.txt-
llms.txt-## Output
llms.txt-
llms.txt-The script produces:
llms.txt:- `vexy_json-{VERSION}-macos.dmg` - The distributable disk image
llms.txt-- Contains the `.pkg` installer and a README
llms.txt-
llms.txt-## Installation
llms.txt-
llms.txt:Users can install vexy_json by:
llms.txt-1. Opening the `.dmg` file
llms.txt-2. Double-clicking the `.pkg` installer
llms.txt-3. Following the installation wizard
llms.txt:4. The `vexy_json` command will be available in their terminal
llms.txt-
llms.txt-## Code Signing (Optional)
llms.txt-
--
llms.txt-
llms.txt-# Sign the DMG
llms.txt-codesign --sign "Developer ID Application: Your Name (TEAMID)" \
llms.txt:    --timestamp vexy_json-*.dmg
llms.txt-```
llms.txt-
llms.txt-## Notarization (Recommended)
--
llms.txt-```bash
llms.txt-# Submit for notarization
llms.txt-xcrun altool --notarize-app \
llms.txt:    --primary-bundle-id "com.twardoch.vexy_json" \
llms.txt-    --username "your-apple-id@example.com" \
llms.txt-    --password "@keychain:AC_PASSWORD" \
llms.txt:    --file vexy_json-*.dmg
llms.txt-
llms.txt-# Staple the notarization ticket
llms.txt:xcrun stapler staple vexy_json-*.dmg
llms.txt-```
llms.txt-
llms.txt-## Automation
--
llms.txt-Let's create a simple plugin that converts all string values to uppercase:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::ParserPlugin;
llms.txt:use vexy_json_core::ast::Value;
llms.txt:use vexy_json_core::error::Result;
llms.txt-use std::any::Any;
llms.txt-
llms.txt-pub struct UppercasePlugin;
--
llms.txt-A plugin that validates data against business rules:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::error::Error;
llms.txt-
llms.txt-pub struct ValidationPlugin {
llms.txt-    rules: Vec<ValidationRule>,
--
llms.txt-#[cfg(test)]
llms.txt-mod tests {
llms.txt-    use super::*;
llms.txt:    use vexy_json::parse;
llms.txt-
llms.txt-    #[test]
llms.txt-    fn test_uppercase_plugin() {
--
llms.txt-```rust
llms.txt-#[test]
llms.txt-fn test_plugin_integration() {
llms.txt:    use vexy_json::{parse_with_options, ParserOptions};
llms.txt-    
llms.txt-    let json = r#"{"name": "john", "age": 25}"#;
llms.txt-    let mut plugin = UppercasePlugin;
--
llms.txt-    MacroError { macro_name: String },
llms.txt-}
llms.txt-
llms.txt:impl From<PluginError> for vexy_json_core::error::Error {
llms.txt-    fn from(err: PluginError) -> Self {
llms.txt:        vexy_json_core::error::Error::Custom(err.to_string())
llms.txt-    }
llms.txt-}
llms.txt-```
--
llms.txt-
llms.txt-```toml
llms.txt-[package]
llms.txt:name = "vexy_json-plugin-myplugin"
llms.txt-version = "0.1.0"
llms.txt-edition = "2021"
llms.txt-
llms.txt-[dependencies]
llms.txt:vexy_json-core = "2.0"
llms.txt-```
llms.txt-
llms.txt-## Best Practices Summary
--
llms.txt-**Purpose**: Validate JSON against a schema  
llms.txt-**Usage**:
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::plugins::SchemaValidationPlugin;
llms.txt-
llms.txt-let schema = parse(r#"{"type": "object", "properties": {"name": {"type": "string"}}}"#)?;
llms.txt-let validator = SchemaValidationPlugin::new(schema);
--
llms.txt-**Purpose**: Parse ISO 8601 dates and convert them to structured objects  
llms.txt-**Usage**:
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::plugins::DateTimePlugin;
llms.txt-
llms.txt-let mut datetime_plugin = DateTimePlugin::new();
llms.txt-datetime_plugin.transform_value(&mut value, "$")?;
--
llms.txt-**Purpose**: Parse non-standard number formats (hex, binary, underscores)  
llms.txt-**Usage**:
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::plugins::CustomNumberFormatPlugin;
llms.txt-
llms.txt-let mut number_plugin = CustomNumberFormatPlugin::new();
llms.txt-let result = number_plugin.on_number("0xFF", "$")?;
--
llms.txt-**Purpose**: Preserve comments during parsing  
llms.txt-**Usage**:
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::plugins::CommentPreservationPlugin;
llms.txt-
llms.txt-let mut comment_plugin = CommentPreservationPlugin::new();
llms.txt-comment_plugin.add_comment("Description".to_string(), "$.field", false);
--
llms.txt-All plugins must implement the `ParserPlugin` trait:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::plugin::ParserPlugin;
llms.txt:use vexy_json_core::ast::Value;
llms.txt:use vexy_json_core::error::Result;
llms.txt-use std::any::Any;
llms.txt-
llms.txt-struct MyPlugin;
--
llms.txt-
llms.txt-#### Direct Integration
llms.txt-```rust
llms.txt:use vexy_json_core::parser::Parser;
llms.txt:use vexy_json_core::plugin::ParserPluginManager;
llms.txt-
llms.txt-let mut manager = ParserPluginManager::new();
llms.txt-manager.register(Box::new(MyPlugin));
--
llms.txt-
llms.txt-#### Parser Options
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-
llms.txt-let options = ParserOptions {
llms.txt-    plugins: vec![Box::new(MyPlugin)],
--
llms.txt-#[cfg(test)]
llms.txt-mod tests {
llms.txt-    use super::*;
llms.txt:    use vexy_json::parse;
llms.txt-
llms.txt-    #[test]
llms.txt-    fn test_my_plugin() {
--
llms.txt-### Basic Usage
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse, ParserOptions};
llms.txt:use vexy_json_core::plugin::plugins::SchemaValidationPlugin;
llms.txt-
llms.txt-// Define a schema
llms.txt-let schema = parse(r#"{
--
llms.txt-The plugin can be integrated into the parsing pipeline:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-
llms.txt-// Create parser options with validation
llms.txt-let options = ParserOptions {
--
llms.txt-#[cfg(test)]
llms.txt-mod tests {
llms.txt-    use super::*;
llms.txt:    use vexy_json::parse;
llms.txt-
llms.txt-    #[test]
llms.txt-    fn test_basic_validation() {
--
llms.txt-nav_order: 6
llms.txt----
llms.txt-
llms.txt:# vexy_json - Forgiving JSON Parser for Python
llms.txt-
llms.txt-A Python library for parsing "forgiving" JSON, which is JSON that includes features like:
llms.txt-
--
llms.txt-- Implicit top-level objects and arrays
llms.txt-- Newlines as comma separators
llms.txt-
llms.txt:This is a Python binding for the Rust [vexy_json](https://github.com/twardoch/vexy_json) library, which is a port of the JavaScript [jsonic](https://github.com/jsonicjs/jsonic) library.
llms.txt-
llms.txt-## Installation
llms.txt-
llms.txt-```bash
llms.txt:pip install vexy_json
llms.txt-```
llms.txt-
llms.txt-## Quick Start
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Parse forgiving JSON
llms.txt:result = vexy_json.parse('''
llms.txt-{
llms.txt-    // This is a comment
llms.txt-    name: "Alice",
--
llms.txt-### Basic Parsing
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Standard JSON
llms.txt:data = vexy_json.parse('{"key": "value"}')
llms.txt-
llms.txt-# Forgiving features
llms.txt:data = vexy_json.parse('''
llms.txt-{
llms.txt-    // Comments are allowed
llms.txt-    unquoted_key: "value",
--
llms.txt-### Custom Options
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Parse with specific options
llms.txt:data = vexy_json.parse_with_options(
llms.txt-    'key: value',
llms.txt-    allow_comments=True,
llms.txt-    allow_trailing_commas=True,
--
llms.txt-### Validation
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Check if JSON is valid
llms.txt:if vexy_json.is_valid('{"valid": true}'):
llms.txt-    print("Valid JSON!")
llms.txt-
llms.txt:if not vexy_json.is_valid('invalid json'):
llms.txt-    print("Invalid JSON!")
llms.txt-```
llms.txt-
llms.txt-### Serialization
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-data = {'name': 'Alice', 'age': 30}
llms.txt-
llms.txt-# Compact output
llms.txt:json_str = vexy_json.dumps(data)
llms.txt-print(json_str)
llms.txt-# Output: {"name":"Alice","age":30}
llms.txt-
llms.txt-# Pretty printed output
llms.txt:json_str = vexy_json.dumps(data, indent=2)
llms.txt-print(json_str)
llms.txt-# Output:
llms.txt-# {
--
llms.txt-
llms.txt-## Comparison with Standard Library
llms.txt-
llms.txt:Unlike Python's built-in `json` module, vexy_json is forgiving and accepts non-standard JSON:
llms.txt-
llms.txt-```python
llms.txt-import json
llms.txt:import vexy_json
llms.txt-
llms.txt-forgiving_json = '''
llms.txt-{
--
llms.txt-    print(f"json module failed: {e}")
llms.txt-
llms.txt-# This works fine
llms.txt:result = vexy_json.parse(forgiving_json)
llms.txt:print(f"vexy_json parsed: {result}")
llms.txt-```
llms.txt-
llms.txt-## Performance
llms.txt-
llms.txt:vexy_json is implemented in Rust and should be competitive with other JSON parsers for most use cases. The forgiving features add minimal overhead.
llms.txt-
llms.txt-## License
llms.txt-
--
llms.txt-## Installation
llms.txt-
llms.txt-```bash
llms.txt:pip install vexy_json
llms.txt-```
llms.txt-
llms.txt-## Basic Usage
--
llms.txt-### Parsing JSON
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Standard JSON parsing
llms.txt:data = vexy_json.loads('{"name": "John", "age": 30}')
llms.txt-print(data)  # {'name': 'John', 'age': 30}
llms.txt-
llms.txt-# Parse with forgiving features
llms.txt:data = vexy_json.loads('''
llms.txt-{
llms.txt-    name: "John",  // Unquoted keys and comments
llms.txt-    age: 30,       // Trailing comma is okay
--
llms.txt-The Vexy JSON Python bindings provide full compatibility with the standard `json` module:
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Drop-in replacement for json.loads()
llms.txt:data = vexy_json.loads('{"key": "value"}')
llms.txt-
llms.txt-# All standard json functions are available
llms.txt:json_str = vexy_json.dumps(data)
llms.txt:json_str = vexy_json.dumps(data, indent=2)
llms.txt-
llms.txt-# File operations
llms.txt-with open('data.json', 'r') as f:
llms.txt:    data = vexy_json.load(f)
llms.txt-
llms.txt-with open('output.json', 'w') as f:
llms.txt:    vexy_json.dump(data, f, indent=2)
llms.txt-```
llms.txt-
llms.txt-## Advanced Parsing Options
--
llms.txt-### Custom Parser Options
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Parse with custom options
llms.txt:data = vexy_json.parse_with_options(
llms.txt-    json_string,
llms.txt-    allow_comments=True,
llms.txt-    allow_trailing_commas=True,
--
llms.txt-### Validation
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Check if JSON is valid
llms.txt:is_valid = vexy_json.is_valid('{"valid": true}')
llms.txt-print(is_valid)  # True
llms.txt-
llms.txt:is_valid = vexy_json.is_valid('invalid json')
llms.txt-print(is_valid)  # False
llms.txt-```
llms.txt-
--
llms.txt-### Streaming Parser with Context Manager
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Parse large JSON files efficiently
llms.txt:with vexy_json.StreamingParser() as parser:
llms.txt-    with open('large_file.json', 'r') as f:
llms.txt-        for item in parser.parse_stream(f):
llms.txt-            process(item)
--
llms.txt-### NDJSON Support
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Parse NDJSON (newline-delimited JSON)
llms.txt:with vexy_json.StreamingParser() as parser:
llms.txt-    with open('data.ndjson', 'r') as f:
llms.txt-        for item in parser.parse_lines(f):
llms.txt-            process(item)
--
llms.txt-### Custom Streaming Options
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Create streaming parser with custom options
llms.txt:parser = vexy_json.StreamingParser(
llms.txt-    allow_comments=True,
llms.txt-    allow_trailing_commas=True,
llms.txt-    enable_repair=True
--
llms.txt-### Direct Array Parsing
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-import numpy as np
llms.txt-
llms.txt-# Parse JSON array directly to NumPy array
llms.txt:arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-print(type(arr))  # <class 'numpy.ndarray'>
llms.txt-print(arr.dtype)  # int64
llms.txt-
llms.txt-# Specify dtype
llms.txt:arr = vexy_json.loads_numpy('[1.1, 2.2, 3.3]', dtype='float32')
llms.txt-print(arr.dtype)  # float32
llms.txt-```
llms.txt-
llms.txt-### Zero-Copy Optimization
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Optimized parsing for numeric data
llms.txt:arr = vexy_json.loads_numpy_zerocopy('[1, 2, 3, 4, 5]', dtype='int64')
llms.txt-# Uses zero-copy when possible for better performance
llms.txt-```
llms.txt-
llms.txt-### Mixed Data Types
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Handle mixed arrays
llms.txt:arr = vexy_json.loads_numpy('[1, 2.5, 3, 4.7]')
llms.txt-print(arr.dtype)  # float64 (automatically promoted)
llms.txt-
llms.txt-# Non-numeric data falls back to object arrays
llms.txt:arr = vexy_json.loads_numpy('["a", "b", "c"]')
llms.txt-print(arr.dtype)  # object
llms.txt-```
llms.txt-
--
llms.txt-### DataFrame Conversion
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-import pandas as pd
llms.txt-
llms.txt-# Parse JSON to DataFrame
llms.txt-json_data = '[{"name": "John", "age": 30}, {"name": "Jane", "age": 25}]'
llms.txt:df = vexy_json.loads_dataframe(json_data)
llms.txt-print(type(df))  # <class 'pandas.core.frame.DataFrame'>
llms.txt-
llms.txt-# Specify orientation
llms.txt:df = vexy_json.loads_dataframe(json_data, orient='records')
llms.txt-```
llms.txt-
llms.txt-## Error Handling
--
llms.txt-### Parse Errors
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-try:
llms.txt:    data = vexy_json.loads('invalid json')
llms.txt-except ValueError as e:
llms.txt-    print(f"Parse error: {e}")
llms.txt-```
--
llms.txt-### Repair Functionality
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Automatic repair of common JSON issues
llms.txt-try:
llms.txt:    data = vexy_json.loads('{"key": "value",}')  # Trailing comma
llms.txt-    print(data)  # Successfully parsed
llms.txt-except ValueError as e:
llms.txt-    print(f"Even repair failed: {e}")
--
llms.txt-### Choosing the Right Function
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# For standard JSON, use loads() for compatibility
llms.txt:data = vexy_json.loads(standard_json)
llms.txt-
llms.txt-# For forgiving JSON, use parse_with_options()
llms.txt:data = vexy_json.parse_with_options(
llms.txt-    forgiving_json,
llms.txt-    allow_comments=True,
llms.txt-    allow_trailing_commas=True
llms.txt-)
llms.txt-
llms.txt-# For numerical data, use NumPy integration
llms.txt:arr = vexy_json.loads_numpy(json_array)
llms.txt-
llms.txt-# For tabular data, use pandas integration
llms.txt:df = vexy_json.loads_dataframe(json_records)
llms.txt-```
llms.txt-
llms.txt-### Memory Efficiency
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Streaming for large files
llms.txt:with vexy_json.StreamingParser() as parser:
llms.txt-    for item in parser.parse_stream(large_file):
llms.txt-        # Process items one at a time
llms.txt-        # Memory usage stays constant
--
llms.txt-
llms.txt-```python
llms.txt-from typing import Any, Dict, List, Optional, Union
llms.txt:import vexy_json
llms.txt-
llms.txt-def process_json(json_str: str) -> Dict[str, Any]:
llms.txt:    return vexy_json.loads(json_str)
llms.txt-
llms.txt-def safe_parse(json_str: str) -> Optional[Dict[str, Any]]:
llms.txt-    try:
llms.txt:        return vexy_json.loads(json_str)
llms.txt-    except ValueError:
llms.txt-        return None
llms.txt-```
--
llms.txt-### Error Handling
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-def safe_parse_json(json_str: str, default=None):
llms.txt-    """Safely parse JSON with fallback."""
llms.txt-    try:
llms.txt:        return vexy_json.loads(json_str)
llms.txt-    except ValueError as e:
llms.txt-        print(f"JSON parse error: {e}")
llms.txt-        return default
--
llms.txt-### Memory Management
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# For large datasets, prefer streaming
llms.txt-def process_large_json(filename):
llms.txt:    with vexy_json.StreamingParser() as parser:
llms.txt-        with open(filename, 'r') as f:
llms.txt-            for item in parser.parse_stream(f):
llms.txt-                yield process_item(item)
--
llms.txt-
llms.txt-```python
llms.txt-import requests
llms.txt:import vexy_json
llms.txt-
llms.txt-response = requests.get('https://api.example.com/data')
llms.txt:data = vexy_json.loads(response.text)
llms.txt-```
llms.txt-
llms.txt-### With FastAPI
llms.txt-
llms.txt-```python
llms.txt-from fastapi import FastAPI
llms.txt:import vexy_json
llms.txt-
llms.txt-app = FastAPI()
llms.txt-
llms.txt-@app.post("/parse-json")
llms.txt-async def parse_json(content: str):
llms.txt-    try:
llms.txt:        data = vexy_json.loads(content)
llms.txt-        return {"success": True, "data": data}
llms.txt-    except ValueError as e:
llms.txt-        return {"success": False, "error": str(e)}
--
llms.txt-
llms.txt-```python
llms.txt-from django.http import JsonResponse
llms.txt:import vexy_json
llms.txt-
llms.txt-def parse_json_view(request):
llms.txt-    try:
llms.txt:        data = vexy_json.loads(request.body)
llms.txt-        # Process data
llms.txt-        return JsonResponse({"success": True})
llms.txt-    except ValueError as e:
--
llms.txt-data = json.loads(json_string)
llms.txt-
llms.txt-# After
llms.txt:import vexy_json
llms.txt:data = vexy_json.loads(json_string)  # Same interface, more forgiving
llms.txt-```
llms.txt-
llms.txt-### Gradual Migration
llms.txt-
llms.txt-```python
llms.txt-import json
llms.txt:import vexy_json
llms.txt-
llms.txt-def parse_json_fallback(json_str):
llms.txt-    """Try standard JSON first, fall back to Vexy JSON."""
llms.txt-    try:
llms.txt-        return json.loads(json_str)
llms.txt-    except json.JSONDecodeError:
llms.txt:        return vexy_json.loads(json_str)  # More forgiving parsing
llms.txt-```
llms.txt-
llms.txt-## Advanced Features
--
llms.txt-### Custom Serialization
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-from dataclasses import dataclass
llms.txt-
llms.txt-@dataclass
--
llms.txt-
llms.txt-# Convert to dict first, then serialize
llms.txt-person = Person("John", 30)
llms.txt:json_str = vexy_json.dumps(person.__dict__)
llms.txt-```
llms.txt-
llms.txt-### Configuration Management
llms.txt-
llms.txt-```python
llms.txt:import vexy_json
llms.txt-
llms.txt-# Parse configuration files with comments
llms.txt-config_str = '''
--
llms.txt-}
llms.txt-'''
llms.txt-
llms.txt:config = vexy_json.loads(config_str)
llms.txt-```
llms.txt-
llms.txt-This comprehensive Python API provides all the power of Vexy JSON with the familiar interface Python developers expect.
--
llms.txt-nav_order: 11
llms.txt----
llms.txt-
llms.txt:# vexy_json v2.0.0 Release Notes
llms.txt-
llms.txt-**🚀 Major Release - January 2025**
llms.txt-
llms.txt:We're thrilled to announce **vexy_json v2.0.0**, a groundbreaking release that transforms vexy_json from a capable JSON parser into a high-performance, enterprise-ready parsing platform. This release introduces streaming APIs, parallel processing, a plugin architecture, and significant performance improvements.
llms.txt-
llms.txt-## 🌟 Highlights
llms.txt-
--
llms.txt-
llms.txt----
llms.txt-
llms.txt:# vexy_json v1.0.0 Release Notes
llms.txt-
llms.txt-**🚀 Stable Release - January 7, 2025**
llms.txt-
llms.txt:We're excited to announce the stable release of **vexy_json v1.0.0**, a production-ready forgiving JSON parser for Rust. This is a complete port of the JavaScript library [jsonic](https://github.com/jsonicjs/jsonic), bringing powerful and flexible JSON parsing capabilities to the Rust ecosystem.
llms.txt-
llms.txt:## 🎉 What is vexy_json?
llms.txt-
llms.txt:vexy_json is a forgiving JSON parser that extends standard JSON with developer-friendly features while maintaining full compatibility with RFC 8259. It allows you to parse relaxed JSON syntax commonly found in configuration files, making JSON more human-readable and maintainable.
llms.txt-
llms.txt-## ✨ Key Features
llms.txt-
--
llms.txt-
llms.txt-```toml
llms.txt-[dependencies]
llms.txt:vexy_json = "1.0.0"
llms.txt-```
llms.txt-
llms.txt-### CLI Tool
llms.txt-
llms.txt-```bash
llms.txt:cargo install vexy_json
llms.txt-```
llms.txt-
llms.txt-## 🎯 Usage Examples
--
llms.txt-### Basic Library Usage
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-// Standard JSON
llms.txt-let data = parse(r#"{"name": "Alice", "age": 30}"#)?;
--
llms.txt-
llms.txt-```bash
llms.txt-# Process configuration files
llms.txt:echo "{debug: true, port: 3000}" | vexy_json
llms.txt-# Output: {"debug":true,"port":3000}
llms.txt-
llms.txt-# Handle files with comments
llms.txt:cat config.jsonc | vexy_json > config.json
llms.txt-
llms.txt-# Pipeline integration
llms.txt:curl api.example.com/config | vexy_json | jq '.database'
llms.txt-```
llms.txt-
llms.txt-### Serde Integration
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::from_str;
llms.txt-use serde::Deserialize;
llms.txt-
llms.txt-#[derive(Deserialize)]
--
llms.txt-
llms.txt-## 🔄 jsonic Compatibility
llms.txt-
llms.txt:vexy_json achieves **complete compatibility** with the jsonic JavaScript library:
llms.txt-
llms.txt-- All 17 jsonic compatibility tests pass
llms.txt-- Identical parsing behavior for all supported features
--
llms.txt-Customize parsing behavior with `ParserOptions`:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-
llms.txt-let mut options = ParserOptions::default();
llms.txt-options.allow_comments = false;           // Disable comments
--
llms.txt-
llms.txt-## 🏗️ Architecture
llms.txt-
llms.txt:vexy_json is built with a clean, modular architecture:
llms.txt-
llms.txt-- **Lexer**: High-performance tokenization with zero-copy strings
llms.txt-- **Parser**: Recursive descent parser with configurable grammar
--
llms.txt-Process large JSON files incrementally without loading them entirely into memory:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{StreamingParser, StreamingEvent};
llms.txt-
llms.txt-let mut parser = StreamingParser::new();
llms.txt-parser.feed(chunk1)?;
--
llms.txt-Automatically process large files using multiple CPU cores:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse_parallel;
llms.txt-
llms.txt-let json_files = vec![file1, file2, file3, file4];
llms.txt-let results = parse_parallel(json_files);
llms.txt-```
llms.txt-
llms.txt-#### Plugin System
llms.txt:Extend vexy_json with custom functionality:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{Plugin, parse_with_plugins};
llms.txt-
llms.txt-struct MyPlugin;
llms.txt-impl Plugin for MyPlugin {
--
llms.txt-Native support for newline-delimited JSON:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::NdJsonParser;
llms.txt-
llms.txt-let mut parser = NdJsonParser::new();
llms.txt-let values = parser.feed(ndjson_content)?;
--
llms.txt-
llms.txt-#### Watch Mode
llms.txt-```bash
llms.txt:vexy_json --watch config.json --output formatted.json
llms.txt-```
llms.txt-
llms.txt-#### Batch Processing
llms.txt-```bash
llms.txt:vexy_json --batch ./data/ --output-dir ./processed/ --parallel
llms.txt-```
llms.txt-
llms.txt-#### Advanced Formatting
llms.txt-```bash
llms.txt:vexy_json input.json --pretty --sort-keys --indent 4
llms.txt-```
llms.txt-
llms.txt-### 🔧 API Improvements
--
llms.txt-**Ready to upgrade?** 
llms.txt-
llms.txt-```bash
llms.txt:cargo add vexy_json@2.0.0
llms.txt-```
llms.txt-
llms.txt-For migration guidance, see our [Migration Guide](migration-guide/).
llms.txt-
llms.txt:**Questions or feedback?** Open an issue on [GitHub](https://github.com/twardoch/vexy_json/issues).
llms.txt-
llms.txt-**Happy parsing! 🦀**
llms.txt-</document_content>
--
llms.txt-<document_content>
llms.txt-# Release Process
llms.txt-
llms.txt:This document describes the automated release process for vexy_json.
llms.txt-
llms.txt-## Overview
llms.txt-
--
llms.txt-
llms.txt-1. Delete the release from GitHub
llms.txt-2. Yank the version from crates.io: `cargo yank --version 1.2.0`
llms.txt:3. Unpublish from npm (within 72 hours): `npm unpublish @vexy_json/vexy_json@1.2.0`
llms.txt-4. Delete the git tag: `git push --delete origin v1.2.0`
llms.txt-
llms.txt-## Troubleshooting
--
llms.txt-
llms.txt-## Overview
llms.txt-
llms.txt:The vexy_json streaming parser provides an event-driven API for parsing JSON incrementally, making it suitable for:
llms.txt-- Processing large JSON files without loading them entirely into memory
llms.txt-- Real-time parsing of JSON data streams
llms.txt-- Parsing newline-delimited JSON (NDJSON) files
--
llms.txt-The main streaming parser that processes input incrementally and emits parsing events.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{StreamingParser, StreamingEvent};
llms.txt-
llms.txt-let mut parser = StreamingParser::new();
llms.txt-parser.feed(r#"{"key": "value"}"#)?;
--
llms.txt-Utility for building Value objects from streaming events:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{StreamingParser, StreamingValueBuilder};
llms.txt-
llms.txt-let mut parser = StreamingParser::new();
llms.txt-let mut builder = StreamingValueBuilder::new();
--
llms.txt-Parser for newline-delimited JSON where each line is a separate JSON value:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::NdJsonParser;
llms.txt-
llms.txt-let mut parser = NdJsonParser::new();
llms.txt-let input = r#"{"id": 1, "name": "Alice"}
--
llms.txt-Event-based NDJSON parser:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::StreamingNdJsonParser;
llms.txt-
llms.txt-let mut parser = StreamingNdJsonParser::new();
llms.txt-parser.feed(r#"{"a": 1}
--
llms.txt-Both streaming parsers support the same options as the regular parser:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{StreamingParser, ParserOptions};
llms.txt-
llms.txt-let options = ParserOptions {
llms.txt-    allow_comments: true,
--
llms.txt-The streaming parser uses the same error types as the regular parser:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{StreamingParser, Error};
llms.txt-
llms.txt-let mut parser = StreamingParser::new();
llms.txt-
--
llms.txt-- Plugin system support
llms.txt-
llms.txt-<div style="text-align: center; margin: 2em 0;">
llms.txt:  <a href="{{ '/vexy_json-tool/' | relative_url }}" class="btn btn-primary" style="font-size: 1.1em; padding: 0.7em 1.5em; margin: 0.5em;">
llms.txt-    🚀 Vexy JSON Tool
llms.txt-  </a>
llms.txt-  <a href="{{ '/jsonic-tool/' | relative_url }}" class="btn btn-secondary" style="font-size: 1.1em; padding: 0.7em 1.5em; margin: 0.5em;">
--
llms.txt-- ✅ **Dark/light themes** - Choose your preferred color scheme
llms.txt-- ✅ **Mobile responsive** - Works on all devices
llms.txt-
llms.txt:## [∞](#vexy_json-specific-features) Vexy JSON Specific Features
llms.txt-
llms.txt-- Single-line comments (`//` and `#`)
llms.txt-- Multi-line comments (`/* */`)
--
llms.txt-### Basic Usage
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::{normalize, normalize_with_options, NormalizerOptions};
llms.txt-
llms.txt-// Basic normalization with default options
llms.txt-let json = r#"{"b": 2, "a": 1, "c": null}"#;
--
llms.txt-Produces deterministic JSON output suitable for hashing and comparison:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::CanonicalNormalizer;
llms.txt-
llms.txt-let normalizer = CanonicalNormalizer::new();
llms.txt-let canonical = normalizer.normalize(json).unwrap();
--
llms.txt-Removes unnecessary elements and optimizes for size:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::CleanupNormalizer;
llms.txt-
llms.txt-let normalizer = CleanupNormalizer::new();
llms.txt-let cleaned = normalizer.normalize(json).unwrap();
--
llms.txt-### Basic Usage
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::{optimize, optimize_with_options, OptimizerOptions};
llms.txt-
llms.txt-// Basic optimization with default options
llms.txt-let json = r#"{"count": 42.0, "items": [1, 2, 3]}"#;
--
llms.txt-Optimizes for minimal memory usage:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::MemoryOptimizer;
llms.txt-
llms.txt-let optimized = MemoryOptimizer::minimize_memory(&json).unwrap();
llms.txt-```
--
llms.txt-Optimizes for maximum performance:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::PerformanceOptimizer;
llms.txt-
llms.txt-let optimized = PerformanceOptimizer::maximize_performance(&json).unwrap();
llms.txt-```
--
llms.txt-Track optimization effectiveness:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::AstOptimizer;
llms.txt-
llms.txt-let mut optimizer = AstOptimizer::new();
llms.txt-let optimized = optimizer.optimize(&json).unwrap();
--
llms.txt-Combine normalization and optimization:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::{parse, transform::{normalize, optimize}};
llms.txt-
llms.txt-let json = r#"{"z": 1.0, "a": 2.0, "b": null}"#;
llms.txt-let value = parse(json).unwrap();
--
llms.txt-Create custom transformation pipelines:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::{NormalizerOptions, OptimizerOptions};
llms.txt-
llms.txt-fn custom_transform(json: &str) -> Result<String, Error> {
llms.txt-    // First normalize
--
llms.txt-Both normalization and optimization can fail:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::transform::normalize;
llms.txt-
llms.txt-match normalize(json) {
llms.txt-    Ok(normalized) => println!("Success: {}", normalized),
--
llms.txt-### With Parsing
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::{parse_with_options, transform::normalize, ParserOptions};
llms.txt-
llms.txt-let options = ParserOptions {
llms.txt-    allow_comments: true,
--
llms.txt-### With Streaming
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json_core::{streaming::parse_streaming, transform::optimize};
llms.txt-
llms.txt-for value in parse_streaming(reader)? {
llms.txt-    let optimized = optimize(&value?)?;
--
llms.txt-
llms.txt-# Troubleshooting
llms.txt-
llms.txt:This page documents common issues and their solutions when using vexy_json, particularly with WebAssembly bindings.
llms.txt-
llms.txt-## WebAssembly Issues
llms.txt-
--
llms.txt-2. Clear browser cache
llms.txt-3. Add cache-busting query parameters to module imports:
llms.txt-   ```javascript
llms.txt:   import init from './pkg/vexy_json_wasm.js?v=' + Date.now();
llms.txt-   ```
llms.txt-
llms.txt-### WASM Module Loading Failures
--
llms.txt-
llms.txt-1. **Incorrect MIME type**: Ensure your web server serves `.wasm` files with `application/wasm` MIME type
llms.txt-2. **CORS issues**: Serve files from a proper HTTP server, not file:// protocol
llms.txt:3. **Path issues**: Verify the path to `pkg/vexy_json_wasm.js` and `pkg/vexy_json_bg.wasm` is correct
llms.txt-
llms.txt-**Testing Setup**:
llms.txt-Use a simple HTTP server for testing:
--
llms.txt-
llms.txt-If you encounter issues not covered here:
llms.txt-
llms.txt:1. Check the [GitHub Issues](https://github.com/twardoch/vexy_json/issues)
llms.txt-2. Review the [API documentation](api.md)
llms.txt:3. Examine the [test files](https://github.com/twardoch/vexy_json/tree/main/tests) for usage examples
llms.txt-4. Create a new issue with:
llms.txt:   - Your vexy_json version
llms.txt-   - Browser and version
llms.txt-   - Minimal reproduction case
llms.txt-   - Expected vs actual behavior
--
llms.txt-
llms.txt-# Usage Guide v2.0.0
llms.txt-
llms.txt:This guide provides in-depth examples for using `vexy_json` v2.0.0 in Rust and JavaScript/WebAssembly, including the new streaming API, parallel processing, and plugin system.
llms.txt-
llms.txt-## Basic Parsing (Rust)
llms.txt-
llms.txt:The simplest way to use vexy_json is with the `parse` function:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-fn main() {
llms.txt-    let json_data = r#"{ key: "value", num: 123, // comment\n trailing: [1,2,3,], hex: 0xFF }"#;
--
llms.txt-For more control, use `parse_with_options` and configure `ParserOptions`:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-
llms.txt-fn main() {
llms.txt-    let input = "a:1, b:2";
--
llms.txt-See [docs/wasm.md](wasm.md) for full API details.
llms.txt-
llms.txt-```js
llms.txt:import init, { parse_json_with_options } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-await init();
llms.txt-const result = parse_json_with_options('{a:1}', { allow_comments: true });
--
llms.txt-For more control over the parsing behavior, you can use `parse_with_options` and configure `ParserOptions`.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-
llms.txt-fn main() {
llms.txt-    // Example: Strict JSON parsing (disabling all forgiving features)
--
llms.txt-
llms.txt-## Handling Forgiving Features
llms.txt-
llms.txt:`vexy_json` excels at parsing JSON with common relaxations. Here are examples of how it handles them:
llms.txt-
llms.txt-### Comments
llms.txt-
llms.txt-Both single-line (`//`, `#`) and multi-line (`/* ... */`) comments are ignored.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-fn main() {
llms.txt-    let json_with_comments = r#"
--
llms.txt-Trailing commas in arrays and objects are gracefully handled.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-fn main() {
llms.txt-    let json_with_trailing_comma = r#"
--
llms.txt-Object keys do not need to be quoted, as long as they are valid identifiers.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-fn main() {
llms.txt-    let json_unquoted_keys = r#"{ firstName: "John", lastName: "Doe" }"#;
--
llms.txt-You don't need to wrap your entire input in `{}` or `[]` if it's clearly an object or an array.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-fn main() {
llms.txt-    // Implicit object
--
llms.txt-When the `newline_as_comma` option is enabled, newlines can act as implicit comma separators.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-
llms.txt-fn main() {
llms.txt-    let mut options = ParserOptions::default();
--
llms.txt-
llms.txt-## Error Handling
llms.txt-
llms.txt:`vexy_json` returns a `Result<Value, Error>` which allows for robust error handling. You should always check the `Result` to handle potential parsing issues.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::parse;
llms.txt-
llms.txt-fn main() {
llms.txt-    let invalid_json = r#"{ key: "value }"#; // Missing closing quote
--
llms.txt-### Basic Streaming Example
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{StreamingParser, StreamingEvent};
llms.txt-
llms.txt-fn process_large_file(json_content: &str) -> Result<(), Box<dyn std::error::Error>> {
llms.txt-    let mut parser = StreamingParser::new();
--
llms.txt-Perfect for network streams or reading files in chunks:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::StreamingParser;
llms.txt-use std::io::{BufReader, BufRead};
llms.txt-use std::fs::File;
llms.txt-
--
llms.txt-### Basic Parallel Parsing
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse_parallel, ParallelOptions};
llms.txt-use std::fs;
llms.txt-
llms.txt-fn process_json_files(directory: &str) -> Result<(), Box<dyn std::error::Error>> {
--
llms.txt-### Custom Parallel Options
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse_parallel_with_options, ParallelOptions, ParserOptions};
llms.txt-
llms.txt-let mut parallel_opts = ParallelOptions::default();
llms.txt-parallel_opts.num_threads = Some(8);  // Use 8 threads
--
llms.txt-
llms.txt-## Plugin System (New in v2.0.0)
llms.txt-
llms.txt:Extend vexy_json with custom functionality through plugins.
llms.txt-
llms.txt-### Creating a Custom Plugin
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{Plugin, Value, Error};
llms.txt-use std::collections::HashMap;
llms.txt-
llms.txt-// Plugin to redact sensitive information
--
llms.txt-Process streams of JSON objects separated by newlines.
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::NdJsonParser;
llms.txt-
llms.txt-fn process_log_file(log_content: &str) -> Result<(), Box<dyn std::error::Error>> {
llms.txt-    let mut parser = NdJsonParser::new();
--
llms.txt-### Watch Mode
llms.txt-```bash
llms.txt-# Watch a file for changes and reformat on save
llms.txt:vexy_json --watch config.json --output formatted-config.json
llms.txt-
llms.txt-# Watch a directory
llms.txt:vexy_json --watch ./configs/ --output-dir ./formatted/
llms.txt-```
llms.txt-
llms.txt-### Batch Processing
llms.txt-```bash
llms.txt-# Process multiple files in parallel
llms.txt:vexy_json --parallel *.json --output-dir ./processed/
llms.txt-
llms.txt-# Apply transformations during batch processing
llms.txt:vexy_json --batch ./data/ --pretty --sort-keys --output-dir ./formatted/
llms.txt-```
llms.txt-
llms.txt-### Plugin Usage
llms.txt-```bash
llms.txt-# Use built-in plugins
llms.txt:vexy_json input.json --plugin redact-passwords --plugin validate-schema
llms.txt-
llms.txt-# Load custom plugin
llms.txt:vexy_json input.json --plugin-path ./my-plugin.wasm
llms.txt-```
llms.txt-
llms.txt-For more details on the web tool, including its features and how to use it, refer to the [Web Tool documentation](web-tool.md).
--
llms.txt-</document>
llms.txt-
llms.txt-<document index="112">
llms.txt:<source>docs/vexy_json-tool.md</source>
llms.txt-<document_content>
llms.txt----
llms.txt-layout: default
llms.txt-title: "Vexy JSON Parser"
llms.txt-description: "Interactive Vexy JSON parser with comments and flexible syntax"
llms.txt-nav_order: 10
llms.txt:permalink: /vexy_json-tool/
llms.txt----
llms.txt-
llms.txt-# Vexy JSON Interactive Parser
--
llms.txt-nav_order: 2
llms.txt----
llms.txt-
llms.txt:# @twardoch/vexy_json-wasm
llms.txt-
llms.txt:WebAssembly bindings for [vexy_json](https://github.com/twardoch/vexy_json), a forgiving JSON parser that's a Rust port of [jsonic](https://github.com/jsonicjs/jsonic).
llms.txt-
llms.txt-## Installation
llms.txt-
llms.txt-```bash
llms.txt:npm install @twardoch/vexy_json-wasm
llms.txt-```
llms.txt-
llms.txt-## Usage
llms.txt-
llms.txt-```javascript
llms.txt:import init, { parse_js, parse_with_options_js, is_valid, format } from '@twardoch/vexy_json-wasm';
llms.txt-
llms.txt-// Initialize the WASM module
llms.txt-await init();
--
llms.txt-
llms.txt-## Features
llms.txt-
llms.txt:vexy_json supports all standard JSON features plus:
llms.txt-
llms.txt-- **Comments**: Single-line (`//`) and multi-line (`/* */`)
llms.txt-- **Trailing commas**: In objects and arrays
--
llms.txt-
llms.txt-# WebAssembly (WASM) API Reference
llms.txt-
llms.txt:`vexy_json` provides WebAssembly bindings for use in JavaScript environments (browsers, Node.js). The WASM module exposes parsing functions that mirror the Rust API, including forgiving features and strict mode.
llms.txt-
llms.txt-## Usage
llms.txt-
llms.txt-```js
llms.txt:import init, { parse_json, parse_json_with_options } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-await init();
llms.txt-const result = parse_json_with_options('{a:1}', { allow_comments: true });
--
llms.txt-
llms.txt-```toml
llms.txt-[dependencies]
llms.txt:vexy_json = { version = "2.0.0", features = ["wasm"] }
llms.txt-```
llms.txt-
llms.txt-After building your Rust project with the `wasm` feature (e.g., using `wasm-pack`), you can import the generated JavaScript module.
--
llms.txt-**Example:**
llms.txt-
llms.txt-```javascript
llms.txt:import init from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-async function run() {
llms.txt-  await init();
llms.txt:  console.log("vexy_json WASM module loaded.");
llms.txt:  // Now you can use other vexy_json functions
llms.txt-}
llms.txt-run();
llms.txt-```
--
llms.txt-**Example:**
llms.txt-
llms.txt-```javascript
llms.txt:import { parse_json } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-try {
llms.txt-  const result = parse_json(`{
--
llms.txt-**Example:**
llms.txt-
llms.txt-```javascript
llms.txt:import { parse_json_with_options } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-// Strict JSON mode
llms.txt-const strictOptions = {
--
llms.txt-**Example:**
llms.txt-
llms.txt-```javascript
llms.txt:import { validate_json } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-console.log(validate_json('{"key": "value"}')); // true
llms.txt-console.log(validate_json('{key: "value"}'));   // true (unquoted keys allowed by default)
--
llms.txt-**Example:**
llms.txt-
llms.txt-```javascript
llms.txt:import { get_parser_options, parse_json_with_options } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-const defaultOptions = get_parser_options();
llms.txt-console.log(defaultOptions.allowComments); // true
--
llms.txt-**Example:**
llms.txt-
llms.txt-```javascript
llms.txt:import { parse_json, stringify_value } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-const parsed = parse_json('{key: "value", num: 42}');
llms.txt-const jsonString = stringify_value(parsed); // '{"key":"value","num":42}'
--
llms.txt-get_version_info(): object
llms.txt-```
llms.txt-
llms.txt:Returns version and build information for the `vexy_json` library. Useful for debugging and compatibility checking.
llms.txt-
llms.txt-- Returns: A JavaScript object with properties like `version`, `description`, `authors`, `homepage`, `repository`, and `license`.
llms.txt-
llms.txt-**Example:**
llms.txt-
llms.txt-```javascript
llms.txt:import { get_version_info } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-const info = get_version_info();
llms.txt:console.log(`vexy_json v${info.version} - ${info.description}`);
llms.txt-```
llms.txt-
llms.txt-## `ParseError` Class
--
llms.txt-**Example (Error Handling):**
llms.txt-
llms.txt-```javascript
llms.txt:import { parse_json } from './pkg/vexy_json_wasm.js';
llms.txt-
llms.txt-try {
llms.txt-  parse_json('{invalid json');
llms.txt-} catch (e) {
llms.txt-  if (e instanceof Error && e.message.startsWith('Parse Error:')) { // Basic check for ParseError
llms.txt:    console.error(`Caught vexy_json ParseError: ${e.message} at position ${e.position}`);
llms.txt-  } else {
llms.txt-    console.error(`Caught unexpected error: ${e}`);
llms.txt-  }
--
llms.txt-
llms.txt-# Interactive Web Tools
llms.txt-
llms.txt:The vexy_json project provides two interactive web tools for parsing JSON with different libraries, both featuring identical modern interfaces and seamless Jekyll integration.
llms.txt-
llms.txt-## Available Tools
llms.txt-
llms.txt:### [Vexy JSON Parser]({{ '/vexy_json-tool/' | relative_url }})
llms.txt:- **Library**: vexy_json (Rust compiled to WebAssembly)
llms.txt:- **URL**: [https://twardoch.github.io/vexy_json/vexy_json-tool/](https://twardoch.github.io/vexy_json/vexy_json-tool/)
llms.txt:- **Features**: WebAssembly-powered parsing with all vexy_json forgiving features
llms.txt-
llms.txt-### [Jsonic Parser]({{ '/jsonic-tool/' | relative_url }})
llms.txt-- **Library**: jsonic (JavaScript via CDN)
llms.txt:- **URL**: [https://twardoch.github.io/vexy_json/jsonic-tool/](https://twardoch.github.io/vexy_json/jsonic-tool/)
llms.txt-- **Features**: Flexible JSON with object merging and property chains
llms.txt-
llms.txt-### [Tools Overview]({{ '/tools/' | relative_url }})
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_comma_one.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_comma_one_tokens.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_comment_tokens.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_implicit_array.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_lookahead.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_test.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_trailing_comma.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/parser_comparison.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/plugin_examples.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod tests;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/profile_parser.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/recursive_parser.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/simple.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/streaming_example.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_comment.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_comment_with_value.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_implicit_array.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_implicit_objects.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_inline_comment.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_number_types.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_single_brace.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_single_quote.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_unquoted.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/trace_comment_parse.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-<source>fuzz/Cargo.toml</source>
llms.txt-<document_content>
llms.txt-[package]
llms.txt:name = "vexy_json-core-fuzz"
llms.txt-version = "0.0.0"
llms.txt-publish = false
llms.txt-edition = "2021"
--
llms.txt-libfuzzer-sys = "0.4"
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json-core]
llms.txt-path = "../crates/core"
llms.txt-
llms.txt-
llms.txt:[dependencies.vexy_json]
llms.txt-path = ".."
llms.txt-
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/comments.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/fuzz_target_1.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/json_structure.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/numbers.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/repair.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/streaming.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/strings.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/unicode.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/unquoted_keys.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-<source>grep.txt</source>
llms.txt-<document_content>
llms.txt-src/lib.rs-// this_file: src/lib.rs
llms.txt:src/lib.rs:// Main vexy_json library that re-exports core functionality
llms.txt-src/lib.rs-
llms.txt:src/lib.rs://! # vexy_json
llms.txt-src/lib.rs-//!
llms.txt-src/lib.rs-//! A Rust port of the JavaScript library `jsonic`, a forgiving JSON parser.
llms.txt-src/lib.rs-//!
--
llms.txt-src/lib.rs-//! ## Quick Start
llms.txt-src/lib.rs-//!
llms.txt-src/lib.rs-//! ```rust
llms.txt:src/lib.rs://! use vexy_json::parse;
llms.txt-src/lib.rs-//!
llms.txt-src/lib.rs-//! let result = parse(r#"{"key": "value"}"#).unwrap();
llms.txt-src/lib.rs-//! ```
llms.txt-src/lib.rs-
llms.txt-src/lib.rs-// Re-export core functionality
llms.txt:src/lib.rs:pub use vexy_json_core::{parse, parse_with_options, Error, Lexer, ParserOptions, Result};
llms.txt-src/lib.rs-
llms.txt-src/lib.rs-// Re-export streaming functionality
llms.txt:src/lib.rs:pub use vexy_json_core::{
llms.txt-src/lib.rs-    NdJsonParser, SimpleStreamingLexer, StreamingEvent, StreamingParser, StreamingValueBuilder,
llms.txt-src/lib.rs-};
llms.txt-src/lib.rs-
llms.txt-src/lib.rs-// Re-export AST types
llms.txt:src/lib.rs:pub use vexy_json_core::ast::{Number, Token, Value};
llms.txt-src/lib.rs-
llms.txt-src/lib.rs-// Re-export error types
llms.txt:src/lib.rs:pub use vexy_json_core::error::{Error as ParseError, Result as ParseResult, Span};
llms.txt-src/lib.rs-
llms.txt-src/lib.rs-// Re-export serde functionality if feature is enabled
llms.txt-src/lib.rs-#[cfg(feature = "serde")]
llms.txt:src/lib.rs:pub use vexy_json_serde::*;
llms.txt---
llms.txt-Cargo.toml-
llms.txt-Cargo.toml-
llms.txt-Cargo.toml-[package]
llms.txt:Cargo.toml:name = "vexy_json"
llms.txt-Cargo.toml-version = "2.2.3"
llms.txt-Cargo.toml-edition = "2021"
llms.txt-Cargo.toml-description = "A Rust port of the JavaScript library jsonic, a forgiving JSON parser"
llms.txt-Cargo.toml-license = "MIT OR Apache-2.0"
llms.txt:Cargo.toml:repository = "https://github.com/twardoch/pub/vexy_json"
llms.txt:Cargo.toml:homepage = "https://github.com/twardoch/pub/vexy_json"
llms.txt-Cargo.toml-keywords = [ "json", "parser", "jsonic", "forgiving", "relaxed" ]
llms.txt-Cargo.toml-categories = [ "parsing", "data-structures", "web-programming" ]
llms.txt-Cargo.toml-
llms.txt-Cargo.toml-
llms.txt:Cargo.toml:[dependencies.vexy_json-core]
llms.txt-Cargo.toml-path = "crates/core"
llms.txt-Cargo.toml-
llms.txt-Cargo.toml-
llms.txt:Cargo.toml:[dependencies.vexy_json-serde]
llms.txt-Cargo.toml-path = "crates/serde"
llms.txt-Cargo.toml-optional = true
llms.txt-Cargo.toml-
llms.txt-Cargo.toml-
llms.txt-Cargo.toml-[features]
llms.txt-Cargo.toml-default = [ "serde" ]
llms.txt:Cargo.toml:serde = [ "vexy_json-serde" ]
llms.txt-Cargo.toml-
llms.txt-Cargo.toml-
llms.txt-Cargo.toml-[dev-dependencies]
--
llms.txt-VERSIONING.md-- `/docs/pkg/package.json` - For web distribution
llms.txt-VERSIONING.md-
llms.txt-VERSIONING.md-### Other Files
llms.txt:VERSIONING.md:- `/Formula/vexy_json.rb` - Homebrew formula (releases only)
llms.txt-VERSIONING.md-- CLI `--version` output
llms.txt-VERSIONING.md-- API version info methods
llms.txt-VERSIONING.md-
--
llms.txt-GEMINI.md-
llms.txt-GEMINI.md-## 1. Project Overview
llms.txt-GEMINI.md-
llms.txt:GEMINI.md:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-GEMINI.md-
llms.txt-GEMINI.md-## 2. Development Status
llms.txt-GEMINI.md-
--
llms.txt-GEMINI.md-    -   `src/error/mod.rs`: Implements custom error types for parsing failures.
llms.txt-GEMINI.md--   `crates/cli`: The command-line interface.
llms.txt-GEMINI.md-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:GEMINI.md:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`.
llms.txt:GEMINI.md:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments.
llms.txt-GEMINI.md--   `crates/test-utils`: Utility functions for testing.
llms.txt-GEMINI.md-
llms.txt-GEMINI.md-### 3.2. Core Features
--
llms.txt-GEMINI.md-    -   Benchmarking is performed using `criterion.rs`, with benchmarks defined in the `benches/` directory.
llms.txt-GEMINI.md--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt-GEMINI.md--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json` and `jsonic`.
llms.txt:GEMINI.md:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-GEMINI.md-
llms.txt-GEMINI.md-## 4. Development Workflow
llms.txt-GEMINI.md-
llms.txt---
llms.txt:debug_lexer_test.rs:use vexy_json_core::lexer::{FastLexer, JsonLexer, LexerConfig, LexerMode};
llms.txt-debug_lexer_test.rs-
llms.txt-debug_lexer_test.rs-fn main() {
llms.txt-debug_lexer_test.rs-    let input = "a:#comment";
--
llms.txt-debug_lexer_test.rs-                let text = &input[span.start..span.end];
llms.txt-debug_lexer_test.rs-                println!("Token: {:?}, Span: {:?}, Text: '{}'", token, span, text);
llms.txt-debug_lexer_test.rs-                
llms.txt:debug_lexer_test.rs:                if matches!(token, vexy_json_core::ast::Token::Eof) {
llms.txt-debug_lexer_test.rs-                    break;
llms.txt-debug_lexer_test.rs-                }
llms.txt-debug_lexer_test.rs-            }
llms.txt---
llms.txt:debug_test3.rs:use vexy_json::parse;
llms.txt-debug_test3.rs-
llms.txt-debug_test3.rs-fn main() {
llms.txt-debug_test3.rs-    let input = "a:#comment\nb:2";
llms.txt---
llms.txt:crates/c-api/src/lib.rs://! C API for the vexy_json JSON parser.
llms.txt-crates/c-api/src/lib.rs-//!
llms.txt-crates/c-api/src/lib.rs-//! This crate provides a C-compatible API that can be used from C/C++
llms.txt-crates/c-api/src/lib.rs-//! applications and for creating language bindings.
--
llms.txt-crates/c-api/src/lib.rs-use libc::{c_char, size_t};
llms.txt-crates/c-api/src/lib.rs-use std::ffi::{CStr, CString};
llms.txt-crates/c-api/src/lib.rs-use std::ptr;
llms.txt:crates/c-api/src/lib.rs:use vexy_json_core::ast::Value;
llms.txt:crates/c-api/src/lib.rs:use vexy_json_core::{parse, parse_with_options, ParserOptions};
llms.txt-crates/c-api/src/lib.rs-
llms.txt:crates/c-api/src/lib.rs:/// Parser options for configuring vexy_json behavior
llms.txt-crates/c-api/src/lib.rs-#[repr(C)]
llms.txt-crates/c-api/src/lib.rs-pub struct VexyJsonParserOptions {
llms.txt-crates/c-api/src/lib.rs-    pub allow_comments: bool,
--
llms.txt-crates/c-api/src/lib.rs-    options: ParserOptions,
llms.txt-crates/c-api/src/lib.rs-}
llms.txt-crates/c-api/src/lib.rs-
llms.txt:crates/c-api/src/lib.rs:/// Get the version of the vexy_json library
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_version() -> *const c_char {
llms.txt-crates/c-api/src/lib.rs-    static VERSION: &str = concat!(env!("CARGO_PKG_VERSION"), "\0");
llms.txt-crates/c-api/src/lib.rs-    VERSION.as_ptr() as *const c_char
llms.txt-crates/c-api/src/lib.rs-}
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Parse JSON with default options
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parse(input: *const c_char) -> VexyJsonParseResult {
llms.txt-crates/c-api/src/lib.rs-    if input.is_null() {
llms.txt-crates/c-api/src/lib.rs-        return VexyJsonParseResult {
llms.txt-crates/c-api/src/lib.rs-            json: ptr::null_mut(),
--
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Parse JSON with custom options
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parse_with_options(
llms.txt-crates/c-api/src/lib.rs-    input: *const c_char,
llms.txt-crates/c-api/src/lib.rs-    options: *const VexyJsonParserOptions,
llms.txt-crates/c-api/src/lib.rs-) -> VexyJsonParseResult {
--
llms.txt-crates/c-api/src/lib.rs-    }
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-    if options.is_null() {
llms.txt:crates/c-api/src/lib.rs:        return vexy_json_parse(input);
llms.txt-crates/c-api/src/lib.rs-    }
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-    let input_str = unsafe {
--
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Parse JSON and get detailed information including repairs
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parse_detailed(
llms.txt-crates/c-api/src/lib.rs-    input: *const c_char,
llms.txt-crates/c-api/src/lib.rs-    options: *const VexyJsonParserOptions,
llms.txt-crates/c-api/src/lib.rs-) -> VexyJsonDetailedResult {
llms.txt-crates/c-api/src/lib.rs-    // For now, we'll implement this as a simple parse without repair tracking
llms.txt-crates/c-api/src/lib.rs-    // TODO: Implement actual repair tracking
llms.txt-crates/c-api/src/lib.rs-    let result = if options.is_null() {
llms.txt:crates/c-api/src/lib.rs:        vexy_json_parse(input)
llms.txt-crates/c-api/src/lib.rs-    } else {
llms.txt:crates/c-api/src/lib.rs:        vexy_json_parse_with_options(input, options)
llms.txt-crates/c-api/src/lib.rs-    };
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-    VexyJsonDetailedResult {
--
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Create a new parser instance
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parser_new(
llms.txt-crates/c-api/src/lib.rs-    options: *const VexyJsonParserOptions,
llms.txt-crates/c-api/src/lib.rs-) -> *mut VexyJsonParser {
llms.txt-crates/c-api/src/lib.rs-    let rust_options = if options.is_null() {
--
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Parse JSON using a parser instance
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parser_parse(
llms.txt-crates/c-api/src/lib.rs-    parser: *mut VexyJsonParser,
llms.txt-crates/c-api/src/lib.rs-    input: *const c_char,
llms.txt-crates/c-api/src/lib.rs-) -> VexyJsonParseResult {
--
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Free a parser instance
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_parser_free(parser: *mut VexyJsonParser) {
llms.txt-crates/c-api/src/lib.rs-    if !parser.is_null() {
llms.txt-crates/c-api/src/lib.rs-        unsafe {
llms.txt-crates/c-api/src/lib.rs-            let _ = Box::from_raw(parser);
--
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Free a parse result
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_free_result(result: VexyJsonParseResult) {
llms.txt-crates/c-api/src/lib.rs-    if !result.json.is_null() {
llms.txt-crates/c-api/src/lib.rs-        unsafe {
llms.txt-crates/c-api/src/lib.rs-            let _ = CString::from_raw(result.json);
--
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Free a detailed result
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_free_detailed_result(result: VexyJsonDetailedResult) {
llms.txt-crates/c-api/src/lib.rs-    if !result.json.is_null() {
llms.txt-crates/c-api/src/lib.rs-        unsafe {
llms.txt-crates/c-api/src/lib.rs-            let _ = CString::from_raw(result.json);
--
llms.txt-crates/c-api/src/lib.rs-
llms.txt-crates/c-api/src/lib.rs-/// Get default parser options
llms.txt-crates/c-api/src/lib.rs-#[no_mangle]
llms.txt:crates/c-api/src/lib.rs:pub extern "C" fn vexy_json_default_options() -> VexyJsonParserOptions {
llms.txt-crates/c-api/src/lib.rs-    let rust_options = ParserOptions::default();
llms.txt-crates/c-api/src/lib.rs-    rust_options_to_c(&rust_options)
llms.txt-crates/c-api/src/lib.rs-}
--
llms.txt-PLAN.md-1. **Old Naming References**: Only 2 files contain "zzson" - both in documentation (PLAN.md and issue 610.txt)
llms.txt-PLAN.md-2. **Python Bindings**: Test file previously used `VexyJSONParser` but was fixed to `VexyJsonParser`
llms.txt-PLAN.md-3. **Naming Conventions**: Generally consistent across languages:
llms.txt:PLAN.md:   - Rust: `vexy_json-*` (crate names), `VexyJson*` (types)
llms.txt-PLAN.md-   - C/C++: `VexyJson*` (types)
llms.txt:PLAN.md:   - Python: `vexy_json` (package), `VexyJson*` (classes)
llms.txt-PLAN.md-   - JavaScript: `VexyJson*` (classes)
llms.txt-PLAN.md-   - Documentation: "Vexy JSON" (with space)
llms.txt-PLAN.md-
--
llms.txt-PLAN.md-## Implementation Plan
llms.txt-PLAN.md-
llms.txt-PLAN.md-### Phase 1: jsonic References Removal (Immediate - 2-3 hours)
llms.txt:PLAN.md:1. **Rename test files**: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
llms.txt-PLAN.md-2. **Update documentation**: Remove "jsonic" from HTML, markdown, and tool descriptions
llms.txt:PLAN.md:3. **Clean code references**: Replace "jsonic" with "vexy_json" in comments and variable names
llms.txt-PLAN.md-4. **Update configurations**: Clean pyproject.toml and Cargo.toml references
llms.txt-PLAN.md-5. **Verify completeness**: Re-run grep to ensure no "jsonic" references remain
llms.txt-PLAN.md-
llms.txt---
llms.txt:src/bin/test_strict_comment.rs:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-src/bin/test_strict_comment.rs-
llms.txt-src/bin/test_strict_comment.rs-fn main() {
llms.txt-src/bin/test_strict_comment.rs-    println!("Testing strict parsing of '//comment':");
llms.txt---
llms.txt-build.sh-#!/bin/bash
llms.txt:build.sh:# Master build script for vexy_json project
llms.txt-build.sh-# This script runs all build processes in the correct order
llms.txt-build.sh-
llms.txt-build.sh-set -e
--
llms.txt-build.sh-BLUE='\033[0;34m'
llms.txt-build.sh-NC='\033[0m' # No Color
llms.txt-build.sh-
llms.txt:build.sh:echo -e "${BLUE}🚀 vexy_json Master Build Script${NC}"
llms.txt-build.sh-echo "=============================================="
llms.txt-build.sh-echo
llms.txt-build.sh-
--
llms.txt-build.sh-echo -e "${GREEN}🎉 All build steps completed successfully!${NC}"
llms.txt-build.sh-echo
llms.txt-build.sh-echo -e "${BLUE}Build artifacts:${NC}"
llms.txt:build.sh:echo "  • Rust library: target/release/libvexy_json.rlib"
llms.txt:build.sh:echo "  • CLI binary: target/release/vexy_json"
llms.txt:build.sh:echo "  • WebAssembly: docs/pkg/vexy_json_wasm_bg.wasm"
llms.txt:build.sh:echo "  • Documentation: target/doc/vexy_json/index.html"
llms.txt-build.sh-
llms.txt-build.sh-if [[ "$OSTYPE" == "darwin"* ]]; then
llms.txt:build.sh:    echo "  • macOS installer: vexy_json-${VERSION}-macos.dmg"
llms.txt-build.sh-fi
llms.txt-build.sh-
llms.txt-build.sh-echo
llms.txt---
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h: * @file vexy_json.h
llms.txt:crates/c-api/include/vexy_json.h: * @brief C API for the vexy_json JSON parser
llms.txt:crates/c-api/include/vexy_json.h- *
llms.txt:crates/c-api/include/vexy_json.h: * This header provides a C-compatible API for the vexy_json JSON parser,
llms.txt:crates/c-api/include/vexy_json.h- * allowing integration with C/C++ applications and other language bindings.
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt---
llms.txt:crates/c-api/include/vexy_json.h-#endif
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h: * @brief Parser options for configuring vexy_json behavior
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h-typedef struct VexyJsonParserOptions {
llms.txt:crates/c-api/include/vexy_json.h-    bool allow_comments;
llms.txt---
llms.txt:crates/c-api/include/vexy_json.h-typedef void* VexyJsonParser;
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h: * @brief Get the version of the vexy_json library
llms.txt:crates/c-api/include/vexy_json.h- * @return Version string (do not free)
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:const char* vexy_json_version(void);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Parse JSON with default options
llms.txt:crates/c-api/include/vexy_json.h- * @param input The JSON string to parse
llms.txt:crates/c-api/include/vexy_json.h: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:VexyJsonParseResult vexy_json_parse(const char* input);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Parse JSON with custom options
llms.txt:crates/c-api/include/vexy_json.h- * @param input The JSON string to parse
llms.txt:crates/c-api/include/vexy_json.h- * @param options Parser options
llms.txt:crates/c-api/include/vexy_json.h: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:VexyJsonParseResult vexy_json_parse_with_options(const char* input, const VexyJsonParserOptions* options);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Parse JSON and get detailed information including repairs
llms.txt:crates/c-api/include/vexy_json.h- * @param input The JSON string to parse
llms.txt:crates/c-api/include/vexy_json.h- * @param options Parser options
llms.txt:crates/c-api/include/vexy_json.h: * @return Detailed result (must be freed with vexy_json_free_detailed_result)
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:VexyJsonDetailedResult vexy_json_parse_detailed(const char* input, const VexyJsonParserOptions* options);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Create a new parser instance
llms.txt:crates/c-api/include/vexy_json.h- * @param options Parser options
llms.txt:crates/c-api/include/vexy_json.h: * @return Parser handle (must be freed with vexy_json_parser_free)
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:VexyJsonParser vexy_json_parser_new(const VexyJsonParserOptions* options);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Parse JSON using a parser instance
llms.txt:crates/c-api/include/vexy_json.h- * @param parser Parser handle
llms.txt:crates/c-api/include/vexy_json.h- * @param input The JSON string to parse
llms.txt:crates/c-api/include/vexy_json.h: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:VexyJsonParseResult vexy_json_parser_parse(VexyJsonParser parser, const char* input);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Free a parser instance
llms.txt:crates/c-api/include/vexy_json.h- * @param parser Parser handle
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:void vexy_json_parser_free(VexyJsonParser parser);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Free a parse result
llms.txt:crates/c-api/include/vexy_json.h- * @param result Parse result to free
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:void vexy_json_free_result(VexyJsonParseResult result);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Free a detailed result
llms.txt:crates/c-api/include/vexy_json.h- * @param result Detailed result to free
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:void vexy_json_free_detailed_result(VexyJsonDetailedResult result);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-/**
llms.txt:crates/c-api/include/vexy_json.h- * @brief Get default parser options
llms.txt:crates/c-api/include/vexy_json.h- * @return Default options
llms.txt:crates/c-api/include/vexy_json.h- */
llms.txt:crates/c-api/include/vexy_json.h:VexyJsonParserOptions vexy_json_default_options(void);
llms.txt:crates/c-api/include/vexy_json.h-
llms.txt:crates/c-api/include/vexy_json.h-#ifdef __cplusplus
llms.txt:crates/c-api/include/vexy_json.h-}
llms.txt---
llms.txt-llms.txt-Project Structure:
llms.txt:llms.txt:📁 vexy-json
llms.txt-llms.txt-├── 📁 .github
llms.txt-llms.txt-│   ├── 📁 ISSUE_TEMPLATE
llms.txt-llms.txt-│   │   └── 📄 config.yml
--
llms.txt-llms.txt-│       │   ├── 📄 basic_usage.py
llms.txt-llms.txt-│       │   └── 📄 config_parser.py
llms.txt-llms.txt-│       ├── 📁 src
llms.txt:llms.txt:│       │   ├── 📁 vexy_json
llms.txt-llms.txt-│       │   │   └── 📄 __init__.py
llms.txt-llms.txt-│       │   └── 📄 lib.rs
llms.txt-llms.txt-│       ├── 📁 tests
llms.txt:llms.txt:│       │   └── 📄 test_vexy_json.py
llms.txt-llms.txt-│       ├── 📄 Cargo.toml
llms.txt-llms.txt-│       └── 📄 pyproject.toml
llms.txt-llms.txt-├── 📁 crates
--
llms.txt-llms.txt-│   │   │   ├── 📄 cpp_example.cpp
llms.txt-llms.txt-│   │   │   └── 📄 Makefile
llms.txt-llms.txt-│   │   ├── 📁 include
llms.txt:llms.txt:│   │   │   ├── 📄 vexy_json.h
llms.txt:llms.txt:│   │   │   └── 📄 vexy_json.hpp
llms.txt-llms.txt-│   │   ├── 📁 src
llms.txt-llms.txt-│   │   │   └── 📄 lib.rs
llms.txt-llms.txt-│   │   ├── 📄 build.rs
--
llms.txt-llms.txt-│   │   └── 📄 Cargo.toml
llms.txt-llms.txt-│   ├── 📁 python
llms.txt-llms.txt-│   │   ├── 📁 python
llms.txt:llms.txt:│   │   │   └── 📁 vexy_json
llms.txt-llms.txt-│   │   │       ├── 📄 __init__.py
llms.txt-llms.txt-│   │   │       ├── 📄 __init__.pyi
llms.txt-llms.txt-│   │   │       └── 📄 py.typed
--
llms.txt-llms.txt-│   │   ├── 📁 tests
llms.txt-llms.txt-│   │   │   ├── 📄 test_basic.py
llms.txt-llms.txt-│   │   │   ├── 📄 test_typing.py
llms.txt:llms.txt:│   │   │   └── 📄 test_vexy_json.py
llms.txt-llms.txt-│   │   ├── 📄 build.rs
llms.txt-llms.txt-│   │   ├── 📄 Cargo.toml
llms.txt-llms.txt-│   │   ├── 📄 pyproject.toml
--
llms.txt-llms.txt-│   ├── 📄 test_unquoted.rs
llms.txt-llms.txt-│   └── 📄 trace_comment_parse.rs
llms.txt-llms.txt-├── 📁 Formula
llms.txt:llms.txt:│   └── 📄 vexy_json.rb
llms.txt-llms.txt-├── 📁 fuzz
llms.txt-llms.txt-│   ├── 📁 artifacts
llms.txt-llms.txt-│   │   ├── 📁 json_structure
--
llms.txt-llms.txt-│   │       │       2t
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-0gb56plrh2kbz
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n763yq1-12vfxgx-6
llms.txt-llms.txt-│   │       │       xm00irm40t21l8g7dhpoim
llms.txt-llms.txt-│   │       │       fj
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-0j003oif6icfz
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxtvprx-1nd35yr-d
llms.txt-llms.txt-│   │       │       9ji6mqi8yg4wlj34ej4lm8
llms.txt-llms.txt-│   │       │       e9
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-0lx4z1f7yos98
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n6mrq72-0fa18e3-c
llms.txt-llms.txt-│   │       │       m9vzbp5qok1ca4uzqcf497
llms.txt-llms.txt-│   │       │       x5
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-0wrlmmo5dnbek
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n76a9pd-1m1hclt-e
llms.txt-llms.txt-│   │       │       4ljou82po05kegm0e7h5r7
llms.txt-llms.txt-│   │       │       43
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-110y1f142yh5u
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n6mg0tt-0ioiilt-8
llms.txt-llms.txt-│   │       │       b4okcru8u68qaqncwuvnam
llms.txt-llms.txt-│   │       │       mp
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-13enjyiqbpygv
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lx5z99l-1nx47xh-9
llms.txt-llms.txt-│   │       │       bpslqjnb3g3x5bc3csxjbz
llms.txt-llms.txt-│   │       │       96
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-1qub0bwt8ubsv
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94mpybgyq-1xt47pj-a
llms.txt-llms.txt-│   │       │       avdcqtgp3fnocsv7ziy11i
llms.txt-llms.txt-│   │       │       dm
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-1ubcld57ngxkr
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lx517ix-1o0aw5h-b
llms.txt-llms.txt-│   │       │       s1193etxol4rcw38ilxvn7
llms.txt-llms.txt-│   │       │       qw
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-1x53m5wo2sl7b
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n76adqh-0xsizcj-0
llms.txt-llms.txt-│   │       │       mcyu97sf9ab28i4vn0z1la
llms.txt-llms.txt-│   │       │       ln
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-1y20a1apsue9j
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxuvyx0-1dcbl7k-4
llms.txt-llms.txt-│   │       │       3tamkdbfd5jzhcepen167r
llms.txt-llms.txt-│   │       │       bm
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-20oy8vnx9hq2n
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxsxz1c-1e9y478-9
llms.txt-llms.txt-│   │       │       ecplutrz5b4tntwjlxhsmj
llms.txt-llms.txt-│   │       │       eg
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-26zkm1a7g0dks
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lx5zdp3-1i07583-d
llms.txt-llms.txt-│   │       │       uwa1f0fle6xdpfjo5rbcji
llms.txt-llms.txt-│   │       │       pg
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-2rmhgwlzisa4m
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n762zns-1ti81je-a
llms.txt-llms.txt-│   │       │       wg89ccfo9h3tbzsvo384so
llms.txt-llms.txt-│   │       │       ak
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-2zwpzxwslvbw9
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n763ytb-0efe99v-1
llms.txt-llms.txt-│   │       │       r1tiw6yezq8qclis0ilkh3
llms.txt-llms.txt-│   │       │       ug
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-36afk93hl19yy
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n63fesl-01pdp9z-4
llms.txt-llms.txt-│   │       │       qbdi0l3gjqi8raj4loy1z6
llms.txt-llms.txt-│   │       │       tx
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-3rp5z1e4fxv67
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxw70kq-11j7h2m-8
llms.txt-llms.txt-│   │       │       wd4hnazqc181whhd0pfrmv
llms.txt-llms.txt-│   │       │       8b
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt:llms.txt:│   │       ├── 📁 vexy_json-3v9aggw93jj3i
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n763vp9-14q4b4x-1
llms.txt-llms.txt-│   │       │       evrgph8u5jaeqebhjax4cc
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_c_api-0qqmlo9oes
llms.txt-llms.txt-│   │       │   x21
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n763l73-07ma43d-2
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_c_api-0tpebst6si
llms.txt-llms.txt-│   │       │   qty
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxu9p31-1cup6n3-c
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_c_api-1b3jjubb7l
llms.txt-llms.txt-│   │       │   v0u
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lx5ycgv-188it34-0
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_c_api-34vfbtsvzy
llms.txt-llms.txt-│   │       │   2n2
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n7639u0-1yehl3x-9
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-06xwosag7nk
llms.txt-llms.txt-│   │       │   4l
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94mqoxbcw-0w913ce-1
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-0it0hyr543g
llms.txt-llms.txt-│   │       │   sk
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94mqm90c4-1r9c2i0-3
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-13lamtqz69o
llms.txt-llms.txt-│   │       │   ix
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n62n2co-183pbmi-a
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-14m8olzhd98
llms.txt-llms.txt-│   │       │   dn
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94l5vb4te-0yjeu5h-w
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-230vd4pzxhx
llms.txt-llms.txt-│   │       │   q8
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n75840w-07a8mg6-3
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-28s3d1kj2qm
llms.txt-llms.txt-│   │       │   gp
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxqoha3-0l9368u-d
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-2dsang4gfhd
llms.txt-llms.txt-│   │       │   jk
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxti4rp-0wf02nh-b
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-2gngb8sv4nd
llms.txt-llms.txt-│   │       │   3e
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94mpx62ce-1ot068v-3
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-31nnwuidm0y
llms.txt-llms.txt-│   │       │   2z
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lx2qffr-1f3aoeo-3
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-3sx8xfx8van
llms.txt-llms.txt-│   │       │   qz
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n757mh1-1x6cxga-3
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_core-3te8417r5nx
llms.txt-llms.txt-│   │       │   q8
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n6lqvqi-0d8cp4l-e
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_serde-0725khmyoc
llms.txt-llms.txt-│   │       │   r0n
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n7637jl-1jklynv-7
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_serde-0vzy8ffsqe
llms.txt-llms.txt-│   │       │   25m
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxsu3qs-0twyynw-2
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_serde-10tlyrhdp7
llms.txt-llms.txt-│   │       │   uib
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n6md1uy-0ngdx6g-4
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_serde-16tavgq2g3
llms.txt-llms.txt-│   │       │   bme
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n63cgyt-1op2xf7-4
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_serde-1c1800ncu9
llms.txt-llms.txt-│   │       │   y45
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lx4ysdh-0n25quq-8
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_serde-2tifbfs3wh
llms.txt-llms.txt-│   │       │   k9i
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lxtw59s-0hsitax-0
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_serde-3onukjkuw0
llms.txt-llms.txt-│   │       │   du5
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n761qvm-051morr-3
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_wasm-0efx6y0te05
llms.txt-llms.txt-│   │       │   8o
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n762gyk-00d8736-d
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_wasm-10zshacvya0
llms.txt-llms.txt-│   │       │   2n
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94lx5ykol-0prsxya-4
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       ├── 📁 
llms.txt:llms.txt:│   │       │   vexy_json_wasm-1jdxu4mfpum
llms.txt-llms.txt-│   │       │   ao
llms.txt-llms.txt-│   │       │   └── 📁 
llms.txt-llms.txt-│   │       │       s-h94n7642g3-0kxlc4u-2
--
llms.txt-llms.txt-│   │       │       └── ... (depth limit 
llms.txt-llms.txt-│   │       │           reached)
llms.txt-llms.txt-│   │       └── 📁 
llms.txt:llms.txt:│   │           vexy_json_wasm-1wktcdolw6z
llms.txt-llms.txt-│   │           ze
llms.txt-llms.txt-│   │           └── 📁 
llms.txt-llms.txt-│   │               s-h94lxvb02b-0cbapxa-9
--
llms.txt-llms.txt-contact_links:
llms.txt-llms.txt-  - about: Check the documentation for usage examples and API reference
llms.txt-llms.txt-    name: � Documentation
llms.txt:llms.txt:    url: https://twardoch.github.io/vexy_json/
llms.txt:llms.txt:  - about: Try vexy_json in your browser with our interactive web tool
llms.txt-llms.txt-    name: � Web Tool
llms.txt:llms.txt:    url: https://twardoch.github.io/vexy_json/tool.html
llms.txt:llms.txt:  - about: Ask questions, share ideas, and discuss vexy_json with the community
llms.txt-llms.txt-    name: � Discussions
llms.txt:llms.txt:    url: https://github.com/twardoch/vexy_json/discussions
llms.txt-llms.txt-  - about: View package information and installation instructions
llms.txt-llms.txt-    name: 📦 crates.io
llms.txt:llms.txt:    url: https://crates.io/crates/vexy_json
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt-llms.txt-Relative File Path: .github/dependabot.yml
--
llms.txt-llms.txt-        run: |
llms.txt-llms.txt-          cd docs
llms.txt-llms.txt-          bundle install
llms.txt:llms.txt:          bundle exec jekyll build --baseurl "/vexy_json"
llms.txt-llms.txt-        env:
llms.txt-llms.txt-          JEKYLL_ENV: production
llms.txt-llms.txt-
--
llms.txt-llms.txt-            ### macOS
llms.txt-llms.txt-            ```bash
llms.txt-llms.txt-            # Using Homebrew
llms.txt:llms.txt:            brew install vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-            # Or download the installer
llms.txt:llms.txt:            # Download vexy_json-${{ steps.get_version.outputs.version }}-macos.dmg below
llms.txt-llms.txt-            ```
llms.txt-llms.txt-
llms.txt-llms.txt-            ### Linux
llms.txt-llms.txt-            ```bash
llms.txt-llms.txt-            # Download and extract
llms.txt:llms.txt:            curl -L https://github.com/twardoch/vexy_json/releases/download/v${{ steps.get_version.outputs.version }}/vexy_json-${{ steps.get_version.outputs.version }}-linux-x86_64.tar.gz | tar xz
llms.txt:llms.txt:            sudo mv vexy_json /usr/local/bin/
llms.txt-llms.txt-            ```
llms.txt-llms.txt-
llms.txt-llms.txt-            ### Windows
llms.txt-llms.txt-            ```powershell
llms.txt:llms.txt:            # Download vexy_json-${{ steps.get_version.outputs.version }}-windows-x86_64.zip below
llms.txt-llms.txt-            # Extract and add to PATH
llms.txt-llms.txt-            ```
llms.txt-llms.txt-
llms.txt-llms.txt-            ### Cargo
llms.txt-llms.txt-            ```bash
llms.txt:llms.txt:            cargo install vexy_json-cli
llms.txt-llms.txt-            ```
llms.txt-llms.txt-
llms.txt-llms.txt-            ## What's Changed
llms.txt-llms.txt-
llms.txt:llms.txt:            See [CHANGELOG.md](https://github.com/twardoch/vexy_json/blob/v${{ steps.get_version.outputs.version }}/CHANGELOG.md) for details.
llms.txt-llms.txt-
llms.txt-llms.txt-            ## Assets
llms.txt-llms.txt-
llms.txt:llms.txt:            - **macOS**: `vexy_json-${{ steps.get_version.outputs.version }}-macos.dmg` - Installer with PKG
llms.txt:llms.txt:            - **macOS**: `vexy_json-${{ steps.get_version.outputs.version }}-macos.zip` - Standalone binary
llms.txt:llms.txt:            - **Linux**: `vexy_json-${{ steps.get_version.outputs.version }}-linux-x86_64.tar.gz` - x86_64 binary
llms.txt:llms.txt:            - **Linux**: `vexy_json-${{ steps.get_version.outputs.version }}-linux-aarch64.tar.gz` - ARM64 binary
llms.txt:llms.txt:            - **Windows**: `vexy_json-${{ steps.get_version.outputs.version }}-windows-x86_64.zip` - x86_64 binary
llms.txt:llms.txt:            - **Source**: `vexy_json-${{ steps.get_version.outputs.version }}.tar.gz` - Source code
llms.txt-llms.txt-
llms.txt-llms.txt-  build-binaries:
llms.txt-llms.txt-    name: Build ${{ matrix.target }}
--
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Build
llms.txt-llms.txt-        run: |
llms.txt:llms.txt:          cargo build --release --target ${{ matrix.target }} --bin vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Package Binary
llms.txt-llms.txt-        shell: bash
llms.txt-llms.txt-        run: |
llms.txt-llms.txt-          cd target/${{ matrix.target }}/release
llms.txt-llms.txt-          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
llms.txt:llms.txt:            7z a ../../../vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip vexy_json.exe
llms.txt-llms.txt-          else
llms.txt:llms.txt:            tar czf ../../../vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz vexy_json
llms.txt-llms.txt-          fi
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Upload Binary
--
llms.txt-llms.txt-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
llms.txt-llms.txt-        with:
llms.txt-llms.txt-          upload_url: ${{ needs.create-release.outputs.upload_url }}
llms.txt:llms.txt:          asset_path: ./vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
llms.txt:llms.txt:          asset_name: vexy_json-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
llms.txt-llms.txt-          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}
llms.txt-llms.txt-
llms.txt-llms.txt-  build-macos-installer:
--
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Build Universal Binary
llms.txt-llms.txt-        run: |
llms.txt:llms.txt:          cargo build --release --target x86_64-apple-darwin --bin vexy_json
llms.txt:llms.txt:          cargo build --release --target aarch64-apple-darwin --bin vexy_json
llms.txt:llms.txt:          lipo -create -output vexy_json \
llms.txt:llms.txt:            target/x86_64-apple-darwin/release/vexy_json \
llms.txt:llms.txt:            target/aarch64-apple-darwin/release/vexy_json
llms.txt:llms.txt:          chmod +x vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Create macOS ZIP
llms.txt-llms.txt-        run: |
llms.txt:llms.txt:          zip -9 vexy_json-${{ needs.create-release.outputs.version }}-macos.zip vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Create macOS Installer
llms.txt-llms.txt-        run: |
--
llms.txt-llms.txt-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
llms.txt-llms.txt-        with:
llms.txt-llms.txt-          upload_url: ${{ needs.create-release.outputs.upload_url }}
llms.txt:llms.txt:          asset_path: ./vexy_json-${{ needs.create-release.outputs.version }}-macos.zip
llms.txt:llms.txt:          asset_name: vexy_json-${{ needs.create-release.outputs.version }}-macos.zip
llms.txt-llms.txt-          asset_content_type: application/zip
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Upload macOS DMG
--
llms.txt-llms.txt-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
llms.txt-llms.txt-        with:
llms.txt-llms.txt-          upload_url: ${{ needs.create-release.outputs.upload_url }}
llms.txt:llms.txt:          asset_path: ./dist/vexy_json-${{ needs.create-release.outputs.version }}.dmg
llms.txt:llms.txt:          asset_name: vexy_json-${{ needs.create-release.outputs.version }}-macos.dmg
llms.txt-llms.txt-          asset_content_type: application/x-apple-diskimage
llms.txt-llms.txt-
llms.txt-llms.txt-  build-wasm:
--
llms.txt-llms.txt-      - name: Package WASM
llms.txt-llms.txt-        run: |
llms.txt-llms.txt-          cd crates/wasm
llms.txt:llms.txt:          tar czf ../../vexy_json-wasm-${{ needs.create-release.outputs.version }}.tar.gz pkg/
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Upload WASM Package
llms.txt-llms.txt-        uses: actions/upload-release-asset@v1
--
llms.txt-llms.txt-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
llms.txt-llms.txt-        with:
llms.txt-llms.txt-          upload_url: ${{ needs.create-release.outputs.upload_url }}
llms.txt:llms.txt:          asset_path: ./vexy_json-wasm-${{ needs.create-release.outputs.version }}.tar.gz
llms.txt:llms.txt:          asset_name: vexy_json-wasm-${{ needs.create-release.outputs.version }}.tar.gz
llms.txt-llms.txt-          asset_content_type: application/gzip
llms.txt-llms.txt-
llms.txt-llms.txt-  publish-crates:
--
llms.txt-llms.txt-          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
llms.txt-llms.txt-        run: |
llms.txt-llms.txt-          # Publish in dependency order
llms.txt:llms.txt:          cargo publish -p vexy_json-core
llms.txt-llms.txt-          sleep 30
llms.txt:llms.txt:          cargo publish -p vexy_json-cli
llms.txt-llms.txt-          sleep 30
llms.txt:llms.txt:          cargo publish -p vexy_json-wasm
llms.txt-llms.txt-
llms.txt-llms.txt-  publish-npm:
llms.txt-llms.txt-    name: Publish to NPM
--
llms.txt-llms.txt-        run: |
llms.txt-llms.txt-          echo "Checking WASM build outputs..."
llms.txt-llms.txt-          ls -la docs/pkg/
llms.txt:llms.txt:          if [ ! -f "docs/pkg/vexy_json.js" ] || [ ! -f "docs/pkg/vexy_json_bg.wasm" ]; then
llms.txt-llms.txt-            echo "❌ WASM build failed - missing required files"
llms.txt-llms.txt-            exit 1
llms.txt-llms.txt-          fi
llms.txt-llms.txt-          echo "✅ WASM build successful"
llms.txt-llms.txt-          echo "Bundle sizes:"
llms.txt:llms.txt:          du -h docs/pkg/vexy_json.js docs/pkg/vexy_json_bg.wasm
llms.txt-llms.txt-
llms.txt-llms.txt-      - name: Upload WASM artifacts
llms.txt-llms.txt-        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
--
llms.txt-llms.txt-              await page.goto(`http://localhost:${port}/tool.html`);
llms.txt-llms.txt-              
llms.txt-llms.txt-              // Wait for WASM to load
llms.txt:llms.txt:              await page.waitForFunction(() => window.vexy_json !== undefined, { timeout: 10000 });
llms.txt-llms.txt-              
llms.txt-llms.txt-              // Test basic parsing
llms.txt-llms.txt-              const result = await page.evaluate(() => {
--
llms.txt-llms.txt-                
llms.txt-llms.txt-                const results = testCases.map(test => {
llms.txt-llms.txt-                  try {
llms.txt:llms.txt:                    const parsed = window.vexy_json.parse(test.input);
llms.txt-llms.txt-                    return { input: test.input, success: true, parsed };
llms.txt-llms.txt-                  } catch (e) {
llms.txt-llms.txt-                    return { input: test.input, success: false, error: e.message };
--
llms.txt-llms.txt-              const perfResult = await page.evaluate(() => {
llms.txt-llms.txt-                const largeJson = JSON.stringify(Array(1000).fill({key: "value"}));
llms.txt-llms.txt-                const start = performance.now();
llms.txt:llms.txt:                window.vexy_json.parse(largeJson);
llms.txt-llms.txt-                const end = performance.now();
llms.txt-llms.txt-                return end - start;
llms.txt-llms.txt-              });
--
llms.txt-llms.txt-      - name: Print deployment URL
llms.txt-llms.txt-        run: |
llms.txt-llms.txt-          echo "🚀 Deployed to GitHub Pages!"
llms.txt:llms.txt:          echo "📍 Tool URL: https://twardoch.github.io/vexy_json/tool.html"
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-edition = "2021"
llms.txt-llms.txt-description = "A Rust port of the JavaScript library jsonic, a forgiving JSON parser"
llms.txt-llms.txt-license = "MIT OR Apache-2.0"
llms.txt:llms.txt:repository = "https://github.com/twardoch/pub/vexy_json"
llms.txt:llms.txt:homepage = "https://github.com/twardoch/pub/vexy_json"
llms.txt-llms.txt-keywords = [ "json", "parser", "jsonic", "forgiving", "relaxed" ]
llms.txt-llms.txt-categories = [ "parsing", "data-structures", "web-programming" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "crates/core"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-serde]
llms.txt-llms.txt-path = "crates/serde"
llms.txt-llms.txt-optional = true
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[features]
llms.txt-llms.txt-default = [ "serde" ]
llms.txt:llms.txt:serde = [ "vexy_json-serde" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[dev-dependencies]
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:Relative File Path: Formula/vexy_json.rb
llms.txt-llms.txt-
llms.txt-llms.txt-```ruby
llms.txt-llms.txt-class VexyJson < Formula
llms.txt-llms.txt-  desc "Forgiving JSON parser for Rust - a port of the JavaScript library jsonic"
llms.txt:llms.txt:  homepage "https://github.com/twardoch/vexy_json"
llms.txt:llms.txt:  url "https://github.com/twardoch/vexy_json/archive/refs/tags/v2.0.0.tar.gz"
llms.txt-llms.txt-  sha256 "ce66e4af1e0aeb4f35456eb44aa82d5052e1a26c33adbaa1969284a5aa8c24ab"
llms.txt-llms.txt-  license any_of: ["MIT", "Apache-2.0"]
llms.txt:llms.txt:  head "https://github.com/twardoch/vexy_json.git", branch: "main"
llms.txt-llms.txt-
llms.txt-llms.txt-  depends_on "rust" => :build
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-  test do
llms.txt-llms.txt-    # Test basic JSON parsing
llms.txt:llms.txt:    assert_equal '{"key":"value"}', pipe_output("#{bin}/vexy_json", '{"key": "value"}').chomp
llms.txt-llms.txt-
llms.txt-llms.txt-    # Test forgiving JSON features
llms.txt-llms.txt-    forgiving_json = '{ unquoted: true, trailing: "comma", }'
llms.txt:llms.txt:    output = pipe_output("#{bin}/vexy_json", forgiving_json)
llms.txt-llms.txt-    assert_match /"unquoted":true/, output
llms.txt-llms.txt-    assert_match /"trailing":"comma"/, output
llms.txt-llms.txt-
llms.txt-llms.txt-    # Test error repair
llms.txt-llms.txt-    broken_json = '{ "broken": '
llms.txt:llms.txt:    output = pipe_output("#{bin}/vexy_json --repair", broken_json)
llms.txt-llms.txt-    assert_match /"broken":null/, output
llms.txt-llms.txt-
llms.txt-llms.txt-    # Test version
llms.txt:llms.txt:    assert_match version.to_s, shell_output("#{bin}/vexy_json --version")
llms.txt-llms.txt-  end
llms.txt-llms.txt-end
llms.txt-llms.txt-```
--
llms.txt-llms.txt-... (file content truncated to first 5 lines)
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/benchmark.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct BenchmarkResult {
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/comparison.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/comprehensive_comparison.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct BenchmarkResult {
--
llms.txt-llms.txt-... (file content truncated to first 5 lines)
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/lexer_microbenchmarks.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/memory_benchmarks.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct TrackingAllocator {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/parser_comparison.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct TestData {
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/parser_microbenchmarks.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/parsing.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/performance_comparison.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/profiling.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/real_world_benchmarks.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/simd_benchmarks.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/benches/stack_overflow_test.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```toml
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json-python"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-edition = "2021"
llms.txt-llms.txt-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-llms.txt-license = "MIT OR Apache-2.0"
llms.txt:llms.txt:description = "Python bindings for vexy_json - a forgiving JSON parser"
llms.txt:llms.txt:repository = "https://github.com/twardoch/vexy_json"
llms.txt-llms.txt-keywords = [ "json", "parser", "forgiving", "repair", "python" ]
llms.txt-llms.txt-categories = [ "encoding", "parser-implementations" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[lib]
llms.txt:llms.txt:name = "vexy_json"
llms.txt-llms.txt-crate-type = [ "cdylib" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-serde_json = "1.0"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "../../crates/core"
llms.txt-llms.txt-version = "2.0.0"
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/examples/basic_usage.py
llms.txt-llms.txt-# Language: python
llms.txt-llms.txt-
llms.txt:llms.txt:import vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-def main(()):
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/examples/config_parser.py
llms.txt-llms.txt-# Language: python
llms.txt-llms.txt-
llms.txt:llms.txt:import vexy_json
llms.txt-llms.txt-import sys
llms.txt-llms.txt-
llms.txt-llms.txt-def load_config((filename=None)):
--
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[project]
llms.txt:llms.txt:name = "vexy_json"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-description = "A forgiving JSON parser for Python - port of the JavaScript library jsonic"
llms.txt-llms.txt-readme = "README.md"
--
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[project.urls]
llms.txt:llms.txt:Homepage = "https://github.com/twardoch/vexy_json"
llms.txt:llms.txt:Repository = "https://github.com/twardoch/vexy_json"
llms.txt:llms.txt:Issues = "https://github.com/twardoch/vexy_json/issues"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[tool.maturin]
llms.txt-llms.txt-python-source = "src"
llms.txt:llms.txt:module-name = "vexy_json.vexy_json"
llms.txt-llms.txt-features = [ "pyo3/extension-module" ]
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/src/lib.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct ParseError {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/src/vexy_json/__init__.py
llms.txt-llms.txt-# Language: python
llms.txt-llms.txt-
llms.txt:llms.txt:from .vexy_json import (
llms.txt-llms.txt-    parse,
llms.txt-llms.txt-    parse_with_options,
llms.txt-llms.txt-    dumps,
--
llms.txt-llms.txt-)
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/bindings/python/tests/test_vexy_json.py
llms.txt-llms.txt-# Language: python
llms.txt-llms.txt-
llms.txt-llms.txt-import pytest
llms.txt:llms.txt:import vexy_json
llms.txt-llms.txt-import json
llms.txt-llms.txt-import tempfile
llms.txt-llms.txt-import os
--
llms.txt-llms.txt-def test_version((self)):
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/build.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```bash
llms.txt-llms.txt-#!/bin/bash
llms.txt:llms.txt:# Master build script for vexy_json project
llms.txt-llms.txt-# This script runs all build processes in the correct order
llms.txt-llms.txt-
llms.txt-llms.txt-set -e
--
llms.txt-llms.txt-BLUE='\033[0;34m'
llms.txt-llms.txt-NC='\033[0m' # No Color
llms.txt-llms.txt-
llms.txt:llms.txt:echo -e "${BLUE}🚀 vexy_json Master Build Script${NC}"
llms.txt-llms.txt-echo "=============================================="
llms.txt-llms.txt-echo
llms.txt-llms.txt-
--
llms.txt-llms.txt-echo -e "${GREEN}🎉 All build steps completed successfully!${NC}"
llms.txt-llms.txt-echo
llms.txt-llms.txt-echo -e "${BLUE}Build artifacts:${NC}"
llms.txt:llms.txt:echo "  • Rust library: target/release/libvexy_json.rlib"
llms.txt:llms.txt:echo "  • CLI binary: target/release/vexy_json"
llms.txt:llms.txt:echo "  • WebAssembly: docs/pkg/vexy_json_wasm_bg.wasm"
llms.txt:llms.txt:echo "  • Documentation: target/doc/vexy_json/index.html"
llms.txt-llms.txt-
llms.txt-llms.txt-if [[ "$OSTYPE" == "darwin"* ]]; then
llms.txt:llms.txt:    echo "  • macOS installer: vexy_json-${VERSION}-macos.dmg"
llms.txt-llms.txt-fi
llms.txt-llms.txt-
llms.txt-llms.txt-echo
--
llms.txt-llms.txt-
llms.txt-llms.txt-```toml
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json-c-api"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-authors = [ "Vexy JSON Contributors" ]
llms.txt-llms.txt-edition = "2021"
llms.txt-llms.txt-license = "MIT OR Apache-2.0"
llms.txt:llms.txt:description = "C API for the vexy_json JSON parser"
llms.txt:llms.txt:repository = "https://github.com/twardoch/pub-vexy_json"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[lib]
llms.txt:llms.txt:name = "vexy_json_c_api"
llms.txt-llms.txt-crate-type = [ "cdylib", "staticlib" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-serde_json = "1.0"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "../core"
llms.txt-llms.txt-features = [ "serde" ]
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/c-api/build.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-Relative File Path: crates/c-api/examples/Makefile
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt:llms.txt:# Makefile for vexy_json C++ examples
llms.txt-llms.txt-
llms.txt-llms.txt-CXX = g++
llms.txt-llms.txt-CXXFLAGS = -std=c++17 -Wall -Wextra -O2
llms.txt:llms.txt:LDFLAGS = -L../../../target/release -lvexy_json
llms.txt-llms.txt-INCLUDES = -I../include
llms.txt-llms.txt-
llms.txt-llms.txt-# For macOS, add rpath to find the library
--
llms.txt-llms.txt-.PHONY: all run clean
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/c-api/examples/cpp_example.cpp
llms.txt-llms.txt-# Language: cpp
llms.txt-llms.txt-
llms.txt-llms.txt-#include #include <iostream>
llms.txt-llms.txt-#include #include <string>
llms.txt:llms.txt:#include #include "../include/vexy_json.hpp"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:Relative File Path: crates/c-api/include/vexy_json.h
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-/**
llms.txt:llms.txt: * @file vexy_json.h
llms.txt:llms.txt: * @brief C API for the vexy_json JSON parser
llms.txt-llms.txt- *
llms.txt:llms.txt: * This header provides a C-compatible API for the vexy_json JSON parser,
llms.txt-llms.txt- * allowing integration with C/C++ applications and other language bindings.
llms.txt-llms.txt- */
llms.txt-llms.txt-
--
llms.txt-llms.txt-#endif
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt:llms.txt: * @brief Parser options for configuring vexy_json behavior
llms.txt-llms.txt- */
llms.txt-llms.txt-typedef struct VexyJsonParserOptions {
llms.txt-llms.txt-    bool allow_comments;
--
llms.txt-llms.txt-typedef void* VexyJsonParser;
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt:llms.txt: * @brief Get the version of the vexy_json library
llms.txt-llms.txt- * @return Version string (do not free)
llms.txt-llms.txt- */
llms.txt:llms.txt:const char* vexy_json_version(void);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Parse JSON with default options
llms.txt-llms.txt- * @param input The JSON string to parse
llms.txt:llms.txt: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt-llms.txt- */
llms.txt:llms.txt:VexyJsonParseResult vexy_json_parse(const char* input);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Parse JSON with custom options
llms.txt-llms.txt- * @param input The JSON string to parse
llms.txt-llms.txt- * @param options Parser options
llms.txt:llms.txt: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt-llms.txt- */
llms.txt:llms.txt:VexyJsonParseResult vexy_json_parse_with_options(const char* input, const VexyJsonParserOptions* options);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Parse JSON and get detailed information including repairs
llms.txt-llms.txt- * @param input The JSON string to parse
llms.txt-llms.txt- * @param options Parser options
llms.txt:llms.txt: * @return Detailed result (must be freed with vexy_json_free_detailed_result)
llms.txt-llms.txt- */
llms.txt:llms.txt:VexyJsonDetailedResult vexy_json_parse_detailed(const char* input, const VexyJsonParserOptions* options);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Create a new parser instance
llms.txt-llms.txt- * @param options Parser options
llms.txt:llms.txt: * @return Parser handle (must be freed with vexy_json_parser_free)
llms.txt-llms.txt- */
llms.txt:llms.txt:VexyJsonParser vexy_json_parser_new(const VexyJsonParserOptions* options);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Parse JSON using a parser instance
llms.txt-llms.txt- * @param parser Parser handle
llms.txt-llms.txt- * @param input The JSON string to parse
llms.txt:llms.txt: * @return Parse result (must be freed with vexy_json_free_result)
llms.txt-llms.txt- */
llms.txt:llms.txt:VexyJsonParseResult vexy_json_parser_parse(VexyJsonParser parser, const char* input);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Free a parser instance
llms.txt-llms.txt- * @param parser Parser handle
llms.txt-llms.txt- */
llms.txt:llms.txt:void vexy_json_parser_free(VexyJsonParser parser);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Free a parse result
llms.txt-llms.txt- * @param result Parse result to free
llms.txt-llms.txt- */
llms.txt:llms.txt:void vexy_json_free_result(VexyJsonParseResult result);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Free a detailed result
llms.txt-llms.txt- * @param result Detailed result to free
llms.txt-llms.txt- */
llms.txt:llms.txt:void vexy_json_free_detailed_result(VexyJsonDetailedResult result);
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt-llms.txt- * @brief Get default parser options
llms.txt-llms.txt- * @return Default options
llms.txt-llms.txt- */
llms.txt:llms.txt:VexyJsonParserOptions vexy_json_default_options(void);
llms.txt-llms.txt-
llms.txt-llms.txt-#ifdef __cplusplus
llms.txt-llms.txt-}
--
llms.txt-llms.txt-#endif // VEXY_JSON_H
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:Relative File Path: crates/c-api/include/vexy_json.hpp
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-/**
llms.txt:llms.txt: * @file vexy_json.hpp
llms.txt:llms.txt: * @brief C++ header-only wrapper for the vexy_json JSON parser
llms.txt-llms.txt- *
llms.txt:llms.txt: * This header provides a modern C++ interface for the vexy_json JSON parser,
llms.txt-llms.txt- * with RAII, exceptions, and STL container support.
llms.txt-llms.txt- */
llms.txt-llms.txt-
--
llms.txt-llms.txt-#include <string_view>
llms.txt-llms.txt-#include <utility>
llms.txt-llms.txt-
llms.txt:llms.txt:#include "vexy_json.h"
llms.txt-llms.txt-
llms.txt:llms.txt:namespace vexy_json {
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt:llms.txt: * @brief Exception thrown by vexy_json operations
llms.txt-llms.txt- */
llms.txt-llms.txt-class ParseError : public std::runtime_error {
llms.txt-llms.txt-public:
llms.txt-llms.txt-    explicit ParseError(const std::string& message) 
llms.txt:llms.txt:        : std::runtime_error("vexy_json parse error: " + message) {}
llms.txt-llms.txt-};
llms.txt-llms.txt-
llms.txt-llms.txt-/**
--
llms.txt-llms.txt- */
llms.txt-llms.txt-class ParserOptions {
llms.txt-llms.txt-public:
llms.txt:llms.txt:    ParserOptions() : options_(vexy_json_default_options()) {}
llms.txt-llms.txt-    
llms.txt-llms.txt-    ParserOptions& allowComments(bool value = true) {
llms.txt-llms.txt-        options_.allow_comments = value;
--
llms.txt-llms.txt-        return *this;
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
llms.txt:llms.txt:    const vexy_json_parser_options* get() const { return &options_; }
llms.txt-llms.txt-    
llms.txt-llms.txt-private:
llms.txt:llms.txt:    vexy_json_parser_options options_;
llms.txt-llms.txt-};
llms.txt-llms.txt-
llms.txt-llms.txt-/**
--
llms.txt-llms.txt-public:
llms.txt-llms.txt-    ParseResult() = default;
llms.txt-llms.txt-    
llms.txt:llms.txt:    explicit ParseResult(vexy_json_parse_result result) 
llms.txt:llms.txt:        : result_(std::make_unique<vexy_json_parse_result>(result)) {
llms.txt-llms.txt-        if (result.error) {
llms.txt-llms.txt-            error_ = result.error;
llms.txt-llms.txt-        }
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    ~ParseResult() {
llms.txt-llms.txt-        if (result_) {
llms.txt:llms.txt:            vexy_json_free_result(*result_);
llms.txt-llms.txt-        }
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
--
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
llms.txt-llms.txt-private:
llms.txt:llms.txt:    std::unique_ptr<vexy_json_parse_result> result_;
llms.txt-llms.txt-    std::optional<std::string> json_;
llms.txt-llms.txt-    std::optional<std::string> error_;
llms.txt-llms.txt-};
--
llms.txt-llms.txt-public:
llms.txt-llms.txt-    DetailedParseResult() = default;
llms.txt-llms.txt-    
llms.txt:llms.txt:    explicit DetailedParseResult(vexy_json_detailed_result result) 
llms.txt:llms.txt:        : result_(std::make_unique<vexy_json_detailed_result>(result)) {
llms.txt-llms.txt-        if (result.error) {
llms.txt-llms.txt-            error_ = result.error;
llms.txt-llms.txt-        }
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    ~DetailedParseResult() {
llms.txt-llms.txt-        if (result_) {
llms.txt:llms.txt:            vexy_json_free_detailed_result(*result_);
llms.txt-llms.txt-        }
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
--
llms.txt-llms.txt-    const std::vector<Repair>& repairs() const { return repairs_; }
llms.txt-llms.txt-    
llms.txt-llms.txt-private:
llms.txt:llms.txt:    std::unique_ptr<vexy_json_detailed_result> result_;
llms.txt-llms.txt-    std::optional<std::string> json_;
llms.txt-llms.txt-    std::optional<std::string> error_;
llms.txt-llms.txt-    std::vector<Repair> repairs_;
--
llms.txt-llms.txt-    Parser() : Parser(ParserOptions{}) {}
llms.txt-llms.txt-    
llms.txt-llms.txt-    explicit Parser(const ParserOptions& options) 
llms.txt:llms.txt:        : parser_(vexy_json_parser_new(options.get())) {
llms.txt-llms.txt-        if (!parser_) {
llms.txt:llms.txt:            throw std::runtime_error("Failed to create vexy_json parser");
llms.txt-llms.txt-        }
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
--
llms.txt-llms.txt-    Parser& operator=(Parser&& other) noexcept {
llms.txt-llms.txt-        if (this != &other) {
llms.txt-llms.txt-            if (parser_) {
llms.txt:llms.txt:                vexy_json_parser_free(parser_);
llms.txt-llms.txt-            }
llms.txt-llms.txt-            parser_ = other.parser_;
llms.txt-llms.txt-            other.parser_ = nullptr;
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    ~Parser() {
llms.txt-llms.txt-        if (parser_) {
llms.txt:llms.txt:            vexy_json_parser_free(parser_);
llms.txt-llms.txt-        }
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
llms.txt-llms.txt-    ParseResult parse(std::string_view input) const {
llms.txt-llms.txt-        std::string input_str(input);
llms.txt:llms.txt:        return ParseResult(vexy_json_parser_parse(parser_, input_str.c_str()));
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
llms.txt-llms.txt-    std::string parseToString(std::string_view input) const {
--
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
llms.txt-llms.txt-private:
llms.txt:llms.txt:    vexy_json_parser parser_;
llms.txt-llms.txt-};
llms.txt-llms.txt-
llms.txt-llms.txt-/**
--
llms.txt-llms.txt- */
llms.txt-llms.txt-inline std::string parse(std::string_view input) {
llms.txt-llms.txt-    std::string input_str(input);
llms.txt:llms.txt:    auto result = ParseResult(vexy_json_parse(input_str.c_str()));
llms.txt-llms.txt-    return result.json();
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-inline std::string parse(std::string_view input, const ParserOptions& options) {
llms.txt-llms.txt-    std::string input_str(input);
llms.txt:llms.txt:    auto result = ParseResult(vexy_json_parse_with_options(input_str.c_str(), options.get()));
llms.txt-llms.txt-    return result.json();
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-inline DetailedParseResult parseDetailed(std::string_view input, const ParserOptions& options) {
llms.txt-llms.txt-    std::string input_str(input);
llms.txt:llms.txt:    return DetailedParseResult(vexy_json_parse_detailed(input_str.c_str(), options.get()));
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-/**
llms.txt:llms.txt: * @brief Get the version of the vexy_json library
llms.txt-llms.txt- */
llms.txt-llms.txt-inline std::string version() {
llms.txt:llms.txt:    return vexy_json_version();
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt:llms.txt:} // namespace vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-#endif // VEXY_JSON_HPP
llms.txt-llms.txt-```
--
llms.txt-llms.txt-Relative File Path: crates/c-api/src/lib.rs
llms.txt-llms.txt-
llms.txt-llms.txt-```rust
llms.txt:llms.txt://! C API for the vexy_json JSON parser.
llms.txt-llms.txt-//!
llms.txt-llms.txt-//! This crate provides a C-compatible API that can be used from C/C++
llms.txt-llms.txt-//! applications and for creating language bindings.
--
llms.txt-llms.txt-use libc::{c_char, size_t};
llms.txt-llms.txt-use std::ffi::{CStr, CString};
llms.txt-llms.txt-use std::ptr;
llms.txt:llms.txt:use vexy_json_core::ast::Value;
llms.txt:llms.txt:use vexy_json_core::{parse, parse_with_options, ParserOptions};
llms.txt-llms.txt-
llms.txt:llms.txt:/// Parser options for configuring vexy_json behavior
llms.txt-llms.txt-#[repr(C)]
llms.txt-llms.txt-pub struct VexyJsonParserOptions {
llms.txt-llms.txt-    pub allow_comments: bool,
--
llms.txt-llms.txt-    options: ParserOptions,
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt:llms.txt:/// Get the version of the vexy_json library
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_version() -> *const c_char {
llms.txt-llms.txt-    static VERSION: &str = concat!(env!("CARGO_PKG_VERSION"), "\0");
llms.txt-llms.txt-    VERSION.as_ptr() as *const c_char
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-/// Parse JSON with default options
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_parse(input: *const c_char) -> VexyJsonParseResult {
llms.txt-llms.txt-    if input.is_null() {
llms.txt-llms.txt-        return VexyJsonParseResult {
llms.txt-llms.txt-            json: ptr::null_mut(),
--
llms.txt-llms.txt-
llms.txt-llms.txt-/// Parse JSON with custom options
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_parse_with_options(
llms.txt-llms.txt-    input: *const c_char,
llms.txt-llms.txt-    options: *const VexyJsonParserOptions,
llms.txt-llms.txt-) -> VexyJsonParseResult {
--
llms.txt-llms.txt-    }
llms.txt-llms.txt-
llms.txt-llms.txt-    if options.is_null() {
llms.txt:llms.txt:        return vexy_json_parse(input);
llms.txt-llms.txt-    }
llms.txt-llms.txt-
llms.txt-llms.txt-    let input_str = unsafe {
--
llms.txt-llms.txt-
llms.txt-llms.txt-/// Parse JSON and get detailed information including repairs
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_parse_detailed(
llms.txt-llms.txt-    input: *const c_char,
llms.txt-llms.txt-    options: *const VexyJsonParserOptions,
llms.txt-llms.txt-) -> VexyJsonDetailedResult {
llms.txt-llms.txt-    // For now, we'll implement this as a simple parse without repair tracking
llms.txt-llms.txt-    // TODO: Implement actual repair tracking
llms.txt-llms.txt-    let result = if options.is_null() {
llms.txt:llms.txt:        vexy_json_parse(input)
llms.txt-llms.txt-    } else {
llms.txt:llms.txt:        vexy_json_parse_with_options(input, options)
llms.txt-llms.txt-    };
llms.txt-llms.txt-
llms.txt-llms.txt-    VexyJsonDetailedResult {
--
llms.txt-llms.txt-
llms.txt-llms.txt-/// Create a new parser instance
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_parser_new(
llms.txt-llms.txt-    options: *const VexyJsonParserOptions,
llms.txt-llms.txt-) -> *mut VexyJsonParser {
llms.txt-llms.txt-    let rust_options = if options.is_null() {
--
llms.txt-llms.txt-
llms.txt-llms.txt-/// Parse JSON using a parser instance
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_parser_parse(
llms.txt-llms.txt-    parser: *mut VexyJsonParser,
llms.txt-llms.txt-    input: *const c_char,
llms.txt-llms.txt-) -> VexyJsonParseResult {
--
llms.txt-llms.txt-
llms.txt-llms.txt-/// Free a parser instance
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_parser_free(parser: *mut VexyJsonParser) {
llms.txt-llms.txt-    if !parser.is_null() {
llms.txt-llms.txt-        unsafe {
llms.txt-llms.txt-            let _ = Box::from_raw(parser);
--
llms.txt-llms.txt-
llms.txt-llms.txt-/// Free a parse result
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_free_result(result: VexyJsonParseResult) {
llms.txt-llms.txt-    if !result.json.is_null() {
llms.txt-llms.txt-        unsafe {
llms.txt-llms.txt-            let _ = CString::from_raw(result.json);
--
llms.txt-llms.txt-
llms.txt-llms.txt-/// Free a detailed result
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_free_detailed_result(result: VexyJsonDetailedResult) {
llms.txt-llms.txt-    if !result.json.is_null() {
llms.txt-llms.txt-        unsafe {
llms.txt-llms.txt-            let _ = CString::from_raw(result.json);
--
llms.txt-llms.txt-
llms.txt-llms.txt-/// Get default parser options
llms.txt-llms.txt-#[no_mangle]
llms.txt:llms.txt:pub extern "C" fn vexy_json_default_options() -> VexyJsonParserOptions {
llms.txt-llms.txt-    let rust_options = ParserOptions::default();
llms.txt-llms.txt-    rust_options_to_c(&rust_options)
llms.txt-llms.txt-}
--
llms.txt-llms.txt-
llms.txt-llms.txt-```toml
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json-cli"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-edition = "2021"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[[bin]]
llms.txt:llms.txt:name = "vexy_json"
llms.txt-llms.txt-path = "src/main.rs"
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-dirs = "5.0"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "../core"
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/cli/build.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/cli/src/main.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct CliArgs {
--
llms.txt-llms.txt-
llms.txt-llms.txt-```toml
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json-core"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-edition = "2021"
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/benches/parser_benchmarks.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod samples;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/build.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/examples/advanced_repair.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/examples/error_reporting.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/ast/builder.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod build;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/ast/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod builder;
--
llms.txt-llms.txt-mod visitor;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/ast/token.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/ast/value.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/ml_patterns.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod recovery;
--
llms.txt-llms.txt-mod ml_patterns;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/recovery/context.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct ContextRule {
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/recovery/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod context;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/recovery/strategies.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/recovery_v2.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/repair.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct RepairAction {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/reporter.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/result.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/span.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/terminal.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/types.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/error/utils.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/array.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct LazyArray {
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod array;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/number.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/object.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct LazyObject {
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lazy/string.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lexer/debug_lexer.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lexer/fast_lexer.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lexer/logos_lexer.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lexer/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod debug_lexer;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/lib.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod ast;
--
llms.txt-llms.txt-mod parallel_chunked;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/benchmarks.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/memory_pool.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/memory_pool_v2.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/memory_pool_v3.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod benchmarks;
--
llms.txt-llms.txt-mod zero_copy;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/simd.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/string_parser.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/value_builder.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/optimization/zero_copy.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parallel.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parallel_chunked.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/array.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/boolean.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/iterative.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod array;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/null.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/number.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/object.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/optimized.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/optimized_v2.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/recursive.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/state.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct ParserState {
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/parser/string.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/comment_preservation.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/custom_number.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/datetime.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod comment_preservation;
--
llms.txt-llms.txt-mod schema_validation;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/plugin/plugins/schema_validation.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/repair/advanced.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/repair.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod advanced;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/buffered/buffer.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/buffered/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod buffer;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/buffered/state.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct TempParsingState {
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/lexer.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod buffered;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/ndjson.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/streaming/simple_lexer.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/transform/mod.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod normalizer;
--
llms.txt-llms.txt-mod optimizer;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/transform/normalizer.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core/src/transform/optimizer.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
--
llms.txt-llms.txt-
llms.txt-llms.txt-```toml
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json-python"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-edition = "2021"
llms.txt:llms.txt:description = "Python bindings for vexy_json - a forgiving JSON parser"
llms.txt:llms.txt:repository = "https://github.com/twardoch/vexy_json"
llms.txt-llms.txt-license = "MIT OR Apache-2.0"
llms.txt-llms.txt-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[lib]
llms.txt:llms.txt:name = "vexy_json"
llms.txt-llms.txt-crate-type = [ "cdylib" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-features = [ "extension-module" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "../core"
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/build.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[project]
llms.txt:llms.txt:name = "vexy_json"
llms.txt:llms.txt:description = "A forgiving JSON parser - Python bindings for the Rust vexy_json library"
llms.txt-llms.txt-readme = "README.md"
llms.txt-llms.txt-requires-python = ">=3.8"
llms.txt-llms.txt-classifiers = [
--
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[project.urls]
llms.txt:llms.txt:Homepage = "https://github.com/twardoch/vexy_json"
llms.txt:llms.txt:Repository = "https://github.com/twardoch/vexy_json.git"
llms.txt:llms.txt:Issues = "https://github.com/twardoch/vexy_json/issues"
llms.txt:llms.txt:Documentation = "https://twardoch.github.io/vexy_json/"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[project.optional-dependencies]
--
llms.txt-llms.txt-[tool.maturin]
llms.txt-llms.txt-features = [ "pyo3/extension-module" ]
llms.txt-llms.txt-python-source = "python"
llms.txt:llms.txt:module-name = "vexy_json._vexy_json"
llms.txt:llms.txt:include = [ "python/vexy_json/__init__.pyi", "python/vexy_json/py.typed" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-[tool.pytest.ini_options]
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/python/vexy_json/__init__.py
llms.txt-llms.txt-# Language: python
llms.txt-llms.txt-
llms.txt:llms.txt:from ._vexy_json import (
llms.txt-llms.txt-    parse_json as parse,
llms.txt-llms.txt-    parse_with_options_py as parse_with_options,
llms.txt-llms.txt-    is_valid,
--
llms.txt-llms.txt-)
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:Relative File Path: crates/python/python/vexy_json/__init__.pyi
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt:llms.txt:# this_file: crates/python/vexy_json.pyi
llms.txt-llms.txt-
llms.txt-llms.txt-"""
llms.txt:llms.txt:Type stubs for vexy_json Python bindings.
llms.txt-llms.txt-
llms.txt:llms.txt:This file provides type hints for the vexy_json Python module, which is implemented in Rust.
llms.txt-llms.txt-"""
llms.txt-llms.txt-
llms.txt-llms.txt-from typing import Any, Dict, List, Union, Optional, IO, Iterator, ContextManager
--
llms.txt-llms.txt-        ValueError: If the input is not valid JSON
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt:llms.txt:        >>> result = vexy_json.parse('{"key": "value", trailing: true,}')
llms.txt-llms.txt-        >>> print(result)
llms.txt-llms.txt-        {'key': 'value', 'trailing': True}
llms.txt-llms.txt-    """
--
llms.txt-llms.txt-        ValueError: If the input is not valid JSON
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt:llms.txt:        >>> result = vexy_json.parse_with_options('key: value', implicit_top_level=True)
llms.txt-llms.txt-        >>> print(result)
llms.txt-llms.txt-        {'key': 'value'}
llms.txt-llms.txt-    """
--
llms.txt-llms.txt-        True if the input is valid, False otherwise
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt:llms.txt:        >>> vexy_json.is_valid('{"valid": true}')
llms.txt-llms.txt-        True
llms.txt:llms.txt:        >>> vexy_json.is_valid('invalid json')
llms.txt-llms.txt-        False
llms.txt-llms.txt-    """
llms.txt-llms.txt-    ...
--
llms.txt-llms.txt-        TypeError: If the object cannot be serialized to JSON
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt-llms.txt-        >>> data = {'key': 'value', 'number': 42}
llms.txt:llms.txt:        >>> vexy_json.dumps(data)
llms.txt-llms.txt-        '{"key":"value","number":42}'
llms.txt:llms.txt:        >>> vexy_json.dumps(data, indent=2)
llms.txt-llms.txt-        '{\n  "key": "value",\n  "number": 42\n}'
llms.txt-llms.txt-    """
llms.txt-llms.txt-    ...
--
llms.txt-llms.txt-        ValueError: If the content is not valid JSON
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt-llms.txt-        >>> with open('data.json', 'r') as f:
llms.txt:llms.txt:        ...     result = vexy_json.load(f)
llms.txt-llms.txt-    """
llms.txt-llms.txt-    ...
llms.txt-llms.txt-
--
llms.txt-llms.txt-        TypeError: If the object cannot be serialized
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt-llms.txt-        >>> data = {'key': 'value'}
llms.txt-llms.txt-        >>> with open('output.json', 'w') as f:
llms.txt:llms.txt:        ...     vexy_json.dump(data, f, indent=2)
llms.txt-llms.txt-    """
llms.txt-llms.txt-    ...
llms.txt-llms.txt-
--
llms.txt-llms.txt-        ImportError: If NumPy is not available
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt:llms.txt:        >>> arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-llms.txt-        >>> print(type(arr))
llms.txt-llms.txt-        <class 'numpy.ndarray'>
llms.txt-llms.txt-    """
--
llms.txt-llms.txt-        The parsed array with zero-copy optimization when possible
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt:llms.txt:        >>> arr = vexy_json.loads_numpy_zerocopy('[1.0, 2.0, 3.0]', dtype='float64')
llms.txt-llms.txt-    """
llms.txt-llms.txt-    ...
llms.txt-llms.txt-
--
llms.txt-llms.txt-        The parsed JSON as a DataFrame
llms.txt-llms.txt-        
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt:llms.txt:        >>> df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
llms.txt-llms.txt-        >>> print(type(df))
llms.txt-llms.txt-        <class 'pandas.core.frame.DataFrame'>
llms.txt-llms.txt-    """
--
llms.txt-llms.txt-    JSON files or streams.
llms.txt-llms.txt-    
llms.txt-llms.txt-    Example:
llms.txt:llms.txt:        >>> import vexy_json
llms.txt:llms.txt:        >>> with vexy_json.StreamingParser() as parser:
llms.txt-llms.txt-        ...     for item in parser.parse_stream(file_handle):
llms.txt-llms.txt-        ...         print(item)
llms.txt-llms.txt-    """
--
llms.txt-llms.txt-            Iterator of parsed JSON objects
llms.txt-llms.txt-            
llms.txt-llms.txt-        Example:
llms.txt:llms.txt:            >>> with vexy_json.StreamingParser() as parser:
llms.txt-llms.txt-            ...     for item in parser.parse_stream(file_handle):
llms.txt-llms.txt-            ...         process(item)
llms.txt-llms.txt-        """
--
llms.txt-llms.txt-            Iterator of parsed JSON objects
llms.txt-llms.txt-            
llms.txt-llms.txt-        Example:
llms.txt:llms.txt:            >>> with vexy_json.StreamingParser() as parser:
llms.txt-llms.txt-            ...     for item in parser.parse_lines(file_handle):
llms.txt-llms.txt-            ...         process(item)
llms.txt-llms.txt-        """
--
llms.txt-llms.txt-__description__: str
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:Relative File Path: crates/python/python/vexy_json/py.typed
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt:llms.txt:# this_file: crates/python/python/vexy_json/py.typed
llms.txt-llms.txt-
llms.txt-llms.txt-# Marker file for PEP 561 indicating that this package supports typing
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/src/lib.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct StreamingParser {
--
llms.txt-llms.txt-{"test": "file2", "number": 84}
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/tests/test_basic.py
llms.txt-llms.txt-# Language: python
llms.txt-llms.txt-
llms.txt-llms.txt-import pytest
llms.txt:llms.txt:import vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-class TestBasicParsing:
llms.txt-llms.txt-    """Test basic JSON parsing functionality."""
--
llms.txt-llms.txt-        """Test parsing nested objects and arrays."""
llms.txt-llms.txt-
llms.txt-llms.txt-class TestForgivingFeatures:
llms.txt:llms.txt:    """Test vexy_json's forgiving JSON features."""
llms.txt-llms.txt-    def test_comments((self)):
llms.txt-llms.txt-        """Test single-line and multi-line comments."""
llms.txt-llms.txt-    def test_trailing_commas((self)):
--
llms.txt-llms.txt-    """Test various malformed JSON inputs."""
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/tests/test_typing.py
llms.txt-llms.txt-# Language: python
llms.txt-llms.txt-
llms.txt-llms.txt-import pytest
--
llms.txt-llms.txt-from typing import TYPE_CHECKING
llms.txt-llms.txt-import numpy as np
llms.txt-llms.txt-import pandas as pd
llms.txt:llms.txt:import vexy_json
llms.txt:llms.txt:import vexy_json
llms.txt:llms.txt:import vexy_json
llms.txt:llms.txt:import vexy_json
llms.txt:llms.txt:import vexy_json
llms.txt-llms.txt-import numpy as np
llms.txt:llms.txt:import vexy_json
llms.txt-llms.txt-import pandas as pd
llms.txt:llms.txt:import vexy_json
llms.txt:llms.txt:import vexy_json
llms.txt:llms.txt:import vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-def test_basic_functionality(()):
llms.txt-llms.txt-    """Test basic parsing functionality with type hints."""
--
llms.txt-llms.txt-    """Test all forgiving JSON features."""
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/python/tests/test_vexy_json.py
llms.txt-llms.txt-# Language: python
llms.txt-llms.txt-
llms.txt:llms.txt:import vexy_json
llms.txt:llms.txt:from vexy_json import VexyJSONParser, VexyJSONConfig
llms.txt-llms.txt-
llms.txt-llms.txt-class VexyJSONWrapper:
llms.txt-llms.txt-    """A wrapper for Vexy JSON functionality"""
--
llms.txt-llms.txt-
llms.txt-llms.txt-```toml
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json-serde"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-edition = "2021"
llms.txt-llms.txt-
--
llms.txt-llms.txt-path = "src/lib.rs"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "../core"
llms.txt-llms.txt-features = [ "serde" ]
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/serde/src/lib.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct SerdeValue {
--
llms.txt-llms.txt-path = "src/lib.rs"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "../core"
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/test-utils/src/lib.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```toml
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json-wasm"
llms.txt-llms.txt-version = "2.2.3"
llms.txt-llms.txt-edition = "2021"
llms.txt:llms.txt:description = "WebAssembly bindings for vexy_json - a forgiving JSON parser"
llms.txt:llms.txt:repository = "https://github.com/twardoch/vexy_json"
llms.txt-llms.txt-license = "MIT OR Apache-2.0"
llms.txt-llms.txt-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-llms.txt-
--
llms.txt-llms.txt-features = [ "derive" ]
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "../core"
llms.txt-llms.txt-features = [ "serde" ]
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/wasm/build.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/wasm/src/lib.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-const __dirname = dirname(__filename);
llms.txt-llms.txt-
llms.txt-llms.txt-// Dynamically import the WASM module
llms.txt:llms.txt:const wasmModule = await import(join(__dirname, 'pkg', 'vexy_json_wasm.js'));
llms.txt-llms.txt-const { default: init, parse_js, parse_with_options_js, is_valid, format } = wasmModule;
llms.txt-llms.txt-
llms.txt-llms.txt-// Initialize WASM with the WASM file path
llms.txt:llms.txt:const wasmPath = join(__dirname, 'pkg', 'vexy_json_wasm_bg.wasm');
llms.txt-llms.txt-const wasmBytes = readFileSync(wasmPath);
llms.txt-llms.txt-await init(wasmBytes);
llms.txt-llms.txt-
llms.txt:llms.txt:console.log('Testing vexy_json WASM module...\n');
llms.txt-llms.txt-
llms.txt-llms.txt-// Test 1: Basic parsing
llms.txt-llms.txt-console.log('Test 1: Basic parsing');
--
llms.txt-llms.txt-console.log('All tests passed!');
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_lexer_test.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test10.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test2.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test3.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test4.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test5.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test6.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test7.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test8.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/debug_test9.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-author:
llms.txt-llms.txt-  name: Adam Twardoch
llms.txt-llms.txt-  url: https://github.com/twardoch
llms.txt:llms.txt:baseurl: /vexy_json
llms.txt-llms.txt-# Collections
llms.txt-llms.txt-collections:
llms.txt-llms.txt-  pages:
--
llms.txt-llms.txt-  - '**/gems/jekyll-*/lib/site_template/_posts/*'
llms.txt-llms.txt-  - 'internal/**/*'
llms.txt-llms.txt-github:
llms.txt:llms.txt:  repository_url: https://github.com/twardoch/vexy_json
llms.txt-llms.txt-highlighter: rouge
llms.txt-llms.txt-# Include WASM and tool files in build
llms.txt-llms.txt-include:
--
llms.txt-llms.txt-back_to_top_text: "Back to top"
llms.txt-llms.txt-
llms.txt-llms.txt-# Footer content
llms.txt:llms.txt:footer_content: "Copyright &copy; 2025 Adam Twardoch. Distributed by an <a href=\"https://github.com/twardoch/vexy_json/tree/main/LICENSE\">MIT license.</a>"
llms.txt-llms.txt-
llms.txt-llms.txt-# External navigation links will be removed from here as just-the-docs handles them in the content
llms.txt-llms.txt-# Plugin configuration
--
llms.txt-llms.txt-  - jekyll-sitemap
llms.txt-llms.txt-  - jekyll-optional-front-matter
llms.txt-llms.txt-# Repository information
llms.txt:llms.txt:repository: twardoch/vexy_json
llms.txt-llms.txt-# Performance and caching
llms.txt-llms.txt-sass:
llms.txt-llms.txt-  style: compressed
--
llms.txt-llms.txt-social:
llms.txt-llms.txt-  - icon: github
llms.txt-llms.txt-    name: GitHub
llms.txt:llms.txt:    url: https://github.com/twardoch/vexy_json
llms.txt-llms.txt-# WASM and static file configuration
llms.txt-llms.txt-# Ensure proper MIME types for WebAssembly files
llms.txt-llms.txt-static_files:
--
llms.txt-llms.txt-  - /pkg/*.js
llms.txt-llms.txt-  - /assets/**/*
llms.txt-llms.txt-remote_theme: just-the-docs/just-the-docs
llms.txt:llms.txt:# Site configuration for vexy_json documentation
llms.txt:llms.txt:title: vexy_json - Forgiving JSON Parser
llms.txt-llms.txt-url: https://twardoch.github.io
llms.txt-llms.txt-# MIME type handling for GitHub Pages
llms.txt-llms.txt-# Note: GitHub Pages automatically serves .wasm files with application/wasm MIME type
--
llms.txt-llms.txt-Relative File Path: docs/assets/css/_tool.scss
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt:llms.txt:/* Custom styles for vexy_json web tool */
llms.txt-llms.txt-
llms.txt-llms.txt-/* Editor enhancements */
llms.txt-llms.txt-.textarea-editor {
--
llms.txt-llms.txt-Relative File Path: docs/assets/css/enhanced-features.css
llms.txt-llms.txt-
llms.txt-llms.txt-```css
llms.txt:llms.txt:/* Enhanced features for vexy_json tool */
llms.txt-llms.txt-
llms.txt-llms.txt-/* WASM loading animations */
llms.txt-llms.txt-.loading-fade {
--
llms.txt-llms.txt----
llms.txt-llms.txt-
llms.txt-llms.txt-// @import "just-the-docs";
llms.txt:llms.txt:// Custom styles for vexy_json documentation site
llms.txt-llms.txt-// This file extends the just-the-docs theme with custom styling
llms.txt-llms.txt-
llms.txt-llms.txt-// Import our tool-specific styles
--
llms.txt-llms.txt-
llms.txt-llms.txt-// Custom color scheme refinements
llms.txt-llms.txt-:root {
llms.txt:llms.txt:  --vexy_json-primary: #0969da;
llms.txt:llms.txt:  --vexy_json-secondary: #656d76;
llms.txt:llms.txt:  --vexy_json-accent: #0550ae;
llms.txt:llms.txt:  --vexy_json-success: #1a7f37;
llms.txt:llms.txt:  --vexy_json-warning: #bf8700;
llms.txt:llms.txt:  --vexy_json-danger: #cf222e;
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-// Enhanced code blocks for JSON examples
--
llms.txt-llms.txt-      .nav-list-link {
llms.txt-llms.txt-        &.active {
llms.txt-llms.txt-          font-weight: 600;
llms.txt:llms.txt:          color: var(--vexy_json-primary);
llms.txt-llms.txt-        }
llms.txt-llms.txt-      }
llms.txt-llms.txt-    }
--
llms.txt-llms.txt-  
llms.txt-llms.txt-  .footer-content {
llms.txt-llms.txt-    font-size: 14px;
llms.txt:llms.txt:    color: var(--vexy_json-secondary);
llms.txt-llms.txt-    
llms.txt-llms.txt-    a {
llms.txt:llms.txt:      color: var(--vexy_json-primary);
llms.txt-llms.txt-      text-decoration: none;
llms.txt-llms.txt-      
llms.txt-llms.txt-      &:hover {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-// Custom button styles
llms.txt:llms.txt:.btn-vexy_json {
llms.txt:llms.txt:  background-color: var(--vexy_json-primary);
llms.txt:llms.txt:  border: 1px solid var(--vexy_json-primary);
llms.txt-llms.txt-  color: white;
llms.txt-llms.txt-  
llms.txt-llms.txt-  &:hover {
llms.txt:llms.txt:    background-color: var(--vexy_json-accent);
llms.txt:llms.txt:    border-color: var(--vexy_json-accent);
llms.txt-llms.txt-  }
llms.txt-llms.txt-  
llms.txt-llms.txt-  &:focus {
--
llms.txt-llms.txt-    th {
llms.txt-llms.txt-      background-color: var(--code-background-color);
llms.txt-llms.txt-      font-weight: 600;
llms.txt:llms.txt:      color: var(--vexy_json-primary);
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
llms.txt-llms.txt-    td {
--
llms.txt-llms.txt-  
llms.txt-llms.txt-  &.callout-info {
llms.txt-llms.txt-    background-color: rgba(9, 105, 218, 0.1);
llms.txt:llms.txt:    border-left-color: var(--vexy_json-primary);
llms.txt-llms.txt-    
llms.txt-llms.txt-    .callout-title {
llms.txt:llms.txt:      color: var(--vexy_json-primary);
llms.txt-llms.txt-      font-weight: 600;
llms.txt-llms.txt-    }
llms.txt-llms.txt-  }
llms.txt-llms.txt-  
llms.txt-llms.txt-  &.callout-warning {
llms.txt-llms.txt-    background-color: rgba(191, 135, 0, 0.1);
llms.txt:llms.txt:    border-left-color: var(--vexy_json-warning);
llms.txt-llms.txt-    
llms.txt-llms.txt-    .callout-title {
llms.txt:llms.txt:      color: var(--vexy_json-warning);
llms.txt-llms.txt-      font-weight: 600;
llms.txt-llms.txt-    }
llms.txt-llms.txt-  }
llms.txt-llms.txt-  
llms.txt-llms.txt-  &.callout-success {
llms.txt-llms.txt-    background-color: rgba(26, 127, 55, 0.1);
llms.txt:llms.txt:    border-left-color: var(--vexy_json-success);
llms.txt-llms.txt-    
llms.txt-llms.txt-    .callout-title {
llms.txt:llms.txt:      color: var(--vexy_json-success);
llms.txt-llms.txt-      font-weight: 600;
llms.txt-llms.txt-    }
llms.txt-llms.txt-  }
--
llms.txt-llms.txt-    .stat-value {
llms.txt-llms.txt-      font-size: 2em;
llms.txt-llms.txt-      font-weight: 700;
llms.txt:llms.txt:      color: var(--vexy_json-primary);
llms.txt-llms.txt-      display: block;
llms.txt-llms.txt-    }
llms.txt-llms.txt-    
llms.txt-llms.txt-    .stat-label {
llms.txt-llms.txt-      font-size: 0.9em;
llms.txt:llms.txt:      color: var(--vexy_json-secondary);
llms.txt-llms.txt-      margin-top: 4px;
llms.txt-llms.txt-    }
llms.txt-llms.txt-  }
--
llms.txt-llms.txt-// Dark mode adjustments
llms.txt-llms.txt-@media (prefers-color-scheme: dark) {
llms.txt-llms.txt-  :root {
llms.txt:llms.txt:    --vexy_json-primary: #58a6ff;
llms.txt:llms.txt:    --vexy_json-secondary: #8b949e;
llms.txt:llms.txt:    --vexy_json-accent: #79c0ff;
llms.txt:llms.txt:    --vexy_json-success: #3fb950;
llms.txt:llms.txt:    --vexy_json-warning: #d29922;
llms.txt:llms.txt:    --vexy_json-danger: #f85149;
llms.txt-llms.txt-  }
llms.txt-llms.txt-}
llms.txt-llms.txt-
--
llms.txt-llms.txt-Relative File Path: docs/assets/css/tool.css
llms.txt-llms.txt-
llms.txt-llms.txt-```css
llms.txt:llms.txt:/* Custom styles for vexy_json web tool */
llms.txt-llms.txt-
llms.txt-llms.txt-/* Editor enhancements */
llms.txt-llms.txt-.textarea-editor {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/analytics.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-class AnalyticsCollector {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/browser-compatibility.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-class BrowserCompatibility {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/editor.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-class JsonEditor {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/error-highlighting.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-class ErrorHighlighter {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/examples.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-function getExamplesByCategory(())
--
llms.txt-llms.txt-function searchExamples((query))
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/feedback.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-class FeedbackSystem {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/jsonic-tool.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-class JsonicTool {
--
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/docs/assets/js/tool.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-import init, {
--
llms.txt-llms.txt-    get_parser_options,
llms.txt-llms.txt-    stringify_value,
llms.txt-llms.txt-    get_version_info
llms.txt:llms.txt:} from '../../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-import { EXAMPLES, getExample } from './examples.js';
llms.txt-llms.txt-import { BrowserCompatibility } from './browser-compatibility.js';
llms.txt-llms.txt-import { AnalyticsCollector } from './analytics.js';
--
llms.txt-llms.txt-  <head>
llms.txt-llms.txt-    <meta charset="UTF-8" />
llms.txt-llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:llms.txt:    <title>vexy_json Browser Compatibility Test</title>
llms.txt-llms.txt-    <style>
llms.txt-llms.txt-      body {
llms.txt-llms.txt-        font-family: Arial, sans-serif;
--
llms.txt-llms.txt-    </style>
llms.txt-llms.txt-  </head>
llms.txt-llms.txt-  <body>
llms.txt:llms.txt:    <h1>vexy_json Browser Compatibility Test</h1>
llms.txt-llms.txt-
llms.txt-llms.txt-    <div class="test-section">
llms.txt-llms.txt-      <h2>Browser Information</h2>
--
llms.txt-llms.txt-      <h2>WASM Module Loading</h2>
llms.txt-llms.txt-      <div id="module-loading">
llms.txt-llms.txt-        <div class="loading"></div>
llms.txt:llms.txt:        <span>Loading vexy_json WebAssembly module...</span>
llms.txt-llms.txt-      </div>
llms.txt-llms.txt-      <div id="module-tests"></div>
llms.txt-llms.txt-    </div>
--
llms.txt-llms.txt-    </div>
llms.txt-llms.txt-
llms.txt-llms.txt-    <script type="module">
llms.txt:llms.txt:      let vexy_json = null;
llms.txt-llms.txt-      let wasmModule = null;
llms.txt-llms.txt-
llms.txt-llms.txt-      // Test results storage
--
llms.txt-llms.txt-        }
llms.txt-llms.txt-      }
llms.txt-llms.txt-
llms.txt:llms.txt:      // Load vexy_json module
llms.txt-llms.txt-      async function loadVexyJsonModule() {
llms.txt-llms.txt-        try {
llms.txt-llms.txt-          document.getElementById('module-loading').innerHTML =
llms.txt:llms.txt:            '<div class="loading"></div>Loading vexy_json module...';
llms.txt-llms.txt-
llms.txt-llms.txt-          // Import the module
llms.txt:llms.txt:          const module = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-          await module.default(); // Initialize WASM
llms.txt:llms.txt:          vexy_json = module;
llms.txt-llms.txt-
llms.txt-llms.txt-          document.getElementById('module-loading').innerHTML =
llms.txt:llms.txt:            '<div class="test-result success">✓ vexy_json module loaded successfully</div>';
llms.txt-llms.txt-
llms.txt-llms.txt-          // Test module functions
llms.txt-llms.txt-          testModuleFunctions();
llms.txt-llms.txt-        } catch (error) {
llms.txt-llms.txt-          document.getElementById(
llms.txt-llms.txt-            'module-loading'
llms.txt:llms.txt:          ).innerHTML = `<div class="test-result error">✗ Failed to load vexy_json module: ${error.message}</div>`;
llms.txt-llms.txt-          addResult(
llms.txt-llms.txt-            'module',
llms.txt-llms.txt-            'Module Loading',
--
llms.txt-llms.txt-      }
llms.txt-llms.txt-
llms.txt-llms.txt-      function testModuleFunctions() {
llms.txt:llms.txt:        if (!vexy_json) return;
llms.txt-llms.txt-
llms.txt-llms.txt-        try {
llms.txt-llms.txt-          // Test version info
llms.txt:llms.txt:          const version = vexy_json.get_version_info();
llms.txt-llms.txt-          addResult(
llms.txt-llms.txt-            'module',
llms.txt-llms.txt-            'get_version_info()',
--
llms.txt-llms.txt-          );
llms.txt-llms.txt-
llms.txt-llms.txt-          // Test parser options
llms.txt:llms.txt:          const options = vexy_json.get_parser_options();
llms.txt-llms.txt-          addResult(
llms.txt-llms.txt-            'module',
llms.txt-llms.txt-            'get_parser_options()',
--
llms.txt-llms.txt-
llms.txt-llms.txt-          // Test basic parsing
llms.txt-llms.txt-          const simpleJson = '{"test": true}';
llms.txt:llms.txt:          const result = vexy_json.parse_json(simpleJson);
llms.txt-llms.txt-          addResult(
llms.txt-llms.txt-            'module',
llms.txt-llms.txt-            'parse_json() basic',
--
llms.txt-llms.txt-            allow_unquoted_keys: true,
llms.txt-llms.txt-            allow_trailing_commas: true,
llms.txt-llms.txt-          };
llms.txt:llms.txt:          const resultWithOptions = vexy_json.parse_json_with_options(
llms.txt-llms.txt-            forgivingJson,
llms.txt-llms.txt-            optionsTest.allow_comments,
llms.txt-llms.txt-            optionsTest.allow_trailing_commas,
--
llms.txt-llms.txt-          );
llms.txt-llms.txt-
llms.txt-llms.txt-          // Test validation
llms.txt:llms.txt:          const isValid = vexy_json.validate_json('{"valid": true}');
llms.txt-llms.txt-          addResult(
llms.txt-llms.txt-            'module',
llms.txt-llms.txt-            'validate_json()',
--
llms.txt-llms.txt-      }
llms.txt-llms.txt-
llms.txt-llms.txt-      function runParsingTests() {
llms.txt:llms.txt:        if (!vexy_json) {
llms.txt-llms.txt-          addResult(
llms.txt-llms.txt-            'parsing',
llms.txt-llms.txt-            'Module Required',
llms.txt-llms.txt-            false,
llms.txt:llms.txt:            'vexy_json module not loaded'
llms.txt-llms.txt-          );
llms.txt-llms.txt-          return;
llms.txt-llms.txt-        }
--
llms.txt-llms.txt-              allow_single_quotes: true,
llms.txt-llms.txt-            };
llms.txt-llms.txt-
llms.txt:llms.txt:            const result = vexy_json.parse_json_with_options(
llms.txt-llms.txt-              test.input,
llms.txt-llms.txt-              options.allow_comments,
llms.txt-llms.txt-              options.allow_trailing_commas,
--
llms.txt-llms.txt-      }
llms.txt-llms.txt-
llms.txt-llms.txt-      function runPerformanceTests() {
llms.txt:llms.txt:        if (!vexy_json) {
llms.txt-llms.txt-          addResult(
llms.txt-llms.txt-            'performance',
llms.txt-llms.txt-            'Module Required',
llms.txt-llms.txt-            false,
llms.txt:llms.txt:            'vexy_json module not loaded'
llms.txt-llms.txt-          );
llms.txt-llms.txt-          return;
llms.txt-llms.txt-        }
--
llms.txt-llms.txt-        Object.entries(testData).forEach(([size, data]) => {
llms.txt-llms.txt-          try {
llms.txt-llms.txt-            const startTime = performance.now();
llms.txt:llms.txt:            const result = vexy_json.parse_json(data);
llms.txt-llms.txt-            const endTime = performance.now();
llms.txt-llms.txt-            const duration = endTime - startTime;
llms.txt-llms.txt-
--
llms.txt-llms.txt-        const input = document.getElementById('test-input').value;
llms.txt-llms.txt-        const resultDiv = document.getElementById('interactive-result');
llms.txt-llms.txt-
llms.txt:llms.txt:        if (!vexy_json) {
llms.txt-llms.txt-          resultDiv.innerHTML =
llms.txt:llms.txt:            '<div class="test-result error">vexy_json module not loaded</div>';
llms.txt-llms.txt-          return;
llms.txt-llms.txt-        }
llms.txt-llms.txt-
--
llms.txt-llms.txt-            newline_as_comma: true,
llms.txt-llms.txt-          };
llms.txt-llms.txt-
llms.txt:llms.txt:          const result = vexy_json.parse_json_with_options(
llms.txt-llms.txt-            input,
llms.txt-llms.txt-            options.allow_comments,
llms.txt-llms.txt-            options.allow_trailing_commas,
--
llms.txt-llms.txt-        downloadDiv.innerHTML = `
llms.txt-llms.txt-                <h2>Test Report</h2>
llms.txt-llms.txt-                <div class="test-result info">
llms.txt:llms.txt:                    All tests completed. <a href="${url}" download="vexy_json-browser-test-${
llms.txt-llms.txt-          results.browser.browser
llms.txt-llms.txt-        }-${Date.now()}.json">Download detailed report</a>
llms.txt-llms.txt-                </div>
--
llms.txt-llms.txt-        parse_json,
llms.txt-llms.txt-        parse_json_with_options,
llms.txt-llms.txt-        get_parser_options,
llms.txt:llms.txt:      } from '../pkg/vexy_json_wasm.js?v=' + Date.now();
llms.txt-llms.txt-
llms.txt-llms.txt-      let log = '';
llms.txt-llms.txt-      function appendLog(message) {
--
llms.txt-llms.txt-    <p id="result">Loading...</p>
llms.txt-llms.txt-
llms.txt-llms.txt-    <script type="module">
llms.txt:llms.txt:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      async function test() {
llms.txt-llms.txt-        try {
--
llms.txt-llms.txt-      import init, {
llms.txt-llms.txt-        parse_json,
llms.txt-llms.txt-        parse_json_with_options,
llms.txt:llms.txt:      } from '../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      let log = '';
llms.txt-llms.txt-      function appendLog(message) {
--
llms.txt-llms.txt-    <pre id="log"></pre>
llms.txt-llms.txt-
llms.txt-llms.txt-    <script type="module">
llms.txt:llms.txt:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      let log = '';
llms.txt-llms.txt-      function appendLog(message) {
--
llms.txt-llms.txt-      import init, {
llms.txt-llms.txt-        parse_json,
llms.txt-llms.txt-        parse_json_with_options,
llms.txt:llms.txt:      } from '../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      let log = '';
llms.txt-llms.txt-      function appendLog(message) {
--
llms.txt-llms.txt-      import init, {
llms.txt-llms.txt-        parse_json_with_options,
llms.txt-llms.txt-        get_parser_options,
llms.txt:llms.txt:      } from '../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      let log = '';
llms.txt-llms.txt-      function appendLog(message) {
--
llms.txt-llms.txt-    <pre id="output"></pre>
llms.txt-llms.txt-
llms.txt-llms.txt-    <script type="module">
llms.txt:llms.txt:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      let initialized = false;
llms.txt-llms.txt-
--
llms.txt-llms.txt-  <head>
llms.txt-llms.txt-    <meta charset="UTF-8" />
llms.txt-llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:llms.txt:    <title>Basic vexy_json WASM Test</title>
llms.txt-llms.txt-    <style>
llms.txt-llms.txt-      body {
llms.txt-llms.txt-        font-family: monospace;
--
llms.txt-llms.txt-    </style>
llms.txt-llms.txt-  </head>
llms.txt-llms.txt-  <body>
llms.txt:llms.txt:    <h1>Basic vexy_json WASM Test</h1>
llms.txt-llms.txt-    <div id="results"></div>
llms.txt-llms.txt-
llms.txt-llms.txt-    <script type="module">
--
llms.txt-llms.txt-          }
llms.txt-llms.txt-          addResult('✅ WebAssembly supported', 'success');
llms.txt-llms.txt-
llms.txt:llms.txt:          addResult('Loading vexy_json module...');
llms.txt:llms.txt:          const vexy_json = await import('../pkg/vexy_json_wasm.js');
llms.txt:llms.txt:          await vexy_json.default();
llms.txt:llms.txt:          addResult('✅ vexy_json module loaded', 'success');
llms.txt-llms.txt-
llms.txt-llms.txt-          // Test basic parsing
llms.txt-llms.txt-          addResult('Testing basic JSON parsing...');
llms.txt:llms.txt:          const result1 = vexy_json.parse_json('{"test": true}');
llms.txt-llms.txt-          addResult(`✅ Basic parsing: ${JSON.stringify(result1)}`, 'success');
llms.txt-llms.txt-
llms.txt-llms.txt-          // Test forgiving features
llms.txt-llms.txt-          addResult('Testing forgiving features...');
llms.txt:llms.txt:          const result2 = vexy_json.parse_json(
llms.txt-llms.txt-            '{key: "value", /* comment */ trailing: "comma",}'
llms.txt-llms.txt-          );
llms.txt-llms.txt-          addResult(
--
llms.txt-llms.txt-
llms.txt-llms.txt-          // Test validation
llms.txt-llms.txt-          addResult('Testing validation...');
llms.txt:llms.txt:          const valid = vexy_json.validate_json('{"valid": true}');
llms.txt:llms.txt:          const invalid = vexy_json.validate_json('{invalid}');
llms.txt-llms.txt-          addResult(
llms.txt-llms.txt-            `✅ Validation: valid=${valid}, invalid=${invalid}`,
llms.txt-llms.txt-            'success'
--
llms.txt-llms.txt-          // Test error handling
llms.txt-llms.txt-          addResult('Testing error handling...');
llms.txt-llms.txt-          try {
llms.txt:llms.txt:            vexy_json.parse_json('{unclosed');
llms.txt-llms.txt-            addResult('❌ Should have thrown error', 'error');
llms.txt-llms.txt-          } catch (error) {
llms.txt-llms.txt-            addResult(`✅ Error handling: ${error.message}`, 'success');
--
llms.txt-llms.txt-    <!-- this_file: docs/test-browsers.html -->
llms.txt-llms.txt-    <meta charset="UTF-8" />
llms.txt-llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:llms.txt:    <title>vexy_json Cross-Browser Test Suite</title>
llms.txt-llms.txt-    <link
llms.txt-llms.txt-      href="https://cdn.jsdelivr.net/npm/daisyui@4.4.19/dist/full.min.css"
llms.txt-llms.txt-      rel="stylesheet"
--
llms.txt-llms.txt-        <div class="hero-content text-center">
llms.txt-llms.txt-          <div class="max-w-md">
llms.txt-llms.txt-            <h1 class="text-3xl font-bold">
llms.txt:llms.txt:              vexy_json Cross-Browser Test Suite
llms.txt-llms.txt-            </h1>
llms.txt-llms.txt-            <p class="py-6">
llms.txt-llms.txt-              Comprehensive testing for WASM compatibility across browsers
--
llms.txt-llms.txt-          name: 'WASM Module Loading',
llms.txt-llms.txt-          test: async () => {
llms.txt-llms.txt-            try {
llms.txt:llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-              return {
llms.txt-llms.txt-                success: true,
llms.txt-llms.txt-                message: 'WASM module loaded successfully',
--
llms.txt-llms.txt-          name: 'Basic JSON Parsing',
llms.txt-llms.txt-          test: async () => {
llms.txt-llms.txt-            try {
llms.txt:llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-              const result = wasmModule.parse_json('{"test": "value"}');
llms.txt-llms.txt-              const parsed = JSON.parse(result);
llms.txt-llms.txt-              if (parsed.test === 'value') {
--
llms.txt-llms.txt-          name: 'Comment Support',
llms.txt-llms.txt-          test: async () => {
llms.txt-llms.txt-            try {
llms.txt:llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-              const input = '{"test": "value" /* comment */}';
llms.txt-llms.txt-              const result = wasmModule.parse_json(input);
llms.txt-llms.txt-              const parsed = JSON.parse(result);
--
llms.txt-llms.txt-          name: 'Unquoted Keys',
llms.txt-llms.txt-          test: async () => {
llms.txt-llms.txt-            try {
llms.txt:llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-              const input = '{test: "value"}';
llms.txt-llms.txt-              const result = wasmModule.parse_json(input);
llms.txt-llms.txt-              const parsed = JSON.parse(result);
--
llms.txt-llms.txt-          name: 'Trailing Commas',
llms.txt-llms.txt-          test: async () => {
llms.txt-llms.txt-            try {
llms.txt:llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-              const input = '{"test": "value",}';
llms.txt-llms.txt-              const result = wasmModule.parse_json(input);
llms.txt-llms.txt-              const parsed = JSON.parse(result);
--
llms.txt-llms.txt-          name: 'Error Handling',
llms.txt-llms.txt-          test: async () => {
llms.txt-llms.txt-            try {
llms.txt:llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-              try {
llms.txt-llms.txt-                wasmModule.parse_json('invalid json {{{');
llms.txt-llms.txt-                return {
--
llms.txt-llms.txt-          name: 'Performance Test',
llms.txt-llms.txt-          test: async () => {
llms.txt-llms.txt-            try {
llms.txt:llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-              const largeJson = JSON.stringify({
llms.txt-llms.txt-                array: Array(1000)
llms.txt-llms.txt-                  .fill()
--
llms.txt-llms.txt-          name: 'Memory Management',
llms.txt-llms.txt-          test: async () => {
llms.txt-llms.txt-            try {
llms.txt:llms.txt:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-llms.txt-
llms.txt-llms.txt-              // Run multiple parse operations to test memory management
llms.txt-llms.txt-              for (let i = 0; i < 100; i++) {
--
llms.txt-llms.txt-        resultsEl.innerHTML += `<span class="test-fail">Failed: ${failCount}</span>\n`;
llms.txt-llms.txt-
llms.txt-llms.txt-        if (failCount === 0) {
llms.txt:llms.txt:          resultsEl.innerHTML += `\n🎉 All tests passed! vexy_json WASM is compatible with this browser.`;
llms.txt-llms.txt-        } else {
llms.txt-llms.txt-          resultsEl.innerHTML += `\n⚠️ Some tests failed. Check the results above for details.`;
llms.txt-llms.txt-        }
--
llms.txt-llms.txt-  <head>
llms.txt-llms.txt-    <meta charset="UTF-8" />
llms.txt-llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:llms.txt:    <title>vexy_json WASM Test</title>
llms.txt-llms.txt-    <style>
llms.txt-llms.txt-      body {
llms.txt-llms.txt-        font-family: Arial, sans-serif;
--
llms.txt-llms.txt-    </style>
llms.txt-llms.txt-  </head>
llms.txt-llms.txt-  <body>
llms.txt:llms.txt:    <h1>vexy_json WebAssembly Test Page</h1>
llms.txt:llms.txt:    <p>Testing the vexy_json WASM module functionality...</p>
llms.txt-llms.txt-
llms.txt-llms.txt-    <div id="results"></div>
llms.txt-llms.txt-
--
llms.txt-llms.txt-        get_parser_options,
llms.txt-llms.txt-        stringify_value,
llms.txt-llms.txt-        get_version_info,
llms.txt:llms.txt:      } from '../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      const resultsDiv = document.getElementById('results');
llms.txt-llms.txt-
--
llms.txt-llms.txt-            addResult(
llms.txt-llms.txt-              'Version Info',
llms.txt-llms.txt-              true,
llms.txt:llms.txt:              `vexy_json v${versionInfo.version}\n${versionInfo.description}`
llms.txt-llms.txt-            );
llms.txt-llms.txt-          } catch (e) {
llms.txt-llms.txt-            addResult('Version Info', false, `Error: ${e.message}`);
--
llms.txt-llms.txt-        parse_json,
llms.txt-llms.txt-        parse_json_with_options,
llms.txt-llms.txt-        get_parser_options,
llms.txt:llms.txt:      } from '../pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      let log = '';
llms.txt-llms.txt-      function appendLog(message) {
--
llms.txt-llms.txt-  <head>
llms.txt-llms.txt-    <meta charset="UTF-8" />
llms.txt-llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:llms.txt:    <title>vexy_json WASM Test</title>
llms.txt-llms.txt-    <style>
llms.txt-llms.txt-      body {
llms.txt-llms.txt-        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
--
llms.txt-llms.txt-    </style>
llms.txt-llms.txt-  </head>
llms.txt-llms.txt-  <body>
llms.txt:llms.txt:    <h1>vexy_json WASM Test Page</h1>
llms.txt-llms.txt-    <div class="version" id="version">Loading WASM module...</div>
llms.txt-llms.txt-
llms.txt-llms.txt-    <div class="container">
--
llms.txt-llms.txt-        get_version_info,
llms.txt-llms.txt-        get_parser_options,
llms.txt-llms.txt-        validate_json,
llms.txt:llms.txt:      } from './pkg/vexy_json_wasm.js';
llms.txt-llms.txt-
llms.txt-llms.txt-      let wasmReady = false;
llms.txt-llms.txt-
--
llms.txt-llms.txt-          // Display version info
llms.txt-llms.txt-          const versionInfo = JSON.parse(get_version_info());
llms.txt-llms.txt-          document.getElementById('version').innerHTML = `
llms.txt:llms.txt:                    <strong>vexy_json WASM</strong> v${versionInfo.version} - ${versionInfo.description}
llms.txt-llms.txt-                `;
llms.txt-llms.txt-          document.getElementById('version').className = 'version';
llms.txt-llms.txt-
--
llms.txt-llms.txt-  <head>
llms.txt-llms.txt-    <meta charset="UTF-8" />
llms.txt-llms.txt-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:llms.txt:    <title>vexy_json - Forgiving JSON Parser</title>
llms.txt-llms.txt-    <meta
llms.txt-llms.txt-      name="description"
llms.txt:llms.txt:      content="Interactive web tool for parsing forgiving JSON with vexy_json - supports comments, unquoted keys, trailing commas, and more."
llms.txt-llms.txt-    />
llms.txt-llms.txt-
llms.txt-llms.txt-    <!-- Favicon -->
--
llms.txt-llms.txt-    <div class="navbar bg-base-100 shadow-lg">
llms.txt-llms.txt-      <div class="container mx-auto">
llms.txt-llms.txt-        <div class="flex-1">
llms.txt:llms.txt:          <a href="index.html" class="btn btn-ghost text-xl">vexy_json</a>
llms.txt-llms.txt-        </div>
llms.txt-llms.txt-        <div class="flex-none">
llms.txt-llms.txt-          <ul class="menu menu-horizontal px-1">
llms.txt-llms.txt-            <li><a href="index.html">Docs</a></li>
llms.txt-llms.txt-            <li>
llms.txt:llms.txt:              <a href="https://github.com/twardoch/vexy_json" target="_blank"
llms.txt-llms.txt-                >GitHub</a
llms.txt-llms.txt-              >
llms.txt-llms.txt-            </li>
--
llms.txt-llms.txt-    <main class="container mx-auto px-4 py-8">
llms.txt-llms.txt-      <!-- Header -->
llms.txt-llms.txt-      <div class="text-center mb-8">
llms.txt:llms.txt:        <h1 class="text-4xl font-bold mb-4">vexy_json Parser</h1>
llms.txt-llms.txt-        <p class="text-lg text-base-content/70">
llms.txt-llms.txt-          A forgiving JSON parser that supports comments, unquoted keys,
llms.txt-llms.txt-          trailing commas, and more.
--
llms.txt-llms.txt-              >
llms.txt-llms.txt-{
llms.txt-llms.txt-  // You can use comments!
llms.txt:llms.txt:  name: "vexy_json",
llms.txt-llms.txt-  features: [
llms.txt-llms.txt-    'comments',
llms.txt-llms.txt-    'unquoted keys',
--
llms.txt-llms.txt-                class="tab-content bg-base-100 border-base-300 rounded-box p-6"
llms.txt-llms.txt-              >
llms.txt-llms.txt-                <pre class="text-sm"><code>{
llms.txt:llms.txt:  "name": "vexy_json",
llms.txt-llms.txt-  "version": "1.1.0",
llms.txt-llms.txt-  "features": ["forgiving", "fast", "rust"]
llms.txt-llms.txt-}</code></pre>
--
llms.txt-llms.txt-      <div class="grid grid-flow-col gap-4">
llms.txt-llms.txt-        <a href="index.html" class="link link-hover">Documentation</a>
llms.txt-llms.txt-        <a href="api.html" class="link link-hover">API Reference</a>
llms.txt:llms.txt:        <a href="https://github.com/twardoch/vexy_json" class="link link-hover"
llms.txt-llms.txt-          >Source Code</a
llms.txt-llms.txt-        >
llms.txt:llms.txt:        <a href="https://crates.io/crates/vexy_json" class="link link-hover"
llms.txt-llms.txt-          >crates.io</a
llms.txt-llms.txt-        >
llms.txt-llms.txt-      </div>
llms.txt-llms.txt-      <div>
llms.txt:llms.txt:        <p>vexy_json - A forgiving JSON parser. Built with Rust and WebAssembly.</p>
llms.txt-llms.txt-      </div>
llms.txt-llms.txt-    </footer>
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_comma_one.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_comma_one_tokens.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_comment_tokens.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_implicit_array.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_lookahead.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_test.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/debug_trailing_comma.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/parser_comparison.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/plugin_examples.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod tests;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/profile_parser.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/recursive_parser.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/simple.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/streaming_example.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_comment.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_comment_with_value.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_implicit_array.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_implicit_objects.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_inline_comment.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_number_types.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_single_brace.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_single_quote.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/test_unquoted.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/examples/trace_comment_parse.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```toml
llms.txt-llms.txt-[package]
llms.txt:llms.txt:name = "vexy_json-core-fuzz"
llms.txt-llms.txt-version = "0.0.0"
llms.txt-llms.txt-publish = false
llms.txt-llms.txt-edition = "2021"
--
llms.txt-llms.txt-libfuzzer-sys = "0.4"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json-core]
llms.txt-llms.txt-path = "../crates/core"
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:[dependencies.vexy_json]
llms.txt-llms.txt-path = ".."
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/comments.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/fuzz_target_1.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/json_structure.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/numbers.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/repair.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/streaming.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/strings.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/unicode.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/fuzz/fuzz_targets/unquoted_keys.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-    && rm -rf /var/lib/apt/lists/*
llms.txt-llms.txt-
llms.txt-llms.txt-# Copy the project source
llms.txt:llms.txt:COPY . $SRC/vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-# Set the working directory
llms.txt:llms.txt:WORKDIR $SRC/vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-# Copy the build script
llms.txt-llms.txt-COPY oss-fuzz/build.sh $SRC/build.sh
--
llms.txt-llms.txt-source $HOME/.cargo/env
llms.txt-llms.txt-
llms.txt-llms.txt-# Navigate to the project directory
llms.txt:llms.txt:cd $SRC/vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-# Build the project
llms.txt-llms.txt-cargo build --release
--
llms.txt-llms.txt-```yaml
llms.txt-llms.txt-# this_file: oss-fuzz/project.yaml
llms.txt-llms.txt-
llms.txt:llms.txt:homepage: "https://github.com/twardoch/pub/vexy_json"
llms.txt-llms.txt-language: rust
llms.txt-llms.txt-primary_contact: "adam@twardoch.com"
llms.txt-llms.txt-auto_ccs:
--
llms.txt-llms.txt-coverage_extra_args: "--target-dir=/tmp/coverage"
llms.txt-llms.txt-
llms.txt-llms.txt-# Additional configuration
llms.txt:llms.txt:main_repo: "https://github.com/twardoch/pub/vexy_json"
llms.txt-llms.txt-file_github_issue: true
llms.txt-llms.txt-```
llms.txt-llms.txt-
--
llms.txt-llms.txt-#!/bin/bash
llms.txt-llms.txt-# this_file: build-wasm.sh
llms.txt-llms.txt-
llms.txt:llms.txt:# WebAssembly Build Script for vexy_json
llms.txt-llms.txt-# Automated build script using wasm-pack with configurable dev/release modes
llms.txt-llms.txt-# Outputs to docs/pkg/ directory for web integration
llms.txt-llms.txt-
--
llms.txt-llms.txt-BLUE='\033[0;34m'
llms.txt-llms.txt-NC='\033[0m' # No Color
llms.txt-llms.txt-
llms.txt:llms.txt:echo -e "${BLUE}🔧 vexy_json WebAssembly Build Script${NC}"
llms.txt-llms.txt-echo "=================================================="
llms.txt-llms.txt-echo -e "Build mode: ${YELLOW}$BUILD_MODE${NC}"
llms.txt-llms.txt-echo -e "Output directory: ${YELLOW}$OUTPUT_DIR${NC}"
--
llms.txt-llms.txt-fi
llms.txt-llms.txt-
llms.txt-llms.txt-# Additional optimization with wasm-opt if available
llms.txt:llms.txt:if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" ] && command -v wasm-opt &>/dev/null; then
llms.txt-llms.txt-    echo -e "${BLUE}🔧 Optimizing WASM bundle with wasm-opt...${NC}"
llms.txt:llms.txt:    ORIGINAL_SIZE=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt:llms.txt:    wasm-opt -Oz "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" -o "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt"
llms.txt:llms.txt:    if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt" ]; then
llms.txt:llms.txt:        mv "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt" "$OUTPUT_DIR/vexy_json_wasm_bg.wasm"
llms.txt:llms.txt:        OPTIMIZED_SIZE=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt-llms.txt-        REDUCTION=$((ORIGINAL_SIZE - OPTIMIZED_SIZE))
llms.txt-llms.txt-        echo -e "${GREEN}✅ Additional optimization saved ${YELLOW}$REDUCTION bytes${NC}"
llms.txt-llms.txt-    fi
llms.txt-llms.txt-fi
llms.txt-llms.txt-
llms.txt-llms.txt-# Report bundle size
llms.txt:llms.txt:if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" ]; then
llms.txt:llms.txt:    WASM_SIZE=$(du -h "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" | cut -f1)
llms.txt-llms.txt-    echo -e "${GREEN}📦 Final WASM bundle size: ${YELLOW}$WASM_SIZE${NC}"
llms.txt-llms.txt-
llms.txt-llms.txt-    # Size warnings
llms.txt:llms.txt:    WASM_SIZE_BYTES=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt-llms.txt-    if [ "$WASM_SIZE_BYTES" -gt 1048576 ]; then # 1MB
llms.txt-llms.txt-        echo -e "${YELLOW}⚠️  Warning: WASM bundle is larger than 1MB${NC}"
llms.txt-llms.txt-        echo "   Consider optimizing for web deployment"
--
llms.txt-llms.txt-echo
llms.txt-llms.txt-echo -e "${BLUE}Example usage in HTML:${NC}"
llms.txt-llms.txt-echo "  <script type=\"module\">"
llms.txt:llms.txt:echo "    import init, { parse_json } from './pkg/vexy_json.js';"
llms.txt-llms.txt-echo "    await init();"
llms.txt-llms.txt-echo "    const result = parse_json('{\"test\": true}');"
llms.txt-llms.txt-echo "  </script>"
--
llms.txt-llms.txt-    # Generate a compressed code snapshot for LLM consumption
llms.txt-llms.txt-    /Library/Frameworks/Python.framework/Versions/3.12/bin/uvx codetoprompt --compress --output llms.txt --exclude "*.svg,.specstory,*.md,*.txt,ref,testdata,*.lock,target,benches" .
llms.txt-llms.txt-
llms.txt:llms.txt:    echo "Building the vexy_json project..."
llms.txt-llms.txt-    # Build the project in release mode for optimized binaries
llms.txt-llms.txt-    /Users/adam/.cargo/bin/cargo build --release
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-    echo "Build and verification complete."
llms.txt-llms.txt-    echo ""
llms.txt:llms.txt:    echo "Library built at: ./target/release/libvexy_json.rlib"
llms.txt:llms.txt:    echo "Documentation at: ./target/doc/vexy_json/index.html"
llms.txt-llms.txt-    echo ""
llms.txt:llms.txt:    echo "To use vexy_json in your project, add to Cargo.toml:"
llms.txt:llms.txt:    echo '  vexy_json = { path = "'$(pwd)'" }'
llms.txt-llms.txt-    echo ""
llms.txt-llms.txt-    echo "Example usage:"
llms.txt:llms.txt:    echo "  use vexy_json::parse;"
llms.txt-llms.txt-    echo "  let value = parse(\"'hello', 'world'\").unwrap();"
llms.txt-llms.txt-
llms.txt-llms.txt-} >build.log.txt 2>&1
--
llms.txt-llms.txt-echo "'a', 'b', 'c'" | /Users/adam/.cargo/bin/cargo run --example test_implicit_array 2>/dev/null | grep -A1 "'a'" || true
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/scripts/cross-browser-test.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-async function runBrowserTests((browserConfig, deviceConfig = null))
--
llms.txt-llms.txt-    local output_dir="$PROJECT_ROOT/target/$target/release"
llms.txt-llms.txt-    mkdir -p "$output_dir"
llms.txt-llms.txt-    
llms.txt:llms.txt:    if $build_cmd build --release --bin vexy_json --target "$target"; then
llms.txt-llms.txt-        # Copy binary to build directory
llms.txt:llms.txt:        local binary_name="vexy_json"
llms.txt-llms.txt-        if [[ "$target" == *"windows"* ]]; then
llms.txt:llms.txt:            binary_name="vexy_json.exe"
llms.txt-llms.txt-        fi
llms.txt-llms.txt-        
llms.txt:llms.txt:        local output_name="vexy_json-$VERSION-$target"
llms.txt-llms.txt-        if [[ "$target" == *"windows"* ]]; then
llms.txt-llms.txt-            output_name="$output_name.exe"
llms.txt-llms.txt-        fi
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Create archives
llms.txt-llms.txt-    cd "$BUILD_DIR"
llms.txt:llms.txt:    tar -czf "vexy_json-$VERSION-wasm-web.tar.gz" wasm-web/
llms.txt:llms.txt:    tar -czf "vexy_json-$VERSION-wasm-nodejs.tar.gz" wasm-nodejs/
llms.txt-llms.txt-    cd "$PROJECT_ROOT"
llms.txt-llms.txt-    
llms.txt-llms.txt-    return 0
--
llms.txt-llms.txt-create_universal_macos() {
llms.txt-llms.txt-    log "Creating universal macOS binary..."
llms.txt-llms.txt-    
llms.txt:llms.txt:    local intel_binary="$BUILD_DIR/vexy_json-$VERSION-x86_64-apple-darwin"
llms.txt:llms.txt:    local arm_binary="$BUILD_DIR/vexy_json-$VERSION-aarch64-apple-darwin"
llms.txt:llms.txt:    local universal_binary="$BUILD_DIR/vexy_json-$VERSION-universal-apple-darwin"
llms.txt-llms.txt-    
llms.txt-llms.txt-    if [[ -f "$intel_binary" && -f "$arm_binary" ]]; then
llms.txt-llms.txt-        if command -v lipo &> /dev/null; then
--
llms.txt-llms.txt-    cd "$BUILD_DIR"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Create individual archives for each binary
llms.txt:llms.txt:    for file in vexy_json-$VERSION-*; do
llms.txt-llms.txt-        if [[ -f "$file" && "$file" != *.tar.gz && "$file" != *.zip ]]; then
llms.txt-llms.txt-            local archive_name="${file}.tar.gz"
llms.txt-llms.txt-            tar -czf "$archive_name" "$file"
--
llms.txt-llms.txt-    done
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Create a comprehensive archive with all binaries
llms.txt:llms.txt:    tar -czf "vexy_json-$VERSION-all-platforms.tar.gz" vexy_json-$VERSION-*
llms.txt:llms.txt:    success "Created comprehensive archive: vexy_json-$VERSION-all-platforms.tar.gz"
llms.txt-llms.txt-    
llms.txt-llms.txt-    cd "$PROJECT_ROOT"
llms.txt-llms.txt-}
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Generate SHA256 checksums
llms.txt-llms.txt-    if command -v sha256sum &> /dev/null; then
llms.txt:llms.txt:        sha256sum vexy_json-$VERSION-* > checksums.sha256
llms.txt-llms.txt-    elif command -v shasum &> /dev/null; then
llms.txt:llms.txt:        shasum -a 256 vexy_json-$VERSION-* > checksums.sha256
llms.txt-llms.txt-    else
llms.txt-llms.txt-        warning "No SHA256 utility found, skipping checksum generation"
llms.txt-llms.txt-        cd "$PROJECT_ROOT"
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    if [[ -d "$BUILD_DIR" ]]; then
llms.txt-llms.txt-        echo -e "${BLUE}Generated files:${NC}"
llms.txt:llms.txt:        ls -la "$BUILD_DIR" | grep -E "(vexy_json-|checksums)" | while read -r line; do
llms.txt-llms.txt-            echo "  $line"
llms.txt-llms.txt-        done
llms.txt-llms.txt-    fi
--
llms.txt-llms.txt-PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
llms.txt-llms.txt-VERSION="${VERSION:-$(grep '^version' "$PROJECT_ROOT/Cargo.toml" | head -1 | cut -d'"' -f2)}"
llms.txt-llms.txt-BUILD_DIR="$PROJECT_ROOT/target/macos-installer"
llms.txt:llms.txt:APP_NAME="vexy_json"
llms.txt:llms.txt:BUNDLE_ID="com.twardoch.vexy_json"
llms.txt:llms.txt:DMG_NAME="vexy_json-$VERSION-macos.dmg"
llms.txt-llms.txt-
llms.txt-llms.txt-# Utility functions
llms.txt-llms.txt-log() {
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Build for Intel
llms.txt-llms.txt-    log "Building for Intel (x86_64)..."
llms.txt:llms.txt:    cargo build --release --bin vexy_json --target x86_64-apple-darwin
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Build for Apple Silicon
llms.txt-llms.txt-    log "Building for Apple Silicon (aarch64)..."
llms.txt:llms.txt:    cargo build --release --bin vexy_json --target aarch64-apple-darwin
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Create universal binary
llms.txt-llms.txt-    log "Creating universal binary..."
llms.txt-llms.txt-    mkdir -p "$PROJECT_ROOT/target/release"
llms.txt:llms.txt:    lipo -create -output "$PROJECT_ROOT/target/release/vexy_json" \
llms.txt:llms.txt:        "$PROJECT_ROOT/target/x86_64-apple-darwin/release/vexy_json" \
llms.txt:llms.txt:        "$PROJECT_ROOT/target/aarch64-apple-darwin/release/vexy_json"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Verify the universal binary
llms.txt:llms.txt:    if lipo -info "$PROJECT_ROOT/target/release/vexy_json" | grep -q "x86_64 arm64"; then
llms.txt-llms.txt-        success "Universal binary created successfully"
llms.txt-llms.txt-    else
llms.txt-llms.txt-        error "Failed to create universal binary"
--
llms.txt-llms.txt-    mkdir -p "$pkg_root/usr/local/bin"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Copy the universal binary
llms.txt:llms.txt:    cp "$PROJECT_ROOT/target/release/vexy_json" "$pkg_root/usr/local/bin/"
llms.txt:llms.txt:    chmod +x "$pkg_root/usr/local/bin/vexy_json"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Create scripts directory for pre/post install scripts
llms.txt-llms.txt-    mkdir -p "$BUILD_DIR/scripts"
--
llms.txt-llms.txt-done
llms.txt-llms.txt-
llms.txt-llms.txt-# Verify installation
llms.txt:llms.txt:if command -v vexy_json &> /dev/null; then
llms.txt-llms.txt-    echo "Vexy JSON installed successfully!"
llms.txt:llms.txt:    echo "Version: $(vexy_json --version 2>/dev/null || echo 'Unknown')"
llms.txt:llms.txt:    echo "You may need to restart your terminal or run 'source ~/.bashrc' (or similar) to use vexy_json."
llms.txt-llms.txt-else
llms.txt:llms.txt:    echo "Installation completed, but vexy_json may not be in your PATH."
llms.txt-llms.txt-    echo "Try restarting your terminal or adding /usr/local/bin to your PATH."
llms.txt-llms.txt-fi
llms.txt-llms.txt-
--
llms.txt-llms.txt-    cat > "$dmg_temp_dir/README.txt" << EOF
llms.txt-llms.txt-VEXY_JSON v$VERSION - High-Performance JSON Parser
llms.txt-llms.txt-
llms.txt:llms.txt:This installer will install the vexy_json command-line tool to /usr/local/bin.
llms.txt-llms.txt-
llms.txt-llms.txt-Installation Instructions:
llms.txt:llms.txt:1. Double-click on vexy_json.pkg to run the installer
llms.txt-llms.txt-2. Follow the installation prompts
llms.txt-llms.txt-3. Restart your terminal or run 'source ~/.bashrc' to update your PATH
llms.txt-llms.txt-
llms.txt:llms.txt:After installation, you can use vexy_json from the command line:
llms.txt:llms.txt:  echo '{"key": "value"}' | vexy_json
llms.txt:llms.txt:  vexy_json --help
llms.txt-llms.txt-
llms.txt-llms.txt-Features:
llms.txt-llms.txt-• SIMD-accelerated parsing (2-3x faster)
--
llms.txt-llms.txt-• Enhanced error recovery with suggestions
llms.txt-llms.txt-
llms.txt-llms.txt-For more information:
llms.txt:llms.txt:  Website: https://github.com/twardoch/vexy_json
llms.txt:llms.txt:  Documentation: https://twardoch.github.io/vexy_json/
llms.txt-llms.txt-
llms.txt-llms.txt-License: MIT OR Apache-2.0
llms.txt-llms.txt-EOF
--
llms.txt-llms.txt-        log "DMG size: $dmg_size"
llms.txt-llms.txt-        
llms.txt-llms.txt-        # Verify DMG can be mounted
llms.txt:llms.txt:        if hdiutil attach "$final_dmg" -readonly -nobrowse -mountpoint "/tmp/vexy_json-verify-$$"; then
llms.txt-llms.txt-            log "DMG verification: mountable ✓"
llms.txt:llms.txt:            hdiutil detach "/tmp/vexy_json-verify-$$" || true
llms.txt-llms.txt-        else
llms.txt-llms.txt-            warning "DMG verification failed - may not be mountable"
llms.txt-llms.txt-        fi
--
llms.txt-llms.txt-    log "Creating ZIP alternative..."
llms.txt-llms.txt-    
llms.txt-llms.txt-    local zip_dir="$BUILD_DIR/zip-package"
llms.txt:llms.txt:    local zip_file="$PROJECT_ROOT/vexy_json-$VERSION-macos.zip"
llms.txt-llms.txt-    
llms.txt-llms.txt-    mkdir -p "$zip_dir"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Copy binary
llms.txt:llms.txt:    cp "$PROJECT_ROOT/target/release/vexy_json" "$zip_dir/"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Create installation script
llms.txt-llms.txt-    cat > "$zip_dir/install.sh" << 'EOF'
--
llms.txt-llms.txt-# Check if we have write permissions
llms.txt-llms.txt-if [[ ! -w "/usr/local/bin" ]]; then
llms.txt-llms.txt-    echo "Note: You may be prompted for your password to install to /usr/local/bin"
llms.txt:llms.txt:    sudo cp vexy_json /usr/local/bin/
llms.txt:llms.txt:    sudo chmod +x /usr/local/bin/vexy_json
llms.txt-llms.txt-else
llms.txt:llms.txt:    cp vexy_json /usr/local/bin/
llms.txt:llms.txt:    chmod +x /usr/local/bin/vexy_json
llms.txt-llms.txt-fi
llms.txt-llms.txt-
llms.txt-llms.txt-echo "Vexy JSON installed successfully!"
llms.txt:llms.txt:echo "Try: vexy_json --help"
llms.txt-llms.txt-EOF
llms.txt-llms.txt-    
llms.txt-llms.txt-    chmod +x "$zip_dir/install.sh"
--
llms.txt-llms.txt-    cat > "$zip_dir/README.txt" << EOF
llms.txt-llms.txt-VEXY_JSON v$VERSION - Simple ZIP Installation
llms.txt-llms.txt-
llms.txt:llms.txt:This is a simple ZIP package containing the vexy_json binary.
llms.txt-llms.txt-
llms.txt-llms.txt-Installation:
llms.txt-llms.txt-1. Run: ./install.sh
llms.txt-llms.txt-   OR
llms.txt:llms.txt:2. Manually copy 'vexy_json' to a directory in your PATH
llms.txt-llms.txt-
llms.txt-llms.txt-Usage:
llms.txt:llms.txt:  echo '{"key": "value"}' | vexy_json
llms.txt:llms.txt:  vexy_json --help
llms.txt-llms.txt-
llms.txt-llms.txt-For the full installer experience, download the .dmg file instead.
llms.txt-llms.txt-EOF
--
llms.txt-llms.txt-    log "Verifying installation components..."
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Check if binary works
llms.txt:llms.txt:    if "$PROJECT_ROOT/target/release/vexy_json" --version &> /dev/null; then
llms.txt-llms.txt-        success "Binary verification: working ✓"
llms.txt-llms.txt-    else
llms.txt-llms.txt-        error "Binary verification failed"
--
llms.txt-llms.txt-    fi
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Check package contents
llms.txt:llms.txt:    if pkgutil --payload-files "$BUILD_DIR/$APP_NAME.pkg" | grep -q "usr/local/bin/vexy_json"; then
llms.txt-llms.txt-        success "Package verification: contains binary ✓"
llms.txt-llms.txt-    else
llms.txt-llms.txt-        error "Package verification failed"
--
llms.txt-llms.txt-    echo
llms.txt-llms.txt-    echo -e "${BLUE}Generated files:${NC}"
llms.txt-llms.txt-    echo "  📦 DMG Installer: $DMG_NAME"
llms.txt:llms.txt:    if [[ -f "$PROJECT_ROOT/vexy_json-$VERSION-macos.zip" ]]; then
llms.txt:llms.txt:        echo "  📁 ZIP Package: vexy_json-$VERSION-macos.zip"
llms.txt-llms.txt-    fi
llms.txt-llms.txt-    echo "  🔧 PKG Installer: $BUILD_DIR/$APP_NAME.pkg"
llms.txt:llms.txt:    echo "  🔨 Universal Binary: $PROJECT_ROOT/target/release/vexy_json"
llms.txt-llms.txt-    echo
llms.txt-llms.txt-    
llms.txt-llms.txt-    echo -e "${BLUE}Installation instructions for users:${NC}"
llms.txt-llms.txt-    echo "  1. Download and open $DMG_NAME"
llms.txt:llms.txt:    echo "  2. Double-click vexy_json.pkg to install"
llms.txt-llms.txt-    echo "  3. Follow the installer prompts"
llms.txt-llms.txt-    echo "  4. Restart terminal or run 'source ~/.bashrc'"
llms.txt-llms.txt-    echo
llms.txt-llms.txt-    
llms.txt-llms.txt-    echo -e "${BLUE}Binary details:${NC}"
llms.txt:llms.txt:    lipo -info "$PROJECT_ROOT/target/release/vexy_json" | sed 's/^/  /'
llms.txt-llms.txt-    echo
llms.txt-llms.txt-    
llms.txt-llms.txt-    echo -e "${BLUE}Next steps:${NC}"
--
llms.txt-llms.txt-
llms.txt-llms.txt-```json
llms.txt-llms.txt-{
llms.txt:llms.txt:    "name": "vexy_json-testing-scripts",
llms.txt-llms.txt-    "version": "1.0.0",
llms.txt-llms.txt-    "lockfileVersion": 3,
llms.txt-llms.txt-    "requires": true,
--
llms.txt-llms.txt-```bash
llms.txt-llms.txt-#!/bin/bash
llms.txt-llms.txt-# this_file: scripts/package-macos.sh
llms.txt:llms.txt:# Package vexy_json for macOS as a .pkg inside a .dmg
llms.txt-llms.txt-
llms.txt-llms.txt-set -e
llms.txt-llms.txt-
llms.txt-llms.txt-# Configuration
llms.txt:llms.txt:BINARY_NAME="vexy_json"
llms.txt-llms.txt-VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
llms.txt:llms.txt:BUNDLE_ID="com.twardoch.vexy_json"
llms.txt-llms.txt-INSTALL_LOCATION="/usr/local/bin"
llms.txt-llms.txt-BUILD_DIR="target/macos-package"
llms.txt-llms.txt-PKG_NAME="${BINARY_NAME}-${VERSION}.pkg"
llms.txt-llms.txt-DMG_NAME="${BINARY_NAME}-${VERSION}-macos.dmg"
llms.txt-llms.txt-
llms.txt:llms.txt:echo "Building vexy_json v${VERSION} for macOS..."
llms.txt-llms.txt-
llms.txt-llms.txt-# Clean and create build directory
llms.txt-llms.txt-rm -rf "${BUILD_DIR}"
--
llms.txt-llms.txt-# Create postinstall script to set permissions
llms.txt-llms.txt-cat > "${BUILD_DIR}/scripts/postinstall" << 'EOF'
llms.txt-llms.txt-#!/bin/bash
llms.txt:llms.txt:chmod 755 /usr/local/bin/vexy_json
llms.txt-llms.txt-exit 0
llms.txt-llms.txt-EOF
llms.txt-llms.txt-chmod +x "${BUILD_DIR}/scripts/postinstall"
--
llms.txt-llms.txt-cat > "${BUILD_DIR}/distribution.xml" << EOF
llms.txt-llms.txt-<?xml version="1.0" encoding="UTF-8"?>
llms.txt-llms.txt-<installer-gui-script minSpecVersion="1">
llms.txt:llms.txt:    <title>vexy_json ${VERSION}</title>
llms.txt-llms.txt-    <organization>com.twardoch</organization>
llms.txt-llms.txt-    <domains enable_anywhere="true"/>
llms.txt-llms.txt-    <installation-check script="pm_install_check();"/>
--
llms.txt-llms.txt-    function pm_install_check() {
llms.txt-llms.txt-        if(system.compareVersions(system.version.ProductVersion,'10.10') &lt; 0) {
llms.txt-llms.txt-            my.result.title = 'Failure';
llms.txt:llms.txt:            my.result.message = 'You need at least macOS 10.10 to install vexy_json.';
llms.txt-llms.txt-            my.result.type = 'Fatal';
llms.txt-llms.txt-            return false;
llms.txt-llms.txt-        }
--
llms.txt-llms.txt-
llms.txt-llms.txt-# Create README for DMG
llms.txt-llms.txt-cat > "${BUILD_DIR}/dmg/README.txt" << EOF
llms.txt:llms.txt:vexy_json ${VERSION} for macOS
llms.txt-llms.txt-========================
llms.txt-llms.txt-
llms.txt-llms.txt-A forgiving JSON parser - Rust port of jsonic
llms.txt-llms.txt-
llms.txt-llms.txt-Installation:
llms.txt-llms.txt-1. Double-click on ${PKG_NAME} to install
llms.txt:llms.txt:2. The 'vexy_json' command will be installed to /usr/local/bin
llms.txt-llms.txt-3. You may need to restart your terminal after installation
llms.txt-llms.txt-
llms.txt-llms.txt-Usage:
llms.txt:llms.txt:  echo '{"foo": "bar",}' | vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-For more information, visit:
llms.txt:llms.txt:https://github.com/twardoch/vexy_json
llms.txt-llms.txt-
llms.txt-llms.txt-EOF
llms.txt-llms.txt-
llms.txt-llms.txt-# Create the DMG
llms.txt-llms.txt-echo "Creating DMG..."
llms.txt:llms.txt:hdiutil create -volname "vexy_json ${VERSION}" \
llms.txt-llms.txt-    -srcfolder "${BUILD_DIR}/dmg" \
llms.txt-llms.txt-    -ov -format UDZO \
llms.txt-llms.txt-    "${DMG_NAME}"
--
llms.txt-llms.txt-
llms.txt-llms.txt-echo "✅ Successfully created ${DMG_NAME}"
llms.txt-llms.txt-echo "   Package contains ${PKG_NAME} installer"
llms.txt:llms.txt:echo "   Will install vexy_json to ${INSTALL_LOCATION}"
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt-llms.txt-Relative File Path: scripts/package.json
llms.txt-llms.txt-
llms.txt-llms.txt-```json
llms.txt-llms.txt-{
llms.txt:llms.txt:    "name": "vexy_json-testing-scripts",
llms.txt-llms.txt-    "version": "1.0.0",
llms.txt:llms.txt:    "description": "Testing and monitoring scripts for vexy_json project",
llms.txt-llms.txt-    "main": "cross-browser-test.js",
llms.txt-llms.txt-... (file content truncated to first 5 lines)
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/scripts/performance-monitor.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-class VexyJsonPerformanceMonitor {
--
llms.txt-llms.txt-    log_info "GitHub Actions release workflow triggered!"
llms.txt-llms.txt-    echo
llms.txt-llms.txt-    echo "You can monitor the release progress at:"
llms.txt:llms.txt:    echo "https://github.com/twardoch/vexy_json/actions"
llms.txt-llms.txt-    echo
llms.txt-llms.txt-    echo "Or watch it here:"
llms.txt-llms.txt-    
--
llms.txt-llms.txt-    RUN_ID=$(gh run list --workflow=release.yml --limit 1 --json databaseId --jq '.[0].databaseId')
llms.txt-llms.txt-    
llms.txt-llms.txt-    if [ -n "$RUN_ID" ]; then
llms.txt:llms.txt:        echo "Workflow run: https://github.com/twardoch/vexy_json/actions/runs/$RUN_ID"
llms.txt-llms.txt-        echo
llms.txt-llms.txt-        echo "Watching workflow progress..."
llms.txt-llms.txt-        gh run watch "$RUN_ID"
--
llms.txt-llms.txt-    run_cmd "mkdir -p '$BUILD_DIR'" "Create build directory"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Build release binary
llms.txt:llms.txt:    run_cmd "cargo build --release --bin vexy_json" "Build release CLI binary"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Build library
llms.txt-llms.txt-    run_cmd "cargo build --release --lib" "Build release library"
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Copy artifacts
llms.txt-llms.txt-    if [ "$DRY_RUN" = false ]; then
llms.txt:llms.txt:        if [[ -f "target/release/vexy_json" ]]; then
llms.txt:llms.txt:            cp "target/release/vexy_json" "$BUILD_DIR/vexy_json-$VERSION-$(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]')"
llms.txt-llms.txt-        else
llms.txt:llms.txt:            warning "Release binary not found at target/release/vexy_json"
llms.txt-llms.txt-        fi
llms.txt-llms.txt-    fi
llms.txt-llms.txt-    
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    log "Building macOS installer..."
llms.txt-llms.txt-    
llms.txt:llms.txt:    local app_name="vexy_json"
llms.txt-llms.txt-    local installer_dir="$BUILD_DIR/macos-installer"
llms.txt:llms.txt:    local dmg_name="vexy_json-$VERSION-macos.dmg"
llms.txt-llms.txt-    
llms.txt-llms.txt-    run_cmd "mkdir -p '$installer_dir/pkg-root/usr/local/bin'" "Create installer structure"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Copy binary
llms.txt-llms.txt-    if [ "$DRY_RUN" = false ]; then
llms.txt:llms.txt:        cp "target/release/vexy_json" "$installer_dir/pkg-root/usr/local/bin/"
llms.txt-llms.txt-    fi
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Create package
llms.txt:llms.txt:    run_cmd "pkgbuild --root '$installer_dir/pkg-root' --identifier 'com.twardoch.vexy_json' --version '$VERSION' --install-location '/' '$installer_dir/$app_name.pkg'" "Create pkg installer"
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Create DMG
llms.txt-llms.txt-    local dmg_temp_dir="$installer_dir/dmg-temp"
--
llms.txt-llms.txt-        cat > "$dmg_temp_dir/README.txt" << EOF
llms.txt-llms.txt-VEXY_JSON v$VERSION
llms.txt-llms.txt-
llms.txt:llms.txt:This package will install the vexy_json command-line tool to /usr/local/bin.
llms.txt-llms.txt-
llms.txt:llms.txt:After installation, you can use vexy_json from the command line:
llms.txt:llms.txt:  echo '{"key": "value"}' | vexy_json
llms.txt-llms.txt-
llms.txt:llms.txt:For more information, visit: https://github.com/twardoch/vexy_json
llms.txt-llms.txt-EOF
llms.txt-llms.txt-    fi
llms.txt-llms.txt-    
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Build static binary for Linux
llms.txt-llms.txt-    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
llms.txt:llms.txt:        run_cmd "cargo build --release --target x86_64-unknown-linux-musl --bin vexy_json" "Build static Linux binary"
llms.txt-llms.txt-        
llms.txt-llms.txt-        if [ "$DRY_RUN" = false ]; then
llms.txt:llms.txt:            cp "target/x86_64-unknown-linux-musl/release/vexy_json" "$BUILD_DIR/vexy_json-$VERSION-x86_64-linux-musl"
llms.txt-llms.txt-        fi
llms.txt-llms.txt-    else
llms.txt-llms.txt-        warning "Skipping Linux builds (not on Linux)"
--
llms.txt-llms.txt-create_release_archive() {
llms.txt-llms.txt-    log "Creating release archives..."
llms.txt-llms.txt-    
llms.txt:llms.txt:    local archive_dir="$BUILD_DIR/vexy_json-$VERSION"
llms.txt-llms.txt-    run_cmd "mkdir -p '$archive_dir'" "Create archive directory"
llms.txt-llms.txt-    
llms.txt-llms.txt-    if [ "$DRY_RUN" = false ]; then
--
llms.txt-llms.txt-        done
llms.txt-llms.txt-        
llms.txt-llms.txt-        # Copy built artifacts
llms.txt:llms.txt:        if [[ -f "target/release/vexy_json" ]]; then
llms.txt:llms.txt:            cp "target/release/vexy_json" "$archive_dir/" || warning "Failed to copy binary"
llms.txt-llms.txt-        else
llms.txt-llms.txt-            warning "No release binary found to include in archive"
llms.txt-llms.txt-        fi
llms.txt-llms.txt-        
llms.txt-llms.txt-        # Create source archive
llms.txt:llms.txt:        git archive --format=tar.gz --prefix="vexy_json-$VERSION-src/" HEAD > "$BUILD_DIR/vexy_json-$VERSION-src.tar.gz" || {
llms.txt-llms.txt-            warning "Failed to create source archive"
llms.txt-llms.txt-        }
llms.txt-llms.txt-        
llms.txt-llms.txt-        # Create binary archive if we have files
llms.txt-llms.txt-        if [[ -d "$archive_dir" ]] && [[ -n $(ls -A "$archive_dir") ]]; then
llms.txt-llms.txt-            cd "$BUILD_DIR"
llms.txt:llms.txt:            tar -czf "vexy_json-$VERSION-$(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]').tar.gz" "vexy_json-$VERSION" || {
llms.txt-llms.txt-                warning "Failed to create binary archive"
llms.txt-llms.txt-            }
llms.txt-llms.txt-            cd "$PROJECT_ROOT"
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    if ! command -v gh &> /dev/null; then
llms.txt-llms.txt-        warning "GitHub CLI not found, skipping automated release creation"
llms.txt:llms.txt:        info "Manually create release at: https://github.com/twardoch/vexy_json/releases/new?tag=v$VERSION"
llms.txt-llms.txt-        return 0
llms.txt-llms.txt-    fi
llms.txt-llms.txt-    
--
llms.txt-llms.txt-## 📦 Installation
llms.txt-llms.txt-
llms.txt-llms.txt-```bash
llms.txt:llms.txt:cargo install vexy_json --version 2.0.0
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt-llms.txt-Or download pre-built binaries from the assets below.
llms.txt-llms.txt-
llms.txt-llms.txt----
llms.txt-llms.txt-
llms.txt:llms.txt:**Full Changelog**: https://github.com/twardoch/vexy_json/compare/v1.5.27...v2.0.0
llms.txt-llms.txt-EOF
llms.txt-llms.txt-    fi
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Collect assets
llms.txt-llms.txt-    local assets=()
llms.txt:llms.txt:    if [[ -f "$BUILD_DIR/vexy_json-$VERSION-macos.dmg" ]]; then
llms.txt:llms.txt:        assets+=("$BUILD_DIR/vexy_json-$VERSION-macos.dmg")
llms.txt-llms.txt-    fi
llms.txt-llms.txt-    
llms.txt-llms.txt-    # Find all tar.gz files
--
llms.txt-llms.txt-    
llms.txt-llms.txt-    warning "Crates.io publishing requires manual intervention"
llms.txt-llms.txt-    info "Run the following commands to publish:"
llms.txt:llms.txt:    info "  cargo publish -p vexy_json-test-utils"
llms.txt:llms.txt:    info "  cargo publish -p vexy_json-core"
llms.txt:llms.txt:    info "  cargo publish -p vexy_json-serde"
llms.txt:llms.txt:    info "  cargo publish -p vexy_json-cli"
llms.txt:llms.txt:    info "  cargo publish -p vexy_json-wasm"
llms.txt:llms.txt:    info "  cargo publish -p vexy_json-c-api"
llms.txt:llms.txt:    info "  cargo publish -p vexy_json"
llms.txt-llms.txt-    
llms.txt-llms.txt-    if [ "$DRY_RUN" = false ]; then
llms.txt-llms.txt-        read -p "Publish to crates.io now? (y/N): " -n 1 -r
llms.txt-llms.txt-        echo
llms.txt-llms.txt-        if [[ $REPLY =~ ^[Yy]$ ]]; then
llms.txt-llms.txt-            # Publish in dependency order
llms.txt:llms.txt:            run_cmd "cargo publish -p vexy_json-test-utils" "Publish vexy_json-test-utils"
llms.txt-llms.txt-            sleep 10  # Wait for crates.io to process
llms.txt:llms.txt:            run_cmd "cargo publish -p vexy_json-core" "Publish vexy_json-core"
llms.txt-llms.txt-            sleep 10
llms.txt:llms.txt:            run_cmd "cargo publish -p vexy_json-serde" "Publish vexy_json-serde"
llms.txt-llms.txt-            sleep 10
llms.txt:llms.txt:            run_cmd "cargo publish -p vexy_json-cli" "Publish vexy_json-cli"
llms.txt-llms.txt-            sleep 10
llms.txt:llms.txt:            run_cmd "cargo publish -p vexy_json-wasm" "Publish vexy_json-wasm"
llms.txt-llms.txt-            sleep 10
llms.txt:llms.txt:            run_cmd "cargo publish -p vexy_json-c-api" "Publish vexy_json-c-api"
llms.txt-llms.txt-            sleep 10
llms.txt:llms.txt:            run_cmd "cargo publish -p vexy_json" "Publish main vexy_json crate"
llms.txt-llms.txt-            
llms.txt-llms.txt-            success "All crates published to crates.io"
llms.txt-llms.txt-        fi
--
llms.txt-llms.txt-    echo -e "${BLUE}Release artifacts created in: $BUILD_DIR${NC}"
llms.txt-llms.txt-    echo -e "${BLUE}Git tag created and pushed: v$VERSION${NC}"
llms.txt-llms.txt-    echo -e "${BLUE}Next steps:${NC}"
llms.txt:llms.txt:    echo "  1. Verify GitHub release: https://github.com/twardoch/vexy_json/releases"
llms.txt-llms.txt-    echo "  2. Update documentation websites"
llms.txt-llms.txt-    echo "  3. Announce the release"
llms.txt-llms.txt-    echo
--
llms.txt-llms.txt-
llms.txt-llms.txt-# Update workspace dependencies
llms.txt-llms.txt-echo "Updating workspace dependencies..."
llms.txt:llms.txt:update_file "Cargo.toml" 'vexy_json-core = { version = ".*"' "s/vexy_json-core = { version = \".*\"/vexy_json-core = { version = \"$VERSION\"/"
llms.txt:llms.txt:update_file "Cargo.toml" 'vexy_json = { version = ".*"' "s/vexy_json = { version = \".*\"/vexy_json = { version = \"$VERSION\"/"
llms.txt-llms.txt-
llms.txt-llms.txt-# Update Python bindings
llms.txt-llms.txt-echo "Updating Python bindings..."
--
llms.txt-llms.txt-
llms.txt-llms.txt-# Update Homebrew formula (only the version, not the URL)
llms.txt-llms.txt-echo "Updating Homebrew formula..."
llms.txt:llms.txt:if [ -f "Formula/vexy_json.rb" ]; then
llms.txt-llms.txt-    # Only update if this looks like a release version (not -dev)
llms.txt-llms.txt-    if [[ ! "$VERSION" =~ -dev$ ]]; then
llms.txt:llms.txt:        update_file "Formula/vexy_json.rb" 'version ".*"' "s/version \".*\"/version \"$VERSION\"/"
llms.txt-llms.txt-        # Note: The URL in the formula should be updated during release
llms.txt-llms.txt-    else
llms.txt-llms.txt-        echo -e "${YELLOW}⚠${NC} Skipping Homebrew formula update for dev version"
--
llms.txt-llms.txt-echo "..."
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/scripts/verify_features.js
llms.txt-llms.txt-# Language: javascript
llms.txt-llms.txt-
llms.txt-llms.txt-function runTest((testCase))
--
llms.txt-llms.txt-async function runAllTests(())
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/debug_comment_line_endings.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/debug_number.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_dot_numbers.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_full_parse.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_implicit.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_parse.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_point_zero.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_positive_numbers.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_rust_parse.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_strict_comment.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_trailing_decimal.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/trace_parse.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/lib.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/basic_tests.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comma_handling.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comment_handling.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/error_handling.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/feature_tests.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/forgiving_features.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/jsonic_advanced_features.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod complex_structures;
--
llms.txt-llms.txt-mod unicode_tests;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/jsonic_compat.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/jsonic_comprehensive_tests.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod basic_parsing;
--
llms.txt-llms.txt-mod error_handling;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/jsonic_real_world_scenarios.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-mod configuration_files;
--
llms.txt-llms.txt-mod performance_scenarios;
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/lexer_tests.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/lib_integration.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/newline_as_comma.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/number_formats.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
--
llms.txt-llms.txt-
llms.txt-llms.txt-```
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/property_tests.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-struct ArbitraryJsonValue {
llms.txt-llms.txt-}
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/string_handling.rs
llms.txt-llms.txt-# Language: rust
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt-llms.txt-
llms.txt:llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/supported_jsonic.rs
llms.txt-llms.txt-# Language: rust
llms.txt---
llms.txt-crates/c-api/examples/cpp_example.cpp-/**
llms.txt-crates/c-api/examples/cpp_example.cpp- * @file cpp_example.cpp
llms.txt:crates/c-api/examples/cpp_example.cpp: * @brief Example usage of the vexy_json C++ header-only wrapper
llms.txt-crates/c-api/examples/cpp_example.cpp- */
llms.txt-crates/c-api/examples/cpp_example.cpp-
llms.txt-crates/c-api/examples/cpp_example.cpp-#include <iostream>
llms.txt-crates/c-api/examples/cpp_example.cpp-#include <string>
llms.txt:crates/c-api/examples/cpp_example.cpp:#include "../include/vexy_json.hpp"
llms.txt-crates/c-api/examples/cpp_example.cpp-
llms.txt-crates/c-api/examples/cpp_example.cpp-int main() {
llms.txt-crates/c-api/examples/cpp_example.cpp-    // Example 1: Basic parsing with default options
llms.txt-crates/c-api/examples/cpp_example.cpp-    try {
llms.txt:crates/c-api/examples/cpp_example.cpp:        std::string json = vexy_json::parse(R"({"name": "John", "age": 30})");
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cout << "Example 1 - Basic parsing:\n" << json << "\n\n";
llms.txt:crates/c-api/examples/cpp_example.cpp:    } catch (const vexy_json::ParseError& e) {
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cerr << "Parse error: " << e.what() << "\n";
llms.txt-crates/c-api/examples/cpp_example.cpp-    }
llms.txt-crates/c-api/examples/cpp_example.cpp-    
--
llms.txt-crates/c-api/examples/cpp_example.cpp-            trailing: "comma",
llms.txt-crates/c-api/examples/cpp_example.cpp-        })";
llms.txt-crates/c-api/examples/cpp_example.cpp-        
llms.txt:crates/c-api/examples/cpp_example.cpp:        auto options = vexy_json::ParserOptions()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .allowComments()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .allowUnquotedKeys()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .allowSingleQuotes()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .allowTrailingCommas();
llms.txt-crates/c-api/examples/cpp_example.cpp-            
llms.txt:crates/c-api/examples/cpp_example.cpp:        std::string result = vexy_json::parse(forgiving_json, options);
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cout << "Example 2 - Forgiving JSON parsing:\n" << result << "\n\n";
llms.txt:crates/c-api/examples/cpp_example.cpp:    } catch (const vexy_json::ParseError& e) {
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cerr << "Parse error: " << e.what() << "\n";
llms.txt-crates/c-api/examples/cpp_example.cpp-    }
llms.txt-crates/c-api/examples/cpp_example.cpp-    
llms.txt-crates/c-api/examples/cpp_example.cpp-    // Example 3: Using a parser instance for multiple parses
llms.txt-crates/c-api/examples/cpp_example.cpp-    try {
llms.txt:crates/c-api/examples/cpp_example.cpp:        auto options = vexy_json::ParserOptions()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .allowComments()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .allowTrailingCommas()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .enableRepair();
llms.txt-crates/c-api/examples/cpp_example.cpp-            
llms.txt:crates/c-api/examples/cpp_example.cpp:        vexy_json::Parser parser(options);
llms.txt-crates/c-api/examples/cpp_example.cpp-        
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::vector<std::string> inputs = {
llms.txt-crates/c-api/examples/cpp_example.cpp-            R"({"valid": true})",
--
llms.txt-crates/c-api/examples/cpp_example.cpp-                std::string result = parser.parseToString(input);
llms.txt-crates/c-api/examples/cpp_example.cpp-                std::cout << "Input:  " << input << "\n";
llms.txt-crates/c-api/examples/cpp_example.cpp-                std::cout << "Output: " << result << "\n\n";
llms.txt:crates/c-api/examples/cpp_example.cpp:            } catch (const vexy_json::ParseError& e) {
llms.txt-crates/c-api/examples/cpp_example.cpp-                std::cout << "Failed to parse: " << e.what() << "\n\n";
llms.txt-crates/c-api/examples/cpp_example.cpp-            }
llms.txt-crates/c-api/examples/cpp_example.cpp-        }
--
llms.txt-crates/c-api/examples/cpp_example.cpp-            "city": 
llms.txt-crates/c-api/examples/cpp_example.cpp-        })";
llms.txt-crates/c-api/examples/cpp_example.cpp-        
llms.txt:crates/c-api/examples/cpp_example.cpp:        auto options = vexy_json::ParserOptions()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .enableRepair()
llms.txt-crates/c-api/examples/cpp_example.cpp-            .reportRepairs();
llms.txt-crates/c-api/examples/cpp_example.cpp-            
llms.txt:crates/c-api/examples/cpp_example.cpp:        auto result = vexy_json::parseDetailed(broken_json, options);
llms.txt-crates/c-api/examples/cpp_example.cpp-        
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cout << "Example 4 - Detailed parsing with repairs:\n";
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cout << "Output: " << result.json() << "\n";
--
llms.txt-crates/c-api/examples/cpp_example.cpp-            }
llms.txt-crates/c-api/examples/cpp_example.cpp-        }
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cout << "\n";
llms.txt:crates/c-api/examples/cpp_example.cpp:    } catch (const vexy_json::ParseError& e) {
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cerr << "Parse error: " << e.what() << "\n";
llms.txt-crates/c-api/examples/cpp_example.cpp-    }
llms.txt-crates/c-api/examples/cpp_example.cpp-    
--
llms.txt-crates/c-api/examples/cpp_example.cpp-        auto invalid_json = R"({"unclosed": )";
llms.txt-crates/c-api/examples/cpp_example.cpp-        
llms.txt-crates/c-api/examples/cpp_example.cpp-        // This will throw
llms.txt:crates/c-api/examples/cpp_example.cpp:        auto options = vexy_json::ParserOptions(); // Repair disabled by default
llms.txt:crates/c-api/examples/cpp_example.cpp:        std::string result = vexy_json::parse(invalid_json, options);
llms.txt-crates/c-api/examples/cpp_example.cpp-        
llms.txt:crates/c-api/examples/cpp_example.cpp:    } catch (const vexy_json::ParseError& e) {
llms.txt-crates/c-api/examples/cpp_example.cpp-        std::cout << "Caught expected error: " << e.what() << "\n\n";
llms.txt-crates/c-api/examples/cpp_example.cpp-    }
llms.txt-crates/c-api/examples/cpp_example.cpp-    
llms.txt-crates/c-api/examples/cpp_example.cpp-    // Example 6: Version information
llms.txt-crates/c-api/examples/cpp_example.cpp-    std::cout << "Example 6 - Version information:\n";
llms.txt:crates/c-api/examples/cpp_example.cpp:    std::cout << "vexy_json version: " << vexy_json::version() << "\n";
llms.txt-crates/c-api/examples/cpp_example.cpp-    
llms.txt-crates/c-api/examples/cpp_example.cpp-    return 0;
llms.txt-crates/c-api/examples/cpp_example.cpp-}
llms.txt---
llms.txt-crates/cli/src/main.rs-// this_file: crates/cli/src/main.rs
llms.txt-crates/cli/src/main.rs-
llms.txt:crates/cli/src/main.rs://! Enhanced vexy_json CLI with comprehensive JSON processing capabilities.
llms.txt-crates/cli/src/main.rs-
llms.txt-crates/cli/src/main.rs-use clap::{Args, Parser};
llms.txt-crates/cli/src/main.rs-use colored::*;
--
llms.txt-crates/cli/src/main.rs-use std::path::PathBuf;
llms.txt-crates/cli/src/main.rs-use thiserror::Error;
llms.txt-crates/cli/src/main.rs-use tokio::time::{sleep, Duration};
llms.txt:crates/cli/src/main.rs:use vexy_json_core::ast::Value;
llms.txt:crates/cli/src/main.rs:use vexy_json_core::error::{EnhancedParseResult, ParsingTier, RepairType};
llms.txt:crates/cli/src/main.rs:use vexy_json_core::{
llms.txt-crates/cli/src/main.rs-    parse_with_detailed_repair_tracking,
llms.txt-crates/cli/src/main.rs-    parse_with_fallback, ParserOptions, ParallelConfig, ParallelParser,
llms.txt-crates/cli/src/main.rs-};
llms.txt-crates/cli/src/main.rs-
llms.txt-crates/cli/src/main.rs-#[derive(Parser, Debug)]
llms.txt-crates/cli/src/main.rs-#[clap(
llms.txt:crates/cli/src/main.rs:    name = "vexy_json", 
llms.txt-crates/cli/src/main.rs-    version = env!("VEXY_JSON_VERSION", env!("CARGO_PKG_VERSION")), 
llms.txt-crates/cli/src/main.rs-    about = "A forgiving JSON parser and processor",
llms.txt:crates/cli/src/main.rs:    long_about = "vexy_json processes JSON with forgiving syntax including comments, trailing commas, unquoted keys, and more."
llms.txt-crates/cli/src/main.rs-)]
llms.txt-crates/cli/src/main.rs-struct CliArgs {
llms.txt-crates/cli/src/main.rs-    /// Input files to process (if none provided, reads from stdin)
--
llms.txt-crates/cli/src/main.rs-    Ok(())
llms.txt-crates/cli/src/main.rs-}
llms.txt-crates/cli/src/main.rs-
llms.txt:crates/cli/src/main.rs:fn format_parse_error(error: &vexy_json_core::Error, file: &str, content: &str) -> CliError {
llms.txt-crates/cli/src/main.rs-    // Try to extract position information from the error
llms.txt-crates/cli/src/main.rs-    let error_str = error.to_string();
llms.txt-crates/cli/src/main.rs-
llms.txt---
llms.txt:issues/602.txt:Read the @llms.txt code snapshot and into `vexify.txt` record all occurrences of all case variants of `vexy_json` found in the codebase. 
llms.txt-issues/602.txt-
llms.txt:issues/602.txt:Write a `vexify.py` tool that will generally replace both in the current codebase and in the entire git history the name `vexy_json` with `vexy json` but in a smart way: 
llms.txt-issues/602.txt-
llms.txt:issues/602.txt:- In filenames, it should replace `vexy_json` with `vexy_json`
llms.txt:issues/602.txt:- In code, it should replace `vexy_json` with `vexy_json` when it is used as a variable or function name, not in comments or strings.
llms.txt-issues/602.txt-- In documentation, comments and UI strings (like in HTML) it should replace the all-uppercase `Vexy JSON` with `Vexy JSON`.
llms.txt-issues/602.txt-- Cases like `VexyJSONConfig`, `VexyJSONWrapper` or so should become `VexyJSONConfig`, `VexyJSONWrapper`
llms.txt:issues/602.txt:- It should report all changes made, including filenames, code changes, and documentation updates, and then report the places where `vexy_json` still occurs.
llms.txt-issues/602.txt-
llms.txt-issues/602.txt-Make it Fire CLI. If `--deep` is given, it should also rewrite the git history. Without `--deep`, it should only modify the current state of the codebase.
llms.txt---
llms.txt:debug_test2.rs:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-debug_test2.rs-
llms.txt-debug_test2.rs-fn main() {
llms.txt-debug_test2.rs-    let options = ParserOptions {
--
llms.txt-benches/comparison.rs-use criterion::{criterion_group, criterion_main, BenchmarkId, Criterion};
llms.txt-benches/comparison.rs-use std::fs;
llms.txt-benches/comparison.rs-use std::hint::black_box;
llms.txt:benches/comparison.rs:use vexy_json::parse;
llms.txt-benches/comparison.rs-
llms.txt-benches/comparison.rs-fn get_json_data(name: &str) -> String {
llms.txt-benches/comparison.rs-    fs::read_to_string(format!("benches/data/{}.json", name)).expect("Unable to read file")
--
llms.txt-benches/comparison.rs-
llms.txt-benches/comparison.rs-    for &case in test_cases {
llms.txt-benches/comparison.rs-        let json_data = get_json_data(case);
llms.txt:benches/comparison.rs:        group.bench_with_input(BenchmarkId::new("vexy_json", case), &json_data, |b, data| {
llms.txt-benches/comparison.rs-            b.iter(|| parse(black_box(data)))
llms.txt-benches/comparison.rs-        });
llms.txt-benches/comparison.rs-    }
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-/**
llms.txt:crates/c-api/include/vexy_json.hpp: * @file vexy_json.hpp
llms.txt:crates/c-api/include/vexy_json.hpp: * @brief C++ header-only wrapper for the vexy_json JSON parser
llms.txt:crates/c-api/include/vexy_json.hpp- *
llms.txt:crates/c-api/include/vexy_json.hpp: * This header provides a modern C++ interface for the vexy_json JSON parser,
llms.txt:crates/c-api/include/vexy_json.hpp- * with RAII, exceptions, and STL container support.
llms.txt:crates/c-api/include/vexy_json.hpp- */
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-#include <string_view>
llms.txt:crates/c-api/include/vexy_json.hpp-#include <utility>
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp:#include "vexy_json.h"
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp:namespace vexy_json {
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp-/**
llms.txt:crates/c-api/include/vexy_json.hpp: * @brief Exception thrown by vexy_json operations
llms.txt:crates/c-api/include/vexy_json.hpp- */
llms.txt:crates/c-api/include/vexy_json.hpp-class ParseError : public std::runtime_error {
llms.txt:crates/c-api/include/vexy_json.hpp-public:
llms.txt:crates/c-api/include/vexy_json.hpp-    explicit ParseError(const std::string& message) 
llms.txt:crates/c-api/include/vexy_json.hpp:        : std::runtime_error("vexy_json parse error: " + message) {}
llms.txt:crates/c-api/include/vexy_json.hpp-};
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp-/**
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp- */
llms.txt:crates/c-api/include/vexy_json.hpp-class ParserOptions {
llms.txt:crates/c-api/include/vexy_json.hpp-public:
llms.txt:crates/c-api/include/vexy_json.hpp:    ParserOptions() : options_(vexy_json_default_options()) {}
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-    ParserOptions& allowComments(bool value = true) {
llms.txt:crates/c-api/include/vexy_json.hpp-        options_.allow_comments = value;
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-        return *this;
llms.txt:crates/c-api/include/vexy_json.hpp-    }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp:    const vexy_json_parser_options* get() const { return &options_; }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-private:
llms.txt:crates/c-api/include/vexy_json.hpp:    vexy_json_parser_options options_;
llms.txt:crates/c-api/include/vexy_json.hpp-};
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp-/**
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-public:
llms.txt:crates/c-api/include/vexy_json.hpp-    ParseResult() = default;
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp:    explicit ParseResult(vexy_json_parse_result result) 
llms.txt:crates/c-api/include/vexy_json.hpp:        : result_(std::make_unique<vexy_json_parse_result>(result)) {
llms.txt:crates/c-api/include/vexy_json.hpp-        if (result.error) {
llms.txt:crates/c-api/include/vexy_json.hpp-            error_ = result.error;
llms.txt:crates/c-api/include/vexy_json.hpp-        }
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-    ~ParseResult() {
llms.txt:crates/c-api/include/vexy_json.hpp-        if (result_) {
llms.txt:crates/c-api/include/vexy_json.hpp:            vexy_json_free_result(*result_);
llms.txt:crates/c-api/include/vexy_json.hpp-        }
llms.txt:crates/c-api/include/vexy_json.hpp-    }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-    }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-private:
llms.txt:crates/c-api/include/vexy_json.hpp:    std::unique_ptr<vexy_json_parse_result> result_;
llms.txt:crates/c-api/include/vexy_json.hpp-    std::optional<std::string> json_;
llms.txt:crates/c-api/include/vexy_json.hpp-    std::optional<std::string> error_;
llms.txt:crates/c-api/include/vexy_json.hpp-};
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-public:
llms.txt:crates/c-api/include/vexy_json.hpp-    DetailedParseResult() = default;
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp:    explicit DetailedParseResult(vexy_json_detailed_result result) 
llms.txt:crates/c-api/include/vexy_json.hpp:        : result_(std::make_unique<vexy_json_detailed_result>(result)) {
llms.txt:crates/c-api/include/vexy_json.hpp-        if (result.error) {
llms.txt:crates/c-api/include/vexy_json.hpp-            error_ = result.error;
llms.txt:crates/c-api/include/vexy_json.hpp-        }
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-    ~DetailedParseResult() {
llms.txt:crates/c-api/include/vexy_json.hpp-        if (result_) {
llms.txt:crates/c-api/include/vexy_json.hpp:            vexy_json_free_detailed_result(*result_);
llms.txt:crates/c-api/include/vexy_json.hpp-        }
llms.txt:crates/c-api/include/vexy_json.hpp-    }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-    const std::vector<Repair>& repairs() const { return repairs_; }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-private:
llms.txt:crates/c-api/include/vexy_json.hpp:    std::unique_ptr<vexy_json_detailed_result> result_;
llms.txt:crates/c-api/include/vexy_json.hpp-    std::optional<std::string> json_;
llms.txt:crates/c-api/include/vexy_json.hpp-    std::optional<std::string> error_;
llms.txt:crates/c-api/include/vexy_json.hpp-    std::vector<Repair> repairs_;
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-    Parser() : Parser(ParserOptions{}) {}
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-    explicit Parser(const ParserOptions& options) 
llms.txt:crates/c-api/include/vexy_json.hpp:        : parser_(vexy_json_parser_new(options.get())) {
llms.txt:crates/c-api/include/vexy_json.hpp-        if (!parser_) {
llms.txt:crates/c-api/include/vexy_json.hpp:            throw std::runtime_error("Failed to create vexy_json parser");
llms.txt:crates/c-api/include/vexy_json.hpp-        }
llms.txt:crates/c-api/include/vexy_json.hpp-    }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-    Parser& operator=(Parser&& other) noexcept {
llms.txt:crates/c-api/include/vexy_json.hpp-        if (this != &other) {
llms.txt:crates/c-api/include/vexy_json.hpp-            if (parser_) {
llms.txt:crates/c-api/include/vexy_json.hpp:                vexy_json_parser_free(parser_);
llms.txt:crates/c-api/include/vexy_json.hpp-            }
llms.txt:crates/c-api/include/vexy_json.hpp-            parser_ = other.parser_;
llms.txt:crates/c-api/include/vexy_json.hpp-            other.parser_ = nullptr;
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-    ~Parser() {
llms.txt:crates/c-api/include/vexy_json.hpp-        if (parser_) {
llms.txt:crates/c-api/include/vexy_json.hpp:            vexy_json_parser_free(parser_);
llms.txt:crates/c-api/include/vexy_json.hpp-        }
llms.txt:crates/c-api/include/vexy_json.hpp-    }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-    ParseResult parse(std::string_view input) const {
llms.txt:crates/c-api/include/vexy_json.hpp-        std::string input_str(input);
llms.txt:crates/c-api/include/vexy_json.hpp:        return ParseResult(vexy_json_parser_parse(parser_, input_str.c_str()));
llms.txt:crates/c-api/include/vexy_json.hpp-    }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-    std::string parseToString(std::string_view input) const {
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp-    }
llms.txt:crates/c-api/include/vexy_json.hpp-    
llms.txt:crates/c-api/include/vexy_json.hpp-private:
llms.txt:crates/c-api/include/vexy_json.hpp:    vexy_json_parser parser_;
llms.txt:crates/c-api/include/vexy_json.hpp-};
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp-/**
llms.txt---
llms.txt:crates/c-api/include/vexy_json.hpp- */
llms.txt:crates/c-api/include/vexy_json.hpp-inline std::string parse(std::string_view input) {
llms.txt:crates/c-api/include/vexy_json.hpp-    std::string input_str(input);
llms.txt:crates/c-api/include/vexy_json.hpp:    auto result = ParseResult(vexy_json_parse(input_str.c_str()));
llms.txt:crates/c-api/include/vexy_json.hpp-    return result.json();
llms.txt:crates/c-api/include/vexy_json.hpp-}
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp-inline std::string parse(std::string_view input, const ParserOptions& options) {
llms.txt:crates/c-api/include/vexy_json.hpp-    std::string input_str(input);
llms.txt:crates/c-api/include/vexy_json.hpp:    auto result = ParseResult(vexy_json_parse_with_options(input_str.c_str(), options.get()));
llms.txt:crates/c-api/include/vexy_json.hpp-    return result.json();
llms.txt:crates/c-api/include/vexy_json.hpp-}
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp-inline DetailedParseResult parseDetailed(std::string_view input, const ParserOptions& options) {
llms.txt:crates/c-api/include/vexy_json.hpp-    std::string input_str(input);
llms.txt:crates/c-api/include/vexy_json.hpp:    return DetailedParseResult(vexy_json_parse_detailed(input_str.c_str(), options.get()));
llms.txt:crates/c-api/include/vexy_json.hpp-}
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp-/**
llms.txt:crates/c-api/include/vexy_json.hpp: * @brief Get the version of the vexy_json library
llms.txt:crates/c-api/include/vexy_json.hpp- */
llms.txt:crates/c-api/include/vexy_json.hpp-inline std::string version() {
llms.txt:crates/c-api/include/vexy_json.hpp:    return vexy_json_version();
llms.txt:crates/c-api/include/vexy_json.hpp-}
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp:} // namespace vexy_json
llms.txt:crates/c-api/include/vexy_json.hpp-
llms.txt:crates/c-api/include/vexy_json.hpp-#endif // VEXY_JSON_HPP
llms.txt---
llms.txt:src/bin/test_full_parse.rs:use vexy_json_core::{parse, lexer::{Lexer, JsonLexer}, parser::{Parser, ParserOptions}};
llms.txt-src/bin/test_full_parse.rs-
llms.txt-src/bin/test_full_parse.rs-fn main() {
llms.txt-src/bin/test_full_parse.rs-    let input = "1.";
llms.txt---
llms.txt:crates/c-api/examples/Makefile:# Makefile for vexy_json C++ examples
llms.txt-crates/c-api/examples/Makefile-
llms.txt-crates/c-api/examples/Makefile-CXX = g++
llms.txt-crates/c-api/examples/Makefile-CXXFLAGS = -std=c++17 -Wall -Wextra -O2
llms.txt:crates/c-api/examples/Makefile:LDFLAGS = -L../../../target/release -lvexy_json
llms.txt-crates/c-api/examples/Makefile-INCLUDES = -I../include
llms.txt-crates/c-api/examples/Makefile-
llms.txt-crates/c-api/examples/Makefile-# For macOS, add rpath to find the library
llms.txt---
llms.txt-crates/cli/Cargo.toml-[package]
llms.txt:crates/cli/Cargo.toml:name = "vexy_json-cli"
llms.txt-crates/cli/Cargo.toml-version = "2.2.3"
llms.txt-crates/cli/Cargo.toml-edition = "2021"
llms.txt-crates/cli/Cargo.toml-
llms.txt-crates/cli/Cargo.toml-
llms.txt-crates/cli/Cargo.toml-[[bin]]
llms.txt:crates/cli/Cargo.toml:name = "vexy_json"
llms.txt-crates/cli/Cargo.toml-path = "src/main.rs"
llms.txt-crates/cli/Cargo.toml-
llms.txt-crates/cli/Cargo.toml-
--
llms.txt-crates/cli/Cargo.toml-dirs = "5.0"
llms.txt-crates/cli/Cargo.toml-
llms.txt-crates/cli/Cargo.toml-
llms.txt:crates/cli/Cargo.toml:[dependencies.vexy_json-core]
llms.txt-crates/cli/Cargo.toml-path = "../core"
llms.txt-crates/cli/Cargo.toml-
llms.txt-crates/cli/Cargo.toml-
llms.txt---
llms.txt:issues/610.txt:Read the @llms.txt codebase snapshot. Note: recently we have renamed the project from `ZZSON` to `Vexy JSON`. We have search-replaced many strings like `zzson` to `vexy_json`, but mistakes may have been made. Please review all files, check if the changes have been performed consistently. . Run build scripts. Then into @PLAN.md write a detailed plan to improve and fix the code, and then into @TODO.md write a linearized version of that. Then /work on it. 
llms.txt---
llms.txt-benches/real_world_benchmarks.rs-
llms.txt-benches/real_world_benchmarks.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
llms.txt-benches/real_world_benchmarks.rs-use std::fs;
llms.txt:benches/real_world_benchmarks.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-benches/real_world_benchmarks.rs-
llms.txt-benches/real_world_benchmarks.rs-fn collect_benchmark_files() -> Vec<(String, String, String)> {
llms.txt-benches/real_world_benchmarks.rs-    let mut files = Vec::new();
llms.txt---
llms.txt:src/bin/test_point_zero.rs:use vexy_json::{parse, Value, Number};
llms.txt-src/bin/test_point_zero.rs-
llms.txt-src/bin/test_point_zero.rs-fn main() {
llms.txt-src/bin/test_point_zero.rs-    let test_cases = vec!["1.0", "-1.0", "0.0", "+1.0"];
llms.txt---
llms.txt-crates/c-api/Cargo.toml-[package]
llms.txt:crates/c-api/Cargo.toml:name = "vexy_json-c-api"
llms.txt-crates/c-api/Cargo.toml-version = "2.2.3"
llms.txt-crates/c-api/Cargo.toml-authors = [ "Vexy JSON Contributors" ]
llms.txt-crates/c-api/Cargo.toml-edition = "2021"
llms.txt-crates/c-api/Cargo.toml-license = "MIT OR Apache-2.0"
llms.txt:crates/c-api/Cargo.toml:description = "C API for the vexy_json JSON parser"
llms.txt:crates/c-api/Cargo.toml:repository = "https://github.com/twardoch/pub-vexy_json"
llms.txt-crates/c-api/Cargo.toml-
llms.txt-crates/c-api/Cargo.toml-
llms.txt-crates/c-api/Cargo.toml-[lib]
llms.txt:crates/c-api/Cargo.toml:name = "vexy_json_c_api"
llms.txt-crates/c-api/Cargo.toml-crate-type = [ "cdylib", "staticlib" ]
llms.txt-crates/c-api/Cargo.toml-
llms.txt-crates/c-api/Cargo.toml-
--
llms.txt-crates/c-api/Cargo.toml-serde_json = "1.0"
llms.txt-crates/c-api/Cargo.toml-
llms.txt-crates/c-api/Cargo.toml-
llms.txt:crates/c-api/Cargo.toml:[dependencies.vexy_json-core]
llms.txt-crates/c-api/Cargo.toml-path = "../core"
llms.txt-crates/c-api/Cargo.toml-features = [ "serde" ]
llms.txt-crates/c-api/Cargo.toml-
llms.txt---
llms.txt:README.md:# vexy_json Documentation & Web Tool
llms.txt-README.md-
llms.txt:README.md:This directory contains the documentation website and interactive web tool for vexy_json.
llms.txt-README.md-
llms.txt-README.md-## Recent Updates
llms.txt-README.md-
--
llms.txt-README.md-- **Real-time parsing** with debounced input
llms.txt-README.md-- **Syntax highlighting** for JSON input
llms.txt-README.md-- **Error highlighting** with position indicators
llms.txt:README.md:- **Example library** showcasing vexy_json features
llms.txt-README.md-- **Download functionality** for parsed results
llms.txt-README.md-- **Share URLs** for collaboration
llms.txt-README.md-- **Performance metrics** display
llms.txt---
llms.txt:issues/104.txt:Analyze the entire codebase. Then in ./IDEAS.md write an extensive spec that will describe in minute detail step-by-step how to extend the vexy_json parser with the functionality of INTELLIGENT completion of opening or closing braces. Right now our tolerant and forgiving JSON-esque parser can fix various things but it cannot overcome the situation of a braces mismatch. The original reference jsonic parser written in JS, of which vexy_json is a Rust port, does not have that functionality. But I want it.
llms.txt-issues/104.txt-
llms.txt---
llms.txt:src/bin/debug_number.rs:use vexy_json::parse;
llms.txt-src/bin/debug_number.rs-
llms.txt-src/bin/debug_number.rs-fn main() {
llms.txt-src/bin/debug_number.rs-    let test_cases = vec!["1_000_000", "0x10", "0o77", "0b1010"];
llms.txt---
llms.txt:crates/c-api/README_CPP.md:# vexy_json C++ Header-Only Wrapper
llms.txt-crates/c-api/README_CPP.md-
llms.txt:crates/c-api/README_CPP.md:This directory contains a modern C++ header-only wrapper for the vexy_json JSON parser, providing an idiomatic C++ interface with RAII, exceptions, and STL integration.
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-## Features
llms.txt-crates/c-api/README_CPP.md-
llms.txt:crates/c-api/README_CPP.md:- **Header-only**: Just include `vexy_json.hpp` - no additional C++ files to compile
llms.txt-crates/c-api/README_CPP.md-- **RAII**: Automatic memory management with smart pointers
llms.txt-crates/c-api/README_CPP.md-- **Exception safety**: Strong exception guarantee with proper error handling
llms.txt-crates/c-api/README_CPP.md-- **Modern C++**: Uses C++17 features like `std::string_view` and `std::optional`
--
llms.txt-crates/c-api/README_CPP.md-## Requirements
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-- C++17 or later compiler
llms.txt:crates/c-api/README_CPP.md:- The vexy_json C library (linked separately)
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-## Installation
llms.txt-crates/c-api/README_CPP.md-
llms.txt:crates/c-api/README_CPP.md:1. Include the `vexy_json.hpp` header in your project
llms.txt:crates/c-api/README_CPP.md:2. Link against the vexy_json C library
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-## Quick Start
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-```cpp
llms.txt:crates/c-api/README_CPP.md:#include "vexy_json.hpp"
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-// Simple parsing
llms.txt:crates/c-api/README_CPP.md:std::string json = vexy_json::parse(R"({"key": "value"})");
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-// Parsing with options
llms.txt:crates/c-api/README_CPP.md:auto options = vexy_json::ParserOptions()
llms.txt-crates/c-api/README_CPP.md-    .allowComments()
llms.txt-crates/c-api/README_CPP.md-    .allowTrailingCommas()
llms.txt-crates/c-api/README_CPP.md-    .enableRepair();
llms.txt-crates/c-api/README_CPP.md-    
llms.txt:crates/c-api/README_CPP.md:std::string result = vexy_json::parse(input, options);
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-// Using a parser instance
llms.txt:crates/c-api/README_CPP.md:vexy_json::Parser parser(options);
llms.txt-crates/c-api/README_CPP.md-std::string result = parser.parseToString(input);
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-// Detailed parsing with repair information
llms.txt:crates/c-api/README_CPP.md:auto detailed = vexy_json::parseDetailed(input, options);
llms.txt-crates/c-api/README_CPP.md-std::cout << "JSON: " << detailed.json() << "\n";
llms.txt-crates/c-api/README_CPP.md-for (const auto& repair : detailed.repairs()) {
llms.txt-crates/c-api/README_CPP.md-    std::cout << "Repair: " << repair.description << "\n";
--
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-## API Reference
llms.txt-crates/c-api/README_CPP.md-
llms.txt:crates/c-api/README_CPP.md:### Namespace `vexy_json`
llms.txt-crates/c-api/README_CPP.md-
llms.txt:crates/c-api/README_CPP.md:All C++ wrapper functionality is in the `vexy_json` namespace.
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-### Classes
llms.txt-crates/c-api/README_CPP.md-
--
llms.txt-crates/c-api/README_CPP.md-- `parse(std::string_view)` - Quick parse with default options
llms.txt-crates/c-api/README_CPP.md-- `parse(std::string_view, const ParserOptions&)` - Quick parse with options
llms.txt-crates/c-api/README_CPP.md-- `parseDetailed(std::string_view, const ParserOptions&)` - Parse with repair info
llms.txt:crates/c-api/README_CPP.md:- `version()` - Get vexy_json library version
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-## Examples
llms.txt-crates/c-api/README_CPP.md-
--
llms.txt-crates/c-api/README_CPP.md-## Building the Examples
llms.txt-crates/c-api/README_CPP.md-
llms.txt-crates/c-api/README_CPP.md-```bash
llms.txt:crates/c-api/README_CPP.md:# Assuming you have built the vexy_json C library
llms.txt:crates/c-api/README_CPP.md:g++ -std=c++17 examples/cpp_example.cpp -lvexy_json -o cpp_example
llms.txt-crates/c-api/README_CPP.md-./cpp_example
llms.txt-crates/c-api/README_CPP.md-```
llms.txt-crates/c-api/README_CPP.md-
llms.txt---
llms.txt:src/bin/test_positive_numbers.rs:use vexy_json::parse;
llms.txt-src/bin/test_positive_numbers.rs-
llms.txt-src/bin/test_positive_numbers.rs-fn main() {
llms.txt-src/bin/test_positive_numbers.rs-    let test_cases = vec!["+1", "+1.", "+1.0", "+123", "+0", "+0.9"];
llms.txt---
llms.txt:src/bin/trace_parse.rs:use vexy_json_core::parse;
llms.txt-src/bin/trace_parse.rs-
llms.txt-src/bin/trace_parse.rs-fn main() {
llms.txt-src/bin/trace_parse.rs-    let input = "1.";
llms.txt---
llms.txt-crates/wasm/src/lib.rs-use serde_json::Value;
llms.txt-crates/wasm/src/lib.rs-use wasm_bindgen::prelude::*;
llms.txt:crates/wasm/src/lib.rs:use vexy_json_core::{parse, parse_with_options, ParserOptions};
llms.txt-crates/wasm/src/lib.rs-
llms.txt-crates/wasm/src/lib.rs-#[wasm_bindgen]
llms.txt-crates/wasm/src/lib.rs-extern "C" {
--
llms.txt-crates/wasm/src/lib.rs-/// Stringify a JSON value with pretty printing
llms.txt-crates/wasm/src/lib.rs-#[wasm_bindgen]
llms.txt-crates/wasm/src/lib.rs-pub fn stringify_value(input: &str, indent: Option<u32>) -> Result<String, JsValue> {
llms.txt:crates/wasm/src/lib.rs:    // First parse with vexy_json to handle forgiving syntax
llms.txt-crates/wasm/src/lib.rs-    let value = parse(input).map_err(|e| JsValue::from_str(&e.to_string()))?;
llms.txt-crates/wasm/src/lib.rs-
llms.txt-crates/wasm/src/lib.rs-    // Convert to serde_json::Value
llms.txt---
llms.txt:src/bin/test_parse.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-src/bin/test_parse.rs-
llms.txt-src/bin/test_parse.rs-fn main() {
llms.txt-src/bin/test_parse.rs-    println!("Testing parse('1.'):");
llms.txt---
llms.txt:src/bin/debug_comment_line_endings.rs:use vexy_json::{parse, Value};
llms.txt-src/bin/debug_comment_line_endings.rs-
llms.txt-src/bin/debug_comment_line_endings.rs-fn main() {
llms.txt-src/bin/debug_comment_line_endings.rs-    let inputs = vec![
llms.txt---
llms.txt-issues/105.txt-Analyze the entire `./llms.txt` codebase snapshot. 
llms.txt-issues/105.txt-
llms.txt:issues/105.txt:Our code, `vexy_json` is a Rust port of the `jsonic` parser written in JS. Neither of the tolerant and forgiving JSON-esque parsers (our `vexy_json` or the original `jsonic`) can overcome the problem of mismatching brackets or braces. 
llms.txt-issues/105.txt-
llms.txt-issues/105.txt-It would be very useful if this were possible. 
llms.txt-issues/105.txt-
--
llms.txt-issues/105.txt-3. The parse continues after the object. The AST now has the `"bar"` key mapped to an array node that is marked incomplete/error, but the `"foo":123` entry remains intact, and the overall AST is a top-level object node (rather than nothing).
llms.txt-issues/105.txt-4. The IDE can highlight the error at the position of `}` and possibly at end-of-file (saying one brace was inserted implicitly). But crucially, it can still allow navigation of the AST (e.g. the user can fold the object, see both keys, etc.).
llms.txt-issues/105.txt-
llms.txt:issues/105.txt:To implement similar features in a **Rust-based tolerant JSON parser** (like extending `vexy_json` or `jsonic` with mismatch recovery), one can combine these approaches:
llms.txt-issues/105.txt-
llms.txt-issues/105.txt-* **Insert error nodes** on-the-fly in the parser: e.g. if expecting `]` but got `}`, push an error and treat it as the end of the array. If end-of-file reached but stack isn’t empty, auto-insert the needed `]` or `}` tokens (recording errors for each).
llms.txt-issues/105.txt-* **Use a recovery combinator or manual check** after a failed parse: e.g. if a value parser fails inside an array, skip forward until a `]` or `}` is found, or until a comma that indicates the next element, then continue. This could be done by a loop scanning the char stream or by a higher-level library feature.
--
llms.txt-issues/105.txt-
llms.txt-issues/105.txt-Error-tolerant parsing is an active area of language tooling research and development. Techniques range from simple heuristics (skip to next `}`) to sophisticated grammar transformations that guarantee a parse for any input. **State-of-the-art academic work** (like PEG labeled failures or minimal edit algorithms) has started to find its way into practical tools, meaning library authors no longer have to choose between strict compliance and usability. Open-source libraries such as **Chumsky** (Rust) and **LPegLabel** (Lua) demonstrate that we can recover from errors while still using high-level parser definitions. And specialized JSON fixers like **`json_repair`**, **JSON5/JSONC parsers**, and **tolerantjson** for Python show concrete strategies to handle unbalanced delimiters, missing commas, and more in real JSON inputs.
llms.txt-issues/105.txt-
llms.txt:issues/105.txt:For implementing a tolerant parser in Rust (as with `vexy_json` or similar), a combined approach is recommended:
llms.txt-issues/105.txt-
llms.txt-issues/105.txt-* Use a **stack-based mechanism** or parser combinator to detect and auto-correct bracket mismatches in one pass.
llms.txt-issues/105.txt-* Represent the parse result in a way that **retains malformed parts** (e.g. an `Enum Value { Valid(...), Error(...) }`), so that no information is lost.
--
llms.txt-issues/105.txt-
llms.txt-issues/105.txt-Into `./issues/106.txt` write an extensive spec that will describe in minute detail step-by-step how to incorporate https://docs.rs/json-repair/ into our project. 
llms.txt-issues/105.txt-
llms.txt:issues/105.txt:The general idea is that it should be an option, and we should have a parser that parses using the fastest method first, then falls back to our core `vexy_json` slower one, and only if that fails falls back to `json-repair`. 
llms.txt-issues/105.txt-
llms.txt---
llms.txt-crates/serde/src/lib.rs-use serde::{Deserialize, Serialize};
llms.txt:crates/serde/src/lib.rs:use vexy_json_core::ast::Value;
llms.txt-crates/serde/src/lib.rs-
llms.txt-crates/serde/src/lib.rs-// This is a placeholder for Serde integration.
llms.txt:crates/serde/src/lib.rs:// Actual implementation would involve implementing Serialize/Deserialize for vexy_json_core::Value
llms.txt-crates/serde/src/lib.rs-// or providing helper functions for conversion.
llms.txt-crates/serde/src/lib.rs-
llms.txt-crates/serde/src/lib.rs-#[derive(Debug, PartialEq, Serialize, Deserialize)]
llms.txt---
llms.txt:debug_test5.rs:use vexy_json::parse;
llms.txt-debug_test5.rs-
llms.txt-debug_test5.rs-fn main() {
llms.txt-debug_test5.rs-    // Test if the # is being treated as a comment
llms.txt---
llms.txt:src/bin/test_dot_numbers.rs:use vexy_json::parse;
llms.txt-src/bin/test_dot_numbers.rs-
llms.txt-src/bin/test_dot_numbers.rs-fn main() {
llms.txt-src/bin/test_dot_numbers.rs-    let test_cases = vec![".1", "-.1", "+.1", ".0", ".123"];
llms.txt---
llms.txt-crates/serde/Cargo.toml-[package]
llms.txt:crates/serde/Cargo.toml:name = "vexy_json-serde"
llms.txt-crates/serde/Cargo.toml-version = "2.2.3"
llms.txt-crates/serde/Cargo.toml-edition = "2021"
llms.txt-crates/serde/Cargo.toml-
--
llms.txt-crates/serde/Cargo.toml-path = "src/lib.rs"
llms.txt-crates/serde/Cargo.toml-
llms.txt-crates/serde/Cargo.toml-
llms.txt:crates/serde/Cargo.toml:[dependencies.vexy_json-core]
llms.txt-crates/serde/Cargo.toml-path = "../core"
llms.txt-crates/serde/Cargo.toml-features = [ "serde" ]
llms.txt-crates/serde/Cargo.toml-
llms.txt---
llms.txt:debug_test4.rs:use vexy_json::parse;
llms.txt-debug_test4.rs-
llms.txt-debug_test4.rs-fn main() {
llms.txt-debug_test4.rs-    // Test individual parts
llms.txt---
llms.txt:src/bin/test_trailing_decimal.rs:use vexy_json::{parse, Value, Number};
llms.txt-src/bin/test_trailing_decimal.rs-
llms.txt-src/bin/test_trailing_decimal.rs-fn main() {
llms.txt-src/bin/test_trailing_decimal.rs-    let test_cases = vec!["1.", "-1.", "+1.", "0.", "123."];
--
llms.txt-TODO.md-# this_file: docs/internal/TODO.md
llms.txt-TODO.md-
llms.txt-TODO.md-## Phase 1: jsonic References Removal (IMMEDIATE)
llms.txt:TODO.md:- [ ] Rename test files: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
llms.txt-TODO.md-- [ ] Update documentation: Remove "jsonic" from HTML, markdown files
llms.txt:TODO.md:- [ ] Clean code references: Replace "jsonic" with "vexy_json" in comments/variables
llms.txt-TODO.md-- [ ] Update configurations: Clean pyproject.toml and Cargo.toml references
llms.txt-TODO.md-- [ ] Verify completeness: Re-run grep to ensure no "jsonic" references remain
llms.txt-TODO.md-
llms.txt---
llms.txt:src/bin/test_implicit.rs:use vexy_json_core::{parse, parse_with_options, ParserOptions};
llms.txt-src/bin/test_implicit.rs-
llms.txt-src/bin/test_implicit.rs-fn main() {
llms.txt-src/bin/test_implicit.rs-    // Test with default options (implicit top level enabled)
llms.txt---
llms.txt:issues/107.txt:$ ./target/release/vexy_json --help
llms.txt-issues/107.txt-A forgiving JSON parser - Rust port of jsonic
llms.txt-issues/107.txt-
llms.txt:issues/107.txt:Usage: vexy_json
llms.txt-issues/107.txt-
llms.txt-issues/107.txt-Options:
llms.txt-issues/107.txt-  -h, --help     Print help
llms.txt-issues/107.txt-  -V, --version  Print version
llms.txt:issues/107.txt:(.venv) ~/Developer/vcs/github.twardoch/pub/vexy_json
llms.txt:issues/107.txt:[14:53:12] $ ./target/release/vexy_json-cli --help
llms.txt:issues/107.txt:Usage: vexy_json-cli
llms.txt-issues/107.txt-
llms.txt-issues/107.txt-Options:
llms.txt-issues/107.txt-  -h, --help     Print help
llms.txt-issues/107.txt-  -V, --version  Print version
llms.txt-issues/107.txt-
llms.txt-issues/107.txt-
llms.txt:issues/107.txt:——— why two executables? (vexy_json and vexy_json-cli) 
llms.txt---
llms.txt-crates/wasm/test.mjs-const __dirname = dirname(__filename);
llms.txt-crates/wasm/test.mjs-
llms.txt-crates/wasm/test.mjs-// Dynamically import the WASM module
llms.txt:crates/wasm/test.mjs:const wasmModule = await import(join(__dirname, 'pkg', 'vexy_json_wasm.js'));
llms.txt-crates/wasm/test.mjs-const { default: init, parse_js, parse_with_options_js, is_valid, format } = wasmModule;
llms.txt-crates/wasm/test.mjs-
llms.txt-crates/wasm/test.mjs-// Initialize WASM with the WASM file path
llms.txt:crates/wasm/test.mjs:const wasmPath = join(__dirname, 'pkg', 'vexy_json_wasm_bg.wasm');
llms.txt-crates/wasm/test.mjs-const wasmBytes = readFileSync(wasmPath);
llms.txt-crates/wasm/test.mjs-await init(wasmBytes);
llms.txt-crates/wasm/test.mjs-
llms.txt:crates/wasm/test.mjs:console.log('Testing vexy_json WASM module...\n');
llms.txt-crates/wasm/test.mjs-
llms.txt-crates/wasm/test.mjs-// Test 1: Basic parsing
llms.txt-crates/wasm/test.mjs-console.log('Test 1: Basic parsing');
--
llms.txt-oss-fuzz/build.sh-source $HOME/.cargo/env
llms.txt-oss-fuzz/build.sh-
llms.txt-oss-fuzz/build.sh-# Navigate to the project directory
llms.txt:oss-fuzz/build.sh:cd $SRC/vexy_json
llms.txt-oss-fuzz/build.sh-
llms.txt-oss-fuzz/build.sh-# Build the project
llms.txt-oss-fuzz/build.sh-cargo build --release
llms.txt---
llms.txt:crates/core/benches/parser_benchmarks.rs://! Comprehensive benchmark suite for vexy_json parser performance.
llms.txt-crates/core/benches/parser_benchmarks.rs-//!
llms.txt-crates/core/benches/parser_benchmarks.rs-//! This benchmark suite measures various aspects of parser performance including:
llms.txt-crates/core/benches/parser_benchmarks.rs-//! - Basic parsing speed
--
llms.txt-crates/core/benches/parser_benchmarks.rs-
llms.txt-crates/core/benches/parser_benchmarks.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
llms.txt-crates/core/benches/parser_benchmarks.rs-use std::fs;
llms.txt:crates/core/benches/parser_benchmarks.rs:use vexy_json_core::{
llms.txt-crates/core/benches/parser_benchmarks.rs-    parse, parse_optimized, parse_optimized_v2,
llms.txt-crates/core/benches/parser_benchmarks.rs-    parse_optimized_with_options, parse_v2_with_stats, parse_with_stats, ParserOptions,
llms.txt-crates/core/benches/parser_benchmarks.rs-};
llms.txt---
llms.txt-crates/wasm/Cargo.toml-[package]
llms.txt:crates/wasm/Cargo.toml:name = "vexy_json-wasm"
llms.txt-crates/wasm/Cargo.toml-version = "2.2.3"
llms.txt-crates/wasm/Cargo.toml-edition = "2021"
llms.txt:crates/wasm/Cargo.toml:description = "WebAssembly bindings for vexy_json - a forgiving JSON parser"
llms.txt:crates/wasm/Cargo.toml:repository = "https://github.com/twardoch/vexy_json"
llms.txt-crates/wasm/Cargo.toml-license = "MIT OR Apache-2.0"
llms.txt-crates/wasm/Cargo.toml-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-crates/wasm/Cargo.toml-
--
llms.txt-crates/wasm/Cargo.toml-features = [ "derive" ]
llms.txt-crates/wasm/Cargo.toml-
llms.txt-crates/wasm/Cargo.toml-
llms.txt:crates/wasm/Cargo.toml:[dependencies.vexy_json-core]
llms.txt-crates/wasm/Cargo.toml-path = "../core"
llms.txt-crates/wasm/Cargo.toml-features = [ "serde" ]
llms.txt-crates/wasm/Cargo.toml-
llms.txt---
llms.txt:debug_test10.rs:use vexy_json::parse;
llms.txt-debug_test10.rs-
llms.txt-debug_test10.rs-fn main() {
llms.txt-debug_test10.rs-    // Test the exact failing case
--
llms.txt-crates/core/src/error/result.rs-
llms.txt-crates/core/src/error/result.rs-use super::types::Error;
llms.txt-crates/core/src/error/result.rs-
llms.txt:crates/core/src/error/result.rs:/// Convenience type alias for Results using vexy_json's Error type.
llms.txt-crates/core/src/error/result.rs-///
llms.txt-crates/core/src/error/result.rs-/// This makes function signatures more concise throughout the codebase
llms.txt-crates/core/src/error/result.rs-/// while maintaining type safety. Most parsing functions return this type.
llms.txt---
llms.txt:crates/core/final_benchmark_results.txt:   Compiling vexy_json-core v0.2.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/crates/core)
llms.txt-crates/core/final_benchmark_results.txt-warning: unnecessary qualification
llms.txt-crates/core/final_benchmark_results.txt-   --> crates/core/src/optimization/memory_pool.rs:157:34
llms.txt-crates/core/final_benchmark_results.txt-    |
--
llms.txt-crates/core/final_benchmark_results.txt-    |
llms.txt-crates/core/final_benchmark_results.txt-    = note: `#[warn(useless_ptr_null_checks)]` on by default
llms.txt-crates/core/final_benchmark_results.txt-
llms.txt:crates/core/final_benchmark_results.txt:warning: `vexy_json-core` (lib) generated 58 warnings (run `cargo fix --lib -p vexy_json-core` to apply 1 suggestion)
llms.txt-crates/core/final_benchmark_results.txt-warning: unused import: `parse_optimized_v2_with_options`
llms.txt-crates/core/final_benchmark_results.txt-  --> crates/core/benches/parser_benchmarks.rs:12:38
llms.txt-crates/core/final_benchmark_results.txt-   |
--
llms.txt-crates/core/final_benchmark_results.txt-55 |     pub const MALFORMED_JSON: &str = r#"{'name': 'John', age: 30, "items": [1, 2, 3,]}"#;
llms.txt-crates/core/final_benchmark_results.txt-   |               ^^^^^^^^^^^^^^
llms.txt-crates/core/final_benchmark_results.txt-
llms.txt:crates/core/final_benchmark_results.txt:warning: `vexy_json-core` (lib test) generated 59 warnings (58 duplicates)
llms.txt:crates/core/final_benchmark_results.txt:warning: `vexy_json-core` (bench "parser_benchmarks") generated 3 warnings (run `cargo fix --bench "parser_benchmarks"` to apply 1 suggestion)
llms.txt-crates/core/final_benchmark_results.txt-    Finished `bench` profile [optimized] target(s) in 1m 06s
llms.txt:crates/core/final_benchmark_results.txt:     Running unittests src/lib.rs (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/target/release/deps/vexy_json_core-61b1bad5e05d5e9e)
llms.txt-crates/core/final_benchmark_results.txt-
llms.txt-crates/core/final_benchmark_results.txt-running 100 tests
llms.txt-crates/core/final_benchmark_results.txt-test error::recovery::tests::test_number_format_fix ... ignored
--
llms.txt-crates/core/final_benchmark_results.txt-
llms.txt-crates/core/final_benchmark_results.txt-test result: ok. 0 passed; 0 failed; 100 ignored; 0 measured; 0 filtered out; finished in 0.00s
llms.txt-crates/core/final_benchmark_results.txt-
llms.txt:crates/core/final_benchmark_results.txt:     Running benches/parser_benchmarks.rs (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/target/release/deps/parser_benchmarks-6ba04f7e4c288a89)
llms.txt-crates/core/final_benchmark_results.txt-Gnuplot not found, using plotters backend
llms.txt-crates/core/final_benchmark_results.txt-Benchmarking basic_parsing/simple_object
llms.txt-crates/core/final_benchmark_results.txt-Benchmarking basic_parsing/simple_object: Warming up for 3.0000 s
--
llms.txt-CHANGELOG.md-### 🔧 Fixed
llms.txt-CHANGELOG.md-
llms.txt-CHANGELOG.md-#### Post-Migration Cleanup (v2.3.1)
llms.txt:CHANGELOG.md:- Fixed C API header struct naming mismatch: `vexy_json_parser_options` → `VexyJsonParserOptions`
llms.txt-CHANGELOG.md-- Fixed Python test file naming inconsistencies: `VexyJSONParser` → `VexyJsonParser`
llms.txt-CHANGELOG.md-- Added missing struct fields to enable compilation:
llms.txt-CHANGELOG.md-  - Added `confidence` field to `ContextRule` struct
--
llms.txt-CHANGELOG.md-  - Fixed unreachable patterns
llms.txt-CHANGELOG.md-
llms.txt-CHANGELOG.md-### 🚀 Added
llms.txt:CHANGELOG.md:- Created `vexify.py` tool for renaming project from vexy_json to vexy_json
llms.txt-CHANGELOG.md-  - Intelligent handling of different contexts (filenames, code, documentation)
llms.txt-CHANGELOG.md-  - Support for compound words (e.g., VexyJSONConfig → VexyJSONConfig)
llms.txt-CHANGELOG.md-  - Optional `--deep` flag for git history rewriting
--
llms.txt-CHANGELOG.md-
llms.txt-CHANGELOG.md-**Old (v1.x):**
llms.txt-CHANGELOG.md-```rust
llms.txt:CHANGELOG.md:use vexy_json::parse;
llms.txt-CHANGELOG.md-let value = parse(json_string)?;
llms.txt-CHANGELOG.md-```
llms.txt-CHANGELOG.md-
llms.txt-CHANGELOG.md-**New (v2.0) - Still Compatible:**
llms.txt-CHANGELOG.md-```rust
llms.txt:CHANGELOG.md:use vexy_json::parse;
llms.txt-CHANGELOG.md-let value = parse(json_string)?; // Still works!
llms.txt-CHANGELOG.md-```
llms.txt-CHANGELOG.md-
llms.txt-CHANGELOG.md-**New (v2.0) - Enhanced Features:**
llms.txt-CHANGELOG.md-```rust
llms.txt:CHANGELOG.md:use vexy_json::{parse_with_options, ParserOptions};
llms.txt:CHANGELOG.md:use vexy_json::streaming::StreamingParser;
llms.txt:CHANGELOG.md:use vexy_json::parallel_chunked::parse_parallel_chunked;
llms.txt-CHANGELOG.md-
llms.txt-CHANGELOG.md-// Advanced options
llms.txt-CHANGELOG.md-let options = ParserOptions {
--
llms.txt-CHANGELOG.md-
llms.txt-CHANGELOG.md-### Release Links
llms.txt-CHANGELOG.md-
llms.txt:CHANGELOG.md:[2.0.0]: https://github.com/twardoch/vexy_json/compare/v1.5.27...v2.0.0
llms.txt:CHANGELOG.md:[1.5.27]: https://github.com/twardoch/vexy_json/compare/v1.5.26...v1.5.27
llms.txt:CHANGELOG.md:[1.5.26]: https://github.com/twardoch/vexy_json/compare/v1.5.25...v1.5.26
llms.txt:CHANGELOG.md:[1.5.25]: https://github.com/twardoch/vexy_json/compare/v1.5.24...v1.5.25
llms.txt:CHANGELOG.md:[1.5.24]: https://github.com/twardoch/vexy_json/compare/v1.5.23...v1.5.24
llms.txt:CHANGELOG.md:[1.5.23]: https://github.com/twardoch/vexy_json/releases/tag/v1.5.23
llms.txt:CHANGELOG.md:[Unreleased]: https://github.com/twardoch/vexy_json/compare/v2.0.0...HEAD
llms.txt---
llms.txt:crates/core/benchmark_results_v2.txt:   Compiling vexy_json-core v0.2.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/crates/core)
llms.txt-crates/core/benchmark_results_v2.txt-warning: unnecessary qualification
llms.txt-crates/core/benchmark_results_v2.txt-   --> crates/core/src/optimization/memory_pool.rs:157:34
llms.txt-crates/core/benchmark_results_v2.txt-    |
--
llms.txt-crates/core/benchmark_results_v2.txt-
llms.txt-crates/core/benchmark_results_v2.txt-Some errors have detailed explanations: E0505, E0515.
llms.txt-crates/core/benchmark_results_v2.txt-For more information about an error, try `rustc --explain E0505`.
llms.txt:crates/core/benchmark_results_v2.txt:warning: `vexy_json-core` (lib) generated 3 warnings
llms.txt:crates/core/benchmark_results_v2.txt:error: could not compile `vexy_json-core` (lib) due to 4 previous errors; 3 warnings emitted
llms.txt-crates/core/benchmark_results_v2.txt-warning: build failed, waiting for other jobs to finish...
llms.txt:crates/core/benchmark_results_v2.txt:warning: `vexy_json-core` (lib test) generated 3 warnings (3 duplicates)
llms.txt:crates/core/benchmark_results_v2.txt:error: could not compile `vexy_json-core` (lib test) due to 4 previous errors; 3 warnings emitted
llms.txt---
llms.txt-oss-fuzz/README.md-To set up OSS-Fuzz integration:
llms.txt-oss-fuzz/README.md-
llms.txt-oss-fuzz/README.md-1. Fork the [OSS-Fuzz repository](https://github.com/google/oss-fuzz)
llms.txt:oss-fuzz/README.md:2. Create a new directory under `projects/vexy_json/`
llms.txt:oss-fuzz/README.md:3. Copy the files from this directory to `projects/vexy_json/`
llms.txt-oss-fuzz/README.md-4. Submit a pull request to the OSS-Fuzz repository
llms.txt-oss-fuzz/README.md-
llms.txt-oss-fuzz/README.md-## Testing Locally
--
llms.txt-oss-fuzz/README.md-cd oss-fuzz
llms.txt-oss-fuzz/README.md-
llms.txt-oss-fuzz/README.md-# Copy project files
llms.txt:oss-fuzz/README.md:cp -r /path/to/vexy_json/oss-fuzz projects/vexy_json/
llms.txt-oss-fuzz/README.md-
llms.txt-oss-fuzz/README.md-# Build the project
llms.txt:oss-fuzz/README.md:python infra/helper.py build_image vexy_json
llms.txt:oss-fuzz/README.md:python infra/helper.py build_fuzzers vexy_json
llms.txt-oss-fuzz/README.md-
llms.txt-oss-fuzz/README.md-# Run fuzzers
llms.txt:oss-fuzz/README.md:python infra/helper.py run_fuzzer vexy_json json_structure
llms.txt-oss-fuzz/README.md-```
llms.txt-oss-fuzz/README.md-
llms.txt-oss-fuzz/README.md-## Fuzzing Targets
--
llms.txt-oss-fuzz/README.md-## Coverage
llms.txt-oss-fuzz/README.md-
llms.txt-oss-fuzz/README.md-Coverage reports are automatically generated and can be viewed at:
llms.txt:oss-fuzz/README.md:https://storage.googleapis.com/oss-fuzz-coverage/vexy_json/latest/index.html
llms.txt-oss-fuzz/README.md-
llms.txt-oss-fuzz/README.md-## Bug Reports
llms.txt-oss-fuzz/README.md-
--
llms.txt-WORK.md-#### Phase 0: Critical Fixes (Completed)
llms.txt-WORK.md-
llms.txt-WORK.md-1. **Fixed C API struct naming mismatch**
llms.txt:WORK.md:   - Changed `vexy_json_parser_options` to `VexyJsonParserOptions` in vexy_json.h:135
llms.txt-WORK.md-   - This prevents C/C++ linking failures
llms.txt-WORK.md-
llms.txt-WORK.md-2. **Fixed Python test naming issues**
llms.txt:WORK.md:   - Updated test_vexy_json.py to use `VexyJSON` instead of `VEXYJSON`
llms.txt-WORK.md-   - Fixed imports: `VEXYJSONParser` → `VexyJSONParser`, `VEXYJSONConfig` → `VexyJSONConfig`
llms.txt-WORK.md-   - Fixed class name: `VEXYJSONWrapper` → `VexyJSONWrapper`
llms.txt-WORK.md-
--
llms.txt-WORK.md-### Build Output Summary
llms.txt-WORK.md-
llms.txt-WORK.md-```
llms.txt:WORK.md:cargo build --package vexy_json-core --package vexy_json-cli
llms.txt-WORK.md-Finished `dev` profile [unoptimized + debuginfo] target(s) in 9.59s
llms.txt:WORK.md:warning: `vexy_json-core` (lib) generated 24 warnings
llms.txt-WORK.md-```
llms.txt-WORK.md-
llms.txt-WORK.md-### 🔄 Current Work Items
llms.txt---
llms.txt:issues/106.txt:# JSON Repair Integration Specification for vexy_json
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-## Executive Summary
llms.txt-issues/106.txt-
llms.txt:issues/106.txt:This document provides a detailed specification for integrating the `json-repair` crate into the vexy_json project to handle mismatched brackets and braces - a limitation that neither our `vexy_json` nor the original `jsonic` parser can currently overcome. The integration will implement a three-tier parsing approach with performance-optimized fallback chains.
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-## 1. Problem Statement
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-### Current Limitations
llms.txt:issues/106.txt:- Both `vexy_json` and `jsonic` fail on mismatched brackets/braces (e.g., `{key: "value"]`, `[1, 2, 3}`)
llms.txt-issues/106.txt-- No error recovery mechanism for structural delimiter mismatches
llms.txt-issues/106.txt-- Complete parsing failure rather than partial recovery with error reporting
llms.txt-issues/106.txt-- Missing brackets at end-of-input cause total failure
--
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-```
llms.txt-issues/106.txt-Input JSON → Tier 1: Fast Path → Tier 2: Forgiving Path → Tier 3: Repair Path → Output
llms.txt:issues/106.txt:             (serde_json)      (vexy_json core)         (json-repair)
llms.txt-issues/106.txt-```
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-**Tier 1: Fast Path (serde_json)**
--
llms.txt-issues/106.txt-- Zero-copy optimization where possible
llms.txt-issues/106.txt-- Immediate failure on any syntax error
llms.txt-issues/106.txt-
llms.txt:issues/106.txt:**Tier 2: Forgiving Path (vexy_json core)**
llms.txt:issues/106.txt:- Current vexy_json parser with all forgiving features
llms.txt-issues/106.txt-- Handles comments, trailing commas, unquoted keys, etc.
llms.txt-issues/106.txt-- Fails on bracket mismatches
llms.txt-issues/106.txt-
--
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-### Version Compatibility
llms.txt-issues/106.txt-- `json-repair` 0.2.x: Stable API, bracket balancing, minimal dependencies
llms.txt:issues/106.txt:- Compatible with current `vexy_json` dependency stack
llms.txt-issues/106.txt-- No conflicting dependencies identified
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-## 4. Core Implementation
--
llms.txt-issues/106.txt-#[derive(Debug, Clone)]
llms.txt-issues/106.txt-pub enum ParsingTier {
llms.txt-issues/106.txt-    Fast,      // serde_json succeeded
llms.txt:issues/106.txt:    Forgiving, // vexy_json succeeded
llms.txt-issues/106.txt-    Repair,    // json-repair succeeded
llms.txt-issues/106.txt-}
llms.txt-issues/106.txt-
--
llms.txt-issues/106.txt-        };
llms.txt-issues/106.txt-    }
llms.txt-issues/106.txt-
llms.txt:issues/106.txt:    // Tier 2: Forgiving Path - vexy_json core
llms.txt-issues/106.txt-    match parse_with_options(input, options) {
llms.txt-issues/106.txt-        Ok(value) => {
llms.txt-issues/106.txt-            return ParseResult {
--
llms.txt-issues/106.txt-            // Track what repairs were made
llms.txt-issues/106.txt-            repairs.extend(detect_repairs(input, &repaired_json));
llms.txt-issues/106.txt-
llms.txt:issues/106.txt:            // Parse the repaired JSON with vexy_json
llms.txt-issues/106.txt-            match parse_with_options(&repaired_json, options) {
llms.txt-issues/106.txt-                Ok(value) => ParseResult {
llms.txt-issues/106.txt-                    value,
--
llms.txt-issues/106.txt-```rust
llms.txt-issues/106.txt-// In crates/cli/src/main.rs
llms.txt-issues/106.txt-#[derive(Parser)]
llms.txt:issues/106.txt:#[command(name = "vexy_json")]
llms.txt-issues/106.txt-struct Cli {
llms.txt-issues/106.txt-    // ... existing options ...
llms.txt-issues/106.txt-    
--
llms.txt-issues/106.txt-// In tests/repair_integration.rs
llms.txt-issues/106.txt-#[cfg(test)]
llms.txt-issues/106.txt-mod integration_tests {
llms.txt:issues/106.txt:    use vexy_json::{parse_with_fallback, ParserOptions, ParsingTier};
llms.txt-issues/106.txt-    
llms.txt-issues/106.txt-    #[test]
llms.txt-issues/106.txt-    fn test_complex_bracket_mismatch() {
--
llms.txt-issues/106.txt-```rust
llms.txt-issues/106.txt-// In benches/repair_benchmark.rs
llms.txt-issues/106.txt-use criterion::{black_box, criterion_group, criterion_main, Criterion};
llms.txt:issues/106.txt:use vexy_json::{parse_with_fallback, ParserOptions};
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-fn bench_parsing_tiers(c: &mut Criterion) {
llms.txt-issues/106.txt-    let mut group = c.benchmark_group("parsing_tiers");
--
llms.txt-issues/106.txt-```markdown
llms.txt-issues/106.txt-## Enhanced Error Recovery
llms.txt-issues/106.txt-
llms.txt:issues/106.txt:vexy_json now features advanced error recovery capabilities that can handle mismatched brackets and braces:
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-```rust
llms.txt:issues/106.txt:use vexy_json::{parse_with_fallback, ParserOptions};
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-// This will now succeed with automatic repair
llms.txt-issues/106.txt-let broken_json = r#"{"key": "value"]"#;
--
llms.txt-issues/106.txt-### Three-Tier Parsing
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-1. **Fast Tier**: Uses `serde_json` for maximum performance on valid JSON
llms.txt:issues/106.txt:2. **Forgiving Tier**: Uses vexy_json's forgiving features for relaxed JSON syntax
llms.txt-issues/106.txt-3. **Repair Tier**: Uses `json-repair` for automatic bracket balancing and error correction
llms.txt-issues/106.txt-```
llms.txt-issues/106.txt-
--
llms.txt-issues/106.txt-///
llms.txt-issues/106.txt-/// This function implements a three-tier parsing strategy:
llms.txt-issues/106.txt-/// 1. Fast path using `serde_json` for valid JSON
llms.txt:issues/106.txt:/// 2. Forgiving path using vexy_json's tolerant parsing
llms.txt-issues/106.txt-/// 3. Repair path using `json-repair` for bracket mismatches
llms.txt-issues/106.txt-///
llms.txt-issues/106.txt-/// # Examples
llms.txt-issues/106.txt-///
llms.txt-issues/106.txt-/// ```rust
llms.txt:issues/106.txt:/// use vexy_json::{parse_with_fallback, ParserOptions};
llms.txt-issues/106.txt-///
llms.txt-issues/106.txt-/// // Valid JSON - uses fast path
llms.txt-issues/106.txt-/// let valid = r#"{"key": "value"}"#;
--
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-```rust
llms.txt-issues/106.txt-// This still works exactly as before
llms.txt:issues/106.txt:let value = vexy_json::parse(r#"{"key": "value"}"#)?;
llms.txt-issues/106.txt-```
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-### 11.2 New Features Adoption
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-```rust
llms.txt-issues/106.txt-// Opt into new features gradually
llms.txt:issues/106.txt:use vexy_json::{parse_with_fallback, ParserOptions};
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-// Enable repair with configuration
llms.txt-issues/106.txt-let options = ParserOptions {
--
llms.txt-issues/106.txt-
llms.txt-issues/106.txt-## 15. Conclusion
llms.txt-issues/106.txt-
llms.txt:issues/106.txt:This specification provides a comprehensive roadmap for integrating `json-repair` into vexy_json while maintaining backward compatibility and performance. The three-tier parsing approach ensures optimal performance for valid JSON while providing robust error recovery for malformed input.
llms.txt-issues/106.txt-
llms.txt:issues/106.txt:The implementation will significantly expand vexy_json's capabilities while maintaining its core design principles of being fast, forgiving, and user-friendly.
llms.txt---
llms.txt-crates/core/src/error/mod.rs-// this_file: src/error/mod.rs
llms.txt-crates/core/src/error/mod.rs-
llms.txt:crates/core/src/error/mod.rs://! Error handling module for vexy_json parser.
llms.txt-crates/core/src/error/mod.rs-//!
llms.txt-crates/core/src/error/mod.rs-//! This module provides comprehensive error handling capabilities including:
llms.txt-crates/core/src/error/mod.rs-//! - Structured error codes with unique identifiers
llms.txt---
llms.txt:crates/core/examples/advanced_repair.rs:use vexy_json_core::repair::{AdvancedJsonRepairer, TypeCoercionRules};
llms.txt-crates/core/examples/advanced_repair.rs-
llms.txt-crates/core/examples/advanced_repair.rs-fn main() {
llms.txt-crates/core/examples/advanced_repair.rs-    println!("=== Vexy JSON Advanced Repair Examples ===\n");
--
llms.txt-crates/core/src/lib.rs-    unused_qualifications
llms.txt-crates/core/src/lib.rs-)]
llms.txt-crates/core/src/lib.rs-
llms.txt:crates/core/src/lib.rs://! Core parsing logic for vexy_json, a forgiving JSON parser.
llms.txt-crates/core/src/lib.rs-
llms.txt:crates/core/src/lib.rs:/// Abstract Syntax Tree components for vexy_json parsing.
llms.txt-crates/core/src/lib.rs-pub mod ast;
llms.txt-crates/core/src/lib.rs-
llms.txt:crates/core/src/lib.rs:/// Error types and result type alias for the vexy_json parser.
llms.txt-crates/core/src/lib.rs-pub mod error;
llms.txt-crates/core/src/lib.rs-
llms.txt:crates/core/src/lib.rs:/// Lexical analyzer (tokenizer) for vexy_json parsing.
llms.txt-crates/core/src/lib.rs-pub mod lexer;
llms.txt-crates/core/src/lib.rs-
llms.txt-crates/core/src/lib.rs-/// Parser implementation for converting tokens to JSON values.
llms.txt---
llms.txt-crates/core/Cargo.toml-[package]
llms.txt:crates/core/Cargo.toml:name = "vexy_json-core"
llms.txt-crates/core/Cargo.toml-version = "2.2.3"
llms.txt-crates/core/Cargo.toml-edition = "2021"
llms.txt-crates/core/Cargo.toml-
--
llms.txt-oss-fuzz/Dockerfile-    && rm -rf /var/lib/apt/lists/*
llms.txt-oss-fuzz/Dockerfile-
llms.txt-oss-fuzz/Dockerfile-# Copy the project source
llms.txt:oss-fuzz/Dockerfile:COPY . $SRC/vexy_json
llms.txt-oss-fuzz/Dockerfile-
llms.txt-oss-fuzz/Dockerfile-# Set the working directory
llms.txt:oss-fuzz/Dockerfile:WORKDIR $SRC/vexy_json
llms.txt-oss-fuzz/Dockerfile-
llms.txt-oss-fuzz/Dockerfile-# Copy the build script
llms.txt-oss-fuzz/Dockerfile-COPY oss-fuzz/build.sh $SRC/build.sh
--
llms.txt-docs/tool.md-- Plugin system support
llms.txt-docs/tool.md-
llms.txt-docs/tool.md-<div style="text-align: center; margin: 2em 0;">
llms.txt:docs/tool.md:  <a href="{{ '/vexy_json-tool/' | relative_url }}" class="btn btn-primary" style="font-size: 1.1em; padding: 0.7em 1.5em; margin: 0.5em;">
llms.txt-docs/tool.md-    🚀 Vexy JSON Tool
llms.txt-docs/tool.md-  </a>
llms.txt-docs/tool.md-  <a href="{{ '/jsonic-tool/' | relative_url }}" class="btn btn-secondary" style="font-size: 1.1em; padding: 0.7em 1.5em; margin: 0.5em;">
--
llms.txt-docs/tool.md-- ✅ **Dark/light themes** - Choose your preferred color scheme
llms.txt-docs/tool.md-- ✅ **Mobile responsive** - Works on all devices
llms.txt-docs/tool.md-
llms.txt:docs/tool.md:## [∞](#vexy_json-specific-features) Vexy JSON Specific Features
llms.txt-docs/tool.md-
llms.txt-docs/tool.md-- Single-line comments (`//` and `#`)
llms.txt-docs/tool.md-- Multi-line comments (`/* */`)
llms.txt---
llms.txt-crates/python/src/lib.rs-// this_file: crates/python/src/lib.rs
llms.txt-crates/python/src/lib.rs-
llms.txt:crates/python/src/lib.rs://! Python bindings for vexy_json - a forgiving JSON parser.
llms.txt-crates/python/src/lib.rs-//!
llms.txt:crates/python/src/lib.rs://! This module provides Python bindings for the vexy_json library using PyO3,
llms.txt-crates/python/src/lib.rs-//! allowing Python users to parse forgiving JSON with the same capabilities
llms.txt-crates/python/src/lib.rs-//! as the Rust library.
llms.txt-crates/python/src/lib.rs-
llms.txt-crates/python/src/lib.rs-use pyo3::prelude::*;
llms.txt-crates/python/src/lib.rs-use pyo3::types::{PyDict, PyList};
llms.txt-crates/python/src/lib.rs-use pyo3::exceptions::{PyValueError, PyTypeError};
llms.txt:crates/python/src/lib.rs:use vexy_json_core::{parse, parse_with_options, ParserOptions};
llms.txt:crates/python/src/lib.rs:use vexy_json_core::ast::Value;
llms.txt-crates/python/src/lib.rs-use rustc_hash::FxHashMap;
llms.txt-crates/python/src/lib.rs-
llms.txt:crates/python/src/lib.rs:/// Convert a vexy_json Value to a Python object
llms.txt-crates/python/src/lib.rs-fn value_to_python(py: Python, value: &Value) -> PyResult<PyObject> {
llms.txt-crates/python/src/lib.rs-    match value {
llms.txt-crates/python/src/lib.rs-        Value::Null => Ok(py.None()),
llms.txt-crates/python/src/lib.rs-        Value::Bool(b) => Ok(b.to_object(py)),
llms.txt-crates/python/src/lib.rs-        Value::Number(num) => match num {
llms.txt:crates/python/src/lib.rs:            vexy_json_core::ast::Number::Integer(i) => Ok(i.to_object(py)),
llms.txt:crates/python/src/lib.rs:            vexy_json_core::ast::Number::Float(f) => Ok(f.to_object(py)),
llms.txt-crates/python/src/lib.rs-        },
llms.txt-crates/python/src/lib.rs-        Value::String(s) => Ok(s.to_object(py)),
llms.txt-crates/python/src/lib.rs-        Value::Array(arr) => {
--
llms.txt-crates/python/src/lib.rs-    }
llms.txt-crates/python/src/lib.rs-}
llms.txt-crates/python/src/lib.rs-
llms.txt:crates/python/src/lib.rs:/// Convert a Python object to a vexy_json Value
llms.txt-crates/python/src/lib.rs-fn python_to_value(py: Python, obj: &Bound<'_, PyAny>) -> PyResult<Value> {
llms.txt-crates/python/src/lib.rs-    if obj.is_none() {
llms.txt-crates/python/src/lib.rs-        Ok(Value::Null)
llms.txt-crates/python/src/lib.rs-    } else if let Ok(b) = obj.extract::<bool>() {
llms.txt-crates/python/src/lib.rs-        Ok(Value::Bool(b))
llms.txt-crates/python/src/lib.rs-    } else if let Ok(i) = obj.extract::<i64>() {
llms.txt:crates/python/src/lib.rs:        Ok(Value::Number(vexy_json_core::ast::Number::Integer(i)))
llms.txt-crates/python/src/lib.rs-    } else if let Ok(f) = obj.extract::<f64>() {
llms.txt:crates/python/src/lib.rs:        Ok(Value::Number(vexy_json_core::ast::Number::Float(f)))
llms.txt-crates/python/src/lib.rs-    } else if let Ok(s) = obj.extract::<String>() {
llms.txt-crates/python/src/lib.rs-        Ok(Value::String(s))
llms.txt-crates/python/src/lib.rs-    } else if let Ok(list) = obj.downcast::<PyList>() {
--
llms.txt-crates/python/src/lib.rs-        Ok(Value::Object(map))
llms.txt-crates/python/src/lib.rs-    } else {
llms.txt-crates/python/src/lib.rs-        Err(PyTypeError::new_err(format!(
llms.txt:crates/python/src/lib.rs:            "Cannot convert Python object of type {} to vexy_json Value",
llms.txt-crates/python/src/lib.rs-            obj.get_type().name()?
llms.txt-crates/python/src/lib.rs-        )))
llms.txt-crates/python/src/lib.rs-    }
--
llms.txt-crates/python/src/lib.rs-///     ValueError: If the input is not valid JSON
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt:crates/python/src/lib.rs:///     >>> result = vexy_json.parse('{"key": "value", trailing: true,}')
llms.txt-crates/python/src/lib.rs-///     >>> print(result)
llms.txt-crates/python/src/lib.rs-///     {'key': 'value', 'trailing': True}
llms.txt-crates/python/src/lib.rs-#[pyfunction]
--
llms.txt-crates/python/src/lib.rs-///     ValueError: If the input is not valid JSON
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt:crates/python/src/lib.rs:///     >>> result = vexy_json.parse_with_options('key: value', implicit_top_level=True)
llms.txt-crates/python/src/lib.rs-///     >>> print(result)
llms.txt-crates/python/src/lib.rs-///     {'key': 'value'}
llms.txt-crates/python/src/lib.rs-#[pyfunction]
--
llms.txt-crates/python/src/lib.rs-///     bool: True if the input is valid, False otherwise
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt:crates/python/src/lib.rs:///     >>> vexy_json.is_valid('{"valid": true}')
llms.txt-crates/python/src/lib.rs-///     True
llms.txt:crates/python/src/lib.rs:///     >>> vexy_json.is_valid('invalid json')
llms.txt-crates/python/src/lib.rs-///     False
llms.txt-crates/python/src/lib.rs-#[pyfunction]
llms.txt-crates/python/src/lib.rs-fn is_valid(input: &str) -> bool {
--
llms.txt-crates/python/src/lib.rs-///     TypeError: If the object cannot be serialized to JSON
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt-crates/python/src/lib.rs-///     >>> data = {'key': 'value', 'number': 42}
llms.txt:crates/python/src/lib.rs:///     >>> vexy_json.dumps(data)
llms.txt-crates/python/src/lib.rs-///     '{"key":"value","number":42}'
llms.txt:crates/python/src/lib.rs:///     >>> vexy_json.dumps(data, indent=2)
llms.txt-crates/python/src/lib.rs-///     '{\n  "key": "value",\n  "number": 42\n}'
llms.txt-crates/python/src/lib.rs-#[pyfunction]
llms.txt-crates/python/src/lib.rs-#[pyo3(signature = (obj, indent = None))]
--
llms.txt-crates/python/src/lib.rs-        Value::Null => "null".to_string(),
llms.txt-crates/python/src/lib.rs-        Value::Bool(b) => b.to_string(),
llms.txt-crates/python/src/lib.rs-        Value::Number(num) => match num {
llms.txt:crates/python/src/lib.rs:            vexy_json_core::ast::Number::Integer(i) => i.to_string(),
llms.txt:crates/python/src/lib.rs:            vexy_json_core::ast::Number::Float(f) => f.to_string(),
llms.txt-crates/python/src/lib.rs-        },
llms.txt-crates/python/src/lib.rs-        Value::String(s) => format!("\"{}\"", s.replace("\"", "\\\"")),
llms.txt-crates/python/src/lib.rs-        Value::Array(arr) => {
--
llms.txt-crates/python/src/lib.rs-///     ValueError: If the content is not valid JSON
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt-crates/python/src/lib.rs-///     >>> with open('data.json', 'r') as f:
llms.txt:crates/python/src/lib.rs:///     ...     result = vexy_json.load(f)
llms.txt-crates/python/src/lib.rs-#[pyfunction]
llms.txt-crates/python/src/lib.rs-#[pyo3(signature = (fp, **kwargs))]
llms.txt-crates/python/src/lib.rs-fn load(py: Python, fp: &Bound<'_, PyAny>, kwargs: Option<&Bound<'_, PyDict>>) -> PyResult<PyObject> {
--
llms.txt-crates/python/src/lib.rs-///     TypeError: If the object cannot be serialized
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt-crates/python/src/lib.rs-///     >>> data = {'key': 'value'}
llms.txt-crates/python/src/lib.rs-///     >>> with open('output.json', 'w') as f:
llms.txt:crates/python/src/lib.rs:///     ...     vexy_json.dump(data, f, indent=2)
llms.txt-crates/python/src/lib.rs-#[pyfunction]
llms.txt-crates/python/src/lib.rs-#[pyo3(signature = (obj, fp, indent = None))]
llms.txt-crates/python/src/lib.rs-fn dump(py: Python, obj: &Bound<'_, PyAny>, fp: &Bound<'_, PyAny>, indent: Option<usize>) -> PyResult<()> {
--
llms.txt-crates/python/src/lib.rs-/// JSON files or streams.
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt:crates/python/src/lib.rs:///     >>> with vexy_json.StreamingParser() as parser:
llms.txt-crates/python/src/lib.rs-///     ...     for item in parser.parse_stream(file_handle):
llms.txt-crates/python/src/lib.rs-///     ...         print(item)
llms.txt-crates/python/src/lib.rs-#[pyclass]
--
llms.txt-crates/python/src/lib.rs-    ///     Iterator of parsed JSON objects
llms.txt-crates/python/src/lib.rs-    ///
llms.txt-crates/python/src/lib.rs-    /// Example:
llms.txt:crates/python/src/lib.rs:    ///     >>> with vexy_json.StreamingParser() as parser:
llms.txt-crates/python/src/lib.rs-    ///     ...     for item in parser.parse_stream(file_handle):
llms.txt-crates/python/src/lib.rs-    ///     ...         process(item)
llms.txt-crates/python/src/lib.rs-    fn parse_stream(&mut self, _py: Python, fp: &Bound<'_, PyAny>) -> PyResult<StreamingIterator> {
--
llms.txt-crates/python/src/lib.rs-    ///     Iterator of parsed JSON objects
llms.txt-crates/python/src/lib.rs-    ///
llms.txt-crates/python/src/lib.rs-    /// Example:
llms.txt:crates/python/src/lib.rs:    ///     >>> with vexy_json.StreamingParser() as parser:
llms.txt-crates/python/src/lib.rs-    ///     ...     for item in parser.parse_lines(file_handle):
llms.txt-crates/python/src/lib.rs-    ///     ...         process(item)
llms.txt-crates/python/src/lib.rs-    fn parse_lines(&mut self, _py: Python, fp: &Bound<'_, PyAny>) -> PyResult<LineIterator> {
--
llms.txt-crates/python/src/lib.rs-///     ImportError: If NumPy is not available
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt:crates/python/src/lib.rs:///     >>> arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-crates/python/src/lib.rs-///     >>> print(type(arr))
llms.txt-crates/python/src/lib.rs-///     <class 'numpy.ndarray'>
llms.txt-crates/python/src/lib.rs-#[pyfunction]
--
llms.txt-crates/python/src/lib.rs-                // Fast path for numeric arrays
llms.txt-crates/python/src/lib.rs-                let numbers: Vec<f64> = arr.iter().map(|v| {
llms.txt-crates/python/src/lib.rs-                    match v {
llms.txt:crates/python/src/lib.rs:                        Value::Number(vexy_json_core::ast::Number::Integer(i)) => *i as f64,
llms.txt:crates/python/src/lib.rs:                        Value::Number(vexy_json_core::ast::Number::Float(f)) => *f,
llms.txt-crates/python/src/lib.rs-                        _ => 0.0, // Should not happen due to all_numbers check
llms.txt-crates/python/src/lib.rs-                    }
llms.txt-crates/python/src/lib.rs-                }).collect();
--
llms.txt-crates/python/src/lib.rs-///     numpy.ndarray: The parsed array with zero-copy optimization when possible
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt:crates/python/src/lib.rs:///     >>> arr = vexy_json.loads_numpy_zerocopy('[1.0, 2.0, 3.0]', dtype='float64')
llms.txt-crates/python/src/lib.rs-#[pyfunction]
llms.txt-crates/python/src/lib.rs-#[pyo3(signature = (input, dtype = None))]
llms.txt-crates/python/src/lib.rs-fn loads_numpy_zerocopy(py: Python, input: &str, dtype: Option<&str>) -> PyResult<PyObject> {
--
llms.txt-crates/python/src/lib.rs-            
llms.txt-crates/python/src/lib.rs-            for item in &arr {
llms.txt-crates/python/src/lib.rs-                match item {
llms.txt:crates/python/src/lib.rs:                    Value::Number(vexy_json_core::ast::Number::Integer(_)) => {
llms.txt-crates/python/src/lib.rs-                        all_floats = false;
llms.txt-crates/python/src/lib.rs-                    }
llms.txt:crates/python/src/lib.rs:                    Value::Number(vexy_json_core::ast::Number::Float(_)) => {
llms.txt-crates/python/src/lib.rs-                        all_integers = false;
llms.txt-crates/python/src/lib.rs-                    }
llms.txt-crates/python/src/lib.rs-                    _ => {
--
llms.txt-crates/python/src/lib.rs-                // Zero-copy path for integers
llms.txt-crates/python/src/lib.rs-                let integers: Vec<i64> = arr.iter().map(|v| {
llms.txt-crates/python/src/lib.rs-                    match v {
llms.txt:crates/python/src/lib.rs:                        Value::Number(vexy_json_core::ast::Number::Integer(i)) => *i,
llms.txt-crates/python/src/lib.rs-                        _ => 0, // Should not happen
llms.txt-crates/python/src/lib.rs-                    }
llms.txt-crates/python/src/lib.rs-                }).collect();
--
llms.txt-crates/python/src/lib.rs-                // Zero-copy path for floats or mixed numbers
llms.txt-crates/python/src/lib.rs-                let floats: Vec<f64> = arr.iter().map(|v| {
llms.txt-crates/python/src/lib.rs-                    match v {
llms.txt:crates/python/src/lib.rs:                        Value::Number(vexy_json_core::ast::Number::Integer(i)) => *i as f64,
llms.txt:crates/python/src/lib.rs:                        Value::Number(vexy_json_core::ast::Number::Float(f)) => *f,
llms.txt-crates/python/src/lib.rs-                        _ => 0.0, // Should not happen
llms.txt-crates/python/src/lib.rs-                    }
llms.txt-crates/python/src/lib.rs-                }).collect();
--
llms.txt-crates/python/src/lib.rs-///     pandas.DataFrame: The parsed JSON as a DataFrame
llms.txt-crates/python/src/lib.rs-///
llms.txt-crates/python/src/lib.rs-/// Example:
llms.txt:crates/python/src/lib.rs:///     >>> import vexy_json
llms.txt:crates/python/src/lib.rs:///     >>> df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
llms.txt-crates/python/src/lib.rs-///     >>> print(type(df))
llms.txt-crates/python/src/lib.rs-///     <class 'pandas.core.frame.DataFrame'>
llms.txt-crates/python/src/lib.rs-#[pyfunction]
--
llms.txt-crates/python/src/lib.rs-
llms.txt-crates/python/src/lib.rs-/// A Python module for parsing forgiving JSON
llms.txt-crates/python/src/lib.rs-#[pymodule]
llms.txt:crates/python/src/lib.rs:fn _vexy_json(m: &Bound<'_, PyModule>) -> PyResult<()> {
llms.txt-crates/python/src/lib.rs-    m.add_function(wrap_pyfunction!(parse_json, m)?)?;
llms.txt-crates/python/src/lib.rs-    m.add_function(wrap_pyfunction!(parse_with_options_py, m)?)?;
llms.txt-crates/python/src/lib.rs-    m.add_function(wrap_pyfunction!(is_valid, m)?)?;
--
llms.txt-crates/python/src/lib.rs-    // Add version information
llms.txt-crates/python/src/lib.rs-    m.add("__version__", env!("VEXY_JSON_VERSION", env!("CARGO_PKG_VERSION")))?;
llms.txt-crates/python/src/lib.rs-    m.add("__author__", "Adam Twardoch")?;
llms.txt:crates/python/src/lib.rs:    m.add("__description__", "A forgiving JSON parser - Python bindings for vexy_json")?;
llms.txt-crates/python/src/lib.rs-    
llms.txt-crates/python/src/lib.rs-    Ok(())
llms.txt-crates/python/src/lib.rs-}
--
llms.txt-docs/json-repair.md-### Simple Usage
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::repair::JsonRepairer;
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-let mut repairer = JsonRepairer::new(10); // Max 10 repairs
llms.txt-docs/json-repair.md-let malformed = r#"{"key": "value", "missing": "quote}"#;
--
llms.txt-docs/json-repair.md-### Configuration
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::repair::advanced::{AdvancedJsonRepairer, TypeCoercionRules};
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-let mut repairer = AdvancedJsonRepairer::new()
llms.txt-docs/json-repair.md-    .with_confidence_threshold(0.7)
--
llms.txt-docs/json-repair.md-Each repair strategy has a confidence score:
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::repair::advanced::RepairConfidence;
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-let (fixed, strategies) = repairer.repair(input)?;
llms.txt-docs/json-repair.md-
--
llms.txt-docs/json-repair.md-### Detailed Repair Tracking
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::parser::parse_with_detailed_repair_tracking;
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-let result = parse_with_detailed_repair_tracking(input, options)?;
llms.txt-docs/json-repair.md-
--
llms.txt-docs/json-repair.md-3. **Repair Tier**: Automatic repair for malformed JSON
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::parser::parse_with_fallback;
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-let result = parse_with_fallback(input, options);
llms.txt-docs/json-repair.md-// Automatically tries all three tiers
--
llms.txt-docs/json-repair.md-### Tracking Repair History
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::repair::advanced::AdvancedJsonRepairer;
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-let mut repairer = AdvancedJsonRepairer::new();
llms.txt-docs/json-repair.md-
--
llms.txt-docs/json-repair.md-### Implementing Custom Repairs
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::repair::advanced::{RepairStrategy, RepairAction, RepairType, RepairConfidence};
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-fn create_custom_repair(input: &str) -> Option<RepairStrategy> {
llms.txt-docs/json-repair.md-    // Custom logic to detect and fix specific issues
--
llms.txt-docs/json-repair.md-### Automatic Repair During Parsing
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::{parse_with_options, ParserOptions};
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-let options = ParserOptions {
llms.txt-docs/json-repair.md-    enable_repair: true,
--
llms.txt-docs/json-repair.md-### Repair-First Parsing
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::parser::parse_with_fallback;
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-// Always try repair if normal parsing fails
llms.txt-docs/json-repair.md-let result = parse_with_fallback(input, options);
--
llms.txt-docs/json-repair.md-### Repair Failures
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-```rust
llms.txt:docs/json-repair.md:use vexy_json_core::repair::JsonRepairer;
llms.txt-docs/json-repair.md-
llms.txt-docs/json-repair.md-let mut repairer = JsonRepairer::new(5);
llms.txt-docs/json-repair.md-match repairer.repair(input) {
--
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-## Overview
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-
llms.txt:crates/core/PHASE_2_COMPLETION_SUMMARY.md:Phase 2 focused on implementing comprehensive performance optimizations for the vexy_json JSON parser. This phase involved three key areas: memory optimization, lazy evaluation, and streaming parsing capabilities.
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-## Completed Components
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-
--
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-## Conclusion
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-
llms.txt:crates/core/PHASE_2_COMPLETION_SUMMARY.md:Phase 2 successfully established a comprehensive performance optimization foundation for vexy_json. While some optimizations show overhead in their current form, the infrastructure is solid and provides multiple avenues for future improvements.
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-The implementation demonstrates sophisticated memory management, streaming capabilities, and lazy evaluation patterns that will serve as the foundation for continued performance enhancements in future phases.
llms.txt-crates/core/PHASE_2_COMPLETION_SUMMARY.md-
--
llms.txt-crates/core/src/error/repair.rs-pub enum ParsingTier {
llms.txt-crates/core/src/error/repair.rs-    /// Fast path using serde_json succeeded
llms.txt-crates/core/src/error/repair.rs-    Fast,
llms.txt:crates/core/src/error/repair.rs:    /// Forgiving path using vexy_json core succeeded
llms.txt-crates/core/src/error/repair.rs-    Forgiving,
llms.txt-crates/core/src/error/repair.rs-    /// Repair path using json-repair succeeded
llms.txt-crates/core/src/error/repair.rs-    Repair,
llms.txt---
llms.txt:crates/core/examples/error_reporting.rs:use vexy_json_core::error::reporter::{full_error_report, plain_error_report, quick_error_report};
llms.txt:crates/core/examples/error_reporting.rs:use vexy_json_core::parse;
llms.txt-crates/core/examples/error_reporting.rs-
llms.txt-crates/core/examples/error_reporting.rs-fn main() {
llms.txt-crates/core/examples/error_reporting.rs-    // Example 1: Missing closing brace
--
llms.txt-issues/103.txt-In @docs we have @docs/tool.html
llms.txt-issues/103.txt-
llms.txt-issues/103.txt-1. We want that page to share navigation with the remaining Jekyll site, somehow. 
llms.txt:issues/103.txt:2. More importantly, we want a "sister web page" with the identical design which will allow the end-user to use the `jsonic` library (analogous to our `vexy_json` in @docs/tool.html)
llms.txt-issues/103.txt-
llms.txt-issues/103.txt-Into @PLAN.md develop a very detailed and specific plan for the above. 
llms.txt-issues/103.txt-
llms.txt---
llms.txt-oss-fuzz/project.yaml-# this_file: oss-fuzz/project.yaml
llms.txt-oss-fuzz/project.yaml-
llms.txt:oss-fuzz/project.yaml:homepage: "https://github.com/twardoch/pub/vexy_json"
llms.txt-oss-fuzz/project.yaml-language: rust
llms.txt-oss-fuzz/project.yaml-primary_contact: "adam@twardoch.com"
llms.txt-oss-fuzz/project.yaml-auto_ccs:
--
llms.txt-oss-fuzz/project.yaml-coverage_extra_args: "--target-dir=/tmp/coverage"
llms.txt-oss-fuzz/project.yaml-
llms.txt-oss-fuzz/project.yaml-# Additional configuration
llms.txt:oss-fuzz/project.yaml:main_repo: "https://github.com/twardoch/pub/vexy_json"
llms.txt-oss-fuzz/project.yaml-file_github_issue: true
llms.txt---
llms.txt-docs/benchmarks.md-
llms.txt-docs/benchmarks.md-# Benchmark Results
llms.txt-docs/benchmarks.md-
llms.txt:docs/benchmarks.md:This section presents the parsing performance benchmarks for `vexy_json` (Rust).
llms.txt-docs/benchmarks.md-Benchmarks were run on the following environment:
llms.txt-docs/benchmarks.md-
llms.txt-docs/benchmarks.md-*   **CPU**: [e.g., Intel Core i7-10700K]
--
llms.txt-docs/benchmarks.md-
llms.txt-docs/benchmarks.md-Lower values (nanoseconds per iteration) are better.
llms.txt-docs/benchmarks.md-
llms.txt:docs/benchmarks.md:| Test Case | `vexy_json` (ns/iter) |
llms.txt-docs/benchmarks.md-|---|---|
llms.txt-docs/benchmarks.md-| simple | 7782 |
llms.txt-docs/benchmarks.md-| array | 7836 |
llms.txt---
llms.txt:crates/core/src/error/recovery_v2.rs://! Smart error recovery engine for vexy_json parsing
llms.txt-crates/core/src/error/recovery_v2.rs-//!
llms.txt-crates/core/src/error/recovery_v2.rs-//! This module implements advanced error recovery strategies including:
llms.txt-crates/core/src/error/recovery_v2.rs-//! - ML-based pattern recognition for common errors
llms.txt---
llms.txt-crates/python/README.md-# this_file: crates/python/README.md
llms.txt-crates/python/README.md-
llms.txt:crates/python/README.md:# vexy_json Python Bindings
llms.txt-crates/python/README.md-
llms.txt:crates/python/README.md:Python bindings for the vexy_json library - a forgiving JSON parser written in Rust.
llms.txt-crates/python/README.md-
llms.txt-crates/python/README.md-## Installation
llms.txt-crates/python/README.md-
llms.txt-crates/python/README.md-```bash
llms.txt:crates/python/README.md:pip install vexy_json
llms.txt-crates/python/README.md-```
llms.txt-crates/python/README.md-
llms.txt-crates/python/README.md-## Usage
llms.txt-crates/python/README.md-
llms.txt-crates/python/README.md-```python
llms.txt:crates/python/README.md:import vexy_json
llms.txt-crates/python/README.md-
llms.txt-crates/python/README.md-# Parse forgiving JSON
llms.txt:crates/python/README.md:result = vexy_json.parse('{"key": "value", trailing: true,}')
llms.txt-crates/python/README.md-print(result)  # {'key': 'value', 'trailing': True}
llms.txt-crates/python/README.md-
llms.txt-crates/python/README.md-# Use NumPy integration
llms.txt-crates/python/README.md-import numpy as np
llms.txt:crates/python/README.md:arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-crates/python/README.md-print(type(arr))  # <class 'numpy.ndarray'>
llms.txt-crates/python/README.md-```
llms.txt-crates/python/README.md-
--
llms.txt-crates/python/README.md-- pandas DataFrame integration
llms.txt-crates/python/README.md-- JSON repair functionality
llms.txt-crates/python/README.md-
llms.txt:crates/python/README.md:For more information, see the [main vexy_json documentation](https://github.com/twardoch/vexy_json).
llms.txt---
llms.txt-docs/plugin-development.md-Let's create a simple plugin that converts all string values to uppercase:
llms.txt-docs/plugin-development.md-
llms.txt-docs/plugin-development.md-```rust
llms.txt:docs/plugin-development.md:use vexy_json_core::plugin::ParserPlugin;
llms.txt:docs/plugin-development.md:use vexy_json_core::ast::Value;
llms.txt:docs/plugin-development.md:use vexy_json_core::error::Result;
llms.txt-docs/plugin-development.md-use std::any::Any;
llms.txt-docs/plugin-development.md-
llms.txt-docs/plugin-development.md-pub struct UppercasePlugin;
--
llms.txt-docs/plugin-development.md-A plugin that validates data against business rules:
llms.txt-docs/plugin-development.md-
llms.txt-docs/plugin-development.md-```rust
llms.txt:docs/plugin-development.md:use vexy_json_core::error::Error;
llms.txt-docs/plugin-development.md-
llms.txt-docs/plugin-development.md-pub struct ValidationPlugin {
llms.txt-docs/plugin-development.md-    rules: Vec<ValidationRule>,
--
llms.txt-docs/plugin-development.md-#[cfg(test)]
llms.txt-docs/plugin-development.md-mod tests {
llms.txt-docs/plugin-development.md-    use super::*;
llms.txt:docs/plugin-development.md:    use vexy_json::parse;
llms.txt-docs/plugin-development.md-
llms.txt-docs/plugin-development.md-    #[test]
llms.txt-docs/plugin-development.md-    fn test_uppercase_plugin() {
--
llms.txt-docs/plugin-development.md-```rust
llms.txt-docs/plugin-development.md-#[test]
llms.txt-docs/plugin-development.md-fn test_plugin_integration() {
llms.txt:docs/plugin-development.md:    use vexy_json::{parse_with_options, ParserOptions};
llms.txt-docs/plugin-development.md-    
llms.txt-docs/plugin-development.md-    let json = r#"{"name": "john", "age": 25}"#;
llms.txt-docs/plugin-development.md-    let mut plugin = UppercasePlugin;
--
llms.txt-docs/plugin-development.md-    MacroError { macro_name: String },
llms.txt-docs/plugin-development.md-}
llms.txt-docs/plugin-development.md-
llms.txt:docs/plugin-development.md:impl From<PluginError> for vexy_json_core::error::Error {
llms.txt-docs/plugin-development.md-    fn from(err: PluginError) -> Self {
llms.txt:docs/plugin-development.md:        vexy_json_core::error::Error::Custom(err.to_string())
llms.txt-docs/plugin-development.md-    }
llms.txt-docs/plugin-development.md-}
llms.txt-docs/plugin-development.md-```
--
llms.txt-docs/plugin-development.md-
llms.txt-docs/plugin-development.md-```toml
llms.txt-docs/plugin-development.md-[package]
llms.txt:docs/plugin-development.md:name = "vexy_json-plugin-myplugin"
llms.txt-docs/plugin-development.md-version = "0.1.0"
llms.txt-docs/plugin-development.md-edition = "2021"
llms.txt-docs/plugin-development.md-
llms.txt-docs/plugin-development.md-[dependencies]
llms.txt:docs/plugin-development.md:vexy_json-core = "2.0"
llms.txt-docs/plugin-development.md-```
llms.txt-docs/plugin-development.md-
llms.txt-docs/plugin-development.md-## Best Practices Summary
--
llms.txt-crates/test-utils/Cargo.toml-path = "src/lib.rs"
llms.txt-crates/test-utils/Cargo.toml-
llms.txt-crates/test-utils/Cargo.toml-
llms.txt:crates/test-utils/Cargo.toml:[dependencies.vexy_json-core]
llms.txt-crates/test-utils/Cargo.toml-path = "../core"
llms.txt---
llms.txt:debug_test9.rs:use vexy_json::parse;
llms.txt-debug_test9.rs-
llms.txt-debug_test9.rs-fn main() {
llms.txt-debug_test9.rs-    // Test if the basic newline-separated object works
--
llms.txt-issues/101.txt-
llms.txt-issues/101.txt-## http://127.0.0.1:8081/debug-pages/test-wasm.html
llms.txt-issues/101.txt-
llms.txt:issues/101.txt:vexy_json WebAssembly Test Page
llms.txt:issues/101.txt:Testing the vexy_json WASM module functionality...
llms.txt-issues/101.txt-
llms.txt-issues/101.txt-WASM Module Initialization
llms.txt-issues/101.txt-✅ Module loaded successfully
llms.txt-issues/101.txt-Version Info
llms.txt:issues/101.txt:vexy_json vundefined
llms.txt-issues/101.txt-undefined
llms.txt-issues/101.txt-Basic JSON Parsing
llms.txt-issues/101.txt-Input: {"key": "value"}
llms.txt---
llms.txt-crates/core/src/optimization/mod.rs-// this_file: crates/core/src/optimization/mod.rs
llms.txt-crates/core/src/optimization/mod.rs-
llms.txt:crates/core/src/optimization/mod.rs://! Performance optimization modules for vexy_json parsing.
llms.txt-crates/core/src/optimization/mod.rs-//!
llms.txt-crates/core/src/optimization/mod.rs-//! This module contains optimized implementations of core parsing
llms.txt-crates/core/src/optimization/mod.rs-//! functionality to improve performance while maintaining compatibility.
--
llms.txt-CLAUDE.md-
llms.txt-CLAUDE.md-## 1. Project Overview
llms.txt-CLAUDE.md-
llms.txt:CLAUDE.md:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-CLAUDE.md-
llms.txt-CLAUDE.md-## 2. Development Status
llms.txt-CLAUDE.md-
--
llms.txt-CLAUDE.md-    -   `src/error/mod.rs`: Implements custom error types for parsing failures.
llms.txt-CLAUDE.md--   `crates/cli`: The command-line interface.
llms.txt-CLAUDE.md-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:CLAUDE.md:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`.
llms.txt:CLAUDE.md:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments.
llms.txt-CLAUDE.md--   `crates/test-utils`: Utility functions for testing.
llms.txt-CLAUDE.md-
llms.txt-CLAUDE.md-### 3.2. Core Features
--
llms.txt-CLAUDE.md-    -   Benchmarking is performed using `criterion.rs`, with benchmarks defined in the `benches/` directory.
llms.txt-CLAUDE.md--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt-CLAUDE.md--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json` and `jsonic`.
llms.txt:CLAUDE.md:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-CLAUDE.md-
llms.txt-CLAUDE.md-## 4. Development Workflow
llms.txt-CLAUDE.md-
--
llms.txt-crates/core/new_benchmark_results.txt-50 |     pub const BG_WHITE: &'static str = "\x1b[47m";
llms.txt-crates/core/new_benchmark_results.txt-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
llms.txt-crates/core/new_benchmark_results.txt-
llms.txt:crates/core/new_benchmark_results.txt:warning: `vexy_json-core` (lib) generated 58 warnings (run `cargo fix --lib -p vexy_json-core` to apply 1 suggestion)
llms.txt-crates/core/new_benchmark_results.txt-warning: returned pointer of `as_ptr` call is never null, so checking it for null will always return false
llms.txt-crates/core/new_benchmark_results.txt-   --> crates/core/src/optimization/memory_pool.rs:380:18
llms.txt-crates/core/new_benchmark_results.txt-    |
--
llms.txt-crates/core/new_benchmark_results.txt-    |
llms.txt-crates/core/new_benchmark_results.txt-    = note: `#[warn(useless_ptr_null_checks)]` on by default
llms.txt-crates/core/new_benchmark_results.txt-
llms.txt:crates/core/new_benchmark_results.txt:   Compiling vexy_json-core v0.2.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_json/crates/core)
llms.txt:crates/core/new_benchmark_results.txt:warning: `vexy_json-core` (lib test) generated 59 warnings (58 duplicates)
llms.txt:crates/core/new_benchmark_results.txt:error[E0432]: unresolved imports `vexy_json_core::parse_optimized_v2`, `vexy_json_core::parse_optimized_v2_with_options`, `vexy_json_core::parse_v2_with_stats`
llms.txt-crates/core/new_benchmark_results.txt-  --> crates/core/benches/parser_benchmarks.rs:12:18
llms.txt-crates/core/new_benchmark_results.txt-   |
llms.txt-crates/core/new_benchmark_results.txt-12 |                  parse_optimized_v2, parse_optimized_v2_with_options, parse_v2_with_stats, ParserOptions};
--
llms.txt-crates/core/new_benchmark_results.txt-   |
llms.txt-crates/core/new_benchmark_results.txt-
llms.txt-crates/core/new_benchmark_results.txt-For more information about this error, try `rustc --explain E0432`.
llms.txt:crates/core/new_benchmark_results.txt:error: could not compile `vexy_json-core` (bench "parser_benchmarks") due to 1 previous error
llms.txt---
llms.txt-benches/performance_comparison.rs-// this_file: benches/performance_comparison.rs
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
llms.txt:benches/performance_comparison.rs:use vexy_json::parse as vexy_json_parse;
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-fn benchmark_parser_comparison(c: &mut Criterion) {
llms.txt-benches/performance_comparison.rs-    let mut group = c.benchmark_group("parser_comparison");
--
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    // Benchmark simple JSON
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
llms.txt:benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "simple"),
llms.txt-benches/performance_comparison.rs-        &simple_json,
llms.txt:benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
llms.txt-benches/performance_comparison.rs-    );
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
--
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    // Benchmark nested JSON
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
llms.txt:benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "nested"),
llms.txt-benches/performance_comparison.rs-        &nested_json,
llms.txt:benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
llms.txt-benches/performance_comparison.rs-    );
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
--
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    // Benchmark large array
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
llms.txt:benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "large_array"),
llms.txt-benches/performance_comparison.rs-        &large_array_json,
llms.txt:benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
llms.txt-benches/performance_comparison.rs-    );
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
--
llms.txt-benches/performance_comparison.rs-fn benchmark_forgiving_features(c: &mut Criterion) {
llms.txt-benches/performance_comparison.rs-    let mut group = c.benchmark_group("forgiving_features");
llms.txt-benches/performance_comparison.rs-
llms.txt:benches/performance_comparison.rs:    // Test vexy_json's forgiving features (serde_json can't parse these)
llms.txt-benches/performance_comparison.rs-    let forgiving_json = r#"{
llms.txt-benches/performance_comparison.rs-        // Comment
llms.txt-benches/performance_comparison.rs-        name: 'John',
--
llms.txt-benches/performance_comparison.rs-    let standard_json = r#"{"name": "John", "age": 30, "tags": ["rust", "json"]}"#;
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
llms.txt:benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "forgiving"),
llms.txt-benches/performance_comparison.rs-        &forgiving_json,
llms.txt:benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
llms.txt-benches/performance_comparison.rs-    );
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
llms.txt:benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "standard"),
llms.txt-benches/performance_comparison.rs-        &standard_json,
llms.txt:benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
llms.txt-benches/performance_comparison.rs-    );
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
--
llms.txt-benches/performance_comparison.rs-    let string_heavy = generate_string_heavy_json();
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
llms.txt:benches/performance_comparison.rs:        BenchmarkId::new("vexy_json", "string_heavy"),
llms.txt-benches/performance_comparison.rs-        &string_heavy,
llms.txt:benches/performance_comparison.rs:        |b, json| b.iter(|| vexy_json_parse(black_box(json))),
llms.txt-benches/performance_comparison.rs-    );
llms.txt-benches/performance_comparison.rs-
llms.txt-benches/performance_comparison.rs-    group.bench_with_input(
--
llms.txt-benches/performance_comparison.rs-        .map(|i| format!(r#"{{"id": {}, "name": "item{}", "active": true}}"#, i, i))
llms.txt-benches/performance_comparison.rs-        .collect();
llms.txt-benches/performance_comparison.rs-
llms.txt:benches/performance_comparison.rs:    group.bench_function("vexy_json_small_objects", |b| {
llms.txt-benches/performance_comparison.rs-        b.iter(|| {
llms.txt-benches/performance_comparison.rs-            for obj in &small_objects {
llms.txt:benches/performance_comparison.rs:                let _ = vexy_json_parse(black_box(obj));
llms.txt-benches/performance_comparison.rs-            }
llms.txt-benches/performance_comparison.rs-        })
llms.txt-benches/performance_comparison.rs-    });
llms.txt---
llms.txt:crates/core/src/lexer/mod.rs://! Modular lexer architecture for vexy_json parsing
llms.txt-crates/core/src/lexer/mod.rs-//!
llms.txt-crates/core/src/lexer/mod.rs-//! This module provides a trait-based lexer design that allows for
llms.txt-crates/core/src/lexer/mod.rs-//! different lexer implementations optimized for various use cases:
--
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-# Feedback & Support
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:We value your feedback and are committed to improving vexy_json based on user experiences. This page explains how to report issues, request features, and get support.
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-## 🔧 Web Tool Feedback
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:The [vexy_json web tool](tool.html) includes a built-in feedback system that makes it easy to report issues and suggest improvements.
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-### How to Use the Feedback System
llms.txt-docs/feedback.md-
--
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-## 📋 GitHub Issues
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:For detailed bug reports and feature requests, use our [GitHub Issues](https://github.com/twardoch/vexy_json/issues):
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-### Bug Reports
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:Use the [Bug Report Template](https://github.com/twardoch/vexy_json/issues/new?template=bug_report.md) and include:
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-- **Clear description** of the bug
llms.txt-docs/feedback.md-- **Steps to reproduce** the issue
--
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-### Feature Requests
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:Use the [Feature Request Template](https://github.com/twardoch/vexy_json/issues/new?template=feature_request.md) and include:
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-- **Problem description** - What need does this address?
llms.txt-docs/feedback.md-- **Proposed solution** - What would you like to see?
--
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-### Performance Issues
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:Use the [Performance Issue Template](https://github.com/twardoch/vexy_json/issues/new?template=performance_issue.md) and include:
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-- **Performance problem** description
llms.txt-docs/feedback.md-- **Input characteristics** (size, complexity)
--
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-## 💬 Community Discussion
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:For questions, ideas, and general discussion, use [GitHub Discussions](https://github.com/twardoch/vexy_json/discussions):
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-- **Q&A** - Ask questions about usage
llms.txt-docs/feedback.md-- **Ideas** - Share feature ideas and get feedback
llms.txt:docs/feedback.md:- **Show and Tell** - Share how you're using vexy_json
llms.txt-docs/feedback.md-- **General** - Any other discussion
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-## 📧 Direct Contact
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-For security issues or private matters, you can contact the maintainer directly:
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:- **Email**: adam+vexy_json@twardoch.com
llms.txt-docs/feedback.md-- **Security**: Please use responsible disclosure for security issues
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md-## 🎯 What Makes Good Feedback
--
llms.txt-docs/feedback.md-
llms.txt-docs/feedback.md----
llms.txt-docs/feedback.md-
llms.txt:docs/feedback.md:**Thank you for helping make vexy_json better!** Your feedback drives improvements and helps us build a tool that works well for everyone.
llms.txt---
llms.txt-AGENTS.md-
llms.txt-AGENTS.md-## 1. Project Overview
llms.txt-AGENTS.md-
llms.txt:AGENTS.md:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-AGENTS.md-
llms.txt-AGENTS.md-## 2. Development Status
llms.txt-AGENTS.md-
--
llms.txt-AGENTS.md-    -   `src/error/mod.rs`: Implements custom error types for parsing failures.
llms.txt-AGENTS.md--   `crates/cli`: The command-line interface.
llms.txt-AGENTS.md-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:AGENTS.md:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`.
llms.txt:AGENTS.md:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments.
llms.txt-AGENTS.md--   `crates/test-utils`: Utility functions for testing.
llms.txt-AGENTS.md-
llms.txt-AGENTS.md-### 3.2. Core Features
--
llms.txt-AGENTS.md-    -   Benchmarking is performed using `criterion.rs`, with benchmarks defined in the `benches/` directory.
llms.txt-AGENTS.md--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt-AGENTS.md--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json` and `jsonic`.
llms.txt:AGENTS.md:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-AGENTS.md-
llms.txt-AGENTS.md-## 4. Development Workflow
llms.txt-AGENTS.md-
--
llms.txt-docs/plugins/builtin/schema-validation.md-### Basic Usage
llms.txt-docs/plugins/builtin/schema-validation.md-
llms.txt-docs/plugins/builtin/schema-validation.md-```rust
llms.txt:docs/plugins/builtin/schema-validation.md:use vexy_json::{parse, ParserOptions};
llms.txt:docs/plugins/builtin/schema-validation.md:use vexy_json_core::plugin::plugins::SchemaValidationPlugin;
llms.txt-docs/plugins/builtin/schema-validation.md-
llms.txt-docs/plugins/builtin/schema-validation.md-// Define a schema
llms.txt-docs/plugins/builtin/schema-validation.md-let schema = parse(r#"{
--
llms.txt-docs/plugins/builtin/schema-validation.md-The plugin can be integrated into the parsing pipeline:
llms.txt-docs/plugins/builtin/schema-validation.md-
llms.txt-docs/plugins/builtin/schema-validation.md-```rust
llms.txt:docs/plugins/builtin/schema-validation.md:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-docs/plugins/builtin/schema-validation.md-
llms.txt-docs/plugins/builtin/schema-validation.md-// Create parser options with validation
llms.txt-docs/plugins/builtin/schema-validation.md-let options = ParserOptions {
--
llms.txt-docs/plugins/builtin/schema-validation.md-#[cfg(test)]
llms.txt-docs/plugins/builtin/schema-validation.md-mod tests {
llms.txt-docs/plugins/builtin/schema-validation.md-    use super::*;
llms.txt:docs/plugins/builtin/schema-validation.md:    use vexy_json::parse;
llms.txt-docs/plugins/builtin/schema-validation.md-
llms.txt-docs/plugins/builtin/schema-validation.md-    #[test]
llms.txt-docs/plugins/builtin/schema-validation.md-    fn test_basic_validation() {
llms.txt---
llms.txt:crates/python/tests/test_vexy_json.py-#!/usr/bin/env python3
llms.txt:crates/python/tests/test_vexy_json.py:# Test file for vexy_json renaming
llms.txt:crates/python/tests/test_vexy_json.py-
llms.txt:crates/python/tests/test_vexy_json.py:import vexy_json
llms.txt:crates/python/tests/test_vexy_json.py:from vexy_json import VexyJSONParser, VexyJSONConfig
llms.txt:crates/python/tests/test_vexy_json.py-
llms.txt:crates/python/tests/test_vexy_json.py-
llms.txt:crates/python/tests/test_vexy_json.py-class VexyJSONWrapper:
llms.txt---
llms.txt:crates/python/tests/test_vexy_json.py-        self.config = VexyJSONConfig()
llms.txt:crates/python/tests/test_vexy_json.py-
llms.txt:crates/python/tests/test_vexy_json.py-    def parse(self, data):
llms.txt:crates/python/tests/test_vexy_json.py:        # Parse vexy_json data
llms.txt:crates/python/tests/test_vexy_json.py-        return self.parser.parse(data)
llms.txt:crates/python/tests/test_vexy_json.py-
llms.txt:crates/python/tests/test_vexy_json.py-
llms.txt:crates/python/tests/test_vexy_json.py:# Test with a string that contains "vexy_json"
llms.txt:crates/python/tests/test_vexy_json.py:test_string = "This is a vexy_json parser"
llms.txt:crates/python/tests/test_vexy_json.py:print(f"Vexy JSON version: {vexy_json.__version__}")
llms.txt---
llms.txt-crates/core/src/error/types.rs-    }
llms.txt-crates/core/src/error/types.rs-}
llms.txt-crates/core/src/error/types.rs-
llms.txt:crates/core/src/error/types.rs:/// Error types that can occur during vexy_json parsing.
llms.txt-crates/core/src/error/types.rs-///
llms.txt-crates/core/src/error/types.rs-/// Each error variant contains positional information to help users
llms.txt-crates/core/src/error/types.rs-/// locate and fix parsing issues in their input. The error types
--
llms.txt-benches/lexer_microbenchmarks.rs-// this_file: benches/lexer_microbenchmarks.rs
llms.txt-benches/lexer_microbenchmarks.rs-
llms.txt-benches/lexer_microbenchmarks.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
llms.txt:benches/lexer_microbenchmarks.rs:use vexy_json_core::lexer::{FastLexer, JsonLexer, LexerConfig, LexerMode};
llms.txt-benches/lexer_microbenchmarks.rs-
llms.txt-benches/lexer_microbenchmarks.rs-fn bench_tokenize_simple_json(c: &mut Criterion) {
llms.txt-benches/lexer_microbenchmarks.rs-    let mut group = c.benchmark_group("tokenize simple json");
llms.txt---
llms.txt-docs/packaging-macos.md-# macOS Packaging Guide
llms.txt-docs/packaging-macos.md-
llms.txt:docs/packaging-macos.md:This guide explains how to package vexy_json for macOS distribution as a `.dmg` containing a `.pkg` installer.
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-## Prerequisites
llms.txt-docs/packaging-macos.md-
--
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-This script will:
llms.txt-docs/packaging-macos.md-1. Build the release binary using `cargo build --release`
llms.txt:docs/packaging-macos.md:2. Create a `.pkg` installer that installs vexy_json to `/usr/local/bin`
llms.txt-docs/packaging-macos.md-3. Wrap the `.pkg` in a `.dmg` for easy distribution
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-## Output
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-The script produces:
llms.txt:docs/packaging-macos.md:- `vexy_json-{VERSION}-macos.dmg` - The distributable disk image
llms.txt-docs/packaging-macos.md-- Contains the `.pkg` installer and a README
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-## Installation
llms.txt-docs/packaging-macos.md-
llms.txt:docs/packaging-macos.md:Users can install vexy_json by:
llms.txt-docs/packaging-macos.md-1. Opening the `.dmg` file
llms.txt-docs/packaging-macos.md-2. Double-clicking the `.pkg` installer
llms.txt-docs/packaging-macos.md-3. Following the installation wizard
llms.txt:docs/packaging-macos.md:4. The `vexy_json` command will be available in their terminal
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-## Code Signing (Optional)
llms.txt-docs/packaging-macos.md-
--
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-# Sign the DMG
llms.txt-docs/packaging-macos.md-codesign --sign "Developer ID Application: Your Name (TEAMID)" \
llms.txt:docs/packaging-macos.md:    --timestamp vexy_json-*.dmg
llms.txt-docs/packaging-macos.md-```
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-## Notarization (Recommended)
--
llms.txt-docs/packaging-macos.md-```bash
llms.txt-docs/packaging-macos.md-# Submit for notarization
llms.txt-docs/packaging-macos.md-xcrun altool --notarize-app \
llms.txt:docs/packaging-macos.md:    --primary-bundle-id "com.twardoch.vexy_json" \
llms.txt-docs/packaging-macos.md-    --username "your-apple-id@example.com" \
llms.txt-docs/packaging-macos.md-    --password "@keychain:AC_PASSWORD" \
llms.txt:docs/packaging-macos.md:    --file vexy_json-*.dmg
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-# Staple the notarization ticket
llms.txt:docs/packaging-macos.md:xcrun stapler staple vexy_json-*.dmg
llms.txt-docs/packaging-macos.md-```
llms.txt-docs/packaging-macos.md-
llms.txt-docs/packaging-macos.md-## Automation
--
llms.txt-crates/python/pyproject.toml-
llms.txt-crates/python/pyproject.toml-
llms.txt-crates/python/pyproject.toml-[project]
llms.txt:crates/python/pyproject.toml:name = "vexy_json"
llms.txt:crates/python/pyproject.toml:description = "A forgiving JSON parser - Python bindings for the Rust vexy_json library"
llms.txt-crates/python/pyproject.toml-readme = "README.md"
llms.txt-crates/python/pyproject.toml-requires-python = ">=3.8"
llms.txt-crates/python/pyproject.toml-classifiers = [
--
llms.txt-crates/python/pyproject.toml-
llms.txt-crates/python/pyproject.toml-
llms.txt-crates/python/pyproject.toml-[project.urls]
llms.txt:crates/python/pyproject.toml:Homepage = "https://github.com/twardoch/vexy_json"
llms.txt:crates/python/pyproject.toml:Repository = "https://github.com/twardoch/vexy_json.git"
llms.txt:crates/python/pyproject.toml:Issues = "https://github.com/twardoch/vexy_json/issues"
llms.txt:crates/python/pyproject.toml:Documentation = "https://twardoch.github.io/vexy_json/"
llms.txt-crates/python/pyproject.toml-
llms.txt-crates/python/pyproject.toml-
llms.txt-crates/python/pyproject.toml-[project.optional-dependencies]
--
llms.txt-crates/python/pyproject.toml-[tool.maturin]
llms.txt-crates/python/pyproject.toml-features = [ "pyo3/extension-module" ]
llms.txt-crates/python/pyproject.toml-python-source = "python"
llms.txt:crates/python/pyproject.toml:module-name = "vexy_json._vexy_json"
llms.txt:crates/python/pyproject.toml:include = [ "python/vexy_json/__init__.pyi", "python/vexy_json/py.typed" ]
llms.txt-crates/python/pyproject.toml-
llms.txt-crates/python/pyproject.toml-
llms.txt-crates/python/pyproject.toml-[tool.pytest.ini_options]
llms.txt---
llms.txt-crates/core/src/ast/mod.rs-// this_file: src/ast/mod.rs
llms.txt-crates/core/src/ast/mod.rs-
llms.txt:crates/core/src/ast/mod.rs://! Abstract Syntax Tree components for vexy_json parsing.
llms.txt-crates/core/src/ast/mod.rs-//!
llms.txt:crates/core/src/ast/mod.rs://! This module contains the core AST types used throughout the vexy_json parser:
llms.txt-crates/core/src/ast/mod.rs-//! - `Token`: Lexical tokens produced by the lexer
llms.txt:crates/core/src/ast/mod.rs://! - `Value`: Parsed JSON values with support for all vexy_json extensions
llms.txt-crates/core/src/ast/mod.rs-//! - `Number`: Numeric value representation supporting integers and floats
llms.txt-crates/core/src/ast/mod.rs-//!
llms.txt-crates/core/src/ast/mod.rs-//! These types form the foundation of the parsing pipeline, from lexical analysis
--
llms.txt-crates/python/tests/test_typing.py-# Test basic functionality without importing numpy/pandas
llms.txt-crates/python/tests/test_typing.py-def test_basic_functionality():
llms.txt-crates/python/tests/test_typing.py-    """Test basic parsing functionality with type hints."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test basic parsing
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.parse('{"key": "value"}')
llms.txt-crates/python/tests/test_typing.py-    assert result == {"key": "value"}
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test loads alias
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.loads('{"key": "value"}')
llms.txt-crates/python/tests/test_typing.py-    assert result == {"key": "value"}
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test validation
llms.txt:crates/python/tests/test_typing.py:    assert vexy_json.is_valid('{"valid": true}') is True
llms.txt:crates/python/tests/test_typing.py:    assert vexy_json.is_valid('invalid') is False
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test dumps
llms.txt-crates/python/tests/test_typing.py-    data = {"key": "value", "number": 42}
llms.txt:crates/python/tests/test_typing.py:    json_str = vexy_json.dumps(data)
llms.txt-crates/python/tests/test_typing.py-    assert "key" in json_str
llms.txt-crates/python/tests/test_typing.py-    assert "value" in json_str
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test pretty printing
llms.txt:crates/python/tests/test_typing.py:    pretty_str = vexy_json.dumps(data, indent=2)
llms.txt-crates/python/tests/test_typing.py-    assert "\n" in pretty_str
llms.txt-crates/python/tests/test_typing.py-    assert "  " in pretty_str
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-def test_file_operations():
llms.txt-crates/python/tests/test_typing.py-    """Test file I/O operations with type hints."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test with StringIO
llms.txt-crates/python/tests/test_typing.py-    json_data = '{"test": "data", "number": 123}'
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test load
llms.txt-crates/python/tests/test_typing.py-    fp = io.StringIO(json_data)
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.load(fp)
llms.txt-crates/python/tests/test_typing.py-    assert result == {"test": "data", "number": 123}
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test dump
llms.txt-crates/python/tests/test_typing.py-    output = io.StringIO()
llms.txt:crates/python/tests/test_typing.py:    vexy_json.dump({"key": "value"}, output)
llms.txt-crates/python/tests/test_typing.py-    output.seek(0)
llms.txt-crates/python/tests/test_typing.py-    dumped = output.read()
llms.txt-crates/python/tests/test_typing.py-    assert "key" in dumped
--
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-def test_streaming_parser():
llms.txt-crates/python/tests/test_typing.py-    """Test streaming parser with type hints."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test streaming parser creation
llms.txt:crates/python/tests/test_typing.py:    parser = vexy_json.StreamingParser()
llms.txt-crates/python/tests/test_typing.py-    assert parser is not None
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test context manager
llms.txt:crates/python/tests/test_typing.py:    with vexy_json.StreamingParser() as parser:
llms.txt-crates/python/tests/test_typing.py-        assert parser is not None
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test with file-like object
llms.txt-crates/python/tests/test_typing.py-    json_lines = '{"line": 1}\n{"line": 2}\n{"line": 3}\n'
llms.txt-crates/python/tests/test_typing.py-    fp = io.StringIO(json_lines)
llms.txt-crates/python/tests/test_typing.py-    
llms.txt:crates/python/tests/test_typing.py:    with vexy_json.StreamingParser() as parser:
llms.txt-crates/python/tests/test_typing.py-        results = list(parser.parse_lines(fp))
llms.txt-crates/python/tests/test_typing.py-        assert len(results) == 3
llms.txt-crates/python/tests/test_typing.py-        assert results[0] == {"line": 1}
--
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-def test_parse_with_options():
llms.txt-crates/python/tests/test_typing.py-    """Test parse_with_options with all parameter types."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test with all parameters
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.parse_with_options(
llms.txt-crates/python/tests/test_typing.py-        'key: "value", // comment\n',
llms.txt-crates/python/tests/test_typing.py-        allow_comments=True,
llms.txt-crates/python/tests/test_typing.py-        allow_trailing_commas=True,
--
llms.txt-crates/python/tests/test_typing.py-@pytest.mark.skipif(sys.version_info < (3, 9), reason="requires Python 3.9+")
llms.txt-crates/python/tests/test_typing.py-def test_numpy_integration():
llms.txt-crates/python/tests/test_typing.py-    """Test NumPy integration if available."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    try:
llms.txt-crates/python/tests/test_typing.py-        import numpy as np
llms.txt-crates/python/tests/test_typing.py-        
llms.txt-crates/python/tests/test_typing.py-        # Test loads_numpy
llms.txt:crates/python/tests/test_typing.py:        arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-crates/python/tests/test_typing.py-        assert isinstance(arr, np.ndarray)
llms.txt-crates/python/tests/test_typing.py-        assert arr.tolist() == [1, 2, 3, 4, 5]
llms.txt-crates/python/tests/test_typing.py-        
llms.txt-crates/python/tests/test_typing.py-        # Test loads_numpy_zerocopy
llms.txt:crates/python/tests/test_typing.py:        arr = vexy_json.loads_numpy_zerocopy('[1.0, 2.0, 3.0]')
llms.txt-crates/python/tests/test_typing.py-        assert isinstance(arr, np.ndarray)
llms.txt-crates/python/tests/test_typing.py-        assert arr.tolist() == [1.0, 2.0, 3.0]
llms.txt-crates/python/tests/test_typing.py-        
llms.txt-crates/python/tests/test_typing.py-        # Test with dtype specification
llms.txt:crates/python/tests/test_typing.py:        arr = vexy_json.loads_numpy('[1, 2, 3]', dtype='float32')
llms.txt-crates/python/tests/test_typing.py-        assert isinstance(arr, np.ndarray)
llms.txt-crates/python/tests/test_typing.py-        assert arr.dtype == np.float32
llms.txt-crates/python/tests/test_typing.py-        
--
llms.txt-crates/python/tests/test_typing.py-@pytest.mark.skipif(sys.version_info < (3, 9), reason="requires Python 3.9+")
llms.txt-crates/python/tests/test_typing.py-def test_pandas_integration():
llms.txt-crates/python/tests/test_typing.py-    """Test pandas integration if available."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    try:
llms.txt-crates/python/tests/test_typing.py-        import pandas as pd
llms.txt-crates/python/tests/test_typing.py-        
llms.txt-crates/python/tests/test_typing.py-        # Test loads_dataframe
llms.txt:crates/python/tests/test_typing.py:        df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
llms.txt-crates/python/tests/test_typing.py-        assert isinstance(df, pd.DataFrame)
llms.txt-crates/python/tests/test_typing.py-        assert df.shape == (2, 2)
llms.txt-crates/python/tests/test_typing.py-        assert df.columns.tolist() == ["a", "b"]
--
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-def test_error_handling():
llms.txt-crates/python/tests/test_typing.py-    """Test error handling with proper exception types."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test ValueError for invalid JSON
llms.txt-crates/python/tests/test_typing.py-    with pytest.raises(ValueError, match="Parse error"):
llms.txt:crates/python/tests/test_typing.py:        vexy_json.parse('invalid json')
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test TypeError for non-serializable objects
llms.txt-crates/python/tests/test_typing.py-    with pytest.raises(TypeError):
llms.txt:crates/python/tests/test_typing.py:        vexy_json.dumps(object())
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-def test_module_metadata():
llms.txt-crates/python/tests/test_typing.py-    """Test module metadata and version information."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test version information
llms.txt:crates/python/tests/test_typing.py:    assert hasattr(vexy_json, '__version__')
llms.txt:crates/python/tests/test_typing.py:    assert isinstance(vexy_json.__version__, str)
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test author information
llms.txt:crates/python/tests/test_typing.py:    assert hasattr(vexy_json, '__author__')
llms.txt:crates/python/tests/test_typing.py:    assert isinstance(vexy_json.__author__, str)
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test description
llms.txt:crates/python/tests/test_typing.py:    assert hasattr(vexy_json, '__description__')
llms.txt:crates/python/tests/test_typing.py:    assert isinstance(vexy_json.__description__, str)
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-
llms.txt-crates/python/tests/test_typing.py-def test_forgiving_features():
llms.txt-crates/python/tests/test_typing.py-    """Test all forgiving JSON features."""
llms.txt:crates/python/tests/test_typing.py:    import vexy_json
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test comments
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.parse('{"key": "value" /* comment */}')
llms.txt-crates/python/tests/test_typing.py-    assert result == {"key": "value"}
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test trailing commas
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.parse('{"key": "value",}')
llms.txt-crates/python/tests/test_typing.py-    assert result == {"key": "value"}
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test unquoted keys
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.parse('{key: "value"}')
llms.txt-crates/python/tests/test_typing.py-    assert result == {"key": "value"}
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test single quotes
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.parse("{'key': 'value'}")
llms.txt-crates/python/tests/test_typing.py-    assert result == {"key": "value"}
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test implicit top-level object
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.parse('key: "value"')
llms.txt-crates/python/tests/test_typing.py-    assert result == {"key": "value"}
llms.txt-crates/python/tests/test_typing.py-    
llms.txt-crates/python/tests/test_typing.py-    # Test implicit top-level array
llms.txt:crates/python/tests/test_typing.py:    result = vexy_json.parse('"a", "b", "c"')
llms.txt-crates/python/tests/test_typing.py-    assert result == ["a", "b", "c"]
llms.txt---
llms.txt-crates/core/src/ast/value.rs-// this_file: src/ast/value.rs
llms.txt-crates/core/src/ast/value.rs-
llms.txt:crates/core/src/ast/value.rs://! Value types and implementations for the vexy_json AST.
llms.txt-crates/core/src/ast/value.rs-//!
llms.txt-crates/core/src/ast/value.rs-//! This module defines the core value types that represent parsed JSON data
llms.txt:crates/core/src/ast/value.rs://! in the vexy_json AST. It supports all standard JSON types plus the extensions
llms.txt:crates/core/src/ast/value.rs://! provided by vexy_json's forgiving syntax.
llms.txt-crates/core/src/ast/value.rs-
llms.txt-crates/core/src/ast/value.rs-use rustc_hash::FxHashMap;
llms.txt-crates/core/src/ast/value.rs-use std::fmt;
--
llms.txt-crates/core/src/ast/token.rs-// this_file: src/ast/token.rs
llms.txt-crates/core/src/ast/token.rs-#![allow(missing_docs)]
llms.txt-crates/core/src/ast/token.rs-
llms.txt:crates/core/src/ast/token.rs://! Token types and definitions for the vexy_json lexer.
llms.txt-crates/core/src/ast/token.rs-//!
llms.txt-crates/core/src/ast/token.rs-//! This module defines all the token types that can be produced during
llms.txt:crates/core/src/ast/token.rs://! lexical analysis of vexy_json input. The tokens support both standard JSON
llms.txt:crates/core/src/ast/token.rs://! syntax and vexy_json's forgiving extensions like comments and unquoted strings.
llms.txt-crates/core/src/ast/token.rs-
llms.txt:crates/core/src/ast/token.rs:/// Represents a token in the vexy_json language.
llms.txt-crates/core/src/ast/token.rs-///
llms.txt-crates/core/src/ast/token.rs-/// This enum is used by the lexer to break down the input string into meaningful units.
llms.txt-crates/core/src/ast/token.rs-use logos::Logos;
--
llms.txt-docs/assets/js/examples.js-// this_file: docs/assets/js/examples.js
llms.txt-docs/assets/js/examples.js-
llms.txt-docs/assets/js/examples.js-/**
llms.txt:docs/assets/js/examples.js: * Comprehensive examples system for the vexy_json web tool
llms.txt-docs/assets/js/examples.js- * Showcases all forgiving JSON parsing features
llms.txt-docs/assets/js/examples.js- */
llms.txt-docs/assets/js/examples.js-
--
llms.txt-docs/assets/js/examples.js-    category: 'Standard',
llms.txt-docs/assets/js/examples.js-    description: 'Standard JSON parsing according to RFC 8259',
llms.txt-docs/assets/js/examples.js-    content: `{
llms.txt:docs/assets/js/examples.js:  "name": "vexy_json",
llms.txt-docs/assets/js/examples.js-  "version": "%%VEXY_JSON_VERSION%%",
llms.txt-docs/assets/js/examples.js-  "description": "A forgiving JSON parser for Rust",
llms.txt-docs/assets/js/examples.js-  "features": ["forgiving", "fast", "rust"],
--
llms.txt-docs/assets/js/examples.js-  advanced: {
llms.txt-docs/assets/js/examples.js-    title: 'All Features Combined',
llms.txt-docs/assets/js/examples.js-    category: 'Advanced',
llms.txt:docs/assets/js/examples.js:    description: 'Showcase of all vexy_json forgiving features together',
llms.txt-docs/assets/js/examples.js-    content: `// Advanced configuration example
llms.txt:docs/assets/js/examples.js:// Shows all vexy_json features working together
llms.txt-docs/assets/js/examples.js-
llms.txt-docs/assets/js/examples.js-name: "Advanced Demo"           // Unquoted key
llms.txt-docs/assets/js/examples.js-version: '%%VEXY_JSON_VERSION%%'               // Single quotes
--
llms.txt-benches/comprehensive_comparison.rs-#[derive(Debug, Clone)]
llms.txt-benches/comprehensive_comparison.rs-struct BenchmarkResult {
llms.txt-benches/comprehensive_comparison.rs-    name: String,
llms.txt:benches/comprehensive_comparison.rs:    vexy_json_time: Option<Duration>,
llms.txt:benches/comprehensive_comparison.rs:    vexy_json_success: bool,
llms.txt:benches/comprehensive_comparison.rs:    vexy_json_error: Option<String>,
llms.txt-benches/comprehensive_comparison.rs-    jsonic_time: Option<Duration>,
llms.txt-benches/comprehensive_comparison.rs-    jsonic_success: bool,
llms.txt-benches/comprehensive_comparison.rs-    jsonic_error: Option<String>,
--
llms.txt-benches/comprehensive_comparison.rs-        }
llms.txt-benches/comprehensive_comparison.rs-    }
llms.txt-benches/comprehensive_comparison.rs-
llms.txt:benches/comprehensive_comparison.rs:    fn run_vexy_json_benchmark(
llms.txt-benches/comprehensive_comparison.rs-        &self,
llms.txt-benches/comprehensive_comparison.rs-        _name: &str,
llms.txt-benches/comprehensive_comparison.rs-        content: &str,
llms.txt-benches/comprehensive_comparison.rs-    ) -> (Option<Duration>, bool, Option<String>) {
llms.txt-benches/comprehensive_comparison.rs-        let start = Instant::now();
llms.txt-benches/comprehensive_comparison.rs-
llms.txt:benches/comprehensive_comparison.rs:        match vexy_json::parse(content) {
llms.txt-benches/comprehensive_comparison.rs-            Ok(_) => (Some(start.elapsed()), true, None),
llms.txt-benches/comprehensive_comparison.rs-            Err(e) => (Some(start.elapsed()), false, Some(e.to_string())),
llms.txt-benches/comprehensive_comparison.rs-        }
--
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        // Run multiple iterations for better accuracy
llms.txt-benches/comprehensive_comparison.rs-        const ITERATIONS: usize = 100;
llms.txt:benches/comprehensive_comparison.rs:        let mut vexy_json_times = Vec::new();
llms.txt-benches/comprehensive_comparison.rs-        let mut jsonic_times = Vec::new();
llms.txt:benches/comprehensive_comparison.rs:        let mut vexy_json_successes = 0;
llms.txt-benches/comprehensive_comparison.rs-        let mut jsonic_successes = 0;
llms.txt:benches/comprehensive_comparison.rs:        let mut vexy_json_last_error = None;
llms.txt-benches/comprehensive_comparison.rs-        let mut jsonic_last_error = None;
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        // Warm up
llms.txt-benches/comprehensive_comparison.rs-        for _ in 0..10 {
llms.txt:benches/comprehensive_comparison.rs:            let _ = self.run_vexy_json_benchmark(name, &content);
llms.txt-benches/comprehensive_comparison.rs-            let _ = self.run_jsonic_benchmark(name, &content);
llms.txt-benches/comprehensive_comparison.rs-        }
llms.txt-benches/comprehensive_comparison.rs-
llms.txt:benches/comprehensive_comparison.rs:        // Benchmark vexy_json
llms.txt-benches/comprehensive_comparison.rs-        for _ in 0..ITERATIONS {
llms.txt:benches/comprehensive_comparison.rs:            let (time, success, error) = self.run_vexy_json_benchmark(name, &content);
llms.txt-benches/comprehensive_comparison.rs-            if let Some(t) = time {
llms.txt:benches/comprehensive_comparison.rs:                vexy_json_times.push(t);
llms.txt-benches/comprehensive_comparison.rs-            }
llms.txt-benches/comprehensive_comparison.rs-            if success {
llms.txt:benches/comprehensive_comparison.rs:                vexy_json_successes += 1;
llms.txt-benches/comprehensive_comparison.rs-            }
llms.txt-benches/comprehensive_comparison.rs-            if let Some(e) = error {
llms.txt:benches/comprehensive_comparison.rs:                vexy_json_last_error = Some(e);
llms.txt-benches/comprehensive_comparison.rs-            }
llms.txt-benches/comprehensive_comparison.rs-        }
llms.txt-benches/comprehensive_comparison.rs-
--
llms.txt-benches/comprehensive_comparison.rs-        }
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        // Calculate averages
llms.txt:benches/comprehensive_comparison.rs:        let vexy_json_avg = if !vexy_json_times.is_empty() {
llms.txt:benches/comprehensive_comparison.rs:            Some(vexy_json_times.iter().sum::<Duration>() / vexy_json_times.len() as u32)
llms.txt-benches/comprehensive_comparison.rs-        } else {
llms.txt-benches/comprehensive_comparison.rs-            None
llms.txt-benches/comprehensive_comparison.rs-        };
--
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        let result = BenchmarkResult {
llms.txt-benches/comprehensive_comparison.rs-            name: name.to_string(),
llms.txt:benches/comprehensive_comparison.rs:            vexy_json_time: vexy_json_avg,
llms.txt:benches/comprehensive_comparison.rs:            vexy_json_success: vexy_json_successes > ITERATIONS / 2,
llms.txt:benches/comprehensive_comparison.rs:            vexy_json_error: vexy_json_last_error,
llms.txt-benches/comprehensive_comparison.rs-            jsonic_time: jsonic_avg,
llms.txt-benches/comprehensive_comparison.rs-            jsonic_success: jsonic_successes > ITERATIONS / 2,
llms.txt-benches/comprehensive_comparison.rs-            jsonic_error: jsonic_last_error,
--
llms.txt-benches/comprehensive_comparison.rs-        };
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        println!(
llms.txt:benches/comprehensive_comparison.rs:            "  vexy_json: {:?} (success: {})",
llms.txt:benches/comprehensive_comparison.rs:            result.vexy_json_time, result.vexy_json_success
llms.txt-benches/comprehensive_comparison.rs-        );
llms.txt-benches/comprehensive_comparison.rs-        println!(
llms.txt-benches/comprehensive_comparison.rs-            "  jsonic: {:?} (success: {})",
--
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        // Title and introduction
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("# Benchmark Results\n\n");
llms.txt:benches/comprehensive_comparison.rs:        markdown.push_str("Comprehensive performance comparison between vexy_json (Rust) and jsonic (JavaScript) parsers.\n\n");
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        // Metadata
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("## Test Environment\n\n");
--
llms.txt-benches/comprehensive_comparison.rs-        // Summary statistics
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("## Summary\n\n");
llms.txt-benches/comprehensive_comparison.rs-        let total_tests = self.results.len();
llms.txt:benches/comprehensive_comparison.rs:        let vexy_json_successes = self.results.iter().filter(|r| r.vexy_json_success).count();
llms.txt-benches/comprehensive_comparison.rs-        let jsonic_successes = self.results.iter().filter(|r| r.jsonic_success).count();
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str(&format!("- **Total test cases**: {}\n", total_tests));
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str(&format!(
llms.txt:benches/comprehensive_comparison.rs:            "- **vexy_json success rate**: {:.1}% ({}/{})\n",
llms.txt:benches/comprehensive_comparison.rs:            (vexy_json_successes as f64 / total_tests as f64) * 100.0,
llms.txt:benches/comprehensive_comparison.rs:            vexy_json_successes,
llms.txt-benches/comprehensive_comparison.rs-            total_tests
llms.txt-benches/comprehensive_comparison.rs-        ));
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str(&format!(
--
llms.txt-benches/comprehensive_comparison.rs-        ));
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        // Performance comparison
llms.txt:benches/comprehensive_comparison.rs:        let mut vexy_json_faster_count = 0;
llms.txt-benches/comprehensive_comparison.rs-        let mut jsonic_faster_count = 0;
llms.txt-benches/comprehensive_comparison.rs-        let mut speed_ratios = Vec::new();
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        for result in &self.results {
llms.txt:benches/comprehensive_comparison.rs:            if let (Some(vexy_json_time), Some(jsonic_time)) =
llms.txt:benches/comprehensive_comparison.rs:                (result.vexy_json_time, result.jsonic_time)
llms.txt-benches/comprehensive_comparison.rs-            {
llms.txt:benches/comprehensive_comparison.rs:                if vexy_json_time < jsonic_time {
llms.txt:benches/comprehensive_comparison.rs:                    vexy_json_faster_count += 1;
llms.txt-benches/comprehensive_comparison.rs-                } else {
llms.txt-benches/comprehensive_comparison.rs-                    jsonic_faster_count += 1;
llms.txt-benches/comprehensive_comparison.rs-                }
llms.txt-benches/comprehensive_comparison.rs-
llms.txt:benches/comprehensive_comparison.rs:                let ratio = jsonic_time.as_nanos() as f64 / vexy_json_time.as_nanos() as f64;
llms.txt-benches/comprehensive_comparison.rs-                speed_ratios.push(ratio);
llms.txt-benches/comprehensive_comparison.rs-            }
llms.txt-benches/comprehensive_comparison.rs-        }
--
llms.txt-benches/comprehensive_comparison.rs-        if !speed_ratios.is_empty() {
llms.txt-benches/comprehensive_comparison.rs-            let avg_speedup = speed_ratios.iter().sum::<f64>() / speed_ratios.len() as f64;
llms.txt-benches/comprehensive_comparison.rs-            markdown.push_str(&format!(
llms.txt:benches/comprehensive_comparison.rs:                "- **Average vexy_json speedup**: {:.2}x\n",
llms.txt-benches/comprehensive_comparison.rs-                avg_speedup
llms.txt-benches/comprehensive_comparison.rs-            ));
llms.txt-benches/comprehensive_comparison.rs-            markdown.push_str(&format!(
llms.txt:benches/comprehensive_comparison.rs:                "- **vexy_json faster in**: {}/{} cases\n",
llms.txt:benches/comprehensive_comparison.rs:                vexy_json_faster_count,
llms.txt-benches/comprehensive_comparison.rs-                speed_ratios.len()
llms.txt-benches/comprehensive_comparison.rs-            ));
llms.txt-benches/comprehensive_comparison.rs-        }
--
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        // Detailed results table
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("## Detailed Results\n\n");
llms.txt:benches/comprehensive_comparison.rs:        markdown.push_str("| Test Case | Input Size | vexy_json Time | vexy_json Success | jsonic Time | jsonic Success | Speedup |\n");
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("|-----------|------------|------------|---------------|-------------|----------------|----------|\n");
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        for result in &self.results {
llms.txt:benches/comprehensive_comparison.rs:            let vexy_json_time_str = match result.vexy_json_time {
llms.txt-benches/comprehensive_comparison.rs-                Some(time) => format!("{:.3}ms", time.as_secs_f64() * 1000.0),
llms.txt-benches/comprehensive_comparison.rs-                None => "N/A".to_string(),
llms.txt-benches/comprehensive_comparison.rs-            };
--
llms.txt-benches/comprehensive_comparison.rs-                None => "N/A".to_string(),
llms.txt-benches/comprehensive_comparison.rs-            };
llms.txt-benches/comprehensive_comparison.rs-
llms.txt:benches/comprehensive_comparison.rs:            let speedup_str = match (result.vexy_json_time, result.jsonic_time) {
llms.txt:benches/comprehensive_comparison.rs:                (Some(vexy_json), Some(jsonic)) => {
llms.txt:benches/comprehensive_comparison.rs:                    let ratio = jsonic.as_nanos() as f64 / vexy_json.as_nanos() as f64;
llms.txt-benches/comprehensive_comparison.rs-                    format!("{:.2}x", ratio)
llms.txt-benches/comprehensive_comparison.rs-                }
llms.txt-benches/comprehensive_comparison.rs-                _ => "N/A".to_string(),
llms.txt-benches/comprehensive_comparison.rs-            };
llms.txt-benches/comprehensive_comparison.rs-
llms.txt:benches/comprehensive_comparison.rs:            let vexy_json_success_icon = if result.vexy_json_success {
llms.txt-benches/comprehensive_comparison.rs-                "✅"
llms.txt-benches/comprehensive_comparison.rs-            } else {
llms.txt-benches/comprehensive_comparison.rs-                "❌"
--
llms.txt-benches/comprehensive_comparison.rs-                "| {} | {} bytes | {} | {} | {} | {} | {} |\n",
llms.txt-benches/comprehensive_comparison.rs-                result.name,
llms.txt-benches/comprehensive_comparison.rs-                result.input_size,
llms.txt:benches/comprehensive_comparison.rs:                vexy_json_time_str,
llms.txt:benches/comprehensive_comparison.rs:                vexy_json_success_icon,
llms.txt-benches/comprehensive_comparison.rs-                jsonic_time_str,
llms.txt-benches/comprehensive_comparison.rs-                jsonic_success_icon,
llms.txt-benches/comprehensive_comparison.rs-                speedup_str
--
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("\n");
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        // Error analysis
llms.txt:benches/comprehensive_comparison.rs:        let vexy_json_errors: Vec<_> = self
llms.txt-benches/comprehensive_comparison.rs-            .results
llms.txt-benches/comprehensive_comparison.rs-            .iter()
llms.txt:benches/comprehensive_comparison.rs:            .filter(|r| !r.vexy_json_success && r.vexy_json_error.is_some())
llms.txt-benches/comprehensive_comparison.rs-            .collect();
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        let jsonic_errors: Vec<_> = self
--
llms.txt-benches/comprehensive_comparison.rs-            .filter(|r| !r.jsonic_success && r.jsonic_error.is_some())
llms.txt-benches/comprehensive_comparison.rs-            .collect();
llms.txt-benches/comprehensive_comparison.rs-
llms.txt:benches/comprehensive_comparison.rs:        if !vexy_json_errors.is_empty() || !jsonic_errors.is_empty() {
llms.txt-benches/comprehensive_comparison.rs-            markdown.push_str("## Error Analysis\n\n");
llms.txt-benches/comprehensive_comparison.rs-
llms.txt:benches/comprehensive_comparison.rs:            if !vexy_json_errors.is_empty() {
llms.txt:benches/comprehensive_comparison.rs:                markdown.push_str("### vexy_json Errors\n\n");
llms.txt:benches/comprehensive_comparison.rs:                for result in vexy_json_errors {
llms.txt-benches/comprehensive_comparison.rs-                    markdown.push_str(&format!(
llms.txt-benches/comprehensive_comparison.rs-                        "**{}**: {}\n\n",
llms.txt-benches/comprehensive_comparison.rs-                        result.name,
llms.txt:benches/comprehensive_comparison.rs:                        result.vexy_json_error.as_ref().unwrap()
llms.txt-benches/comprehensive_comparison.rs-                    ));
llms.txt-benches/comprehensive_comparison.rs-                }
llms.txt-benches/comprehensive_comparison.rs-            }
--
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("## Methodology\n\n");
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("- Each test case is run 100 times after 10 warm-up runs\n");
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("- Times are averaged across all successful runs\n");
llms.txt:benches/comprehensive_comparison.rs:        markdown.push_str("- vexy_json is tested via direct Rust function calls\n");
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str(&format!(
llms.txt-benches/comprehensive_comparison.rs-            "- jsonic is tested via `{} --bun {} < input`\n",
llms.txt-benches/comprehensive_comparison.rs-            format!("{}/.bun/bin/bun", std::env::var("HOME").unwrap_or_default()),
llms.txt-benches/comprehensive_comparison.rs-            "/usr/local/bin/jsonic"
llms.txt-benches/comprehensive_comparison.rs-        ));
llms.txt:benches/comprehensive_comparison.rs:        markdown.push_str("- Speedup is calculated as `jsonic_time / vexy_json_time`\n");
llms.txt-benches/comprehensive_comparison.rs-        markdown
llms.txt-benches/comprehensive_comparison.rs-            .push_str("- Success is determined by whether parsing completes without errors\n\n");
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str("---\n\n");
llms.txt-benches/comprehensive_comparison.rs-        markdown.push_str(
llms.txt:benches/comprehensive_comparison.rs:            "*This report was automatically generated by the vexy_json benchmark suite.*\n",
llms.txt-benches/comprehensive_comparison.rs-        );
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-        markdown
llms.txt-benches/comprehensive_comparison.rs-    }
llms.txt-benches/comprehensive_comparison.rs-}
llms.txt-benches/comprehensive_comparison.rs-fn main() {
llms.txt:benches/comprehensive_comparison.rs:    println!("Running comprehensive vexy_json vs jsonic benchmark...");
llms.txt-benches/comprehensive_comparison.rs-
llms.txt-benches/comprehensive_comparison.rs-    let mut suite = BenchmarkSuite::new();
llms.txt-benches/comprehensive_comparison.rs-
llms.txt---
llms.txt:crates/python/python/vexy_json/py.typed:# this_file: crates/python/python/vexy_json/py.typed
llms.txt:crates/python/python/vexy_json/py.typed-
llms.txt:crates/python/python/vexy_json/py.typed-# Marker file for PEP 561 indicating that this package supports typing
llms.txt---
llms.txt-docs/development/agents.md-
llms.txt-docs/development/agents.md-## 1. Project Overview
llms.txt-docs/development/agents.md-
llms.txt:docs/development/agents.md:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-docs/development/agents.md-
llms.txt-docs/development/agents.md-## 2. Development Status
llms.txt-docs/development/agents.md-
--
llms.txt-docs/development/agents.md-    -   `src/error/mod.rs`: Implements custom error types for parsing failures.
llms.txt-docs/development/agents.md--   `crates/cli`: The command-line interface.
llms.txt-docs/development/agents.md-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:docs/development/agents.md:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`.
llms.txt:docs/development/agents.md:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments.
llms.txt-docs/development/agents.md--   `crates/test-utils`: Utility functions for testing.
llms.txt-docs/development/agents.md-
llms.txt-docs/development/agents.md-### 3.2. Core Features
--
llms.txt-docs/development/agents.md-    -   Benchmarking is performed using `criterion.rs`, with benchmarks defined in the `benches/` directory.
llms.txt-docs/development/agents.md--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt-docs/development/agents.md--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json` and `jsonic`.
llms.txt:docs/development/agents.md:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-docs/development/agents.md-
llms.txt-docs/development/agents.md-## 4. Development Workflow
llms.txt-docs/development/agents.md-
llms.txt---
llms.txt-crates/python/Cargo.toml-[package]
llms.txt:crates/python/Cargo.toml:name = "vexy_json-python"
llms.txt-crates/python/Cargo.toml-version = "2.2.3"
llms.txt-crates/python/Cargo.toml-edition = "2021"
llms.txt:crates/python/Cargo.toml:description = "Python bindings for vexy_json - a forgiving JSON parser"
llms.txt:crates/python/Cargo.toml:repository = "https://github.com/twardoch/vexy_json"
llms.txt-crates/python/Cargo.toml-license = "MIT OR Apache-2.0"
llms.txt-crates/python/Cargo.toml-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-crates/python/Cargo.toml-
llms.txt-crates/python/Cargo.toml-
llms.txt-crates/python/Cargo.toml-[lib]
llms.txt:crates/python/Cargo.toml:name = "vexy_json"
llms.txt-crates/python/Cargo.toml-crate-type = [ "cdylib" ]
llms.txt-crates/python/Cargo.toml-
llms.txt-crates/python/Cargo.toml-
--
llms.txt-crates/python/Cargo.toml-features = [ "extension-module" ]
llms.txt-crates/python/Cargo.toml-
llms.txt-crates/python/Cargo.toml-
llms.txt:crates/python/Cargo.toml:[dependencies.vexy_json-core]
llms.txt-crates/python/Cargo.toml-path = "../core"
llms.txt-crates/python/Cargo.toml-
llms.txt-crates/python/Cargo.toml-
llms.txt---
llms.txt-crates/python/tests/test_basic.py-"""
llms.txt:crates/python/tests/test_basic.py:Basic functionality tests for vexy_json Python bindings.
llms.txt-crates/python/tests/test_basic.py-"""
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-import pytest
llms.txt:crates/python/tests/test_basic.py:import vexy_json
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-class TestBasicParsing:
--
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_parse_simple_object(self):
llms.txt-crates/python/tests/test_basic.py-        """Test parsing a simple JSON object."""
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse('{"key": "value"}')
llms.txt-crates/python/tests/test_basic.py-        assert result == {"key": "value"}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_parse_simple_array(self):
llms.txt-crates/python/tests/test_basic.py-        """Test parsing a simple JSON array."""
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse("[1, 2, 3]")
llms.txt-crates/python/tests/test_basic.py-        assert result == [1, 2, 3]
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_parse_null(self):
llms.txt-crates/python/tests/test_basic.py-        """Test parsing null value."""
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse("null")
llms.txt-crates/python/tests/test_basic.py-        assert result is None
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_parse_boolean(self):
llms.txt-crates/python/tests/test_basic.py-        """Test parsing boolean values."""
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse("true") is True
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse("false") is False
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_parse_numbers(self):
llms.txt-crates/python/tests/test_basic.py-        """Test parsing various number formats."""
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse("42") == 42
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse("-42") == -42
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse("3.14") == 3.14
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse("-3.14") == -3.14
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse("1e5") == 100000.0
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse("1.5e2") == 150.0
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_parse_strings(self):
llms.txt-crates/python/tests/test_basic.py-        """Test parsing string values."""
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse('"hello"') == "hello"
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse('"hello world"') == "hello world"
llms.txt:crates/python/tests/test_basic.py:        assert vexy_json.parse('""') == ""
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_parse_nested_structures(self):
llms.txt-crates/python/tests/test_basic.py-        """Test parsing nested objects and arrays."""
--
llms.txt-crates/python/tests/test_basic.py-            }
llms.txt-crates/python/tests/test_basic.py-        }
llms.txt-crates/python/tests/test_basic.py-        """
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(complex_json)
llms.txt-crates/python/tests/test_basic.py-        expected = {
llms.txt-crates/python/tests/test_basic.py-            "users": [{"name": "Alice", "age": 30}, {"name": "Bob", "age": 25}],
llms.txt-crates/python/tests/test_basic.py-            "metadata": {"count": 2, "active": True},
--
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-class TestForgivingFeatures:
llms.txt:crates/python/tests/test_basic.py:    """Test vexy_json's forgiving JSON features."""
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_comments(self):
llms.txt-crates/python/tests/test_basic.py-        """Test single-line and multi-line comments."""
--
llms.txt-crates/python/tests/test_basic.py-            "age": 30
llms.txt-crates/python/tests/test_basic.py-        }
llms.txt-crates/python/tests/test_basic.py-        """
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(json_with_comments)
llms.txt-crates/python/tests/test_basic.py-        assert result == {"name": "Alice", "age": 30}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_trailing_commas(self):
llms.txt-crates/python/tests/test_basic.py-        """Test trailing commas in objects and arrays."""
llms.txt-crates/python/tests/test_basic.py-        # Object with trailing comma
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse('{"a": 1, "b": 2,}')
llms.txt-crates/python/tests/test_basic.py-        assert result == {"a": 1, "b": 2}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Array with trailing comma
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse("[1, 2, 3,]")
llms.txt-crates/python/tests/test_basic.py-        assert result == [1, 2, 3]
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_unquoted_keys(self):
llms.txt-crates/python/tests/test_basic.py-        """Test unquoted object keys."""
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse('{key: "value", another_key: 42}')
llms.txt-crates/python/tests/test_basic.py-        assert result == {"key": "value", "another_key": 42}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_single_quotes(self):
llms.txt-crates/python/tests/test_basic.py-        """Test single-quoted strings."""
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse("{'key': 'value'}")
llms.txt-crates/python/tests/test_basic.py-        assert result == {"key": "value"}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_implicit_top_level(self):
llms.txt-crates/python/tests/test_basic.py-        """Test implicit top-level objects and arrays."""
llms.txt-crates/python/tests/test_basic.py-        # Implicit object
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse('key: "value", number: 42')
llms.txt-crates/python/tests/test_basic.py-        assert result == {"key": "value", "number": 42}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Implicit array
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse("1, 2, 3")
llms.txt-crates/python/tests/test_basic.py-        assert result == [1, 2, 3]
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_newline_as_comma(self):
--
llms.txt-crates/python/tests/test_basic.py-            "b": 2
llms.txt-crates/python/tests/test_basic.py-        }
llms.txt-crates/python/tests/test_basic.py-        """
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(json_with_newlines)
llms.txt-crates/python/tests/test_basic.py-        assert result == {"a": 1, "b": 2}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_combined_features(self):
--
llms.txt-crates/python/tests/test_basic.py-            active: true,
llms.txt-crates/python/tests/test_basic.py-        }
llms.txt-crates/python/tests/test_basic.py-        """
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(forgiving_json)
llms.txt-crates/python/tests/test_basic.py-        assert result == {"name": "Alice", "age": 30, "active": True}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-
--
llms.txt-crates/python/tests/test_basic.py-        json_with_comment = '{"key": "value", // comment}'
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should work with comments enabled (default)
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(json_with_comment)
llms.txt-crates/python/tests/test_basic.py-        assert result == {"key": "value"}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should fail with comments disabled
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse_with_options(json_with_comment, allow_comments=False)
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_disable_trailing_commas(self):
llms.txt-crates/python/tests/test_basic.py-        """Test disabling trailing comma support."""
llms.txt-crates/python/tests/test_basic.py-        json_with_trailing = '{"a": 1, "b": 2,}'
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should work with trailing commas enabled (default)
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(json_with_trailing)
llms.txt-crates/python/tests/test_basic.py-        assert result == {"a": 1, "b": 2}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should fail with trailing commas disabled
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse_with_options(
llms.txt-crates/python/tests/test_basic.py-                json_with_trailing, allow_trailing_commas=False
llms.txt-crates/python/tests/test_basic.py-            )
llms.txt-crates/python/tests/test_basic.py-
--
llms.txt-crates/python/tests/test_basic.py-        json_unquoted = '{key: "value"}'
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should work with unquoted keys enabled (default)
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(json_unquoted)
llms.txt-crates/python/tests/test_basic.py-        assert result == {"key": "value"}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should fail with unquoted keys disabled
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse_with_options(json_unquoted, allow_unquoted_keys=False)
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_disable_single_quotes(self):
llms.txt-crates/python/tests/test_basic.py-        """Test disabling single quote support."""
llms.txt-crates/python/tests/test_basic.py-        json_single_quotes = "{'key': 'value'}"
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should work with single quotes enabled (default)
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(json_single_quotes)
llms.txt-crates/python/tests/test_basic.py-        assert result == {"key": "value"}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should fail with single quotes disabled
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse_with_options(json_single_quotes, allow_single_quotes=False)
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_disable_implicit_top_level(self):
llms.txt-crates/python/tests/test_basic.py-        """Test disabling implicit top-level support."""
llms.txt-crates/python/tests/test_basic.py-        implicit_object = 'key: "value"'
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should work with implicit top-level enabled (default)
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(implicit_object)
llms.txt-crates/python/tests/test_basic.py-        assert result == {"key": "value"}
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should fail with implicit top-level disabled
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse_with_options(implicit_object, implicit_top_level=False)
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_max_depth_limit(self):
llms.txt-crates/python/tests/test_basic.py-        """Test maximum depth limitation."""
--
llms.txt-crates/python/tests/test_basic.py-        deep_json = '{"a":' * 10 + "1" + "}" * 10
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should work with default max_depth (128)
llms.txt:crates/python/tests/test_basic.py:        result = vexy_json.parse(deep_json)
llms.txt-crates/python/tests/test_basic.py-        assert isinstance(result, dict)
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        # Should fail with low max_depth
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse_with_options(deep_json, max_depth=5)
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-class TestValidation:
--
llms.txt-crates/python/tests/test_basic.py-        ]
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        for case in valid_cases:
llms.txt:crates/python/tests/test_basic.py:            assert vexy_json.is_valid(case), f"Should be valid: {case}"
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_is_valid_false_cases(self):
llms.txt-crates/python/tests/test_basic.py-        """Test cases that should be invalid."""
--
llms.txt-crates/python/tests/test_basic.py-        ]
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        for case in invalid_cases:
llms.txt:crates/python/tests/test_basic.py:            assert not vexy_json.is_valid(case), f"Should be invalid: {case}"
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-class TestErrorHandling:
--
llms.txt-crates/python/tests/test_basic.py-    def test_parse_error_exception(self):
llms.txt-crates/python/tests/test_basic.py-        """Test that parse errors raise ValueError."""
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError, match="Parse error"):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse("{invalid json}")
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_parse_with_options_error(self):
llms.txt-crates/python/tests/test_basic.py-        """Test that parse_with_options errors raise ValueError."""
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError, match="Parse error"):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse_with_options("{invalid}", allow_comments=False)
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_empty_input(self):
llms.txt-crates/python/tests/test_basic.py-        """Test parsing empty input."""
llms.txt-crates/python/tests/test_basic.py-        with pytest.raises(ValueError):
llms.txt:crates/python/tests/test_basic.py:            vexy_json.parse("")
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-    def test_malformed_json(self):
llms.txt-crates/python/tests/test_basic.py-        """Test various malformed JSON inputs."""
--
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-        for case in malformed_cases:
llms.txt-crates/python/tests/test_basic.py-            with pytest.raises(ValueError):
llms.txt:crates/python/tests/test_basic.py:                vexy_json.parse(case)
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-
llms.txt-crates/python/tests/test_basic.py-if __name__ == "__main__":
llms.txt---
llms.txt:bindings/python/src/vexy_json/__init__.py-"""
llms.txt:bindings/python/src/vexy_json/__init__.py:vexy_json - A forgiving JSON parser for Python
llms.txt:bindings/python/src/vexy_json/__init__.py-
llms.txt:bindings/python/src/vexy_json/__init__.py-This module provides a fast, forgiving JSON parser that can handle:
llms.txt:bindings/python/src/vexy_json/__init__.py-- Comments (// and /* */)
llms.txt---
llms.txt:bindings/python/src/vexy_json/__init__.py-- Automatic error repair
llms.txt:bindings/python/src/vexy_json/__init__.py-
llms.txt:bindings/python/src/vexy_json/__init__.py-Example:
llms.txt:bindings/python/src/vexy_json/__init__.py:    >>> import vexy_json
llms.txt:bindings/python/src/vexy_json/__init__.py:    >>> data = vexy_json.parse('{ unquoted: true, /* comment */ trailing: "comma", }')
llms.txt:bindings/python/src/vexy_json/__init__.py-    >>> print(data)
llms.txt:bindings/python/src/vexy_json/__init__.py-    {'unquoted': True, 'trailing': 'comma'}
llms.txt:bindings/python/src/vexy_json/__init__.py-"""
llms.txt:bindings/python/src/vexy_json/__init__.py-
llms.txt:bindings/python/src/vexy_json/__init__.py:from .vexy_json import (
llms.txt:bindings/python/src/vexy_json/__init__.py-    parse,
llms.txt:bindings/python/src/vexy_json/__init__.py-    parse_with_options,
llms.txt:bindings/python/src/vexy_json/__init__.py-    dumps,
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi:# this_file: crates/python/vexy_json.pyi
llms.txt:crates/python/python/vexy_json/__init__.pyi-
llms.txt:crates/python/python/vexy_json/__init__.pyi-"""
llms.txt:crates/python/python/vexy_json/__init__.pyi:Type stubs for vexy_json Python bindings.
llms.txt:crates/python/python/vexy_json/__init__.pyi-
llms.txt:crates/python/python/vexy_json/__init__.pyi:This file provides type hints for the vexy_json Python module, which is implemented in Rust.
llms.txt:crates/python/python/vexy_json/__init__.pyi-"""
llms.txt:crates/python/python/vexy_json/__init__.pyi-
llms.txt:crates/python/python/vexy_json/__init__.pyi-from typing import Any, Dict, List, Union, Optional, IO, Iterator, ContextManager
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        ValueError: If the input is not valid JSON
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> result = vexy_json.parse('{"key": "value", trailing: true,}')
llms.txt:crates/python/python/vexy_json/__init__.pyi-        >>> print(result)
llms.txt:crates/python/python/vexy_json/__init__.pyi-        {'key': 'value', 'trailing': True}
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        ValueError: If the input is not valid JSON
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> result = vexy_json.parse_with_options('key: value', implicit_top_level=True)
llms.txt:crates/python/python/vexy_json/__init__.pyi-        >>> print(result)
llms.txt:crates/python/python/vexy_json/__init__.pyi-        {'key': 'value'}
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        True if the input is valid, False otherwise
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> vexy_json.is_valid('{"valid": true}')
llms.txt:crates/python/python/vexy_json/__init__.pyi-        True
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> vexy_json.is_valid('invalid json')
llms.txt:crates/python/python/vexy_json/__init__.pyi-        False
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt:crates/python/python/vexy_json/__init__.pyi-    ...
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        TypeError: If the object cannot be serialized to JSON
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi-        >>> data = {'key': 'value', 'number': 42}
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> vexy_json.dumps(data)
llms.txt:crates/python/python/vexy_json/__init__.pyi-        '{"key":"value","number":42}'
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> vexy_json.dumps(data, indent=2)
llms.txt:crates/python/python/vexy_json/__init__.pyi-        '{\n  "key": "value",\n  "number": 42\n}'
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt:crates/python/python/vexy_json/__init__.pyi-    ...
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        ValueError: If the content is not valid JSON
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi-        >>> with open('data.json', 'r') as f:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        ...     result = vexy_json.load(f)
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt:crates/python/python/vexy_json/__init__.pyi-    ...
llms.txt:crates/python/python/vexy_json/__init__.pyi-
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        TypeError: If the object cannot be serialized
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi-        >>> data = {'key': 'value'}
llms.txt:crates/python/python/vexy_json/__init__.pyi-        >>> with open('output.json', 'w') as f:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        ...     vexy_json.dump(data, f, indent=2)
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt:crates/python/python/vexy_json/__init__.pyi-    ...
llms.txt:crates/python/python/vexy_json/__init__.pyi-
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        ImportError: If NumPy is not available
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt:crates/python/python/vexy_json/__init__.pyi-        >>> print(type(arr))
llms.txt:crates/python/python/vexy_json/__init__.pyi-        <class 'numpy.ndarray'>
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        The parsed array with zero-copy optimization when possible
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> arr = vexy_json.loads_numpy_zerocopy('[1.0, 2.0, 3.0]', dtype='float64')
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt:crates/python/python/vexy_json/__init__.pyi-    ...
llms.txt:crates/python/python/vexy_json/__init__.pyi-
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-        The parsed JSON as a DataFrame
llms.txt:crates/python/python/vexy_json/__init__.pyi-        
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
llms.txt:crates/python/python/vexy_json/__init__.pyi-        >>> print(type(df))
llms.txt:crates/python/python/vexy_json/__init__.pyi-        <class 'pandas.core.frame.DataFrame'>
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-    JSON files or streams.
llms.txt:crates/python/python/vexy_json/__init__.pyi-    
llms.txt:crates/python/python/vexy_json/__init__.pyi-    Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> import vexy_json
llms.txt:crates/python/python/vexy_json/__init__.pyi:        >>> with vexy_json.StreamingParser() as parser:
llms.txt:crates/python/python/vexy_json/__init__.pyi-        ...     for item in parser.parse_stream(file_handle):
llms.txt:crates/python/python/vexy_json/__init__.pyi-        ...         print(item)
llms.txt:crates/python/python/vexy_json/__init__.pyi-    """
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-            Iterator of parsed JSON objects
llms.txt:crates/python/python/vexy_json/__init__.pyi-            
llms.txt:crates/python/python/vexy_json/__init__.pyi-        Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:            >>> with vexy_json.StreamingParser() as parser:
llms.txt:crates/python/python/vexy_json/__init__.pyi-            ...     for item in parser.parse_stream(file_handle):
llms.txt:crates/python/python/vexy_json/__init__.pyi-            ...         process(item)
llms.txt:crates/python/python/vexy_json/__init__.pyi-        """
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.pyi-            Iterator of parsed JSON objects
llms.txt:crates/python/python/vexy_json/__init__.pyi-            
llms.txt:crates/python/python/vexy_json/__init__.pyi-        Example:
llms.txt:crates/python/python/vexy_json/__init__.pyi:            >>> with vexy_json.StreamingParser() as parser:
llms.txt:crates/python/python/vexy_json/__init__.pyi-            ...     for item in parser.parse_lines(file_handle):
llms.txt:crates/python/python/vexy_json/__init__.pyi-            ...         process(item)
llms.txt:crates/python/python/vexy_json/__init__.pyi-        """
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.py-"""
llms.txt:crates/python/python/vexy_json/__init__.py:vexy_json - A forgiving JSON parser for Python.
llms.txt:crates/python/python/vexy_json/__init__.py-
llms.txt:crates/python/python/vexy_json/__init__.py:This module provides Python bindings for the vexy_json library, which is a Rust port
llms.txt:crates/python/python/vexy_json/__init__.py-of the JavaScript jsonic library. It allows parsing of "forgiving" JSON that includes
llms.txt:crates/python/python/vexy_json/__init__.py-features like comments, trailing commas, unquoted keys, and more.
llms.txt:crates/python/python/vexy_json/__init__.py-
llms.txt---
llms.txt:crates/python/python/vexy_json/__init__.py-- JSON repair functionality
llms.txt:crates/python/python/vexy_json/__init__.py-"""
llms.txt:crates/python/python/vexy_json/__init__.py-
llms.txt:crates/python/python/vexy_json/__init__.py:from ._vexy_json import (
llms.txt:crates/python/python/vexy_json/__init__.py-    parse_json as parse,
llms.txt:crates/python/python/vexy_json/__init__.py-    parse_with_options_py as parse_with_options,
llms.txt:crates/python/python/vexy_json/__init__.py-    is_valid,
llms.txt---
llms.txt-benches/profiling.rs-// this_file: benches/profiling.rs
llms.txt-benches/profiling.rs-
llms.txt-benches/profiling.rs-use criterion::{black_box, criterion_group, criterion_main, Criterion};
llms.txt:benches/profiling.rs:use vexy_json::parse;
llms.txt-benches/profiling.rs-
llms.txt-benches/profiling.rs-fn profiling_heavy_workload(c: &mut Criterion) {
llms.txt-benches/profiling.rs-    // Create a large, complex JSON that will stress the parser
--
llms.txt-docs/development/gemini.md-
llms.txt-docs/development/gemini.md-## 1. Project Overview
llms.txt-docs/development/gemini.md-
llms.txt:docs/development/gemini.md:`vexy_json` is a Rust port of the JavaScript library `jsonic`, a forgiving JSON parser. The reference JavaScript implementation is located in the `ref/jsonic/` directory.
llms.txt-docs/development/gemini.md-
llms.txt-docs/development/gemini.md-## 2. Development Status
llms.txt-docs/development/gemini.md-
--
llms.txt-docs/development/gemini.md-    -   `src/error/mod.rs`: Implements custom error types for parsing failures.
llms.txt-docs/development/gemini.md--   `crates/cli`: The command-line interface.
llms.txt-docs/development/gemini.md-    -   `src/main.rs`: The entry point for the CLI binary.
llms.txt:docs/development/gemini.md:-   `crates/serde`: Provides `serde` integration for `vexy_json::Value`.
llms.txt:docs/development/gemini.md:-   `crates/wasm`: Contains WebAssembly bindings to expose `vexy_json` to JavaScript environments.
llms.txt-docs/development/gemini.md--   `crates/test-utils`: Utility functions for testing.
llms.txt-docs/development/gemini.md-
llms.txt-docs/development/gemini.md-### 3.2. Core Features
--
llms.txt-docs/development/gemini.md-    -   Benchmarking is performed using `criterion.rs`, with benchmarks defined in the `benches/` directory.
llms.txt-docs/development/gemini.md--   **Extensibility:** The architecture uses Rust's traits and pattern matching for clarity and maintainability, avoiding a direct port of the JavaScript plugin system in favor of a more idiomatic approach.
llms.txt-docs/development/gemini.md--   **Performance:** The implementation aims for high performance, with ongoing benchmarking to compare against `serde_json` and `jsonic`.
llms.txt:docs/development/gemini.md:-   **WASM Target:** A key feature is the ability to compile to WebAssembly, providing a performant `vexy_json` parser for web browsers and Node.js. The `wasm-pack` tool is used for building the WASM package.
llms.txt-docs/development/gemini.md-
llms.txt-docs/development/gemini.md-## 4. Development Workflow
llms.txt-docs/development/gemini.md-
--
llms.txt-docs/web-tool.md-
llms.txt-docs/web-tool.md-# Interactive Web Tools
llms.txt-docs/web-tool.md-
llms.txt:docs/web-tool.md:The vexy_json project provides two interactive web tools for parsing JSON with different libraries, both featuring identical modern interfaces and seamless Jekyll integration.
llms.txt-docs/web-tool.md-
llms.txt-docs/web-tool.md-## Available Tools
llms.txt-docs/web-tool.md-
llms.txt:docs/web-tool.md:### [Vexy JSON Parser]({{ '/vexy_json-tool/' | relative_url }})
llms.txt:docs/web-tool.md:- **Library**: vexy_json (Rust compiled to WebAssembly)
llms.txt:docs/web-tool.md:- **URL**: [https://twardoch.github.io/vexy_json/vexy_json-tool/](https://twardoch.github.io/vexy_json/vexy_json-tool/)
llms.txt:docs/web-tool.md:- **Features**: WebAssembly-powered parsing with all vexy_json forgiving features
llms.txt-docs/web-tool.md-
llms.txt-docs/web-tool.md-### [Jsonic Parser]({{ '/jsonic-tool/' | relative_url }})
llms.txt-docs/web-tool.md-- **Library**: jsonic (JavaScript via CDN)
llms.txt:docs/web-tool.md:- **URL**: [https://twardoch.github.io/vexy_json/jsonic-tool/](https://twardoch.github.io/vexy_json/jsonic-tool/)
llms.txt-docs/web-tool.md-- **Features**: Flexible JSON with object merging and property chains
llms.txt-docs/web-tool.md-
llms.txt-docs/web-tool.md-### [Tools Overview]({{ '/tools/' | relative_url }})
llms.txt---
llms.txt-docs/assets/js/browser-compatibility.js-// this_file: docs/assets/js/browser-compatibility.js
llms.txt:docs/assets/js/browser-compatibility.js:// Browser compatibility and feature detection for vexy_json web tool
llms.txt-docs/assets/js/browser-compatibility.js-
llms.txt-docs/assets/js/browser-compatibility.js-/**
llms.txt-docs/assets/js/browser-compatibility.js- * Browser compatibility utility class
--
llms.txt-docs/tool.html-  <head>
llms.txt-docs/tool.html-    <meta charset="UTF-8" />
llms.txt-docs/tool.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:docs/tool.html:    <title>vexy_json - Forgiving JSON Parser</title>
llms.txt-docs/tool.html-    <meta
llms.txt-docs/tool.html-      name="description"
llms.txt:docs/tool.html:      content="Interactive web tool for parsing forgiving JSON with vexy_json - supports comments, unquoted keys, trailing commas, and more."
llms.txt-docs/tool.html-    />
llms.txt-docs/tool.html-
llms.txt-docs/tool.html-    <!-- Favicon -->
--
llms.txt-docs/tool.html-    <div class="navbar bg-base-100 shadow-lg">
llms.txt-docs/tool.html-      <div class="container mx-auto">
llms.txt-docs/tool.html-        <div class="flex-1">
llms.txt:docs/tool.html:          <a href="index.html" class="btn btn-ghost text-xl">vexy_json</a>
llms.txt-docs/tool.html-        </div>
llms.txt-docs/tool.html-        <div class="flex-none">
llms.txt-docs/tool.html-          <ul class="menu menu-horizontal px-1">
llms.txt-docs/tool.html-            <li><a href="index.html">Docs</a></li>
llms.txt-docs/tool.html-            <li>
llms.txt:docs/tool.html:              <a href="https://github.com/twardoch/vexy_json" target="_blank"
llms.txt-docs/tool.html-                >GitHub</a
llms.txt-docs/tool.html-              >
llms.txt-docs/tool.html-            </li>
--
llms.txt-docs/tool.html-    <main class="container mx-auto px-4 py-8">
llms.txt-docs/tool.html-      <!-- Header -->
llms.txt-docs/tool.html-      <div class="text-center mb-8">
llms.txt:docs/tool.html:        <h1 class="text-4xl font-bold mb-4">vexy_json Parser</h1>
llms.txt-docs/tool.html-        <p class="text-lg text-base-content/70">
llms.txt-docs/tool.html-          A forgiving JSON parser that supports comments, unquoted keys,
llms.txt-docs/tool.html-          trailing commas, and more.
--
llms.txt-docs/tool.html-              >
llms.txt-docs/tool.html-{
llms.txt-docs/tool.html-  // You can use comments!
llms.txt:docs/tool.html:  name: "vexy_json",
llms.txt-docs/tool.html-  features: [
llms.txt-docs/tool.html-    'comments',
llms.txt-docs/tool.html-    'unquoted keys',
--
llms.txt-docs/tool.html-                class="tab-content bg-base-100 border-base-300 rounded-box p-6"
llms.txt-docs/tool.html-              >
llms.txt-docs/tool.html-                <pre class="text-sm"><code>{
llms.txt:docs/tool.html:  "name": "vexy_json",
llms.txt-docs/tool.html-  "version": "1.1.0",
llms.txt-docs/tool.html-  "features": ["forgiving", "fast", "rust"]
llms.txt-docs/tool.html-}</code></pre>
--
llms.txt-docs/tool.html-      <div class="grid grid-flow-col gap-4">
llms.txt-docs/tool.html-        <a href="index.html" class="link link-hover">Documentation</a>
llms.txt-docs/tool.html-        <a href="api.html" class="link link-hover">API Reference</a>
llms.txt:docs/tool.html:        <a href="https://github.com/twardoch/vexy_json" class="link link-hover"
llms.txt-docs/tool.html-          >Source Code</a
llms.txt-docs/tool.html-        >
llms.txt:docs/tool.html:        <a href="https://crates.io/crates/vexy_json" class="link link-hover"
llms.txt-docs/tool.html-          >crates.io</a
llms.txt-docs/tool.html-        >
llms.txt-docs/tool.html-      </div>
llms.txt-docs/tool.html-      <div>
llms.txt:docs/tool.html:        <p>vexy_json - A forgiving JSON parser. Built with Rust and WebAssembly.</p>
llms.txt-docs/tool.html-      </div>
llms.txt-docs/tool.html-    </footer>
llms.txt-docs/tool.html-
--
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-# WebAssembly (WASM) API Reference
llms.txt-docs/wasm.md-
llms.txt:docs/wasm.md:`vexy_json` provides WebAssembly bindings for use in JavaScript environments (browsers, Node.js). The WASM module exposes parsing functions that mirror the Rust API, including forgiving features and strict mode.
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-## Usage
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```js
llms.txt:docs/wasm.md:import init, { parse_json, parse_json_with_options } from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-await init();
llms.txt-docs/wasm.md-const result = parse_json_with_options('{a:1}', { allow_comments: true });
--
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```toml
llms.txt-docs/wasm.md-[dependencies]
llms.txt:docs/wasm.md:vexy_json = { version = "2.0.0", features = ["wasm"] }
llms.txt-docs/wasm.md-```
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-After building your Rust project with the `wasm` feature (e.g., using `wasm-pack`), you can import the generated JavaScript module.
--
llms.txt-docs/wasm.md-**Example:**
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```javascript
llms.txt:docs/wasm.md:import init from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-async function run() {
llms.txt-docs/wasm.md-  await init();
llms.txt:docs/wasm.md:  console.log("vexy_json WASM module loaded.");
llms.txt:docs/wasm.md:  // Now you can use other vexy_json functions
llms.txt-docs/wasm.md-}
llms.txt-docs/wasm.md-run();
llms.txt-docs/wasm.md-```
--
llms.txt-docs/wasm.md-**Example:**
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```javascript
llms.txt:docs/wasm.md:import { parse_json } from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-try {
llms.txt-docs/wasm.md-  const result = parse_json(`{
--
llms.txt-docs/wasm.md-**Example:**
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```javascript
llms.txt:docs/wasm.md:import { parse_json_with_options } from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-// Strict JSON mode
llms.txt-docs/wasm.md-const strictOptions = {
--
llms.txt-docs/wasm.md-**Example:**
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```javascript
llms.txt:docs/wasm.md:import { validate_json } from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-console.log(validate_json('{"key": "value"}')); // true
llms.txt-docs/wasm.md-console.log(validate_json('{key: "value"}'));   // true (unquoted keys allowed by default)
--
llms.txt-docs/wasm.md-**Example:**
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```javascript
llms.txt:docs/wasm.md:import { get_parser_options, parse_json_with_options } from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-const defaultOptions = get_parser_options();
llms.txt-docs/wasm.md-console.log(defaultOptions.allowComments); // true
--
llms.txt-docs/wasm.md-**Example:**
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```javascript
llms.txt:docs/wasm.md:import { parse_json, stringify_value } from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-const parsed = parse_json('{key: "value", num: 42}');
llms.txt-docs/wasm.md-const jsonString = stringify_value(parsed); // '{"key":"value","num":42}'
--
llms.txt-docs/wasm.md-get_version_info(): object
llms.txt-docs/wasm.md-```
llms.txt-docs/wasm.md-
llms.txt:docs/wasm.md:Returns version and build information for the `vexy_json` library. Useful for debugging and compatibility checking.
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-- Returns: A JavaScript object with properties like `version`, `description`, `authors`, `homepage`, `repository`, and `license`.
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-**Example:**
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```javascript
llms.txt:docs/wasm.md:import { get_version_info } from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-const info = get_version_info();
llms.txt:docs/wasm.md:console.log(`vexy_json v${info.version} - ${info.description}`);
llms.txt-docs/wasm.md-```
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-## `ParseError` Class
--
llms.txt-docs/wasm.md-**Example (Error Handling):**
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-```javascript
llms.txt:docs/wasm.md:import { parse_json } from './pkg/vexy_json_wasm.js';
llms.txt-docs/wasm.md-
llms.txt-docs/wasm.md-try {
llms.txt-docs/wasm.md-  parse_json('{invalid json');
llms.txt-docs/wasm.md-} catch (e) {
llms.txt-docs/wasm.md-  if (e instanceof Error && e.message.startsWith('Parse Error:')) { // Basic check for ParseError
llms.txt:docs/wasm.md:    console.error(`Caught vexy_json ParseError: ${e.message} at position ${e.position}`);
llms.txt-docs/wasm.md-  } else {
llms.txt-docs/wasm.md-    console.error(`Caught unexpected error: ${e}`);
llms.txt-docs/wasm.md-  }
llms.txt---
llms.txt-crates/core/src/streaming/mod.rs-// this_file: src/streaming/mod.rs
llms.txt-crates/core/src/streaming/mod.rs-
llms.txt:crates/core/src/streaming/mod.rs://! Streaming parser implementation for vexy_json.
llms.txt-crates/core/src/streaming/mod.rs-//!
llms.txt-crates/core/src/streaming/mod.rs-//! This module provides a streaming JSON parser that can process input
llms.txt-crates/core/src/streaming/mod.rs-//! incrementally, making it suitable for parsing large files or real-time
--
llms.txt-docs/design/python-api.md-nav_order: 1
llms.txt-docs/design/python-api.md----
llms.txt-docs/design/python-api.md-
llms.txt:docs/design/python-api.md:# Python API Design for vexy_json
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-## Overview
llms.txt-docs/design/python-api.md-
llms.txt:docs/design/python-api.md:This document outlines the design for Python bindings for the vexy_json library, drawing from PyO3 best practices and existing Python JSON parser APIs (json, orjson, ujson).
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-## Core Design Principles
llms.txt-docs/design/python-api.md-
--
llms.txt-docs/design/python-api.md-### Basic Functions (Similar to json module)
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-```python
llms.txt:docs/design/python-api.md:import vexy_json
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-# Basic parsing - similar to json.loads()
llms.txt-docs/design/python-api.md-def loads(s: str, *, 
--
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-```python
llms.txt-docs/design/python-api.md-class ParserOptions:
llms.txt:docs/design/python-api.md:    """Configuration options for vexy_json parser."""
llms.txt-docs/design/python-api.md-    
llms.txt-docs/design/python-api.md-    def __init__(self, 
llms.txt-docs/design/python-api.md-                 allow_comments: bool = True,
--
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-```python
llms.txt-docs/design/python-api.md-class VexyJsonError(Exception):
llms.txt:docs/design/python-api.md:    """Base exception for vexy_json errors."""
llms.txt-docs/design/python-api.md-    pass
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-class ParseError(VexyJsonError):
--
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-- **`loads()`** instead of `parse()` for consistency with `json` module
llms.txt-docs/design/python-api.md-- **Keyword-only arguments** for options to prevent positional confusion
llms.txt:docs/design/python-api.md:- **Boolean defaults** match vexy_json's forgiving nature
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-### 2. Error Handling
llms.txt-docs/design/python-api.md-
--
llms.txt-docs/design/python-api.md-- **Standard library compatibility**: `loads()` and `dumps()` work as drop-in replacements
llms.txt-docs/design/python-api.md-- **orjson inspiration**: Performance-focused design with bytes handling
llms.txt-docs/design/python-api.md-- **ujson similarity**: Simple API with performance benefits
llms.txt:docs/design/python-api.md:- **vexy_json extensions**: Forgiving features as the key differentiator
llms.txt-docs/design/python-api.md-
llms.txt-docs/design/python-api.md-This design balances Python idioms with the performance benefits of Rust, providing a comprehensive JSON parsing solution that extends beyond standard JSON capabilities.
llms.txt---
llms.txt-bindings/python/src/lib.rs-use pyo3::types::{PyDict, PyList};
llms.txt-bindings/python/src/lib.rs-use pythonize::{depythonize, pythonize};
llms.txt-bindings/python/src/lib.rs-use serde_json::Value as JsonValue;
llms.txt:bindings/python/src/lib.rs:use vexy_json_core::{
llms.txt-bindings/python/src/lib.rs-    parse as core_parse, parse_with_options as core_parse_with_options, Parser, ParserOptions,
llms.txt-bindings/python/src/lib.rs-    RepairMode,
llms.txt-bindings/python/src/lib.rs-};
--
llms.txt-bindings/python/src/lib.rs-    }
llms.txt-bindings/python/src/lib.rs-}
llms.txt-bindings/python/src/lib.rs-
llms.txt:bindings/python/src/lib.rs:/// Parser options for configuring vexy_json behavior
llms.txt-bindings/python/src/lib.rs-#[pyclass]
llms.txt-bindings/python/src/lib.rs-#[derive(Clone)]
llms.txt-bindings/python/src/lib.rs-struct Options {
--
llms.txt-bindings/python/src/lib.rs-    repairs: Vec<Repair>,
llms.txt-bindings/python/src/lib.rs-}
llms.txt-bindings/python/src/lib.rs-
llms.txt:bindings/python/src/lib.rs:/// vexy_json parser instance
llms.txt-bindings/python/src/lib.rs-#[pyclass]
llms.txt-bindings/python/src/lib.rs-struct Parser {
llms.txt:bindings/python/src/lib.rs:    parser: vexy_json_core::Parser,
llms.txt-bindings/python/src/lib.rs-}
llms.txt-bindings/python/src/lib.rs-
llms.txt-bindings/python/src/lib.rs-#[pymethods]
--
llms.txt-bindings/python/src/lib.rs-    fn new(options: Option<Options>) -> Self {
llms.txt-bindings/python/src/lib.rs-        let opts = options.map(|o| o.inner).unwrap_or_default();
llms.txt-bindings/python/src/lib.rs-        Parser {
llms.txt:bindings/python/src/lib.rs:            parser: vexy_json_core::Parser::new(opts),
llms.txt-bindings/python/src/lib.rs-        }
llms.txt-bindings/python/src/lib.rs-    }
llms.txt-bindings/python/src/lib.rs-
--
llms.txt-bindings/python/src/lib.rs-    Ok(())
llms.txt-bindings/python/src/lib.rs-}
llms.txt-bindings/python/src/lib.rs-
llms.txt:bindings/python/src/lib.rs:/// Get vexy_json version
llms.txt-bindings/python/src/lib.rs-#[pyfunction]
llms.txt-bindings/python/src/lib.rs-fn version() -> &'static str {
llms.txt-bindings/python/src/lib.rs-    env!("CARGO_PKG_VERSION")
--
llms.txt-bindings/python/src/lib.rs-    pythonize(py, value).map_err(|e| PyValueError::new_err(format!("Conversion error: {}", e)))
llms.txt-bindings/python/src/lib.rs-}
llms.txt-bindings/python/src/lib.rs-
llms.txt:bindings/python/src/lib.rs:/// vexy_json - A forgiving JSON parser for Python
llms.txt-bindings/python/src/lib.rs-#[pymodule]
llms.txt:bindings/python/src/lib.rs:fn vexy_json(m: &Bound<'_, PyModule>) -> PyResult<()> {
llms.txt-bindings/python/src/lib.rs-    m.add_class::<ParseError>()?;
llms.txt-bindings/python/src/lib.rs-    m.add_class::<Repair>()?;
llms.txt-bindings/python/src/lib.rs-    m.add_class::<Options>()?;
--
llms.txt-docs/transform.md-### Basic Usage
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::{normalize, normalize_with_options, NormalizerOptions};
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-// Basic normalization with default options
llms.txt-docs/transform.md-let json = r#"{"b": 2, "a": 1, "c": null}"#;
--
llms.txt-docs/transform.md-Produces deterministic JSON output suitable for hashing and comparison:
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::CanonicalNormalizer;
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-let normalizer = CanonicalNormalizer::new();
llms.txt-docs/transform.md-let canonical = normalizer.normalize(json).unwrap();
--
llms.txt-docs/transform.md-Removes unnecessary elements and optimizes for size:
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::CleanupNormalizer;
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-let normalizer = CleanupNormalizer::new();
llms.txt-docs/transform.md-let cleaned = normalizer.normalize(json).unwrap();
--
llms.txt-docs/transform.md-### Basic Usage
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::{optimize, optimize_with_options, OptimizerOptions};
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-// Basic optimization with default options
llms.txt-docs/transform.md-let json = r#"{"count": 42.0, "items": [1, 2, 3]}"#;
--
llms.txt-docs/transform.md-Optimizes for minimal memory usage:
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::MemoryOptimizer;
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-let optimized = MemoryOptimizer::minimize_memory(&json).unwrap();
llms.txt-docs/transform.md-```
--
llms.txt-docs/transform.md-Optimizes for maximum performance:
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::PerformanceOptimizer;
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-let optimized = PerformanceOptimizer::maximize_performance(&json).unwrap();
llms.txt-docs/transform.md-```
--
llms.txt-docs/transform.md-Track optimization effectiveness:
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::AstOptimizer;
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-let mut optimizer = AstOptimizer::new();
llms.txt-docs/transform.md-let optimized = optimizer.optimize(&json).unwrap();
--
llms.txt-docs/transform.md-Combine normalization and optimization:
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::{parse, transform::{normalize, optimize}};
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-let json = r#"{"z": 1.0, "a": 2.0, "b": null}"#;
llms.txt-docs/transform.md-let value = parse(json).unwrap();
--
llms.txt-docs/transform.md-Create custom transformation pipelines:
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::{NormalizerOptions, OptimizerOptions};
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-fn custom_transform(json: &str) -> Result<String, Error> {
llms.txt-docs/transform.md-    // First normalize
--
llms.txt-docs/transform.md-Both normalization and optimization can fail:
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::transform::normalize;
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-match normalize(json) {
llms.txt-docs/transform.md-    Ok(normalized) => println!("Success: {}", normalized),
--
llms.txt-docs/transform.md-### With Parsing
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::{parse_with_options, transform::normalize, ParserOptions};
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-let options = ParserOptions {
llms.txt-docs/transform.md-    allow_comments: true,
--
llms.txt-docs/transform.md-### With Streaming
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-```rust
llms.txt:docs/transform.md:use vexy_json_core::{streaming::parse_streaming, transform::optimize};
llms.txt-docs/transform.md-
llms.txt-docs/transform.md-for value in parse_streaming(reader)? {
llms.txt-docs/transform.md-    let optimized = optimize(&value?)?;
llms.txt---
llms.txt-tests/error_handling.rs-// this_file: tests/error_handling.rs
llms.txt-tests/error_handling.rs-
llms.txt:tests/error_handling.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-tests/error_handling.rs-
llms.txt-tests/error_handling.rs-/// Comprehensive error handling tests ported from jsonic error.test.js
llms.txt:tests/error_handling.rs:/// These tests ensure vexy_json properly handles malformed input and provides meaningful error messages.
llms.txt-tests/error_handling.rs-/// Reference: ref/jsonic/test/error.test.js
llms.txt-tests/error_handling.rs-
llms.txt-tests/error_handling.rs-#[test]
--
llms.txt-tests/error_handling.rs-
llms.txt-tests/error_handling.rs-#[test]
llms.txt-tests/error_handling.rs-fn test_valid_edge_cases() {
llms.txt:tests/error_handling.rs:    // Test what vexy_json actually supports vs jsonic expectations
llms.txt-tests/error_handling.rs-    // Reference: jsonic error.test.js line 205-213
llms.txt-tests/error_handling.rs-
llms.txt:tests/error_handling.rs:    // vexy_json may not support implicit null like jsonic does
llms.txt-tests/error_handling.rs-    assert!(
llms.txt-tests/error_handling.rs-        parse(",]").is_err(),
llms.txt:tests/error_handling.rs:        "Implicit null in array not supported in vexy_json"
llms.txt-tests/error_handling.rs-    );
llms.txt-tests/error_handling.rs-
llms.txt:tests/error_handling.rs:    // Object with trailing values - test if vexy_json supports this
llms.txt-tests/error_handling.rs-    if let Ok(obj_result) = parse("{a:}") {
llms.txt:tests/error_handling.rs:        if let vexy_json::Value::Object(map) = obj_result {
llms.txt:tests/error_handling.rs:            assert_eq!(map.get("a"), Some(&vexy_json::Value::Null));
llms.txt-tests/error_handling.rs-        }
llms.txt-tests/error_handling.rs-    } else {
llms.txt:tests/error_handling.rs:        // vexy_json may not support trailing colons
llms.txt-tests/error_handling.rs-        assert!(
llms.txt-tests/error_handling.rs-            parse("{a:}").is_err(),
llms.txt:tests/error_handling.rs:            "Trailing colon not supported in vexy_json"
llms.txt-tests/error_handling.rs-        );
llms.txt-tests/error_handling.rs-    }
llms.txt-tests/error_handling.rs-
--
llms.txt-tests/error_handling.rs-    // Special case: array notation with object content
llms.txt-tests/error_handling.rs-    // Reference: jsonic error.test.js line 209-213
llms.txt-tests/error_handling.rs-
llms.txt:tests/error_handling.rs:    // vexy_json doesn't support object notation inside arrays like jsonic does
llms.txt-tests/error_handling.rs-    assert!(
llms.txt-tests/error_handling.rs-        parse("[a:1]").is_err(),
llms.txt:tests/error_handling.rs:        "Object notation in array not supported in vexy_json"
llms.txt-tests/error_handling.rs-    );
llms.txt-tests/error_handling.rs-
llms.txt:tests/error_handling.rs:    // Test what vexy_json does support instead
llms.txt-tests/error_handling.rs-    assert!(
llms.txt-tests/error_handling.rs-        parse("[{\"a\":1}]").is_ok(),
llms.txt-tests/error_handling.rs-        "Proper object in array should work"
--
llms.txt-tests/error_handling.rs-    // Test handling of unprintable characters
llms.txt-tests/error_handling.rs-    // Reference: jsonic error.test.js line 119-122
llms.txt-tests/error_handling.rs-
llms.txt:tests/error_handling.rs:    // vexy_json may allow null characters in strings (unlike strict JSON)
llms.txt-tests/error_handling.rs-    // Test what actually happens vs what jsonic does
llms.txt-tests/error_handling.rs-    let null_char_result = parse("\"\x00\"");
llms.txt-tests/error_handling.rs-    if null_char_result.is_ok() {
llms.txt:tests/error_handling.rs:        // If vexy_json allows it, that's different from jsonic but valid
llms.txt:tests/error_handling.rs:        assert!(true, "vexy_json allows null character in string");
llms.txt-tests/error_handling.rs-    } else {
llms.txt-tests/error_handling.rs-        assert!(null_char_result.is_err(), "Null character should error");
llms.txt-tests/error_handling.rs-    }
--
llms.txt-tests/error_handling.rs-#[test]
llms.txt-tests/error_handling.rs-fn test_empty_input_edge_cases() {
llms.txt-tests/error_handling.rs-    // Test various empty or whitespace inputs
llms.txt:tests/error_handling.rs:    assert_eq!(parse("").unwrap(), vexy_json::Value::Null);
llms.txt:tests/error_handling.rs:    assert_eq!(parse("   ").unwrap(), vexy_json::Value::Null);
llms.txt:tests/error_handling.rs:    assert_eq!(parse("\t").unwrap(), vexy_json::Value::Null);
llms.txt:tests/error_handling.rs:    assert_eq!(parse("\n").unwrap(), vexy_json::Value::Null);
llms.txt:tests/error_handling.rs:    assert_eq!(parse("\r").unwrap(), vexy_json::Value::Null);
llms.txt-tests/error_handling.rs-}
llms.txt-tests/error_handling.rs-
llms.txt-tests/error_handling.rs-#[test]
--
llms.txt-tests/error_handling.rs-        "Unclosed comment after content should error"
llms.txt-tests/error_handling.rs-    );
llms.txt-tests/error_handling.rs-
llms.txt:tests/error_handling.rs:    // Test if vexy_json supports comments - it may not support them at all
llms.txt-tests/error_handling.rs-    let comment_result = parse("/* closed */ a");
llms.txt-tests/error_handling.rs-    if comment_result.is_ok() {
llms.txt:tests/error_handling.rs:        assert!(true, "vexy_json supports comments by default");
llms.txt-tests/error_handling.rs-    } else {
llms.txt-tests/error_handling.rs-        // Try with parser options
llms.txt-tests/error_handling.rs-        let mut opts = ParserOptions::default();
--
llms.txt-tests/error_handling.rs-        let with_options = parse_with_options("/* closed */ a", opts);
llms.txt-tests/error_handling.rs-
llms.txt-tests/error_handling.rs-        if with_options.is_ok() {
llms.txt:tests/error_handling.rs:            assert!(true, "vexy_json supports comments with options");
llms.txt-tests/error_handling.rs-        } else {
llms.txt:tests/error_handling.rs:            // vexy_json may not support comments at all - that's valid
llms.txt-tests/error_handling.rs-            assert!(
llms.txt-tests/error_handling.rs-                true,
llms.txt:tests/error_handling.rs:                "vexy_json does not support comments - this is valid behavior"
llms.txt-tests/error_handling.rs-            );
llms.txt-tests/error_handling.rs-        }
llms.txt-tests/error_handling.rs-    }
--
llms.txt-benches/parser_comparison.rs-//! - Stack-based iterative parser (iterative)
llms.txt-benches/parser_comparison.rs-
llms.txt-benches/parser_comparison.rs-use criterion::{black_box, criterion_group, criterion_main, Criterion, BenchmarkId};
llms.txt:benches/parser_comparison.rs:use vexy_json_core::{
llms.txt-benches/parser_comparison.rs-    parse_with_options, 
llms.txt-benches/parser_comparison.rs-    parse_optimized_with_options,
llms.txt-benches/parser_comparison.rs-    parse_optimized_v2_with_options,
--
llms.txt-docs/development/refactor-plan.md-
llms.txt-docs/development/refactor-plan.md-# REFACTOR.md – Authoring Brief (Revised for Lean & Refactor Principles)
llms.txt-docs/development/refactor-plan.md-
llms.txt:docs/development/refactor-plan.md:This document is the canonical, **action-oriented**, **self-contained**, and **phased** roadmap for the vexy_json refactor sprint. It integrates the detailed refactor playbook and quality principles from [`REFACTOR_PROMPT.md`](REFACTOR_PROMPT.md) and the minimalization/dead code removal guidance from [`LEAN.md`](LEAN.md). It is written for a technically strong engineer new to this repository.
llms.txt-docs/development/refactor-plan.md-
llms.txt-docs/development/refactor-plan.md----
llms.txt-docs/development/refactor-plan.md-
llms.txt-docs/development/refactor-plan.md-## 1. Executive Summary
llms.txt-docs/development/refactor-plan.md-
llms.txt:docs/development/refactor-plan.md:The vexy_json codebase is a monolithic Rust crate implementing a forgiving JSON parser, CLI, and WASM module. Its tightly coupled structure, legacy/dead code, and lack of clear boundaries hinder maintainability, performance, and extensibility. This refactor will:
llms.txt-docs/development/refactor-plan.md-
llms.txt-docs/development/refactor-plan.md-- Decouple components into a Cargo workspace of focused crates.
llms.txt-docs/development/refactor-plan.md-- Remove dead/legacy code and minimize dependencies.
--
llms.txt-docs/development/refactor-plan.md-- Enforce production-grade, review-friendly, and performance-aware practices.
llms.txt-docs/development/refactor-plan.md-- Improve documentation, developer experience, and CI/CD quality gates.
llms.txt-docs/development/refactor-plan.md-
llms.txt:docs/development/refactor-plan.md:Upon completion, vexy_json will be a lean, maintainable, and extensible parser suite, with robust testing, clear architecture, and a minimal core suitable for embedding or distribution.
llms.txt-docs/development/refactor-plan.md-
llms.txt-docs/development/refactor-plan.md----
llms.txt-docs/development/refactor-plan.md-
--
llms.txt-docs/development/refactor-plan.md-
llms.txt-docs/development/refactor-plan.md-Refactor into a Cargo workspace with these crates:
llms.txt-docs/development/refactor-plan.md-
llms.txt:docs/development/refactor-plan.md:- **vexy_json-core**: Core parser, lexer, value types, errors. No I/O, CLI, or WASM logic.
llms.txt:docs/development/refactor-plan.md:- **vexy_json-cli**: CLI wrapper, feature-gated.
llms.txt:docs/development/refactor-plan.md:- **vexy_json-wasm**: WASM bindings, feature-gated.
llms.txt:docs/development/refactor-plan.md:- **vexy_json-serde**: Serde integration, feature-gated.
llms.txt-docs/development/refactor-plan.md-- **test-utils**: Shared test helpers.
llms.txt-docs/development/refactor-plan.md-- **examples/**, **benches/**: Kept for development, excluded from lean/core builds.
llms.txt-docs/development/refactor-plan.md-
--
llms.txt-docs/development/refactor-plan.md-## 6. Testing & Quality Gates
llms.txt-docs/development/refactor-plan.md-
llms.txt-docs/development/refactor-plan.md-- **Coverage Baseline:** Measure with `cargo-tarpaulin`.
llms.txt:docs/development/refactor-plan.md:- **Target Coverage:** `vexy_json-core` ≥95%, CLI ≥80%, WASM ≥90%.
llms.txt-docs/development/refactor-plan.md-- **Testing Pyramid:** Unit, integration, property-based, and performance tests.
llms.txt-docs/development/refactor-plan.md-- **CI Workflow:** Format, lint, test, coverage, bench, build artifacts.
llms.txt-docs/development/refactor-plan.md-- **Deliverable Checklist per PR:**
--
llms.txt-docs/development/refactor-plan.md-
llms.txt-docs/development/refactor-plan.md-| Week  | Deliverable                                 | Success Metric                                 |
llms.txt-docs/development/refactor-plan.md-|-------|---------------------------------------------|------------------------------------------------|
llms.txt:docs/development/refactor-plan.md:| 1-2   | Workspace setup & `vexy_json-core` created      | CI green, core builds, dead code removed.      |
llms.txt-docs/development/refactor-plan.md-| 3-4   | Lexer refactored, emits spans               | Token struct has span, parser updated.         |
llms.txt-docs/development/refactor-plan.md-| 5-8   | New parser implemented                      | Property tests pass.                           |
llms.txt-docs/development/refactor-plan.md-| 9-10  | CLI/WASM migrated to new parser             | All integration tests pass.                    |
--
llms.txt-docs/design/cli-enhancements.md-nav_order: 2
llms.txt-docs/design/cli-enhancements.md----
llms.txt-docs/design/cli-enhancements.md-
llms.txt:docs/design/cli-enhancements.md:# CLI Enhancements Design for vexy_json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-## Overview
llms.txt-docs/design/cli-enhancements.md-
llms.txt:docs/design/cli-enhancements.md:This document outlines the design for comprehensive CLI enhancements to the vexy_json command-line tool, building on the current basic implementation to provide a powerful and user-friendly JSON processing experience.
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-## Current State Analysis
llms.txt-docs/design/cli-enhancements.md-
--
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-## Enhancement Goals
llms.txt-docs/design/cli-enhancements.md-
llms.txt:docs/design/cli-enhancements.md:1. **User Experience**: Make vexy_json the go-to CLI tool for JSON processing
llms.txt-docs/design/cli-enhancements.md-2. **Feature Parity**: Match or exceed capabilities of popular JSON tools (jq, jsonlint)
llms.txt-docs/design/cli-enhancements.md-3. **Rust Integration**: Leverage Rust's performance and safety for robust operations
llms.txt-docs/design/cli-enhancements.md-4. **Flexibility**: Support various workflows from simple formatting to complex transformations
--
llms.txt-docs/design/cli-enhancements.md-### Basic Usage (Enhanced)
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Current (unchanged for compatibility)
llms.txt:docs/design/cli-enhancements.md:echo '{"key": "value"}' | vexy_json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# New file input/output
llms.txt:docs/design/cli-enhancements.md:vexy_json input.json                    # Read from file, output to stdout
llms.txt:docs/design/cli-enhancements.md:vexy_json input.json -o output.json     # Read from file, write to file
llms.txt:docs/design/cli-enhancements.md:vexy_json -i input.json -o output.json  # Explicit input/output
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Multiple files
llms.txt:docs/design/cli-enhancements.md:vexy_json file1.json file2.json         # Process multiple files
llms.txt:docs/design/cli-enhancements.md:vexy_json *.json                        # Glob support
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-### Formatting Options
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Pretty printing (default when output is terminal)
llms.txt:docs/design/cli-enhancements.md:vexy_json --pretty input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json -p input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Compact output (default when piped)
llms.txt:docs/design/cli-enhancements.md:vexy_json --compact input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json -c input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Custom indentation
llms.txt:docs/design/cli-enhancements.md:vexy_json --indent 4 input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json --indent tab input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Sort keys
llms.txt:docs/design/cli-enhancements.md:vexy_json --sort-keys input.json
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-### Validation and Analysis
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Validate only (exit code indicates success/failure)
llms.txt:docs/design/cli-enhancements.md:vexy_json --validate input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json -v input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Show statistics
llms.txt:docs/design/cli-enhancements.md:vexy_json --stats input.json
llms.txt-docs/design/cli-enhancements.md-# Output: {"objects": 5, "arrays": 3, "strings": 12, ...}
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Detailed error reporting
llms.txt:docs/design/cli-enhancements.md:vexy_json --strict input.json    # Fail on any forgiving features
llms.txt:docs/design/cli-enhancements.md:vexy_json --explain input.json   # Show what forgiving features were used
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-### Parser Options Control
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Disable specific forgiving features
llms.txt:docs/design/cli-enhancements.md:vexy_json --no-comments input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json --no-trailing-commas input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json --no-unquoted-keys input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json --no-single-quotes input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Enable specific features (when starting from strict mode)
llms.txt:docs/design/cli-enhancements.md:vexy_json --strict --allow-comments input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Newline as comma mode
llms.txt:docs/design/cli-enhancements.md:vexy_json --newline-as-comma input.json
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-### Watch Mode
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Watch file for changes
llms.txt:docs/design/cli-enhancements.md:vexy_json --watch input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json -w input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Watch with auto-output
llms.txt:docs/design/cli-enhancements.md:vexy_json -w input.json -o output.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Watch directory
llms.txt:docs/design/cli-enhancements.md:vexy_json -w ./config/
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-### Batch Processing
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Process all JSON files in directory
llms.txt:docs/design/cli-enhancements.md:vexy_json --batch ./data/ --output-dir ./processed/
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# With transformation
llms.txt:docs/design/cli-enhancements.md:vexy_json --batch ./data/ --pretty --sort-keys -o ./formatted/
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Parallel processing
llms.txt:docs/design/cli-enhancements.md:vexy_json --parallel ./data/*.json
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-### Query and Filtering (Future Enhancement)
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Basic path extraction (jq-like)
llms.txt:docs/design/cli-enhancements.md:vexy_json input.json --get ".users[0].name"
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Multiple paths
llms.txt:docs/design/cli-enhancements.md:vexy_json input.json --get ".name" --get ".age"
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Simple filtering
llms.txt:docs/design/cli-enhancements.md:vexy_json input.json --filter ".age > 30"
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-### Output Control
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Output to stderr instead of stdout
llms.txt:docs/design/cli-enhancements.md:vexy_json --stderr input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Silent mode (only exit codes)
llms.txt:docs/design/cli-enhancements.md:vexy_json --silent input.json
llms.txt:docs/design/cli-enhancements.md:vexy_json -s input.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Different output formats
llms.txt:docs/design/cli-enhancements.md:vexy_json --output-format yaml input.json  # Future
llms.txt:docs/design/cli-enhancements.md:vexy_json --output-format toml input.json  # Future
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-### Advanced Features
llms.txt-docs/design/cli-enhancements.md-```bash
llms.txt-docs/design/cli-enhancements.md-# Diff two JSON files (structural comparison)
llms.txt:docs/design/cli-enhancements.md:vexy_json --diff file1.json file2.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Merge JSON files
llms.txt:docs/design/cli-enhancements.md:vexy_json --merge base.json override.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Schema validation (future)
llms.txt:docs/design/cli-enhancements.md:vexy_json --schema schema.json data.json
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-# Performance profiling
llms.txt:docs/design/cli-enhancements.md:vexy_json --profile large-file.json
llms.txt-docs/design/cli-enhancements.md-```
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-## Implementation Architecture
--
llms.txt-docs/design/cli-enhancements.md-
llms.txt-docs/design/cli-enhancements.md-## Conclusion
llms.txt-docs/design/cli-enhancements.md-
llms.txt:docs/design/cli-enhancements.md:These CLI enhancements will transform vexy_json from a basic JSON parser into a comprehensive JSON processing toolkit. By focusing on user experience, performance, and flexibility, vexy_json can become the preferred choice for developers working with forgiving JSON formats.
llms.txt---
llms.txt-docs/python-bindings.md-## Installation
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```bash
llms.txt:docs/python-bindings.md:pip install vexy_json
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-## Basic Usage
--
llms.txt-docs/python-bindings.md-### Parsing JSON
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Standard JSON parsing
llms.txt:docs/python-bindings.md:data = vexy_json.loads('{"name": "John", "age": 30}')
llms.txt-docs/python-bindings.md-print(data)  # {'name': 'John', 'age': 30}
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Parse with forgiving features
llms.txt:docs/python-bindings.md:data = vexy_json.loads('''
llms.txt-docs/python-bindings.md-{
llms.txt-docs/python-bindings.md-    name: "John",  // Unquoted keys and comments
llms.txt-docs/python-bindings.md-    age: 30,       // Trailing comma is okay
--
llms.txt-docs/python-bindings.md-The Vexy JSON Python bindings provide full compatibility with the standard `json` module:
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Drop-in replacement for json.loads()
llms.txt:docs/python-bindings.md:data = vexy_json.loads('{"key": "value"}')
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# All standard json functions are available
llms.txt:docs/python-bindings.md:json_str = vexy_json.dumps(data)
llms.txt:docs/python-bindings.md:json_str = vexy_json.dumps(data, indent=2)
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# File operations
llms.txt-docs/python-bindings.md-with open('data.json', 'r') as f:
llms.txt:docs/python-bindings.md:    data = vexy_json.load(f)
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-with open('output.json', 'w') as f:
llms.txt:docs/python-bindings.md:    vexy_json.dump(data, f, indent=2)
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-## Advanced Parsing Options
--
llms.txt-docs/python-bindings.md-### Custom Parser Options
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Parse with custom options
llms.txt:docs/python-bindings.md:data = vexy_json.parse_with_options(
llms.txt-docs/python-bindings.md-    json_string,
llms.txt-docs/python-bindings.md-    allow_comments=True,
llms.txt-docs/python-bindings.md-    allow_trailing_commas=True,
--
llms.txt-docs/python-bindings.md-### Validation
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Check if JSON is valid
llms.txt:docs/python-bindings.md:is_valid = vexy_json.is_valid('{"valid": true}')
llms.txt-docs/python-bindings.md-print(is_valid)  # True
llms.txt-docs/python-bindings.md-
llms.txt:docs/python-bindings.md:is_valid = vexy_json.is_valid('invalid json')
llms.txt-docs/python-bindings.md-print(is_valid)  # False
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
--
llms.txt-docs/python-bindings.md-### Streaming Parser with Context Manager
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Parse large JSON files efficiently
llms.txt:docs/python-bindings.md:with vexy_json.StreamingParser() as parser:
llms.txt-docs/python-bindings.md-    with open('large_file.json', 'r') as f:
llms.txt-docs/python-bindings.md-        for item in parser.parse_stream(f):
llms.txt-docs/python-bindings.md-            process(item)
--
llms.txt-docs/python-bindings.md-### NDJSON Support
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Parse NDJSON (newline-delimited JSON)
llms.txt:docs/python-bindings.md:with vexy_json.StreamingParser() as parser:
llms.txt-docs/python-bindings.md-    with open('data.ndjson', 'r') as f:
llms.txt-docs/python-bindings.md-        for item in parser.parse_lines(f):
llms.txt-docs/python-bindings.md-            process(item)
--
llms.txt-docs/python-bindings.md-### Custom Streaming Options
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Create streaming parser with custom options
llms.txt:docs/python-bindings.md:parser = vexy_json.StreamingParser(
llms.txt-docs/python-bindings.md-    allow_comments=True,
llms.txt-docs/python-bindings.md-    allow_trailing_commas=True,
llms.txt-docs/python-bindings.md-    enable_repair=True
--
llms.txt-docs/python-bindings.md-### Direct Array Parsing
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-import numpy as np
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Parse JSON array directly to NumPy array
llms.txt:docs/python-bindings.md:arr = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-docs/python-bindings.md-print(type(arr))  # <class 'numpy.ndarray'>
llms.txt-docs/python-bindings.md-print(arr.dtype)  # int64
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Specify dtype
llms.txt:docs/python-bindings.md:arr = vexy_json.loads_numpy('[1.1, 2.2, 3.3]', dtype='float32')
llms.txt-docs/python-bindings.md-print(arr.dtype)  # float32
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-### Zero-Copy Optimization
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Optimized parsing for numeric data
llms.txt:docs/python-bindings.md:arr = vexy_json.loads_numpy_zerocopy('[1, 2, 3, 4, 5]', dtype='int64')
llms.txt-docs/python-bindings.md-# Uses zero-copy when possible for better performance
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-### Mixed Data Types
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Handle mixed arrays
llms.txt:docs/python-bindings.md:arr = vexy_json.loads_numpy('[1, 2.5, 3, 4.7]')
llms.txt-docs/python-bindings.md-print(arr.dtype)  # float64 (automatically promoted)
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Non-numeric data falls back to object arrays
llms.txt:docs/python-bindings.md:arr = vexy_json.loads_numpy('["a", "b", "c"]')
llms.txt-docs/python-bindings.md-print(arr.dtype)  # object
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
--
llms.txt-docs/python-bindings.md-### DataFrame Conversion
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-import pandas as pd
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Parse JSON to DataFrame
llms.txt-docs/python-bindings.md-json_data = '[{"name": "John", "age": 30}, {"name": "Jane", "age": 25}]'
llms.txt:docs/python-bindings.md:df = vexy_json.loads_dataframe(json_data)
llms.txt-docs/python-bindings.md-print(type(df))  # <class 'pandas.core.frame.DataFrame'>
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Specify orientation
llms.txt:docs/python-bindings.md:df = vexy_json.loads_dataframe(json_data, orient='records')
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-## Error Handling
--
llms.txt-docs/python-bindings.md-### Parse Errors
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-try:
llms.txt:docs/python-bindings.md:    data = vexy_json.loads('invalid json')
llms.txt-docs/python-bindings.md-except ValueError as e:
llms.txt-docs/python-bindings.md-    print(f"Parse error: {e}")
llms.txt-docs/python-bindings.md-```
--
llms.txt-docs/python-bindings.md-### Repair Functionality
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Automatic repair of common JSON issues
llms.txt-docs/python-bindings.md-try:
llms.txt:docs/python-bindings.md:    data = vexy_json.loads('{"key": "value",}')  # Trailing comma
llms.txt-docs/python-bindings.md-    print(data)  # Successfully parsed
llms.txt-docs/python-bindings.md-except ValueError as e:
llms.txt-docs/python-bindings.md-    print(f"Even repair failed: {e}")
--
llms.txt-docs/python-bindings.md-### Choosing the Right Function
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# For standard JSON, use loads() for compatibility
llms.txt:docs/python-bindings.md:data = vexy_json.loads(standard_json)
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# For forgiving JSON, use parse_with_options()
llms.txt:docs/python-bindings.md:data = vexy_json.parse_with_options(
llms.txt-docs/python-bindings.md-    forgiving_json,
llms.txt-docs/python-bindings.md-    allow_comments=True,
llms.txt-docs/python-bindings.md-    allow_trailing_commas=True
llms.txt-docs/python-bindings.md-)
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# For numerical data, use NumPy integration
llms.txt:docs/python-bindings.md:arr = vexy_json.loads_numpy(json_array)
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# For tabular data, use pandas integration
llms.txt:docs/python-bindings.md:df = vexy_json.loads_dataframe(json_records)
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-### Memory Efficiency
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Streaming for large files
llms.txt:docs/python-bindings.md:with vexy_json.StreamingParser() as parser:
llms.txt-docs/python-bindings.md-    for item in parser.parse_stream(large_file):
llms.txt-docs/python-bindings.md-        # Process items one at a time
llms.txt-docs/python-bindings.md-        # Memory usage stays constant
--
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt-docs/python-bindings.md-from typing import Any, Dict, List, Optional, Union
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-def process_json(json_str: str) -> Dict[str, Any]:
llms.txt:docs/python-bindings.md:    return vexy_json.loads(json_str)
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-def safe_parse(json_str: str) -> Optional[Dict[str, Any]]:
llms.txt-docs/python-bindings.md-    try:
llms.txt:docs/python-bindings.md:        return vexy_json.loads(json_str)
llms.txt-docs/python-bindings.md-    except ValueError:
llms.txt-docs/python-bindings.md-        return None
llms.txt-docs/python-bindings.md-```
--
llms.txt-docs/python-bindings.md-### Error Handling
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-def safe_parse_json(json_str: str, default=None):
llms.txt-docs/python-bindings.md-    """Safely parse JSON with fallback."""
llms.txt-docs/python-bindings.md-    try:
llms.txt:docs/python-bindings.md:        return vexy_json.loads(json_str)
llms.txt-docs/python-bindings.md-    except ValueError as e:
llms.txt-docs/python-bindings.md-        print(f"JSON parse error: {e}")
llms.txt-docs/python-bindings.md-        return default
--
llms.txt-docs/python-bindings.md-### Memory Management
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# For large datasets, prefer streaming
llms.txt-docs/python-bindings.md-def process_large_json(filename):
llms.txt:docs/python-bindings.md:    with vexy_json.StreamingParser() as parser:
llms.txt-docs/python-bindings.md-        with open(filename, 'r') as f:
llms.txt-docs/python-bindings.md-            for item in parser.parse_stream(f):
llms.txt-docs/python-bindings.md-                yield process_item(item)
--
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt-docs/python-bindings.md-import requests
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-response = requests.get('https://api.example.com/data')
llms.txt:docs/python-bindings.md:data = vexy_json.loads(response.text)
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-### With FastAPI
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt-docs/python-bindings.md-from fastapi import FastAPI
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-app = FastAPI()
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-@app.post("/parse-json")
llms.txt-docs/python-bindings.md-async def parse_json(content: str):
llms.txt-docs/python-bindings.md-    try:
llms.txt:docs/python-bindings.md:        data = vexy_json.loads(content)
llms.txt-docs/python-bindings.md-        return {"success": True, "data": data}
llms.txt-docs/python-bindings.md-    except ValueError as e:
llms.txt-docs/python-bindings.md-        return {"success": False, "error": str(e)}
--
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt-docs/python-bindings.md-from django.http import JsonResponse
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-def parse_json_view(request):
llms.txt-docs/python-bindings.md-    try:
llms.txt:docs/python-bindings.md:        data = vexy_json.loads(request.body)
llms.txt-docs/python-bindings.md-        # Process data
llms.txt-docs/python-bindings.md-        return JsonResponse({"success": True})
llms.txt-docs/python-bindings.md-    except ValueError as e:
--
llms.txt-docs/python-bindings.md-data = json.loads(json_string)
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# After
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt:docs/python-bindings.md:data = vexy_json.loads(json_string)  # Same interface, more forgiving
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-### Gradual Migration
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt-docs/python-bindings.md-import json
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-def parse_json_fallback(json_str):
llms.txt-docs/python-bindings.md-    """Try standard JSON first, fall back to Vexy JSON."""
llms.txt-docs/python-bindings.md-    try:
llms.txt-docs/python-bindings.md-        return json.loads(json_str)
llms.txt-docs/python-bindings.md-    except json.JSONDecodeError:
llms.txt:docs/python-bindings.md:        return vexy_json.loads(json_str)  # More forgiving parsing
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-## Advanced Features
--
llms.txt-docs/python-bindings.md-### Custom Serialization
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-from dataclasses import dataclass
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-@dataclass
--
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Convert to dict first, then serialize
llms.txt-docs/python-bindings.md-person = Person("John", 30)
llms.txt:docs/python-bindings.md:json_str = vexy_json.dumps(person.__dict__)
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-### Configuration Management
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-```python
llms.txt:docs/python-bindings.md:import vexy_json
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-# Parse configuration files with comments
llms.txt-docs/python-bindings.md-config_str = '''
--
llms.txt-docs/python-bindings.md-}
llms.txt-docs/python-bindings.md-'''
llms.txt-docs/python-bindings.md-
llms.txt:docs/python-bindings.md:config = vexy_json.loads(config_str)
llms.txt-docs/python-bindings.md-```
llms.txt-docs/python-bindings.md-
llms.txt-docs/python-bindings.md-This comprehensive Python API provides all the power of Vexy JSON with the familiar interface Python developers expect.
--
llms.txt-crates/core/src/streaming/simple_lexer.rs-//! Simple streaming lexer that works with the existing Token enum.
llms.txt-crates/core/src/streaming/simple_lexer.rs-//!
llms.txt-crates/core/src/streaming/simple_lexer.rs-//! This lexer processes input incrementally and emits tokens compatible
llms.txt:crates/core/src/streaming/simple_lexer.rs://! with the existing vexy_json token structure.
llms.txt-crates/core/src/streaming/simple_lexer.rs-
llms.txt-crates/core/src/streaming/simple_lexer.rs-use crate::ast::Token;
llms.txt-crates/core/src/streaming/simple_lexer.rs-use crate::error::{Error, Result, Span};
llms.txt-crates/core/src/streaming/simple_lexer.rs-
llms.txt:crates/core/src/streaming/simple_lexer.rs:/// A simple streaming lexer for vexy_json
llms.txt-crates/core/src/streaming/simple_lexer.rs-#[derive(Debug, Clone)]
llms.txt-crates/core/src/streaming/simple_lexer.rs-pub struct SimpleStreamingLexer {
llms.txt-crates/core/src/streaming/simple_lexer.rs-    /// Current position in the overall input stream
llms.txt---
llms.txt-docs/assets/js/tool.js-// this_file: docs/assets/js/tool.js
llms.txt:docs/assets/js/tool.js:// Main JavaScript for vexy_json web tool
llms.txt-docs/assets/js/tool.js-import init, {
llms.txt-docs/assets/js/tool.js-    parse_json,
llms.txt-docs/assets/js/tool.js-    parse_json_with_options,
--
llms.txt-docs/assets/js/tool.js-    get_parser_options,
llms.txt-docs/assets/js/tool.js-    stringify_value,
llms.txt-docs/assets/js/tool.js-    get_version_info
llms.txt:docs/assets/js/tool.js:} from '../../pkg/vexy_json_wasm.js';
llms.txt-docs/assets/js/tool.js-
llms.txt-docs/assets/js/tool.js-// Import enhanced components
llms.txt-docs/assets/js/tool.js-import { EXAMPLES, getExample } from './examples.js';
--
llms.txt-docs/assets/js/tool.js-                    respectDNT: true,
llms.txt-docs/assets/js/tool.js-                    anonymizeIPs: true,
llms.txt-docs/assets/js/tool.js-                    consentRequired: false, // Implicit consent for basic usage analytics
llms.txt:docs/assets/js/tool.js:                    trackingId: 'vexy_json-web-tool'
llms.txt-docs/assets/js/tool.js-                });
llms.txt-docs/assets/js/tool.js-            }
llms.txt-docs/assets/js/tool.js-        } catch (error) {
--
llms.txt-docs/assets/js/tool.js-
llms.txt-docs/assets/js/tool.js-            // Get version info and display it
llms.txt-docs/assets/js/tool.js-            const versionInfo = get_version_info();
llms.txt:docs/assets/js/tool.js:            console.log(`vexy_json ${versionInfo.version} loaded successfully`);
llms.txt-docs/assets/js/tool.js-            console.log(`Browser compatibility score: ${support.score}/100`);
llms.txt-docs/assets/js/tool.js-
llms.txt-docs/assets/js/tool.js-            // Hide loading, show interface
--
llms.txt-benches/parser_microbenchmarks.rs-// this_file: benches/parser_microbenchmarks.rs
llms.txt-benches/parser_microbenchmarks.rs-
llms.txt-benches/parser_microbenchmarks.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
llms.txt:benches/parser_microbenchmarks.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt:benches/parser_microbenchmarks.rs:use vexy_json_core::lexer::{FastLexer, JsonLexer, LexerConfig};
llms.txt-benches/parser_microbenchmarks.rs-
llms.txt-benches/parser_microbenchmarks.rs-fn bench_parse_small_object(c: &mut Criterion) {
llms.txt-benches/parser_microbenchmarks.rs-    let mut group = c.benchmark_group("parse small object");
llms.txt---
llms.txt-tests/lib_integration.rs-// this_file: tests/lib_integration.rs
llms.txt-tests/lib_integration.rs-
llms.txt:tests/lib_integration.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt:tests/lib_integration.rs:use vexy_json_core::lexer::{JsonLexer, Lexer};
llms.txt-tests/lib_integration.rs-
llms.txt-tests/lib_integration.rs-#[test]
llms.txt-tests/lib_integration.rs-fn basic_parsing() {
--
llms.txt-docs/debug-pages/deep-debug.html-      import init, {
llms.txt-docs/debug-pages/deep-debug.html-        parse_json,
llms.txt-docs/debug-pages/deep-debug.html-        parse_json_with_options,
llms.txt:docs/debug-pages/deep-debug.html:      } from '../pkg/vexy_json_wasm.js';
llms.txt-docs/debug-pages/deep-debug.html-
llms.txt-docs/debug-pages/deep-debug.html-      let log = '';
llms.txt-docs/debug-pages/deep-debug.html-      function appendLog(message) {
--
llms.txt-docs/test-wasm.html-  <head>
llms.txt-docs/test-wasm.html-    <meta charset="UTF-8" />
llms.txt-docs/test-wasm.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:docs/test-wasm.html:    <title>vexy_json WASM Test</title>
llms.txt-docs/test-wasm.html-    <style>
llms.txt-docs/test-wasm.html-      body {
llms.txt-docs/test-wasm.html-        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
--
llms.txt-docs/test-wasm.html-    </style>
llms.txt-docs/test-wasm.html-  </head>
llms.txt-docs/test-wasm.html-  <body>
llms.txt:docs/test-wasm.html:    <h1>vexy_json WASM Test Page</h1>
llms.txt-docs/test-wasm.html-    <div class="version" id="version">Loading WASM module...</div>
llms.txt-docs/test-wasm.html-
llms.txt-docs/test-wasm.html-    <div class="container">
--
llms.txt-docs/test-wasm.html-        get_version_info,
llms.txt-docs/test-wasm.html-        get_parser_options,
llms.txt-docs/test-wasm.html-        validate_json,
llms.txt:docs/test-wasm.html:      } from './pkg/vexy_json_wasm.js';
llms.txt-docs/test-wasm.html-
llms.txt-docs/test-wasm.html-      let wasmReady = false;
llms.txt-docs/test-wasm.html-
--
llms.txt-docs/test-wasm.html-          // Display version info
llms.txt-docs/test-wasm.html-          const versionInfo = JSON.parse(get_version_info());
llms.txt-docs/test-wasm.html-          document.getElementById('version').innerHTML = `
llms.txt:docs/test-wasm.html:                    <strong>vexy_json WASM</strong> v${versionInfo.version} - ${versionInfo.description}
llms.txt-docs/test-wasm.html-                `;
llms.txt-docs/test-wasm.html-          document.getElementById('version').className = 'version';
llms.txt-docs/test-wasm.html-
llms.txt---
llms.txt-bindings/python/examples/config_parser.py-#!/usr/bin/env python3
llms.txt:bindings/python/examples/config_parser.py:"""Example: Using vexy_json for configuration files"""
llms.txt-bindings/python/examples/config_parser.py-
llms.txt:bindings/python/examples/config_parser.py:import vexy_json
llms.txt-bindings/python/examples/config_parser.py-import sys
llms.txt-bindings/python/examples/config_parser.py-
llms.txt-bindings/python/examples/config_parser.py-# Example configuration with forgiving JSON features
--
llms.txt-bindings/python/examples/config_parser.py-    """Load configuration from file or use default template"""
llms.txt-bindings/python/examples/config_parser.py-    if filename:
llms.txt-bindings/python/examples/config_parser.py-        try:
llms.txt:bindings/python/examples/config_parser.py:            config = vexy_json.load(filename)
llms.txt-bindings/python/examples/config_parser.py-            print(f"Loaded configuration from: {filename}")
llms.txt-bindings/python/examples/config_parser.py-        except Exception as e:
llms.txt-bindings/python/examples/config_parser.py-            print(f"Error loading config file: {e}")
llms.txt-bindings/python/examples/config_parser.py-            sys.exit(1)
llms.txt-bindings/python/examples/config_parser.py-    else:
llms.txt-bindings/python/examples/config_parser.py-        print("Using default configuration template")
llms.txt:bindings/python/examples/config_parser.py:        config = vexy_json.parse(CONFIG_TEMPLATE)
llms.txt-bindings/python/examples/config_parser.py-
llms.txt-bindings/python/examples/config_parser.py-    return config
llms.txt-bindings/python/examples/config_parser.py-
--
llms.txt-bindings/python/examples/config_parser.py-
llms.txt-bindings/python/examples/config_parser.py-
llms.txt-bindings/python/examples/config_parser.py-def main():
llms.txt:bindings/python/examples/config_parser.py:    print("vexy_json Configuration Parser Example")
llms.txt-bindings/python/examples/config_parser.py-    print("=" * 50)
llms.txt-bindings/python/examples/config_parser.py-
llms.txt-bindings/python/examples/config_parser.py-    # Load configuration
--
llms.txt-bindings/python/examples/config_parser.py-    # Example: Save configuration
llms.txt-bindings/python/examples/config_parser.py-    if not config_file:
llms.txt-bindings/python/examples/config_parser.py-        output_file = "config_example.json"
llms.txt:bindings/python/examples/config_parser.py:        vexy_json.dump(config, output_file, indent=2)
llms.txt-bindings/python/examples/config_parser.py-        print(f"\nSaved example configuration to: {output_file}")
llms.txt-bindings/python/examples/config_parser.py-
llms.txt-bindings/python/examples/config_parser.py-
--
llms.txt-docs/release-notes.md-nav_order: 11
llms.txt-docs/release-notes.md----
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:# vexy_json v2.0.0 Release Notes
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-**🚀 Major Release - January 2025**
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:We're thrilled to announce **vexy_json v2.0.0**, a groundbreaking release that transforms vexy_json from a capable JSON parser into a high-performance, enterprise-ready parsing platform. This release introduces streaming APIs, parallel processing, a plugin architecture, and significant performance improvements.
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-## 🌟 Highlights
llms.txt-docs/release-notes.md-
--
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md----
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:# vexy_json v1.0.0 Release Notes
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-**🚀 Stable Release - January 7, 2025**
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:We're excited to announce the stable release of **vexy_json v1.0.0**, a production-ready forgiving JSON parser for Rust. This is a complete port of the JavaScript library [jsonic](https://github.com/jsonicjs/jsonic), bringing powerful and flexible JSON parsing capabilities to the Rust ecosystem.
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:## 🎉 What is vexy_json?
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:vexy_json is a forgiving JSON parser that extends standard JSON with developer-friendly features while maintaining full compatibility with RFC 8259. It allows you to parse relaxed JSON syntax commonly found in configuration files, making JSON more human-readable and maintainable.
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-## ✨ Key Features
llms.txt-docs/release-notes.md-
--
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```toml
llms.txt-docs/release-notes.md-[dependencies]
llms.txt:docs/release-notes.md:vexy_json = "1.0.0"
llms.txt-docs/release-notes.md-```
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-### CLI Tool
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```bash
llms.txt:docs/release-notes.md:cargo install vexy_json
llms.txt-docs/release-notes.md-```
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-## 🎯 Usage Examples
--
llms.txt-docs/release-notes.md-### Basic Library Usage
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```rust
llms.txt:docs/release-notes.md:use vexy_json::parse;
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-// Standard JSON
llms.txt-docs/release-notes.md-let data = parse(r#"{"name": "Alice", "age": 30}"#)?;
--
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```bash
llms.txt-docs/release-notes.md-# Process configuration files
llms.txt:docs/release-notes.md:echo "{debug: true, port: 3000}" | vexy_json
llms.txt-docs/release-notes.md-# Output: {"debug":true,"port":3000}
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-# Handle files with comments
llms.txt:docs/release-notes.md:cat config.jsonc | vexy_json > config.json
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-# Pipeline integration
llms.txt:docs/release-notes.md:curl api.example.com/config | vexy_json | jq '.database'
llms.txt-docs/release-notes.md-```
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-### Serde Integration
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```rust
llms.txt:docs/release-notes.md:use vexy_json::from_str;
llms.txt-docs/release-notes.md-use serde::Deserialize;
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-#[derive(Deserialize)]
--
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-## 🔄 jsonic Compatibility
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:vexy_json achieves **complete compatibility** with the jsonic JavaScript library:
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-- All 17 jsonic compatibility tests pass
llms.txt-docs/release-notes.md-- Identical parsing behavior for all supported features
--
llms.txt-docs/release-notes.md-Customize parsing behavior with `ParserOptions`:
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```rust
llms.txt:docs/release-notes.md:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-let mut options = ParserOptions::default();
llms.txt-docs/release-notes.md-options.allow_comments = false;           // Disable comments
--
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-## 🏗️ Architecture
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:vexy_json is built with a clean, modular architecture:
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-- **Lexer**: High-performance tokenization with zero-copy strings
llms.txt-docs/release-notes.md-- **Parser**: Recursive descent parser with configurable grammar
--
llms.txt-docs/release-notes.md-Process large JSON files incrementally without loading them entirely into memory:
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```rust
llms.txt:docs/release-notes.md:use vexy_json::{StreamingParser, StreamingEvent};
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-let mut parser = StreamingParser::new();
llms.txt-docs/release-notes.md-parser.feed(chunk1)?;
--
llms.txt-docs/release-notes.md-Automatically process large files using multiple CPU cores:
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```rust
llms.txt:docs/release-notes.md:use vexy_json::parse_parallel;
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-let json_files = vec![file1, file2, file3, file4];
llms.txt-docs/release-notes.md-let results = parse_parallel(json_files);
llms.txt-docs/release-notes.md-```
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-#### Plugin System
llms.txt:docs/release-notes.md:Extend vexy_json with custom functionality:
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```rust
llms.txt:docs/release-notes.md:use vexy_json::{Plugin, parse_with_plugins};
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-struct MyPlugin;
llms.txt-docs/release-notes.md-impl Plugin for MyPlugin {
--
llms.txt-docs/release-notes.md-Native support for newline-delimited JSON:
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```rust
llms.txt:docs/release-notes.md:use vexy_json::NdJsonParser;
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-let mut parser = NdJsonParser::new();
llms.txt-docs/release-notes.md-let values = parser.feed(ndjson_content)?;
--
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-#### Watch Mode
llms.txt-docs/release-notes.md-```bash
llms.txt:docs/release-notes.md:vexy_json --watch config.json --output formatted.json
llms.txt-docs/release-notes.md-```
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-#### Batch Processing
llms.txt-docs/release-notes.md-```bash
llms.txt:docs/release-notes.md:vexy_json --batch ./data/ --output-dir ./processed/ --parallel
llms.txt-docs/release-notes.md-```
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-#### Advanced Formatting
llms.txt-docs/release-notes.md-```bash
llms.txt:docs/release-notes.md:vexy_json input.json --pretty --sort-keys --indent 4
llms.txt-docs/release-notes.md-```
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-### 🔧 API Improvements
--
llms.txt-docs/release-notes.md-**Ready to upgrade?** 
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-```bash
llms.txt:docs/release-notes.md:cargo add vexy_json@2.0.0
llms.txt-docs/release-notes.md-```
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-For migration guidance, see our [Migration Guide](migration-guide/).
llms.txt-docs/release-notes.md-
llms.txt:docs/release-notes.md:**Questions or feedback?** Open an issue on [GitHub](https://github.com/twardoch/vexy_json/issues).
llms.txt-docs/release-notes.md-
llms.txt-docs/release-notes.md-**Happy parsing! 🦀**
llms.txt---
llms.txt-docs/developer-guide.md-nav_order: 2
llms.txt-docs/developer-guide.md----
llms.txt-docs/developer-guide.md-
llms.txt:docs/developer-guide.md:# Developer Guide for Extending the vexy_json Web Tool
llms.txt-docs/developer-guide.md-
llms.txt:docs/developer-guide.md:This guide is for developers who want to contribute to or extend the `vexy_json` web tool. It covers the project structure, build process, and key development considerations.
llms.txt-docs/developer-guide.md-
llms.txt-docs/developer-guide.md-## Project Structure
llms.txt-docs/developer-guide.md-
llms.txt:docs/developer-guide.md:The `vexy_json` project uses a multi-crate Cargo workspace structure with Jekyll integration for web tools.
llms.txt-docs/developer-guide.md-
llms.txt-docs/developer-guide.md-### Workspace Structure
llms.txt-docs/developer-guide.md-
--
llms.txt-docs/developer-guide.md-    *   `_config.yml`: Jekyll configuration file.
llms.txt-docs/developer-guide.md-    *   `tool.html`: Vexy JSON interactive tool (WebAssembly-powered)
llms.txt-docs/developer-guide.md-    *   `jsonic.html`: Jsonic interactive tool (CDN-powered)
llms.txt:docs/developer-guide.md:    *   `vexy_json-tool.md`: Jekyll wrapper for Vexy JSON tool
llms.txt-docs/developer-guide.md-    *   `jsonic-tool.md`: Jekyll wrapper for Jsonic tool
llms.txt-docs/developer-guide.md-    *   `tool.md`: Tools overview page
llms.txt-docs/developer-guide.md-    *   `assets/`: Static assets for the web tools.
llms.txt-docs/developer-guide.md-        *   `css/`: CSS files, including `tool.css` and `enhanced-features.css`.
llms.txt-docs/developer-guide.md-        *   `js/`: JavaScript files for both tools
llms.txt:docs/developer-guide.md:    *   `pkg/`: Contains the compiled WebAssembly module (`vexy_json_bg.wasm`, `vexy_json.js`, `vexy_json.d.ts`).
llms.txt-docs/developer-guide.md-
llms.txt-docs/developer-guide.md-## Development Environment Setup
llms.txt-docs/developer-guide.md-
--
llms.txt-docs/developer-guide.md-
llms.txt-docs/developer-guide.md-This is the main JavaScript file for the web tool. It handles UI interactions, calls the WASM functions, and updates the display.
llms.txt-docs/developer-guide.md-
llms.txt:docs/developer-guide.md:*   **WASM Module Import**: The `pkg/vexy_json_wasm.js` module (generated by `wasm-pack`) is imported here.
llms.txt-docs/developer-guide.md-*   **Asynchronous Operations**: WASM module loading and initialization are asynchronous. Ensure you `await` the `init()` function.
llms.txt-docs/developer-guide.md-*   **UI Updates**: Use standard DOM manipulation to update the input/output areas, error messages, and other UI elements.
llms.txt-docs/developer-guide.md-*   **Event Listeners**: Attach event listeners to buttons, toggles, and text areas to respond to user actions.
--
llms.txt-docs/development/RELEASE_CANDIDATE.md-
llms.txt-docs/development/RELEASE_CANDIDATE.md-### Core Parsing API
llms.txt-docs/development/RELEASE_CANDIDATE.md-```rust
llms.txt:docs/development/RELEASE_CANDIDATE.md:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-docs/development/RELEASE_CANDIDATE.md-
llms.txt-docs/development/RELEASE_CANDIDATE.md-// Simple parsing
llms.txt-docs/development/RELEASE_CANDIDATE.md-let value = parse(r#"{"key": "value"}"#)?;
--
llms.txt-docs/development/RELEASE_CANDIDATE.md-
llms.txt-docs/development/RELEASE_CANDIDATE.md-### Streaming API
llms.txt-docs/development/RELEASE_CANDIDATE.md-```rust
llms.txt:docs/development/RELEASE_CANDIDATE.md:use vexy_json::streaming::StreamingParser;
llms.txt-docs/development/RELEASE_CANDIDATE.md-
llms.txt-docs/development/RELEASE_CANDIDATE.md-let mut parser = StreamingParser::new();
llms.txt-docs/development/RELEASE_CANDIDATE.md-for chunk in file_chunks {
--
llms.txt-docs/development/RELEASE_CANDIDATE.md-
llms.txt-docs/development/RELEASE_CANDIDATE.md-### Parallel Processing API
llms.txt-docs/development/RELEASE_CANDIDATE.md-```rust
llms.txt:docs/development/RELEASE_CANDIDATE.md:use vexy_json::parallel_chunked::{parse_parallel_chunked, ChunkedConfig};
llms.txt-docs/development/RELEASE_CANDIDATE.md-
llms.txt-docs/development/RELEASE_CANDIDATE.md-let config = ChunkedConfig {
llms.txt-docs/development/RELEASE_CANDIDATE.md-    chunk_size: 1024 * 1024, // 1MB chunks
--
llms.txt-docs/development/RELEASE_CANDIDATE.md-
llms.txt-docs/development/RELEASE_CANDIDATE.md-### Plugin System API
llms.txt-docs/development/RELEASE_CANDIDATE.md-```rust
llms.txt:docs/development/RELEASE_CANDIDATE.md:use vexy_json::plugin::{ParserPlugin, PluginRegistry};
llms.txt-docs/development/RELEASE_CANDIDATE.md-
llms.txt-docs/development/RELEASE_CANDIDATE.md-struct CustomPlugin;
llms.txt-docs/development/RELEASE_CANDIDATE.md-impl ParserPlugin for CustomPlugin {
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-# API Reference v2.0.0
llms.txt-docs/api.md-
llms.txt:docs/api.md:This section provides detailed documentation for the `vexy_json` Rust library v2.0.0. The API is designed to be intuitive and idiomatic for Rust developers, with powerful new features for streaming, parallel processing, and extensibility.
llms.txt-docs/api.md-
llms.txt:docs/api.md:## `vexy_json::parse`
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub fn parse(input: &str) -> Result<Value, Error>
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt:docs/api.md:Parses a JSON-like string into a `vexy_json::Value` enum using default parser options. This is the primary entry point for using the library.
llms.txt-docs/api.md-
llms.txt-docs/api.md-- `input`: The string slice containing the JSON-like data to parse.
llms.txt-docs/api.md-- Returns:
llms.txt-docs/api.md-    - `Ok(Value)`: If parsing is successful, returns a `Value` enum representing the parsed data.
llms.txt-docs/api.md-    - `Err(Error)`: If an error occurs during parsing, returns an `Error` detailing the issue.
llms.txt-docs/api.md-
llms.txt:docs/api.md:## `vexy_json::parse_with_options`
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub fn parse_with_options(input: &str, options: ParserOptions) -> Result<Value, Error>
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt:docs/api.md:Parses a JSON-like string into a `vexy_json::Value` enum with custom parser options. This allows fine-grained control over which forgiving features are enabled.
llms.txt-docs/api.md-
llms.txt-docs/api.md-- `input`: The string slice containing the JSON-like data to parse.
llms.txt-docs/api.md-- `options`: A `ParserOptions` struct configuring the parser's behavior.
--
llms.txt-docs/api.md-    - `Ok(Value)`: If parsing is successful, returns a `Value` enum representing the parsed data.
llms.txt-docs/api.md-    - `Err(Error)`: If an error occurs during parsing, returns an `Error` detailing the issue.
llms.txt-docs/api.md-
llms.txt:docs/api.md:## `vexy_json::ParserOptions`
llms.txt-docs/api.md-
llms.txt:docs/api.md:This struct defines the configurable options for the `vexy_json` parser.
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub struct ParserOptions {
--
llms.txt-docs/api.md-`ParserOptions` implements `Default`, so you can create a default instance and then modify specific fields:
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt:docs/api.md:use vexy_json::ParserOptions;
llms.txt-docs/api.md-
llms.txt-docs/api.md-let mut options = ParserOptions::default();
llms.txt-docs/api.md-options.allow_comments = false; // Disable comments
llms.txt-docs/api.md-options.max_depth = 64; // Set a custom max depth
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt:docs/api.md:## `vexy_json::Value` Enum
llms.txt-docs/api.md-
llms.txt:docs/api.md:This enum represents the different types of JSON values that `vexy_json` can parse.
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub enum Value {
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-- `Null`: Represents a JSON `null` value.
llms.txt-docs/api.md-- `Bool(bool)`: Represents a JSON boolean (`true` or `false`).
llms.txt:docs/api.md:- `Number(Number)`: Represents a JSON numeric value. See `vexy_json::Number` for details.
llms.txt-docs/api.md-- `String(String)`: Represents a JSON string.
llms.txt-docs/api.md-- `Array(Vec<Value>)`: Represents a JSON array, a vector of `Value` enums.
llms.txt-docs/api.md-- `Object(HashMap<String, Value>)`: Represents a JSON object, a hash map of string keys to `Value` enums.
--
llms.txt-docs/api.md-- `as_array() -> Option<&Vec<Value>>`
llms.txt-docs/api.md-- `as_object() -> Option<&HashMap<String, Value>>`
llms.txt-docs/api.md-
llms.txt:docs/api.md:## `vexy_json::Number` Enum
llms.txt-docs/api.md-
llms.txt-docs/api.md-This enum represents a JSON number, which can be either an integer or a floating-point number.
llms.txt-docs/api.md-
--
llms.txt-docs/api.md-- `Integer(i64)`: An integer value that fits in an `i64`.
llms.txt-docs/api.md-- `Float(f64)`: A floating-point value.
llms.txt-docs/api.md-
llms.txt:docs/api.md:## `vexy_json::Error` Enum
llms.txt-docs/api.md-
llms.txt-docs/api.md-This enum defines the types of errors that can occur during parsing.
llms.txt-docs/api.md-
--
llms.txt-docs/api.md-- `InvalidEscape(usize)`: An invalid escape sequence was found in a string at a given position.
llms.txt-docs/api.md-- `InvalidUnicode(usize)`: An invalid Unicode escape sequence was found at a given position.
llms.txt-docs/api.md-- `UnterminatedString(usize)`: A string literal was not properly terminated, starting at a given position.
llms.txt:docs/api.md:- `TrailingComma(usize)`: A trailing comma was found where not allowed (though typically allowed by `vexy_json`'s forgiving nature, this error might occur in strict modes or specific contexts) at a given position.
llms.txt-docs/api.md-- `Expected { expected: String, found: String, position: usize }`: The parser expected a specific token or value but found something else at a given position.
llms.txt-docs/api.md-- `DepthLimitExceeded(usize)`: The maximum recursion depth was exceeded while parsing nested structures at a given position.
llms.txt-docs/api.md-- `Custom(String)`: A custom error with a descriptive message.
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-## Serde Integration
llms.txt-docs/api.md-
llms.txt:docs/api.md:`vexy_json` provides optional integration with the `serde` serialization framework. When the `serde` feature is enabled in your `Cargo.toml`, `vexy_json::Value` and `vexy_json::Number` implement the `Serialize` and `Deserialize` traits. This allows easy conversion between `vexy_json::Value` and other data formats supported by Serde (e.g., `serde_json::Value`).
llms.txt-docs/api.md-
llms.txt:docs/api.md:To enable this feature, add `serde` to your `vexy_json` dependency in `Cargo.toml`:
llms.txt-docs/api.md-
llms.txt-docs/api.md-```toml
llms.txt-docs/api.md-[dependencies]
llms.txt:docs/api.md:vexy_json = { version = "2.0.0", features = ["serde"] }
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt-docs/api.md-**Example:**
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt:docs/api.md:use vexy_json::{parse, Value};
llms.txt-docs/api.md-use serde_json; // Requires `serde_json` crate
llms.txt-docs/api.md-
llms.txt-docs/api.md-fn main() {
llms.txt-docs/api.md-    let json_str = r#"{ "name": "Alice", "age": 30 }"#;
llms.txt:docs/api.md:    let vexy_json_value: Value = parse(json_str).unwrap();
llms.txt-docs/api.md-
llms.txt:docs/api.md:    // Convert vexy_json::Value to serde_json::Value
llms.txt:docs/api.md:    let serde_value: serde_json::Value = serde_json::to_value(vexy_json_value).unwrap();
llms.txt-docs/api.md-    println!("Converted to serde_json::Value: {}", serde_value);
llms.txt-docs/api.md-
llms.txt:docs/api.md:    // Convert serde_json::Value back to vexy_json::Value
llms.txt:docs/api.md:    let new_vexy_json_value: Value = serde_json::from_value(serde_value).unwrap();
llms.txt:docs/api.md:    println!("Converted back to vexy_json::Value: {:?}", new_vexy_json_value);
llms.txt-docs/api.md-}
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt-docs/api.md-## WebAssembly (WASM) Bindings
llms.txt-docs/api.md-
llms.txt:docs/api.md:`vexy_json` offers WebAssembly bindings, allowing it to be used directly in JavaScript environments (e.g., web browsers, Node.js). This is enabled via the `wasm` feature.
llms.txt-docs/api.md-
llms.txt:docs/api.md:To enable this feature, add `wasm` to your `vexy_json` dependency in `Cargo.toml`:
llms.txt-docs/api.md-
llms.txt-docs/api.md-```toml
llms.txt-docs/api.md-[dependencies]
llms.txt:docs/api.md:vexy_json = { version = "2.0.0", features = ["wasm"] }
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt-docs/api.md-For detailed documentation on the WebAssembly API, including JavaScript examples, please refer to the [WASM API Reference](wasm/).
llms.txt-docs/api.md-
llms.txt-docs/api.md-## Streaming API (New in v2.0.0)
llms.txt-docs/api.md-
llms.txt:docs/api.md:`vexy_json` v2.0.0 introduces a powerful streaming parser for processing large JSON files incrementally.
llms.txt-docs/api.md-
llms.txt:docs/api.md:### `vexy_json::StreamingParser`
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub struct StreamingParser { /* ... */ }
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-Example usage:
llms.txt-docs/api.md-```rust
llms.txt:docs/api.md:use vexy_json::{StreamingParser, StreamingEvent};
llms.txt-docs/api.md-
llms.txt-docs/api.md-let mut parser = StreamingParser::new();
llms.txt-docs/api.md-parser.feed(r#"{"key": "value"}"#)?;
--
llms.txt-docs/api.md-}
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt:docs/api.md:### `vexy_json::StreamingEvent`
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub enum StreamingEvent {
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-## Parallel Processing (New in v2.0.0)
llms.txt-docs/api.md-
llms.txt:docs/api.md:`vexy_json` v2.0.0 includes parallel processing capabilities for batch operations using the `rayon` crate.
llms.txt-docs/api.md-
llms.txt:docs/api.md:### `vexy_json::parse_parallel`
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub fn parse_parallel<I>(inputs: I) -> Vec<Result<Value, Error>>
--
llms.txt-docs/api.md-Process multiple JSON strings in parallel:
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt:docs/api.md:use vexy_json::parse_parallel;
llms.txt-docs/api.md-
llms.txt-docs/api.md-let json_strings = vec![
llms.txt-docs/api.md-    r#"{"id": 1, "name": "Alice"}"#,
--
llms.txt-docs/api.md-}
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt:docs/api.md:### `vexy_json::ParallelOptions`
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub struct ParallelOptions {
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-## Plugin System (New in v2.0.0)
llms.txt-docs/api.md-
llms.txt:docs/api.md:`vexy_json` v2.0.0 introduces a plugin architecture for extending parsing capabilities.
llms.txt-docs/api.md-
llms.txt:docs/api.md:### `vexy_json::Plugin` Trait
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub trait Plugin: Send + Sync {
--
llms.txt-docs/api.md-Example plugin implementation:
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt:docs/api.md:use vexy_json::{Plugin, Value, Error};
llms.txt-docs/api.md-
llms.txt-docs/api.md-struct DateNormalizerPlugin;
llms.txt-docs/api.md-
--
llms.txt-docs/api.md-}
llms.txt-docs/api.md-```
llms.txt-docs/api.md-
llms.txt:docs/api.md:### `vexy_json::parse_with_plugins`
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub fn parse_with_plugins(
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-Usage example:
llms.txt-docs/api.md-```rust
llms.txt:docs/api.md:use vexy_json::{parse_with_plugins, ParserOptions};
llms.txt-docs/api.md-
llms.txt-docs/api.md-let plugins: Vec<Box<dyn Plugin>> = vec![
llms.txt-docs/api.md-    Box::new(DateNormalizerPlugin),
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-## NDJSON Support (New in v2.0.0)
llms.txt-docs/api.md-
llms.txt:docs/api.md:### `vexy_json::NdJsonParser`
llms.txt-docs/api.md-
llms.txt-docs/api.md-```rust
llms.txt-docs/api.md-pub struct NdJsonParser { /* ... */ }
--
llms.txt-docs/api.md-
llms.txt-docs/api.md-Example:
llms.txt-docs/api.md-```rust
llms.txt:docs/api.md:use vexy_json::NdJsonParser;
llms.txt-docs/api.md-
llms.txt-docs/api.md-let mut parser = NdJsonParser::new();
llms.txt-docs/api.md-let input = r#"{"id": 1}
llms.txt---
llms.txt-bindings/python/examples/basic_usage.py-#!/usr/bin/env python3
llms.txt:bindings/python/examples/basic_usage.py:"""Basic usage examples for vexy_json"""
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt:bindings/python/examples/basic_usage.py:import vexy_json
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-def main():
llms.txt:bindings/python/examples/basic_usage.py:    print("vexy_json - Forgiving JSON Parser Examples")
llms.txt-bindings/python/examples/basic_usage.py-    print("=" * 50)
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-    # Example 1: Basic parsing
llms.txt-bindings/python/examples/basic_usage.py-    print("\n1. Basic JSON parsing:")
llms.txt-bindings/python/examples/basic_usage.py-    json_str = '{"name": "Alice", "age": 30}'
llms.txt:bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_str)
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Input:  {json_str}")
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
llms.txt-bindings/python/examples/basic_usage.py-
--
llms.txt-bindings/python/examples/basic_usage.py-        "city": "New York"
llms.txt-bindings/python/examples/basic_usage.py-    }
llms.txt-bindings/python/examples/basic_usage.py-    """
llms.txt:bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_with_comments)
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-    # Example 3: Trailing commas
llms.txt-bindings/python/examples/basic_usage.py-    print("\n3. JSON with trailing commas:")
llms.txt-bindings/python/examples/basic_usage.py-    json_trailing = '{"items": [1, 2, 3,], "total": 3,}'
llms.txt:bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_trailing)
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Input:  {json_trailing}")
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-    # Example 4: Unquoted keys
llms.txt-bindings/python/examples/basic_usage.py-    print("\n4. JSON with unquoted keys:")
llms.txt-bindings/python/examples/basic_usage.py-    json_unquoted = '{name: "Charlie", age: 35, active: true}'
llms.txt:bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_unquoted)
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Input:  {json_unquoted}")
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-    # Example 5: Single quotes
llms.txt-bindings/python/examples/basic_usage.py-    print("\n5. JSON with single quotes:")
llms.txt-bindings/python/examples/basic_usage.py-    json_single = "{'name': 'David', 'language': 'Python'}"
llms.txt:bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_single)
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Input:  {json_single}")
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-    # Example 6: Implicit object
llms.txt-bindings/python/examples/basic_usage.py-    print("\n6. Implicit top-level object:")
llms.txt-bindings/python/examples/basic_usage.py-    json_implicit = 'name: "Eve", role: "developer", experience: 5'
llms.txt:bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_implicit)
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Input:  {json_implicit}")
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
llms.txt-bindings/python/examples/basic_usage.py-
--
llms.txt-bindings/python/examples/basic_usage.py-        }
llms.txt-bindings/python/examples/basic_usage.py-    }
llms.txt-bindings/python/examples/basic_usage.py-    """
llms.txt:bindings/python/examples/basic_usage.py:    data = vexy_json.parse(json_mixed)
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Output: {data}")
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-    # Example 8: Using Options
llms.txt-bindings/python/examples/basic_usage.py-    print("\n8. Using custom options (strict mode):")
llms.txt:bindings/python/examples/basic_usage.py:    strict_opts = vexy_json.Options.strict()
llms.txt-bindings/python/examples/basic_usage.py-    try:
llms.txt-bindings/python/examples/basic_usage.py-        # This will fail with strict options
llms.txt:bindings/python/examples/basic_usage.py:        vexy_json.parse_with_options("{unquoted: true}", strict_opts)
llms.txt-bindings/python/examples/basic_usage.py-    except ValueError as e:
llms.txt-bindings/python/examples/basic_usage.py-        print(f"Expected error with strict mode: {e}")
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-    # Example 9: Serialization
llms.txt-bindings/python/examples/basic_usage.py-    print("\n9. Serializing Python objects:")
llms.txt-bindings/python/examples/basic_usage.py-    data = {"users": ["Alice", "Bob"], "count": 2, "active": True}
llms.txt:bindings/python/examples/basic_usage.py:    json_output = vexy_json.dumps(data, indent=2)
llms.txt-bindings/python/examples/basic_usage.py-    print(f"Serialized:\n{json_output}")
llms.txt-bindings/python/examples/basic_usage.py-
llms.txt-bindings/python/examples/basic_usage.py-    # Example 10: Parser instance
llms.txt-bindings/python/examples/basic_usage.py-    print("\n10. Using Parser instance:")
llms.txt:bindings/python/examples/basic_usage.py:    parser = vexy_json.Parser()
llms.txt-bindings/python/examples/basic_usage.py-    results = []
llms.txt-bindings/python/examples/basic_usage.py-    for json_str in ['{"a": 1}', "[1, 2, 3]", '"hello"']:
llms.txt-bindings/python/examples/basic_usage.py-        results.append(parser.parse(json_str))
llms.txt---
llms.txt:docs/assets/js/analytics.js:// Analytics placeholder for vexy_json web tool
llms.txt-docs/assets/js/analytics.js-// This file provides a basic analytics interface to prevent 404 errors
llms.txt-docs/assets/js/analytics.js-// and allows for future analytics implementation
llms.txt-docs/assets/js/analytics.js-
--
llms.txt-benches/stack_overflow_test.rs-//! should outperform recursive parsers by avoiding stack overflow issues.
llms.txt-benches/stack_overflow_test.rs-
llms.txt-benches/stack_overflow_test.rs-use criterion::{black_box, criterion_group, criterion_main, Criterion, BenchmarkId};
llms.txt:benches/stack_overflow_test.rs:use vexy_json_core::{
llms.txt-benches/stack_overflow_test.rs-    parse_recursive,
llms.txt-benches/stack_overflow_test.rs-    parse_iterative,
llms.txt-benches/stack_overflow_test.rs-    ParserOptions,
--
llms.txt-crates/core/src/parser/iterative.rs-/// # Examples
llms.txt-crates/core/src/parser/iterative.rs-///
llms.txt-crates/core/src/parser/iterative.rs-/// ```
llms.txt:crates/core/src/parser/iterative.rs:/// use vexy_json_core::parser::iterative::parse_iterative;
llms.txt:crates/core/src/parser/iterative.rs:/// use vexy_json_core::parser::ParserOptions;
llms.txt-crates/core/src/parser/iterative.rs-///
llms.txt-crates/core/src/parser/iterative.rs-/// let json = r#"{"key": "value", "numbers": [1, 2, 3]}"#;
llms.txt-crates/core/src/parser/iterative.rs-/// let options = ParserOptions::default();
llms.txt---
llms.txt-tests/forgiving_features.rs-use rustc_hash::FxHashMap;
llms.txt:tests/forgiving_features.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
llms.txt-tests/forgiving_features.rs-
llms.txt-tests/forgiving_features.rs-#[test]
llms.txt-tests/forgiving_features.rs-fn test_single_quoted_strings() {
--
llms.txt-tests/forgiving_features.rs-    let result = parse("{name: 'John', age: 30}").unwrap();
llms.txt-tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
llms.txt-tests/forgiving_features.rs-    expected.insert("name".to_string(), Value::String("John".to_string()));
llms.txt:tests/forgiving_features.rs:    expected.insert("age".to_string(), Value::Number(vexy_json::Number::Integer(30)));
llms.txt-tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
llms.txt-tests/forgiving_features.rs-}
llms.txt-tests/forgiving_features.rs-
--
llms.txt-tests/forgiving_features.rs-    assert_eq!(
llms.txt-tests/forgiving_features.rs-        result,
llms.txt-tests/forgiving_features.rs-        Value::Array(vec![
llms.txt:tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(1)),
llms.txt:tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(2)),
llms.txt:tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(3)),
llms.txt-tests/forgiving_features.rs-        ])
llms.txt-tests/forgiving_features.rs-    );
llms.txt-tests/forgiving_features.rs-
llms.txt-tests/forgiving_features.rs-    let result = parse("{a: 1, b: 2,}").unwrap();
llms.txt-tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
llms.txt:tests/forgiving_features.rs:    expected.insert("a".to_string(), Value::Number(vexy_json::Number::Integer(1)));
llms.txt:tests/forgiving_features.rs:    expected.insert("b".to_string(), Value::Number(vexy_json::Number::Integer(2)));
llms.txt-tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
llms.txt-tests/forgiving_features.rs-}
llms.txt-tests/forgiving_features.rs-
--
llms.txt-tests/forgiving_features.rs-fn test_single_line_comments() {
llms.txt-tests/forgiving_features.rs-    // TODO: Fix parsing when comment is at the beginning of input
llms.txt-tests/forgiving_features.rs-    // let result = parse("// This is a comment\n42").unwrap();
llms.txt:tests/forgiving_features.rs:    // assert_eq!(result, Value::Number(vexy_json::Number::Integer(42)));
llms.txt-tests/forgiving_features.rs-
llms.txt-tests/forgiving_features.rs-    // let result = parse("# This is also a comment\n42").unwrap();
llms.txt:tests/forgiving_features.rs:    // assert_eq!(result, Value::Number(vexy_json::Number::Integer(42)));
llms.txt-tests/forgiving_features.rs-
llms.txt-tests/forgiving_features.rs-    let result = parse("{a: 1, // comment\nb: 2}").unwrap();
llms.txt-tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
llms.txt:tests/forgiving_features.rs:    expected.insert("a".to_string(), Value::Number(vexy_json::Number::Integer(1)));
llms.txt:tests/forgiving_features.rs:    expected.insert("b".to_string(), Value::Number(vexy_json::Number::Integer(2)));
llms.txt-tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
llms.txt-tests/forgiving_features.rs-}
llms.txt-tests/forgiving_features.rs-
--
llms.txt-tests/forgiving_features.rs-fn test_multi_line_comments() {
llms.txt-tests/forgiving_features.rs-    // TODO: Fix parsing when comment is at the beginning of input
llms.txt-tests/forgiving_features.rs-    // let result = parse("/* This is a \nmulti-line comment */\n42").unwrap();
llms.txt:tests/forgiving_features.rs:    // assert_eq!(result, Value::Number(vexy_json::Number::Integer(42)));
llms.txt-tests/forgiving_features.rs-
llms.txt-tests/forgiving_features.rs-    let result = parse("{a: 1, /* comment */ b: 2}").unwrap();
llms.txt-tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
llms.txt:tests/forgiving_features.rs:    expected.insert("a".to_string(), Value::Number(vexy_json::Number::Integer(1)));
llms.txt:tests/forgiving_features.rs:    expected.insert("b".to_string(), Value::Number(vexy_json::Number::Integer(2)));
llms.txt-tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
llms.txt-tests/forgiving_features.rs-}
llms.txt-tests/forgiving_features.rs-
--
llms.txt-tests/forgiving_features.rs-fn test_implicit_object() {
llms.txt-tests/forgiving_features.rs-    let result = parse("a: 1").unwrap();
llms.txt-tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
llms.txt:tests/forgiving_features.rs:    expected.insert("a".to_string(), Value::Number(vexy_json::Number::Integer(1)));
llms.txt-tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
llms.txt-tests/forgiving_features.rs-
llms.txt-tests/forgiving_features.rs-    let result = parse("name: 'John', age: 30").unwrap();
llms.txt-tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
llms.txt-tests/forgiving_features.rs-    expected.insert("name".to_string(), Value::String("John".to_string()));
llms.txt:tests/forgiving_features.rs:    expected.insert("age".to_string(), Value::Number(vexy_json::Number::Integer(30)));
llms.txt-tests/forgiving_features.rs-    assert_eq!(result, Value::Object(expected));
llms.txt-tests/forgiving_features.rs-}
llms.txt-tests/forgiving_features.rs-
--
llms.txt-tests/forgiving_features.rs-    assert_eq!(
llms.txt-tests/forgiving_features.rs-        result,
llms.txt-tests/forgiving_features.rs-        Value::Array(vec![
llms.txt:tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(1)),
llms.txt:tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(2)),
llms.txt:tests/forgiving_features.rs:            Value::Number(vexy_json::Number::Integer(3)),
llms.txt-tests/forgiving_features.rs-        ])
llms.txt-tests/forgiving_features.rs-    );
llms.txt-tests/forgiving_features.rs-
--
llms.txt-tests/forgiving_features.rs-    let result = parse(input).unwrap();
llms.txt-tests/forgiving_features.rs-    let mut expected = FxHashMap::default();
llms.txt-tests/forgiving_features.rs-    expected.insert("name".to_string(), Value::String("John".to_string()));
llms.txt:tests/forgiving_features.rs:    expected.insert("age".to_string(), Value::Number(vexy_json::Number::Integer(30)));
llms.txt-tests/forgiving_features.rs-    expected.insert(
llms.txt-tests/forgiving_features.rs-        "hobbies".to_string(),
llms.txt-tests/forgiving_features.rs-        Value::Array(vec![
--
llms.txt-docs/development/RELEASE_PROCESS.md-
llms.txt-docs/development/RELEASE_PROCESS.md-### Binaries
llms.txt-docs/development/RELEASE_PROCESS.md-- **macOS**: Universal binary (x86_64 + ARM64)
llms.txt:docs/development/RELEASE_PROCESS.md:  - `vexy_json-2.0.0-macos.zip` - Standalone binary
llms.txt:docs/development/RELEASE_PROCESS.md:  - `vexy_json-2.0.0-macos.dmg` - Installer with PKG
llms.txt-docs/development/RELEASE_PROCESS.md-- **Linux**: 
llms.txt:docs/development/RELEASE_PROCESS.md:  - `vexy_json-2.0.0-linux-x86_64.tar.gz` - x86_64 binary
llms.txt:docs/development/RELEASE_PROCESS.md:  - `vexy_json-2.0.0-linux-aarch64.tar.gz` - ARM64 binary
llms.txt-docs/development/RELEASE_PROCESS.md-- **Windows**:
llms.txt:docs/development/RELEASE_PROCESS.md:  - `vexy_json-2.0.0-windows-x86_64.zip` - x86_64 binary
llms.txt-docs/development/RELEASE_PROCESS.md-
llms.txt-docs/development/RELEASE_PROCESS.md-### WASM Package
llms.txt:docs/development/RELEASE_PROCESS.md:- `vexy_json-wasm-2.0.0.tar.gz` - WebAssembly module with TypeScript bindings
llms.txt-docs/development/RELEASE_PROCESS.md-
llms.txt-docs/development/RELEASE_PROCESS.md-### Source
llms.txt-docs/development/RELEASE_PROCESS.md-- Source code archives (automatically created by GitHub)
--
llms.txt-docs/development/RELEASE_PROCESS.md-
llms.txt-docs/development/RELEASE_PROCESS.md-The macOS installer includes:
llms.txt-docs/development/RELEASE_PROCESS.md-- Universal binary supporting Intel and Apple Silicon
llms.txt:docs/development/RELEASE_PROCESS.md:- PKG installer that places `vexy_json` in `/usr/local/bin`
llms.txt-docs/development/RELEASE_PROCESS.md-- Code-signed DMG (requires Apple Developer certificate)
llms.txt-docs/development/RELEASE_PROCESS.md-- Automatic PATH configuration
llms.txt-docs/development/RELEASE_PROCESS.md-
--
llms.txt-docs/development/RELEASE_PROCESS.md-1. **Verify Installation Methods**:
llms.txt-docs/development/RELEASE_PROCESS.md-   ```bash
llms.txt-docs/development/RELEASE_PROCESS.md-   # Homebrew (macOS)
llms.txt:docs/development/RELEASE_PROCESS.md:   brew update && brew install vexy_json
llms.txt-docs/development/RELEASE_PROCESS.md-   
llms.txt-docs/development/RELEASE_PROCESS.md-   # Cargo
llms.txt:docs/development/RELEASE_PROCESS.md:   cargo install vexy_json-cli
llms.txt-docs/development/RELEASE_PROCESS.md-   
llms.txt-docs/development/RELEASE_PROCESS.md-   # npm (WASM)
llms.txt:docs/development/RELEASE_PROCESS.md:   npm install vexy_json-wasm
llms.txt-docs/development/RELEASE_PROCESS.md-   ```
llms.txt-docs/development/RELEASE_PROCESS.md-
llms.txt-docs/development/RELEASE_PROCESS.md-2. **Update Documentation**:
llms.txt-docs/development/RELEASE_PROCESS.md-   - The docs site auto-updates via GitHub Pages
llms.txt:docs/development/RELEASE_PROCESS.md:   - Verify at: https://twardoch.github.io/vexy_json/
llms.txt-docs/development/RELEASE_PROCESS.md-
llms.txt-docs/development/RELEASE_PROCESS.md-3. **Announce Release**:
llms.txt-docs/development/RELEASE_PROCESS.md-   - GitHub Discussions
--
llms.txt-docs/debug-pages/browser-test.html-  <head>
llms.txt-docs/debug-pages/browser-test.html-    <meta charset="UTF-8" />
llms.txt-docs/debug-pages/browser-test.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:docs/debug-pages/browser-test.html:    <title>vexy_json Browser Compatibility Test</title>
llms.txt-docs/debug-pages/browser-test.html-    <style>
llms.txt-docs/debug-pages/browser-test.html-      body {
llms.txt-docs/debug-pages/browser-test.html-        font-family: Arial, sans-serif;
--
llms.txt-docs/debug-pages/browser-test.html-    </style>
llms.txt-docs/debug-pages/browser-test.html-  </head>
llms.txt-docs/debug-pages/browser-test.html-  <body>
llms.txt:docs/debug-pages/browser-test.html:    <h1>vexy_json Browser Compatibility Test</h1>
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-    <div class="test-section">
llms.txt-docs/debug-pages/browser-test.html-      <h2>Browser Information</h2>
--
llms.txt-docs/debug-pages/browser-test.html-      <h2>WASM Module Loading</h2>
llms.txt-docs/debug-pages/browser-test.html-      <div id="module-loading">
llms.txt-docs/debug-pages/browser-test.html-        <div class="loading"></div>
llms.txt:docs/debug-pages/browser-test.html:        <span>Loading vexy_json WebAssembly module...</span>
llms.txt-docs/debug-pages/browser-test.html-      </div>
llms.txt-docs/debug-pages/browser-test.html-      <div id="module-tests"></div>
llms.txt-docs/debug-pages/browser-test.html-    </div>
--
llms.txt-docs/debug-pages/browser-test.html-    </div>
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-    <script type="module">
llms.txt:docs/debug-pages/browser-test.html:      let vexy_json = null;
llms.txt-docs/debug-pages/browser-test.html-      let wasmModule = null;
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-      // Test results storage
--
llms.txt-docs/debug-pages/browser-test.html-        }
llms.txt-docs/debug-pages/browser-test.html-      }
llms.txt-docs/debug-pages/browser-test.html-
llms.txt:docs/debug-pages/browser-test.html:      // Load vexy_json module
llms.txt-docs/debug-pages/browser-test.html-      async function loadVexyJsonModule() {
llms.txt-docs/debug-pages/browser-test.html-        try {
llms.txt-docs/debug-pages/browser-test.html-          document.getElementById('module-loading').innerHTML =
llms.txt:docs/debug-pages/browser-test.html:            '<div class="loading"></div>Loading vexy_json module...';
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-          // Import the module
llms.txt:docs/debug-pages/browser-test.html:          const module = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/browser-test.html-          await module.default(); // Initialize WASM
llms.txt:docs/debug-pages/browser-test.html:          vexy_json = module;
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-          document.getElementById('module-loading').innerHTML =
llms.txt:docs/debug-pages/browser-test.html:            '<div class="test-result success">✓ vexy_json module loaded successfully</div>';
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-          // Test module functions
llms.txt-docs/debug-pages/browser-test.html-          testModuleFunctions();
llms.txt-docs/debug-pages/browser-test.html-        } catch (error) {
llms.txt-docs/debug-pages/browser-test.html-          document.getElementById(
llms.txt-docs/debug-pages/browser-test.html-            'module-loading'
llms.txt:docs/debug-pages/browser-test.html:          ).innerHTML = `<div class="test-result error">✗ Failed to load vexy_json module: ${error.message}</div>`;
llms.txt-docs/debug-pages/browser-test.html-          addResult(
llms.txt-docs/debug-pages/browser-test.html-            'module',
llms.txt-docs/debug-pages/browser-test.html-            'Module Loading',
--
llms.txt-docs/debug-pages/browser-test.html-      }
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-      function testModuleFunctions() {
llms.txt:docs/debug-pages/browser-test.html:        if (!vexy_json) return;
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-        try {
llms.txt-docs/debug-pages/browser-test.html-          // Test version info
llms.txt:docs/debug-pages/browser-test.html:          const version = vexy_json.get_version_info();
llms.txt-docs/debug-pages/browser-test.html-          addResult(
llms.txt-docs/debug-pages/browser-test.html-            'module',
llms.txt-docs/debug-pages/browser-test.html-            'get_version_info()',
--
llms.txt-docs/debug-pages/browser-test.html-          );
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-          // Test parser options
llms.txt:docs/debug-pages/browser-test.html:          const options = vexy_json.get_parser_options();
llms.txt-docs/debug-pages/browser-test.html-          addResult(
llms.txt-docs/debug-pages/browser-test.html-            'module',
llms.txt-docs/debug-pages/browser-test.html-            'get_parser_options()',
--
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-          // Test basic parsing
llms.txt-docs/debug-pages/browser-test.html-          const simpleJson = '{"test": true}';
llms.txt:docs/debug-pages/browser-test.html:          const result = vexy_json.parse_json(simpleJson);
llms.txt-docs/debug-pages/browser-test.html-          addResult(
llms.txt-docs/debug-pages/browser-test.html-            'module',
llms.txt-docs/debug-pages/browser-test.html-            'parse_json() basic',
--
llms.txt-docs/debug-pages/browser-test.html-            allow_unquoted_keys: true,
llms.txt-docs/debug-pages/browser-test.html-            allow_trailing_commas: true,
llms.txt-docs/debug-pages/browser-test.html-          };
llms.txt:docs/debug-pages/browser-test.html:          const resultWithOptions = vexy_json.parse_json_with_options(
llms.txt-docs/debug-pages/browser-test.html-            forgivingJson,
llms.txt-docs/debug-pages/browser-test.html-            optionsTest.allow_comments,
llms.txt-docs/debug-pages/browser-test.html-            optionsTest.allow_trailing_commas,
--
llms.txt-docs/debug-pages/browser-test.html-          );
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-          // Test validation
llms.txt:docs/debug-pages/browser-test.html:          const isValid = vexy_json.validate_json('{"valid": true}');
llms.txt-docs/debug-pages/browser-test.html-          addResult(
llms.txt-docs/debug-pages/browser-test.html-            'module',
llms.txt-docs/debug-pages/browser-test.html-            'validate_json()',
--
llms.txt-docs/debug-pages/browser-test.html-      }
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-      function runParsingTests() {
llms.txt:docs/debug-pages/browser-test.html:        if (!vexy_json) {
llms.txt-docs/debug-pages/browser-test.html-          addResult(
llms.txt-docs/debug-pages/browser-test.html-            'parsing',
llms.txt-docs/debug-pages/browser-test.html-            'Module Required',
llms.txt-docs/debug-pages/browser-test.html-            false,
llms.txt:docs/debug-pages/browser-test.html:            'vexy_json module not loaded'
llms.txt-docs/debug-pages/browser-test.html-          );
llms.txt-docs/debug-pages/browser-test.html-          return;
llms.txt-docs/debug-pages/browser-test.html-        }
--
llms.txt-docs/debug-pages/browser-test.html-              allow_single_quotes: true,
llms.txt-docs/debug-pages/browser-test.html-            };
llms.txt-docs/debug-pages/browser-test.html-
llms.txt:docs/debug-pages/browser-test.html:            const result = vexy_json.parse_json_with_options(
llms.txt-docs/debug-pages/browser-test.html-              test.input,
llms.txt-docs/debug-pages/browser-test.html-              options.allow_comments,
llms.txt-docs/debug-pages/browser-test.html-              options.allow_trailing_commas,
--
llms.txt-docs/debug-pages/browser-test.html-      }
llms.txt-docs/debug-pages/browser-test.html-
llms.txt-docs/debug-pages/browser-test.html-      function runPerformanceTests() {
llms.txt:docs/debug-pages/browser-test.html:        if (!vexy_json) {
llms.txt-docs/debug-pages/browser-test.html-          addResult(
llms.txt-docs/debug-pages/browser-test.html-            'performance',
llms.txt-docs/debug-pages/browser-test.html-            'Module Required',
llms.txt-docs/debug-pages/browser-test.html-            false,
llms.txt:docs/debug-pages/browser-test.html:            'vexy_json module not loaded'
llms.txt-docs/debug-pages/browser-test.html-          );
llms.txt-docs/debug-pages/browser-test.html-          return;
llms.txt-docs/debug-pages/browser-test.html-        }
--
llms.txt-docs/debug-pages/browser-test.html-        Object.entries(testData).forEach(([size, data]) => {
llms.txt-docs/debug-pages/browser-test.html-          try {
llms.txt-docs/debug-pages/browser-test.html-            const startTime = performance.now();
llms.txt:docs/debug-pages/browser-test.html:            const result = vexy_json.parse_json(data);
llms.txt-docs/debug-pages/browser-test.html-            const endTime = performance.now();
llms.txt-docs/debug-pages/browser-test.html-            const duration = endTime - startTime;
llms.txt-docs/debug-pages/browser-test.html-
--
llms.txt-docs/debug-pages/browser-test.html-        const input = document.getElementById('test-input').value;
llms.txt-docs/debug-pages/browser-test.html-        const resultDiv = document.getElementById('interactive-result');
llms.txt-docs/debug-pages/browser-test.html-
llms.txt:docs/debug-pages/browser-test.html:        if (!vexy_json) {
llms.txt-docs/debug-pages/browser-test.html-          resultDiv.innerHTML =
llms.txt:docs/debug-pages/browser-test.html:            '<div class="test-result error">vexy_json module not loaded</div>';
llms.txt-docs/debug-pages/browser-test.html-          return;
llms.txt-docs/debug-pages/browser-test.html-        }
llms.txt-docs/debug-pages/browser-test.html-
--
llms.txt-docs/debug-pages/browser-test.html-            newline_as_comma: true,
llms.txt-docs/debug-pages/browser-test.html-          };
llms.txt-docs/debug-pages/browser-test.html-
llms.txt:docs/debug-pages/browser-test.html:          const result = vexy_json.parse_json_with_options(
llms.txt-docs/debug-pages/browser-test.html-            input,
llms.txt-docs/debug-pages/browser-test.html-            options.allow_comments,
llms.txt-docs/debug-pages/browser-test.html-            options.allow_trailing_commas,
--
llms.txt-docs/debug-pages/browser-test.html-        downloadDiv.innerHTML = `
llms.txt-docs/debug-pages/browser-test.html-                <h2>Test Report</h2>
llms.txt-docs/debug-pages/browser-test.html-                <div class="test-result info">
llms.txt:docs/debug-pages/browser-test.html:                    All tests completed. <a href="${url}" download="vexy_json-browser-test-${
llms.txt-docs/debug-pages/browser-test.html-          results.browser.browser
llms.txt-docs/debug-pages/browser-test.html-        }-${Date.now()}.json">Download detailed report</a>
llms.txt-docs/debug-pages/browser-test.html-                </div>
--
llms.txt-docs/development/lean-minimalization.md-
llms.txt-docs/development/lean-minimalization.md-# LEAN.md
llms.txt-docs/development/lean-minimalization.md-
llms.txt:docs/development/lean-minimalization.md:## vexy_json: Definitive Lean/Minimalization Checklist & Rationale
llms.txt-docs/development/lean-minimalization.md-
llms.txt:docs/development/lean-minimalization.md:This actionable document is for reducing the vexy_json codebase to the absolutely minimal, efficient, and dependency-free parser crate, suitable for distribution or embedding.
llms.txt-docs/development/lean-minimalization.md-
llms.txt-docs/development/lean-minimalization.md----
llms.txt-docs/development/lean-minimalization.md-### SECTION 1 — **REMOVE ENTIRELY / DEAD CODE**
llms.txt---
llms.txt-benches/simd_benchmarks.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
llms.txt:benches/simd_benchmarks.rs:use vexy_json_core::optimization::simd::*;
llms.txt-benches/simd_benchmarks.rs-
llms.txt-benches/simd_benchmarks.rs-fn generate_test_strings() -> Vec<(&'static str, String)> {
llms.txt-benches/simd_benchmarks.rs-    vec![
--
llms.txt-docs/python/index.md-nav_order: 6
llms.txt-docs/python/index.md----
llms.txt-docs/python/index.md-
llms.txt:docs/python/index.md:# vexy_json - Forgiving JSON Parser for Python
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-A Python library for parsing "forgiving" JSON, which is JSON that includes features like:
llms.txt-docs/python/index.md-
--
llms.txt-docs/python/index.md-- Implicit top-level objects and arrays
llms.txt-docs/python/index.md-- Newlines as comma separators
llms.txt-docs/python/index.md-
llms.txt:docs/python/index.md:This is a Python binding for the Rust [vexy_json](https://github.com/twardoch/vexy_json) library, which is a port of the JavaScript [jsonic](https://github.com/jsonicjs/jsonic) library.
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-## Installation
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-```bash
llms.txt:docs/python/index.md:pip install vexy_json
llms.txt-docs/python/index.md-```
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-## Quick Start
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-```python
llms.txt:docs/python/index.md:import vexy_json
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-# Parse forgiving JSON
llms.txt:docs/python/index.md:result = vexy_json.parse('''
llms.txt-docs/python/index.md-{
llms.txt-docs/python/index.md-    // This is a comment
llms.txt-docs/python/index.md-    name: "Alice",
--
llms.txt-docs/python/index.md-### Basic Parsing
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-```python
llms.txt:docs/python/index.md:import vexy_json
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-# Standard JSON
llms.txt:docs/python/index.md:data = vexy_json.parse('{"key": "value"}')
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-# Forgiving features
llms.txt:docs/python/index.md:data = vexy_json.parse('''
llms.txt-docs/python/index.md-{
llms.txt-docs/python/index.md-    // Comments are allowed
llms.txt-docs/python/index.md-    unquoted_key: "value",
--
llms.txt-docs/python/index.md-### Custom Options
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-```python
llms.txt:docs/python/index.md:import vexy_json
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-# Parse with specific options
llms.txt:docs/python/index.md:data = vexy_json.parse_with_options(
llms.txt-docs/python/index.md-    'key: value',
llms.txt-docs/python/index.md-    allow_comments=True,
llms.txt-docs/python/index.md-    allow_trailing_commas=True,
--
llms.txt-docs/python/index.md-### Validation
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-```python
llms.txt:docs/python/index.md:import vexy_json
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-# Check if JSON is valid
llms.txt:docs/python/index.md:if vexy_json.is_valid('{"valid": true}'):
llms.txt-docs/python/index.md-    print("Valid JSON!")
llms.txt-docs/python/index.md-
llms.txt:docs/python/index.md:if not vexy_json.is_valid('invalid json'):
llms.txt-docs/python/index.md-    print("Invalid JSON!")
llms.txt-docs/python/index.md-```
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-### Serialization
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-```python
llms.txt:docs/python/index.md:import vexy_json
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-data = {'name': 'Alice', 'age': 30}
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-# Compact output
llms.txt:docs/python/index.md:json_str = vexy_json.dumps(data)
llms.txt-docs/python/index.md-print(json_str)
llms.txt-docs/python/index.md-# Output: {"name":"Alice","age":30}
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-# Pretty printed output
llms.txt:docs/python/index.md:json_str = vexy_json.dumps(data, indent=2)
llms.txt-docs/python/index.md-print(json_str)
llms.txt-docs/python/index.md-# Output:
llms.txt-docs/python/index.md-# {
--
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-## Comparison with Standard Library
llms.txt-docs/python/index.md-
llms.txt:docs/python/index.md:Unlike Python's built-in `json` module, vexy_json is forgiving and accepts non-standard JSON:
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-```python
llms.txt-docs/python/index.md-import json
llms.txt:docs/python/index.md:import vexy_json
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-forgiving_json = '''
llms.txt-docs/python/index.md-{
--
llms.txt-docs/python/index.md-    print(f"json module failed: {e}")
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-# This works fine
llms.txt:docs/python/index.md:result = vexy_json.parse(forgiving_json)
llms.txt:docs/python/index.md:print(f"vexy_json parsed: {result}")
llms.txt-docs/python/index.md-```
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-## Performance
llms.txt-docs/python/index.md-
llms.txt:docs/python/index.md:vexy_json is implemented in Rust and should be competitive with other JSON parsers for most use cases. The forgiving features add minimal overhead.
llms.txt-docs/python/index.md-
llms.txt-docs/python/index.md-## License
llms.txt-docs/python/index.md-
--
llms.txt-docs/troubleshooting.md-
llms.txt-docs/troubleshooting.md-# Troubleshooting
llms.txt-docs/troubleshooting.md-
llms.txt:docs/troubleshooting.md:This page documents common issues and their solutions when using vexy_json, particularly with WebAssembly bindings.
llms.txt-docs/troubleshooting.md-
llms.txt-docs/troubleshooting.md-## WebAssembly Issues
llms.txt-docs/troubleshooting.md-
--
llms.txt-docs/troubleshooting.md-2. Clear browser cache
llms.txt-docs/troubleshooting.md-3. Add cache-busting query parameters to module imports:
llms.txt-docs/troubleshooting.md-   ```javascript
llms.txt:docs/troubleshooting.md:   import init from './pkg/vexy_json_wasm.js?v=' + Date.now();
llms.txt-docs/troubleshooting.md-   ```
llms.txt-docs/troubleshooting.md-
llms.txt-docs/troubleshooting.md-### WASM Module Loading Failures
--
llms.txt-docs/troubleshooting.md-
llms.txt-docs/troubleshooting.md-1. **Incorrect MIME type**: Ensure your web server serves `.wasm` files with `application/wasm` MIME type
llms.txt-docs/troubleshooting.md-2. **CORS issues**: Serve files from a proper HTTP server, not file:// protocol
llms.txt:docs/troubleshooting.md:3. **Path issues**: Verify the path to `pkg/vexy_json_wasm.js` and `pkg/vexy_json_bg.wasm` is correct
llms.txt-docs/troubleshooting.md-
llms.txt-docs/troubleshooting.md-**Testing Setup**:
llms.txt-docs/troubleshooting.md-Use a simple HTTP server for testing:
--
llms.txt-docs/troubleshooting.md-
llms.txt-docs/troubleshooting.md-If you encounter issues not covered here:
llms.txt-docs/troubleshooting.md-
llms.txt:docs/troubleshooting.md:1. Check the [GitHub Issues](https://github.com/twardoch/vexy_json/issues)
llms.txt-docs/troubleshooting.md-2. Review the [API documentation](api.md)
llms.txt:docs/troubleshooting.md:3. Examine the [test files](https://github.com/twardoch/vexy_json/tree/main/tests) for usage examples
llms.txt-docs/troubleshooting.md-4. Create a new issue with:
llms.txt:docs/troubleshooting.md:   - Your vexy_json version
llms.txt-docs/troubleshooting.md-   - Browser and version
llms.txt-docs/troubleshooting.md-   - Minimal reproduction case
llms.txt-docs/troubleshooting.md-   - Expected vs actual behavior
llms.txt---
llms.txt:bindings/python/README.md:# vexy_json Python Bindings
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-Fast, forgiving JSON parser for Python - a port of the JavaScript library jsonic.
llms.txt-bindings/python/README.md-
--
llms.txt-bindings/python/README.md-## Installation
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```bash
llms.txt:bindings/python/README.md:pip install vexy_json
llms.txt-bindings/python/README.md-```
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-### Building from source
--
llms.txt-bindings/python/README.md-## Quick Start
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:import vexy_json
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-# Parse forgiving JSON
llms.txt:bindings/python/README.md:data = vexy_json.parse('''
llms.txt-bindings/python/README.md-{
llms.txt-bindings/python/README.md-    // Comments are allowed
llms.txt-bindings/python/README.md-    name: "John",        // Unquoted keys
--
llms.txt-bindings/python/README.md-Parse a JSON string with default forgiving options.
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:data = vexy_json.parse('{"key": "value"}')
llms.txt-bindings/python/README.md-```
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-#### `parse_with_options(input: str, options: Options) -> Any`
llms.txt-bindings/python/README.md-Parse a JSON string with custom options.
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:opts = vexy_json.Options(allow_comments=False)
llms.txt:bindings/python/README.md:data = vexy_json.parse_with_options(json_str, opts)
llms.txt-bindings/python/README.md-```
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-#### `dumps(obj: Any, indent: int = None, sort_keys: bool = False) -> str`
llms.txt-bindings/python/README.md-Serialize a Python object to JSON string.
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:json_str = vexy_json.dumps({"key": "value"}, indent=2)
llms.txt-bindings/python/README.md-```
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-#### `load(filename: str, options: Options = None) -> Any`
llms.txt-bindings/python/README.md-Load JSON from a file.
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:data = vexy_json.load("config.json")
llms.txt-bindings/python/README.md-```
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-#### `dump(obj: Any, filename: str, indent: int = None, sort_keys: bool = False)`
llms.txt-bindings/python/README.md-Save Python object as JSON to a file.
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:vexy_json.dump(data, "output.json", indent=2)
llms.txt-bindings/python/README.md-```
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-### Classes
--
llms.txt-bindings/python/README.md-Parser configuration options.
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:opts = vexy_json.Options(
llms.txt-bindings/python/README.md-    allow_comments=True,         # Allow // and /* */ comments
llms.txt-bindings/python/README.md-    allow_trailing_commas=True,  # Allow trailing commas
llms.txt-bindings/python/README.md-    allow_unquoted_keys=True,    # Allow unquoted object keys
--
llms.txt-bindings/python/README.md-Reusable parser instance for better performance when parsing multiple documents.
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:parser = vexy_json.Parser(options)
llms.txt-bindings/python/README.md-data = parser.parse(json_str)
llms.txt-bindings/python/README.md-```
llms.txt-bindings/python/README.md-
--
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-### Configuration Files
llms.txt-bindings/python/README.md-
llms.txt:bindings/python/README.md:vexy_json is perfect for configuration files that need to be human-friendly:
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:config = vexy_json.parse('''
llms.txt-bindings/python/README.md-{
llms.txt-bindings/python/README.md-    // Server configuration
llms.txt-bindings/python/README.md-    server: {
--
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-### Error Recovery
llms.txt-bindings/python/README.md-
llms.txt:bindings/python/README.md:vexy_json can automatically fix common JSON errors:
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt-bindings/python/README.md-# Missing commas
llms.txt:bindings/python/README.md:fixed = vexy_json.parse('{"a": 1 "b": 2}')  # {'a': 1, 'b': 2}
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-# Unclosed strings
llms.txt:bindings/python/README.md:fixed = vexy_json.parse('{"name": "John')   # {'name': 'John'}
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-# Trailing commas
llms.txt:bindings/python/README.md:fixed = vexy_json.parse('[1, 2, 3,]')       # [1, 2, 3]
llms.txt-bindings/python/README.md-```
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-### Strict Mode
--
llms.txt-bindings/python/README.md-For standard JSON compliance:
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-```python
llms.txt:bindings/python/README.md:strict_parser = vexy_json.Parser(vexy_json.Options.strict())
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-# This will raise an error
llms.txt-bindings/python/README.md-try:
--
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-## Performance
llms.txt-bindings/python/README.md-
llms.txt:bindings/python/README.md:vexy_json is built with Rust and is designed to be fast:
llms.txt-bindings/python/README.md-
llms.txt-bindings/python/README.md-- Written in Rust for native performance
llms.txt-bindings/python/README.md-- Efficient memory usage
--
llms.txt-docs/debug-pages/options-test.html-      import init, {
llms.txt-docs/debug-pages/options-test.html-        parse_json_with_options,
llms.txt-docs/debug-pages/options-test.html-        get_parser_options,
llms.txt:docs/debug-pages/options-test.html:      } from '../pkg/vexy_json_wasm.js';
llms.txt-docs/debug-pages/options-test.html-
llms.txt-docs/debug-pages/options-test.html-      let log = '';
llms.txt-docs/debug-pages/options-test.html-      function appendLog(message) {
--
llms.txt-docs/development/distribution-builds.md-nav_order: 4
llms.txt-docs/development/distribution-builds.md----
llms.txt-docs/development/distribution-builds.md-
llms.txt:docs/development/distribution-builds.md:# vexy_json Distribution Build Scripts
llms.txt-docs/development/distribution-builds.md-
llms.txt:docs/development/distribution-builds.md:This directory contains robust, maintainable scripts for building vexy_json CLI deliverables for all major platforms:
llms.txt-docs/development/distribution-builds.md-
llms.txt-docs/development/distribution-builds.md-- **macOS**: Universal binary, .pkg installer, and .dmg disk image
llms.txt-docs/development/distribution-builds.md-- **Windows**: .exe in a .zip archive
--
llms.txt-docs/development/distribution-builds.md-
llms.txt-docs/development/distribution-builds.md-## Support
llms.txt-docs/development/distribution-builds.md-
llms.txt:docs/development/distribution-builds.md:For issues, see the main vexy_json repository or open an issue.
llms.txt---
llms.txt-benches/parsing.rs-use criterion::{black_box, criterion_group, criterion_main, BenchmarkId, Criterion};
llms.txt:benches/parsing.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-benches/parsing.rs-
llms.txt-benches/parsing.rs-fn benchmark_simple_object(c: &mut Criterion) {
llms.txt-benches/parsing.rs-    let json = r#"{"name": "John", "age": 30, "active": true}"#;
--
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-The v2.0.0 release will include:
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-### Binaries
llms.txt:docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-2.0.0-macos.dmg` - macOS installer with PKG
llms.txt:docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-2.0.0-macos.zip` - macOS standalone binary
llms.txt:docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-2.0.0-linux-x86_64.tar.gz` - Linux x86_64
llms.txt:docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-2.0.0-linux-aarch64.tar.gz` - Linux ARM64
llms.txt:docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-2.0.0-windows-x86_64.zip` - Windows x86_64
llms.txt:docs/development/RELEASE_v2.0.0_SUMMARY.md:- `vexy_json-wasm-2.0.0.tar.gz` - WASM package
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-### Features
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-- SIMD-accelerated parsing (2-3x faster)
--
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-1. Review and commit all changes
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-2. Run `./scripts/release-github.sh --version 2.0.0`
llms.txt:docs/development/RELEASE_v2.0.0_SUMMARY.md:3. Monitor the release at https://github.com/twardoch/vexy_json/actions
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-4. Once complete, announce the release
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-
llms.txt-docs/development/RELEASE_v2.0.0_SUMMARY.md-The repository is now fully prepared for a professional v2.0.0 release with comprehensive CI/CD automation!
--
llms.txt-docs/debug-pages/simple-test.html-    <pre id="output"></pre>
llms.txt-docs/debug-pages/simple-test.html-
llms.txt-docs/debug-pages/simple-test.html-    <script type="module">
llms.txt:docs/debug-pages/simple-test.html:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
llms.txt-docs/debug-pages/simple-test.html-
llms.txt-docs/debug-pages/simple-test.html-      let initialized = false;
llms.txt-docs/debug-pages/simple-test.html-
--
llms.txt-docs/assets/js/editor.js-
llms.txt-docs/assets/js/editor.js-/**
llms.txt-docs/assets/js/editor.js- * Enhanced editor functionality using CodeMirror for better syntax highlighting
llms.txt:docs/assets/js/editor.js: * and editing experience in the vexy_json web tool.
llms.txt-docs/assets/js/editor.js- */
llms.txt-docs/assets/js/editor.js-
llms.txt-docs/assets/js/editor.js-// CodeMirror imports from CDN - loaded via HTML script tags
--
llms.txt-docs/assets/js/editor.js-                }
llms.txt-docs/assets/js/editor.js-                return null;
llms.txt-docs/assets/js/editor.js-            }),
llms.txt:docs/assets/js/editor.js:            // Custom styling for vexy_json features
llms.txt-docs/assets/js/editor.js-            EditorView.theme({
llms.txt-docs/assets/js/editor.js-                '.cm-editor': {
llms.txt-docs/assets/js/editor.js-                    fontSize: '14px',
--
llms.txt-crates/core/src/parser/mod.rs-#[cfg(feature = "serde")]
llms.txt-crates/core/src/parser/mod.rs-use serde::{Deserialize, Serialize};
llms.txt-crates/core/src/parser/mod.rs-
llms.txt:crates/core/src/parser/mod.rs:/// Configuration options for the vexy_json parser.
llms.txt-crates/core/src/parser/mod.rs-///
llms.txt-crates/core/src/parser/mod.rs-/// These options control which forgiving features are enabled during parsing.
llms.txt-crates/core/src/parser/mod.rs-/// By default, all forgiving features are enabled.
--
llms.txt-crates/core/src/parser/mod.rs-    }
llms.txt-crates/core/src/parser/mod.rs-}
llms.txt-crates/core/src/parser/mod.rs-
llms.txt:crates/core/src/parser/mod.rs:/// The vexy_json parser.
llms.txt-crates/core/src/parser/mod.rs-///
llms.txt-crates/core/src/parser/mod.rs-/// Parses tokens from a Lexer into a Value tree structure.
llms.txt-crates/core/src/parser/mod.rs-/// Supports both strict JSON and various forgiving extensions.
--
llms.txt-crates/core/src/parser/mod.rs-/// # Examples
llms.txt-crates/core/src/parser/mod.rs-///
llms.txt-crates/core/src/parser/mod.rs-/// ```
llms.txt:crates/core/src/parser/mod.rs:/// use vexy_json_core::parse;
llms.txt-crates/core/src/parser/mod.rs-///
llms.txt-crates/core/src/parser/mod.rs-/// // Standard JSON
llms.txt-crates/core/src/parser/mod.rs-/// let result = parse(r#"{"key": "value"}"#);
--
llms.txt-crates/core/src/parser/mod.rs-/// # Examples
llms.txt-crates/core/src/parser/mod.rs-///
llms.txt-crates/core/src/parser/mod.rs-/// ```
llms.txt:crates/core/src/parser/mod.rs:/// use vexy_json_core::{parse_with_options, ParserOptions};
llms.txt-crates/core/src/parser/mod.rs-///
llms.txt-crates/core/src/parser/mod.rs-/// let mut options = ParserOptions::default();
llms.txt-crates/core/src/parser/mod.rs-/// options.allow_comments = false;
--
llms.txt-crates/core/src/parser/mod.rs-    parser.parse()
llms.txt-crates/core/src/parser/mod.rs-}
llms.txt-crates/core/src/parser/mod.rs-
llms.txt:crates/core/src/parser/mod.rs:/// Enhanced parsing with three-tier fallback strategy (serde_json → vexy_json → repair)
llms.txt-crates/core/src/parser/mod.rs-///
llms.txt-crates/core/src/parser/mod.rs-/// This function implements a progressive parsing strategy:
llms.txt-crates/core/src/parser/mod.rs-/// 1. First tries serde_json for maximum performance on valid JSON
llms.txt:crates/core/src/parser/mod.rs:/// 2. Falls back to vexy_json for forgiving parsing of non-standard JSON
llms.txt-crates/core/src/parser/mod.rs-/// 3. Finally attempts repair for malformed JSON (bracket imbalances, etc.)
llms.txt-crates/core/src/parser/mod.rs-///
llms.txt-crates/core/src/parser/mod.rs-/// Returns an `EnhancedParseResult` that includes information about which
--
llms.txt-crates/core/src/parser/mod.rs-pub fn parse_with_fallback(input: &str, options: ParserOptions) -> EnhancedParseResult<Value> {
llms.txt-crates/core/src/parser/mod.rs-    // Tier 1: Try serde_json for maximum performance on valid JSON
llms.txt-crates/core/src/parser/mod.rs-    if let Ok(serde_value) = serde_json::from_str::<serde_json::Value>(input) {
llms.txt:crates/core/src/parser/mod.rs:        // Convert serde_json::Value to vexy_json::Value
llms.txt:crates/core/src/parser/mod.rs:        let vexy_json_value = convert_serde_to_vexy_json(serde_value);
llms.txt:crates/core/src/parser/mod.rs:        return EnhancedParseResult::success(vexy_json_value, ParsingTier::Fast);
llms.txt-crates/core/src/parser/mod.rs-    }
llms.txt-crates/core/src/parser/mod.rs-
llms.txt:crates/core/src/parser/mod.rs:    // Tier 2: Try vexy_json for forgiving parsing
llms.txt-crates/core/src/parser/mod.rs-    match parse_with_options(input, options.clone()) {
llms.txt-crates/core/src/parser/mod.rs-        Ok(value) => EnhancedParseResult::success(value, ParsingTier::Forgiving),
llms.txt-crates/core/src/parser/mod.rs-        Err(error) => {
--
llms.txt-crates/core/src/parser/mod.rs-
llms.txt-crates/core/src/parser/mod.rs-    match repairer.repair(input) {
llms.txt-crates/core/src/parser/mod.rs-        Ok((repaired_json, repairs)) => {
llms.txt:crates/core/src/parser/mod.rs:            // Try to parse the repaired JSON with vexy_json
llms.txt-crates/core/src/parser/mod.rs-            match parse_with_options(&repaired_json, options.clone()) {
llms.txt-crates/core/src/parser/mod.rs-                Ok(value) => {
llms.txt-crates/core/src/parser/mod.rs-                    EnhancedParseResult::success_with_repairs(value, repairs, ParsingTier::Repair)
--
llms.txt-crates/core/src/parser/mod.rs-    }
llms.txt-crates/core/src/parser/mod.rs-}
llms.txt-crates/core/src/parser/mod.rs-
llms.txt:crates/core/src/parser/mod.rs:/// Convert serde_json::Value to vexy_json::Value
llms.txt:crates/core/src/parser/mod.rs:fn convert_serde_to_vexy_json(serde_value: serde_json::Value) -> Value {
llms.txt-crates/core/src/parser/mod.rs-    match serde_value {
llms.txt-crates/core/src/parser/mod.rs-        serde_json::Value::Null => Value::Null,
llms.txt-crates/core/src/parser/mod.rs-        serde_json::Value::Bool(b) => Value::Bool(b),
--
llms.txt-crates/core/src/parser/mod.rs-        }
llms.txt-crates/core/src/parser/mod.rs-        serde_json::Value::String(s) => Value::String(s),
llms.txt-crates/core/src/parser/mod.rs-        serde_json::Value::Array(arr) => {
llms.txt:crates/core/src/parser/mod.rs:            let converted: Vec<Value> = arr.into_iter().map(convert_serde_to_vexy_json).collect();
llms.txt-crates/core/src/parser/mod.rs-            Value::Array(converted)
llms.txt-crates/core/src/parser/mod.rs-        }
llms.txt-crates/core/src/parser/mod.rs-        serde_json::Value::Object(obj) => {
llms.txt-crates/core/src/parser/mod.rs-            let converted: FxHashMap<String, Value> = obj
llms.txt-crates/core/src/parser/mod.rs-                .into_iter()
llms.txt:crates/core/src/parser/mod.rs:                .map(|(k, v)| (k, convert_serde_to_vexy_json(v)))
llms.txt-crates/core/src/parser/mod.rs-                .collect();
llms.txt-crates/core/src/parser/mod.rs-            Value::Object(converted)
llms.txt-crates/core/src/parser/mod.rs-        }
llms.txt---
llms.txt-tests/comma_handling.rs-// this_file: tests/comma_handling.rs
llms.txt-tests/comma_handling.rs-
llms.txt:tests/comma_handling.rs:use vexy_json::{parse, Value};
llms.txt-tests/comma_handling.rs-
llms.txt-tests/comma_handling.rs-/// Comma handling tests ported from jsonic comma.test.js
llms.txt-tests/comma_handling.rs-/// Tests implicit commas (newlines as separators), optional commas, trailing commas, and edge cases
--
llms.txt-tests/comma_handling.rs-    let result = parse("{a:1\nb:2}");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) if obj.len() == 2 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports newlines as comma separators in objects");
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("b").and_then(|v| v.as_f64()), Some(2.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed object newline as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json doesn't support newlines as separators in objects: {:?}",
llms.txt-tests/comma_handling.rs-                e
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
--
llms.txt-tests/comma_handling.rs-    let result = parse("[1\n2]");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 2 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports newlines as comma separators in arrays");
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[0].as_f64(), Some(1.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[1].as_f64(), Some(2.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed array newline as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json doesn't support newlines as separators in arrays: {:?}",
llms.txt-tests/comma_handling.rs-                e
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
--
llms.txt-tests/comma_handling.rs-    let result = parse("a:1,b:2");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) if obj.len() == 2 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports implicit top-level objects");
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("b").and_then(|v| v.as_f64()), Some(2.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed implicit object as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json doesn't support implicit objects: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    let result = parse("1,2,3");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 3 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports implicit top-level arrays");
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[0].as_f64(), Some(1.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[1].as_f64(), Some(2.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[2].as_f64(), Some(3.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed implicit array as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json doesn't support implicit arrays: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-}
--
llms.txt-tests/comma_handling.rs-    let result = parse("a:1\nb:2");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) if obj.len() == 2 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports implicit objects with newline separators");
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("b").and_then(|v| v.as_f64()), Some(2.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed implicit object with newlines as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json doesn't support implicit objects with newlines: {:?}",
llms.txt-tests/comma_handling.rs-                e
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
--
llms.txt-tests/comma_handling.rs-    let result = parse("1\n2\n3");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 3 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports implicit arrays with newline separators");
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[0].as_f64(), Some(1.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[1].as_f64(), Some(2.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[2].as_f64(), Some(3.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed implicit array with newlines as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json doesn't support implicit arrays with newlines: {:?}",
llms.txt-tests/comma_handling.rs-                e
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
--
llms.txt-tests/comma_handling.rs-    let result = parse("a\nb\nc");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 3 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports implicit string arrays with newlines");
llms.txt-tests/comma_handling.rs-            if let (Some(Value::String(s1)), Some(Value::String(s2)), Some(Value::String(s3))) =
llms.txt-tests/comma_handling.rs-                (arr.get(0), arr.get(1), arr.get(2))
llms.txt-tests/comma_handling.rs-            {
--
llms.txt-tests/comma_handling.rs-            }
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed string sequence as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json doesn't support string sequences with newlines: {:?}",
llms.txt-tests/comma_handling.rs-                e
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
--
llms.txt-tests/comma_handling.rs-    let result = parse("[1,]");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 1 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports trailing commas in arrays");
llms.txt-tests/comma_handling.rs-            assert_eq!(arr[0].as_f64(), Some(1.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed trailing comma array as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json doesn't support trailing commas in arrays: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    let result = parse("{a:1,}");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) if obj.len() == 1 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports trailing commas in objects");
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed trailing comma object as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json doesn't support trailing commas in objects: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-}
--
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json parsed [,,] as array with {} elements: {:?}",
llms.txt-tests/comma_handling.rs-                arr.len(),
llms.txt-tests/comma_handling.rs-                arr
llms.txt-tests/comma_handling.rs-            );
llms.txt:tests/comma_handling.rs:            // This tests if vexy_json supports jsonic-style null insertion for empty comma positions
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed [,,] as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on multiple commas [,,]: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json parsed [1,,3] as array with {} elements: {:?}",
llms.txt-tests/comma_handling.rs-                arr.len(),
llms.txt-tests/comma_handling.rs-                arr
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed [1,,3] as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on [1,,3]: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json parsed [,1] as array with {} elements: {:?}",
llms.txt-tests/comma_handling.rs-                arr.len(),
llms.txt-tests/comma_handling.rs-                arr
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed [,1] as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on leading comma [,1]: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-}
--
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json parsed {{,,}} as object with {} entries: {:?}",
llms.txt-tests/comma_handling.rs-                obj.len(),
llms.txt-tests/comma_handling.rs-                obj
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed {{,,}} as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on {{,,}}: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json parsed {{,a:1}} as object with {} entries: {:?}",
llms.txt-tests/comma_handling.rs-                obj.len(),
llms.txt-tests/comma_handling.rs-                obj
llms.txt-tests/comma_handling.rs-            );
--
llms.txt-tests/comma_handling.rs-            }
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed {{,a:1}} as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on {{,a:1}}: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json parsed {{,a:1,}} as object with {} entries: {:?}",
llms.txt-tests/comma_handling.rs-                obj.len(),
llms.txt-tests/comma_handling.rs-                obj
llms.txt-tests/comma_handling.rs-            );
--
llms.txt-tests/comma_handling.rs-            }
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed {{,a:1,}} as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on {{,a:1,}}: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-}
--
llms.txt-tests/comma_handling.rs-    let result = parse("[[a],]");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed [[a],] as: {:?}", arr);
llms.txt-tests/comma_handling.rs-            if arr.len() == 1 {
llms.txt-tests/comma_handling.rs-                if let Some(Value::Array(inner)) = arr.get(0) {
llms.txt-tests/comma_handling.rs-                    if inner.len() == 1 {
--
llms.txt-tests/comma_handling.rs-            }
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed nested array as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on nested arrays: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    let result = parse("[[a][b]]");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed [[a][b]] as: {:?}", arr);
llms.txt:tests/comma_handling.rs:            // Test if vexy_json supports implicit comma between adjacent arrays
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed [[a][b]] as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on [[a][b]]: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    let result = parse("[{a:1},]");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed [{{a:1}},] as: {:?}", arr);
llms.txt-tests/comma_handling.rs-            if arr.len() == 1 {
llms.txt-tests/comma_handling.rs-                if let Some(Value::Object(obj)) = arr.get(0) {
llms.txt-tests/comma_handling.rs-                    assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
--
llms.txt-tests/comma_handling.rs-            }
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed object in array as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on object in array: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-}
--
llms.txt-tests/comma_handling.rs-    let result = parse("{a:1},");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed {{a:1}}, as implicit array: {:?}", arr);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) => {
llms.txt-tests/comma_handling.rs-            println!(
llms.txt:tests/comma_handling.rs:                "vexy_json parsed {{a:1}}, as object (ignored trailing comma): {:?}",
llms.txt-tests/comma_handling.rs-                obj
llms.txt-tests/comma_handling.rs-            );
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed {{a:1}}, as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on {{a:1}},: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    let result = parse("a:1 b:2");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Object(obj)) if obj.len() == 2 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports space-separated object properties");
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("a").and_then(|v| v.as_f64()), Some(1.0));
llms.txt-tests/comma_handling.rs-            assert_eq!(obj.get("b").and_then(|v| v.as_f64()), Some(2.0));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed space-separated as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json doesn't support space-separated properties: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-
--
llms.txt-tests/comma_handling.rs-    let result = parse("true\nfalse\nnull");
llms.txt-tests/comma_handling.rs-    match result {
llms.txt-tests/comma_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 3 => {
llms.txt:tests/comma_handling.rs:            println!("✓ vexy_json supports mixed value types with newlines");
llms.txt-tests/comma_handling.rs-            assert!(matches!(arr[0], Value::Bool(true)));
llms.txt-tests/comma_handling.rs-            assert!(matches!(arr[1], Value::Bool(false)));
llms.txt-tests/comma_handling.rs-            assert!(matches!(arr[2], Value::Null));
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Ok(other) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json parsed mixed types as: {:?}", other);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-        Err(e) => {
llms.txt:tests/comma_handling.rs:            println!("vexy_json error on mixed types: {:?}", e);
llms.txt-tests/comma_handling.rs-        }
llms.txt-tests/comma_handling.rs-    }
llms.txt-tests/comma_handling.rs-}
--
llms.txt-docs/development/implementation-summary.md-nav_order: 3
llms.txt-docs/development/implementation-summary.md----
llms.txt-docs/development/implementation-summary.md-
llms.txt:docs/development/implementation-summary.md:# Task Implementation Summary - vexy_json WebAssembly & Feature Verification
llms.txt-docs/development/implementation-summary.md-
llms.txt-docs/development/implementation-summary.md-## Overview
llms.txt:docs/development/implementation-summary.md:This document summarizes the implementation and verification of the next tasks from PLAN.md and TODO.md for the vexy_json project.
llms.txt-docs/development/implementation-summary.md-
llms.txt-docs/development/implementation-summary.md-## Tasks Completed ✅
llms.txt-docs/development/implementation-summary.md-
--
llms.txt-docs/development/implementation-summary.md-- **Browser Compatibility**: Tested in Chrome with automated cross-browser testing framework
llms.txt-docs/development/implementation-summary.md-- **Test Results**: WebAssembly initialization test passed (44ms duration)
llms.txt-docs/development/implementation-summary.md-- **File Locations**:
llms.txt:docs/development/implementation-summary.md:  - WASM files: `docs/pkg/vexy_json_bg.wasm`, `docs/pkg/vexy_json_wasm.js`
llms.txt-docs/development/implementation-summary.md-  - Test page: `docs/test-wasm.html`
llms.txt-docs/development/implementation-summary.md-  - Cross-browser test: `scripts/cross-browser-test.js`
llms.txt-docs/development/implementation-summary.md-
--
llms.txt-docs/development/implementation-summary.md-```json
llms.txt-docs/development/implementation-summary.md-{
llms.txt-docs/development/implementation-summary.md-  // Configuration with comments
llms.txt:docs/development/implementation-summary.md:  name: 'vexy_json',           // Unquoted key, single quotes
llms.txt-docs/development/implementation-summary.md-  version: "1.2.4",        /* Version string */
llms.txt-docs/development/implementation-summary.md-  features: [
llms.txt-docs/development/implementation-summary.md-    "comments",
--
llms.txt-docs/development/implementation-summary.md-- `scripts/cross-browser-test.js` - Improved timing and error handling
llms.txt-docs/development/implementation-summary.md-
llms.txt-docs/development/implementation-summary.md-### Verified Files:
llms.txt:docs/development/implementation-summary.md:- `docs/pkg/vexy_json_bg.wasm` - WebAssembly binary
llms.txt:docs/development/implementation-summary.md:- `docs/pkg/vexy_json_wasm.js` - JavaScript bindings
llms.txt-docs/development/implementation-summary.md-- `docs/test-wasm.html` - Browser test page
llms.txt-docs/development/implementation-summary.md-- `docs/tool.html` - Interactive web tool
llms.txt-docs/development/implementation-summary.md-
--
llms.txt-docs/development/implementation-summary.md-- ✅ All forgiving JSON features working consistently (100% test coverage)
llms.txt-docs/development/implementation-summary.md-- ✅ Git-tag-based semver properly implemented (v1.2.4)
llms.txt-docs/development/implementation-summary.md-
llms.txt:docs/development/implementation-summary.md:The vexy_json project now has robust WebAssembly support with comprehensive feature verification and proper version management.
llms.txt---
llms.txt-docs/development/RELEASE_CHECKLIST.md-```
llms.txt-docs/development/RELEASE_CHECKLIST.md-
llms.txt-docs/development/RELEASE_CHECKLIST.md-### Homebrew (macOS)
llms.txt:docs/development/RELEASE_CHECKLIST.md:- [ ] Update Formula/vexy_json.rb with new version and SHA256
llms.txt:docs/development/RELEASE_CHECKLIST.md:- [ ] Test installation: `brew install --build-from-source ./Formula/vexy_json.rb`
llms.txt-docs/development/RELEASE_CHECKLIST.md-- [ ] Submit PR to homebrew-core (if applicable)
llms.txt-docs/development/RELEASE_CHECKLIST.md-
llms.txt-docs/development/RELEASE_CHECKLIST.md-## Communication
--
llms.txt-docs/debug-pages/console-debug.html-        parse_json,
llms.txt-docs/debug-pages/console-debug.html-        parse_json_with_options,
llms.txt-docs/debug-pages/console-debug.html-        get_parser_options,
llms.txt:docs/debug-pages/console-debug.html:      } from '../pkg/vexy_json_wasm.js?v=' + Date.now();
llms.txt-docs/debug-pages/console-debug.html-
llms.txt-docs/debug-pages/console-debug.html-      let log = '';
llms.txt-docs/debug-pages/console-debug.html-      function appendLog(message) {
--
llms.txt-docs/debug-pages/token-debug.html-        parse_json,
llms.txt-docs/debug-pages/token-debug.html-        parse_json_with_options,
llms.txt-docs/debug-pages/token-debug.html-        get_parser_options,
llms.txt:docs/debug-pages/token-debug.html:      } from '../pkg/vexy_json_wasm.js';
llms.txt-docs/debug-pages/token-debug.html-
llms.txt-docs/debug-pages/token-debug.html-      let log = '';
llms.txt-docs/debug-pages/token-debug.html-      function appendLog(message) {
--
llms.txt-benches/benchmark.rs-
llms.txt-benches/benchmark.rs-struct BenchmarkResult {
llms.txt-benches/benchmark.rs-    case: String,
llms.txt:benches/benchmark.rs:    vexy_json_ns: f64,
llms.txt-benches/benchmark.rs-}
llms.txt---
llms.txt:docs/vexy_json-tool.md-title: "Vexy JSON Parser"
llms.txt:docs/vexy_json-tool.md-description: "Interactive Vexy JSON parser with comments and flexible syntax"
llms.txt:docs/vexy_json-tool.md-nav_order: 10
llms.txt:docs/vexy_json-tool.md:permalink: /vexy_json-tool/
llms.txt:docs/vexy_json-tool.md----
llms.txt:docs/vexy_json-tool.md-
llms.txt:docs/vexy_json-tool.md-# Vexy JSON Interactive Parser
llms.txt---
llms.txt-docs/wasm/npm-package.md-nav_order: 2
llms.txt-docs/wasm/npm-package.md----
llms.txt-docs/wasm/npm-package.md-
llms.txt:docs/wasm/npm-package.md:# @twardoch/vexy_json-wasm
llms.txt-docs/wasm/npm-package.md-
llms.txt:docs/wasm/npm-package.md:WebAssembly bindings for [vexy_json](https://github.com/twardoch/vexy_json), a forgiving JSON parser that's a Rust port of [jsonic](https://github.com/jsonicjs/jsonic).
llms.txt-docs/wasm/npm-package.md-
llms.txt-docs/wasm/npm-package.md-## Installation
llms.txt-docs/wasm/npm-package.md-
llms.txt-docs/wasm/npm-package.md-```bash
llms.txt:docs/wasm/npm-package.md:npm install @twardoch/vexy_json-wasm
llms.txt-docs/wasm/npm-package.md-```
llms.txt-docs/wasm/npm-package.md-
llms.txt-docs/wasm/npm-package.md-## Usage
llms.txt-docs/wasm/npm-package.md-
llms.txt-docs/wasm/npm-package.md-```javascript
llms.txt:docs/wasm/npm-package.md:import init, { parse_js, parse_with_options_js, is_valid, format } from '@twardoch/vexy_json-wasm';
llms.txt-docs/wasm/npm-package.md-
llms.txt-docs/wasm/npm-package.md-// Initialize the WASM module
llms.txt-docs/wasm/npm-package.md-await init();
--
llms.txt-docs/wasm/npm-package.md-
llms.txt-docs/wasm/npm-package.md-## Features
llms.txt-docs/wasm/npm-package.md-
llms.txt:docs/wasm/npm-package.md:vexy_json supports all standard JSON features plus:
llms.txt-docs/wasm/npm-package.md-
llms.txt-docs/wasm/npm-package.md-- **Comments**: Single-line (`//`) and multi-line (`/* */`)
llms.txt-docs/wasm/npm-package.md-- **Trailing commas**: In objects and arrays
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py:"""Tests for vexy_json Python bindings"""
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-import pytest
llms.txt:bindings/python/tests/test_vexy_json.py:import vexy_json
llms.txt:bindings/python/tests/test_vexy_json.py-import json
llms.txt:bindings/python/tests/test_vexy_json.py-import tempfile
llms.txt:bindings/python/tests/test_vexy_json.py-import os
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-    """Test basic JSON parsing functionality"""
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parse_simple_object(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('{"name": "John", "age": 30}')
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"name": "John", "age": 30}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parse_simple_array(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('[1, 2, 3, "hello"]')
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == [1, 2, 3, "hello"]
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parse_nested_structure(self):
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-            "total": 2
llms.txt:bindings/python/tests/test_vexy_json.py-        }
llms.txt:bindings/python/tests/test_vexy_json.py-        """
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse(input_json)
llms.txt:bindings/python/tests/test_vexy_json.py-        expected = {
llms.txt:bindings/python/tests/test_vexy_json.py-            "users": [{"name": "Alice", "age": 25}, {"name": "Bob", "age": 30}],
llms.txt:bindings/python/tests/test_vexy_json.py-            "total": 2,
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == expected
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parse_primitives(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse("true") is True
llms.txt:bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse("false") is False
llms.txt:bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse("null") is None
llms.txt:bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse("42") == 42
llms.txt:bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse("3.14") == 3.14
llms.txt:bindings/python/tests/test_vexy_json.py:        assert vexy_json.parse('"hello"') == "hello"
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-class TestForgivingFeatures:
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-            "value": 42
llms.txt:bindings/python/tests/test_vexy_json.py-        }
llms.txt:bindings/python/tests/test_vexy_json.py-        """
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse(input_json)
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"name": "Test", "value": 42}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_trailing_commas(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('{"a": 1, "b": 2,}')
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"a": 1, "b": 2}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse("[1, 2, 3,]")
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == [1, 2, 3]
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_unquoted_keys(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('{name: "John", age: 30}')
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"name": "John", "age": 30}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_single_quotes(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse("{'name': 'John', 'city': 'NYC'}")
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"name": "John", "city": "NYC"}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_implicit_object(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('name: "John", age: 30')
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"name": "John", "age": 30}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_newline_as_comma(self):
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-            "c": 3
llms.txt:bindings/python/tests/test_vexy_json.py-        }
llms.txt:bindings/python/tests/test_vexy_json.py-        """
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse(input_json)
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"a": 1, "b": 2, "c": 3}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_mixed_forgiving_features(self):
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-            }
llms.txt:bindings/python/tests/test_vexy_json.py-        }
llms.txt:bindings/python/tests/test_vexy_json.py-        """
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse(input_json)
llms.txt:bindings/python/tests/test_vexy_json.py-        expected = {
llms.txt:bindings/python/tests/test_vexy_json.py-            "server": "localhost",
llms.txt:bindings/python/tests/test_vexy_json.py-            "port": 8080,
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-    """Test parser options"""
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_default_options(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        opts = vexy_json.Options.default()
llms.txt:bindings/python/tests/test_vexy_json.py-        assert opts.allow_comments is True
llms.txt:bindings/python/tests/test_vexy_json.py-        assert opts.allow_trailing_commas is True
llms.txt:bindings/python/tests/test_vexy_json.py-        assert opts.allow_unquoted_keys is True
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_strict_options(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        opts = vexy_json.Options.strict()
llms.txt:bindings/python/tests/test_vexy_json.py-        assert opts.allow_comments is False
llms.txt:bindings/python/tests/test_vexy_json.py-        assert opts.allow_trailing_commas is False
llms.txt:bindings/python/tests/test_vexy_json.py-        assert opts.allow_unquoted_keys is False
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_custom_options(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        opts = vexy_json.Options(
llms.txt:bindings/python/tests/test_vexy_json.py-            allow_comments=False, allow_trailing_commas=True, max_depth=50
llms.txt:bindings/python/tests/test_vexy_json.py-        )
llms.txt:bindings/python/tests/test_vexy_json.py-        assert opts.allow_comments is False
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-        assert opts.max_depth == 50
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parse_with_strict_options(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        opts = vexy_json.Options.strict()
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-        # Valid JSON should work
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse_with_options('{"valid": true}', opts)
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"valid": True}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-        # Invalid JSON should fail with strict options
llms.txt:bindings/python/tests/test_vexy_json.py-        with pytest.raises(ValueError):
llms.txt:bindings/python/tests/test_vexy_json.py:            vexy_json.parse_with_options("{unquoted: true}", opts)
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-class TestParser:
llms.txt:bindings/python/tests/test_vexy_json.py-    """Test Parser class"""
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parser_creation(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        parser = vexy_json.Parser()
llms.txt:bindings/python/tests/test_vexy_json.py-        assert parser is not None
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parser_with_options(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        opts = vexy_json.Options(allow_comments=False)
llms.txt:bindings/python/tests/test_vexy_json.py:        parser = vexy_json.Parser(opts)
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-        # Should parse valid JSON
llms.txt:bindings/python/tests/test_vexy_json.py-        result = parser.parse('{"valid": true}')
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"valid": True}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parser_reuse(self):
llms.txt:bindings/python/tests/test_vexy_json.py:        parser = vexy_json.Parser()
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-        # Parse multiple inputs with same parser
llms.txt:bindings/python/tests/test_vexy_json.py-        results = []
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-            temp_path = f.name
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-        try:
llms.txt:bindings/python/tests/test_vexy_json.py:            data = vexy_json.load(temp_path)
llms.txt:bindings/python/tests/test_vexy_json.py-            assert data == {"test": True, "value": 42}
llms.txt:bindings/python/tests/test_vexy_json.py-        finally:
llms.txt:bindings/python/tests/test_vexy_json.py-            os.unlink(temp_path)
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-            temp_path = f.name
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-        try:
llms.txt:bindings/python/tests/test_vexy_json.py:            vexy_json.dump(data, temp_path)
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-            # Read back with standard json to verify
llms.txt:bindings/python/tests/test_vexy_json.py-            with open(temp_path, "r") as f:
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-            temp_path = f.name
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-        try:
llms.txt:bindings/python/tests/test_vexy_json.py:            vexy_json.dump(data, temp_path, indent=2)
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-            with open(temp_path, "r") as f:
llms.txt:bindings/python/tests/test_vexy_json.py-                content = f.read()
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_dumps_basic(self):
llms.txt:bindings/python/tests/test_vexy_json.py-        data = {"name": "Test", "value": 42}
llms.txt:bindings/python/tests/test_vexy_json.py:        json_str = vexy_json.dumps(data)
llms.txt:bindings/python/tests/test_vexy_json.py-        # Parse it back to verify
llms.txt:bindings/python/tests/test_vexy_json.py-        assert json.loads(json_str) == data
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_dumps_with_indent(self):
llms.txt:bindings/python/tests/test_vexy_json.py-        data = {"a": 1, "b": 2}
llms.txt:bindings/python/tests/test_vexy_json.py:        json_str = vexy_json.dumps(data, indent=2)
llms.txt:bindings/python/tests/test_vexy_json.py-        assert "\n" in json_str  # Should have newlines
llms.txt:bindings/python/tests/test_vexy_json.py-        assert json.loads(json_str) == data
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-            "list": [1, 2, 3],
llms.txt:bindings/python/tests/test_vexy_json.py-            "dict": {"nested": True},
llms.txt:bindings/python/tests/test_vexy_json.py-        }
llms.txt:bindings/python/tests/test_vexy_json.py:        json_str = vexy_json.dumps(data)
llms.txt:bindings/python/tests/test_vexy_json.py-        assert json.loads(json_str) == data
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_parse_error(self):
llms.txt:bindings/python/tests/test_vexy_json.py-        # Completely invalid JSON
llms.txt:bindings/python/tests/test_vexy_json.py-        with pytest.raises(ValueError):
llms.txt:bindings/python/tests/test_vexy_json.py:            opts = vexy_json.Options(enable_repair=False)
llms.txt:bindings/python/tests/test_vexy_json.py:            vexy_json.parse_with_options("{{{invalid}}}", opts)
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_repair_mode(self):
llms.txt:bindings/python/tests/test_vexy_json.py-        # With repair enabled (default), should handle some errors
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.parse('{"broken":')
llms.txt:bindings/python/tests/test_vexy_json.py-        # Should repair to something valid
llms.txt:bindings/python/tests/test_vexy_json.py-        assert isinstance(result, dict)
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt---
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_loads_alias(self):
llms.txt:bindings/python/tests/test_vexy_json.py-        # loads should be an alias for parse
llms.txt:bindings/python/tests/test_vexy_json.py:        result = vexy_json.loads('{"test": true}')
llms.txt:bindings/python/tests/test_vexy_json.py-        assert result == {"test": True}
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-    def test_version(self):
llms.txt:bindings/python/tests/test_vexy_json.py-        # Should have version info
llms.txt:bindings/python/tests/test_vexy_json.py:        assert vexy_json.version() is not None
llms.txt:bindings/python/tests/test_vexy_json.py:        assert vexy_json.__version__ is not None
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-
llms.txt:bindings/python/tests/test_vexy_json.py-if __name__ == "__main__":
llms.txt---
llms.txt-docs/debug-pages/debug-test.html-    <p id="result">Loading...</p>
llms.txt-docs/debug-pages/debug-test.html-
llms.txt-docs/debug-pages/debug-test.html-    <script type="module">
llms.txt:docs/debug-pages/debug-test.html:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
llms.txt-docs/debug-pages/debug-test.html-
llms.txt-docs/debug-pages/debug-test.html-      async function test() {
llms.txt-docs/debug-pages/debug-test.html-        try {
--
llms.txt-docs/assets/js/jsonic-tool.js-    }
llms.txt-docs/assets/js/jsonic-tool.js-
llms.txt-docs/assets/js/jsonic-tool.js-    getParserOptions() {
llms.txt:docs/assets/js/jsonic-tool.js:        // Jsonic uses a different options format than vexy_json
llms.txt-docs/assets/js/jsonic-tool.js-        const options = {};
llms.txt-docs/assets/js/jsonic-tool.js-
llms.txt:docs/assets/js/jsonic-tool.js:        // Note: Jsonic doesn't have as many granular options as vexy_json
llms.txt-docs/assets/js/jsonic-tool.js-        // Most features are enabled by default
llms.txt-docs/assets/js/jsonic-tool.js-        const strictMode = document.getElementById('jsonic-strict')?.checked || false;
llms.txt-docs/assets/js/jsonic-tool.js-
--
llms.txt-tests/jsonic_advanced_features.rs-//! including potential future features and edge cases that push the boundaries of the parser.
llms.txt-tests/jsonic_advanced_features.rs-
llms.txt-tests/jsonic_advanced_features.rs-use rustc_hash::FxHashMap;
llms.txt:tests/jsonic_advanced_features.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
llms.txt-tests/jsonic_advanced_features.rs-
llms.txt-tests/jsonic_advanced_features.rs-/// Helper functions for creating test values
llms.txt-tests/jsonic_advanced_features.rs-#[allow(dead_code)]
--
llms.txt-tests/jsonic_advanced_features.rs-}
llms.txt-tests/jsonic_advanced_features.rs-
llms.txt-tests/jsonic_advanced_features.rs-fn n(num: i64) -> Value {
llms.txt:tests/jsonic_advanced_features.rs:    Value::Number(vexy_json::Number::Integer(num))
llms.txt-tests/jsonic_advanced_features.rs-}
llms.txt-tests/jsonic_advanced_features.rs-
llms.txt-tests/jsonic_advanced_features.rs-fn f(num: f64) -> Value {
llms.txt:tests/jsonic_advanced_features.rs:    Value::Number(vexy_json::Number::Float(num))
llms.txt-tests/jsonic_advanced_features.rs-}
llms.txt-tests/jsonic_advanced_features.rs-
llms.txt-tests/jsonic_advanced_features.rs-#[allow(dead_code)]
--
llms.txt-tests/jsonic_advanced_features.rs-        let small_result = parse("1e-300").unwrap();
llms.txt-tests/jsonic_advanced_features.rs-        assert!(matches!(
llms.txt-tests/jsonic_advanced_features.rs-            small_result,
llms.txt:tests/jsonic_advanced_features.rs:            Value::Number(vexy_json::Number::Float(_))
llms.txt-tests/jsonic_advanced_features.rs-        ));
llms.txt-tests/jsonic_advanced_features.rs-
llms.txt-tests/jsonic_advanced_features.rs-        // Very large floats
llms.txt-tests/jsonic_advanced_features.rs-        let large_result = parse("1e300").unwrap();
llms.txt-tests/jsonic_advanced_features.rs-        assert!(matches!(
llms.txt-tests/jsonic_advanced_features.rs-            large_result,
llms.txt:tests/jsonic_advanced_features.rs:            Value::Number(vexy_json::Number::Float(_))
llms.txt-tests/jsonic_advanced_features.rs-        ));
llms.txt-tests/jsonic_advanced_features.rs-    }
llms.txt-tests/jsonic_advanced_features.rs-
--
llms.txt-docs/debug-pages/error-debug.html-      import init, {
llms.txt-docs/debug-pages/error-debug.html-        parse_json,
llms.txt-docs/debug-pages/error-debug.html-        parse_json_with_options,
llms.txt:docs/debug-pages/error-debug.html:      } from '../pkg/vexy_json_wasm.js';
llms.txt-docs/debug-pages/error-debug.html-
llms.txt-docs/debug-pages/error-debug.html-      let log = '';
llms.txt-docs/debug-pages/error-debug.html-      function appendLog(message) {
--
llms.txt-crates/core/src/parser/recursive.rs-/// # Examples
llms.txt-crates/core/src/parser/recursive.rs-///
llms.txt-crates/core/src/parser/recursive.rs-/// ```
llms.txt:crates/core/src/parser/recursive.rs:/// use vexy_json_core::parser::recursive::parse_recursive;
llms.txt:crates/core/src/parser/recursive.rs:/// use vexy_json_core::parser::ParserOptions;
llms.txt-crates/core/src/parser/recursive.rs-///
llms.txt-crates/core/src/parser/recursive.rs-/// let json = r#"{"key": "value", "number": 42}"#;
llms.txt-crates/core/src/parser/recursive.rs-/// let options = ParserOptions::default();
--
llms.txt-docs/debug-pages/test-basic-wasm.html-  <head>
llms.txt-docs/debug-pages/test-basic-wasm.html-    <meta charset="UTF-8" />
llms.txt-docs/debug-pages/test-basic-wasm.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:docs/debug-pages/test-basic-wasm.html:    <title>Basic vexy_json WASM Test</title>
llms.txt-docs/debug-pages/test-basic-wasm.html-    <style>
llms.txt-docs/debug-pages/test-basic-wasm.html-      body {
llms.txt-docs/debug-pages/test-basic-wasm.html-        font-family: monospace;
--
llms.txt-docs/debug-pages/test-basic-wasm.html-    </style>
llms.txt-docs/debug-pages/test-basic-wasm.html-  </head>
llms.txt-docs/debug-pages/test-basic-wasm.html-  <body>
llms.txt:docs/debug-pages/test-basic-wasm.html:    <h1>Basic vexy_json WASM Test</h1>
llms.txt-docs/debug-pages/test-basic-wasm.html-    <div id="results"></div>
llms.txt-docs/debug-pages/test-basic-wasm.html-
llms.txt-docs/debug-pages/test-basic-wasm.html-    <script type="module">
--
llms.txt-docs/debug-pages/test-basic-wasm.html-          }
llms.txt-docs/debug-pages/test-basic-wasm.html-          addResult('✅ WebAssembly supported', 'success');
llms.txt-docs/debug-pages/test-basic-wasm.html-
llms.txt:docs/debug-pages/test-basic-wasm.html:          addResult('Loading vexy_json module...');
llms.txt:docs/debug-pages/test-basic-wasm.html:          const vexy_json = await import('../pkg/vexy_json_wasm.js');
llms.txt:docs/debug-pages/test-basic-wasm.html:          await vexy_json.default();
llms.txt:docs/debug-pages/test-basic-wasm.html:          addResult('✅ vexy_json module loaded', 'success');
llms.txt-docs/debug-pages/test-basic-wasm.html-
llms.txt-docs/debug-pages/test-basic-wasm.html-          // Test basic parsing
llms.txt-docs/debug-pages/test-basic-wasm.html-          addResult('Testing basic JSON parsing...');
llms.txt:docs/debug-pages/test-basic-wasm.html:          const result1 = vexy_json.parse_json('{"test": true}');
llms.txt-docs/debug-pages/test-basic-wasm.html-          addResult(`✅ Basic parsing: ${JSON.stringify(result1)}`, 'success');
llms.txt-docs/debug-pages/test-basic-wasm.html-
llms.txt-docs/debug-pages/test-basic-wasm.html-          // Test forgiving features
llms.txt-docs/debug-pages/test-basic-wasm.html-          addResult('Testing forgiving features...');
llms.txt:docs/debug-pages/test-basic-wasm.html:          const result2 = vexy_json.parse_json(
llms.txt-docs/debug-pages/test-basic-wasm.html-            '{key: "value", /* comment */ trailing: "comma",}'
llms.txt-docs/debug-pages/test-basic-wasm.html-          );
llms.txt-docs/debug-pages/test-basic-wasm.html-          addResult(
--
llms.txt-docs/debug-pages/test-basic-wasm.html-
llms.txt-docs/debug-pages/test-basic-wasm.html-          // Test validation
llms.txt-docs/debug-pages/test-basic-wasm.html-          addResult('Testing validation...');
llms.txt:docs/debug-pages/test-basic-wasm.html:          const valid = vexy_json.validate_json('{"valid": true}');
llms.txt:docs/debug-pages/test-basic-wasm.html:          const invalid = vexy_json.validate_json('{invalid}');
llms.txt-docs/debug-pages/test-basic-wasm.html-          addResult(
llms.txt-docs/debug-pages/test-basic-wasm.html-            `✅ Validation: valid=${valid}, invalid=${invalid}`,
llms.txt-docs/debug-pages/test-basic-wasm.html-            'success'
--
llms.txt-docs/debug-pages/test-basic-wasm.html-          // Test error handling
llms.txt-docs/debug-pages/test-basic-wasm.html-          addResult('Testing error handling...');
llms.txt-docs/debug-pages/test-basic-wasm.html-          try {
llms.txt:docs/debug-pages/test-basic-wasm.html:            vexy_json.parse_json('{unclosed');
llms.txt-docs/debug-pages/test-basic-wasm.html-            addResult('❌ Should have thrown error', 'error');
llms.txt-docs/debug-pages/test-basic-wasm.html-          } catch (error) {
llms.txt-docs/debug-pages/test-basic-wasm.html-            addResult(`✅ Error handling: ${error.message}`, 'success');
--
llms.txt-docs/debug-pages/test-browsers.html-    <!-- this_file: docs/test-browsers.html -->
llms.txt-docs/debug-pages/test-browsers.html-    <meta charset="UTF-8" />
llms.txt-docs/debug-pages/test-browsers.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:docs/debug-pages/test-browsers.html:    <title>vexy_json Cross-Browser Test Suite</title>
llms.txt-docs/debug-pages/test-browsers.html-    <link
llms.txt-docs/debug-pages/test-browsers.html-      href="https://cdn.jsdelivr.net/npm/daisyui@4.4.19/dist/full.min.css"
llms.txt-docs/debug-pages/test-browsers.html-      rel="stylesheet"
--
llms.txt-docs/debug-pages/test-browsers.html-        <div class="hero-content text-center">
llms.txt-docs/debug-pages/test-browsers.html-          <div class="max-w-md">
llms.txt-docs/debug-pages/test-browsers.html-            <h1 class="text-3xl font-bold">
llms.txt:docs/debug-pages/test-browsers.html:              vexy_json Cross-Browser Test Suite
llms.txt-docs/debug-pages/test-browsers.html-            </h1>
llms.txt-docs/debug-pages/test-browsers.html-            <p class="py-6">
llms.txt-docs/debug-pages/test-browsers.html-              Comprehensive testing for WASM compatibility across browsers
--
llms.txt-docs/debug-pages/test-browsers.html-          name: 'WASM Module Loading',
llms.txt-docs/debug-pages/test-browsers.html-          test: async () => {
llms.txt-docs/debug-pages/test-browsers.html-            try {
llms.txt:docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/test-browsers.html-              return {
llms.txt-docs/debug-pages/test-browsers.html-                success: true,
llms.txt-docs/debug-pages/test-browsers.html-                message: 'WASM module loaded successfully',
--
llms.txt-docs/debug-pages/test-browsers.html-          name: 'Basic JSON Parsing',
llms.txt-docs/debug-pages/test-browsers.html-          test: async () => {
llms.txt-docs/debug-pages/test-browsers.html-            try {
llms.txt:docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/test-browsers.html-              const result = wasmModule.parse_json('{"test": "value"}');
llms.txt-docs/debug-pages/test-browsers.html-              const parsed = JSON.parse(result);
llms.txt-docs/debug-pages/test-browsers.html-              if (parsed.test === 'value') {
--
llms.txt-docs/debug-pages/test-browsers.html-          name: 'Comment Support',
llms.txt-docs/debug-pages/test-browsers.html-          test: async () => {
llms.txt-docs/debug-pages/test-browsers.html-            try {
llms.txt:docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/test-browsers.html-              const input = '{"test": "value" /* comment */}';
llms.txt-docs/debug-pages/test-browsers.html-              const result = wasmModule.parse_json(input);
llms.txt-docs/debug-pages/test-browsers.html-              const parsed = JSON.parse(result);
--
llms.txt-docs/debug-pages/test-browsers.html-          name: 'Unquoted Keys',
llms.txt-docs/debug-pages/test-browsers.html-          test: async () => {
llms.txt-docs/debug-pages/test-browsers.html-            try {
llms.txt:docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/test-browsers.html-              const input = '{test: "value"}';
llms.txt-docs/debug-pages/test-browsers.html-              const result = wasmModule.parse_json(input);
llms.txt-docs/debug-pages/test-browsers.html-              const parsed = JSON.parse(result);
--
llms.txt-docs/debug-pages/test-browsers.html-          name: 'Trailing Commas',
llms.txt-docs/debug-pages/test-browsers.html-          test: async () => {
llms.txt-docs/debug-pages/test-browsers.html-            try {
llms.txt:docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/test-browsers.html-              const input = '{"test": "value",}';
llms.txt-docs/debug-pages/test-browsers.html-              const result = wasmModule.parse_json(input);
llms.txt-docs/debug-pages/test-browsers.html-              const parsed = JSON.parse(result);
--
llms.txt-docs/debug-pages/test-browsers.html-          name: 'Error Handling',
llms.txt-docs/debug-pages/test-browsers.html-          test: async () => {
llms.txt-docs/debug-pages/test-browsers.html-            try {
llms.txt:docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/test-browsers.html-              try {
llms.txt-docs/debug-pages/test-browsers.html-                wasmModule.parse_json('invalid json {{{');
llms.txt-docs/debug-pages/test-browsers.html-                return {
--
llms.txt-docs/debug-pages/test-browsers.html-          name: 'Performance Test',
llms.txt-docs/debug-pages/test-browsers.html-          test: async () => {
llms.txt-docs/debug-pages/test-browsers.html-            try {
llms.txt:docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/test-browsers.html-              const largeJson = JSON.stringify({
llms.txt-docs/debug-pages/test-browsers.html-                array: Array(1000)
llms.txt-docs/debug-pages/test-browsers.html-                  .fill()
--
llms.txt-docs/debug-pages/test-browsers.html-          name: 'Memory Management',
llms.txt-docs/debug-pages/test-browsers.html-          test: async () => {
llms.txt-docs/debug-pages/test-browsers.html-            try {
llms.txt:docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
llms.txt-docs/debug-pages/test-browsers.html-
llms.txt-docs/debug-pages/test-browsers.html-              // Run multiple parse operations to test memory management
llms.txt-docs/debug-pages/test-browsers.html-              for (let i = 0; i < 100; i++) {
--
llms.txt-docs/debug-pages/test-browsers.html-        resultsEl.innerHTML += `<span class="test-fail">Failed: ${failCount}</span>\n`;
llms.txt-docs/debug-pages/test-browsers.html-
llms.txt-docs/debug-pages/test-browsers.html-        if (failCount === 0) {
llms.txt:docs/debug-pages/test-browsers.html:          resultsEl.innerHTML += `\n🎉 All tests passed! vexy_json WASM is compatible with this browser.`;
llms.txt-docs/debug-pages/test-browsers.html-        } else {
llms.txt-docs/debug-pages/test-browsers.html-          resultsEl.innerHTML += `\n⚠️ Some tests failed. Check the results above for details.`;
llms.txt-docs/debug-pages/test-browsers.html-        }
--
llms.txt-docs/assets/js/feedback.js-// this_file: docs/assets/js/feedback.js
llms.txt-docs/assets/js/feedback.js-
llms.txt-docs/assets/js/feedback.js-/**
llms.txt:docs/assets/js/feedback.js: * Feedback System for vexy_json Web Tool
llms.txt-docs/assets/js/feedback.js- * 
llms.txt-docs/assets/js/feedback.js- * Provides user feedback collection functionality including:
llms.txt-docs/assets/js/feedback.js- * - Feedback widget with different categories
--
llms.txt-docs/assets/js/feedback.js-    constructor() {
llms.txt-docs/assets/js/feedback.js-        this.isInitialized = false;
llms.txt-docs/assets/js/feedback.js-        this.feedbackData = {};
llms.txt:docs/assets/js/feedback.js:        this.rateLimitKey = 'vexy_json_feedback_rate_limit';
llms.txt:docs/assets/js/feedback.js:        this.feedbackStorageKey = 'vexy_json_feedback_history';
llms.txt-docs/assets/js/feedback.js-        this.maxFeedbackPerDay = 5; // Rate limiting
llms.txt-docs/assets/js/feedback.js-
llms.txt-docs/assets/js/feedback.js-        // GitHub repository info for issue creation
llms.txt:docs/assets/js/feedback.js:        this.githubRepo = 'twardoch/vexy_json';
llms.txt-docs/assets/js/feedback.js-        this.githubIssueUrl = `https://github.com/${this.githubRepo}/issues/new`;
llms.txt-docs/assets/js/feedback.js-
llms.txt-docs/assets/js/feedback.js-        this.init();
--
llms.txt-docs/assets/js/feedback.js-            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-4 h-4">
llms.txt-docs/assets/js/feedback.js-              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
llms.txt-docs/assets/js/feedback.js-            </svg>
llms.txt:docs/assets/js/feedback.js:            <span>This feedback will be used to improve vexy_json. Technical information helps us debug issues. No personal data is collected unless you provide it.</span>
llms.txt-docs/assets/js/feedback.js-          </div>
llms.txt-docs/assets/js/feedback.js-        </div>
llms.txt-docs/assets/js/feedback.js-        
--
llms.txt-docs/assets/js/feedback.js-            }
llms.txt-docs/assets/js/feedback.js-        }
llms.txt-docs/assets/js/feedback.js-
llms.txt:docs/assets/js/feedback.js:        body += `\n---\n*This issue was created via the vexy_json web tool feedback system.*`;
llms.txt-docs/assets/js/feedback.js-
llms.txt-docs/assets/js/feedback.js-        return {
llms.txt-docs/assets/js/feedback.js-            title: `${typeEmojis[data.type]} ${data.subject}`,
--
llms.txt-docs/plugin-registry.md-**Purpose**: Validate JSON against a schema  
llms.txt-docs/plugin-registry.md-**Usage**:
llms.txt-docs/plugin-registry.md-```rust
llms.txt:docs/plugin-registry.md:use vexy_json_core::plugin::plugins::SchemaValidationPlugin;
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-let schema = parse(r#"{"type": "object", "properties": {"name": {"type": "string"}}}"#)?;
llms.txt-docs/plugin-registry.md-let validator = SchemaValidationPlugin::new(schema);
--
llms.txt-docs/plugin-registry.md-**Purpose**: Parse ISO 8601 dates and convert them to structured objects  
llms.txt-docs/plugin-registry.md-**Usage**:
llms.txt-docs/plugin-registry.md-```rust
llms.txt:docs/plugin-registry.md:use vexy_json_core::plugin::plugins::DateTimePlugin;
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-let mut datetime_plugin = DateTimePlugin::new();
llms.txt-docs/plugin-registry.md-datetime_plugin.transform_value(&mut value, "$")?;
--
llms.txt-docs/plugin-registry.md-**Purpose**: Parse non-standard number formats (hex, binary, underscores)  
llms.txt-docs/plugin-registry.md-**Usage**:
llms.txt-docs/plugin-registry.md-```rust
llms.txt:docs/plugin-registry.md:use vexy_json_core::plugin::plugins::CustomNumberFormatPlugin;
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-let mut number_plugin = CustomNumberFormatPlugin::new();
llms.txt-docs/plugin-registry.md-let result = number_plugin.on_number("0xFF", "$")?;
--
llms.txt-docs/plugin-registry.md-**Purpose**: Preserve comments during parsing  
llms.txt-docs/plugin-registry.md-**Usage**:
llms.txt-docs/plugin-registry.md-```rust
llms.txt:docs/plugin-registry.md:use vexy_json_core::plugin::plugins::CommentPreservationPlugin;
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-let mut comment_plugin = CommentPreservationPlugin::new();
llms.txt-docs/plugin-registry.md-comment_plugin.add_comment("Description".to_string(), "$.field", false);
--
llms.txt-docs/plugin-registry.md-All plugins must implement the `ParserPlugin` trait:
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-```rust
llms.txt:docs/plugin-registry.md:use vexy_json_core::plugin::ParserPlugin;
llms.txt:docs/plugin-registry.md:use vexy_json_core::ast::Value;
llms.txt:docs/plugin-registry.md:use vexy_json_core::error::Result;
llms.txt-docs/plugin-registry.md-use std::any::Any;
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-struct MyPlugin;
--
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-#### Direct Integration
llms.txt-docs/plugin-registry.md-```rust
llms.txt:docs/plugin-registry.md:use vexy_json_core::parser::Parser;
llms.txt:docs/plugin-registry.md:use vexy_json_core::plugin::ParserPluginManager;
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-let mut manager = ParserPluginManager::new();
llms.txt-docs/plugin-registry.md-manager.register(Box::new(MyPlugin));
--
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-#### Parser Options
llms.txt-docs/plugin-registry.md-```rust
llms.txt:docs/plugin-registry.md:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-let options = ParserOptions {
llms.txt-docs/plugin-registry.md-    plugins: vec![Box::new(MyPlugin)],
--
llms.txt-docs/plugin-registry.md-#[cfg(test)]
llms.txt-docs/plugin-registry.md-mod tests {
llms.txt-docs/plugin-registry.md-    use super::*;
llms.txt:docs/plugin-registry.md:    use vexy_json::parse;
llms.txt-docs/plugin-registry.md-
llms.txt-docs/plugin-registry.md-    #[test]
llms.txt-docs/plugin-registry.md-    fn test_my_plugin() {
--
llms.txt-bindings/python/pyproject.toml-
llms.txt-bindings/python/pyproject.toml-
llms.txt-bindings/python/pyproject.toml-[project]
llms.txt:bindings/python/pyproject.toml:name = "vexy_json"
llms.txt-bindings/python/pyproject.toml-version = "2.2.3"
llms.txt-bindings/python/pyproject.toml-description = "A forgiving JSON parser for Python - port of the JavaScript library jsonic"
llms.txt-bindings/python/pyproject.toml-readme = "README.md"
--
llms.txt-bindings/python/pyproject.toml-
llms.txt-bindings/python/pyproject.toml-
llms.txt-bindings/python/pyproject.toml-[project.urls]
llms.txt:bindings/python/pyproject.toml:Homepage = "https://github.com/twardoch/vexy_json"
llms.txt:bindings/python/pyproject.toml:Repository = "https://github.com/twardoch/vexy_json"
llms.txt:bindings/python/pyproject.toml:Issues = "https://github.com/twardoch/vexy_json/issues"
llms.txt-bindings/python/pyproject.toml-
llms.txt-bindings/python/pyproject.toml-
llms.txt-bindings/python/pyproject.toml-[tool.maturin]
llms.txt-bindings/python/pyproject.toml-python-source = "src"
llms.txt:bindings/python/pyproject.toml:module-name = "vexy_json.vexy_json"
llms.txt-bindings/python/pyproject.toml-features = [ "pyo3/extension-module" ]
llms.txt---
llms.txt-docs/drafts/work-progress.md-
llms.txt-docs/drafts/work-progress.md-**Project Status**: ✅ **CORE DEVELOPMENT COMPLETE**
llms.txt-docs/drafts/work-progress.md-
llms.txt:docs/drafts/work-progress.md:All core development goals have been achieved as of January 8, 2025. The vexy_json parser is fully functional with:
llms.txt-docs/drafts/work-progress.md-- Complete forgiving JSON parsing capabilities
llms.txt-docs/drafts/work-progress.md-- 100% test suite pass rate
llms.txt-docs/drafts/work-progress.md-- Jekyll web tool integration
--
llms.txt-docs/drafts/work-progress.md-- [x] Create repair action tracking and reporting system
llms.txt-docs/drafts/work-progress.md-
llms.txt-docs/drafts/work-progress.md-### Implementation Details:
llms.txt:docs/drafts/work-progress.md:- **Three-tier parsing strategy**: serde_json (fast) → vexy_json (forgiving) → repair (tolerant)
llms.txt-docs/drafts/work-progress.md-- **Internal repair implementation**: Custom `JsonRepairer` for bracket balancing
llms.txt-docs/drafts/work-progress.md-- **Enhanced error types**: Added `RepairFailed`, `BracketMismatch`, `UnbalancedBrackets`, `MaxRepairsExceeded`
llms.txt-docs/drafts/work-progress.md-- **Repair tracking**: `RepairAction` and `RepairType` enums with detailed reporting
--
llms.txt-docs/drafts/work-progress.md-- [x] Study theoretical foundations (PEG with labeled failures, GLR parsers, etc.)
llms.txt-docs/drafts/work-progress.md-- [x] Investigate practical heuristics for bracket balancing
llms.txt-docs/drafts/work-progress.md-- [x] Create comprehensive specification for `json-repair` integration (see issues/106.txt)
llms.txt:docs/drafts/work-progress.md:- [x] Design fallback chain architecture (fastest → core vexy_json → json-repair)
llms.txt-docs/drafts/work-progress.md-- [x] Plan implementation strategy with minimal disruption to existing code
llms.txt-docs/drafts/work-progress.md-
llms.txt-docs/drafts/work-progress.md-### Research Findings:
--
llms.txt-docs/drafts/work-progress.md-- Identified `json-repair` crate as viable solution for bracket mismatch handling
llms.txt-docs/drafts/work-progress.md-- Found multiple approaches: panic-mode recovery, PEG labeled failures, GLR parsing
llms.txt-docs/drafts/work-progress.md-- Documented strategies from academic research and practical implementations
llms.txt:docs/drafts/work-progress.md:- Key insight: Three-tier parsing approach (serde_json → vexy_json → json-repair) for optimal performance
llms.txt-docs/drafts/work-progress.md-
llms.txt-docs/drafts/work-progress.md-## Recently Completed: Streaming Parser Implementation ✅
llms.txt-docs/drafts/work-progress.md-
--
llms.txt-docs/drafts/work-progress.md-
llms.txt-docs/drafts/work-progress.md-**Status**: ✅ COMPLETED (January 8, 2025)
llms.txt-docs/drafts/work-progress.md-
llms.txt:docs/drafts/work-progress.md:Successfully implemented comprehensive Python bindings that make vexy_json available to Python users via PyO3 bindings:
llms.txt-docs/drafts/work-progress.md-
llms.txt-docs/drafts/work-progress.md-- **Core API**: Complete Python bindings with `parse()`, `loads()`, `parse_with_options()`, `is_valid()`, `dumps()`
llms.txt-docs/drafts/work-progress.md-- **File Operations**: Added `load()` and `dump()` functions for file-like objects
--
llms.txt-docs/drafts/work-progress.md-
llms.txt-docs/drafts/work-progress.md-**Status**: ✅ COMPLETED (January 8, 2025)
llms.txt-docs/drafts/work-progress.md-
llms.txt:docs/drafts/work-progress.md:Successfully implemented comprehensive CLI enhancements that transform vexy_json from a basic parser into a powerful JSON processing tool:
llms.txt-docs/drafts/work-progress.md-
llms.txt-docs/drafts/work-progress.md-- **Enhanced CLI Interface**: 15+ new command-line options and flags
llms.txt-docs/drafts/work-progress.md-- **Advanced Processing**: Watch mode (`--watch`), parallel processing (`--parallel`), batch operations
llms.txt---
llms.txt-docs/build-status.md-# Build Status Dashboard
llms.txt-docs/build-status.md-
llms.txt:docs/build-status.md:This page provides an overview of the current build status and health metrics for the vexy_json project.
llms.txt-docs/build-status.md-
llms.txt-docs/build-status.md-## Continuous Integration Status
llms.txt-docs/build-status.md-
--
llms.txt-docs/build-status.md-
llms.txt-docs/build-status.md-| Workflow | Status | Description |
llms.txt-docs/build-status.md-|----------|--------|-------------|
llms.txt:docs/build-status.md:| WASM Build | [![Build Status](https://github.com/twardoch/vexy_json/workflows/Build%20and%20Deploy%20WASM/badge.svg)](https://github.com/twardoch/vexy_json/actions/workflows/wasm-build.yml) | Builds WebAssembly module and deploys to GitHub Pages |
llms.txt:docs/build-status.md:| Security Audit | [![Security Audit](https://github.com/twardoch/vexy_json/workflows/Security%20Audit/badge.svg)](https://github.com/twardoch/vexy_json/actions/workflows/security.yml) | Checks for security vulnerabilities in dependencies |
llms.txt:docs/build-status.md:| Release | [![Release](https://github.com/twardoch/vexy_json/workflows/Release/badge.svg)](https://github.com/twardoch/vexy_json/actions/workflows/release.yml) | Automated release process for tagged versions |
llms.txt-docs/build-status.md-
llms.txt-docs/build-status.md-### Package Registries
llms.txt-docs/build-status.md-
llms.txt-docs/build-status.md-| Registry | Version | Downloads |
llms.txt-docs/build-status.md-|----------|---------|-----------|
llms.txt:docs/build-status.md:| crates.io | [![crates.io](https://img.shields.io/crates/v/vexy_json.svg)](https://crates.io/crates/vexy_json) | [![Downloads](https://img.shields.io/crates/d/vexy_json.svg)](https://crates.io/crates/vexy_json) |
llms.txt:docs/build-status.md:| docs.rs | [![docs.rs](https://docs.rs/vexy_json/badge.svg)](https://docs.rs/vexy_json) | - |
llms.txt:docs/build-status.md:| npm | [![npm](https://img.shields.io/npm/v/@vexy_json/vexy_json.svg)](https://www.npmjs.com/package/@vexy_json/vexy_json) | [![npm downloads](https://img.shields.io/npm/dm/@vexy_json/vexy_json.svg)](https://www.npmjs.com/package/@vexy_json/vexy_json) |
llms.txt-docs/build-status.md-
llms.txt-docs/build-status.md-## Code Quality Metrics
llms.txt-docs/build-status.md-
--
llms.txt-docs/build-status.md-## Deployment Status
llms.txt-docs/build-status.md-
llms.txt-docs/build-status.md-### Live Deployments
llms.txt:docs/build-status.md:- **Vexy JSON Tool**: [https://twardoch.github.io/vexy_json/vexy_json-tool/](https://twardoch.github.io/vexy_json/vexy_json-tool/)
llms.txt:docs/build-status.md:- **Jsonic Tool**: [https://twardoch.github.io/vexy_json/jsonic-tool/](https://twardoch.github.io/vexy_json/jsonic-tool/)
llms.txt:docs/build-status.md:- **Tools Overview**: [https://twardoch.github.io/vexy_json/tools/](https://twardoch.github.io/vexy_json/tools/)
llms.txt:docs/build-status.md:- **Documentation**: [https://docs.rs/vexy_json](https://docs.rs/vexy_json)
llms.txt-docs/build-status.md-- **GitHub Pages**: Automatically deployed on main branch updates
llms.txt-docs/build-status.md-
llms.txt-docs/build-status.md-### Release Artifacts
--
llms.txt-docs/build-status.md-- **As Needed**: Bug fixes and feature updates
llms.txt-docs/build-status.md-
llms.txt-docs/build-status.md-### Contact
llms.txt:docs/build-status.md:For build failures or urgent issues, please [create an issue](https://github.com/twardoch/vexy_json/issues/new) on GitHub.
llms.txt---
llms.txt-docs/debug-pages/direct-debug.html-    <pre id="log"></pre>
llms.txt-docs/debug-pages/direct-debug.html-
llms.txt-docs/debug-pages/direct-debug.html-    <script type="module">
llms.txt:docs/debug-pages/direct-debug.html:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
llms.txt-docs/debug-pages/direct-debug.html-
llms.txt-docs/debug-pages/direct-debug.html-      let log = '';
llms.txt-docs/debug-pages/direct-debug.html-      function appendLog(message) {
--
llms.txt-docs/assets/js/error-highlighting.js-// this_file: docs/assets/js/error-highlighting.js
llms.txt-docs/assets/js/error-highlighting.js-
llms.txt-docs/assets/js/error-highlighting.js-/**
llms.txt:docs/assets/js/error-highlighting.js: * Error highlighting system for the vexy_json web tool
llms.txt-docs/assets/js/error-highlighting.js- * Provides position-aware error display with line/column detection
llms.txt-docs/assets/js/error-highlighting.js- */
llms.txt-docs/assets/js/error-highlighting.js-
--
llms.txt-docs/assets/js/error-highlighting.js-    }
llms.txt-docs/assets/js/error-highlighting.js-
llms.txt-docs/assets/js/error-highlighting.js-    /**
llms.txt:docs/assets/js/error-highlighting.js:     * Parse vexy_json error message to extract position
llms.txt-docs/assets/js/error-highlighting.js-     * @param {string} errorMessage - Raw error message
llms.txt-docs/assets/js/error-highlighting.js-     * @returns {object} Parsed error information
llms.txt-docs/assets/js/error-highlighting.js-     */
--
llms.txt-benches/memory_benchmarks.rs-use std::alloc::{GlobalAlloc, Layout, System};
llms.txt-benches/memory_benchmarks.rs-use std::sync::atomic::{AtomicUsize, Ordering};
llms.txt-benches/memory_benchmarks.rs-use std::sync::Arc;
llms.txt:benches/memory_benchmarks.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-benches/memory_benchmarks.rs-
llms.txt-benches/memory_benchmarks.rs-/// A tracking allocator that wraps the system allocator
llms.txt-benches/memory_benchmarks.rs-/// to monitor memory allocations during benchmarks
--
llms.txt-docs/design.md-
llms.txt-docs/design.md-# Design
llms.txt-docs/design.md-
llms.txt:docs/design.md:This section contains design documents and architectural decisions for the vexy_json project.
llms.txt-docs/design.md-
llms.txt-docs/design.md-## Topics
llms.txt-docs/design.md-
--
llms.txt-tests/jsonic_real_world_scenarios.rs-//! when using jsonic for configuration files, data exchange, and other practical applications.
llms.txt-tests/jsonic_real_world_scenarios.rs-
llms.txt-tests/jsonic_real_world_scenarios.rs-use rustc_hash::FxHashMap;
llms.txt:tests/jsonic_real_world_scenarios.rs:use vexy_json::{parse, Value};
llms.txt-tests/jsonic_real_world_scenarios.rs-
llms.txt-tests/jsonic_real_world_scenarios.rs-/// Helper functions for creating test values
llms.txt-tests/jsonic_real_world_scenarios.rs-#[allow(dead_code)]
--
llms.txt-tests/jsonic_real_world_scenarios.rs-}
llms.txt-tests/jsonic_real_world_scenarios.rs-
llms.txt-tests/jsonic_real_world_scenarios.rs-fn n(num: i64) -> Value {
llms.txt:tests/jsonic_real_world_scenarios.rs:    Value::Number(vexy_json::Number::Integer(num))
llms.txt-tests/jsonic_real_world_scenarios.rs-}
llms.txt-tests/jsonic_real_world_scenarios.rs-
llms.txt-tests/jsonic_real_world_scenarios.rs-#[allow(dead_code)]
llms.txt-tests/jsonic_real_world_scenarios.rs-fn f(num: f64) -> Value {
llms.txt:tests/jsonic_real_world_scenarios.rs:    Value::Number(vexy_json::Number::Float(num))
llms.txt-tests/jsonic_real_world_scenarios.rs-}
llms.txt-tests/jsonic_real_world_scenarios.rs-
llms.txt-tests/jsonic_real_world_scenarios.rs-fn b(val: bool) -> Value {
--
llms.txt-docs/development.md-
llms.txt-docs/development.md-# Development
llms.txt-docs/development.md-
llms.txt:docs/development.md:This section contains documentation for developers working on the vexy_json project.
llms.txt-docs/development.md-
llms.txt-docs/development.md-## Topics
llms.txt-docs/development.md-
llms.txt---
llms.txt-bindings/python/Cargo.toml-[package]
llms.txt:bindings/python/Cargo.toml:name = "vexy_json-python"
llms.txt-bindings/python/Cargo.toml-version = "2.2.3"
llms.txt-bindings/python/Cargo.toml-edition = "2021"
llms.txt-bindings/python/Cargo.toml-authors = [ "Adam Twardoch <adam+github@twardoch.com>" ]
llms.txt-bindings/python/Cargo.toml-license = "MIT OR Apache-2.0"
llms.txt:bindings/python/Cargo.toml:description = "Python bindings for vexy_json - a forgiving JSON parser"
llms.txt:bindings/python/Cargo.toml:repository = "https://github.com/twardoch/vexy_json"
llms.txt-bindings/python/Cargo.toml-keywords = [ "json", "parser", "forgiving", "repair", "python" ]
llms.txt-bindings/python/Cargo.toml-categories = [ "encoding", "parser-implementations" ]
llms.txt-bindings/python/Cargo.toml-
llms.txt-bindings/python/Cargo.toml-
llms.txt-bindings/python/Cargo.toml-[lib]
llms.txt:bindings/python/Cargo.toml:name = "vexy_json"
llms.txt-bindings/python/Cargo.toml-crate-type = [ "cdylib" ]
llms.txt-bindings/python/Cargo.toml-
llms.txt-bindings/python/Cargo.toml-
--
llms.txt-bindings/python/Cargo.toml-serde_json = "1.0"
llms.txt-bindings/python/Cargo.toml-
llms.txt-bindings/python/Cargo.toml-
llms.txt:bindings/python/Cargo.toml:[dependencies.vexy_json-core]
llms.txt-bindings/python/Cargo.toml-path = "../../crates/core"
llms.txt-bindings/python/Cargo.toml-version = "2.0.0"
llms.txt-bindings/python/Cargo.toml-
llms.txt---
llms.txt-tests/jsonic_compat.rs-use rustc_hash::FxHashMap;
llms.txt:tests/jsonic_compat.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
llms.txt-tests/jsonic_compat.rs-
llms.txt-tests/jsonic_compat.rs-/// Helper to create expected values more easily
llms.txt-tests/jsonic_compat.rs-fn obj(pairs: &[(&str, Value)]) -> Value {
--
llms.txt-tests/jsonic_compat.rs-}
llms.txt-tests/jsonic_compat.rs-
llms.txt-tests/jsonic_compat.rs-fn n(num: i64) -> Value {
llms.txt:tests/jsonic_compat.rs:    Value::Number(vexy_json::Number::Integer(num))
llms.txt-tests/jsonic_compat.rs-}
llms.txt-tests/jsonic_compat.rs-
llms.txt-tests/jsonic_compat.rs-fn f(num: f64) -> Value {
llms.txt:tests/jsonic_compat.rs:    Value::Number(vexy_json::Number::Float(num))
llms.txt-tests/jsonic_compat.rs-}
llms.txt-tests/jsonic_compat.rs-
llms.txt-tests/jsonic_compat.rs-#[test]
--
llms.txt-docs/debug-pages/test-wasm.html-  <head>
llms.txt-docs/debug-pages/test-wasm.html-    <meta charset="UTF-8" />
llms.txt-docs/debug-pages/test-wasm.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
llms.txt:docs/debug-pages/test-wasm.html:    <title>vexy_json WASM Test</title>
llms.txt-docs/debug-pages/test-wasm.html-    <style>
llms.txt-docs/debug-pages/test-wasm.html-      body {
llms.txt-docs/debug-pages/test-wasm.html-        font-family: Arial, sans-serif;
--
llms.txt-docs/debug-pages/test-wasm.html-    </style>
llms.txt-docs/debug-pages/test-wasm.html-  </head>
llms.txt-docs/debug-pages/test-wasm.html-  <body>
llms.txt:docs/debug-pages/test-wasm.html:    <h1>vexy_json WebAssembly Test Page</h1>
llms.txt:docs/debug-pages/test-wasm.html:    <p>Testing the vexy_json WASM module functionality...</p>
llms.txt-docs/debug-pages/test-wasm.html-
llms.txt-docs/debug-pages/test-wasm.html-    <div id="results"></div>
llms.txt-docs/debug-pages/test-wasm.html-
--
llms.txt-docs/debug-pages/test-wasm.html-        get_parser_options,
llms.txt-docs/debug-pages/test-wasm.html-        stringify_value,
llms.txt-docs/debug-pages/test-wasm.html-        get_version_info,
llms.txt:docs/debug-pages/test-wasm.html:      } from '../pkg/vexy_json_wasm.js';
llms.txt-docs/debug-pages/test-wasm.html-
llms.txt-docs/debug-pages/test-wasm.html-      const resultsDiv = document.getElementById('results');
llms.txt-docs/debug-pages/test-wasm.html-
--
llms.txt-docs/debug-pages/test-wasm.html-            addResult(
llms.txt-docs/debug-pages/test-wasm.html-              'Version Info',
llms.txt-docs/debug-pages/test-wasm.html-              true,
llms.txt:docs/debug-pages/test-wasm.html:              `vexy_json v${versionInfo.version}\n${versionInfo.description}`
llms.txt-docs/debug-pages/test-wasm.html-            );
llms.txt-docs/debug-pages/test-wasm.html-          } catch (e) {
llms.txt-docs/debug-pages/test-wasm.html-            addResult('Version Info', false, `Error: ${e.message}`);
--
llms.txt-docs/features.md-
llms.txt-docs/features.md-# Forgiving Features
llms.txt-docs/features.md-
llms.txt:docs/features.md:`vexy_json` is a forgiving JSON parser, handling common deviations from strict JSON (RFC 8259). Below are the supported forgiving features, enhanced in v2.0.0 with streaming, parallel processing, and plugin capabilities:
llms.txt-docs/features.md-
llms.txt-docs/features.md-## Comments
llms.txt-docs/features.md-
--
llms.txt-docs/features.md-Object keys can be unquoted if they are valid identifiers.
llms.txt-docs/features.md-
llms.txt-docs/features.md-```json
llms.txt:docs/features.md:{ name: "vexy_json", version: 1.0 }
llms.txt-docs/features.md-```
llms.txt-docs/features.md-
llms.txt-docs/features.md-## Trailing Commas
--
llms.txt-docs/features.md-
llms.txt-docs/features.md-All forgiving features can be disabled for strict RFC 8259 compliance.
llms.txt-docs/features.md-
llms.txt:docs/features.md:These forgiving features make `vexy_json` a flexible parser for configurations, data files, and other scenarios where strict JSON adherence might be relaxed.
llms.txt-docs/features.md-
llms.txt-docs/features.md-## New in v2.0.0: Advanced Features
llms.txt-docs/features.md-
--
llms.txt-docs/features.md-- Linear scalability with core count
llms.txt-docs/features.md-
llms.txt-docs/features.md-### Plugin Architecture
llms.txt:docs/features.md:Extend vexy_json with custom functionality:
llms.txt-docs/features.md-- Transform values during parsing
llms.txt-docs/features.md-- Add custom validation rules
llms.txt-docs/features.md-- Implement domain-specific logic
--
llms.txt-docs/_config.yml-author:
llms.txt-docs/_config.yml-  name: Adam Twardoch
llms.txt-docs/_config.yml-  url: https://github.com/twardoch
llms.txt:docs/_config.yml:baseurl: /vexy_json
llms.txt-docs/_config.yml-# Collections
llms.txt-docs/_config.yml-collections:
llms.txt-docs/_config.yml-  pages:
--
llms.txt-docs/_config.yml-  - '**/gems/jekyll-*/lib/site_template/_posts/*'
llms.txt-docs/_config.yml-  - 'internal/**/*'
llms.txt-docs/_config.yml-github:
llms.txt:docs/_config.yml:  repository_url: https://github.com/twardoch/vexy_json
llms.txt-docs/_config.yml-highlighter: rouge
llms.txt-docs/_config.yml-# Include WASM and tool files in build
llms.txt-docs/_config.yml-include:
--
llms.txt-docs/_config.yml-back_to_top_text: "Back to top"
llms.txt-docs/_config.yml-
llms.txt-docs/_config.yml-# Footer content
llms.txt:docs/_config.yml:footer_content: "Copyright &copy; 2025 Adam Twardoch. Distributed by an <a href=\"https://github.com/twardoch/vexy_json/tree/main/LICENSE\">MIT license.</a>"
llms.txt-docs/_config.yml-
llms.txt-docs/_config.yml-# External navigation links will be removed from here as just-the-docs handles them in the content
llms.txt-docs/_config.yml-# Plugin configuration
--
llms.txt-docs/_config.yml-  - jekyll-sitemap
llms.txt-docs/_config.yml-  - jekyll-optional-front-matter
llms.txt-docs/_config.yml-# Repository information
llms.txt:docs/_config.yml:repository: twardoch/vexy_json
llms.txt-docs/_config.yml-# Performance and caching
llms.txt-docs/_config.yml-sass:
llms.txt-docs/_config.yml-  style: compressed
--
llms.txt-docs/_config.yml-social:
llms.txt-docs/_config.yml-  - icon: github
llms.txt-docs/_config.yml-    name: GitHub
llms.txt:docs/_config.yml:    url: https://github.com/twardoch/vexy_json
llms.txt-docs/_config.yml-# WASM and static file configuration
llms.txt-docs/_config.yml-# Ensure proper MIME types for WebAssembly files
llms.txt-docs/_config.yml-static_files:
--
llms.txt-docs/_config.yml-  - /pkg/*.js
llms.txt-docs/_config.yml-  - /assets/**/*
llms.txt-docs/_config.yml-remote_theme: just-the-docs/just-the-docs
llms.txt:docs/_config.yml:# Site configuration for vexy_json documentation
llms.txt:docs/_config.yml:title: vexy_json - Forgiving JSON Parser
llms.txt-docs/_config.yml-url: https://twardoch.github.io
llms.txt-docs/_config.yml-# MIME type handling for GitHub Pages
llms.txt-docs/_config.yml-# Note: GitHub Pages automatically serves .wasm files with application/wasm MIME type
llms.txt---
llms.txt:debug_test7.rs:use vexy_json::parse;
llms.txt-debug_test7.rs-
llms.txt-debug_test7.rs-fn main() {
llms.txt-debug_test7.rs-    // Test the exact failing case
llms.txt---
llms.txt:tests/basic_tests.rs:use vexy_json::{parse, Value};
llms.txt-tests/basic_tests.rs-
llms.txt-tests/basic_tests.rs-#[test]
llms.txt-tests/basic_tests.rs-fn test_parse_null() {
llms.txt---
llms.txt-tests/comment_handling.rs-// this_file: tests/comment_handling.rs
llms.txt-tests/comment_handling.rs-
llms.txt:tests/comment_handling.rs:use vexy_json::{parse, Value};
llms.txt-tests/comment_handling.rs-
llms.txt-tests/comment_handling.rs-/// Comment handling tests ported from jsonic comment.test.js
llms.txt-tests/comment_handling.rs-/// Tests single-line, multi-line comments, hash behavior, and edge cases
--
llms.txt-tests/comment_handling.rs-    let result = parse("42 // comment");
llms.txt-tests/comment_handling.rs-    match result {
llms.txt-tests/comment_handling.rs-        Ok(val) if val.as_f64() == Some(42.0) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json supports // comments");
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Ok(other) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json parsed as: {:?}", other);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Err(e) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json error on // comments: {:?}", e);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-    }
llms.txt-tests/comment_handling.rs-}
--
llms.txt-tests/comment_handling.rs-    let result = parse("42 /* comment */");
llms.txt-tests/comment_handling.rs-    match result {
llms.txt-tests/comment_handling.rs-        Ok(val) if val.as_f64() == Some(42.0) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json supports /* */ comments");
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Ok(other) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json parsed as: {:?}", other);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Err(e) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json error on /* */ comments: {:?}", e);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-    }
llms.txt-tests/comment_handling.rs-}
--
llms.txt-tests/comment_handling.rs-    let result = parse("a#b");
llms.txt-tests/comment_handling.rs-    match result {
llms.txt-tests/comment_handling.rs-        Ok(Value::String(s)) if s == "a" => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json treats # as comment");
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Ok(Value::String(s)) if s.contains('#') => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json treats # as literal: {:?}", s);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Ok(other) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json parsed a#b as: {:?}", other);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Err(e) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json error on #: {:?}", e);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-    }
llms.txt-tests/comment_handling.rs-}
--
llms.txt-tests/comment_handling.rs-    let result = parse("[1, // comment\n2]");
llms.txt-tests/comment_handling.rs-    match result {
llms.txt-tests/comment_handling.rs-        Ok(Value::Array(arr)) if arr.len() == 2 => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json supports comments in arrays");
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Ok(other) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json parsed array comment as: {:?}", other);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Err(_) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json doesn't support comments in arrays");
llms.txt-tests/comment_handling.rs-            let fallback = parse("[1, 2]").unwrap();
llms.txt-tests/comment_handling.rs-            assert!(matches!(fallback, Value::Array(_)));
llms.txt-tests/comment_handling.rs-        }
--
llms.txt-tests/comment_handling.rs-    let result = parse("42//");
llms.txt-tests/comment_handling.rs-    match result {
llms.txt-tests/comment_handling.rs-        Ok(val) if val.as_f64() == Some(42.0) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json supports empty // comments");
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Ok(other) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json parsed 42// as: {:?}", other);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Err(e) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json error on empty //: {:?}", e);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-    }
llms.txt-tests/comment_handling.rs-}
--
llms.txt-tests/comment_handling.rs-        Ok(Value::Object(obj)) => {
llms.txt-tests/comment_handling.rs-            if let Some(val) = obj.get("a") {
llms.txt-tests/comment_handling.rs-                if val.as_f64() == Some(1.0) {
llms.txt:tests/comment_handling.rs:                    println!("vexy_json supports comments at EOF");
llms.txt-tests/comment_handling.rs-                }
llms.txt-tests/comment_handling.rs-            }
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Ok(other) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json parsed EOF comment as: {:?}", other);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-        Err(e) => {
llms.txt:tests/comment_handling.rs:            println!("vexy_json error on EOF comment: {:?}", e);
llms.txt-tests/comment_handling.rs-        }
llms.txt-tests/comment_handling.rs-    }
llms.txt-tests/comment_handling.rs-}
llms.txt---
llms.txt:docs/drafts/publication-ready.md:# 🚀 vexy_json v1.1.0 - Ready for Publication
llms.txt-docs/drafts/publication-ready.md-
llms.txt-docs/drafts/publication-ready.md-## ✅ Status: READY FOR PUBLICATION
llms.txt-docs/drafts/publication-ready.md-
--
llms.txt-docs/drafts/publication-ready.md-## 📦 Package Details
llms.txt-docs/drafts/publication-ready.md-
llms.txt-docs/drafts/publication-ready.md-- **Version**: 1.1.0
llms.txt:docs/drafts/publication-ready.md:- **Name**: vexy_json
llms.txt-docs/drafts/publication-ready.md-- **Description**: A forgiving JSON parser - Rust port of jsonic
llms.txt:docs/drafts/publication-ready.md:- **Repository**: https://github.com/twardoch/vexy_json
llms.txt-docs/drafts/publication-ready.md-- **License**: MIT OR Apache-2.0
llms.txt-docs/drafts/publication-ready.md-- **Keywords**: json, parser, forgiving, jsonic
llms.txt-docs/drafts/publication-ready.md-- **Categories**: parser-implementations, encoding
--
llms.txt-docs/drafts/publication-ready.md-## 📊 What's Included
llms.txt-docs/drafts/publication-ready.md-
llms.txt-docs/drafts/publication-ready.md-- Core library with all forgiving JSON features
llms.txt:docs/drafts/publication-ready.md:- CLI tool (`vexy_json` binary)
llms.txt-docs/drafts/publication-ready.md-- WebAssembly bindings (optional feature)
llms.txt-docs/drafts/publication-ready.md-- Comprehensive test suite (73 tests)
llms.txt-docs/drafts/publication-ready.md-- Performance benchmarks
--
llms.txt-docs/contributing.md-nav_order: 7
llms.txt-docs/contributing.md----
llms.txt-docs/contributing.md-
llms.txt:docs/contributing.md:# Contributing to vexy_json
llms.txt-docs/contributing.md-
llms.txt:docs/contributing.md:We welcome contributions to `vexy_json`! Whether it's bug reports, feature requests, documentation improvements, or code contributions, your help is greatly appreciated.
llms.txt-docs/contributing.md-
llms.txt-docs/contributing.md-## How to Contribute
llms.txt-docs/contributing.md-
llms.txt:docs/contributing.md:1.  **Fork the Repository**: Start by forking the `vexy_json` repository on GitHub.
llms.txt-docs/contributing.md-2.  **Clone Your Fork**: Clone your forked repository to your local machine:
llms.txt-docs/contributing.md-    ```bash
llms.txt:docs/contributing.md:    git clone https://github.com/your-username/vexy_json.git
llms.txt:docs/contributing.md:    cd vexy_json
llms.txt-docs/contributing.md-    ```
llms.txt-docs/contributing.md-3.  **Create a New Branch**: Create a new branch for your feature or bug fix:
llms.txt-docs/contributing.md-    ```bash
--
llms.txt-docs/contributing.md-    ```bash
llms.txt-docs/contributing.md-    git push origin feature/your-feature-name
llms.txt-docs/contributing.md-    ```
llms.txt:docs/contributing.md:9.  **Create a Pull Request**: Open a pull request from your fork to the `main` branch of the `vexy_json` repository. Provide a detailed description of your changes.
llms.txt-docs/contributing.md-
llms.txt-docs/contributing.md-## Code Style and Conventions
llms.txt-docs/contributing.md-
--
llms.txt-docs/contributing.md-
llms.txt-docs/contributing.md-## Extending the Web Tool
llms.txt-docs/contributing.md-
llms.txt:docs/contributing.md:If you're looking to contribute specifically to the `vexy_json` web tool, please refer to the [Developer Guide for Extending the Web Tool](developer-guide.md) for detailed information on its structure, build process, and development considerations.
llms.txt-docs/contributing.md-
llms.txt-docs/contributing.md-## Reporting Bugs
llms.txt-docs/contributing.md-
llms.txt:docs/contributing.md:If you find a bug, please open an issue on the [GitHub Issues page](https://github.com/twardoch/vexy_json/issues). When reporting a bug, please include:
llms.txt-docs/contributing.md-
llms.txt-docs/contributing.md--   A clear and concise description of the bug.
llms.txt-docs/contributing.md--   Steps to reproduce the behavior.
--
llms.txt-docs/contributing.md-
llms.txt-docs/contributing.md-## Feature Requests
llms.txt-docs/contributing.md-
llms.txt:docs/contributing.md:Have an idea for a new feature? Open an issue on the [GitHub Issues page](https://github.com/twardoch/vexy_json/issues) to discuss it. Describe the feature, why you think it would be valuable, and any potential implementation details.
llms.txt-docs/contributing.md-
llms.txt:docs/contributing.md:Thank you for contributing to `vexy_json`!
llms.txt---
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-## Overview
llms.txt-docs/streaming-api.md-
llms.txt:docs/streaming-api.md:The vexy_json streaming parser provides an event-driven API for parsing JSON incrementally, making it suitable for:
llms.txt-docs/streaming-api.md-- Processing large JSON files without loading them entirely into memory
llms.txt-docs/streaming-api.md-- Real-time parsing of JSON data streams
llms.txt-docs/streaming-api.md-- Parsing newline-delimited JSON (NDJSON) files
--
llms.txt-docs/streaming-api.md-The main streaming parser that processes input incrementally and emits parsing events.
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-```rust
llms.txt:docs/streaming-api.md:use vexy_json::{StreamingParser, StreamingEvent};
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-let mut parser = StreamingParser::new();
llms.txt-docs/streaming-api.md-parser.feed(r#"{"key": "value"}"#)?;
--
llms.txt-docs/streaming-api.md-Utility for building Value objects from streaming events:
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-```rust
llms.txt:docs/streaming-api.md:use vexy_json::{StreamingParser, StreamingValueBuilder};
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-let mut parser = StreamingParser::new();
llms.txt-docs/streaming-api.md-let mut builder = StreamingValueBuilder::new();
--
llms.txt-docs/streaming-api.md-Parser for newline-delimited JSON where each line is a separate JSON value:
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-```rust
llms.txt:docs/streaming-api.md:use vexy_json::NdJsonParser;
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-let mut parser = NdJsonParser::new();
llms.txt-docs/streaming-api.md-let input = r#"{"id": 1, "name": "Alice"}
--
llms.txt-docs/streaming-api.md-Event-based NDJSON parser:
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-```rust
llms.txt:docs/streaming-api.md:use vexy_json::StreamingNdJsonParser;
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-let mut parser = StreamingNdJsonParser::new();
llms.txt-docs/streaming-api.md-parser.feed(r#"{"a": 1}
--
llms.txt-docs/streaming-api.md-Both streaming parsers support the same options as the regular parser:
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-```rust
llms.txt:docs/streaming-api.md:use vexy_json::{StreamingParser, ParserOptions};
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-let options = ParserOptions {
llms.txt-docs/streaming-api.md-    allow_comments: true,
--
llms.txt-docs/streaming-api.md-The streaming parser uses the same error types as the regular parser:
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-```rust
llms.txt:docs/streaming-api.md:use vexy_json::{StreamingParser, Error};
llms.txt-docs/streaming-api.md-
llms.txt-docs/streaming-api.md-let mut parser = StreamingParser::new();
llms.txt-docs/streaming-api.md-
--
llms.txt-docs/migration-guide.md-nav_order: 10
llms.txt-docs/migration-guide.md----
llms.txt-docs/migration-guide.md-
llms.txt:docs/migration-guide.md:# Migration Guide: vexy_json v2.0.0
llms.txt-docs/migration-guide.md-
llms.txt:docs/migration-guide.md:This document provides comprehensive guidance for upgrading to vexy_json v2.0.0 from previous versions.
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-## Migrating from v1.x to v2.0.0
llms.txt-docs/migration-guide.md-
--
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-**After (v2.0.0):**
llms.txt-docs/migration-guide.md-```rust
llms.txt:docs/migration-guide.md:use vexy_json::StreamingParser;
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-let mut parser = StreamingParser::new();
llms.txt-docs/migration-guide.md-let file = std::fs::File::open("huge.json")?;
--
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-**After (v2.0.0):**
llms.txt-docs/migration-guide.md-```rust
llms.txt:docs/migration-guide.md:use vexy_json::parse_parallel;
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-let results = parse_parallel(json_files); // Automatically uses multiple cores
llms.txt-docs/migration-guide.md-```
--
llms.txt-docs/migration-guide.md-   - Some error variants have been renamed for clarity
llms.txt-docs/migration-guide.md-   - Add explicit imports if you match on specific error types:
llms.txt-docs/migration-guide.md-   ```rust
llms.txt:docs/migration-guide.md:   use vexy_json::Error::{UnexpectedChar, InvalidNumber};
llms.txt-docs/migration-guide.md-   ```
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-2. **Feature Flags**
--
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-### 📦 Dependency Updates
llms.txt-docs/migration-guide.md-
llms.txt:docs/migration-guide.md:If you depend on specific versions of vexy_json's dependencies:
llms.txt-docs/migration-guide.md-- `serde`: Now requires 1.0.190+
llms.txt-docs/migration-guide.md-- `wasm-bindgen`: Updated to 0.2.90
llms.txt-docs/migration-guide.md-- New dependencies: `rayon`, `crossbeam-channel`, `simd-json`
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-### 🔧 CLI Changes
llms.txt-docs/migration-guide.md-
llms.txt:docs/migration-guide.md:The CLI has been significantly enhanced. Update scripts that use vexy_json:
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-**New capabilities:**
llms.txt-docs/migration-guide.md-```bash
llms.txt-docs/migration-guide.md-# Watch mode
llms.txt:docs/migration-guide.md:vexy_json --watch input.json -o output.json
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-# Batch processing
llms.txt:docs/migration-guide.md:vexy_json --batch ./data/ --output-dir ./processed/
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-# Pretty printing with options
llms.txt:docs/migration-guide.md:vexy_json --pretty --sort-keys --indent 4 input.json
llms.txt-docs/migration-guide.md-```
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md----
llms.txt-docs/migration-guide.md-
llms.txt:docs/migration-guide.md:# Migration Guide: vexy_json v0.2.0
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-This section covers the earlier v0.2.0 refactor for historical reference.
llms.txt-docs/migration-guide.md-
--
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-**New exports available:**
llms.txt-docs/migration-guide.md-```rust
llms.txt:docs/migration-guide.md:use vexy_json::{ParseResult, Error};
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-// New type alias for semantic clarity
llms.txt-docs/migration-guide.md-fn parse_config() -> ParseResult<Config> {
--
llms.txt-docs/migration-guide.md-```javascript
llms.txt-docs/migration-guide.md-// Enhanced error objects with more information
llms.txt-docs/migration-guide.md-try {
llms.txt:docs/migration-guide.md:    const result = vexy_json.parse_json(input);
llms.txt-docs/migration-guide.md-} catch (error) {
llms.txt-docs/migration-guide.md-    console.log(error.message);        // Error description
llms.txt-docs/migration-guide.md-    console.log(error.position);       // Character position (if available)
--
llms.txt-docs/migration-guide.md-### For Rust Users
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-```rust
llms.txt:docs/migration-guide.md:use vexy_json::{parse, ParseResult, ParserOptions};
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-// Recommended: Use the new ParseResult type for clarity
llms.txt-docs/migration-guide.md-fn parse_config_file(content: &str) -> ParseResult<Config> {
--
llms.txt-docs/migration-guide.md-```javascript
llms.txt-docs/migration-guide.md-// Enhanced error handling with structured error objects
llms.txt-docs/migration-guide.md-try {
llms.txt:docs/migration-guide.md:    const result = vexy_json.parse_json(jsonString);
llms.txt-docs/migration-guide.md-    console.log('Parsed:', result);
llms.txt-docs/migration-guide.md-} catch (error) {
llms.txt-docs/migration-guide.md-    console.error(`Parse error at position ${error.position}: ${error.message}`);
--
llms.txt-docs/migration-guide.md-If you encounter any issues during migration:
llms.txt-docs/migration-guide.md-
llms.txt-docs/migration-guide.md-1. **Check compatibility**: Ensure you're not using any undocumented internal APIs
llms.txt:docs/migration-guide.md:2. **Update imports**: Make sure you're importing from the main `vexy_json` crate
llms.txt-docs/migration-guide.md-3. **Test thoroughly**: Run your existing test suite to verify behavior
llms.txt-docs/migration-guide.md-4. **Report issues**: File bug reports with specific reproduction cases
llms.txt-docs/migration-guide.md-
llms.txt---
llms.txt:debug_test8.rs:use vexy_json::parse;
llms.txt-debug_test8.rs-
llms.txt-debug_test8.rs-fn main() {
llms.txt-debug_test8.rs-    println!("Testing: 'a:1\\nb:2'");
llms.txt---
llms.txt-tests/number_formats.rs-// this_file: tests/number_formats.rs
llms.txt-tests/number_formats.rs-
llms.txt:tests/number_formats.rs:use vexy_json::Number;
llms.txt:tests/number_formats.rs:use vexy_json::{parse, Value};
llms.txt-tests/number_formats.rs-
llms.txt-tests/number_formats.rs-/// Tests for extended number format support including hex, octal, binary, and underscore separators.
llms.txt-tests/number_formats.rs-/// These formats are commonly used in configuration files and match jsonic compatibility.
--
llms.txt-docs/features-overview.md-Vexy JSON accepts JSON that would be rejected by standard parsers:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::parse;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-// Comments are allowed
llms.txt-docs/features-overview.md-let json = r#"
--
llms.txt-docs/features-overview.md-Standardize JSON format for consistent processing:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::transform::normalize;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-let json = r#"{"z": 1, "a": 2, "b": null}"#;
llms.txt-docs/features-overview.md-let normalized = normalize(json).unwrap();
--
llms.txt-docs/features-overview.md-Improve JSON structure for performance:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::transform::optimize;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-let json = r#"{"count": 42.0, "price": 19.0}"#;
llms.txt-docs/features-overview.md-let optimized = optimize(&json).unwrap();
--
llms.txt-docs/features-overview.md-Automatically fix common JSON issues:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::repair::JsonRepairer;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-let mut repairer = JsonRepairer::new(10);
llms.txt-docs/features-overview.md-let broken = r#"{"key": "value", "missing": "quote}"#;
--
llms.txt-docs/features-overview.md-Process large JSON files efficiently:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::streaming::parse_streaming;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-for value in parse_streaming(reader)? {
llms.txt-docs/features-overview.md-    // Process each JSON value as it's parsed
--
llms.txt-docs/features-overview.md-Parse multiple JSON documents simultaneously:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::parallel::parse_parallel;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-let results = parse_parallel(&json_strings, ParallelConfig::default())?;
llms.txt-docs/features-overview.md-```
--
llms.txt-docs/features-overview.md-Full-featured Python bindings with NumPy and Pandas support:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```python
llms.txt:docs/features-overview.md:import vexy_json
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-# Standard JSON parsing
llms.txt:docs/features-overview.md:data = vexy_json.loads('{"name": "John", "age": 30}')
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-# NumPy integration
llms.txt-docs/features-overview.md-import numpy as np
llms.txt:docs/features-overview.md:array = vexy_json.loads_numpy('[1, 2, 3, 4, 5]')
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-# Pandas integration
llms.txt-docs/features-overview.md-import pandas as pd
llms.txt:docs/features-overview.md:df = vexy_json.loads_dataframe('[{"a": 1, "b": 2}, {"a": 3, "b": 4}]')
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-# Streaming support
llms.txt:docs/features-overview.md:with vexy_json.StreamingParser() as parser:
llms.txt-docs/features-overview.md-    for item in parser.parse_stream(file_handle):
llms.txt-docs/features-overview.md-        process(item)
llms.txt-docs/features-overview.md-```
--
llms.txt-docs/features-overview.md-Run Vexy JSON in browsers and JavaScript environments:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```javascript
llms.txt:docs/features-overview.md:import init, { parse } from 'vexy_json-wasm';
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-await init();
llms.txt-docs/features-overview.md-const result = parse('{"name": "John", age: 30}');
--
llms.txt-docs/features-overview.md-### Comprehensive Error Reporting
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::parse;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-match parse(invalid_json) {
llms.txt-docs/features-overview.md-    Ok(value) => println!("Parsed: {:?}", value),
--
llms.txt-docs/features-overview.md-### Automatic Recovery
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::parser::parse_with_fallback;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-// Tries multiple parsing strategies automatically
llms.txt-docs/features-overview.md-let result = parse_with_fallback(input, options);
--
llms.txt-docs/features-overview.md-### Repair with Confidence Scoring
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::repair::advanced::AdvancedJsonRepairer;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-let mut repairer = AdvancedJsonRepairer::new();
llms.txt-docs/features-overview.md-let (fixed, strategies) = repairer.repair(input)?;
--
llms.txt-docs/features-overview.md-Extend Vexy JSON with custom functionality:
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::plugin::Plugin;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-struct CustomPlugin;
llms.txt-docs/features-overview.md-
--
llms.txt-docs/features-overview.md-### Schema Validation
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::plugin::SchemaValidationPlugin;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-let plugin = SchemaValidationPlugin::new(schema);
llms.txt-docs/features-overview.md-// Validates JSON against schema during parsing
--
llms.txt-docs/features-overview.md-### Date/Time Parsing
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::plugin::DateTimePlugin;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-let plugin = DateTimePlugin::new();
llms.txt-docs/features-overview.md-// Automatically parses ISO 8601 date strings
--
llms.txt-docs/features-overview.md-### Comment Preservation
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-```rust
llms.txt:docs/features-overview.md:use vexy_json_core::plugin::CommentPreservationPlugin;
llms.txt-docs/features-overview.md-
llms.txt-docs/features-overview.md-let plugin = CommentPreservationPlugin::new();
llms.txt-docs/features-overview.md-// Preserves comments in parsed JSON
--
llms.txt-scripts/verify_features.js-
llms.txt-scripts/verify_features.js-/**
llms.txt-scripts/verify_features.js- * Verification script to test all forgiving JSON features
llms.txt:scripts/verify_features.js: * This tests the core vexy_json functionality to ensure everything works correctly
llms.txt-scripts/verify_features.js- */
llms.txt-scripts/verify_features.js-
llms.txt-scripts/verify_features.js-const { exec } = require('child_process');
--
llms.txt-scripts/verify_features.js-        name: 'Complex Mixed Features',
llms.txt-scripts/verify_features.js-        input: `{
llms.txt-scripts/verify_features.js-  // Configuration with comments
llms.txt:scripts/verify_features.js:  name: 'vexy_json',           // Unquoted key, single quotes
llms.txt-scripts/verify_features.js-  version: "1.1.0",        /* Version string */
llms.txt-scripts/verify_features.js-  features: [
llms.txt-scripts/verify_features.js-    "comments",
--
llms.txt-scripts/verify_features.js-];
llms.txt-scripts/verify_features.js-
llms.txt-scripts/verify_features.js-/**
llms.txt:scripts/verify_features.js: * Run a test case using the vexy_json binary
llms.txt-scripts/verify_features.js- */
llms.txt-scripts/verify_features.js-function runTest(testCase) {
llms.txt-scripts/verify_features.js-    return new Promise((resolve) => {
llms.txt-scripts/verify_features.js-        try {
llms.txt-scripts/verify_features.js-            // Instead of writing to file, pipe directly to the binary
llms.txt:scripts/verify_features.js:            const command = `echo '${testCase.input.replace(/'/g, "'\\''")}' | cargo run --bin vexy_json`;
llms.txt-scripts/verify_features.js-
llms.txt:scripts/verify_features.js:            // Run vexy_json with piped input
llms.txt-scripts/verify_features.js-            exec(command, (error, stdout, stderr) => {
llms.txt-scripts/verify_features.js-
llms.txt-scripts/verify_features.js-                const result = {
--
llms.txt-scripts/verify_features.js- * Run all tests and generate report
llms.txt-scripts/verify_features.js- */
llms.txt-scripts/verify_features.js-async function runAllTests() {
llms.txt:scripts/verify_features.js:    console.log('🧪 Running vexy_json Feature Verification Tests');
llms.txt-scripts/verify_features.js-    console.log('='.repeat(60));
llms.txt-scripts/verify_features.js-
llms.txt-scripts/verify_features.js-    const results = [];
--
llms.txt-docs/assets/images/flamegraph_detailed.svg-function format_percent(n) {
llms.txt-docs/assets/images/flamegraph_detailed.svg-    return n.toFixed(4) + "%";
llms.txt-docs/assets/images/flamegraph_detailed.svg-}
llms.txt:docs/assets/images/flamegraph_detailed.svg:]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="1195"><g><title>0x110953383 (1 samples, 0.08%)</title><rect x="0.0000%" y="341" width="0.0837%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>0x110953712 (1 samples, 0.08%)</title><rect x="0.0000%" y="325" width="0.0837%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>0x1109874d4 (1 samples, 0.08%)</title><rect x="0.0000%" y="309" width="0.0837%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>0x1109a4433 (1 samples, 0.08%)</title><rect x="0.0000%" y="293" width="0.0837%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>0x1109a4c89 (1 samples, 0.08%)</title><rect x="0.0000%" y="277" width="0.0837%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>0x11097a980 (1 samples, 0.08%)</title><rect x="0.0000%" y="261" width="0.0837%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>dyld4::ProcessConfig::ProcessConfig(dyld4::KernelArgs const*, dyld4::SyscallDelegate&amp;, lsl::Allocator&amp;) (1 samples, 0.08%)</title><rect x="0.0837%" y="309" width="0.0837%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.3337%" y="319.50"></text></g><g><title>dyld4::ProcessConfig::DyldCache::DyldCache(dyld4::ProcessConfig::Process&amp;, dyld4::ProcessConfig::Security const&amp;, dyld4::ProcessConfig::Logging const&amp;, dyld4::SyscallDelegate&amp;, lsl::Allocator&amp;, dyld4::ProcessConfig const&amp;) (1 samples, 0.08%)</title><rect x="0.0837%" y="293" width="0.0837%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.3337%" y="303.50"></text></g><g><title>dyld4::CacheFinder::CacheFinder(dyld4::ProcessConfig::Process const&amp;, dyld4::ProcessConfig::Logging const&amp;, dyld4::SyscallDelegate&amp;) (1 samples, 0.08%)</title><rect x="0.0837%" y="277" width="0.0837%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.3337%" y="287.50"></text></g><g><title>ignite (1 samples, 0.08%)</title><rect x="0.0837%" y="261" width="0.0837%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.3337%" y="271.50"></text></g><g><title>boot_boot (1 samples, 0.08%)</title><rect x="0.0837%" y="245" width="0.0837%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.3337%" y="255.50"></text></g><g><title>stage_fire (1 samples, 0.08%)</title><rect x="0.0837%" y="229" width="0.0837%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.3337%" y="239.50"></text></g><g><title>_graft_fetch_fire (1 samples, 0.08%)</title><rect x="0.0837%" y="213" width="0.0837%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.3337%" y="223.50"></text></g><g><title>__openat (1 samples, 0.08%)</title><rect x="0.0837%" y="197" width="0.0837%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.3337%" y="207.50"></text></g><g><title>dyld4::ExternallyViewableState::setLibSystemInitialized() (1 samples, 0.08%)</title><rect x="0.1674%" y="277" width="0.0837%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="0.4174%" y="287.50"></text></g><g><title>dyld4::ExternallyViewableState::setDyldState(unsigned char) (1 samples, 0.08%)</title><rect x="0.1674%" y="261" width="0.0837%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.4174%" y="271.50"></text></g><g><title>lsl::Allocator::~Allocator() (1 samples, 0.08%)</title><rect x="0.1674%" y="245" width="0.0837%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.4174%" y="255.50"></text></g><g><title>mach_vm_deallocate (1 samples, 0.08%)</title><rect x="0.1674%" y="229" width="0.0837%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.4174%" y="239.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.08%)</title><rect x="0.1674%" y="213" width="0.0837%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.4174%" y="223.50"></text></g><g><title>__libkernel_init (1 samples, 0.08%)</title><rect x="0.2510%" y="133" width="0.0837%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="0.5010%" y="143.50"></text></g><g><title>mach_init_doit (1 samples, 0.08%)</title><rect x="0.2510%" y="117" width="0.0837%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="0.5010%" y="127.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (3 samples, 0.25%)</title><rect x="0.1674%" y="293" width="0.2510%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="3"/><text x="0.4174%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (2 samples, 0.17%)</title><rect x="0.2510%" y="277" width="0.1674%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="2"/><text x="0.5010%" y="287.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (2 samples, 0.17%)</title><rect x="0.2510%" y="261" width="0.1674%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="2"/><text x="0.5010%" y="271.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (2 samples, 0.17%)</title><rect x="0.2510%" y="245" width="0.1674%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="2"/><text x="0.5010%" y="255.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (2 samples, 0.17%)</title><rect x="0.2510%" y="229" width="0.1674%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="2"/><text x="0.5010%" y="239.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (2 samples, 0.17%)</title><rect x="0.2510%" y="213" width="0.1674%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="2"/><text x="0.5010%" y="223.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (2 samples, 0.17%)</title><rect x="0.2510%" y="197" width="0.1674%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="2"/><text x="0.5010%" y="207.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (2 samples, 0.17%)</title><rect x="0.2510%" y="181" width="0.1674%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="2"/><text x="0.5010%" y="191.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (2 samples, 0.17%)</title><rect x="0.2510%" y="165" width="0.1674%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="2"/><text x="0.5010%" y="175.50"></text></g><g><title>libSystem_initializer (2 samples, 0.17%)</title><rect x="0.2510%" y="149" width="0.1674%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="2"/><text x="0.5010%" y="159.50"></text></g><g><title>libdispatch_init (1 samples, 0.08%)</title><rect x="0.3347%" y="133" width="0.0837%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="1"/><text x="0.5847%" y="143.50"></text></g><g><title>_os_object_init (1 samples, 0.08%)</title><rect x="0.3347%" y="117" width="0.0837%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="1"/><text x="0.5847%" y="127.50"></text></g><g><title>DYLD-STUB$$std::set_terminate(void (*)()) (1 samples, 0.08%)</title><rect x="0.3347%" y="101" width="0.0837%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="1"/><text x="0.5847%" y="111.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (1 samples, 0.08%)</title><rect x="0.4184%" y="293" width="0.0837%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="0.6684%" y="303.50"></text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="277" width="0.0837%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="1"/><text x="0.6684%" y="287.50"></text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="261" width="0.0837%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="1"/><text x="0.6684%" y="271.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="245" width="0.0837%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="1"/><text x="0.6684%" y="255.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="229" width="0.0837%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="1"/><text x="0.6684%" y="239.50"></text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="213" width="0.0837%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="1"/><text x="0.6684%" y="223.50"></text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="197" width="0.0837%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="1"/><text x="0.6684%" y="207.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="181" width="0.0837%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="1"/><text x="0.6684%" y="191.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="165" width="0.0837%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1"/><text x="0.6684%" y="175.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 0.08%)</title><rect x="0.4184%" y="149" width="0.0837%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1"/><text x="0.6684%" y="159.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.08%)</title><rect x="0.4184%" y="133" width="0.0837%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1"/><text x="0.6684%" y="143.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.08%)</title><rect x="0.4184%" y="117" width="0.0837%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1"/><text x="0.6684%" y="127.50"></text></g><g><title>dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&amp;, unsigned int, mach_o::LinkedDylibAttributes*) const (1 samples, 0.08%)</title><rect x="0.4184%" y="101" width="0.0837%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="1"/><text x="0.6684%" y="111.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (6 samples, 0.50%)</title><rect x="0.0837%" y="325" width="0.5021%" height="15" fill="rgb(250,191,14)" fg:x="1" fg:w="6"/><text x="0.3337%" y="335.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (5 samples, 0.42%)</title><rect x="0.1674%" y="309" width="0.4184%" height="15" fill="rgb(239,60,40)" fg:x="2" fg:w="5"/><text x="0.4174%" y="319.50"></text></g><g><title>dyld4::RuntimeState::partitionDelayLoads(std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt;, std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt;, lsl::Vector&lt;dyld4::Loader const*&gt;*) (1 samples, 0.08%)</title><rect x="0.5021%" y="293" width="0.0837%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="1"/><text x="0.7521%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::isDelayInit(dyld4::RuntimeState&amp;) const (1 samples, 0.08%)</title><rect x="0.5021%" y="277" width="0.0837%" height="15" fill="rgb(225,35,8)" fg:x="6" fg:w="1"/><text x="0.7521%" y="287.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="0.5858%" y="245" width="0.0837%" height="15" fill="rgb(250,213,24)" fg:x="7" fg:w="1"/><text x="0.8358%" y="255.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.08%)</title><rect x="0.6695%" y="229" width="0.0837%" height="15" fill="rgb(247,123,22)" fg:x="8" fg:w="1"/><text x="0.9195%" y="239.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="0.7531%" y="229" width="0.0837%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="1"/><text x="1.0031%" y="239.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="1.5063%" y="197" width="0.0837%" height="15" fill="rgb(231,145,46)" fg:x="18" fg:w="1"/><text x="1.7563%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 1.00%)</title><rect x="0.6695%" y="245" width="1.0042%" height="15" fill="rgb(251,118,11)" fg:x="8" fg:w="12"/><text x="0.9195%" y="255.50"></text></g><g><title>free_tiny (10 samples, 0.84%)</title><rect x="0.8368%" y="229" width="0.8368%" height="15" fill="rgb(217,147,25)" fg:x="10" fg:w="10"/><text x="1.0868%" y="239.50"></text></g><g><title>tiny_free_no_lock (7 samples, 0.59%)</title><rect x="1.0879%" y="213" width="0.5858%" height="15" fill="rgb(247,81,37)" fg:x="13" fg:w="7"/><text x="1.3379%" y="223.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="1.5900%" y="197" width="0.0837%" height="15" fill="rgb(209,12,38)" fg:x="19" fg:w="1"/><text x="1.8400%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.08%)</title><rect x="1.6736%" y="245" width="0.0837%" height="15" fill="rgb(227,1,9)" fg:x="20" fg:w="1"/><text x="1.9236%" y="255.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.08%)</title><rect x="1.7573%" y="229" width="0.0837%" height="15" fill="rgb(248,47,43)" fg:x="21" fg:w="1"/><text x="2.0073%" y="239.50"></text></g><g><title>_free (1 samples, 0.08%)</title><rect x="1.8410%" y="229" width="0.0837%" height="15" fill="rgb(221,10,30)" fg:x="22" fg:w="1"/><text x="2.0910%" y="239.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="1.9247%" y="229" width="0.1674%" height="15" fill="rgb(210,229,1)" fg:x="23" fg:w="2"/><text x="2.1747%" y="239.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="2.0921%" y="213" width="0.1674%" height="15" fill="rgb(222,148,37)" fg:x="25" fg:w="2"/><text x="2.3421%" y="223.50"></text></g><g><title>tiny_free_list_add_ptr (3 samples, 0.25%)</title><rect x="3.1799%" y="181" width="0.2510%" height="15" fill="rgb(234,67,33)" fg:x="38" fg:w="3"/><text x="3.4299%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 1.51%)</title><rect x="2.0921%" y="229" width="1.5063%" height="15" fill="rgb(247,98,35)" fg:x="25" fg:w="18"/><text x="2.3421%" y="239.50"></text></g><g><title>free_tiny (16 samples, 1.34%)</title><rect x="2.2594%" y="213" width="1.3389%" height="15" fill="rgb(247,138,52)" fg:x="27" fg:w="16"/><text x="2.5094%" y="223.50"></text></g><g><title>tiny_free_no_lock (11 samples, 0.92%)</title><rect x="2.6778%" y="197" width="0.9205%" height="15" fill="rgb(213,79,30)" fg:x="32" fg:w="11"/><text x="2.9278%" y="207.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="3.4310%" y="181" width="0.1674%" height="15" fill="rgb(246,177,23)" fg:x="41" fg:w="2"/><text x="3.6810%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (2 samples, 0.17%)</title><rect x="3.5983%" y="229" width="0.1674%" height="15" fill="rgb(230,62,27)" fg:x="43" fg:w="2"/><text x="3.8483%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.08%)</title><rect x="3.7657%" y="229" width="0.0837%" height="15" fill="rgb(216,154,8)" fg:x="45" fg:w="1"/><text x="4.0157%" y="239.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::checked_add (1 samples, 0.08%)</title><rect x="3.8494%" y="229" width="0.0837%" height="15" fill="rgb(244,35,45)" fg:x="46" fg:w="1"/><text x="4.0994%" y="239.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.08%)</title><rect x="3.9331%" y="213" width="0.0837%" height="15" fill="rgb(251,115,12)" fg:x="47" fg:w="1"/><text x="4.1831%" y="223.50"></text></g><g><title>__rustc::__rdl_dealloc (2 samples, 0.17%)</title><rect x="4.0167%" y="213" width="0.1674%" height="15" fill="rgb(240,54,50)" fg:x="48" fg:w="2"/><text x="4.2667%" y="223.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="4.1841%" y="213" width="0.0837%" height="15" fill="rgb(233,84,52)" fg:x="50" fg:w="1"/><text x="4.4341%" y="223.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="4.2678%" y="197" width="0.0837%" height="15" fill="rgb(207,117,47)" fg:x="51" fg:w="1"/><text x="4.5178%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="5.1046%" y="181" width="0.0837%" height="15" fill="rgb(249,43,39)" fg:x="61" fg:w="1"/><text x="5.3546%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="5.4393%" y="165" width="0.1674%" height="15" fill="rgb(209,38,44)" fg:x="65" fg:w="2"/><text x="5.6893%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 1.42%)</title><rect x="4.2678%" y="213" width="1.4226%" height="15" fill="rgb(236,212,23)" fg:x="51" fg:w="17"/><text x="4.5178%" y="223.50"></text></g><g><title>free_tiny (16 samples, 1.34%)</title><rect x="4.3515%" y="197" width="1.3389%" height="15" fill="rgb(242,79,21)" fg:x="52" fg:w="16"/><text x="4.6015%" y="207.50"></text></g><g><title>tiny_free_no_lock (6 samples, 0.50%)</title><rect x="5.1883%" y="181" width="0.5021%" height="15" fill="rgb(211,96,35)" fg:x="62" fg:w="6"/><text x="5.4383%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="5.6067%" y="165" width="0.0837%" height="15" fill="rgb(253,215,40)" fg:x="67" fg:w="1"/><text x="5.8567%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.08%)</title><rect x="5.6904%" y="213" width="0.0837%" height="15" fill="rgb(211,81,21)" fg:x="68" fg:w="1"/><text x="5.9404%" y="223.50"></text></g><g><title>_free (1 samples, 0.08%)</title><rect x="5.7741%" y="197" width="0.0837%" height="15" fill="rgb(208,190,38)" fg:x="69" fg:w="1"/><text x="6.0241%" y="207.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="5.8577%" y="197" width="0.0837%" height="15" fill="rgb(235,213,38)" fg:x="70" fg:w="1"/><text x="6.1077%" y="207.50"></text></g><g><title>free_tiny (6 samples, 0.50%)</title><rect x="5.9414%" y="181" width="0.5021%" height="15" fill="rgb(237,122,38)" fg:x="71" fg:w="6"/><text x="6.1914%" y="191.50"></text></g><g><title>tiny_free_no_lock (3 samples, 0.25%)</title><rect x="6.1925%" y="165" width="0.2510%" height="15" fill="rgb(244,218,35)" fg:x="74" fg:w="3"/><text x="6.4425%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="6.3598%" y="149" width="0.0837%" height="15" fill="rgb(240,68,47)" fg:x="76" fg:w="1"/><text x="6.6098%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.59%)</title><rect x="5.9414%" y="197" width="0.5858%" height="15" fill="rgb(210,16,53)" fg:x="71" fg:w="7"/><text x="6.1914%" y="207.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="6.4435%" y="181" width="0.0837%" height="15" fill="rgb(235,124,12)" fg:x="77" fg:w="1"/><text x="6.6935%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.08%)</title><rect x="6.5272%" y="197" width="0.0837%" height="15" fill="rgb(224,169,11)" fg:x="78" fg:w="1"/><text x="6.7772%" y="207.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="6.6946%" y="181" width="0.0837%" height="15" fill="rgb(250,166,2)" fg:x="80" fg:w="1"/><text x="6.9446%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.7782%" y="181" width="0.0837%" height="15" fill="rgb(242,216,29)" fg:x="81" fg:w="1"/><text x="7.0282%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (15 samples, 1.26%)</title><rect x="6.6109%" y="197" width="1.2552%" height="15" fill="rgb(230,116,27)" fg:x="79" fg:w="15"/><text x="6.8609%" y="207.50"></text></g><g><title>free_tiny (12 samples, 1.00%)</title><rect x="6.8619%" y="181" width="1.0042%" height="15" fill="rgb(228,99,48)" fg:x="82" fg:w="12"/><text x="7.1119%" y="191.50"></text></g><g><title>tiny_free_no_lock (5 samples, 0.42%)</title><rect x="7.4477%" y="165" width="0.4184%" height="15" fill="rgb(253,11,6)" fg:x="89" fg:w="5"/><text x="7.6977%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="7.6987%" y="149" width="0.1674%" height="15" fill="rgb(247,143,39)" fg:x="92" fg:w="2"/><text x="7.9487%" y="159.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="8.5356%" y="181" width="0.1674%" height="15" fill="rgb(236,97,10)" fg:x="102" fg:w="2"/><text x="8.7856%" y="191.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="8.7029%" y="181" width="0.0837%" height="15" fill="rgb(233,208,19)" fg:x="104" fg:w="1"/><text x="8.9529%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (3 samples, 0.25%)</title><rect x="9.0377%" y="165" width="0.2510%" height="15" fill="rgb(216,164,2)" fg:x="108" fg:w="3"/><text x="9.2877%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (43 samples, 3.60%)</title><rect x="5.7741%" y="213" width="3.5983%" height="15" fill="rgb(220,129,5)" fg:x="69" fg:w="43"/><text x="6.0241%" y="223.50">core..</text></g><g><title>free_tiny (18 samples, 1.51%)</title><rect x="7.8661%" y="197" width="1.5063%" height="15" fill="rgb(242,17,10)" fg:x="94" fg:w="18"/><text x="8.1161%" y="207.50"></text></g><g><title>tiny_free_no_lock (7 samples, 0.59%)</title><rect x="8.7866%" y="181" width="0.5858%" height="15" fill="rgb(242,107,0)" fg:x="105" fg:w="7"/><text x="9.0366%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="9.2887%" y="165" width="0.0837%" height="15" fill="rgb(251,28,31)" fg:x="111" fg:w="1"/><text x="9.5387%" y="175.50"></text></g><g><title>_free (2 samples, 0.17%)</title><rect x="9.3724%" y="197" width="0.1674%" height="15" fill="rgb(233,223,10)" fg:x="112" fg:w="2"/><text x="9.6224%" y="207.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.08%)</title><rect x="9.5397%" y="181" width="0.0837%" height="15" fill="rgb(215,21,27)" fg:x="114" fg:w="1"/><text x="9.7897%" y="191.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="9.6234%" y="181" width="0.1674%" height="15" fill="rgb(232,23,21)" fg:x="115" fg:w="2"/><text x="9.8734%" y="191.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="10.3766%" y="165" width="0.0837%" height="15" fill="rgb(244,5,23)" fg:x="124" fg:w="1"/><text x="10.6266%" y="175.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="10.4603%" y="165" width="0.0837%" height="15" fill="rgb(226,81,46)" fg:x="125" fg:w="1"/><text x="10.7103%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.33%)</title><rect x="11.8828%" y="149" width="0.3347%" height="15" fill="rgb(247,70,30)" fg:x="142" fg:w="4"/><text x="12.1328%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (37 samples, 3.10%)</title><rect x="9.5397%" y="197" width="3.0962%" height="15" fill="rgb(212,68,19)" fg:x="114" fg:w="37"/><text x="9.7897%" y="207.50">all..</text></g><g><title>free_tiny (34 samples, 2.85%)</title><rect x="9.7908%" y="181" width="2.8452%" height="15" fill="rgb(240,187,13)" fg:x="117" fg:w="34"/><text x="10.0408%" y="191.50">fr..</text></g><g><title>tiny_free_no_lock (25 samples, 2.09%)</title><rect x="10.5439%" y="165" width="2.0921%" height="15" fill="rgb(223,113,26)" fg:x="126" fg:w="25"/><text x="10.7939%" y="175.50">t..</text></g><g><title>tiny_free_list_remove_ptr (5 samples, 0.42%)</title><rect x="12.2176%" y="149" width="0.4184%" height="15" fill="rgb(206,192,2)" fg:x="146" fg:w="5"/><text x="12.4676%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (3 samples, 0.25%)</title><rect x="12.6360%" y="197" width="0.2510%" height="15" fill="rgb(241,108,4)" fg:x="151" fg:w="3"/><text x="12.8860%" y="207.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::overflowing_mul (1 samples, 0.08%)</title><rect x="12.8870%" y="197" width="0.0837%" height="15" fill="rgb(247,173,49)" fg:x="154" fg:w="1"/><text x="13.1370%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (3 samples, 0.25%)</title><rect x="12.9707%" y="181" width="0.2510%" height="15" fill="rgb(224,114,35)" fg:x="155" fg:w="3"/><text x="13.2207%" y="191.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="13.7238%" y="165" width="0.0837%" height="15" fill="rgb(245,159,27)" fg:x="164" fg:w="1"/><text x="13.9738%" y="175.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="13.8075%" y="165" width="0.0837%" height="15" fill="rgb(245,172,44)" fg:x="165" fg:w="1"/><text x="14.0575%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="13.8912%" y="165" width="0.0837%" height="15" fill="rgb(236,23,11)" fg:x="166" fg:w="1"/><text x="14.1412%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="14.3096%" y="149" width="0.1674%" height="15" fill="rgb(205,117,38)" fg:x="171" fg:w="2"/><text x="14.5596%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (20 samples, 1.67%)</title><rect x="12.9707%" y="197" width="1.6736%" height="15" fill="rgb(237,72,25)" fg:x="155" fg:w="20"/><text x="13.2207%" y="207.50"></text></g><g><title>free_tiny (17 samples, 1.42%)</title><rect x="13.2218%" y="181" width="1.4226%" height="15" fill="rgb(244,70,9)" fg:x="158" fg:w="17"/><text x="13.4718%" y="191.50"></text></g><g><title>tiny_free_no_lock (8 samples, 0.67%)</title><rect x="13.9749%" y="165" width="0.6695%" height="15" fill="rgb(217,125,39)" fg:x="167" fg:w="8"/><text x="14.2249%" y="175.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="14.4770%" y="149" width="0.1674%" height="15" fill="rgb(235,36,10)" fg:x="173" fg:w="2"/><text x="14.7270%" y="159.50"></text></g><g><title>free (1 samples, 0.08%)</title><rect x="14.6444%" y="197" width="0.0837%" height="15" fill="rgb(251,123,47)" fg:x="175" fg:w="1"/><text x="14.8944%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="15.0628%" y="181" width="0.0837%" height="15" fill="rgb(221,13,13)" fg:x="180" fg:w="1"/><text x="15.3128%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.33%)</title><rect x="15.7322%" y="165" width="0.3347%" height="15" fill="rgb(238,131,9)" fg:x="188" fg:w="4"/><text x="15.9822%" y="175.50"></text></g><g><title>free_tiny (19 samples, 1.59%)</title><rect x="14.7280%" y="197" width="1.5900%" height="15" fill="rgb(211,50,8)" fg:x="176" fg:w="19"/><text x="14.9780%" y="207.50"></text></g><g><title>tiny_free_no_lock (14 samples, 1.17%)</title><rect x="15.1464%" y="181" width="1.1715%" height="15" fill="rgb(245,182,24)" fg:x="181" fg:w="14"/><text x="15.3964%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.25%)</title><rect x="16.0669%" y="165" width="0.2510%" height="15" fill="rgb(242,14,37)" fg:x="192" fg:w="3"/><text x="16.3169%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (84 samples, 7.03%)</title><rect x="9.3724%" y="213" width="7.0293%" height="15" fill="rgb(246,228,12)" fg:x="112" fg:w="84"/><text x="9.6224%" y="223.50">core::ptr..</text></g><g><title>szone_try_free_default (1 samples, 0.08%)</title><rect x="16.3180%" y="197" width="0.0837%" height="15" fill="rgb(213,55,15)" fg:x="195" fg:w="1"/><text x="16.5680%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (158 samples, 13.22%)</title><rect x="3.9331%" y="229" width="13.2218%" height="15" fill="rgb(209,9,3)" fg:x="47" fg:w="158"/><text x="4.1831%" y="239.50">core::ptr::drop_in_p..</text></g><g><title>free_tiny (9 samples, 0.75%)</title><rect x="16.4017%" y="213" width="0.7531%" height="15" fill="rgb(230,59,30)" fg:x="196" fg:w="9"/><text x="16.6517%" y="223.50"></text></g><g><title>tiny_free_no_lock (6 samples, 0.50%)</title><rect x="16.6527%" y="197" width="0.5021%" height="15" fill="rgb(209,121,21)" fg:x="199" fg:w="6"/><text x="16.9027%" y="207.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="16.9874%" y="181" width="0.1674%" height="15" fill="rgb(220,109,13)" fg:x="203" fg:w="2"/><text x="17.2374%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (3 samples, 0.25%)</title><rect x="17.1548%" y="229" width="0.2510%" height="15" fill="rgb(232,18,1)" fg:x="205" fg:w="3"/><text x="17.4048%" y="239.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="17.2385%" y="213" width="0.1674%" height="15" fill="rgb(215,41,42)" fg:x="206" fg:w="2"/><text x="17.4885%" y="223.50"></text></g><g><title>tiny_free_no_lock (2 samples, 0.17%)</title><rect x="17.2385%" y="197" width="0.1674%" height="15" fill="rgb(224,123,36)" fg:x="206" fg:w="2"/><text x="17.4885%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="17.5732%" y="213" width="0.1674%" height="15" fill="rgb(240,125,3)" fg:x="210" fg:w="2"/><text x="17.8232%" y="223.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="17.7406%" y="213" width="0.0837%" height="15" fill="rgb(205,98,50)" fg:x="212" fg:w="1"/><text x="17.9906%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (197 samples, 16.49%)</title><rect x="1.7573%" y="245" width="16.4854%" height="15" fill="rgb(205,185,37)" fg:x="21" fg:w="197"/><text x="2.0073%" y="255.50">core::ptr::drop_in_place&lt;..</text></g><g><title>free_tiny (10 samples, 0.84%)</title><rect x="17.4059%" y="229" width="0.8368%" height="15" fill="rgb(238,207,15)" fg:x="208" fg:w="10"/><text x="17.6559%" y="239.50"></text></g><g><title>tiny_free_no_lock (5 samples, 0.42%)</title><rect x="17.8243%" y="213" width="0.4184%" height="15" fill="rgb(213,199,42)" fg:x="213" fg:w="5"/><text x="18.0743%" y="223.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="18.1590%" y="197" width="0.0837%" height="15" fill="rgb(235,201,11)" fg:x="217" fg:w="1"/><text x="18.4090%" y="207.50"></text></g><g><title>_free (1 samples, 0.08%)</title><rect x="18.2427%" y="229" width="0.0837%" height="15" fill="rgb(207,46,11)" fg:x="218" fg:w="1"/><text x="18.4927%" y="239.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="18.3264%" y="213" width="0.0837%" height="15" fill="rgb(241,35,35)" fg:x="219" fg:w="1"/><text x="18.5764%" y="223.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="18.9958%" y="197" width="0.0837%" height="15" fill="rgb(243,32,47)" fg:x="227" fg:w="1"/><text x="19.2458%" y="207.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="19.0795%" y="197" width="0.0837%" height="15" fill="rgb(247,202,23)" fg:x="228" fg:w="1"/><text x="19.3295%" y="207.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="19.7490%" y="181" width="0.1674%" height="15" fill="rgb(219,102,11)" fg:x="236" fg:w="2"/><text x="19.9990%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 1.76%)</title><rect x="18.3264%" y="229" width="1.7573%" height="15" fill="rgb(243,110,44)" fg:x="219" fg:w="21"/><text x="18.5764%" y="239.50"></text></g><g><title>free_tiny (20 samples, 1.67%)</title><rect x="18.4100%" y="213" width="1.6736%" height="15" fill="rgb(222,74,54)" fg:x="220" fg:w="20"/><text x="18.6600%" y="223.50"></text></g><g><title>tiny_free_no_lock (11 samples, 0.92%)</title><rect x="19.1632%" y="197" width="0.9205%" height="15" fill="rgb(216,99,12)" fg:x="229" fg:w="11"/><text x="19.4132%" y="207.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="19.9163%" y="181" width="0.1674%" height="15" fill="rgb(226,22,26)" fg:x="238" fg:w="2"/><text x="20.1663%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.08%)</title><rect x="20.0837%" y="229" width="0.0837%" height="15" fill="rgb(217,163,10)" fg:x="240" fg:w="1"/><text x="20.3337%" y="239.50"></text></g><g><title>_free (2 samples, 0.17%)</title><rect x="20.1674%" y="213" width="0.1674%" height="15" fill="rgb(213,25,53)" fg:x="241" fg:w="2"/><text x="20.4174%" y="223.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="20.3347%" y="213" width="0.0837%" height="15" fill="rgb(252,105,26)" fg:x="243" fg:w="1"/><text x="20.5847%" y="223.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="20.8368%" y="181" width="0.0837%" height="15" fill="rgb(220,39,43)" fg:x="249" fg:w="1"/><text x="21.0868%" y="191.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="20.9205%" y="181" width="0.0837%" height="15" fill="rgb(229,68,48)" fg:x="250" fg:w="1"/><text x="21.1705%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="21.6736%" y="165" width="0.0837%" height="15" fill="rgb(252,8,32)" fg:x="259" fg:w="1"/><text x="21.9236%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 1.67%)</title><rect x="20.4184%" y="213" width="1.6736%" height="15" fill="rgb(223,20,43)" fg:x="244" fg:w="20"/><text x="20.6684%" y="223.50"></text></g><g><title>free_tiny (20 samples, 1.67%)</title><rect x="20.4184%" y="197" width="1.6736%" height="15" fill="rgb(229,81,49)" fg:x="244" fg:w="20"/><text x="20.6684%" y="207.50"></text></g><g><title>tiny_free_no_lock (13 samples, 1.09%)</title><rect x="21.0042%" y="181" width="1.0879%" height="15" fill="rgb(236,28,36)" fg:x="251" fg:w="13"/><text x="21.2542%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (4 samples, 0.33%)</title><rect x="21.7573%" y="165" width="0.3347%" height="15" fill="rgb(249,185,26)" fg:x="260" fg:w="4"/><text x="22.0073%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.08%)</title><rect x="22.0921%" y="213" width="0.0837%" height="15" fill="rgb(249,174,33)" fg:x="264" fg:w="1"/><text x="22.3421%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.08%)</title><rect x="22.1757%" y="213" width="0.0837%" height="15" fill="rgb(233,201,37)" fg:x="265" fg:w="1"/><text x="22.4257%" y="223.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="22.2594%" y="197" width="0.1674%" height="15" fill="rgb(221,78,26)" fg:x="266" fg:w="2"/><text x="22.5094%" y="207.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.08%)</title><rect x="22.4268%" y="181" width="0.0837%" height="15" fill="rgb(250,127,30)" fg:x="268" fg:w="1"/><text x="22.6768%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="23.1799%" y="149" width="0.1674%" height="15" fill="rgb(230,49,44)" fg:x="277" fg:w="2"/><text x="23.4299%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (12 samples, 1.00%)</title><rect x="22.4268%" y="197" width="1.0042%" height="15" fill="rgb(229,67,23)" fg:x="268" fg:w="12"/><text x="22.6768%" y="207.50"></text></g><g><title>free_tiny (11 samples, 0.92%)</title><rect x="22.5105%" y="181" width="0.9205%" height="15" fill="rgb(249,83,47)" fg:x="269" fg:w="11"/><text x="22.7605%" y="191.50"></text></g><g><title>tiny_free_no_lock (8 samples, 0.67%)</title><rect x="22.7615%" y="165" width="0.6695%" height="15" fill="rgb(215,43,3)" fg:x="272" fg:w="8"/><text x="23.0115%" y="175.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="23.3473%" y="149" width="0.0837%" height="15" fill="rgb(238,154,13)" fg:x="279" fg:w="1"/><text x="23.5973%" y="159.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (3 samples, 0.25%)</title><rect x="23.7657%" y="181" width="0.2510%" height="15" fill="rgb(219,56,2)" fg:x="284" fg:w="3"/><text x="24.0157%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (3 samples, 0.25%)</title><rect x="24.5188%" y="165" width="0.2510%" height="15" fill="rgb(233,0,4)" fg:x="293" fg:w="3"/><text x="24.7688%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (32 samples, 2.68%)</title><rect x="22.2594%" y="213" width="2.6778%" height="15" fill="rgb(235,30,7)" fg:x="266" fg:w="32"/><text x="22.5094%" y="223.50">co..</text></g><g><title>free_tiny (18 samples, 1.51%)</title><rect x="23.4310%" y="197" width="1.5063%" height="15" fill="rgb(250,79,13)" fg:x="280" fg:w="18"/><text x="23.6810%" y="207.50"></text></g><g><title>tiny_free_no_lock (11 samples, 0.92%)</title><rect x="24.0167%" y="181" width="0.9205%" height="15" fill="rgb(211,146,34)" fg:x="287" fg:w="11"/><text x="24.2667%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="24.7699%" y="165" width="0.1674%" height="15" fill="rgb(228,22,38)" fg:x="296" fg:w="2"/><text x="25.0199%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (1 samples, 0.08%)</title><rect x="24.9372%" y="213" width="0.0837%" height="15" fill="rgb(235,168,5)" fg:x="298" fg:w="1"/><text x="25.1872%" y="223.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="25.6067%" y="197" width="0.0837%" height="15" fill="rgb(221,155,16)" fg:x="306" fg:w="1"/><text x="25.8567%" y="207.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="25.6904%" y="197" width="0.0837%" height="15" fill="rgb(215,215,53)" fg:x="307" fg:w="1"/><text x="25.9404%" y="207.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="25.7741%" y="197" width="0.0837%" height="15" fill="rgb(223,4,10)" fg:x="308" fg:w="1"/><text x="26.0241%" y="207.50"></text></g><g><title>free_tiny (20 samples, 1.67%)</title><rect x="25.0209%" y="213" width="1.6736%" height="15" fill="rgb(234,103,6)" fg:x="299" fg:w="20"/><text x="25.2709%" y="223.50"></text></g><g><title>tiny_free_no_lock (10 samples, 0.84%)</title><rect x="25.8577%" y="197" width="0.8368%" height="15" fill="rgb(227,97,0)" fg:x="309" fg:w="10"/><text x="26.1077%" y="207.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.33%)</title><rect x="26.3598%" y="181" width="0.3347%" height="15" fill="rgb(234,150,53)" fg:x="315" fg:w="4"/><text x="26.6098%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (79 samples, 6.61%)</title><rect x="20.1674%" y="229" width="6.6109%" height="15" fill="rgb(228,201,54)" fg:x="241" fg:w="79"/><text x="20.4174%" y="239.50">core::ptr..</text></g><g><title>szone_try_free_default (1 samples, 0.08%)</title><rect x="26.6946%" y="213" width="0.0837%" height="15" fill="rgb(222,22,37)" fg:x="319" fg:w="1"/><text x="26.9446%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;[vexy_json_core::ast::value::Value]&gt; (108 samples, 9.04%)</title><rect x="18.2427%" y="245" width="9.0377%" height="15" fill="rgb(237,53,32)" fg:x="218" fg:w="108"/><text x="18.4927%" y="255.50">core::ptr::dr..</text></g><g><title>free_tiny (6 samples, 0.50%)</title><rect x="26.7782%" y="229" width="0.5021%" height="15" fill="rgb(233,25,53)" fg:x="320" fg:w="6"/><text x="27.0282%" y="239.50"></text></g><g><title>tiny_free_no_lock (3 samples, 0.25%)</title><rect x="27.0293%" y="213" width="0.2510%" height="15" fill="rgb(210,40,34)" fg:x="323" fg:w="3"/><text x="27.2793%" y="223.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="27.1967%" y="197" width="0.0837%" height="15" fill="rgb(241,220,44)" fg:x="325" fg:w="1"/><text x="27.4467%" y="207.50"></text></g><g><title>free_small (2 samples, 0.17%)</title><rect x="27.2803%" y="245" width="0.1674%" height="15" fill="rgb(235,28,35)" fg:x="326" fg:w="2"/><text x="27.5303%" y="255.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (1 samples, 0.08%)</title><rect x="27.3640%" y="229" width="0.0837%" height="15" fill="rgb(210,56,17)" fg:x="327" fg:w="1"/><text x="27.6140%" y="239.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="27.4477%" y="245" width="0.1674%" height="15" fill="rgb(224,130,29)" fg:x="328" fg:w="2"/><text x="27.6977%" y="255.50"></text></g><g><title>tiny_free_no_lock (2 samples, 0.17%)</title><rect x="27.4477%" y="229" width="0.1674%" height="15" fill="rgb(235,212,8)" fg:x="328" fg:w="2"/><text x="27.6977%" y="239.50"></text></g><g><title>_tlv_get_addr (1 samples, 0.08%)</title><rect x="27.6151%" y="213" width="0.0837%" height="15" fill="rgb(223,33,50)" fg:x="330" fg:w="1"/><text x="27.8651%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.17%)</title><rect x="27.8661%" y="197" width="0.1674%" height="15" fill="rgb(219,149,13)" fg:x="333" fg:w="2"/><text x="28.1161%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.17%)</title><rect x="27.8661%" y="181" width="0.1674%" height="15" fill="rgb(250,156,29)" fg:x="333" fg:w="2"/><text x="28.1161%" y="191.50"></text></g><g><title>_realloc (2 samples, 0.17%)</title><rect x="27.8661%" y="165" width="0.1674%" height="15" fill="rgb(216,193,19)" fg:x="333" fg:w="2"/><text x="28.1161%" y="175.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.17%)</title><rect x="27.8661%" y="149" width="0.1674%" height="15" fill="rgb(216,135,14)" fg:x="333" fg:w="2"/><text x="28.1161%" y="159.50"></text></g><g><title>szone_realloc (2 samples, 0.17%)</title><rect x="27.8661%" y="133" width="0.1674%" height="15" fill="rgb(241,47,5)" fg:x="333" fg:w="2"/><text x="28.1161%" y="143.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="27.8661%" y="117" width="0.1674%" height="15" fill="rgb(233,42,35)" fg:x="333" fg:w="2"/><text x="28.1161%" y="127.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="27.9498%" y="101" width="0.0837%" height="15" fill="rgb(231,13,6)" fg:x="334" fg:w="1"/><text x="28.1998%" y="111.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="27.9498%" y="85" width="0.0837%" height="15" fill="rgb(207,181,40)" fg:x="334" fg:w="1"/><text x="28.1998%" y="95.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="28.0335%" y="197" width="0.2510%" height="15" fill="rgb(254,173,49)" fg:x="335" fg:w="3"/><text x="28.2835%" y="207.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.17%)</title><rect x="28.1172%" y="181" width="0.1674%" height="15" fill="rgb(221,1,38)" fg:x="336" fg:w="2"/><text x="28.3672%" y="191.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="28.6192%" y="181" width="0.0837%" height="15" fill="rgb(206,124,46)" fg:x="342" fg:w="1"/><text x="28.8692%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.08%)</title><rect x="28.6192%" y="165" width="0.0837%" height="15" fill="rgb(249,21,11)" fg:x="342" fg:w="1"/><text x="28.8692%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.33%)</title><rect x="29.4561%" y="165" width="0.3347%" height="15" fill="rgb(222,201,40)" fg:x="352" fg:w="4"/><text x="29.7061%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.17%)</title><rect x="29.6234%" y="149" width="0.1674%" height="15" fill="rgb(235,61,29)" fg:x="354" fg:w="2"/><text x="29.8734%" y="159.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="30.2092%" y="149" width="0.0837%" height="15" fill="rgb(219,207,3)" fg:x="361" fg:w="1"/><text x="30.4592%" y="159.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="30.2929%" y="149" width="0.0837%" height="15" fill="rgb(222,56,46)" fg:x="362" fg:w="1"/><text x="30.5429%" y="159.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="30.3766%" y="149" width="0.0837%" height="15" fill="rgb(239,76,54)" fg:x="363" fg:w="1"/><text x="30.6266%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.42%)</title><rect x="30.4603%" y="149" width="0.4184%" height="15" fill="rgb(231,124,27)" fg:x="364" fg:w="5"/><text x="30.7103%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.17%)</title><rect x="30.7113%" y="133" width="0.1674%" height="15" fill="rgb(249,195,6)" fg:x="367" fg:w="2"/><text x="30.9613%" y="143.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="30.8787%" y="149" width="0.1674%" height="15" fill="rgb(237,174,47)" fg:x="369" fg:w="2"/><text x="31.1287%" y="159.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="30.9623%" y="133" width="0.0837%" height="15" fill="rgb(206,201,31)" fg:x="370" fg:w="1"/><text x="31.2123%" y="143.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="30.9623%" y="117" width="0.0837%" height="15" fill="rgb(231,57,52)" fg:x="370" fg:w="1"/><text x="31.2123%" y="127.50"></text></g><g><title>set_tiny_meta_header_in_use (2 samples, 0.17%)</title><rect x="31.2971%" y="117" width="0.1674%" height="15" fill="rgb(248,177,22)" fg:x="374" fg:w="2"/><text x="31.5471%" y="127.50"></text></g><g><title>szone_malloc_should_clear (7 samples, 0.59%)</title><rect x="31.0460%" y="149" width="0.5858%" height="15" fill="rgb(215,211,37)" fg:x="371" fg:w="7"/><text x="31.2960%" y="159.50"></text></g><g><title>tiny_malloc_should_clear (7 samples, 0.59%)</title><rect x="31.0460%" y="133" width="0.5858%" height="15" fill="rgb(241,128,51)" fg:x="371" fg:w="7"/><text x="31.2960%" y="143.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="31.4644%" y="117" width="0.1674%" height="15" fill="rgb(227,165,31)" fg:x="376" fg:w="2"/><text x="31.7144%" y="127.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="31.5481%" y="101" width="0.0837%" height="15" fill="rgb(228,167,24)" fg:x="377" fg:w="1"/><text x="31.7981%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (36 samples, 3.01%)</title><rect x="28.7029%" y="181" width="3.0126%" height="15" fill="rgb(228,143,12)" fg:x="343" fg:w="36"/><text x="28.9529%" y="191.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 1.92%)</title><rect x="29.7908%" y="165" width="1.9247%" height="15" fill="rgb(249,149,8)" fg:x="356" fg:w="23"/><text x="30.0408%" y="175.50">h..</text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="31.6318%" y="149" width="0.0837%" height="15" fill="rgb(243,35,44)" fg:x="378" fg:w="1"/><text x="31.8818%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (4 samples, 0.33%)</title><rect x="32.2176%" y="165" width="0.3347%" height="15" fill="rgb(246,89,9)" fg:x="385" fg:w="4"/><text x="32.4676%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.08%)</title><rect x="32.5523%" y="165" width="0.0837%" height="15" fill="rgb(233,213,13)" fg:x="389" fg:w="1"/><text x="32.8023%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (39 samples, 3.26%)</title><rect x="31.7155%" y="181" width="3.2636%" height="15" fill="rgb(233,141,41)" fg:x="379" fg:w="39"/><text x="31.9655%" y="191.50">zzs..</text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (28 samples, 2.34%)</title><rect x="32.6360%" y="165" width="2.3431%" height="15" fill="rgb(239,167,4)" fg:x="390" fg:w="28"/><text x="32.8860%" y="175.50">&lt;..</text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.08%)</title><rect x="35.7322%" y="165" width="0.0837%" height="15" fill="rgb(209,217,16)" fg:x="427" fg:w="1"/><text x="35.9822%" y="175.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="35.8159%" y="165" width="0.0837%" height="15" fill="rgb(219,88,35)" fg:x="428" fg:w="1"/><text x="36.0659%" y="175.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="36.0669%" y="149" width="0.0837%" height="15" fill="rgb(220,193,23)" fg:x="431" fg:w="1"/><text x="36.3169%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.17%)</title><rect x="36.1506%" y="149" width="0.1674%" height="15" fill="rgb(230,90,52)" fg:x="432" fg:w="2"/><text x="36.4006%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="36.2343%" y="133" width="0.0837%" height="15" fill="rgb(252,106,19)" fg:x="433" fg:w="1"/><text x="36.4843%" y="143.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="36.4854%" y="133" width="0.0837%" height="15" fill="rgb(206,74,20)" fg:x="436" fg:w="1"/><text x="36.7354%" y="143.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="36.5690%" y="133" width="0.1674%" height="15" fill="rgb(230,138,44)" fg:x="437" fg:w="2"/><text x="36.8190%" y="143.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="36.7364%" y="133" width="0.0837%" height="15" fill="rgb(235,182,43)" fg:x="439" fg:w="1"/><text x="36.9864%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.25%)</title><rect x="36.8201%" y="133" width="0.2510%" height="15" fill="rgb(242,16,51)" fg:x="440" fg:w="3"/><text x="37.0701%" y="143.50"></text></g><g><title>free_tiny (4 samples, 0.33%)</title><rect x="37.0711%" y="133" width="0.3347%" height="15" fill="rgb(248,9,4)" fg:x="443" fg:w="4"/><text x="37.3211%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 2.01%)</title><rect x="35.8996%" y="165" width="2.0084%" height="15" fill="rgb(210,31,22)" fg:x="429" fg:w="24"/><text x="36.1496%" y="175.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (19 samples, 1.59%)</title><rect x="36.3180%" y="149" width="1.5900%" height="15" fill="rgb(239,54,39)" fg:x="434" fg:w="19"/><text x="36.5680%" y="159.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.50%)</title><rect x="37.4059%" y="133" width="0.5021%" height="15" fill="rgb(230,99,41)" fg:x="447" fg:w="6"/><text x="37.6559%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.50%)</title><rect x="37.4059%" y="117" width="0.5021%" height="15" fill="rgb(253,106,12)" fg:x="447" fg:w="6"/><text x="37.6559%" y="127.50"></text></g><g><title>set_tiny_meta_header_in_use (2 samples, 0.17%)</title><rect x="37.7406%" y="101" width="0.1674%" height="15" fill="rgb(213,46,41)" fg:x="451" fg:w="2"/><text x="37.9906%" y="111.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (3 samples, 0.25%)</title><rect x="38.3264%" y="149" width="0.2510%" height="15" fill="rgb(215,133,35)" fg:x="458" fg:w="3"/><text x="38.5764%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="38.5774%" y="149" width="0.2510%" height="15" fill="rgb(213,28,5)" fg:x="461" fg:w="3"/><text x="38.8274%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (14 samples, 1.17%)</title><rect x="37.9079%" y="165" width="1.1715%" height="15" fill="rgb(215,77,49)" fg:x="453" fg:w="14"/><text x="38.1579%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (3 samples, 0.25%)</title><rect x="38.8285%" y="149" width="0.2510%" height="15" fill="rgb(248,100,22)" fg:x="464" fg:w="3"/><text x="39.0785%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.25%)</title><rect x="39.4142%" y="149" width="0.2510%" height="15" fill="rgb(208,67,9)" fg:x="471" fg:w="3"/><text x="39.6642%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.17%)</title><rect x="39.4979%" y="133" width="0.1674%" height="15" fill="rgb(219,133,21)" fg:x="472" fg:w="2"/><text x="39.7479%" y="143.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="39.4979%" y="117" width="0.1674%" height="15" fill="rgb(246,46,29)" fg:x="472" fg:w="2"/><text x="39.7479%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="39.4979%" y="101" width="0.1674%" height="15" fill="rgb(246,185,52)" fg:x="472" fg:w="2"/><text x="39.7479%" y="111.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.08%)</title><rect x="39.5816%" y="85" width="0.0837%" height="15" fill="rgb(252,136,11)" fg:x="473" fg:w="1"/><text x="39.8316%" y="95.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.33%)</title><rect x="39.6653%" y="149" width="0.3347%" height="15" fill="rgb(219,138,53)" fg:x="474" fg:w="4"/><text x="39.9153%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (2 samples, 0.17%)</title><rect x="39.8326%" y="133" width="0.1674%" height="15" fill="rgb(211,51,23)" fg:x="476" fg:w="2"/><text x="40.0826%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.08%)</title><rect x="40.2510%" y="133" width="0.0837%" height="15" fill="rgb(247,221,28)" fg:x="481" fg:w="1"/><text x="40.5010%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="40.2510%" y="117" width="0.0837%" height="15" fill="rgb(251,222,45)" fg:x="481" fg:w="1"/><text x="40.5010%" y="127.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.17%)</title><rect x="40.5858%" y="101" width="0.1674%" height="15" fill="rgb(217,162,53)" fg:x="485" fg:w="2"/><text x="40.8358%" y="111.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.25%)</title><rect x="40.9205%" y="69" width="0.2510%" height="15" fill="rgb(229,93,14)" fg:x="489" fg:w="3"/><text x="41.1705%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.84%)</title><rect x="40.7531%" y="101" width="0.8368%" height="15" fill="rgb(209,67,49)" fg:x="487" fg:w="10"/><text x="41.0031%" y="111.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.84%)</title><rect x="40.7531%" y="85" width="0.8368%" height="15" fill="rgb(213,87,29)" fg:x="487" fg:w="10"/><text x="41.0031%" y="95.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.42%)</title><rect x="41.1715%" y="69" width="0.4184%" height="15" fill="rgb(205,151,52)" fg:x="492" fg:w="5"/><text x="41.4215%" y="79.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.42%)</title><rect x="41.1715%" y="53" width="0.4184%" height="15" fill="rgb(253,215,39)" fg:x="492" fg:w="5"/><text x="41.4215%" y="63.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (31 samples, 2.59%)</title><rect x="39.0795%" y="165" width="2.5941%" height="15" fill="rgb(221,220,41)" fg:x="467" fg:w="31"/><text x="39.3295%" y="175.50">zz..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (20 samples, 1.67%)</title><rect x="40.0000%" y="149" width="1.6736%" height="15" fill="rgb(218,133,21)" fg:x="478" fg:w="20"/><text x="40.2500%" y="159.50"></text></g><g><title>vexy_json_core::parser::unescape_string (16 samples, 1.34%)</title><rect x="40.3347%" y="133" width="1.3389%" height="15" fill="rgb(221,193,43)" fg:x="482" fg:w="16"/><text x="40.5847%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 1.09%)</title><rect x="40.5858%" y="117" width="1.0879%" height="15" fill="rgb(240,128,52)" fg:x="485" fg:w="13"/><text x="40.8358%" y="127.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="41.5900%" y="101" width="0.0837%" height="15" fill="rgb(253,114,12)" fg:x="497" fg:w="1"/><text x="41.8400%" y="111.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="41.7573%" y="149" width="0.2510%" height="15" fill="rgb(215,223,47)" fg:x="499" fg:w="3"/><text x="42.0073%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="41.9247%" y="133" width="0.0837%" height="15" fill="rgb(248,225,23)" fg:x="501" fg:w="1"/><text x="42.1747%" y="143.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.08%)</title><rect x="42.4268%" y="117" width="0.0837%" height="15" fill="rgb(250,108,0)" fg:x="507" fg:w="1"/><text x="42.6768%" y="127.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="42.5105%" y="117" width="0.0837%" height="15" fill="rgb(228,208,7)" fg:x="508" fg:w="1"/><text x="42.7605%" y="127.50"></text></g><g><title>szone_size (1 samples, 0.08%)</title><rect x="42.9289%" y="53" width="0.0837%" height="15" fill="rgb(244,45,10)" fg:x="513" fg:w="1"/><text x="43.1789%" y="63.50"></text></g><g><title>tiny_size (1 samples, 0.08%)</title><rect x="42.9289%" y="37" width="0.0837%" height="15" fill="rgb(207,125,25)" fg:x="513" fg:w="1"/><text x="43.1789%" y="47.50"></text></g><g><title>_malloc_zone_realloc (5 samples, 0.42%)</title><rect x="42.8452%" y="85" width="0.4184%" height="15" fill="rgb(210,195,18)" fg:x="512" fg:w="5"/><text x="43.0952%" y="95.50"></text></g><g><title>szone_realloc (4 samples, 0.33%)</title><rect x="42.9289%" y="69" width="0.3347%" height="15" fill="rgb(249,80,12)" fg:x="513" fg:w="4"/><text x="43.1789%" y="79.50"></text></g><g><title>tiny_try_realloc_in_place (3 samples, 0.25%)</title><rect x="43.0126%" y="53" width="0.2510%" height="15" fill="rgb(221,65,9)" fg:x="514" fg:w="3"/><text x="43.2626%" y="63.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="43.1799%" y="37" width="0.0837%" height="15" fill="rgb(235,49,36)" fg:x="516" fg:w="1"/><text x="43.4299%" y="47.50"></text></g><g><title>szone_realloc (1 samples, 0.08%)</title><rect x="43.2636%" y="85" width="0.0837%" height="15" fill="rgb(225,32,20)" fg:x="517" fg:w="1"/><text x="43.5136%" y="95.50"></text></g><g><title>_realloc (8 samples, 0.67%)</title><rect x="42.7615%" y="101" width="0.6695%" height="15" fill="rgb(215,141,46)" fg:x="511" fg:w="8"/><text x="43.0115%" y="111.50"></text></g><g><title>tiny_size (1 samples, 0.08%)</title><rect x="43.3473%" y="85" width="0.0837%" height="15" fill="rgb(250,160,47)" fg:x="518" fg:w="1"/><text x="43.5973%" y="95.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="43.4310%" y="85" width="0.0837%" height="15" fill="rgb(216,222,40)" fg:x="519" fg:w="1"/><text x="43.6810%" y="95.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.84%)</title><rect x="43.4310%" y="101" width="0.8368%" height="15" fill="rgb(234,217,39)" fg:x="519" fg:w="10"/><text x="43.6810%" y="111.50"></text></g><g><title>tiny_malloc_should_clear (9 samples, 0.75%)</title><rect x="43.5146%" y="85" width="0.7531%" height="15" fill="rgb(207,178,40)" fg:x="520" fg:w="9"/><text x="43.7646%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.42%)</title><rect x="43.8494%" y="69" width="0.4184%" height="15" fill="rgb(221,136,13)" fg:x="524" fg:w="5"/><text x="44.0994%" y="79.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="44.1841%" y="53" width="0.0837%" height="15" fill="rgb(249,199,10)" fg:x="528" fg:w="1"/><text x="44.4341%" y="63.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (32 samples, 2.68%)</title><rect x="41.6736%" y="165" width="2.6778%" height="15" fill="rgb(249,222,13)" fg:x="498" fg:w="32"/><text x="41.9236%" y="175.50">zz..</text></g><g><title>vexy_json_core::parser::unescape_string (28 samples, 2.34%)</title><rect x="42.0084%" y="149" width="2.3431%" height="15" fill="rgb(244,185,38)" fg:x="502" fg:w="28"/><text x="42.2584%" y="159.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (25 samples, 2.09%)</title><rect x="42.2594%" y="133" width="2.0921%" height="15" fill="rgb(236,202,9)" fg:x="505" fg:w="25"/><text x="42.5094%" y="143.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (21 samples, 1.76%)</title><rect x="42.5941%" y="117" width="1.7573%" height="15" fill="rgb(250,229,37)" fg:x="509" fg:w="21"/><text x="42.8441%" y="127.50"></text></g><g><title>szone_size (1 samples, 0.08%)</title><rect x="44.2678%" y="101" width="0.0837%" height="15" fill="rgb(206,174,23)" fg:x="529" fg:w="1"/><text x="44.5178%" y="111.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.17%)</title><rect x="44.4351%" y="133" width="0.1674%" height="15" fill="rgb(211,33,43)" fg:x="531" fg:w="2"/><text x="44.6851%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.08%)</title><rect x="44.6025%" y="133" width="0.0837%" height="15" fill="rgb(245,58,50)" fg:x="533" fg:w="1"/><text x="44.8525%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (5 samples, 0.42%)</title><rect x="44.3515%" y="165" width="0.4184%" height="15" fill="rgb(244,68,36)" fg:x="530" fg:w="5"/><text x="44.6015%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (5 samples, 0.42%)</title><rect x="44.3515%" y="149" width="0.4184%" height="15" fill="rgb(232,229,15)" fg:x="530" fg:w="5"/><text x="44.6015%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.08%)</title><rect x="44.6862%" y="133" width="0.0837%" height="15" fill="rgb(254,30,23)" fg:x="534" fg:w="1"/><text x="44.9362%" y="143.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.08%)</title><rect x="50.2929%" y="133" width="0.0837%" height="15" fill="rgb(235,160,14)" fg:x="601" fg:w="1"/><text x="50.5429%" y="143.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="50.3766%" y="133" width="0.0837%" height="15" fill="rgb(212,155,44)" fg:x="602" fg:w="1"/><text x="50.6266%" y="143.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="52.1339%" y="69" width="0.1674%" height="15" fill="rgb(226,2,50)" fg:x="623" fg:w="2"/><text x="52.3839%" y="79.50"></text></g><g><title>set_tiny_meta_header_in_use (2 samples, 0.17%)</title><rect x="52.3013%" y="69" width="0.1674%" height="15" fill="rgb(234,177,6)" fg:x="625" fg:w="2"/><text x="52.5513%" y="79.50"></text></g><g><title>szone_size (4 samples, 0.33%)</title><rect x="52.4686%" y="69" width="0.3347%" height="15" fill="rgb(217,24,9)" fg:x="627" fg:w="4"/><text x="52.7186%" y="79.50"></text></g><g><title>tiny_size (4 samples, 0.33%)</title><rect x="52.4686%" y="53" width="0.3347%" height="15" fill="rgb(220,13,46)" fg:x="627" fg:w="4"/><text x="52.7186%" y="63.50"></text></g><g><title>tiny_size (1 samples, 0.08%)</title><rect x="52.8033%" y="69" width="0.0837%" height="15" fill="rgb(239,221,27)" fg:x="631" fg:w="1"/><text x="53.0533%" y="79.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.25%)</title><rect x="55.1464%" y="53" width="0.2510%" height="15" fill="rgb(222,198,25)" fg:x="659" fg:w="3"/><text x="55.3964%" y="63.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.33%)</title><rect x="55.3975%" y="53" width="0.3347%" height="15" fill="rgb(211,99,13)" fg:x="662" fg:w="4"/><text x="55.6475%" y="63.50"></text></g><g><title>szone_realloc (56 samples, 4.69%)</title><rect x="51.4644%" y="85" width="4.6862%" height="15" fill="rgb(232,111,31)" fg:x="615" fg:w="56"/><text x="51.7144%" y="95.50">szone..</text></g><g><title>tiny_try_realloc_in_place (39 samples, 3.26%)</title><rect x="52.8870%" y="69" width="3.2636%" height="15" fill="rgb(245,82,37)" fg:x="632" fg:w="39"/><text x="53.1370%" y="79.50">tin..</text></g><g><title>tiny_free_list_remove_ptr (5 samples, 0.42%)</title><rect x="55.7322%" y="53" width="0.4184%" height="15" fill="rgb(227,149,46)" fg:x="666" fg:w="5"/><text x="55.9822%" y="63.50"></text></g><g><title>_malloc_zone_realloc (60 samples, 5.02%)</title><rect x="51.2134%" y="101" width="5.0209%" height="15" fill="rgb(218,36,50)" fg:x="612" fg:w="60"/><text x="51.4634%" y="111.50">_mallo..</text></g><g><title>tiny_try_realloc_in_place (1 samples, 0.08%)</title><rect x="56.1506%" y="85" width="0.0837%" height="15" fill="rgb(226,80,48)" fg:x="671" fg:w="1"/><text x="56.4006%" y="95.50"></text></g><g><title>_realloc (75 samples, 6.28%)</title><rect x="50.7950%" y="117" width="6.2762%" height="15" fill="rgb(238,224,15)" fg:x="607" fg:w="75"/><text x="51.0450%" y="127.50">_realloc</text></g><g><title>szone_size (10 samples, 0.84%)</title><rect x="56.2343%" y="101" width="0.8368%" height="15" fill="rgb(241,136,10)" fg:x="672" fg:w="10"/><text x="56.4843%" y="111.50"></text></g><g><title>tiny_size (9 samples, 0.75%)</title><rect x="56.3180%" y="85" width="0.7531%" height="15" fill="rgb(208,32,45)" fg:x="673" fg:w="9"/><text x="56.5680%" y="95.50"></text></g><g><title>rack_get_thread_index (2 samples, 0.17%)</title><rect x="57.0711%" y="101" width="0.1674%" height="15" fill="rgb(207,135,9)" fg:x="682" fg:w="2"/><text x="57.3211%" y="111.50"></text></g><g><title>szone_malloc_should_clear (19 samples, 1.59%)</title><rect x="57.0711%" y="117" width="1.5900%" height="15" fill="rgb(206,86,44)" fg:x="682" fg:w="19"/><text x="57.3211%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (17 samples, 1.42%)</title><rect x="57.2385%" y="101" width="1.4226%" height="15" fill="rgb(245,177,15)" fg:x="684" fg:w="17"/><text x="57.4885%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (7 samples, 0.59%)</title><rect x="58.0753%" y="85" width="0.5858%" height="15" fill="rgb(206,64,50)" fg:x="694" fg:w="7"/><text x="58.3253%" y="95.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="58.5774%" y="69" width="0.0837%" height="15" fill="rgb(234,36,40)" fg:x="700" fg:w="1"/><text x="58.8274%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (100 samples, 8.37%)</title><rect x="50.4603%" y="133" width="8.3682%" height="15" fill="rgb(213,64,8)" fg:x="603" fg:w="100"/><text x="50.7103%" y="143.50">alloc::raw_v..</text></g><g><title>szone_size (2 samples, 0.17%)</title><rect x="58.6611%" y="117" width="0.1674%" height="15" fill="rgb(210,75,36)" fg:x="701" fg:w="2"/><text x="58.9111%" y="127.50"></text></g><g><title>realloc (2 samples, 0.17%)</title><rect x="58.8285%" y="133" width="0.1674%" height="15" fill="rgb(229,88,21)" fg:x="703" fg:w="2"/><text x="59.0785%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (289 samples, 24.18%)</title><rect x="34.9791%" y="181" width="24.1841%" height="15" fill="rgb(252,204,47)" fg:x="418" fg:w="289"/><text x="35.2291%" y="191.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (172 samples, 14.39%)</title><rect x="44.7699%" y="165" width="14.3933%" height="15" fill="rgb(208,77,27)" fg:x="535" fg:w="172"/><text x="45.0199%" y="175.50">vexy_json_core::parser::un..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (110 samples, 9.21%)</title><rect x="49.9582%" y="149" width="9.2050%" height="15" fill="rgb(221,76,26)" fg:x="597" fg:w="110"/><text x="50.2082%" y="159.50">alloc::raw_ve..</text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="58.9958%" y="133" width="0.1674%" height="15" fill="rgb(225,139,18)" fg:x="705" fg:w="2"/><text x="59.2458%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="59.6653%" y="149" width="0.0837%" height="15" fill="rgb(230,137,11)" fg:x="713" fg:w="1"/><text x="59.9153%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="59.7490%" y="149" width="0.2510%" height="15" fill="rgb(212,28,1)" fg:x="714" fg:w="3"/><text x="59.9990%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (13 samples, 1.09%)</title><rect x="59.1632%" y="181" width="1.0879%" height="15" fill="rgb(248,164,17)" fg:x="707" fg:w="13"/><text x="59.4132%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (10 samples, 0.84%)</title><rect x="59.4142%" y="165" width="0.8368%" height="15" fill="rgb(222,171,42)" fg:x="710" fg:w="10"/><text x="59.6642%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (3 samples, 0.25%)</title><rect x="60.0000%" y="149" width="0.2510%" height="15" fill="rgb(243,84,45)" fg:x="717" fg:w="3"/><text x="60.2500%" y="159.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="60.5021%" y="149" width="0.0837%" height="15" fill="rgb(252,49,23)" fg:x="723" fg:w="1"/><text x="60.7521%" y="159.50"></text></g><g><title>szone_good_size (1 samples, 0.08%)</title><rect x="60.5858%" y="101" width="0.0837%" height="15" fill="rgb(215,19,7)" fg:x="724" fg:w="1"/><text x="60.8358%" y="111.50"></text></g><g><title>_realloc (2 samples, 0.17%)</title><rect x="60.5858%" y="133" width="0.1674%" height="15" fill="rgb(238,81,41)" fg:x="724" fg:w="2"/><text x="60.8358%" y="143.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.17%)</title><rect x="60.5858%" y="117" width="0.1674%" height="15" fill="rgb(210,199,37)" fg:x="724" fg:w="2"/><text x="60.8358%" y="127.50"></text></g><g><title>szone_realloc (1 samples, 0.08%)</title><rect x="60.6695%" y="101" width="0.0837%" height="15" fill="rgb(244,192,49)" fg:x="725" fg:w="1"/><text x="60.9195%" y="111.50"></text></g><g><title>szone_size (1 samples, 0.08%)</title><rect x="60.6695%" y="85" width="0.0837%" height="15" fill="rgb(226,211,11)" fg:x="725" fg:w="1"/><text x="60.9195%" y="95.50"></text></g><g><title>tiny_size (1 samples, 0.08%)</title><rect x="60.6695%" y="69" width="0.0837%" height="15" fill="rgb(236,162,54)" fg:x="725" fg:w="1"/><text x="60.9195%" y="79.50"></text></g><g><title>rack_get_thread_index (4 samples, 0.33%)</title><rect x="60.7531%" y="117" width="0.3347%" height="15" fill="rgb(220,229,9)" fg:x="726" fg:w="4"/><text x="61.0031%" y="127.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="61.8410%" y="85" width="0.0837%" height="15" fill="rgb(250,87,22)" fg:x="739" fg:w="1"/><text x="62.0910%" y="95.50"></text></g><g><title>szone_malloc_should_clear (15 samples, 1.26%)</title><rect x="60.7531%" y="133" width="1.2552%" height="15" fill="rgb(239,43,17)" fg:x="726" fg:w="15"/><text x="61.0031%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (11 samples, 0.92%)</title><rect x="61.0879%" y="117" width="0.9205%" height="15" fill="rgb(231,177,25)" fg:x="730" fg:w="11"/><text x="61.3379%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (8 samples, 0.67%)</title><rect x="61.3389%" y="101" width="0.6695%" height="15" fill="rgb(219,179,1)" fg:x="733" fg:w="8"/><text x="61.5889%" y="111.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="61.9247%" y="85" width="0.0837%" height="15" fill="rgb(238,219,53)" fg:x="740" fg:w="1"/><text x="62.1747%" y="95.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (411 samples, 34.39%)</title><rect x="27.6987%" y="213" width="34.3933%" height="15" fill="rgb(232,167,36)" fg:x="331" fg:w="411"/><text x="27.9487%" y="223.50">vexy_json_core::parser::Parser::parse_array</text></g><g><title>vexy_json_core::parser::Parser::parse_value (404 samples, 33.81%)</title><rect x="28.2845%" y="197" width="33.8075%" height="15" fill="rgb(244,19,51)" fg:x="338" fg:w="404"/><text x="28.5345%" y="207.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (22 samples, 1.84%)</title><rect x="60.2510%" y="181" width="1.8410%" height="15" fill="rgb(224,6,22)" fg:x="720" fg:w="22"/><text x="60.5010%" y="191.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 1.67%)</title><rect x="60.4184%" y="165" width="1.6736%" height="15" fill="rgb(224,145,5)" fg:x="722" fg:w="20"/><text x="60.6684%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 1.51%)</title><rect x="60.5858%" y="149" width="1.5063%" height="15" fill="rgb(234,130,49)" fg:x="724" fg:w="18"/><text x="60.8358%" y="159.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="62.0084%" y="133" width="0.0837%" height="15" fill="rgb(254,6,2)" fg:x="741" fg:w="1"/><text x="62.2584%" y="143.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2 samples, 0.17%)</title><rect x="62.4268%" y="197" width="0.1674%" height="15" fill="rgb(208,96,46)" fg:x="746" fg:w="2"/><text x="62.6768%" y="207.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="62.4268%" y="181" width="0.1674%" height="15" fill="rgb(239,3,39)" fg:x="746" fg:w="2"/><text x="62.6768%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="62.4268%" y="165" width="0.1674%" height="15" fill="rgb(233,210,1)" fg:x="746" fg:w="2"/><text x="62.6768%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="62.5105%" y="149" width="0.0837%" height="15" fill="rgb(244,137,37)" fg:x="747" fg:w="1"/><text x="62.7605%" y="159.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="62.5105%" y="133" width="0.0837%" height="15" fill="rgb(240,136,2)" fg:x="747" fg:w="1"/><text x="62.7605%" y="143.50"></text></g><g><title>core::str::validations::next_code_point (3 samples, 0.25%)</title><rect x="62.5941%" y="197" width="0.2510%" height="15" fill="rgb(239,18,37)" fg:x="748" fg:w="3"/><text x="62.8441%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.50%)</title><rect x="63.1799%" y="181" width="0.5021%" height="15" fill="rgb(218,185,22)" fg:x="755" fg:w="6"/><text x="63.4299%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.25%)</title><rect x="63.4310%" y="165" width="0.2510%" height="15" fill="rgb(225,218,4)" fg:x="758" fg:w="3"/><text x="63.6810%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.17%)</title><rect x="64.0167%" y="165" width="0.1674%" height="15" fill="rgb(230,182,32)" fg:x="765" fg:w="2"/><text x="64.2667%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.17%)</title><rect x="64.0167%" y="149" width="0.1674%" height="15" fill="rgb(242,56,43)" fg:x="765" fg:w="2"/><text x="64.2667%" y="159.50"></text></g><g><title>free_small (1 samples, 0.08%)</title><rect x="64.1841%" y="165" width="0.0837%" height="15" fill="rgb(233,99,24)" fg:x="767" fg:w="1"/><text x="64.4341%" y="175.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="64.2678%" y="165" width="0.1674%" height="15" fill="rgb(234,209,42)" fg:x="768" fg:w="2"/><text x="64.5178%" y="175.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="64.3515%" y="149" width="0.0837%" height="15" fill="rgb(227,7,12)" fg:x="769" fg:w="1"/><text x="64.6015%" y="159.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="64.3515%" y="133" width="0.0837%" height="15" fill="rgb(245,203,43)" fg:x="769" fg:w="1"/><text x="64.6015%" y="143.50"></text></g><g><title>small_malloc_should_clear (2 samples, 0.17%)</title><rect x="64.4351%" y="149" width="0.1674%" height="15" fill="rgb(238,205,33)" fg:x="770" fg:w="2"/><text x="64.6851%" y="159.50"></text></g><g><title>small_malloc_from_free_list (2 samples, 0.17%)</title><rect x="64.4351%" y="133" width="0.1674%" height="15" fill="rgb(231,56,7)" fg:x="770" fg:w="2"/><text x="64.6851%" y="143.50"></text></g><g><title>small_free_list_add_ptr (2 samples, 0.17%)</title><rect x="64.4351%" y="117" width="0.1674%" height="15" fill="rgb(244,186,29)" fg:x="770" fg:w="2"/><text x="64.6851%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23 samples, 1.92%)</title><rect x="62.8452%" y="197" width="1.9247%" height="15" fill="rgb(234,111,31)" fg:x="751" fg:w="23"/><text x="63.0952%" y="207.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 1.09%)</title><rect x="63.6820%" y="181" width="1.0879%" height="15" fill="rgb(241,149,10)" fg:x="761" fg:w="13"/><text x="63.9320%" y="191.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.33%)</title><rect x="64.4351%" y="165" width="0.3347%" height="15" fill="rgb(249,206,44)" fg:x="770" fg:w="4"/><text x="64.6851%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="64.6025%" y="149" width="0.1674%" height="15" fill="rgb(251,153,30)" fg:x="772" fg:w="2"/><text x="64.8525%" y="159.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.08%)</title><rect x="64.6862%" y="133" width="0.0837%" height="15" fill="rgb(239,152,38)" fg:x="773" fg:w="1"/><text x="64.9362%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (6 samples, 0.50%)</title><rect x="64.7699%" y="181" width="0.5021%" height="15" fill="rgb(249,139,47)" fg:x="774" fg:w="6"/><text x="65.0199%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (7 samples, 0.59%)</title><rect x="64.7699%" y="197" width="0.5858%" height="15" fill="rgb(244,64,35)" fg:x="774" fg:w="7"/><text x="65.0199%" y="207.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.08%)</title><rect x="65.2720%" y="181" width="0.0837%" height="15" fill="rgb(216,46,15)" fg:x="780" fg:w="1"/><text x="65.5220%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.08%)</title><rect x="65.3556%" y="181" width="0.0837%" height="15" fill="rgb(250,74,19)" fg:x="781" fg:w="1"/><text x="65.6056%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="65.3556%" y="165" width="0.0837%" height="15" fill="rgb(249,42,33)" fg:x="781" fg:w="1"/><text x="65.6056%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (2 samples, 0.17%)</title><rect x="65.3556%" y="197" width="0.1674%" height="15" fill="rgb(242,149,17)" fg:x="781" fg:w="2"/><text x="65.6056%" y="207.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (1 samples, 0.08%)</title><rect x="65.4393%" y="181" width="0.0837%" height="15" fill="rgb(244,29,21)" fg:x="782" fg:w="1"/><text x="65.6893%" y="191.50"></text></g><g><title>vexy_json_core::parser::unescape_string (1 samples, 0.08%)</title><rect x="65.4393%" y="165" width="0.0837%" height="15" fill="rgb(220,130,37)" fg:x="782" fg:w="1"/><text x="65.6893%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.08%)</title><rect x="65.4393%" y="149" width="0.0837%" height="15" fill="rgb(211,67,2)" fg:x="782" fg:w="1"/><text x="65.6893%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.4393%" y="133" width="0.0837%" height="15" fill="rgb(235,68,52)" fg:x="782" fg:w="1"/><text x="65.6893%" y="143.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="65.4393%" y="117" width="0.0837%" height="15" fill="rgb(246,142,3)" fg:x="782" fg:w="1"/><text x="65.6893%" y="127.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="66.4435%" y="181" width="0.0837%" height="15" fill="rgb(241,25,7)" fg:x="794" fg:w="1"/><text x="66.6935%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.08%)</title><rect x="66.4435%" y="165" width="0.0837%" height="15" fill="rgb(242,119,39)" fg:x="794" fg:w="1"/><text x="66.6935%" y="175.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="66.6109%" y="133" width="0.0837%" height="15" fill="rgb(241,98,45)" fg:x="796" fg:w="1"/><text x="66.8609%" y="143.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3 samples, 0.25%)</title><rect x="66.5272%" y="181" width="0.2510%" height="15" fill="rgb(254,28,30)" fg:x="795" fg:w="3"/><text x="66.7772%" y="191.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="66.5272%" y="165" width="0.2510%" height="15" fill="rgb(241,142,54)" fg:x="795" fg:w="3"/><text x="66.7772%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.25%)</title><rect x="66.5272%" y="149" width="0.2510%" height="15" fill="rgb(222,85,15)" fg:x="795" fg:w="3"/><text x="66.7772%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="66.6946%" y="133" width="0.0837%" height="15" fill="rgb(210,85,47)" fg:x="797" fg:w="1"/><text x="66.9446%" y="143.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="66.6946%" y="117" width="0.0837%" height="15" fill="rgb(224,206,25)" fg:x="797" fg:w="1"/><text x="66.9446%" y="127.50"></text></g><g><title>_free (2 samples, 0.17%)</title><rect x="66.7782%" y="181" width="0.1674%" height="15" fill="rgb(243,201,19)" fg:x="798" fg:w="2"/><text x="67.0282%" y="191.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="66.9456%" y="181" width="0.0837%" height="15" fill="rgb(236,59,4)" fg:x="800" fg:w="1"/><text x="67.1956%" y="191.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="67.0293%" y="181" width="0.0837%" height="15" fill="rgb(254,179,45)" fg:x="801" fg:w="1"/><text x="67.2793%" y="191.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="67.1130%" y="181" width="0.0837%" height="15" fill="rgb(226,14,10)" fg:x="802" fg:w="1"/><text x="67.3630%" y="191.50"></text></g><g><title>_free (1 samples, 0.08%)</title><rect x="67.5314%" y="165" width="0.0837%" height="15" fill="rgb(244,27,41)" fg:x="807" fg:w="1"/><text x="67.7814%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.33%)</title><rect x="67.6151%" y="165" width="0.3347%" height="15" fill="rgb(235,35,32)" fg:x="808" fg:w="4"/><text x="67.8651%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.25%)</title><rect x="67.6987%" y="149" width="0.2510%" height="15" fill="rgb(218,68,31)" fg:x="809" fg:w="3"/><text x="67.9487%" y="159.50"></text></g><g><title>free_tiny (1 samples, 0.08%)</title><rect x="68.1172%" y="149" width="0.0837%" height="15" fill="rgb(207,120,37)" fg:x="814" fg:w="1"/><text x="68.3672%" y="159.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="68.1172%" y="133" width="0.0837%" height="15" fill="rgb(227,98,0)" fg:x="814" fg:w="1"/><text x="68.3672%" y="143.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="68.2008%" y="133" width="0.0837%" height="15" fill="rgb(207,7,3)" fg:x="815" fg:w="1"/><text x="68.4508%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.50%)</title><rect x="67.9498%" y="165" width="0.5021%" height="15" fill="rgb(206,98,19)" fg:x="812" fg:w="6"/><text x="68.1998%" y="175.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="68.2008%" y="149" width="0.2510%" height="15" fill="rgb(217,5,26)" fg:x="815" fg:w="3"/><text x="68.4508%" y="159.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="68.2845%" y="133" width="0.1674%" height="15" fill="rgb(235,190,38)" fg:x="816" fg:w="2"/><text x="68.5345%" y="143.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="68.2845%" y="117" width="0.1674%" height="15" fill="rgb(247,86,24)" fg:x="816" fg:w="2"/><text x="68.5345%" y="127.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="68.3682%" y="101" width="0.0837%" height="15" fill="rgb(205,101,16)" fg:x="817" fg:w="1"/><text x="68.6182%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 1.34%)</title><rect x="67.1967%" y="181" width="1.3389%" height="15" fill="rgb(246,168,33)" fg:x="803" fg:w="16"/><text x="67.4467%" y="191.50"></text></g><g><title>malloc (1 samples, 0.08%)</title><rect x="68.4519%" y="165" width="0.0837%" height="15" fill="rgb(231,114,1)" fg:x="818" fg:w="1"/><text x="68.7019%" y="175.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="68.5356%" y="181" width="0.0837%" height="15" fill="rgb(207,184,53)" fg:x="819" fg:w="1"/><text x="68.7856%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="68.5356%" y="165" width="0.0837%" height="15" fill="rgb(224,95,51)" fg:x="819" fg:w="1"/><text x="68.7856%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="68.5356%" y="149" width="0.0837%" height="15" fill="rgb(212,188,45)" fg:x="819" fg:w="1"/><text x="68.7856%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (9 samples, 0.75%)</title><rect x="68.8703%" y="165" width="0.7531%" height="15" fill="rgb(223,154,38)" fg:x="823" fg:w="9"/><text x="69.1203%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="69.6234%" y="165" width="0.2510%" height="15" fill="rgb(251,22,52)" fg:x="832" fg:w="3"/><text x="69.8734%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (16 samples, 1.34%)</title><rect x="68.6192%" y="181" width="1.3389%" height="15" fill="rgb(229,209,22)" fg:x="820" fg:w="16"/><text x="68.8692%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto367_ctx366_x (1 samples, 0.08%)</title><rect x="69.8745%" y="165" width="0.0837%" height="15" fill="rgb(234,138,34)" fg:x="835" fg:w="1"/><text x="70.1245%" y="175.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.08%)</title><rect x="70.2092%" y="101" width="0.0837%" height="15" fill="rgb(212,95,11)" fg:x="839" fg:w="1"/><text x="70.4592%" y="111.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.08%)</title><rect x="70.2929%" y="101" width="0.0837%" height="15" fill="rgb(240,179,47)" fg:x="840" fg:w="1"/><text x="70.5429%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.50%)</title><rect x="70.0418%" y="165" width="0.5021%" height="15" fill="rgb(240,163,11)" fg:x="837" fg:w="6"/><text x="70.2918%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.50%)</title><rect x="70.0418%" y="149" width="0.5021%" height="15" fill="rgb(236,37,12)" fg:x="837" fg:w="6"/><text x="70.2918%" y="159.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.50%)</title><rect x="70.0418%" y="133" width="0.5021%" height="15" fill="rgb(232,164,16)" fg:x="837" fg:w="6"/><text x="70.2918%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.42%)</title><rect x="70.1255%" y="117" width="0.4184%" height="15" fill="rgb(244,205,15)" fg:x="838" fg:w="5"/><text x="70.3755%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="70.3766%" y="101" width="0.1674%" height="15" fill="rgb(223,117,47)" fg:x="841" fg:w="2"/><text x="70.6266%" y="111.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.17%)</title><rect x="70.7950%" y="149" width="0.1674%" height="15" fill="rgb(244,107,35)" fg:x="846" fg:w="2"/><text x="71.0450%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (8 samples, 0.67%)</title><rect x="70.5439%" y="165" width="0.6695%" height="15" fill="rgb(205,140,8)" fg:x="843" fg:w="8"/><text x="70.7939%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="70.9623%" y="149" width="0.2510%" height="15" fill="rgb(228,84,46)" fg:x="848" fg:w="3"/><text x="71.2123%" y="159.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="71.8828%" y="149" width="0.0837%" height="15" fill="rgb(254,188,9)" fg:x="859" fg:w="1"/><text x="72.1328%" y="159.50"></text></g><g><title>vexy_json_core::parser::unescape_string (1 samples, 0.08%)</title><rect x="71.8828%" y="133" width="0.0837%" height="15" fill="rgb(206,112,54)" fg:x="859" fg:w="1"/><text x="72.1328%" y="143.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="71.9665%" y="149" width="0.0837%" height="15" fill="rgb(216,84,49)" fg:x="860" fg:w="1"/><text x="72.2165%" y="159.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="72.0502%" y="149" width="0.0837%" height="15" fill="rgb(214,194,35)" fg:x="861" fg:w="1"/><text x="72.3002%" y="159.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.08%)</title><rect x="72.1339%" y="149" width="0.0837%" height="15" fill="rgb(249,28,3)" fg:x="862" fg:w="1"/><text x="72.3839%" y="159.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="72.9707%" y="133" width="0.0837%" height="15" fill="rgb(222,56,52)" fg:x="872" fg:w="1"/><text x="73.2207%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.84%)</title><rect x="73.0544%" y="133" width="0.8368%" height="15" fill="rgb(245,217,50)" fg:x="873" fg:w="10"/><text x="73.3044%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.33%)</title><rect x="73.5565%" y="117" width="0.3347%" height="15" fill="rgb(213,201,24)" fg:x="879" fg:w="4"/><text x="73.8065%" y="127.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="73.8912%" y="117" width="0.1674%" height="15" fill="rgb(248,116,28)" fg:x="883" fg:w="2"/><text x="74.1412%" y="127.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="74.0586%" y="117" width="0.1674%" height="15" fill="rgb(219,72,43)" fg:x="885" fg:w="2"/><text x="74.3086%" y="127.50"></text></g><g><title>rack_get_thread_index (2 samples, 0.17%)</title><rect x="74.2259%" y="101" width="0.1674%" height="15" fill="rgb(209,138,14)" fg:x="887" fg:w="2"/><text x="74.4759%" y="111.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.08%)</title><rect x="74.3933%" y="101" width="0.0837%" height="15" fill="rgb(222,18,33)" fg:x="889" fg:w="1"/><text x="74.6433%" y="111.50"></text></g><g><title>set_tiny_meta_header_in_use (3 samples, 0.25%)</title><rect x="74.8954%" y="85" width="0.2510%" height="15" fill="rgb(213,199,7)" fg:x="895" fg:w="3"/><text x="75.1454%" y="95.50"></text></g><g><title>szone_malloc_should_clear (13 samples, 1.09%)</title><rect x="74.2259%" y="117" width="1.0879%" height="15" fill="rgb(250,110,10)" fg:x="887" fg:w="13"/><text x="74.4759%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (10 samples, 0.84%)</title><rect x="74.4770%" y="101" width="0.8368%" height="15" fill="rgb(248,123,6)" fg:x="890" fg:w="10"/><text x="74.7270%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="75.1464%" y="85" width="0.1674%" height="15" fill="rgb(206,91,31)" fg:x="898" fg:w="2"/><text x="75.3964%" y="95.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (38 samples, 3.18%)</title><rect x="72.2176%" y="149" width="3.1799%" height="15" fill="rgb(211,154,13)" fg:x="863" fg:w="38"/><text x="72.4676%" y="159.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 1.51%)</title><rect x="73.8912%" y="133" width="1.5063%" height="15" fill="rgb(225,148,7)" fg:x="883" fg:w="18"/><text x="74.1412%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="75.3138%" y="117" width="0.0837%" height="15" fill="rgb(220,160,43)" fg:x="900" fg:w="1"/><text x="75.5638%" y="127.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (9 samples, 0.75%)</title><rect x="75.4812%" y="133" width="0.7531%" height="15" fill="rgb(213,52,39)" fg:x="902" fg:w="9"/><text x="75.7312%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="76.2343%" y="133" width="0.2510%" height="15" fill="rgb(243,137,7)" fg:x="911" fg:w="3"/><text x="76.4843%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (2 samples, 0.17%)</title><rect x="76.4854%" y="133" width="0.1674%" height="15" fill="rgb(230,79,13)" fg:x="914" fg:w="2"/><text x="76.7354%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (16 samples, 1.34%)</title><rect x="75.3975%" y="149" width="1.3389%" height="15" fill="rgb(247,105,23)" fg:x="901" fg:w="16"/><text x="75.6475%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto367_ctx366_x (1 samples, 0.08%)</title><rect x="76.6527%" y="133" width="0.0837%" height="15" fill="rgb(223,179,41)" fg:x="916" fg:w="1"/><text x="76.9027%" y="143.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="76.8201%" y="133" width="0.0837%" height="15" fill="rgb(218,9,34)" fg:x="918" fg:w="1"/><text x="77.0701%" y="143.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2 samples, 0.17%)</title><rect x="76.9038%" y="133" width="0.1674%" height="15" fill="rgb(222,106,8)" fg:x="919" fg:w="2"/><text x="77.1538%" y="143.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.08%)</title><rect x="76.9874%" y="117" width="0.0837%" height="15" fill="rgb(211,220,0)" fg:x="920" fg:w="1"/><text x="77.2374%" y="127.50"></text></g><g><title>free_tiny (7 samples, 0.59%)</title><rect x="77.0711%" y="133" width="0.5858%" height="15" fill="rgb(229,52,16)" fg:x="921" fg:w="7"/><text x="77.3211%" y="143.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="77.5732%" y="117" width="0.0837%" height="15" fill="rgb(212,155,18)" fg:x="927" fg:w="1"/><text x="77.8232%" y="127.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.84%)</title><rect x="77.6569%" y="133" width="0.8368%" height="15" fill="rgb(242,21,14)" fg:x="928" fg:w="10"/><text x="77.9069%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (9 samples, 0.75%)</title><rect x="77.7406%" y="117" width="0.7531%" height="15" fill="rgb(222,19,48)" fg:x="929" fg:w="9"/><text x="77.9906%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.25%)</title><rect x="78.2427%" y="101" width="0.2510%" height="15" fill="rgb(232,45,27)" fg:x="935" fg:w="3"/><text x="78.4927%" y="111.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="78.4937%" y="133" width="0.2510%" height="15" fill="rgb(249,103,42)" fg:x="938" fg:w="3"/><text x="78.7437%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.17%)</title><rect x="78.5774%" y="117" width="0.1674%" height="15" fill="rgb(246,81,33)" fg:x="939" fg:w="2"/><text x="78.8274%" y="127.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.08%)</title><rect x="78.9958%" y="101" width="0.0837%" height="15" fill="rgb(252,33,42)" fg:x="944" fg:w="1"/><text x="79.2458%" y="111.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.17%)</title><rect x="79.0795%" y="101" width="0.1674%" height="15" fill="rgb(209,212,41)" fg:x="945" fg:w="2"/><text x="79.3295%" y="111.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="79.3305%" y="69" width="0.0837%" height="15" fill="rgb(207,154,6)" fg:x="948" fg:w="1"/><text x="79.5805%" y="79.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (39 samples, 3.26%)</title><rect x="76.7364%" y="149" width="3.2636%" height="15" fill="rgb(223,64,47)" fg:x="917" fg:w="39"/><text x="76.9864%" y="159.50">zzs..</text></g><g><title>vexy_json_core::parser::unescape_string (15 samples, 1.26%)</title><rect x="78.7448%" y="133" width="1.2552%" height="15" fill="rgb(211,161,38)" fg:x="941" fg:w="15"/><text x="78.9948%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 1.00%)</title><rect x="78.9958%" y="117" width="1.0042%" height="15" fill="rgb(219,138,40)" fg:x="944" fg:w="12"/><text x="79.2458%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.75%)</title><rect x="79.2469%" y="101" width="0.7531%" height="15" fill="rgb(241,228,46)" fg:x="947" fg:w="9"/><text x="79.4969%" y="111.50"></text></g><g><title>szone_malloc_should_clear (8 samples, 0.67%)</title><rect x="79.3305%" y="85" width="0.6695%" height="15" fill="rgb(223,209,38)" fg:x="948" fg:w="8"/><text x="79.5805%" y="95.50"></text></g><g><title>tiny_malloc_should_clear (7 samples, 0.59%)</title><rect x="79.4142%" y="69" width="0.5858%" height="15" fill="rgb(236,164,45)" fg:x="949" fg:w="7"/><text x="79.6642%" y="79.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.25%)</title><rect x="79.7490%" y="53" width="0.2510%" height="15" fill="rgb(231,15,5)" fg:x="953" fg:w="3"/><text x="79.9990%" y="63.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.08%)</title><rect x="80.0000%" y="149" width="0.0837%" height="15" fill="rgb(252,35,15)" fg:x="956" fg:w="1"/><text x="80.2500%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (2 samples, 0.17%)</title><rect x="80.0837%" y="149" width="0.1674%" height="15" fill="rgb(248,181,18)" fg:x="957" fg:w="2"/><text x="80.3337%" y="159.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="80.5021%" y="133" width="0.0837%" height="15" fill="rgb(233,39,42)" fg:x="962" fg:w="1"/><text x="80.7521%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.5021%" y="117" width="0.0837%" height="15" fill="rgb(238,110,33)" fg:x="962" fg:w="1"/><text x="80.7521%" y="127.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="80.6695%" y="117" width="0.0837%" height="15" fill="rgb(233,195,10)" fg:x="964" fg:w="1"/><text x="80.9195%" y="127.50"></text></g><g><title>rack_get_thread_index (4 samples, 0.33%)</title><rect x="80.7531%" y="85" width="0.3347%" height="15" fill="rgb(254,105,3)" fg:x="965" fg:w="4"/><text x="81.0031%" y="95.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="82.3431%" y="69" width="0.0837%" height="15" fill="rgb(221,225,9)" fg:x="984" fg:w="1"/><text x="82.5931%" y="79.50"></text></g><g><title>szone_malloc_should_clear (23 samples, 1.92%)</title><rect x="80.7531%" y="101" width="1.9247%" height="15" fill="rgb(224,227,45)" fg:x="965" fg:w="23"/><text x="81.0031%" y="111.50">s..</text></g><g><title>tiny_malloc_should_clear (19 samples, 1.59%)</title><rect x="81.0879%" y="85" width="1.5900%" height="15" fill="rgb(229,198,43)" fg:x="969" fg:w="19"/><text x="81.3379%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.25%)</title><rect x="82.4268%" y="69" width="0.2510%" height="15" fill="rgb(206,209,35)" fg:x="985" fg:w="3"/><text x="82.6768%" y="79.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (153 samples, 12.80%)</title><rect x="69.9582%" y="181" width="12.8033%" height="15" fill="rgb(245,195,53)" fg:x="836" fg:w="153"/><text x="70.2082%" y="191.50">vexy_json_core::parser:..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (138 samples, 11.55%)</title><rect x="71.2134%" y="165" width="11.5481%" height="15" fill="rgb(240,92,26)" fg:x="851" fg:w="138"/><text x="71.4634%" y="175.50">vexy_json_core::parse..</text></g><g><title>vexy_json_core::parser::unescape_string (30 samples, 2.51%)</title><rect x="80.2510%" y="149" width="2.5105%" height="15" fill="rgb(207,40,23)" fg:x="959" fg:w="30"/><text x="80.5010%" y="159.50">zz..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (26 samples, 2.18%)</title><rect x="80.5858%" y="133" width="2.1757%" height="15" fill="rgb(223,111,35)" fg:x="963" fg:w="26"/><text x="80.8358%" y="143.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 2.01%)</title><rect x="80.7531%" y="117" width="2.0084%" height="15" fill="rgb(229,147,28)" fg:x="965" fg:w="24"/><text x="81.0031%" y="127.50">a..</text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="82.6778%" y="101" width="0.0837%" height="15" fill="rgb(211,29,28)" fg:x="988" fg:w="1"/><text x="82.9278%" y="111.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="83.5983%" y="165" width="0.1674%" height="15" fill="rgb(228,72,33)" fg:x="999" fg:w="2"/><text x="83.8483%" y="175.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.08%)</title><rect x="83.7657%" y="165" width="0.0837%" height="15" fill="rgb(205,214,31)" fg:x="1001" fg:w="1"/><text x="84.0157%" y="175.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.08%)</title><rect x="83.7657%" y="149" width="0.0837%" height="15" fill="rgb(224,111,15)" fg:x="1001" fg:w="1"/><text x="84.0157%" y="159.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.08%)</title><rect x="83.8494%" y="165" width="0.0837%" height="15" fill="rgb(253,21,26)" fg:x="1002" fg:w="1"/><text x="84.0994%" y="175.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="83.9331%" y="165" width="0.0837%" height="15" fill="rgb(245,139,43)" fg:x="1003" fg:w="1"/><text x="84.1831%" y="175.50"></text></g><g><title>free_tiny (1 samples, 0.08%)</title><rect x="84.0167%" y="165" width="0.0837%" height="15" fill="rgb(252,170,7)" fg:x="1004" fg:w="1"/><text x="84.2667%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.33%)</title><rect x="84.6862%" y="149" width="0.3347%" height="15" fill="rgb(231,118,14)" fg:x="1012" fg:w="4"/><text x="84.9362%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="84.9372%" y="133" width="0.0837%" height="15" fill="rgb(238,83,0)" fg:x="1015" fg:w="1"/><text x="85.1872%" y="143.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="85.1046%" y="117" width="0.0837%" height="15" fill="rgb(221,39,39)" fg:x="1017" fg:w="1"/><text x="85.3546%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.33%)</title><rect x="85.0209%" y="149" width="0.3347%" height="15" fill="rgb(222,119,46)" fg:x="1016" fg:w="4"/><text x="85.2709%" y="159.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="85.1046%" y="133" width="0.2510%" height="15" fill="rgb(222,165,49)" fg:x="1017" fg:w="3"/><text x="85.3546%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="85.1883%" y="117" width="0.1674%" height="15" fill="rgb(219,113,52)" fg:x="1018" fg:w="2"/><text x="85.4383%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 1.34%)</title><rect x="84.1004%" y="165" width="1.3389%" height="15" fill="rgb(214,7,15)" fg:x="1005" fg:w="16"/><text x="84.3504%" y="175.50"></text></g><g><title>malloc (1 samples, 0.08%)</title><rect x="85.3556%" y="149" width="0.0837%" height="15" fill="rgb(235,32,4)" fg:x="1020" fg:w="1"/><text x="85.6056%" y="159.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.33%)</title><rect x="85.4393%" y="165" width="0.3347%" height="15" fill="rgb(238,90,54)" fg:x="1021" fg:w="4"/><text x="85.6893%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (4 samples, 0.33%)</title><rect x="85.4393%" y="149" width="0.3347%" height="15" fill="rgb(213,208,19)" fg:x="1021" fg:w="4"/><text x="85.6893%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="85.6904%" y="133" width="0.0837%" height="15" fill="rgb(233,156,4)" fg:x="1024" fg:w="1"/><text x="85.9404%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (5 samples, 0.42%)</title><rect x="85.8577%" y="149" width="0.4184%" height="15" fill="rgb(207,194,5)" fg:x="1026" fg:w="5"/><text x="86.1077%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.17%)</title><rect x="86.2762%" y="149" width="0.1674%" height="15" fill="rgb(206,111,30)" fg:x="1031" fg:w="2"/><text x="86.5262%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (9 samples, 0.75%)</title><rect x="85.7741%" y="165" width="0.7531%" height="15" fill="rgb(243,70,54)" fg:x="1025" fg:w="9"/><text x="86.0241%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.08%)</title><rect x="86.4435%" y="149" width="0.0837%" height="15" fill="rgb(242,28,8)" fg:x="1033" fg:w="1"/><text x="86.6935%" y="159.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="86.9456%" y="133" width="0.0837%" height="15" fill="rgb(219,106,18)" fg:x="1039" fg:w="1"/><text x="87.1956%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.25%)</title><rect x="86.9456%" y="149" width="0.2510%" height="15" fill="rgb(244,222,10)" fg:x="1039" fg:w="3"/><text x="87.1956%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.17%)</title><rect x="87.0293%" y="133" width="0.1674%" height="15" fill="rgb(236,179,52)" fg:x="1040" fg:w="2"/><text x="87.2793%" y="143.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="87.0293%" y="117" width="0.1674%" height="15" fill="rgb(213,23,39)" fg:x="1040" fg:w="2"/><text x="87.2793%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="87.0293%" y="101" width="0.1674%" height="15" fill="rgb(238,48,10)" fg:x="1040" fg:w="2"/><text x="87.2793%" y="111.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="87.3640%" y="133" width="0.0837%" height="15" fill="rgb(251,196,23)" fg:x="1044" fg:w="1"/><text x="87.6140%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (5 samples, 0.42%)</title><rect x="87.1967%" y="149" width="0.4184%" height="15" fill="rgb(250,152,24)" fg:x="1042" fg:w="5"/><text x="87.4467%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (2 samples, 0.17%)</title><rect x="87.4477%" y="133" width="0.1674%" height="15" fill="rgb(209,150,17)" fg:x="1045" fg:w="2"/><text x="87.6977%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.08%)</title><rect x="87.8661%" y="133" width="0.0837%" height="15" fill="rgb(234,202,34)" fg:x="1050" fg:w="1"/><text x="88.1161%" y="143.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="87.9498%" y="101" width="0.0837%" height="15" fill="rgb(253,148,53)" fg:x="1051" fg:w="1"/><text x="88.1998%" y="111.50"></text></g><g><title>rack_get_thread_index (4 samples, 0.33%)</title><rect x="88.2008%" y="69" width="0.3347%" height="15" fill="rgb(218,129,16)" fg:x="1054" fg:w="4"/><text x="88.4508%" y="79.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (30 samples, 2.51%)</title><rect x="86.5272%" y="165" width="2.5105%" height="15" fill="rgb(216,85,19)" fg:x="1034" fg:w="30"/><text x="86.7772%" y="175.50">zz..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (17 samples, 1.42%)</title><rect x="87.6151%" y="149" width="1.4226%" height="15" fill="rgb(235,228,7)" fg:x="1047" fg:w="17"/><text x="87.8651%" y="159.50"></text></g><g><title>vexy_json_core::parser::unescape_string (13 samples, 1.09%)</title><rect x="87.9498%" y="133" width="1.0879%" height="15" fill="rgb(245,175,0)" fg:x="1051" fg:w="13"/><text x="88.1998%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 1.09%)</title><rect x="87.9498%" y="117" width="1.0879%" height="15" fill="rgb(208,168,36)" fg:x="1051" fg:w="13"/><text x="88.1998%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 1.00%)</title><rect x="88.0335%" y="101" width="1.0042%" height="15" fill="rgb(246,171,24)" fg:x="1052" fg:w="12"/><text x="88.2835%" y="111.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.84%)</title><rect x="88.2008%" y="85" width="0.8368%" height="15" fill="rgb(215,142,24)" fg:x="1054" fg:w="10"/><text x="88.4508%" y="95.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.50%)</title><rect x="88.5356%" y="69" width="0.5021%" height="15" fill="rgb(250,187,7)" fg:x="1058" fg:w="6"/><text x="88.7856%" y="79.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="88.8703%" y="53" width="0.1674%" height="15" fill="rgb(228,66,33)" fg:x="1062" fg:w="2"/><text x="89.1203%" y="63.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="89.1213%" y="149" width="0.0837%" height="15" fill="rgb(234,215,21)" fg:x="1065" fg:w="1"/><text x="89.3713%" y="159.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.17%)</title><rect x="89.2050%" y="149" width="0.1674%" height="15" fill="rgb(222,191,20)" fg:x="1066" fg:w="2"/><text x="89.4550%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.25%)</title><rect x="89.4561%" y="133" width="0.2510%" height="15" fill="rgb(245,79,54)" fg:x="1069" fg:w="3"/><text x="89.7061%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="89.6234%" y="117" width="0.0837%" height="15" fill="rgb(240,10,37)" fg:x="1071" fg:w="1"/><text x="89.8734%" y="127.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="89.7071%" y="101" width="0.0837%" height="15" fill="rgb(214,192,32)" fg:x="1072" fg:w="1"/><text x="89.9571%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.50%)</title><rect x="89.3724%" y="149" width="0.5021%" height="15" fill="rgb(209,36,54)" fg:x="1068" fg:w="6"/><text x="89.6224%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.17%)</title><rect x="89.7071%" y="133" width="0.1674%" height="15" fill="rgb(220,10,11)" fg:x="1072" fg:w="2"/><text x="89.9571%" y="143.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="89.7071%" y="117" width="0.1674%" height="15" fill="rgb(221,106,17)" fg:x="1072" fg:w="2"/><text x="89.9571%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="89.7908%" y="101" width="0.0837%" height="15" fill="rgb(251,142,44)" fg:x="1073" fg:w="1"/><text x="90.0408%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="89.7908%" y="85" width="0.0837%" height="15" fill="rgb(238,13,15)" fg:x="1073" fg:w="1"/><text x="90.0408%" y="95.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (3 samples, 0.25%)</title><rect x="90.1255%" y="133" width="0.2510%" height="15" fill="rgb(208,107,27)" fg:x="1077" fg:w="3"/><text x="90.3755%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="90.3766%" y="133" width="0.2510%" height="15" fill="rgb(205,136,37)" fg:x="1080" fg:w="3"/><text x="90.6266%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (10 samples, 0.84%)</title><rect x="89.8745%" y="149" width="0.8368%" height="15" fill="rgb(250,205,27)" fg:x="1074" fg:w="10"/><text x="90.1245%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto559_ctx537_x (1 samples, 0.08%)</title><rect x="90.6276%" y="133" width="0.0837%" height="15" fill="rgb(210,80,43)" fg:x="1083" fg:w="1"/><text x="90.8776%" y="143.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="90.7113%" y="133" width="0.0837%" height="15" fill="rgb(247,160,36)" fg:x="1084" fg:w="1"/><text x="90.9613%" y="143.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.08%)</title><rect x="90.7950%" y="133" width="0.0837%" height="15" fill="rgb(234,13,49)" fg:x="1085" fg:w="1"/><text x="91.0450%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (6 samples, 0.50%)</title><rect x="90.7113%" y="149" width="0.5021%" height="15" fill="rgb(234,122,0)" fg:x="1084" fg:w="6"/><text x="90.9613%" y="159.50"></text></g><g><title>free_tiny (4 samples, 0.33%)</title><rect x="90.8787%" y="133" width="0.3347%" height="15" fill="rgb(207,146,38)" fg:x="1086" fg:w="4"/><text x="91.1287%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.08%)</title><rect x="91.2134%" y="149" width="0.0837%" height="15" fill="rgb(207,177,25)" fg:x="1090" fg:w="1"/><text x="91.4634%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="91.3808%" y="117" width="0.0837%" height="15" fill="rgb(211,178,42)" fg:x="1092" fg:w="1"/><text x="91.6308%" y="127.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (3 samples, 0.25%)</title><rect x="91.2971%" y="149" width="0.2510%" height="15" fill="rgb(230,69,54)" fg:x="1091" fg:w="3"/><text x="91.5471%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="91.2971%" y="133" width="0.2510%" height="15" fill="rgb(214,135,41)" fg:x="1091" fg:w="3"/><text x="91.5471%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.08%)</title><rect x="91.4644%" y="117" width="0.0837%" height="15" fill="rgb(237,67,25)" fg:x="1093" fg:w="1"/><text x="91.7144%" y="127.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.08%)</title><rect x="91.8828%" y="101" width="0.0837%" height="15" fill="rgb(222,189,50)" fg:x="1098" fg:w="1"/><text x="92.1328%" y="111.50"></text></g><g><title>_malloc_zone_realloc (5 samples, 0.42%)</title><rect x="92.0502%" y="85" width="0.4184%" height="15" fill="rgb(245,148,34)" fg:x="1100" fg:w="5"/><text x="92.3002%" y="95.50"></text></g><g><title>szone_realloc (3 samples, 0.25%)</title><rect x="92.2176%" y="69" width="0.2510%" height="15" fill="rgb(222,29,6)" fg:x="1102" fg:w="3"/><text x="92.4676%" y="79.50"></text></g><g><title>szone_size (2 samples, 0.17%)</title><rect x="92.3013%" y="53" width="0.1674%" height="15" fill="rgb(221,189,43)" fg:x="1103" fg:w="2"/><text x="92.5513%" y="63.50"></text></g><g><title>tiny_size (2 samples, 0.17%)</title><rect x="92.3013%" y="37" width="0.1674%" height="15" fill="rgb(207,36,27)" fg:x="1103" fg:w="2"/><text x="92.5513%" y="47.50"></text></g><g><title>_realloc (9 samples, 0.75%)</title><rect x="91.9665%" y="101" width="0.7531%" height="15" fill="rgb(217,90,24)" fg:x="1099" fg:w="9"/><text x="92.2165%" y="111.50"></text></g><g><title>szone_size (3 samples, 0.25%)</title><rect x="92.4686%" y="85" width="0.2510%" height="15" fill="rgb(224,66,35)" fg:x="1105" fg:w="3"/><text x="92.7186%" y="95.50"></text></g><g><title>tiny_size (3 samples, 0.25%)</title><rect x="92.4686%" y="69" width="0.2510%" height="15" fill="rgb(221,13,50)" fg:x="1105" fg:w="3"/><text x="92.7186%" y="79.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="92.8870%" y="85" width="0.0837%" height="15" fill="rgb(236,68,49)" fg:x="1110" fg:w="1"/><text x="93.1370%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (22 samples, 1.84%)</title><rect x="91.8828%" y="117" width="1.8410%" height="15" fill="rgb(229,146,28)" fg:x="1098" fg:w="22"/><text x="92.1328%" y="127.50">a..</text></g><g><title>szone_malloc_should_clear (12 samples, 1.00%)</title><rect x="92.7197%" y="101" width="1.0042%" height="15" fill="rgb(225,31,38)" fg:x="1108" fg:w="12"/><text x="92.9697%" y="111.50"></text></g><g><title>tiny_malloc_should_clear (9 samples, 0.75%)</title><rect x="92.9707%" y="85" width="0.7531%" height="15" fill="rgb(250,208,3)" fg:x="1111" fg:w="9"/><text x="93.2207%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.42%)</title><rect x="93.3054%" y="69" width="0.4184%" height="15" fill="rgb(246,54,23)" fg:x="1115" fg:w="5"/><text x="93.5554%" y="79.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.25%)</title><rect x="93.4728%" y="53" width="0.2510%" height="15" fill="rgb(243,76,11)" fg:x="1117" fg:w="3"/><text x="93.7228%" y="63.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (57 samples, 4.77%)</title><rect x="89.0377%" y="165" width="4.7699%" height="15" fill="rgb(245,21,50)" fg:x="1064" fg:w="57"/><text x="89.2877%" y="175.50">vexy_json_..</text></g><g><title>vexy_json_core::parser::unescape_string (27 samples, 2.26%)</title><rect x="91.5481%" y="149" width="2.2594%" height="15" fill="rgb(228,9,43)" fg:x="1094" fg:w="27"/><text x="91.7981%" y="159.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (25 samples, 2.09%)</title><rect x="91.7155%" y="133" width="2.0921%" height="15" fill="rgb(208,100,47)" fg:x="1096" fg:w="25"/><text x="91.9655%" y="143.50">a..</text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.7238%" y="117" width="0.0837%" height="15" fill="rgb(232,26,8)" fg:x="1120" fg:w="1"/><text x="93.9738%" y="127.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.08%)</title><rect x="93.8075%" y="165" width="0.0837%" height="15" fill="rgb(216,166,38)" fg:x="1121" fg:w="1"/><text x="94.0575%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="94.0586%" y="133" width="0.0837%" height="15" fill="rgb(251,202,51)" fg:x="1124" fg:w="1"/><text x="94.3086%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (5 samples, 0.42%)</title><rect x="93.8912%" y="165" width="0.4184%" height="15" fill="rgb(254,216,34)" fg:x="1122" fg:w="5"/><text x="94.1412%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.33%)</title><rect x="93.9749%" y="149" width="0.3347%" height="15" fill="rgb(251,32,27)" fg:x="1123" fg:w="4"/><text x="94.2249%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.17%)</title><rect x="94.1423%" y="133" width="0.1674%" height="15" fill="rgb(208,127,28)" fg:x="1125" fg:w="2"/><text x="94.3923%" y="143.50"></text></g><g><title>_malloc_zone_malloc (3 samples, 0.25%)</title><rect x="94.6444%" y="133" width="0.2510%" height="15" fill="rgb(224,137,22)" fg:x="1131" fg:w="3"/><text x="94.8944%" y="143.50"></text></g><g><title>szone_good_size (1 samples, 0.08%)</title><rect x="95.1464%" y="85" width="0.0837%" height="15" fill="rgb(254,70,32)" fg:x="1137" fg:w="1"/><text x="95.3964%" y="95.50"></text></g><g><title>_realloc (3 samples, 0.25%)</title><rect x="95.0628%" y="117" width="0.2510%" height="15" fill="rgb(229,75,37)" fg:x="1136" fg:w="3"/><text x="95.3128%" y="127.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.17%)</title><rect x="95.1464%" y="101" width="0.1674%" height="15" fill="rgb(252,64,23)" fg:x="1137" fg:w="2"/><text x="95.3964%" y="111.50"></text></g><g><title>szone_realloc (1 samples, 0.08%)</title><rect x="95.2301%" y="85" width="0.0837%" height="15" fill="rgb(232,162,48)" fg:x="1138" fg:w="1"/><text x="95.4801%" y="95.50"></text></g><g><title>tiny_try_realloc_in_place (1 samples, 0.08%)</title><rect x="95.2301%" y="69" width="0.0837%" height="15" fill="rgb(246,160,12)" fg:x="1138" fg:w="1"/><text x="95.4801%" y="79.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.25%)</title><rect x="95.3138%" y="101" width="0.2510%" height="15" fill="rgb(247,166,0)" fg:x="1139" fg:w="3"/><text x="95.5638%" y="111.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (165 samples, 13.81%)</title><rect x="82.7615%" y="181" width="13.8075%" height="15" fill="rgb(249,219,21)" fg:x="989" fg:w="165"/><text x="83.0115%" y="191.50">vexy_json_core::parser::P..</text></g><g><title>vexy_json_core::parser::unescape_string (27 samples, 2.26%)</title><rect x="94.3096%" y="165" width="2.2594%" height="15" fill="rgb(205,209,3)" fg:x="1127" fg:w="27"/><text x="94.5596%" y="175.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (23 samples, 1.92%)</title><rect x="94.6444%" y="149" width="1.9247%" height="15" fill="rgb(243,44,1)" fg:x="1131" fg:w="23"/><text x="94.8944%" y="159.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 1.67%)</title><rect x="94.8954%" y="133" width="1.6736%" height="15" fill="rgb(206,159,16)" fg:x="1134" fg:w="20"/><text x="95.1454%" y="143.50"></text></g><g><title>szone_malloc_should_clear (15 samples, 1.26%)</title><rect x="95.3138%" y="117" width="1.2552%" height="15" fill="rgb(244,77,30)" fg:x="1139" fg:w="15"/><text x="95.5638%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (12 samples, 1.00%)</title><rect x="95.5649%" y="101" width="1.0042%" height="15" fill="rgb(218,69,12)" fg:x="1142" fg:w="12"/><text x="95.8149%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="96.4017%" y="85" width="0.1674%" height="15" fill="rgb(212,87,7)" fg:x="1152" fg:w="2"/><text x="96.6517%" y="95.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="96.4854%" y="69" width="0.0837%" height="15" fill="rgb(245,114,25)" fg:x="1153" fg:w="1"/><text x="96.7354%" y="79.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (2 samples, 0.17%)</title><rect x="96.5690%" y="181" width="0.1674%" height="15" fill="rgb(210,61,42)" fg:x="1154" fg:w="2"/><text x="96.8190%" y="191.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="96.8201%" y="165" width="0.0837%" height="15" fill="rgb(211,52,33)" fg:x="1157" fg:w="1"/><text x="97.0701%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="96.8201%" y="149" width="0.0837%" height="15" fill="rgb(234,58,33)" fg:x="1157" fg:w="1"/><text x="97.0701%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (5 samples, 0.42%)</title><rect x="96.7364%" y="181" width="0.4184%" height="15" fill="rgb(220,115,36)" fg:x="1156" fg:w="5"/><text x="96.9864%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="96.9038%" y="165" width="0.2510%" height="15" fill="rgb(243,153,54)" fg:x="1158" fg:w="3"/><text x="97.1538%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="96.9038%" y="149" width="0.2510%" height="15" fill="rgb(251,47,18)" fg:x="1158" fg:w="3"/><text x="97.1538%" y="159.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.17%)</title><rect x="97.6569%" y="149" width="0.1674%" height="15" fill="rgb(242,102,42)" fg:x="1167" fg:w="2"/><text x="97.9069%" y="159.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.25%)</title><rect x="97.9916%" y="117" width="0.2510%" height="15" fill="rgb(234,31,38)" fg:x="1171" fg:w="3"/><text x="98.2416%" y="127.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (399 samples, 33.39%)</title><rect x="65.5230%" y="197" width="33.3891%" height="15" fill="rgb(221,117,51)" fg:x="783" fg:w="399"/><text x="65.7730%" y="207.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (21 samples, 1.76%)</title><rect x="97.1548%" y="181" width="1.7573%" height="15" fill="rgb(212,20,18)" fg:x="1161" fg:w="21"/><text x="97.4048%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (15 samples, 1.26%)</title><rect x="97.6569%" y="165" width="1.2552%" height="15" fill="rgb(245,133,36)" fg:x="1167" fg:w="15"/><text x="97.9069%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 1.09%)</title><rect x="97.8243%" y="149" width="1.0879%" height="15" fill="rgb(212,6,19)" fg:x="1169" fg:w="13"/><text x="98.0743%" y="159.50"></text></g><g><title>szone_malloc_should_clear (11 samples, 0.92%)</title><rect x="97.9916%" y="133" width="0.9205%" height="15" fill="rgb(218,1,36)" fg:x="1171" fg:w="11"/><text x="98.2416%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (8 samples, 0.67%)</title><rect x="98.2427%" y="117" width="0.6695%" height="15" fill="rgb(246,84,54)" fg:x="1174" fg:w="8"/><text x="98.4927%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.33%)</title><rect x="98.5774%" y="101" width="0.3347%" height="15" fill="rgb(242,110,6)" fg:x="1178" fg:w="4"/><text x="98.8274%" y="111.50"></text></g><g><title>__rustc::__rdl_alloc (2 samples, 0.17%)</title><rect x="99.1632%" y="165" width="0.1674%" height="15" fill="rgb(214,47,5)" fg:x="1185" fg:w="2"/><text x="99.4132%" y="175.50"></text></g><g><title>_malloc_zone_realloc (3 samples, 0.25%)</title><rect x="99.4142%" y="133" width="0.2510%" height="15" fill="rgb(218,159,25)" fg:x="1188" fg:w="3"/><text x="99.6642%" y="143.50"></text></g><g><title>szone_realloc (3 samples, 0.25%)</title><rect x="99.4142%" y="117" width="0.2510%" height="15" fill="rgb(215,211,28)" fg:x="1188" fg:w="3"/><text x="99.6642%" y="127.50"></text></g><g><title>szone_size (2 samples, 0.17%)</title><rect x="99.4979%" y="101" width="0.1674%" height="15" fill="rgb(238,59,32)" fg:x="1189" fg:w="2"/><text x="99.7479%" y="111.50"></text></g><g><title>tiny_size (2 samples, 0.17%)</title><rect x="99.4979%" y="85" width="0.1674%" height="15" fill="rgb(226,82,3)" fg:x="1189" fg:w="2"/><text x="99.7479%" y="95.50"></text></g><g><title>_realloc (5 samples, 0.42%)</title><rect x="99.3305%" y="149" width="0.4184%" height="15" fill="rgb(240,164,32)" fg:x="1187" fg:w="5"/><text x="99.5805%" y="159.50"></text></g><g><title>szone_size (1 samples, 0.08%)</title><rect x="99.6653%" y="133" width="0.0837%" height="15" fill="rgb(232,46,7)" fg:x="1191" fg:w="1"/><text x="99.9153%" y="143.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="99.7490%" y="133" width="0.0837%" height="15" fill="rgb(229,129,53)" fg:x="1192" fg:w="1"/><text x="99.9990%" y="143.50"></text></g><g><title>all (1,195 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(234,188,29)" fg:x="0" fg:w="1195"/><text x="0.2500%" y="367.50"></text></g><g><title>start (1,194 samples, 99.92%)</title><rect x="0.0837%" y="341" width="99.9163%" height="15" fill="rgb(246,141,4)" fg:x="1" fg:w="1194"/><text x="0.3337%" y="351.50">start</text></g><g><title>main (1,188 samples, 99.41%)</title><rect x="0.5858%" y="325" width="99.4142%" height="15" fill="rgb(229,23,39)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="335.50">main</text></g><g><title>std::rt::lang_start_internal (1,188 samples, 99.41%)</title><rect x="0.5858%" y="309" width="99.4142%" height="15" fill="rgb(206,12,3)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="319.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (1,188 samples, 99.41%)</title><rect x="0.5858%" y="293" width="99.4142%" height="15" fill="rgb(252,226,20)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="303.50">std::rt::lang_start::_{{closure}}</text></g><g><title>core::ops::function::FnOnce::call_once (1,188 samples, 99.41%)</title><rect x="0.5858%" y="277" width="99.4142%" height="15" fill="rgb(216,123,35)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="287.50">core::ops::function::FnOnce::call_once</text></g><g><title>profile_parser::main (1,188 samples, 99.41%)</title><rect x="0.5858%" y="261" width="99.4142%" height="15" fill="rgb(212,68,40)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="271.50">profile_parser::main</text></g><g><title>vexy_json_core::parser::parse (865 samples, 72.38%)</title><rect x="27.6151%" y="245" width="72.3849%" height="15" fill="rgb(254,125,32)" fg:x="330" fg:w="865"/><text x="27.8651%" y="255.50">vexy_json_core::parser::parse</text></g><g><title>vexy_json_core::parser::Parser::parse (865 samples, 72.38%)</title><rect x="27.6151%" y="229" width="72.3849%" height="15" fill="rgb(253,97,22)" fg:x="330" fg:w="865"/><text x="27.8651%" y="239.50">vexy_json_core::parser::Parser::parse</text></g><g><title>vexy_json_core::parser::Parser::parse_value (453 samples, 37.91%)</title><rect x="62.0921%" y="213" width="37.9079%" height="15" fill="rgb(241,101,14)" fg:x="742" fg:w="453"/><text x="62.3421%" y="223.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (13 samples, 1.09%)</title><rect x="98.9121%" y="197" width="1.0879%" height="15" fill="rgb(238,103,29)" fg:x="1182" fg:w="13"/><text x="99.1621%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (11 samples, 0.92%)</title><rect x="99.0795%" y="181" width="0.9205%" height="15" fill="rgb(233,195,47)" fg:x="1184" fg:w="11"/><text x="99.3295%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.67%)</title><rect x="99.3305%" y="165" width="0.6695%" height="15" fill="rgb(246,218,30)" fg:x="1187" fg:w="8"/><text x="99.5805%" y="175.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="99.7490%" y="149" width="0.2510%" height="15" fill="rgb(219,145,47)" fg:x="1192" fg:w="3"/><text x="99.9990%" y="159.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="99.8326%" y="133" width="0.1674%" height="15" fill="rgb(243,12,26)" fg:x="1193" fg:w="2"/><text x="100.0826%" y="143.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="99.9163%" y="117" width="0.0837%" height="15" fill="rgb(214,87,16)" fg:x="1194" fg:w="1"/><text x="100.1663%" y="127.50"></text></g></svg></svg>
llms.txt---
llms.txt-tests/jsonic_comprehensive_tests.rs-//! to ensure 100% feature parity and comprehensive coverage of edge cases.
llms.txt-tests/jsonic_comprehensive_tests.rs-
llms.txt-tests/jsonic_comprehensive_tests.rs-use rustc_hash::FxHashMap;
llms.txt:tests/jsonic_comprehensive_tests.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
llms.txt-tests/jsonic_comprehensive_tests.rs-
llms.txt-tests/jsonic_comprehensive_tests.rs-/// Helper to create expected values more easily
llms.txt-tests/jsonic_comprehensive_tests.rs-fn obj(pairs: &[(&str, Value)]) -> Value {
--
llms.txt-tests/jsonic_comprehensive_tests.rs-}
llms.txt-tests/jsonic_comprehensive_tests.rs-
llms.txt-tests/jsonic_comprehensive_tests.rs-fn n(num: i64) -> Value {
llms.txt:tests/jsonic_comprehensive_tests.rs:    Value::Number(vexy_json::Number::Integer(num))
llms.txt-tests/jsonic_comprehensive_tests.rs-}
llms.txt-tests/jsonic_comprehensive_tests.rs-
llms.txt-tests/jsonic_comprehensive_tests.rs-fn f(num: f64) -> Value {
llms.txt:tests/jsonic_comprehensive_tests.rs:    Value::Number(vexy_json::Number::Float(num))
llms.txt-tests/jsonic_comprehensive_tests.rs-}
llms.txt-tests/jsonic_comprehensive_tests.rs-
llms.txt-tests/jsonic_comprehensive_tests.rs-fn b(val: bool) -> Value {
--
llms.txt-tests/jsonic_comprehensive_tests.rs-        let large_result = parse("999999999999999999999").unwrap();
llms.txt-tests/jsonic_comprehensive_tests.rs-        assert!(matches!(
llms.txt-tests/jsonic_comprehensive_tests.rs-            large_result,
llms.txt:tests/jsonic_comprehensive_tests.rs:            Value::Number(vexy_json::Number::Float(_))
llms.txt-tests/jsonic_comprehensive_tests.rs-        ));
llms.txt-tests/jsonic_comprehensive_tests.rs-    }
llms.txt-tests/jsonic_comprehensive_tests.rs-}
--
llms.txt-docs/index.md-nav_order: 1
llms.txt-docs/index.md----
llms.txt-docs/index.md-
llms.txt:docs/index.md:# Welcome to vexy_json v2.0.0
llms.txt-docs/index.md-
llms.txt:docs/index.md:`vexy_json` is a forgiving JSON parser written in Rust, inspired by the JavaScript library `jsonic`. It provides robust, flexible parsing for both strict and non-standard JSON, supporting features like comments, unquoted keys, trailing commas, implicit arrays/objects, and more. vexy_json is available as a Rust library, CLI tool, and WebAssembly module for browser/Node.js usage.
llms.txt-docs/index.md-
llms.txt-docs/index.md-## 🚀 New in Version 2.0.0
llms.txt-docs/index.md-
--
llms.txt-docs/index.md-## Quick Start (Rust)
llms.txt-docs/index.md-
llms.txt-docs/index.md-```rust
llms.txt:docs/index.md:use vexy_json::parse;
llms.txt-docs/index.md-
llms.txt-docs/index.md-fn main() {
llms.txt-docs/index.md-    let data = r#"{ key: 1, /* comment */ arr: [1,2,3,], hex: 0x10 }"#;
--
llms.txt-docs/index.md-
llms.txt-docs/index.md-## Contributing
llms.txt-docs/index.md-
llms.txt:docs/index.md:See [Contributing](contributing.md) for how to help improve vexy_json.
llms.txt-docs/index.md-
llms.txt:docs/index.md:📦 **[Download the latest CLI release](https://github.com/twardoch/vexy_json/releases/latest)** - Get the `vexy_json` command-line interface for your platform.
llms.txt-docs/index.md-
llms.txt-docs/index.md-## Features
llms.txt-docs/index.md-
llms.txt-docs/index.md-- **Forgiving Parsing**: Handles comments, trailing commas, unquoted keys, and implicit top-level objects/arrays.
llms.txt-docs/index.md-- **Rust Idiomatic API**: Designed with Rust's ownership, borrowing, and error handling principles in mind.
llms.txt-docs/index.md-- **Performance**: Optimized for speed and efficiency.
llms.txt:docs/index.md:- **Serde Integration**: Seamlessly convert `vexy_json::Value` to and from other data formats using the `serde` framework.
llms.txt:docs/index.md:- **WebAssembly (WASM) Bindings**: Use `vexy_json` directly in JavaScript environments.
llms.txt-docs/index.md-- **Interactive Web Tool**: Browser-based parser with real-time feedback and sharing capabilities.
llms.txt-docs/index.md-- **Compatibility**: Aims for API compatibility with the original `jsonic.js` where appropriate.
llms.txt-docs/index.md-
llms.txt-docs/index.md-## Getting Started
llms.txt-docs/index.md-
llms.txt:docs/index.md:To use `vexy_json` in your Rust project, add it to your `Cargo.toml`:
llms.txt-docs/index.md-
llms.txt-docs/index.md-```toml
llms.txt-docs/index.md-[dependencies]
llms.txt:docs/index.md:vexy_json = "2.0.0" # Replace with the latest version
llms.txt-docs/index.md-```
llms.txt-docs/index.md-
llms.txt-docs/index.md-Then, you can parse JSON-like strings:
llms.txt-docs/index.md-
llms.txt-docs/index.md-```rust
llms.txt:docs/index.md:use vexy_json::parse;
llms.txt-docs/index.md-
llms.txt-docs/index.md-fn main() {
llms.txt-docs/index.md-    let json_str = r#"
--
llms.txt-docs/index.md-
llms.txt-docs/index.md-## Project Status
llms.txt-docs/index.md-
llms.txt:docs/index.md:`vexy_json` v2.0.0 is production-ready with comprehensive features including streaming parsing, parallel processing, and a plugin architecture. We welcome contributions to expand the ecosystem!
llms.txt-docs/index.md-
llms.txt-docs/index.md-## License
llms.txt-docs/index.md-
llms.txt:docs/index.md:`vexy_json` is distributed under the MIT License. See the [LICENSE](https://github.com/twardoch/vexy_json/blob/main/LICENSE) file for more details.
llms.txt---
llms.txt:docs/assets/css/_tool.scss:/* Custom styles for vexy_json web tool */
llms.txt-docs/assets/css/_tool.scss-
llms.txt-docs/assets/css/_tool.scss-/* Editor enhancements */
llms.txt-docs/assets/css/_tool.scss-.textarea-editor {
--
llms.txt-docs/assets/css/style.scss----
llms.txt-docs/assets/css/style.scss-
llms.txt-docs/assets/css/style.scss-// @import "just-the-docs";
llms.txt:docs/assets/css/style.scss:// Custom styles for vexy_json documentation site
llms.txt-docs/assets/css/style.scss-// This file extends the just-the-docs theme with custom styling
llms.txt-docs/assets/css/style.scss-
llms.txt-docs/assets/css/style.scss-// Import our tool-specific styles
--
llms.txt-docs/assets/css/style.scss-
llms.txt-docs/assets/css/style.scss-// Custom color scheme refinements
llms.txt-docs/assets/css/style.scss-:root {
llms.txt:docs/assets/css/style.scss:  --vexy_json-primary: #0969da;
llms.txt:docs/assets/css/style.scss:  --vexy_json-secondary: #656d76;
llms.txt:docs/assets/css/style.scss:  --vexy_json-accent: #0550ae;
llms.txt:docs/assets/css/style.scss:  --vexy_json-success: #1a7f37;
llms.txt:docs/assets/css/style.scss:  --vexy_json-warning: #bf8700;
llms.txt:docs/assets/css/style.scss:  --vexy_json-danger: #cf222e;
llms.txt-docs/assets/css/style.scss-}
llms.txt-docs/assets/css/style.scss-
llms.txt-docs/assets/css/style.scss-// Enhanced code blocks for JSON examples
--
llms.txt-docs/assets/css/style.scss-      .nav-list-link {
llms.txt-docs/assets/css/style.scss-        &.active {
llms.txt-docs/assets/css/style.scss-          font-weight: 600;
llms.txt:docs/assets/css/style.scss:          color: var(--vexy_json-primary);
llms.txt-docs/assets/css/style.scss-        }
llms.txt-docs/assets/css/style.scss-      }
llms.txt-docs/assets/css/style.scss-    }
--
llms.txt-docs/assets/css/style.scss-  
llms.txt-docs/assets/css/style.scss-  .footer-content {
llms.txt-docs/assets/css/style.scss-    font-size: 14px;
llms.txt:docs/assets/css/style.scss:    color: var(--vexy_json-secondary);
llms.txt-docs/assets/css/style.scss-    
llms.txt-docs/assets/css/style.scss-    a {
llms.txt:docs/assets/css/style.scss:      color: var(--vexy_json-primary);
llms.txt-docs/assets/css/style.scss-      text-decoration: none;
llms.txt-docs/assets/css/style.scss-      
llms.txt-docs/assets/css/style.scss-      &:hover {
--
llms.txt-docs/assets/css/style.scss-}
llms.txt-docs/assets/css/style.scss-
llms.txt-docs/assets/css/style.scss-// Custom button styles
llms.txt:docs/assets/css/style.scss:.btn-vexy_json {
llms.txt:docs/assets/css/style.scss:  background-color: var(--vexy_json-primary);
llms.txt:docs/assets/css/style.scss:  border: 1px solid var(--vexy_json-primary);
llms.txt-docs/assets/css/style.scss-  color: white;
llms.txt-docs/assets/css/style.scss-  
llms.txt-docs/assets/css/style.scss-  &:hover {
llms.txt:docs/assets/css/style.scss:    background-color: var(--vexy_json-accent);
llms.txt:docs/assets/css/style.scss:    border-color: var(--vexy_json-accent);
llms.txt-docs/assets/css/style.scss-  }
llms.txt-docs/assets/css/style.scss-  
llms.txt-docs/assets/css/style.scss-  &:focus {
--
llms.txt-docs/assets/css/style.scss-    th {
llms.txt-docs/assets/css/style.scss-      background-color: var(--code-background-color);
llms.txt-docs/assets/css/style.scss-      font-weight: 600;
llms.txt:docs/assets/css/style.scss:      color: var(--vexy_json-primary);
llms.txt-docs/assets/css/style.scss-    }
llms.txt-docs/assets/css/style.scss-    
llms.txt-docs/assets/css/style.scss-    td {
--
llms.txt-docs/assets/css/style.scss-  
llms.txt-docs/assets/css/style.scss-  &.callout-info {
llms.txt-docs/assets/css/style.scss-    background-color: rgba(9, 105, 218, 0.1);
llms.txt:docs/assets/css/style.scss:    border-left-color: var(--vexy_json-primary);
llms.txt-docs/assets/css/style.scss-    
llms.txt-docs/assets/css/style.scss-    .callout-title {
llms.txt:docs/assets/css/style.scss:      color: var(--vexy_json-primary);
llms.txt-docs/assets/css/style.scss-      font-weight: 600;
llms.txt-docs/assets/css/style.scss-    }
llms.txt-docs/assets/css/style.scss-  }
llms.txt-docs/assets/css/style.scss-  
llms.txt-docs/assets/css/style.scss-  &.callout-warning {
llms.txt-docs/assets/css/style.scss-    background-color: rgba(191, 135, 0, 0.1);
llms.txt:docs/assets/css/style.scss:    border-left-color: var(--vexy_json-warning);
llms.txt-docs/assets/css/style.scss-    
llms.txt-docs/assets/css/style.scss-    .callout-title {
llms.txt:docs/assets/css/style.scss:      color: var(--vexy_json-warning);
llms.txt-docs/assets/css/style.scss-      font-weight: 600;
llms.txt-docs/assets/css/style.scss-    }
llms.txt-docs/assets/css/style.scss-  }
llms.txt-docs/assets/css/style.scss-  
llms.txt-docs/assets/css/style.scss-  &.callout-success {
llms.txt-docs/assets/css/style.scss-    background-color: rgba(26, 127, 55, 0.1);
llms.txt:docs/assets/css/style.scss:    border-left-color: var(--vexy_json-success);
llms.txt-docs/assets/css/style.scss-    
llms.txt-docs/assets/css/style.scss-    .callout-title {
llms.txt:docs/assets/css/style.scss:      color: var(--vexy_json-success);
llms.txt-docs/assets/css/style.scss-      font-weight: 600;
llms.txt-docs/assets/css/style.scss-    }
llms.txt-docs/assets/css/style.scss-  }
--
llms.txt-docs/assets/css/style.scss-    .stat-value {
llms.txt-docs/assets/css/style.scss-      font-size: 2em;
llms.txt-docs/assets/css/style.scss-      font-weight: 700;
llms.txt:docs/assets/css/style.scss:      color: var(--vexy_json-primary);
llms.txt-docs/assets/css/style.scss-      display: block;
llms.txt-docs/assets/css/style.scss-    }
llms.txt-docs/assets/css/style.scss-    
llms.txt-docs/assets/css/style.scss-    .stat-label {
llms.txt-docs/assets/css/style.scss-      font-size: 0.9em;
llms.txt:docs/assets/css/style.scss:      color: var(--vexy_json-secondary);
llms.txt-docs/assets/css/style.scss-      margin-top: 4px;
llms.txt-docs/assets/css/style.scss-    }
llms.txt-docs/assets/css/style.scss-  }
--
llms.txt-docs/assets/css/style.scss-// Dark mode adjustments
llms.txt-docs/assets/css/style.scss-@media (prefers-color-scheme: dark) {
llms.txt-docs/assets/css/style.scss-  :root {
llms.txt:docs/assets/css/style.scss:    --vexy_json-primary: #58a6ff;
llms.txt:docs/assets/css/style.scss:    --vexy_json-secondary: #8b949e;
llms.txt:docs/assets/css/style.scss:    --vexy_json-accent: #79c0ff;
llms.txt:docs/assets/css/style.scss:    --vexy_json-success: #3fb950;
llms.txt:docs/assets/css/style.scss:    --vexy_json-warning: #d29922;
llms.txt:docs/assets/css/style.scss:    --vexy_json-danger: #f85149;
llms.txt-docs/assets/css/style.scss-  }
llms.txt-docs/assets/css/style.scss-}
llms.txt-docs/assets/css/style.scss-
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\",\"number\":42}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.20s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Comments - Single Line",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\"}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Blocking waiting for file lock on package cache\n    Blocking waiting for file lock on package cache\n    Blocking waiting for file lock on package cache\n    Blocking waiting for file lock on package cache\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.72s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Comments - Multi Line",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\"}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.22s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Comments - Hash Style",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\"}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.27s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Unquoted Keys",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\",\"another\":123}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.23s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Single Quotes",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\",\"mixed\":\"quotes\"}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.22s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Trailing Commas - Object",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\",\"another\":123}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.24s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Trailing Commas - Array",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "[\"a\",\"b\",\"c\"]",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.21s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Implicit Array",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "[\"apple\",\"banana\",\"cherry\"]",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.24s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Implicit Object",
--
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt-docs/internal/test-results/feature-verification-report.json-      "output": "{\"number\":42,\"key\":\"value\"}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.21s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    },
llms.txt-docs/internal/test-results/feature-verification-report.json-    {
llms.txt-docs/internal/test-results/feature-verification-report.json-      "name": "Complex Mixed Features",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "description": "Complex JSON with multiple forgiving features",
llms.txt:docs/internal/test-results/feature-verification-report.json:      "input": "{\n  // Configuration with comments\n  name: 'vexy_json',           // Unquoted key, single quotes\n  version: \"1.1.0\",        /* Version string */\n  features: [\n    \"comments\",\n    'unquoted-keys',       // Mixed quotes\n    \"trailing-commas\",     // Trailing comma next\n  ],                       // Trailing comma in array\n  debug: true,             # Hash comment\n}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "success": true,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "output": "{\"version\":\"1.1.0\",\"debug\":true,\"name\":\"vexy_json\",\"features\":[\"comments\",\"unquoted-keys\",\"trailing-commas\"]}",
llms.txt-docs/internal/test-results/feature-verification-report.json-      "error": null,
llms.txt:docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.19s\n     Running `target/debug/vexy_json`\n"
llms.txt-docs/internal/test-results/feature-verification-report.json-    }
llms.txt-docs/internal/test-results/feature-verification-report.json-  ]
llms.txt-docs/internal/test-results/feature-verification-report.json-}
--
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-# Usage Guide v2.0.0
llms.txt-docs/usage.md-
llms.txt:docs/usage.md:This guide provides in-depth examples for using `vexy_json` v2.0.0 in Rust and JavaScript/WebAssembly, including the new streaming API, parallel processing, and plugin system.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-## Basic Parsing (Rust)
llms.txt-docs/usage.md-
llms.txt:docs/usage.md:The simplest way to use vexy_json is with the `parse` function:
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::parse;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    let json_data = r#"{ key: "value", num: 123, // comment\n trailing: [1,2,3,], hex: 0xFF }"#;
--
llms.txt-docs/usage.md-For more control, use `parse_with_options` and configure `ParserOptions`:
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    let input = "a:1, b:2";
--
llms.txt-docs/usage.md-See [docs/wasm.md](wasm.md) for full API details.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```js
llms.txt:docs/usage.md:import init, { parse_json_with_options } from './pkg/vexy_json_wasm.js';
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-await init();
llms.txt-docs/usage.md-const result = parse_json_with_options('{a:1}', { allow_comments: true });
--
llms.txt-docs/usage.md-For more control over the parsing behavior, you can use `parse_with_options` and configure `ParserOptions`.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    // Example: Strict JSON parsing (disabling all forgiving features)
--
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-## Handling Forgiving Features
llms.txt-docs/usage.md-
llms.txt:docs/usage.md:`vexy_json` excels at parsing JSON with common relaxations. Here are examples of how it handles them:
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-### Comments
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-Both single-line (`//`, `#`) and multi-line (`/* ... */`) comments are ignored.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::parse;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    let json_with_comments = r#"
--
llms.txt-docs/usage.md-Trailing commas in arrays and objects are gracefully handled.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::parse;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    let json_with_trailing_comma = r#"
--
llms.txt-docs/usage.md-Object keys do not need to be quoted, as long as they are valid identifiers.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::parse;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    let json_unquoted_keys = r#"{ firstName: "John", lastName: "Doe" }"#;
--
llms.txt-docs/usage.md-You don't need to wrap your entire input in `{}` or `[]` if it's clearly an object or an array.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::parse;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    // Implicit object
--
llms.txt-docs/usage.md-When the `newline_as_comma` option is enabled, newlines can act as implicit comma separators.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    let mut options = ParserOptions::default();
--
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-## Error Handling
llms.txt-docs/usage.md-
llms.txt:docs/usage.md:`vexy_json` returns a `Result<Value, Error>` which allows for robust error handling. You should always check the `Result` to handle potential parsing issues.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::parse;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn main() {
llms.txt-docs/usage.md-    let invalid_json = r#"{ key: "value }"#; // Missing closing quote
--
llms.txt-docs/usage.md-### Basic Streaming Example
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::{StreamingParser, StreamingEvent};
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn process_large_file(json_content: &str) -> Result<(), Box<dyn std::error::Error>> {
llms.txt-docs/usage.md-    let mut parser = StreamingParser::new();
--
llms.txt-docs/usage.md-Perfect for network streams or reading files in chunks:
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::StreamingParser;
llms.txt-docs/usage.md-use std::io::{BufReader, BufRead};
llms.txt-docs/usage.md-use std::fs::File;
llms.txt-docs/usage.md-
--
llms.txt-docs/usage.md-### Basic Parallel Parsing
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::{parse_parallel, ParallelOptions};
llms.txt-docs/usage.md-use std::fs;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn process_json_files(directory: &str) -> Result<(), Box<dyn std::error::Error>> {
--
llms.txt-docs/usage.md-### Custom Parallel Options
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::{parse_parallel_with_options, ParallelOptions, ParserOptions};
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-let mut parallel_opts = ParallelOptions::default();
llms.txt-docs/usage.md-parallel_opts.num_threads = Some(8);  // Use 8 threads
--
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-## Plugin System (New in v2.0.0)
llms.txt-docs/usage.md-
llms.txt:docs/usage.md:Extend vexy_json with custom functionality through plugins.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-### Creating a Custom Plugin
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::{Plugin, Value, Error};
llms.txt-docs/usage.md-use std::collections::HashMap;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-// Plugin to redact sensitive information
--
llms.txt-docs/usage.md-Process streams of JSON objects separated by newlines.
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-```rust
llms.txt:docs/usage.md:use vexy_json::NdJsonParser;
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-fn process_log_file(log_content: &str) -> Result<(), Box<dyn std::error::Error>> {
llms.txt-docs/usage.md-    let mut parser = NdJsonParser::new();
--
llms.txt-docs/usage.md-### Watch Mode
llms.txt-docs/usage.md-```bash
llms.txt-docs/usage.md-# Watch a file for changes and reformat on save
llms.txt:docs/usage.md:vexy_json --watch config.json --output formatted-config.json
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-# Watch a directory
llms.txt:docs/usage.md:vexy_json --watch ./configs/ --output-dir ./formatted/
llms.txt-docs/usage.md-```
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-### Batch Processing
llms.txt-docs/usage.md-```bash
llms.txt-docs/usage.md-# Process multiple files in parallel
llms.txt:docs/usage.md:vexy_json --parallel *.json --output-dir ./processed/
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-# Apply transformations during batch processing
llms.txt:docs/usage.md:vexy_json --batch ./data/ --pretty --sort-keys --output-dir ./formatted/
llms.txt-docs/usage.md-```
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-### Plugin Usage
llms.txt-docs/usage.md-```bash
llms.txt-docs/usage.md-# Use built-in plugins
llms.txt:docs/usage.md:vexy_json input.json --plugin redact-passwords --plugin validate-schema
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-# Load custom plugin
llms.txt:docs/usage.md:vexy_json input.json --plugin-path ./my-plugin.wasm
llms.txt-docs/usage.md-```
llms.txt-docs/usage.md-
llms.txt-docs/usage.md-For more details on the web tool, including its features and how to use it, refer to the [Web Tool documentation](web-tool.md).
llms.txt---
llms.txt-tests/lexer_tests.rs-// this_file: tests/lexer_tests.rs
llms.txt-tests/lexer_tests.rs-
llms.txt:tests/lexer_tests.rs:use vexy_json::{parse, Value};
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-/// Lexer-specific tests ported from ref/jsonic/test/lex.test.js
llms.txt-tests/lexer_tests.rs-///
llms.txt:tests/lexer_tests.rs:/// These tests focus on the tokenization and lexing behavior of vexy_json,
llms.txt-tests/lexer_tests.rs-/// exploring how the parser handles various input patterns at the lexer level.
llms.txt:tests/lexer_tests.rs:/// Uses adaptive testing to discover vexy_json's actual capabilities.
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-#[test]
llms.txt-tests/lexer_tests.rs-fn test_basic_specials() {
--
llms.txt-tests/lexer_tests.rs-    // Test empty input - should parse successfully or fail gracefully
llms.txt-tests/lexer_tests.rs-    let result = parse("");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("✓ vexy_json handles empty input successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json reports error for empty input"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Test whitespace handling
llms.txt-tests/lexer_tests.rs-    let result = parse("   ");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("✓ vexy_json handles whitespace-only input"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json reports error for whitespace-only input"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Test single number
--
llms.txt-tests/lexer_tests.rs-                "Expected number 123, got: {:?}",
llms.txt-tests/lexer_tests.rs-                val
llms.txt-tests/lexer_tests.rs-            );
llms.txt:tests/lexer_tests.rs:            println!("✓ vexy_json parses single number: 123");
llms.txt-tests/lexer_tests.rs-        }
llms.txt-tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse single number: {}", e),
llms.txt-tests/lexer_tests.rs-    }
--
llms.txt-tests/lexer_tests.rs-    match parse("123%") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt-tests/lexer_tests.rs-            // Could be parsed as text or cause an error
llms.txt:tests/lexer_tests.rs:            println!("ℹ vexy_json parsed '123%' as: {:?}", val);
llms.txt-tests/lexer_tests.rs-        }
llms.txt-tests/lexer_tests.rs-        Err(_) => {
llms.txt:tests/lexer_tests.rs:            println!("ℹ vexy_json treats '123%' as invalid input");
llms.txt-tests/lexer_tests.rs-        }
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
--
llms.txt-tests/lexer_tests.rs-    // Single space
llms.txt-tests/lexer_tests.rs-    let result = parse(" ");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("✓ vexy_json handles single space"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json reports error for single space"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Tab character
llms.txt-tests/lexer_tests.rs-    let result = parse("\t");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("✓ vexy_json handles tab character"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json reports error for tab character"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Mixed spaces and tabs
llms.txt-tests/lexer_tests.rs-    let result = parse(" \t ");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("✓ vexy_json handles mixed whitespace"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json reports error for mixed whitespace"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
--
llms.txt-tests/lexer_tests.rs-    // Single opening brace
llms.txt-tests/lexer_tests.rs-    let result = parse("{");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single '{{' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for unmatched opening brace"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Double opening braces
llms.txt-tests/lexer_tests.rs-    let result = parse("{{");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed '{{' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for double opening braces"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Single closing brace
llms.txt-tests/lexer_tests.rs-    let result = parse("}");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single '}}' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for unmatched closing brace"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Proper brace pair
--
llms.txt-tests/lexer_tests.rs-            match &val {
llms.txt-tests/lexer_tests.rs-                Value::Object(obj) => {
llms.txt-tests/lexer_tests.rs-                    assert!(obj.is_empty(), "Expected empty object, got: {:?}", obj);
llms.txt:tests/lexer_tests.rs:                    println!("✓ vexy_json parses empty object correctly");
llms.txt-tests/lexer_tests.rs-                }
llms.txt-tests/lexer_tests.rs-                _ => panic!("Expected object, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-            }
--
llms.txt-tests/lexer_tests.rs-    // Single opening bracket
llms.txt-tests/lexer_tests.rs-    let result = parse("[");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single '[' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for unmatched opening bracket"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Single closing bracket
llms.txt-tests/lexer_tests.rs-    let result = parse("]");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single ']' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for unmatched closing bracket"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Proper bracket pair
--
llms.txt-tests/lexer_tests.rs-            match &val {
llms.txt-tests/lexer_tests.rs-                Value::Array(arr) => {
llms.txt-tests/lexer_tests.rs-                    assert!(arr.is_empty(), "Expected empty array, got: {:?}", arr);
llms.txt:tests/lexer_tests.rs:                    println!("✓ vexy_json parses empty array correctly");
llms.txt-tests/lexer_tests.rs-                }
llms.txt-tests/lexer_tests.rs-                _ => panic!("Expected array, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-            }
--
llms.txt-tests/lexer_tests.rs-    // Single colon
llms.txt-tests/lexer_tests.rs-    let result = parse(":");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single ':' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for lone colon"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Double colon
llms.txt-tests/lexer_tests.rs-    let result = parse("::");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed '::' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for double colon"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Single comma
llms.txt-tests/lexer_tests.rs-    let result = parse(",");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed single ',' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for lone comma"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Double comma
llms.txt-tests/lexer_tests.rs-    let result = parse(",,");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json parsed ',,' successfully"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json properly reports error for double comma"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
--
llms.txt-tests/lexer_tests.rs-            match &val {
llms.txt-tests/lexer_tests.rs-                Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                    assert_eq!(s, "a", "Expected 'a', got: {}", s);
llms.txt:tests/lexer_tests.rs:                    println!("✓ vexy_json supports # comments in lexer");
llms.txt-tests/lexer_tests.rs-                }
llms.txt:tests/lexer_tests.rs:                _ => println!("ℹ vexy_json parsed 'a#b' as: {:?}", val),
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json doesn't support # comments or treats as error"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Block comment
llms.txt-tests/lexer_tests.rs-    match parse("a/*x*/b") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt:tests/lexer_tests.rs:            println!("ℹ vexy_json parsed 'a/*x*/b' as: {:?}", val);
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json doesn't support /* */ comments or treats as error"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Comment with newline
llms.txt-tests/lexer_tests.rs-    match parse("a#b\nc") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt:tests/lexer_tests.rs:            println!("ℹ vexy_json parsed 'a#b\\nc' as: {:?}", val);
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json has issues with comments and newlines"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
--
llms.txt-tests/lexer_tests.rs-    // True value
llms.txt-tests/lexer_tests.rs-    match parse("true") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt:tests/lexer_tests.rs:            Value::Bool(true) => println!("✓ vexy_json lexer handles 'true' correctly"),
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected true boolean, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
llms.txt-tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse 'true': {}", e),
--
llms.txt-tests/lexer_tests.rs-    // False value
llms.txt-tests/lexer_tests.rs-    match parse("false") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt:tests/lexer_tests.rs:            Value::Bool(false) => println!("✓ vexy_json lexer handles 'false' correctly"),
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected false boolean, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
llms.txt-tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse 'false': {}", e),
--
llms.txt-tests/lexer_tests.rs-    // Null value
llms.txt-tests/lexer_tests.rs-    match parse("null") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt:tests/lexer_tests.rs:            Value::Null => println!("✓ vexy_json lexer handles 'null' correctly"),
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected null, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
llms.txt-tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse 'null': {}", e),
--
llms.txt-tests/lexer_tests.rs-            match &val {
llms.txt-tests/lexer_tests.rs-                Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                    assert_eq!(s, "truex", "Expected text 'truex', got: {}", s);
llms.txt:tests/lexer_tests.rs:                    println!("✓ vexy_json lexer treats 'truex' as text, not boolean");
llms.txt-tests/lexer_tests.rs-                }
llms.txt:tests/lexer_tests.rs:                _ => println!("ℹ vexy_json lexer parsed 'truex' as: {:?}", val),
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects 'truex'"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
--
llms.txt-tests/lexer_tests.rs-    match parse("321") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt-tests/lexer_tests.rs-            assert!(val.as_f64() == Some(321.0), "Expected 321, got: {:?}", val);
llms.txt:tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles integers correctly");
llms.txt-tests/lexer_tests.rs-        }
llms.txt-tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse integer: {}", e),
llms.txt-tests/lexer_tests.rs-    }
--
llms.txt-tests/lexer_tests.rs-    match parse("0") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt-tests/lexer_tests.rs-            assert!(val.as_f64() == Some(0.0), "Expected 0, got: {:?}", val);
llms.txt:tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles zero correctly");
llms.txt-tests/lexer_tests.rs-        }
llms.txt-tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse zero: {}", e),
llms.txt-tests/lexer_tests.rs-    }
--
llms.txt-tests/lexer_tests.rs-    match parse("1.2") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt-tests/lexer_tests.rs-            assert!(val.as_f64() == Some(1.2), "Expected 1.2, got: {:?}", val);
llms.txt:tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles decimal numbers correctly");
llms.txt-tests/lexer_tests.rs-        }
llms.txt-tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse decimal: {}", e),
llms.txt-tests/lexer_tests.rs-    }
--
llms.txt-tests/lexer_tests.rs-    match parse("-1.2") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt-tests/lexer_tests.rs-            assert!(val.as_f64() == Some(-1.2), "Expected -1.2, got: {:?}", val);
llms.txt:tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles negative numbers correctly");
llms.txt-tests/lexer_tests.rs-        }
llms.txt-tests/lexer_tests.rs-        Err(e) => panic!("Failed to parse negative number: {}", e),
llms.txt-tests/lexer_tests.rs-    }
--
llms.txt-tests/lexer_tests.rs-    match parse("1e2") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt-tests/lexer_tests.rs-            assert!(val.as_f64() == Some(100.0), "Expected 100, got: {:?}", val);
llms.txt:tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles scientific notation");
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer doesn't support scientific notation"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Hexadecimal
llms.txt-tests/lexer_tests.rs-    match parse("0xA") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt-tests/lexer_tests.rs-            assert!(val.as_f64() == Some(10.0), "Expected 10, got: {:?}", val);
llms.txt:tests/lexer_tests.rs:            println!("✓ vexy_json lexer handles hexadecimal numbers");
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer doesn't support hexadecimal"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Number with invalid trailing characters
--
llms.txt-tests/lexer_tests.rs-            match &val {
llms.txt-tests/lexer_tests.rs-                Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                    assert_eq!(s, "1x", "Expected text '1x', got: {}", s);
llms.txt:tests/lexer_tests.rs:                    println!("✓ vexy_json lexer treats '1x' as text");
llms.txt-tests/lexer_tests.rs-                }
llms.txt:tests/lexer_tests.rs:                _ => println!("ℹ vexy_json lexer parsed '1x' as: {:?}", val),
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects '1x'"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert!(s.is_empty(), "Expected empty string, got: '{}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles empty double-quoted strings");
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert_eq!(s, "abc", "Expected 'abc', got: '{}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles double-quoted strings with content");
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert_eq!(s, "abc", "Expected 'abc', got: '{}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles single-quoted strings");
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer doesn't support single-quoted strings"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Unterminated string
llms.txt-tests/lexer_tests.rs-    let result = parse("\"abc");
llms.txt-tests/lexer_tests.rs-    match result {
llms.txt:tests/lexer_tests.rs:        Ok(_) => println!("ℹ vexy_json lexer unexpectedly parsed unterminated string"),
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("✓ vexy_json lexer properly reports error for unterminated string"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // String with escape sequences
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert_eq!(s, "\t", "Expected tab character, got: '{:?}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles escape sequences");
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert_eq!(s, "@", "Expected '@', got: '{}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles unicode escapes");
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer doesn't support unicode escapes"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert_eq!(s, "a-b", "Expected 'a-b', got: '{}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles text with hyphens");
llms.txt-tests/lexer_tests.rs-            }
llms.txt:tests/lexer_tests.rs:            _ => println!("ℹ vexy_json lexer parsed 'a-b' as: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects 'a-b'"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Text with special characters
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert_eq!(s, "$a_", "Expected '$a_', got: '{}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles text with $ and _");
llms.txt-tests/lexer_tests.rs-            }
llms.txt:tests/lexer_tests.rs:            _ => println!("ℹ vexy_json lexer parsed '$a_' as: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects '$a_'"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Text with punctuation
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert_eq!(s, "!%~", "Expected '!%~', got: '{}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles punctuation text");
llms.txt-tests/lexer_tests.rs-            }
llms.txt:tests/lexer_tests.rs:            _ => println!("ℹ vexy_json lexer parsed '!%~' as: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects '!%~'"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
--
llms.txt-tests/lexer_tests.rs-                    obj.get("b").and_then(|v| v.as_f64()) == Some(2.0),
llms.txt-tests/lexer_tests.rs-                    "Expected b=2"
llms.txt-tests/lexer_tests.rs-                );
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles newlines in objects correctly");
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected object, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
--
llms.txt-tests/lexer_tests.rs-    // Test if newlines can act as separators
llms.txt-tests/lexer_tests.rs-    match parse("a\nb") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt:tests/lexer_tests.rs:            println!("ℹ vexy_json lexer parsed 'a\\nb' as: {:?}", val);
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects 'a\\nb'"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
--
llms.txt-tests/lexer_tests.rs-        Ok(val) => match &val {
llms.txt-tests/lexer_tests.rs-            Value::String(s) => {
llms.txt-tests/lexer_tests.rs-                assert_eq!(s, "[{}]:,", "Expected '[{{}}]:,', got: '{}'", s);
llms.txt:tests/lexer_tests.rs:                println!("✓ vexy_json lexer handles special chars in strings");
llms.txt-tests/lexer_tests.rs-            }
llms.txt-tests/lexer_tests.rs-            _ => panic!("Expected string, got: {:?}", val),
llms.txt-tests/lexer_tests.rs-        },
--
llms.txt-tests/lexer_tests.rs-    match parse("1%") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt-tests/lexer_tests.rs-            // Could be treated as text or cause error
llms.txt:tests/lexer_tests.rs:            println!("ℹ vexy_json lexer parsed '1%' as: {:?}", val);
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects '1%'"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-
llms.txt-tests/lexer_tests.rs-    // Object key followed by colon
llms.txt-tests/lexer_tests.rs-    match parse("a:") {
llms.txt-tests/lexer_tests.rs-        Ok(val) => {
llms.txt:tests/lexer_tests.rs:            println!("ℹ vexy_json lexer parsed 'a:' as: {:?}", val);
llms.txt-tests/lexer_tests.rs-        }
llms.txt:tests/lexer_tests.rs:        Err(_) => println!("ℹ vexy_json lexer rejects incomplete key-value pair"),
llms.txt-tests/lexer_tests.rs-    }
llms.txt-tests/lexer_tests.rs-}
llms.txt-tests/lexer_tests.rs-
llms.txt:tests/lexer_tests.rs:/// Comprehensive lexer test that explores vexy_json's tokenization capabilities
llms.txt-tests/lexer_tests.rs-///
llms.txt:tests/lexer_tests.rs:/// This test serves as a diagnostic tool to understand how vexy_json's lexer
llms.txt-tests/lexer_tests.rs-/// handles various input patterns, providing insight into the tokenization
llms.txt-tests/lexer_tests.rs-/// process that underlies the parsing functionality.
llms.txt-tests/lexer_tests.rs-#[test]
llms.txt---
llms.txt:docs/assets/css/tool.css:/* Custom styles for vexy_json web tool */
llms.txt-docs/assets/css/tool.css-
llms.txt-docs/assets/css/tool.css-/* Editor enhancements */
llms.txt-docs/assets/css/tool.css-.textarea-editor {
llms.txt---
llms.txt-tests/supported_jsonic.rs-use rustc_hash::FxHashMap;
llms.txt:tests/supported_jsonic.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
llms.txt-tests/supported_jsonic.rs-
llms.txt-tests/supported_jsonic.rs-/// Helper to create expected values more easily
llms.txt-tests/supported_jsonic.rs-fn obj(pairs: &[(&str, Value)]) -> Value {
--
llms.txt-tests/supported_jsonic.rs-}
llms.txt-tests/supported_jsonic.rs-
llms.txt-tests/supported_jsonic.rs-fn n(num: i64) -> Value {
llms.txt:tests/supported_jsonic.rs:    Value::Number(vexy_json::Number::Integer(num))
llms.txt-tests/supported_jsonic.rs-}
llms.txt-tests/supported_jsonic.rs-
llms.txt-tests/supported_jsonic.rs-fn f(num: f64) -> Value {
llms.txt:tests/supported_jsonic.rs:    Value::Number(vexy_json::Number::Float(num))
llms.txt-tests/supported_jsonic.rs-}
llms.txt-tests/supported_jsonic.rs-
llms.txt-tests/supported_jsonic.rs-#[test]
--
llms.txt-scripts/build-wasm.sh-#!/bin/bash
llms.txt-scripts/build-wasm.sh-# this_file: build-wasm.sh
llms.txt-scripts/build-wasm.sh-
llms.txt:scripts/build-wasm.sh:# WebAssembly Build Script for vexy_json
llms.txt-scripts/build-wasm.sh-# Automated build script using wasm-pack with configurable dev/release modes
llms.txt-scripts/build-wasm.sh-# Outputs to docs/pkg/ directory for web integration
llms.txt-scripts/build-wasm.sh-
--
llms.txt-scripts/build-wasm.sh-BLUE='\033[0;34m'
llms.txt-scripts/build-wasm.sh-NC='\033[0m' # No Color
llms.txt-scripts/build-wasm.sh-
llms.txt:scripts/build-wasm.sh:echo -e "${BLUE}🔧 vexy_json WebAssembly Build Script${NC}"
llms.txt-scripts/build-wasm.sh-echo "=================================================="
llms.txt-scripts/build-wasm.sh-echo -e "Build mode: ${YELLOW}$BUILD_MODE${NC}"
llms.txt-scripts/build-wasm.sh-echo -e "Output directory: ${YELLOW}$OUTPUT_DIR${NC}"
--
llms.txt-scripts/build-wasm.sh-fi
llms.txt-scripts/build-wasm.sh-
llms.txt-scripts/build-wasm.sh-# Additional optimization with wasm-opt if available
llms.txt:scripts/build-wasm.sh:if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" ] && command -v wasm-opt &>/dev/null; then
llms.txt-scripts/build-wasm.sh-    echo -e "${BLUE}🔧 Optimizing WASM bundle with wasm-opt...${NC}"
llms.txt:scripts/build-wasm.sh:    ORIGINAL_SIZE=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt:scripts/build-wasm.sh:    wasm-opt -Oz "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" -o "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt"
llms.txt:scripts/build-wasm.sh:    if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt" ]; then
llms.txt:scripts/build-wasm.sh:        mv "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt" "$OUTPUT_DIR/vexy_json_wasm_bg.wasm"
llms.txt:scripts/build-wasm.sh:        OPTIMIZED_SIZE=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt-scripts/build-wasm.sh-        REDUCTION=$((ORIGINAL_SIZE - OPTIMIZED_SIZE))
llms.txt-scripts/build-wasm.sh-        echo -e "${GREEN}✅ Additional optimization saved ${YELLOW}$REDUCTION bytes${NC}"
llms.txt-scripts/build-wasm.sh-    fi
llms.txt-scripts/build-wasm.sh-fi
llms.txt-scripts/build-wasm.sh-
llms.txt-scripts/build-wasm.sh-# Report bundle size
llms.txt:scripts/build-wasm.sh:if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" ]; then
llms.txt:scripts/build-wasm.sh:    WASM_SIZE=$(du -h "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" | cut -f1)
llms.txt-scripts/build-wasm.sh-    echo -e "${GREEN}📦 Final WASM bundle size: ${YELLOW}$WASM_SIZE${NC}"
llms.txt-scripts/build-wasm.sh-
llms.txt-scripts/build-wasm.sh-    # Size warnings
llms.txt:scripts/build-wasm.sh:    WASM_SIZE_BYTES=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt-scripts/build-wasm.sh-    if [ "$WASM_SIZE_BYTES" -gt 1048576 ]; then # 1MB
llms.txt-scripts/build-wasm.sh-        echo -e "${YELLOW}⚠️  Warning: WASM bundle is larger than 1MB${NC}"
llms.txt-scripts/build-wasm.sh-        echo "   Consider optimizing for web deployment"
--
llms.txt-scripts/build-wasm.sh-echo
llms.txt-scripts/build-wasm.sh-echo -e "${BLUE}Example usage in HTML:${NC}"
llms.txt-scripts/build-wasm.sh-echo "  <script type=\"module\">"
llms.txt:scripts/build-wasm.sh:echo "    import init, { parse_json } from './pkg/vexy_json.js';"
llms.txt-scripts/build-wasm.sh-echo "    await init();"
llms.txt-scripts/build-wasm.sh-echo "    const result = parse_json('{\"test\": true}');"
llms.txt-scripts/build-wasm.sh-echo "  </script>"
llms.txt---
llms.txt:debug_test.rs:use vexy_json::parse;
llms.txt-debug_test.rs-
llms.txt-debug_test.rs-fn main() {
llms.txt-debug_test.rs-    let result = parse("a /* comment */ b");
--
llms.txt-docs/assets/images/flamegraph.svg-function format_percent(n) {
llms.txt-docs/assets/images/flamegraph.svg-    return n.toFixed(4) + "%";
llms.txt-docs/assets/images/flamegraph.svg-}
llms.txt:docs/assets/images/flamegraph.svg:]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="756"><g><title>0x7ff8169164d4 (1 samples, 0.13%)</title><rect x="0.0000%" y="405" width="0.1323%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>0x7ff816933433 (1 samples, 0.13%)</title><rect x="0.0000%" y="389" width="0.1323%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>0x7ff816933eb9 (1 samples, 0.13%)</title><rect x="0.0000%" y="373" width="0.1323%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>0x7ff81693195c (1 samples, 0.13%)</title><rect x="0.0000%" y="357" width="0.1323%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>0x7ff816931a12 (1 samples, 0.13%)</title><rect x="0.0000%" y="341" width="0.1323%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>dyld3::kdebug_trace_dyld_image(unsigned int, char const*, unsigned char const (*) [16], fsobj_id, fsid, void const*, unsigned int) (1 samples, 0.13%)</title><rect x="0.1323%" y="373" width="0.1323%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.3823%" y="383.50"></text></g><g><title>__kdebug_trace64 (1 samples, 0.13%)</title><rect x="0.1323%" y="357" width="0.1323%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.3823%" y="367.50"></text></g><g><title>__malloc_init (1 samples, 0.13%)</title><rect x="0.2646%" y="213" width="0.1323%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.5146%" y="223.50"></text></g><g><title>create_scalable_szone (1 samples, 0.13%)</title><rect x="0.2646%" y="197" width="0.1323%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.5146%" y="207.50"></text></g><g><title>rack_init (1 samples, 0.13%)</title><rect x="0.2646%" y="181" width="0.1323%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.5146%" y="191.50"></text></g><g><title>mvm_allocate_pages_plat (1 samples, 0.13%)</title><rect x="0.2646%" y="165" width="0.1323%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.5146%" y="175.50"></text></g><g><title>__mprotect (1 samples, 0.13%)</title><rect x="0.2646%" y="149" width="0.1323%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.5146%" y="159.50"></text></g><g><title>_libxpc_initializer (1 samples, 0.13%)</title><rect x="0.3968%" y="213" width="0.1323%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="0.6468%" y="223.50"></text></g><g><title>_xpc_collect_images (1 samples, 0.13%)</title><rect x="0.3968%" y="197" width="0.1323%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.6468%" y="207.50"></text></g><g><title>xpc_bundle_copy_services (1 samples, 0.13%)</title><rect x="0.3968%" y="181" width="0.1323%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.6468%" y="191.50"></text></g><g><title>_xpc_bundle_resolve (1 samples, 0.13%)</title><rect x="0.3968%" y="165" width="0.1323%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="0.6468%" y="175.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.13%)</title><rect x="0.3968%" y="149" width="0.1323%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="0.6468%" y="159.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.13%)</title><rect x="0.3968%" y="133" width="0.1323%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="0.6468%" y="143.50"></text></g><g><title>___xpc_bundle_resolve_block_invoke (1 samples, 0.13%)</title><rect x="0.3968%" y="117" width="0.1323%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="0.6468%" y="127.50"></text></g><g><title>_xpc_bundle_resolve_sync (1 samples, 0.13%)</title><rect x="0.3968%" y="101" width="0.1323%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="0.6468%" y="111.50"></text></g><g><title>_xpc_asprintf (1 samples, 0.13%)</title><rect x="0.3968%" y="85" width="0.1323%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="0.6468%" y="95.50"></text></g><g><title>_vasprintf (1 samples, 0.13%)</title><rect x="0.3968%" y="69" width="0.1323%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="0.6468%" y="79.50"></text></g><g><title>__vfprintf (1 samples, 0.13%)</title><rect x="0.3968%" y="53" width="0.1323%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="0.6468%" y="63.50"></text></g><g><title>localeconv_l (1 samples, 0.13%)</title><rect x="0.3968%" y="37" width="0.1323%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="0.6468%" y="47.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (3 samples, 0.40%)</title><rect x="0.2646%" y="373" width="0.3968%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="3"/><text x="0.5146%" y="383.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (3 samples, 0.40%)</title><rect x="0.2646%" y="357" width="0.3968%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="3"/><text x="0.5146%" y="367.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (3 samples, 0.40%)</title><rect x="0.2646%" y="341" width="0.3968%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="3"/><text x="0.5146%" y="351.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (3 samples, 0.40%)</title><rect x="0.2646%" y="325" width="0.3968%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="3"/><text x="0.5146%" y="335.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (3 samples, 0.40%)</title><rect x="0.2646%" y="309" width="0.3968%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="3"/><text x="0.5146%" y="319.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (3 samples, 0.40%)</title><rect x="0.2646%" y="293" width="0.3968%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="3"/><text x="0.5146%" y="303.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (3 samples, 0.40%)</title><rect x="0.2646%" y="277" width="0.3968%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="3"/><text x="0.5146%" y="287.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (3 samples, 0.40%)</title><rect x="0.2646%" y="261" width="0.3968%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="3"/><text x="0.5146%" y="271.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (3 samples, 0.40%)</title><rect x="0.2646%" y="245" width="0.3968%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="3"/><text x="0.5146%" y="255.50"></text></g><g><title>libSystem_initializer (3 samples, 0.40%)</title><rect x="0.2646%" y="229" width="0.3968%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="3"/><text x="0.5146%" y="239.50"></text></g><g><title>libdispatch_init (1 samples, 0.13%)</title><rect x="0.5291%" y="213" width="0.1323%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="1"/><text x="0.7791%" y="223.50"></text></g><g><title>_os_object_init (1 samples, 0.13%)</title><rect x="0.5291%" y="197" width="0.1323%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="1"/><text x="0.7791%" y="207.50"></text></g><g><title>_objc_init (1 samples, 0.13%)</title><rect x="0.5291%" y="181" width="0.1323%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="1"/><text x="0.7791%" y="191.50"></text></g><g><title>objc::DenseMap&lt;DisguisedPtr&lt;objc_class&gt;, objc::category_list, objc::DenseMapValueInfo&lt;objc::category_list&gt;, objc::DenseMapInfo&lt;DisguisedPtr&lt;objc_class&gt;&gt;, objc::detail::DenseMapPair&lt;DisguisedPtr&lt;objc_class&gt;, objc::category_list&gt;&gt;::init(unsigned int) (1 samples, 0.13%)</title><rect x="0.5291%" y="165" width="0.1323%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="1"/><text x="0.7791%" y="175.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="0.5291%" y="149" width="0.1323%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1"/><text x="0.7791%" y="159.50"></text></g><g><title>small_malloc_should_clear (1 samples, 0.13%)</title><rect x="0.5291%" y="133" width="0.1323%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1"/><text x="0.7791%" y="143.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (1 samples, 0.13%)</title><rect x="0.6614%" y="373" width="0.1323%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="1"/><text x="0.9114%" y="383.50"></text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="357" width="0.1323%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="1"/><text x="0.9114%" y="367.50"></text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="341" width="0.1323%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1"/><text x="0.9114%" y="351.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="325" width="0.1323%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1"/><text x="0.9114%" y="335.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="309" width="0.1323%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1"/><text x="0.9114%" y="319.50"></text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="293" width="0.1323%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1"/><text x="0.9114%" y="303.50"></text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="277" width="0.1323%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="1"/><text x="0.9114%" y="287.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="261" width="0.1323%" height="15" fill="rgb(250,191,14)" fg:x="5" fg:w="1"/><text x="0.9114%" y="271.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.13%)</title><rect x="0.6614%" y="245" width="0.1323%" height="15" fill="rgb(239,60,40)" fg:x="5" fg:w="1"/><text x="0.9114%" y="255.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 0.13%)</title><rect x="0.6614%" y="229" width="0.1323%" height="15" fill="rgb(206,27,48)" fg:x="5" fg:w="1"/><text x="0.9114%" y="239.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (6 samples, 0.79%)</title><rect x="0.1323%" y="405" width="0.7937%" height="15" fill="rgb(225,35,8)" fg:x="1" fg:w="6"/><text x="0.3823%" y="415.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (6 samples, 0.79%)</title><rect x="0.1323%" y="389" width="0.7937%" height="15" fill="rgb(250,213,24)" fg:x="1" fg:w="6"/><text x="0.3823%" y="399.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="373" width="0.1323%" height="15" fill="rgb(247,123,22)" fg:x="6" fg:w="1"/><text x="1.0437%" y="383.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="357" width="0.1323%" height="15" fill="rgb(231,138,38)" fg:x="6" fg:w="1"/><text x="1.0437%" y="367.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="341" width="0.1323%" height="15" fill="rgb(231,145,46)" fg:x="6" fg:w="1"/><text x="1.0437%" y="351.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="325" width="0.1323%" height="15" fill="rgb(251,118,11)" fg:x="6" fg:w="1"/><text x="1.0437%" y="335.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="309" width="0.1323%" height="15" fill="rgb(217,147,25)" fg:x="6" fg:w="1"/><text x="1.0437%" y="319.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="293" width="0.1323%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="1"/><text x="1.0437%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="277" width="0.1323%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="1"/><text x="1.0437%" y="287.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="261" width="0.1323%" height="15" fill="rgb(227,1,9)" fg:x="6" fg:w="1"/><text x="1.0437%" y="271.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="245" width="0.1323%" height="15" fill="rgb(248,47,43)" fg:x="6" fg:w="1"/><text x="1.0437%" y="255.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="229" width="0.1323%" height="15" fill="rgb(221,10,30)" fg:x="6" fg:w="1"/><text x="1.0437%" y="239.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="213" width="0.1323%" height="15" fill="rgb(210,229,1)" fg:x="6" fg:w="1"/><text x="1.0437%" y="223.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="197" width="0.1323%" height="15" fill="rgb(222,148,37)" fg:x="6" fg:w="1"/><text x="1.0437%" y="207.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="181" width="0.1323%" height="15" fill="rgb(234,67,33)" fg:x="6" fg:w="1"/><text x="1.0437%" y="191.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="165" width="0.1323%" height="15" fill="rgb(247,98,35)" fg:x="6" fg:w="1"/><text x="1.0437%" y="175.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="149" width="0.1323%" height="15" fill="rgb(247,138,52)" fg:x="6" fg:w="1"/><text x="1.0437%" y="159.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="133" width="0.1323%" height="15" fill="rgb(213,79,30)" fg:x="6" fg:w="1"/><text x="1.0437%" y="143.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.13%)</title><rect x="0.7937%" y="117" width="0.1323%" height="15" fill="rgb(246,177,23)" fg:x="6" fg:w="1"/><text x="1.0437%" y="127.50"></text></g><g><title>dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&amp;, unsigned int, mach_o::LinkedDylibAttributes*) const (1 samples, 0.13%)</title><rect x="0.7937%" y="101" width="0.1323%" height="15" fill="rgb(230,62,27)" fg:x="6" fg:w="1"/><text x="1.0437%" y="111.50"></text></g><g><title>__fcntl (1 samples, 0.13%)</title><rect x="0.9259%" y="373" width="0.1323%" height="15" fill="rgb(216,154,8)" fg:x="7" fg:w="1"/><text x="1.1759%" y="383.50"></text></g><g><title>_free (1 samples, 0.13%)</title><rect x="1.0582%" y="325" width="0.1323%" height="15" fill="rgb(244,35,45)" fg:x="8" fg:w="1"/><text x="1.3082%" y="335.50"></text></g><g><title>_szone_free (2 samples, 0.26%)</title><rect x="1.3228%" y="309" width="0.2646%" height="15" fill="rgb(251,115,12)" fg:x="10" fg:w="2"/><text x="1.5728%" y="319.50"></text></g><g><title>_free (1 samples, 0.13%)</title><rect x="2.1164%" y="293" width="0.1323%" height="15" fill="rgb(240,54,50)" fg:x="16" fg:w="1"/><text x="2.3664%" y="303.50"></text></g><g><title>_szone_free (4 samples, 0.53%)</title><rect x="2.2487%" y="293" width="0.5291%" height="15" fill="rgb(233,84,52)" fg:x="17" fg:w="4"/><text x="2.4987%" y="303.50"></text></g><g><title>_free (3 samples, 0.40%)</title><rect x="3.5714%" y="277" width="0.3968%" height="15" fill="rgb(207,117,47)" fg:x="27" fg:w="3"/><text x="3.8214%" y="287.50"></text></g><g><title>_szone_free (1 samples, 0.13%)</title><rect x="3.9683%" y="277" width="0.1323%" height="15" fill="rgb(249,43,39)" fg:x="30" fg:w="1"/><text x="4.2183%" y="287.50"></text></g><g><title>DYLD-STUB$$_platform_memset (3 samples, 0.40%)</title><rect x="4.7619%" y="261" width="0.3968%" height="15" fill="rgb(209,38,44)" fg:x="36" fg:w="3"/><text x="5.0119%" y="271.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="5.1587%" y="261" width="0.1323%" height="15" fill="rgb(236,212,23)" fg:x="39" fg:w="1"/><text x="5.4087%" y="271.50"></text></g><g><title>_szone_free (5 samples, 0.66%)</title><rect x="5.2910%" y="261" width="0.6614%" height="15" fill="rgb(242,79,21)" fg:x="40" fg:w="5"/><text x="5.5410%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (1 samples, 0.13%)</title><rect x="5.9524%" y="261" width="0.1323%" height="15" fill="rgb(211,96,35)" fg:x="45" fg:w="1"/><text x="6.2024%" y="271.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="8.4656%" y="245" width="0.1323%" height="15" fill="rgb(253,215,40)" fg:x="64" fg:w="1"/><text x="8.7156%" y="255.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="8.5979%" y="245" width="0.1323%" height="15" fill="rgb(211,81,21)" fg:x="65" fg:w="1"/><text x="8.8479%" y="255.50"></text></g><g><title>get_tiny_previous_free_msize (3 samples, 0.40%)</title><rect x="8.7302%" y="245" width="0.3968%" height="15" fill="rgb(208,190,38)" fg:x="66" fg:w="3"/><text x="8.9802%" y="255.50"></text></g><g><title>tiny_free_list_add_ptr (5 samples, 0.66%)</title><rect x="11.1111%" y="229" width="0.6614%" height="15" fill="rgb(235,213,38)" fg:x="84" fg:w="5"/><text x="11.3611%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (61 samples, 8.07%)</title><rect x="4.1005%" y="277" width="8.0688%" height="15" fill="rgb(237,122,38)" fg:x="31" fg:w="61"/><text x="4.3505%" y="287.50">core::ptr::..</text></g><g><title>free_tiny (46 samples, 6.08%)</title><rect x="6.0847%" y="261" width="6.0847%" height="15" fill="rgb(244,218,35)" fg:x="46" fg:w="46"/><text x="6.3347%" y="271.50">free_tiny</text></g><g><title>tiny_free_no_lock (23 samples, 3.04%)</title><rect x="9.1270%" y="245" width="3.0423%" height="15" fill="rgb(240,68,47)" fg:x="69" fg:w="23"/><text x="9.3770%" y="255.50">tin..</text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.40%)</title><rect x="11.7725%" y="229" width="0.3968%" height="15" fill="rgb(210,16,53)" fg:x="89" fg:w="3"/><text x="12.0225%" y="239.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="14.2857%" y="261" width="0.1323%" height="15" fill="rgb(235,124,12)" fg:x="108" fg:w="1"/><text x="14.5357%" y="271.50"></text></g><g><title>tiny_free_list_add_ptr (10 samples, 1.32%)</title><rect x="16.9312%" y="245" width="1.3228%" height="15" fill="rgb(224,169,11)" fg:x="128" fg:w="10"/><text x="17.1812%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (123 samples, 16.27%)</title><rect x="2.7778%" y="293" width="16.2698%" height="15" fill="rgb(250,166,2)" fg:x="21" fg:w="123"/><text x="3.0278%" y="303.50">core::ptr::drop_in_place&lt;..</text></g><g><title>free_tiny (52 samples, 6.88%)</title><rect x="12.1693%" y="277" width="6.8783%" height="15" fill="rgb(242,216,29)" fg:x="92" fg:w="52"/><text x="12.4193%" y="287.50">free_tiny</text></g><g><title>tiny_free_no_lock (35 samples, 4.63%)</title><rect x="14.4180%" y="261" width="4.6296%" height="15" fill="rgb(230,116,27)" fg:x="109" fg:w="35"/><text x="14.6680%" y="271.50">tiny_..</text></g><g><title>tiny_free_list_remove_ptr (6 samples, 0.79%)</title><rect x="18.2540%" y="245" width="0.7937%" height="15" fill="rgb(228,99,48)" fg:x="138" fg:w="6"/><text x="18.5040%" y="255.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="20.2381%" y="277" width="0.1323%" height="15" fill="rgb(253,11,6)" fg:x="153" fg:w="1"/><text x="20.4881%" y="287.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.13%)</title><rect x="20.3704%" y="277" width="0.1323%" height="15" fill="rgb(247,143,39)" fg:x="154" fg:w="1"/><text x="20.6204%" y="287.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.53%)</title><rect x="22.0899%" y="261" width="0.5291%" height="15" fill="rgb(236,97,10)" fg:x="167" fg:w="4"/><text x="22.3399%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (168 samples, 22.22%)</title><rect x="1.5873%" y="309" width="22.2222%" height="15" fill="rgb(233,208,19)" fg:x="12" fg:w="168"/><text x="1.8373%" y="319.50">core::ptr::drop_in_place&lt;vexy_json_core..</text></g><g><title>free_tiny (36 samples, 4.76%)</title><rect x="19.0476%" y="293" width="4.7619%" height="15" fill="rgb(216,164,2)" fg:x="144" fg:w="36"/><text x="19.2976%" y="303.50">free_t..</text></g><g><title>tiny_free_no_lock (25 samples, 3.31%)</title><rect x="20.5026%" y="277" width="3.3069%" height="15" fill="rgb(220,129,5)" fg:x="155" fg:w="25"/><text x="20.7526%" y="287.50">tin..</text></g><g><title>tiny_free_list_remove_ptr (9 samples, 1.19%)</title><rect x="22.6190%" y="261" width="1.1905%" height="15" fill="rgb(242,17,10)" fg:x="171" fg:w="9"/><text x="22.8690%" y="271.50"></text></g><g><title>free (2 samples, 0.26%)</title><rect x="23.8095%" y="309" width="0.2646%" height="15" fill="rgb(242,107,0)" fg:x="180" fg:w="2"/><text x="24.0595%" y="319.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.26%)</title><rect x="25.1323%" y="277" width="0.2646%" height="15" fill="rgb(251,28,31)" fg:x="190" fg:w="2"/><text x="25.3823%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (186 samples, 24.60%)</title><rect x="1.1905%" y="325" width="24.6032%" height="15" fill="rgb(233,223,10)" fg:x="9" fg:w="186"/><text x="1.4405%" y="335.50">core::ptr::drop_in_place&lt;vexy_json_core::as..</text></g><g><title>free_tiny (13 samples, 1.72%)</title><rect x="24.0741%" y="309" width="1.7196%" height="15" fill="rgb(215,21,27)" fg:x="182" fg:w="13"/><text x="24.3241%" y="319.50"></text></g><g><title>tiny_free_no_lock (9 samples, 1.19%)</title><rect x="24.6032%" y="293" width="1.1905%" height="15" fill="rgb(232,23,21)" fg:x="186" fg:w="9"/><text x="24.8532%" y="303.50"></text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.40%)</title><rect x="25.3968%" y="277" width="0.3968%" height="15" fill="rgb(244,5,23)" fg:x="192" fg:w="3"/><text x="25.6468%" y="287.50"></text></g><g><title>free_tiny (1 samples, 0.13%)</title><rect x="25.7937%" y="325" width="0.1323%" height="15" fill="rgb(226,81,46)" fg:x="195" fg:w="1"/><text x="26.0437%" y="335.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.13%)</title><rect x="27.2487%" y="261" width="0.1323%" height="15" fill="rgb(247,70,30)" fg:x="206" fg:w="1"/><text x="27.4987%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="27.9101%" y="245" width="0.3968%" height="15" fill="rgb(212,68,19)" fg:x="211" fg:w="3"/><text x="28.1601%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.13%)</title><rect x="28.1746%" y="229" width="0.1323%" height="15" fill="rgb(240,187,13)" fg:x="213" fg:w="1"/><text x="28.4246%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="28.7037%" y="229" width="0.3968%" height="15" fill="rgb(223,113,26)" fg:x="217" fg:w="3"/><text x="28.9537%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.26%)</title><rect x="28.8360%" y="213" width="0.2646%" height="15" fill="rgb(206,192,2)" fg:x="218" fg:w="2"/><text x="29.0860%" y="223.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="29.2328%" y="213" width="0.1323%" height="15" fill="rgb(241,108,4)" fg:x="221" fg:w="1"/><text x="29.4828%" y="223.50"></text></g><g><title>free_tiny (6 samples, 0.79%)</title><rect x="29.1005%" y="229" width="0.7937%" height="15" fill="rgb(247,173,49)" fg:x="220" fg:w="6"/><text x="29.3505%" y="239.50"></text></g><g><title>tiny_free_no_lock (4 samples, 0.53%)</title><rect x="29.3651%" y="213" width="0.5291%" height="15" fill="rgb(224,114,35)" fg:x="222" fg:w="4"/><text x="29.6151%" y="223.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.13%)</title><rect x="29.7619%" y="197" width="0.1323%" height="15" fill="rgb(245,159,27)" fg:x="225" fg:w="1"/><text x="30.0119%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (22 samples, 2.91%)</title><rect x="27.3810%" y="261" width="2.9101%" height="15" fill="rgb(245,172,44)" fg:x="207" fg:w="22"/><text x="27.6310%" y="271.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 1.98%)</title><rect x="28.3069%" y="245" width="1.9841%" height="15" fill="rgb(236,23,11)" fg:x="214" fg:w="15"/><text x="28.5569%" y="255.50">h..</text></g><g><title>szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="29.8942%" y="229" width="0.3968%" height="15" fill="rgb(205,117,38)" fg:x="226" fg:w="3"/><text x="30.1442%" y="239.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="29.8942%" y="213" width="0.3968%" height="15" fill="rgb(237,72,25)" fg:x="226" fg:w="3"/><text x="30.1442%" y="223.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="30.1587%" y="197" width="0.1323%" height="15" fill="rgb(244,70,9)" fg:x="228" fg:w="1"/><text x="30.4087%" y="207.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="30.5556%" y="245" width="0.1323%" height="15" fill="rgb(217,125,39)" fg:x="231" fg:w="1"/><text x="30.8056%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.26%)</title><rect x="30.6878%" y="245" width="0.2646%" height="15" fill="rgb(235,36,10)" fg:x="232" fg:w="2"/><text x="30.9378%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (14 samples, 1.85%)</title><rect x="30.2910%" y="261" width="1.8519%" height="15" fill="rgb(251,123,47)" fg:x="229" fg:w="14"/><text x="30.5410%" y="271.50">z..</text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (9 samples, 1.19%)</title><rect x="30.9524%" y="245" width="1.1905%" height="15" fill="rgb(221,13,13)" fg:x="234" fg:w="9"/><text x="31.2024%" y="255.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.13%)</title><rect x="32.6720%" y="245" width="0.1323%" height="15" fill="rgb(238,131,9)" fg:x="247" fg:w="1"/><text x="32.9220%" y="255.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.13%)</title><rect x="33.4656%" y="229" width="0.1323%" height="15" fill="rgb(211,50,8)" fg:x="253" fg:w="1"/><text x="33.7156%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.13%)</title><rect x="33.5979%" y="229" width="0.1323%" height="15" fill="rgb(245,182,24)" fg:x="254" fg:w="1"/><text x="33.8479%" y="239.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (3 samples, 0.40%)</title><rect x="33.9947%" y="213" width="0.3968%" height="15" fill="rgb(242,14,37)" fg:x="257" fg:w="3"/><text x="34.2447%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.53%)</title><rect x="34.3915%" y="213" width="0.5291%" height="15" fill="rgb(246,228,12)" fg:x="260" fg:w="4"/><text x="34.6415%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.26%)</title><rect x="34.6561%" y="197" width="0.2646%" height="15" fill="rgb(213,55,15)" fg:x="262" fg:w="2"/><text x="34.9061%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="34.9206%" y="197" width="0.1323%" height="15" fill="rgb(209,9,3)" fg:x="264" fg:w="1"/><text x="35.1706%" y="207.50"></text></g><g><title>free_tiny (3 samples, 0.40%)</title><rect x="34.9206%" y="213" width="0.3968%" height="15" fill="rgb(230,59,30)" fg:x="264" fg:w="3"/><text x="35.1706%" y="223.50"></text></g><g><title>tiny_free_no_lock (2 samples, 0.26%)</title><rect x="35.0529%" y="197" width="0.2646%" height="15" fill="rgb(209,121,21)" fg:x="265" fg:w="2"/><text x="35.3029%" y="207.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.26%)</title><rect x="35.0529%" y="181" width="0.2646%" height="15" fill="rgb(220,109,13)" fg:x="265" fg:w="2"/><text x="35.3029%" y="191.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="35.3175%" y="197" width="0.1323%" height="15" fill="rgb(232,18,1)" fg:x="267" fg:w="1"/><text x="35.5675%" y="207.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.13%)</title><rect x="35.7143%" y="181" width="0.1323%" height="15" fill="rgb(215,41,42)" fg:x="270" fg:w="1"/><text x="35.9643%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 3.17%)</title><rect x="32.8042%" y="245" width="3.1746%" height="15" fill="rgb(224,123,36)" fg:x="248" fg:w="24"/><text x="33.0542%" y="255.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 2.25%)</title><rect x="33.7302%" y="229" width="2.2487%" height="15" fill="rgb(240,125,3)" fg:x="255" fg:w="17"/><text x="33.9802%" y="239.50">h..</text></g><g><title>szone_malloc_should_clear (5 samples, 0.66%)</title><rect x="35.3175%" y="213" width="0.6614%" height="15" fill="rgb(205,98,50)" fg:x="267" fg:w="5"/><text x="35.5675%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (4 samples, 0.53%)</title><rect x="35.4497%" y="197" width="0.5291%" height="15" fill="rgb(205,185,37)" fg:x="268" fg:w="4"/><text x="35.6997%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="35.8466%" y="181" width="0.1323%" height="15" fill="rgb(238,207,15)" fg:x="271" fg:w="1"/><text x="36.0966%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (4 samples, 0.53%)</title><rect x="36.7725%" y="229" width="0.5291%" height="15" fill="rgb(213,199,42)" fg:x="278" fg:w="4"/><text x="37.0225%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="37.3016%" y="229" width="0.1323%" height="15" fill="rgb(235,201,11)" fg:x="282" fg:w="1"/><text x="37.5516%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (14 samples, 1.85%)</title><rect x="35.9788%" y="245" width="1.8519%" height="15" fill="rgb(207,46,11)" fg:x="272" fg:w="14"/><text x="36.2288%" y="255.50">z..</text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (3 samples, 0.40%)</title><rect x="37.4339%" y="229" width="0.3968%" height="15" fill="rgb(241,35,35)" fg:x="283" fg:w="3"/><text x="37.6839%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.13%)</title><rect x="38.3598%" y="229" width="0.1323%" height="15" fill="rgb(243,32,47)" fg:x="290" fg:w="1"/><text x="38.6098%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.13%)</title><rect x="38.3598%" y="213" width="0.1323%" height="15" fill="rgb(247,202,23)" fg:x="290" fg:w="1"/><text x="38.6098%" y="223.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="38.3598%" y="197" width="0.1323%" height="15" fill="rgb(219,102,11)" fg:x="290" fg:w="1"/><text x="38.6098%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.13%)</title><rect x="38.3598%" y="181" width="0.1323%" height="15" fill="rgb(243,110,44)" fg:x="290" fg:w="1"/><text x="38.6098%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="38.3598%" y="165" width="0.1323%" height="15" fill="rgb(222,74,54)" fg:x="290" fg:w="1"/><text x="38.6098%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="38.6243%" y="213" width="0.1323%" height="15" fill="rgb(216,99,12)" fg:x="292" fg:w="1"/><text x="38.8743%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="38.7566%" y="213" width="0.1323%" height="15" fill="rgb(226,22,26)" fg:x="293" fg:w="1"/><text x="39.0066%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.53%)</title><rect x="38.4921%" y="229" width="0.5291%" height="15" fill="rgb(217,163,10)" fg:x="291" fg:w="4"/><text x="38.7421%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="38.8889%" y="213" width="0.1323%" height="15" fill="rgb(213,25,53)" fg:x="294" fg:w="1"/><text x="39.1389%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (17 samples, 2.25%)</title><rect x="37.8307%" y="245" width="2.2487%" height="15" fill="rgb(252,105,26)" fg:x="286" fg:w="17"/><text x="38.0807%" y="255.50">z..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (8 samples, 1.06%)</title><rect x="39.0212%" y="229" width="1.0582%" height="15" fill="rgb(220,39,43)" fg:x="295" fg:w="8"/><text x="39.2712%" y="239.50"></text></g><g><title>vexy_json_core::parser::unescape_string (8 samples, 1.06%)</title><rect x="39.0212%" y="213" width="1.0582%" height="15" fill="rgb(229,68,48)" fg:x="295" fg:w="8"/><text x="39.2712%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.79%)</title><rect x="39.2857%" y="197" width="0.7937%" height="15" fill="rgb(252,8,32)" fg:x="297" fg:w="6"/><text x="39.5357%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.79%)</title><rect x="39.2857%" y="181" width="0.7937%" height="15" fill="rgb(223,20,43)" fg:x="297" fg:w="6"/><text x="39.5357%" y="191.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.79%)</title><rect x="39.2857%" y="165" width="0.7937%" height="15" fill="rgb(229,81,49)" fg:x="297" fg:w="6"/><text x="39.5357%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.66%)</title><rect x="39.4180%" y="149" width="0.6614%" height="15" fill="rgb(236,28,36)" fg:x="298" fg:w="5"/><text x="39.6680%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.53%)</title><rect x="39.5503%" y="133" width="0.5291%" height="15" fill="rgb(249,185,26)" fg:x="299" fg:w="4"/><text x="39.8003%" y="143.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="39.9471%" y="117" width="0.1323%" height="15" fill="rgb(249,174,33)" fg:x="302" fg:w="1"/><text x="40.1971%" y="127.50"></text></g><g><title>szone_good_size (1 samples, 0.13%)</title><rect x="41.2698%" y="149" width="0.1323%" height="15" fill="rgb(233,201,37)" fg:x="312" fg:w="1"/><text x="41.5198%" y="159.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="41.4021%" y="133" width="0.1323%" height="15" fill="rgb(221,78,26)" fg:x="313" fg:w="1"/><text x="41.6521%" y="143.50"></text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="41.5344%" y="133" width="0.1323%" height="15" fill="rgb(250,127,30)" fg:x="314" fg:w="1"/><text x="41.7844%" y="143.50"></text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="41.5344%" y="117" width="0.1323%" height="15" fill="rgb(230,49,44)" fg:x="314" fg:w="1"/><text x="41.7844%" y="127.50"></text></g><g><title>_malloc_zone_realloc (5 samples, 0.66%)</title><rect x="41.2698%" y="165" width="0.6614%" height="15" fill="rgb(229,67,23)" fg:x="312" fg:w="5"/><text x="41.5198%" y="175.50"></text></g><g><title>szone_realloc (4 samples, 0.53%)</title><rect x="41.4021%" y="149" width="0.5291%" height="15" fill="rgb(249,83,47)" fg:x="313" fg:w="4"/><text x="41.6521%" y="159.50"></text></g><g><title>tiny_try_realloc_in_place (2 samples, 0.26%)</title><rect x="41.6667%" y="133" width="0.2646%" height="15" fill="rgb(215,43,3)" fg:x="315" fg:w="2"/><text x="41.9167%" y="143.50"></text></g><g><title>_realloc (10 samples, 1.32%)</title><rect x="41.0053%" y="181" width="1.3228%" height="15" fill="rgb(238,154,13)" fg:x="310" fg:w="10"/><text x="41.2553%" y="191.50"></text></g><g><title>szone_size (3 samples, 0.40%)</title><rect x="41.9312%" y="165" width="0.3968%" height="15" fill="rgb(219,56,2)" fg:x="317" fg:w="3"/><text x="42.1812%" y="175.50"></text></g><g><title>tiny_size (3 samples, 0.40%)</title><rect x="41.9312%" y="149" width="0.3968%" height="15" fill="rgb(233,0,4)" fg:x="317" fg:w="3"/><text x="42.1812%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (25 samples, 3.31%)</title><rect x="40.0794%" y="245" width="3.3069%" height="15" fill="rgb(235,30,7)" fg:x="303" fg:w="25"/><text x="40.3294%" y="255.50">zzs..</text></g><g><title>vexy_json_core::parser::unescape_string (24 samples, 3.17%)</title><rect x="40.2116%" y="229" width="3.1746%" height="15" fill="rgb(250,79,13)" fg:x="304" fg:w="24"/><text x="40.4616%" y="239.50">zzs..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 2.65%)</title><rect x="40.7407%" y="213" width="2.6455%" height="15" fill="rgb(211,146,34)" fg:x="308" fg:w="20"/><text x="40.9907%" y="223.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 2.38%)</title><rect x="41.0053%" y="197" width="2.3810%" height="15" fill="rgb(228,22,38)" fg:x="310" fg:w="18"/><text x="41.2553%" y="207.50">al..</text></g><g><title>szone_malloc_should_clear (8 samples, 1.06%)</title><rect x="42.3280%" y="181" width="1.0582%" height="15" fill="rgb(235,168,5)" fg:x="320" fg:w="8"/><text x="42.5780%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (8 samples, 1.06%)</title><rect x="42.3280%" y="165" width="1.0582%" height="15" fill="rgb(221,155,16)" fg:x="320" fg:w="8"/><text x="42.5780%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.53%)</title><rect x="42.8571%" y="149" width="0.5291%" height="15" fill="rgb(215,215,53)" fg:x="324" fg:w="4"/><text x="43.1071%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.13%)</title><rect x="43.3862%" y="245" width="0.1323%" height="15" fill="rgb(223,4,10)" fg:x="328" fg:w="1"/><text x="43.6362%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (3 samples, 0.40%)</title><rect x="43.5185%" y="213" width="0.3968%" height="15" fill="rgb(234,103,6)" fg:x="329" fg:w="3"/><text x="43.7685%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (4 samples, 0.53%)</title><rect x="43.5185%" y="245" width="0.5291%" height="15" fill="rgb(227,97,0)" fg:x="329" fg:w="4"/><text x="43.7685%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.53%)</title><rect x="43.5185%" y="229" width="0.5291%" height="15" fill="rgb(234,150,53)" fg:x="329" fg:w="4"/><text x="43.7685%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="43.9153%" y="213" width="0.1323%" height="15" fill="rgb(228,201,54)" fg:x="332" fg:w="1"/><text x="44.1653%" y="223.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.13%)</title><rect x="51.0582%" y="213" width="0.1323%" height="15" fill="rgb(222,22,37)" fg:x="386" fg:w="1"/><text x="51.3082%" y="223.50"></text></g><g><title>_realloc (1 samples, 0.13%)</title><rect x="51.1905%" y="213" width="0.1323%" height="15" fill="rgb(237,53,32)" fg:x="387" fg:w="1"/><text x="51.4405%" y="223.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.13%)</title><rect x="51.5873%" y="197" width="0.1323%" height="15" fill="rgb(233,25,53)" fg:x="390" fg:w="1"/><text x="51.8373%" y="207.50"></text></g><g><title>szone_good_size (1 samples, 0.13%)</title><rect x="52.5132%" y="165" width="0.1323%" height="15" fill="rgb(210,40,34)" fg:x="397" fg:w="1"/><text x="52.7632%" y="175.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="52.9101%" y="149" width="0.1323%" height="15" fill="rgb(241,220,44)" fg:x="400" fg:w="1"/><text x="53.1601%" y="159.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="53.0423%" y="149" width="0.1323%" height="15" fill="rgb(235,28,35)" fg:x="401" fg:w="1"/><text x="53.2923%" y="159.50"></text></g><g><title>szone_size (11 samples, 1.46%)</title><rect x="53.1746%" y="149" width="1.4550%" height="15" fill="rgb(210,56,17)" fg:x="402" fg:w="11"/><text x="53.4246%" y="159.50"></text></g><g><title>tiny_size (11 samples, 1.46%)</title><rect x="53.1746%" y="133" width="1.4550%" height="15" fill="rgb(224,130,29)" fg:x="402" fg:w="11"/><text x="53.4246%" y="143.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.26%)</title><rect x="55.8201%" y="133" width="0.2646%" height="15" fill="rgb(235,212,8)" fg:x="422" fg:w="2"/><text x="56.0701%" y="143.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.26%)</title><rect x="56.0847%" y="133" width="0.2646%" height="15" fill="rgb(223,33,50)" fg:x="424" fg:w="2"/><text x="56.3347%" y="143.50"></text></g><g><title>_malloc_zone_realloc (34 samples, 4.50%)</title><rect x="52.2487%" y="181" width="4.4974%" height="15" fill="rgb(219,149,13)" fg:x="395" fg:w="34"/><text x="52.4987%" y="191.50">_mall..</text></g><g><title>szone_realloc (31 samples, 4.10%)</title><rect x="52.6455%" y="165" width="4.1005%" height="15" fill="rgb(250,156,29)" fg:x="398" fg:w="31"/><text x="52.8955%" y="175.50">szon..</text></g><g><title>tiny_try_realloc_in_place (16 samples, 2.12%)</title><rect x="54.6296%" y="149" width="2.1164%" height="15" fill="rgb(216,193,19)" fg:x="413" fg:w="16"/><text x="54.8796%" y="159.50">t..</text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.40%)</title><rect x="56.3492%" y="133" width="0.3968%" height="15" fill="rgb(216,135,14)" fg:x="426" fg:w="3"/><text x="56.5992%" y="143.50"></text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="56.7460%" y="181" width="0.1323%" height="15" fill="rgb(241,47,5)" fg:x="429" fg:w="1"/><text x="56.9960%" y="191.50"></text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="56.7460%" y="165" width="0.1323%" height="15" fill="rgb(233,42,35)" fg:x="429" fg:w="1"/><text x="56.9960%" y="175.50"></text></g><g><title>_realloc (40 samples, 5.29%)</title><rect x="51.7196%" y="197" width="5.2910%" height="15" fill="rgb(231,13,6)" fg:x="391" fg:w="40"/><text x="51.9696%" y="207.50">_reall..</text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="56.8783%" y="181" width="0.1323%" height="15" fill="rgb(207,181,40)" fg:x="430" fg:w="1"/><text x="57.1283%" y="191.50"></text></g><g><title>rack_get_thread_index (2 samples, 0.26%)</title><rect x="57.0106%" y="181" width="0.2646%" height="15" fill="rgb(254,173,49)" fg:x="431" fg:w="2"/><text x="57.2606%" y="191.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.13%)</title><rect x="57.2751%" y="181" width="0.1323%" height="15" fill="rgb(221,1,38)" fg:x="433" fg:w="1"/><text x="57.5251%" y="191.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="58.3333%" y="165" width="0.1323%" height="15" fill="rgb(206,124,46)" fg:x="441" fg:w="1"/><text x="58.5833%" y="175.50"></text></g><g><title>szone_malloc_should_clear (16 samples, 2.12%)</title><rect x="57.0106%" y="197" width="2.1164%" height="15" fill="rgb(249,21,11)" fg:x="431" fg:w="16"/><text x="57.2606%" y="207.50">s..</text></g><g><title>tiny_malloc_should_clear (13 samples, 1.72%)</title><rect x="57.4074%" y="181" width="1.7196%" height="15" fill="rgb(222,201,40)" fg:x="434" fg:w="13"/><text x="57.6574%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.66%)</title><rect x="58.4656%" y="165" width="0.6614%" height="15" fill="rgb(235,61,29)" fg:x="442" fg:w="5"/><text x="58.7156%" y="175.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.26%)</title><rect x="58.8624%" y="149" width="0.2646%" height="15" fill="rgb(219,207,3)" fg:x="445" fg:w="2"/><text x="59.1124%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (205 samples, 27.12%)</title><rect x="32.1429%" y="261" width="27.1164%" height="15" fill="rgb(222,56,46)" fg:x="243" fg:w="205"/><text x="32.3929%" y="271.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (115 samples, 15.21%)</title><rect x="44.0476%" y="245" width="15.2116%" height="15" fill="rgb(239,76,54)" fg:x="333" fg:w="115"/><text x="44.2976%" y="255.50">vexy_json_core::parser::une..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (64 samples, 8.47%)</title><rect x="50.7937%" y="229" width="8.4656%" height="15" fill="rgb(231,124,27)" fg:x="384" fg:w="64"/><text x="51.0437%" y="239.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::finish_grow (60 samples, 7.94%)</title><rect x="51.3228%" y="213" width="7.9365%" height="15" fill="rgb(249,195,6)" fg:x="388" fg:w="60"/><text x="51.5728%" y="223.50">alloc::raw_..</text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="59.1270%" y="197" width="0.1323%" height="15" fill="rgb(237,174,47)" fg:x="447" fg:w="1"/><text x="59.3770%" y="207.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.40%)</title><rect x="59.7884%" y="229" width="0.3968%" height="15" fill="rgb(206,201,31)" fg:x="452" fg:w="3"/><text x="60.0384%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (8 samples, 1.06%)</title><rect x="59.2593%" y="261" width="1.0582%" height="15" fill="rgb(231,57,52)" fg:x="448" fg:w="8"/><text x="59.5093%" y="271.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (5 samples, 0.66%)</title><rect x="59.6561%" y="245" width="0.6614%" height="15" fill="rgb(248,177,22)" fg:x="451" fg:w="5"/><text x="59.9061%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="60.1852%" y="229" width="0.1323%" height="15" fill="rgb(215,211,37)" fg:x="455" fg:w="1"/><text x="60.4352%" y="239.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="60.8466%" y="229" width="0.1323%" height="15" fill="rgb(241,128,51)" fg:x="460" fg:w="1"/><text x="61.0966%" y="239.50"></text></g><g><title>szone_good_size (1 samples, 0.13%)</title><rect x="60.9788%" y="181" width="0.1323%" height="15" fill="rgb(227,165,31)" fg:x="461" fg:w="1"/><text x="61.2288%" y="191.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.26%)</title><rect x="60.9788%" y="197" width="0.2646%" height="15" fill="rgb(228,167,24)" fg:x="461" fg:w="2"/><text x="61.2288%" y="207.50"></text></g><g><title>szone_realloc (1 samples, 0.13%)</title><rect x="61.1111%" y="181" width="0.1323%" height="15" fill="rgb(228,143,12)" fg:x="462" fg:w="1"/><text x="61.3611%" y="191.50"></text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="61.1111%" y="165" width="0.1323%" height="15" fill="rgb(249,149,8)" fg:x="462" fg:w="1"/><text x="61.3611%" y="175.50"></text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="61.1111%" y="149" width="0.1323%" height="15" fill="rgb(243,35,44)" fg:x="462" fg:w="1"/><text x="61.3611%" y="159.50"></text></g><g><title>_realloc (3 samples, 0.40%)</title><rect x="60.9788%" y="213" width="0.3968%" height="15" fill="rgb(246,89,9)" fg:x="461" fg:w="3"/><text x="61.2288%" y="223.50"></text></g><g><title>szone_size (1 samples, 0.13%)</title><rect x="61.2434%" y="197" width="0.1323%" height="15" fill="rgb(233,213,13)" fg:x="463" fg:w="1"/><text x="61.4934%" y="207.50"></text></g><g><title>tiny_size (1 samples, 0.13%)</title><rect x="61.2434%" y="181" width="0.1323%" height="15" fill="rgb(233,141,41)" fg:x="463" fg:w="1"/><text x="61.4934%" y="191.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.13%)</title><rect x="61.6402%" y="181" width="0.1323%" height="15" fill="rgb(239,167,4)" fg:x="466" fg:w="1"/><text x="61.8902%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (271 samples, 35.85%)</title><rect x="26.0582%" y="293" width="35.8466%" height="15" fill="rgb(209,217,16)" fg:x="197" fg:w="271"/><text x="26.3082%" y="303.50">vexy_json_core::parser::Parser::parse_array</text></g><g><title>vexy_json_core::parser::Parser::parse_value (271 samples, 35.85%)</title><rect x="26.0582%" y="277" width="35.8466%" height="15" fill="rgb(219,88,35)" fg:x="197" fg:w="271"/><text x="26.3082%" y="287.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (12 samples, 1.59%)</title><rect x="60.3175%" y="261" width="1.5873%" height="15" fill="rgb(220,193,23)" fg:x="456" fg:w="12"/><text x="60.5675%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8 samples, 1.06%)</title><rect x="60.8466%" y="245" width="1.0582%" height="15" fill="rgb(230,90,52)" fg:x="460" fg:w="8"/><text x="61.0966%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.93%)</title><rect x="60.9788%" y="229" width="0.9259%" height="15" fill="rgb(252,106,19)" fg:x="461" fg:w="7"/><text x="61.2288%" y="239.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.53%)</title><rect x="61.3757%" y="213" width="0.5291%" height="15" fill="rgb(206,74,20)" fg:x="464" fg:w="4"/><text x="61.6257%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (4 samples, 0.53%)</title><rect x="61.3757%" y="197" width="0.5291%" height="15" fill="rgb(230,138,44)" fg:x="464" fg:w="4"/><text x="61.6257%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="61.7725%" y="181" width="0.1323%" height="15" fill="rgb(235,182,43)" fg:x="467" fg:w="1"/><text x="62.0225%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.13%)</title><rect x="61.7725%" y="165" width="0.1323%" height="15" fill="rgb(242,16,51)" fg:x="467" fg:w="1"/><text x="62.0225%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.13%)</title><rect x="62.4339%" y="261" width="0.1323%" height="15" fill="rgb(248,9,4)" fg:x="472" fg:w="1"/><text x="62.6839%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="62.6984%" y="245" width="0.3968%" height="15" fill="rgb(210,31,22)" fg:x="474" fg:w="3"/><text x="62.9484%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.40%)</title><rect x="62.6984%" y="229" width="0.3968%" height="15" fill="rgb(239,54,39)" fg:x="474" fg:w="3"/><text x="62.9484%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 1.06%)</title><rect x="62.1693%" y="277" width="1.0582%" height="15" fill="rgb(230,99,41)" fg:x="470" fg:w="8"/><text x="62.4193%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.66%)</title><rect x="62.5661%" y="261" width="0.6614%" height="15" fill="rgb(253,106,12)" fg:x="473" fg:w="5"/><text x="62.8161%" y="271.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="63.0952%" y="245" width="0.1323%" height="15" fill="rgb(213,46,41)" fg:x="477" fg:w="1"/><text x="63.3452%" y="255.50"></text></g><g><title>small_malloc_should_clear (1 samples, 0.13%)</title><rect x="63.0952%" y="229" width="0.1323%" height="15" fill="rgb(215,133,35)" fg:x="477" fg:w="1"/><text x="63.3452%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.53%)</title><rect x="63.2275%" y="277" width="0.5291%" height="15" fill="rgb(213,28,5)" fg:x="478" fg:w="4"/><text x="63.4775%" y="287.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.26%)</title><rect x="63.4921%" y="261" width="0.2646%" height="15" fill="rgb(215,77,49)" fg:x="480" fg:w="2"/><text x="63.7421%" y="271.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (1 samples, 0.13%)</title><rect x="63.7566%" y="277" width="0.1323%" height="15" fill="rgb(248,100,22)" fg:x="482" fg:w="1"/><text x="64.0066%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (1 samples, 0.13%)</title><rect x="64.0212%" y="261" width="0.1323%" height="15" fill="rgb(208,67,9)" fg:x="484" fg:w="1"/><text x="64.2712%" y="271.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="64.0212%" y="245" width="0.1323%" height="15" fill="rgb(219,133,21)" fg:x="484" fg:w="1"/><text x="64.2712%" y="255.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.26%)</title><rect x="64.1534%" y="261" width="0.2646%" height="15" fill="rgb(246,46,29)" fg:x="485" fg:w="2"/><text x="64.4034%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.53%)</title><rect x="64.6825%" y="245" width="0.5291%" height="15" fill="rgb(246,185,52)" fg:x="489" fg:w="4"/><text x="64.9325%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.26%)</title><rect x="64.9471%" y="229" width="0.2646%" height="15" fill="rgb(252,136,11)" fg:x="491" fg:w="2"/><text x="65.1971%" y="239.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="65.3439%" y="213" width="0.1323%" height="15" fill="rgb(219,138,53)" fg:x="494" fg:w="1"/><text x="65.5939%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 1.46%)</title><rect x="64.4180%" y="261" width="1.4550%" height="15" fill="rgb(211,51,23)" fg:x="487" fg:w="11"/><text x="64.6680%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.66%)</title><rect x="65.2116%" y="245" width="0.6614%" height="15" fill="rgb(247,221,28)" fg:x="493" fg:w="5"/><text x="65.4616%" y="255.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.53%)</title><rect x="65.3439%" y="229" width="0.5291%" height="15" fill="rgb(251,222,45)" fg:x="494" fg:w="4"/><text x="65.5939%" y="239.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="65.4762%" y="213" width="0.3968%" height="15" fill="rgb(217,162,53)" fg:x="495" fg:w="3"/><text x="65.7262%" y="223.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.26%)</title><rect x="65.6085%" y="197" width="0.2646%" height="15" fill="rgb(229,93,14)" fg:x="496" fg:w="2"/><text x="65.8585%" y="207.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="65.7407%" y="181" width="0.1323%" height="15" fill="rgb(209,67,49)" fg:x="497" fg:w="1"/><text x="65.9907%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="66.1376%" y="245" width="0.1323%" height="15" fill="rgb(213,87,29)" fg:x="500" fg:w="1"/><text x="66.3876%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.53%)</title><rect x="65.8730%" y="261" width="0.5291%" height="15" fill="rgb(205,151,52)" fg:x="498" fg:w="4"/><text x="66.1230%" y="271.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="66.2698%" y="245" width="0.1323%" height="15" fill="rgb(253,215,39)" fg:x="501" fg:w="1"/><text x="66.5198%" y="255.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="66.7989%" y="197" width="0.1323%" height="15" fill="rgb(221,220,41)" fg:x="505" fg:w="1"/><text x="67.0489%" y="207.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="67.0635%" y="181" width="0.1323%" height="15" fill="rgb(218,133,21)" fg:x="507" fg:w="1"/><text x="67.3135%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.66%)</title><rect x="66.6667%" y="245" width="0.6614%" height="15" fill="rgb(221,193,43)" fg:x="504" fg:w="5"/><text x="66.9167%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.66%)</title><rect x="66.6667%" y="229" width="0.6614%" height="15" fill="rgb(240,128,52)" fg:x="504" fg:w="5"/><text x="66.9167%" y="239.50"></text></g><g><title>szone_malloc_should_clear (5 samples, 0.66%)</title><rect x="66.6667%" y="213" width="0.6614%" height="15" fill="rgb(253,114,12)" fg:x="504" fg:w="5"/><text x="66.9167%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="66.9312%" y="197" width="0.3968%" height="15" fill="rgb(215,223,47)" fg:x="506" fg:w="3"/><text x="67.1812%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="67.1958%" y="181" width="0.1323%" height="15" fill="rgb(248,225,23)" fg:x="508" fg:w="1"/><text x="67.4458%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (4 samples, 0.53%)</title><rect x="67.5926%" y="229" width="0.5291%" height="15" fill="rgb(250,108,0)" fg:x="511" fg:w="4"/><text x="67.8426%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (8 samples, 1.06%)</title><rect x="67.3280%" y="245" width="1.0582%" height="15" fill="rgb(228,208,7)" fg:x="509" fg:w="8"/><text x="67.5780%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.26%)</title><rect x="68.1217%" y="229" width="0.2646%" height="15" fill="rgb(244,45,10)" fg:x="515" fg:w="2"/><text x="68.3717%" y="239.50"></text></g><g><title>__rustc::__rust_dealloc (1 samples, 0.13%)</title><rect x="68.9153%" y="229" width="0.1323%" height="15" fill="rgb(207,125,25)" fg:x="521" fg:w="1"/><text x="69.1653%" y="239.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.13%)</title><rect x="69.0476%" y="229" width="0.1323%" height="15" fill="rgb(210,195,18)" fg:x="522" fg:w="1"/><text x="69.2976%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.93%)</title><rect x="69.8413%" y="213" width="0.9259%" height="15" fill="rgb(249,80,12)" fg:x="528" fg:w="7"/><text x="70.0913%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.13%)</title><rect x="70.6349%" y="197" width="0.1323%" height="15" fill="rgb(221,65,9)" fg:x="534" fg:w="1"/><text x="70.8849%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17 samples, 2.25%)</title><rect x="69.1799%" y="229" width="2.2487%" height="15" fill="rgb(235,49,36)" fg:x="523" fg:w="17"/><text x="69.4299%" y="239.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.66%)</title><rect x="70.7672%" y="213" width="0.6614%" height="15" fill="rgb(225,32,20)" fg:x="535" fg:w="5"/><text x="71.0172%" y="223.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="71.0317%" y="197" width="0.3968%" height="15" fill="rgb(215,141,46)" fg:x="537" fg:w="3"/><text x="71.2817%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="71.0317%" y="181" width="0.3968%" height="15" fill="rgb(250,160,47)" fg:x="537" fg:w="3"/><text x="71.2817%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="71.2963%" y="165" width="0.1323%" height="15" fill="rgb(216,222,40)" fg:x="539" fg:w="1"/><text x="71.5463%" y="175.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="71.4286%" y="229" width="0.1323%" height="15" fill="rgb(234,217,39)" fg:x="540" fg:w="1"/><text x="71.6786%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (4 samples, 0.53%)</title><rect x="71.9577%" y="213" width="0.5291%" height="15" fill="rgb(207,178,40)" fg:x="544" fg:w="4"/><text x="72.2077%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.26%)</title><rect x="72.4868%" y="213" width="0.2646%" height="15" fill="rgb(221,136,13)" fg:x="548" fg:w="2"/><text x="72.7368%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (12 samples, 1.59%)</title><rect x="71.5608%" y="229" width="1.5873%" height="15" fill="rgb(249,199,10)" fg:x="541" fg:w="12"/><text x="71.8108%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (3 samples, 0.40%)</title><rect x="72.7513%" y="213" width="0.3968%" height="15" fill="rgb(249,222,13)" fg:x="550" fg:w="3"/><text x="73.0013%" y="223.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="73.6772%" y="213" width="0.1323%" height="15" fill="rgb(244,185,38)" fg:x="557" fg:w="1"/><text x="73.9272%" y="223.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2 samples, 0.26%)</title><rect x="73.8095%" y="213" width="0.2646%" height="15" fill="rgb(236,202,9)" fg:x="558" fg:w="2"/><text x="74.0595%" y="223.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.13%)</title><rect x="73.9418%" y="197" width="0.1323%" height="15" fill="rgb(250,229,37)" fg:x="559" fg:w="1"/><text x="74.1918%" y="207.50"></text></g><g><title>free_tiny (5 samples, 0.66%)</title><rect x="74.0741%" y="213" width="0.6614%" height="15" fill="rgb(206,174,23)" fg:x="560" fg:w="5"/><text x="74.3241%" y="223.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="74.7354%" y="197" width="0.1323%" height="15" fill="rgb(211,33,43)" fg:x="565" fg:w="1"/><text x="74.9854%" y="207.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.79%)</title><rect x="74.7354%" y="213" width="0.7937%" height="15" fill="rgb(245,58,50)" fg:x="565" fg:w="6"/><text x="74.9854%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.66%)</title><rect x="74.8677%" y="197" width="0.6614%" height="15" fill="rgb(244,68,36)" fg:x="566" fg:w="5"/><text x="75.1177%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.26%)</title><rect x="75.2646%" y="181" width="0.2646%" height="15" fill="rgb(232,229,15)" fg:x="569" fg:w="2"/><text x="75.5146%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (2 samples, 0.26%)</title><rect x="75.5291%" y="213" width="0.2646%" height="15" fill="rgb(254,30,23)" fg:x="571" fg:w="2"/><text x="75.7791%" y="223.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.40%)</title><rect x="76.1905%" y="149" width="0.3968%" height="15" fill="rgb(235,160,14)" fg:x="576" fg:w="3"/><text x="76.4405%" y="159.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.13%)</title><rect x="76.9841%" y="133" width="0.1323%" height="15" fill="rgb(212,155,44)" fg:x="582" fg:w="1"/><text x="77.2341%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (37 samples, 4.89%)</title><rect x="73.1481%" y="229" width="4.8942%" height="15" fill="rgb(226,2,50)" fg:x="553" fg:w="37"/><text x="73.3981%" y="239.50">vexy_json_..</text></g><g><title>vexy_json_core::parser::unescape_string (17 samples, 2.25%)</title><rect x="75.7937%" y="213" width="2.2487%" height="15" fill="rgb(234,177,6)" fg:x="573" fg:w="17"/><text x="76.0437%" y="223.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (15 samples, 1.98%)</title><rect x="76.0582%" y="197" width="1.9841%" height="15" fill="rgb(217,24,9)" fg:x="575" fg:w="15"/><text x="76.3082%" y="207.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 1.98%)</title><rect x="76.0582%" y="181" width="1.9841%" height="15" fill="rgb(220,13,46)" fg:x="575" fg:w="15"/><text x="76.3082%" y="191.50">a..</text></g><g><title>szone_malloc_should_clear (14 samples, 1.85%)</title><rect x="76.1905%" y="165" width="1.8519%" height="15" fill="rgb(239,221,27)" fg:x="576" fg:w="14"/><text x="76.4405%" y="175.50">s..</text></g><g><title>tiny_malloc_should_clear (11 samples, 1.46%)</title><rect x="76.5873%" y="149" width="1.4550%" height="15" fill="rgb(222,198,25)" fg:x="579" fg:w="11"/><text x="76.8373%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (7 samples, 0.93%)</title><rect x="77.1164%" y="133" width="0.9259%" height="15" fill="rgb(211,99,13)" fg:x="583" fg:w="7"/><text x="77.3664%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (1 samples, 0.13%)</title><rect x="78.0423%" y="229" width="0.1323%" height="15" fill="rgb(232,111,31)" fg:x="590" fg:w="1"/><text x="78.2923%" y="239.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="78.7037%" y="197" width="0.1323%" height="15" fill="rgb(245,82,37)" fg:x="595" fg:w="1"/><text x="78.9537%" y="207.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.40%)</title><rect x="79.3651%" y="165" width="0.3968%" height="15" fill="rgb(227,149,46)" fg:x="600" fg:w="3"/><text x="79.6151%" y="175.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="80.9524%" y="149" width="0.1323%" height="15" fill="rgb(218,36,50)" fg:x="612" fg:w="1"/><text x="81.2024%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (113 samples, 14.95%)</title><rect x="66.4021%" y="261" width="14.9471%" height="15" fill="rgb(226,80,48)" fg:x="502" fg:w="113"/><text x="66.6521%" y="271.50">vexy_json_core::parser::Par..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (98 samples, 12.96%)</title><rect x="68.3862%" y="245" width="12.9630%" height="15" fill="rgb(238,224,15)" fg:x="517" fg:w="98"/><text x="68.6362%" y="255.50">vexy_json_core::parser:..</text></g><g><title>vexy_json_core::parser::unescape_string (24 samples, 3.17%)</title><rect x="78.1746%" y="229" width="3.1746%" height="15" fill="rgb(241,136,10)" fg:x="591" fg:w="24"/><text x="78.4246%" y="239.50">zzs..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (21 samples, 2.78%)</title><rect x="78.5714%" y="213" width="2.7778%" height="15" fill="rgb(208,32,45)" fg:x="594" fg:w="21"/><text x="78.8214%" y="223.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 2.51%)</title><rect x="78.8360%" y="197" width="2.5132%" height="15" fill="rgb(207,135,9)" fg:x="596" fg:w="19"/><text x="79.0860%" y="207.50">al..</text></g><g><title>szone_malloc_should_clear (18 samples, 2.38%)</title><rect x="78.9683%" y="181" width="2.3810%" height="15" fill="rgb(206,86,44)" fg:x="597" fg:w="18"/><text x="79.2183%" y="191.50">sz..</text></g><g><title>tiny_malloc_should_clear (12 samples, 1.59%)</title><rect x="79.7619%" y="165" width="1.5873%" height="15" fill="rgb(245,177,15)" fg:x="603" fg:w="12"/><text x="80.0119%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.26%)</title><rect x="81.0847%" y="149" width="0.2646%" height="15" fill="rgb(206,64,50)" fg:x="613" fg:w="2"/><text x="81.3347%" y="159.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="81.2169%" y="133" width="0.1323%" height="15" fill="rgb(234,36,40)" fg:x="614" fg:w="1"/><text x="81.4669%" y="143.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.13%)</title><rect x="81.6138%" y="245" width="0.1323%" height="15" fill="rgb(213,64,8)" fg:x="617" fg:w="1"/><text x="81.8638%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (1 samples, 0.13%)</title><rect x="81.6138%" y="229" width="0.1323%" height="15" fill="rgb(210,75,36)" fg:x="617" fg:w="1"/><text x="81.8638%" y="239.50"></text></g><g><title>_tlv_get_addr (1 samples, 0.13%)</title><rect x="81.7460%" y="245" width="0.1323%" height="15" fill="rgb(229,88,21)" fg:x="618" fg:w="1"/><text x="81.9960%" y="255.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.13%)</title><rect x="81.8783%" y="245" width="0.1323%" height="15" fill="rgb(252,204,47)" fg:x="619" fg:w="1"/><text x="82.1283%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.26%)</title><rect x="82.2751%" y="229" width="0.2646%" height="15" fill="rgb(208,77,27)" fg:x="622" fg:w="2"/><text x="82.5251%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.93%)</title><rect x="82.0106%" y="245" width="0.9259%" height="15" fill="rgb(221,76,26)" fg:x="620" fg:w="7"/><text x="82.2606%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.40%)</title><rect x="82.5397%" y="229" width="0.3968%" height="15" fill="rgb(225,139,18)" fg:x="624" fg:w="3"/><text x="82.7897%" y="239.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="82.5397%" y="213" width="0.3968%" height="15" fill="rgb(230,137,11)" fg:x="624" fg:w="3"/><text x="82.7897%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.40%)</title><rect x="82.5397%" y="197" width="0.3968%" height="15" fill="rgb(212,28,1)" fg:x="624" fg:w="3"/><text x="82.7897%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="82.8042%" y="181" width="0.1323%" height="15" fill="rgb(248,164,17)" fg:x="626" fg:w="1"/><text x="83.0542%" y="191.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.53%)</title><rect x="82.9365%" y="245" width="0.5291%" height="15" fill="rgb(222,171,42)" fg:x="627" fg:w="4"/><text x="83.1865%" y="255.50"></text></g><g><title>tiny_malloc_should_clear (4 samples, 0.53%)</title><rect x="82.9365%" y="229" width="0.5291%" height="15" fill="rgb(243,84,45)" fg:x="627" fg:w="4"/><text x="83.1865%" y="239.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.40%)</title><rect x="83.0688%" y="213" width="0.3968%" height="15" fill="rgb(252,49,23)" fg:x="628" fg:w="3"/><text x="83.3188%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (8 samples, 1.06%)</title><rect x="83.9947%" y="229" width="1.0582%" height="15" fill="rgb(215,19,7)" fg:x="635" fg:w="8"/><text x="84.2447%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="85.0529%" y="229" width="0.1323%" height="15" fill="rgb(238,81,41)" fg:x="643" fg:w="1"/><text x="85.3029%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (15 samples, 1.98%)</title><rect x="83.4656%" y="245" width="1.9841%" height="15" fill="rgb(210,199,37)" fg:x="631" fg:w="15"/><text x="83.7156%" y="255.50">z..</text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (2 samples, 0.26%)</title><rect x="85.1852%" y="229" width="0.2646%" height="15" fill="rgb(244,192,49)" fg:x="644" fg:w="2"/><text x="85.4352%" y="239.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.13%)</title><rect x="85.7143%" y="229" width="0.1323%" height="15" fill="rgb(226,211,11)" fg:x="648" fg:w="1"/><text x="85.9643%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="85.7143%" y="213" width="0.1323%" height="15" fill="rgb(236,162,54)" fg:x="648" fg:w="1"/><text x="85.9643%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.26%)</title><rect x="85.8466%" y="229" width="0.2646%" height="15" fill="rgb(220,229,9)" fg:x="649" fg:w="2"/><text x="86.0966%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.26%)</title><rect x="85.8466%" y="213" width="0.2646%" height="15" fill="rgb(250,87,22)" fg:x="649" fg:w="2"/><text x="86.0966%" y="223.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.26%)</title><rect x="85.8466%" y="197" width="0.2646%" height="15" fill="rgb(239,43,17)" fg:x="649" fg:w="2"/><text x="86.0966%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.26%)</title><rect x="85.8466%" y="181" width="0.2646%" height="15" fill="rgb(231,177,25)" fg:x="649" fg:w="2"/><text x="86.0966%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="85.9788%" y="165" width="0.1323%" height="15" fill="rgb(219,179,1)" fg:x="650" fg:w="1"/><text x="86.2288%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.13%)</title><rect x="86.2434%" y="213" width="0.1323%" height="15" fill="rgb(238,219,53)" fg:x="652" fg:w="1"/><text x="86.4934%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="86.2434%" y="197" width="0.1323%" height="15" fill="rgb(232,167,36)" fg:x="652" fg:w="1"/><text x="86.4934%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.93%)</title><rect x="86.7725%" y="181" width="0.9259%" height="15" fill="rgb(244,19,51)" fg:x="656" fg:w="7"/><text x="87.0225%" y="191.50"></text></g><g><title>szone_malloc_should_clear (7 samples, 0.93%)</title><rect x="86.7725%" y="165" width="0.9259%" height="15" fill="rgb(224,6,22)" fg:x="656" fg:w="7"/><text x="87.0225%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.79%)</title><rect x="86.9048%" y="149" width="0.7937%" height="15" fill="rgb(224,145,5)" fg:x="657" fg:w="6"/><text x="87.1548%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.26%)</title><rect x="87.4339%" y="133" width="0.2646%" height="15" fill="rgb(234,130,49)" fg:x="661" fg:w="2"/><text x="87.6839%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (18 samples, 2.38%)</title><rect x="85.4497%" y="245" width="2.3810%" height="15" fill="rgb(254,6,2)" fg:x="646" fg:w="18"/><text x="85.6997%" y="255.50">zz..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (13 samples, 1.72%)</title><rect x="86.1111%" y="229" width="1.7196%" height="15" fill="rgb(208,96,46)" fg:x="651" fg:w="13"/><text x="86.3611%" y="239.50"></text></g><g><title>vexy_json_core::parser::unescape_string (11 samples, 1.46%)</title><rect x="86.3757%" y="213" width="1.4550%" height="15" fill="rgb(239,3,39)" fg:x="653" fg:w="11"/><text x="86.6257%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (10 samples, 1.32%)</title><rect x="86.5079%" y="197" width="1.3228%" height="15" fill="rgb(233,210,1)" fg:x="654" fg:w="10"/><text x="86.7579%" y="207.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="87.6984%" y="181" width="0.1323%" height="15" fill="rgb(244,137,37)" fg:x="663" fg:w="1"/><text x="87.9484%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="88.2275%" y="213" width="0.3968%" height="15" fill="rgb(240,136,2)" fg:x="667" fg:w="3"/><text x="88.4775%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.40%)</title><rect x="88.2275%" y="197" width="0.3968%" height="15" fill="rgb(239,18,37)" fg:x="667" fg:w="3"/><text x="88.4775%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.13%)</title><rect x="88.6243%" y="197" width="0.1323%" height="15" fill="rgb(218,185,22)" fg:x="670" fg:w="1"/><text x="88.8743%" y="207.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="88.7566%" y="181" width="0.1323%" height="15" fill="rgb(225,218,4)" fg:x="671" fg:w="1"/><text x="89.0066%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 1.06%)</title><rect x="87.9630%" y="229" width="1.0582%" height="15" fill="rgb(230,182,32)" fg:x="665" fg:w="8"/><text x="88.2130%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.40%)</title><rect x="88.6243%" y="213" width="0.3968%" height="15" fill="rgb(242,56,43)" fg:x="670" fg:w="3"/><text x="88.8743%" y="223.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.26%)</title><rect x="88.7566%" y="197" width="0.2646%" height="15" fill="rgb(233,99,24)" fg:x="671" fg:w="2"/><text x="89.0066%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.13%)</title><rect x="88.8889%" y="181" width="0.1323%" height="15" fill="rgb(234,209,42)" fg:x="672" fg:w="1"/><text x="89.1389%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (3 samples, 0.40%)</title><rect x="89.8148%" y="213" width="0.3968%" height="15" fill="rgb(227,7,12)" fg:x="679" fg:w="3"/><text x="90.0648%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (11 samples, 1.46%)</title><rect x="89.0212%" y="229" width="1.4550%" height="15" fill="rgb(245,203,43)" fg:x="673" fg:w="11"/><text x="89.2712%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.26%)</title><rect x="90.2116%" y="213" width="0.2646%" height="15" fill="rgb(238,205,33)" fg:x="682" fg:w="2"/><text x="90.4616%" y="223.50"></text></g><g><title>free_tiny (2 samples, 0.26%)</title><rect x="90.6085%" y="213" width="0.2646%" height="15" fill="rgb(231,56,7)" fg:x="685" fg:w="2"/><text x="90.8585%" y="223.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.26%)</title><rect x="90.8730%" y="213" width="0.2646%" height="15" fill="rgb(244,186,29)" fg:x="687" fg:w="2"/><text x="91.1230%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.26%)</title><rect x="90.8730%" y="197" width="0.2646%" height="15" fill="rgb(234,111,31)" fg:x="687" fg:w="2"/><text x="91.1230%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="91.0053%" y="181" width="0.1323%" height="15" fill="rgb(241,149,10)" fg:x="688" fg:w="1"/><text x="91.2553%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (6 samples, 0.79%)</title><rect x="90.4762%" y="229" width="0.7937%" height="15" fill="rgb(249,206,44)" fg:x="684" fg:w="6"/><text x="90.7262%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.13%)</title><rect x="91.1376%" y="213" width="0.1323%" height="15" fill="rgb(251,153,30)" fg:x="689" fg:w="1"/><text x="91.3876%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (1 samples, 0.13%)</title><rect x="91.2698%" y="229" width="0.1323%" height="15" fill="rgb(239,152,38)" fg:x="690" fg:w="1"/><text x="91.5198%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.13%)</title><rect x="91.2698%" y="213" width="0.1323%" height="15" fill="rgb(249,139,47)" fg:x="690" fg:w="1"/><text x="91.5198%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="91.2698%" y="197" width="0.1323%" height="15" fill="rgb(244,64,35)" fg:x="690" fg:w="1"/><text x="91.5198%" y="207.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="92.1958%" y="197" width="0.1323%" height="15" fill="rgb(216,46,15)" fg:x="697" fg:w="1"/><text x="92.4458%" y="207.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.26%)</title><rect x="92.3280%" y="165" width="0.2646%" height="15" fill="rgb(250,74,19)" fg:x="698" fg:w="2"/><text x="92.5780%" y="175.50"></text></g><g><title>szone_realloc (2 samples, 0.26%)</title><rect x="92.3280%" y="149" width="0.2646%" height="15" fill="rgb(249,42,33)" fg:x="698" fg:w="2"/><text x="92.5780%" y="159.50"></text></g><g><title>szone_size (2 samples, 0.26%)</title><rect x="92.3280%" y="133" width="0.2646%" height="15" fill="rgb(242,149,17)" fg:x="698" fg:w="2"/><text x="92.5780%" y="143.50"></text></g><g><title>tiny_size (2 samples, 0.26%)</title><rect x="92.3280%" y="117" width="0.2646%" height="15" fill="rgb(244,29,21)" fg:x="698" fg:w="2"/><text x="92.5780%" y="127.50"></text></g><g><title>_realloc (4 samples, 0.53%)</title><rect x="92.3280%" y="181" width="0.5291%" height="15" fill="rgb(220,130,37)" fg:x="698" fg:w="4"/><text x="92.5780%" y="191.50"></text></g><g><title>szone_size (2 samples, 0.26%)</title><rect x="92.5926%" y="165" width="0.2646%" height="15" fill="rgb(211,67,2)" fg:x="700" fg:w="2"/><text x="92.8426%" y="175.50"></text></g><g><title>tiny_size (2 samples, 0.26%)</title><rect x="92.5926%" y="149" width="0.2646%" height="15" fill="rgb(235,68,52)" fg:x="700" fg:w="2"/><text x="92.8426%" y="159.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="92.8571%" y="165" width="0.1323%" height="15" fill="rgb(246,142,3)" fg:x="702" fg:w="1"/><text x="93.1071%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (45 samples, 5.95%)</title><rect x="87.8307%" y="245" width="5.9524%" height="15" fill="rgb(241,25,7)" fg:x="664" fg:w="45"/><text x="88.0807%" y="255.50">vexy_json_co..</text></g><g><title>vexy_json_core::parser::unescape_string (18 samples, 2.38%)</title><rect x="91.4021%" y="229" width="2.3810%" height="15" fill="rgb(242,119,39)" fg:x="691" fg:w="18"/><text x="91.6521%" y="239.50">zz..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 1.59%)</title><rect x="92.1958%" y="213" width="1.5873%" height="15" fill="rgb(241,98,45)" fg:x="697" fg:w="12"/><text x="92.4458%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 1.46%)</title><rect x="92.3280%" y="197" width="1.4550%" height="15" fill="rgb(254,28,30)" fg:x="698" fg:w="11"/><text x="92.5780%" y="207.50"></text></g><g><title>szone_malloc_should_clear (7 samples, 0.93%)</title><rect x="92.8571%" y="181" width="0.9259%" height="15" fill="rgb(241,142,54)" fg:x="702" fg:w="7"/><text x="93.1071%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.79%)</title><rect x="92.9894%" y="165" width="0.7937%" height="15" fill="rgb(222,85,15)" fg:x="703" fg:w="6"/><text x="93.2394%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.53%)</title><rect x="93.2540%" y="149" width="0.5291%" height="15" fill="rgb(210,85,47)" fg:x="705" fg:w="4"/><text x="93.5040%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.13%)</title><rect x="93.7831%" y="245" width="0.1323%" height="15" fill="rgb(224,206,25)" fg:x="709" fg:w="1"/><text x="94.0331%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="93.9153%" y="213" width="0.1323%" height="15" fill="rgb(243,201,19)" fg:x="710" fg:w="1"/><text x="94.1653%" y="223.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.40%)</title><rect x="94.0476%" y="213" width="0.3968%" height="15" fill="rgb(236,59,4)" fg:x="711" fg:w="3"/><text x="94.2976%" y="223.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (5 samples, 0.66%)</title><rect x="93.9153%" y="245" width="0.6614%" height="15" fill="rgb(254,179,45)" fg:x="710" fg:w="5"/><text x="94.1653%" y="255.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (5 samples, 0.66%)</title><rect x="93.9153%" y="229" width="0.6614%" height="15" fill="rgb(226,14,10)" fg:x="710" fg:w="5"/><text x="94.1653%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="94.4444%" y="213" width="0.1323%" height="15" fill="rgb(244,27,41)" fg:x="714" fg:w="1"/><text x="94.6944%" y="223.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.13%)</title><rect x="95.1058%" y="181" width="0.1323%" height="15" fill="rgb(235,35,32)" fg:x="719" fg:w="1"/><text x="95.3558%" y="191.50"></text></g><g><title>_realloc (3 samples, 0.40%)</title><rect x="95.1058%" y="197" width="0.3968%" height="15" fill="rgb(218,68,31)" fg:x="719" fg:w="3"/><text x="95.3558%" y="207.50"></text></g><g><title>szone_size (2 samples, 0.26%)</title><rect x="95.2381%" y="181" width="0.2646%" height="15" fill="rgb(207,120,37)" fg:x="720" fg:w="2"/><text x="95.4881%" y="191.50"></text></g><g><title>tiny_size (2 samples, 0.26%)</title><rect x="95.2381%" y="165" width="0.2646%" height="15" fill="rgb(227,98,0)" fg:x="720" fg:w="2"/><text x="95.4881%" y="175.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="95.6349%" y="181" width="0.1323%" height="15" fill="rgb(207,7,3)" fg:x="723" fg:w="1"/><text x="95.8849%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (115 samples, 15.21%)</title><rect x="81.3492%" y="261" width="15.2116%" height="15" fill="rgb(206,98,19)" fg:x="615" fg:w="115"/><text x="81.5992%" y="271.50">vexy_json_core::parser::Par..</text></g><g><title>vexy_json_core::parser::unescape_string (15 samples, 1.98%)</title><rect x="94.5767%" y="245" width="1.9841%" height="15" fill="rgb(217,5,26)" fg:x="715" fg:w="15"/><text x="94.8267%" y="255.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 1.59%)</title><rect x="94.9735%" y="229" width="1.5873%" height="15" fill="rgb(235,190,38)" fg:x="718" fg:w="12"/><text x="95.2235%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 1.59%)</title><rect x="94.9735%" y="213" width="1.5873%" height="15" fill="rgb(247,86,24)" fg:x="718" fg:w="12"/><text x="95.2235%" y="223.50"></text></g><g><title>szone_malloc_should_clear (8 samples, 1.06%)</title><rect x="95.5026%" y="197" width="1.0582%" height="15" fill="rgb(205,101,16)" fg:x="722" fg:w="8"/><text x="95.7526%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.79%)</title><rect x="95.7672%" y="181" width="0.7937%" height="15" fill="rgb(246,168,33)" fg:x="724" fg:w="6"/><text x="96.0172%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.66%)</title><rect x="95.8995%" y="165" width="0.6614%" height="15" fill="rgb(231,114,1)" fg:x="725" fg:w="5"/><text x="96.1495%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.13%)</title><rect x="96.5608%" y="229" width="0.1323%" height="15" fill="rgb(207,184,53)" fg:x="730" fg:w="1"/><text x="96.8108%" y="239.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.13%)</title><rect x="96.6931%" y="229" width="0.1323%" height="15" fill="rgb(224,95,51)" fg:x="731" fg:w="1"/><text x="96.9431%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (3 samples, 0.40%)</title><rect x="96.5608%" y="261" width="0.3968%" height="15" fill="rgb(212,188,45)" fg:x="730" fg:w="3"/><text x="96.8108%" y="271.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.40%)</title><rect x="96.5608%" y="245" width="0.3968%" height="15" fill="rgb(223,154,38)" fg:x="730" fg:w="3"/><text x="96.8108%" y="255.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.13%)</title><rect x="96.8254%" y="229" width="0.1323%" height="15" fill="rgb(251,22,52)" fg:x="732" fg:w="1"/><text x="97.0754%" y="239.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.26%)</title><rect x="97.2222%" y="229" width="0.2646%" height="15" fill="rgb(229,209,22)" fg:x="735" fg:w="2"/><text x="97.4722%" y="239.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (265 samples, 35.05%)</title><rect x="63.8889%" y="277" width="35.0529%" height="15" fill="rgb(234,138,34)" fg:x="483" fg:w="265"/><text x="64.1389%" y="287.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (15 samples, 1.98%)</title><rect x="96.9577%" y="261" width="1.9841%" height="15" fill="rgb(212,95,11)" fg:x="733" fg:w="15"/><text x="97.2077%" y="271.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 1.72%)</title><rect x="97.2222%" y="245" width="1.7196%" height="15" fill="rgb(240,179,47)" fg:x="735" fg:w="13"/><text x="97.4722%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 1.46%)</title><rect x="97.4868%" y="229" width="1.4550%" height="15" fill="rgb(240,163,11)" fg:x="737" fg:w="11"/><text x="97.7368%" y="239.50"></text></g><g><title>szone_malloc_should_clear (8 samples, 1.06%)</title><rect x="97.8836%" y="213" width="1.0582%" height="15" fill="rgb(236,37,12)" fg:x="740" fg:w="8"/><text x="98.1336%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (7 samples, 0.93%)</title><rect x="98.0159%" y="197" width="0.9259%" height="15" fill="rgb(232,164,16)" fg:x="741" fg:w="7"/><text x="98.2659%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.40%)</title><rect x="98.5450%" y="181" width="0.3968%" height="15" fill="rgb(244,205,15)" fg:x="745" fg:w="3"/><text x="98.7950%" y="191.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.13%)</title><rect x="98.8095%" y="165" width="0.1323%" height="15" fill="rgb(223,117,47)" fg:x="747" fg:w="1"/><text x="99.0595%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.13%)</title><rect x="98.9418%" y="277" width="0.1323%" height="15" fill="rgb(244,107,35)" fg:x="748" fg:w="1"/><text x="99.1918%" y="287.50"></text></g><g><title>_realloc (2 samples, 0.26%)</title><rect x="99.3386%" y="229" width="0.2646%" height="15" fill="rgb(205,140,8)" fg:x="751" fg:w="2"/><text x="99.5886%" y="239.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.26%)</title><rect x="99.3386%" y="213" width="0.2646%" height="15" fill="rgb(228,84,46)" fg:x="751" fg:w="2"/><text x="99.5886%" y="223.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.13%)</title><rect x="99.6032%" y="213" width="0.1323%" height="15" fill="rgb(254,188,9)" fg:x="753" fg:w="1"/><text x="99.8532%" y="223.50"></text></g><g><title>all (756 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(206,112,54)" fg:x="0" fg:w="756"/><text x="0.2500%" y="447.50"></text></g><g><title>start (756 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(216,84,49)" fg:x="0" fg:w="756"/><text x="0.2500%" y="431.50">start</text></g><g><title>main (749 samples, 99.07%)</title><rect x="0.9259%" y="405" width="99.0741%" height="15" fill="rgb(214,194,35)" fg:x="7" fg:w="749"/><text x="1.1759%" y="415.50">main</text></g><g><title>std::rt::lang_start_internal (749 samples, 99.07%)</title><rect x="0.9259%" y="389" width="99.0741%" height="15" fill="rgb(249,28,3)" fg:x="7" fg:w="749"/><text x="1.1759%" y="399.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (748 samples, 98.94%)</title><rect x="1.0582%" y="373" width="98.9418%" height="15" fill="rgb(222,56,52)" fg:x="8" fg:w="748"/><text x="1.3082%" y="383.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (748 samples, 98.94%)</title><rect x="1.0582%" y="357" width="98.9418%" height="15" fill="rgb(245,217,50)" fg:x="8" fg:w="748"/><text x="1.3082%" y="367.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>profile_parser::main (748 samples, 98.94%)</title><rect x="1.0582%" y="341" width="98.9418%" height="15" fill="rgb(213,201,24)" fg:x="8" fg:w="748"/><text x="1.3082%" y="351.50">profile_parser::main</text></g><g><title>vexy_json_core::parser::parse (560 samples, 74.07%)</title><rect x="25.9259%" y="325" width="74.0741%" height="15" fill="rgb(248,116,28)" fg:x="196" fg:w="560"/><text x="26.1759%" y="335.50">vexy_json_core::parser::parse</text></g><g><title>vexy_json_core::parser::Parser::parse (560 samples, 74.07%)</title><rect x="25.9259%" y="309" width="74.0741%" height="15" fill="rgb(219,72,43)" fg:x="196" fg:w="560"/><text x="26.1759%" y="319.50">vexy_json_core::parser::Parser::parse</text></g><g><title>vexy_json_core::parser::Parser::parse_value (288 samples, 38.10%)</title><rect x="61.9048%" y="293" width="38.0952%" height="15" fill="rgb(209,138,14)" fg:x="468" fg:w="288"/><text x="62.1548%" y="303.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (7 samples, 0.93%)</title><rect x="99.0741%" y="277" width="0.9259%" height="15" fill="rgb(222,18,33)" fg:x="749" fg:w="7"/><text x="99.3241%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.66%)</title><rect x="99.3386%" y="261" width="0.6614%" height="15" fill="rgb(213,199,7)" fg:x="751" fg:w="5"/><text x="99.5886%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.66%)</title><rect x="99.3386%" y="245" width="0.6614%" height="15" fill="rgb(250,110,10)" fg:x="751" fg:w="5"/><text x="99.5886%" y="255.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="99.6032%" y="229" width="0.3968%" height="15" fill="rgb(248,123,6)" fg:x="753" fg:w="3"/><text x="99.8532%" y="239.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.26%)</title><rect x="99.7354%" y="213" width="0.2646%" height="15" fill="rgb(206,91,31)" fg:x="754" fg:w="2"/><text x="99.9854%" y="223.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="99.8677%" y="197" width="0.1323%" height="15" fill="rgb(211,154,13)" fg:x="755" fg:w="1"/><text x="100.1177%" y="207.50"></text></g></svg></svg>
llms.txt---
llms.txt:debug_test6.rs:use vexy_json::parse;
llms.txt-debug_test6.rs-
llms.txt-debug_test6.rs-fn main() {
llms.txt-debug_test6.rs-    // Test the pattern step by step
--
llms.txt-scripts/release.sh-    run_cmd "mkdir -p '$BUILD_DIR'" "Create build directory"
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Build release binary
llms.txt:scripts/release.sh:    run_cmd "cargo build --release --bin vexy_json" "Build release CLI binary"
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Build library
llms.txt-scripts/release.sh-    run_cmd "cargo build --release --lib" "Build release library"
--
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Copy artifacts
llms.txt-scripts/release.sh-    if [ "$DRY_RUN" = false ]; then
llms.txt:scripts/release.sh:        if [[ -f "target/release/vexy_json" ]]; then
llms.txt:scripts/release.sh:            cp "target/release/vexy_json" "$BUILD_DIR/vexy_json-$VERSION-$(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]')"
llms.txt-scripts/release.sh-        else
llms.txt:scripts/release.sh:            warning "Release binary not found at target/release/vexy_json"
llms.txt-scripts/release.sh-        fi
llms.txt-scripts/release.sh-    fi
llms.txt-scripts/release.sh-    
--
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    log "Building macOS installer..."
llms.txt-scripts/release.sh-    
llms.txt:scripts/release.sh:    local app_name="vexy_json"
llms.txt-scripts/release.sh-    local installer_dir="$BUILD_DIR/macos-installer"
llms.txt:scripts/release.sh:    local dmg_name="vexy_json-$VERSION-macos.dmg"
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    run_cmd "mkdir -p '$installer_dir/pkg-root/usr/local/bin'" "Create installer structure"
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Copy binary
llms.txt-scripts/release.sh-    if [ "$DRY_RUN" = false ]; then
llms.txt:scripts/release.sh:        cp "target/release/vexy_json" "$installer_dir/pkg-root/usr/local/bin/"
llms.txt-scripts/release.sh-    fi
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Create package
llms.txt:scripts/release.sh:    run_cmd "pkgbuild --root '$installer_dir/pkg-root' --identifier 'com.twardoch.vexy_json' --version '$VERSION' --install-location '/' '$installer_dir/$app_name.pkg'" "Create pkg installer"
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Create DMG
llms.txt-scripts/release.sh-    local dmg_temp_dir="$installer_dir/dmg-temp"
--
llms.txt-scripts/release.sh-        cat > "$dmg_temp_dir/README.txt" << EOF
llms.txt-scripts/release.sh-VEXY_JSON v$VERSION
llms.txt-scripts/release.sh-
llms.txt:scripts/release.sh:This package will install the vexy_json command-line tool to /usr/local/bin.
llms.txt-scripts/release.sh-
llms.txt:scripts/release.sh:After installation, you can use vexy_json from the command line:
llms.txt:scripts/release.sh:  echo '{"key": "value"}' | vexy_json
llms.txt-scripts/release.sh-
llms.txt:scripts/release.sh:For more information, visit: https://github.com/twardoch/vexy_json
llms.txt-scripts/release.sh-EOF
llms.txt-scripts/release.sh-    fi
llms.txt-scripts/release.sh-    
--
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Build static binary for Linux
llms.txt-scripts/release.sh-    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
llms.txt:scripts/release.sh:        run_cmd "cargo build --release --target x86_64-unknown-linux-musl --bin vexy_json" "Build static Linux binary"
llms.txt-scripts/release.sh-        
llms.txt-scripts/release.sh-        if [ "$DRY_RUN" = false ]; then
llms.txt:scripts/release.sh:            cp "target/x86_64-unknown-linux-musl/release/vexy_json" "$BUILD_DIR/vexy_json-$VERSION-x86_64-linux-musl"
llms.txt-scripts/release.sh-        fi
llms.txt-scripts/release.sh-    else
llms.txt-scripts/release.sh-        warning "Skipping Linux builds (not on Linux)"
--
llms.txt-scripts/release.sh-create_release_archive() {
llms.txt-scripts/release.sh-    log "Creating release archives..."
llms.txt-scripts/release.sh-    
llms.txt:scripts/release.sh:    local archive_dir="$BUILD_DIR/vexy_json-$VERSION"
llms.txt-scripts/release.sh-    run_cmd "mkdir -p '$archive_dir'" "Create archive directory"
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    if [ "$DRY_RUN" = false ]; then
--
llms.txt-scripts/release.sh-        done
llms.txt-scripts/release.sh-        
llms.txt-scripts/release.sh-        # Copy built artifacts
llms.txt:scripts/release.sh:        if [[ -f "target/release/vexy_json" ]]; then
llms.txt:scripts/release.sh:            cp "target/release/vexy_json" "$archive_dir/" || warning "Failed to copy binary"
llms.txt-scripts/release.sh-        else
llms.txt-scripts/release.sh-            warning "No release binary found to include in archive"
llms.txt-scripts/release.sh-        fi
llms.txt-scripts/release.sh-        
llms.txt-scripts/release.sh-        # Create source archive
llms.txt:scripts/release.sh:        git archive --format=tar.gz --prefix="vexy_json-$VERSION-src/" HEAD > "$BUILD_DIR/vexy_json-$VERSION-src.tar.gz" || {
llms.txt-scripts/release.sh-            warning "Failed to create source archive"
llms.txt-scripts/release.sh-        }
llms.txt-scripts/release.sh-        
llms.txt-scripts/release.sh-        # Create binary archive if we have files
llms.txt-scripts/release.sh-        if [[ -d "$archive_dir" ]] && [[ -n $(ls -A "$archive_dir") ]]; then
llms.txt-scripts/release.sh-            cd "$BUILD_DIR"
llms.txt:scripts/release.sh:            tar -czf "vexy_json-$VERSION-$(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]').tar.gz" "vexy_json-$VERSION" || {
llms.txt-scripts/release.sh-                warning "Failed to create binary archive"
llms.txt-scripts/release.sh-            }
llms.txt-scripts/release.sh-            cd "$PROJECT_ROOT"
--
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    if ! command -v gh &> /dev/null; then
llms.txt-scripts/release.sh-        warning "GitHub CLI not found, skipping automated release creation"
llms.txt:scripts/release.sh:        info "Manually create release at: https://github.com/twardoch/vexy_json/releases/new?tag=v$VERSION"
llms.txt-scripts/release.sh-        return 0
llms.txt-scripts/release.sh-    fi
llms.txt-scripts/release.sh-    
--
llms.txt-scripts/release.sh-## 📦 Installation
llms.txt-scripts/release.sh-
llms.txt-scripts/release.sh-```bash
llms.txt:scripts/release.sh:cargo install vexy_json --version 2.0.0
llms.txt-scripts/release.sh-```
llms.txt-scripts/release.sh-
llms.txt-scripts/release.sh-Or download pre-built binaries from the assets below.
llms.txt-scripts/release.sh-
llms.txt-scripts/release.sh----
llms.txt-scripts/release.sh-
llms.txt:scripts/release.sh:**Full Changelog**: https://github.com/twardoch/vexy_json/compare/v1.5.27...v2.0.0
llms.txt-scripts/release.sh-EOF
llms.txt-scripts/release.sh-    fi
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Collect assets
llms.txt-scripts/release.sh-    local assets=()
llms.txt:scripts/release.sh:    if [[ -f "$BUILD_DIR/vexy_json-$VERSION-macos.dmg" ]]; then
llms.txt:scripts/release.sh:        assets+=("$BUILD_DIR/vexy_json-$VERSION-macos.dmg")
llms.txt-scripts/release.sh-    fi
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    # Find all tar.gz files
--
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    warning "Crates.io publishing requires manual intervention"
llms.txt-scripts/release.sh-    info "Run the following commands to publish:"
llms.txt:scripts/release.sh:    info "  cargo publish -p vexy_json-test-utils"
llms.txt:scripts/release.sh:    info "  cargo publish -p vexy_json-core"
llms.txt:scripts/release.sh:    info "  cargo publish -p vexy_json-serde"
llms.txt:scripts/release.sh:    info "  cargo publish -p vexy_json-cli"
llms.txt:scripts/release.sh:    info "  cargo publish -p vexy_json-wasm"
llms.txt:scripts/release.sh:    info "  cargo publish -p vexy_json-c-api"
llms.txt:scripts/release.sh:    info "  cargo publish -p vexy_json"
llms.txt-scripts/release.sh-    
llms.txt-scripts/release.sh-    if [ "$DRY_RUN" = false ]; then
llms.txt-scripts/release.sh-        read -p "Publish to crates.io now? (y/N): " -n 1 -r
llms.txt-scripts/release.sh-        echo
llms.txt-scripts/release.sh-        if [[ $REPLY =~ ^[Yy]$ ]]; then
llms.txt-scripts/release.sh-            # Publish in dependency order
llms.txt:scripts/release.sh:            run_cmd "cargo publish -p vexy_json-test-utils" "Publish vexy_json-test-utils"
llms.txt-scripts/release.sh-            sleep 10  # Wait for crates.io to process
llms.txt:scripts/release.sh:            run_cmd "cargo publish -p vexy_json-core" "Publish vexy_json-core"
llms.txt-scripts/release.sh-            sleep 10
llms.txt:scripts/release.sh:            run_cmd "cargo publish -p vexy_json-serde" "Publish vexy_json-serde"
llms.txt-scripts/release.sh-            sleep 10
llms.txt:scripts/release.sh:            run_cmd "cargo publish -p vexy_json-cli" "Publish vexy_json-cli"
llms.txt-scripts/release.sh-            sleep 10
llms.txt:scripts/release.sh:            run_cmd "cargo publish -p vexy_json-wasm" "Publish vexy_json-wasm"
llms.txt-scripts/release.sh-            sleep 10
llms.txt:scripts/release.sh:            run_cmd "cargo publish -p vexy_json-c-api" "Publish vexy_json-c-api"
llms.txt-scripts/release.sh-            sleep 10
llms.txt:scripts/release.sh:            run_cmd "cargo publish -p vexy_json" "Publish main vexy_json crate"
llms.txt-scripts/release.sh-            
llms.txt-scripts/release.sh-            success "All crates published to crates.io"
llms.txt-scripts/release.sh-        fi
--
llms.txt-scripts/release.sh-    echo -e "${BLUE}Release artifacts created in: $BUILD_DIR${NC}"
llms.txt-scripts/release.sh-    echo -e "${BLUE}Git tag created and pushed: v$VERSION${NC}"
llms.txt-scripts/release.sh-    echo -e "${BLUE}Next steps:${NC}"
llms.txt:scripts/release.sh:    echo "  1. Verify GitHub release: https://github.com/twardoch/vexy_json/releases"
llms.txt-scripts/release.sh-    echo "  2. Update documentation websites"
llms.txt-scripts/release.sh-    echo "  3. Announce the release"
llms.txt-scripts/release.sh-    echo
llms.txt---
llms.txt:docs/assets/css/enhanced-features.css:/* Enhanced features for vexy_json tool */
llms.txt-docs/assets/css/enhanced-features.css-
llms.txt-docs/assets/css/enhanced-features.css-/* WASM loading animations */
llms.txt-docs/assets/css/enhanced-features.css-.loading-fade {
llms.txt---
llms.txt-docs/release-process.md-# Release Process
llms.txt-docs/release-process.md-
llms.txt:docs/release-process.md:This document describes the automated release process for vexy_json.
llms.txt-docs/release-process.md-
llms.txt-docs/release-process.md-## Overview
llms.txt-docs/release-process.md-
--
llms.txt-docs/release-process.md-
llms.txt-docs/release-process.md-1. Delete the release from GitHub
llms.txt-docs/release-process.md-2. Yank the version from crates.io: `cargo yank --version 1.2.0`
llms.txt:docs/release-process.md:3. Unpublish from npm (within 72 hours): `npm unpublish @vexy_json/vexy_json@1.2.0`
llms.txt-docs/release-process.md-4. Delete the git tag: `git push --delete origin v1.2.0`
llms.txt-docs/release-process.md-
llms.txt-docs/release-process.md-## Troubleshooting
llms.txt---
llms.txt:examples/debug_comma_one.rs:use vexy_json::parse;
llms.txt-examples/debug_comma_one.rs-
llms.txt-examples/debug_comma_one.rs-fn main() {
llms.txt-examples/debug_comma_one.rs-    println!("Testing: \",1\"");
llms.txt---
llms.txt-tests/feature_tests.rs-// this_file: tests/feature_tests.rs
llms.txt-tests/feature_tests.rs-
llms.txt:tests/feature_tests.rs:use vexy_json::{parse, Value};
llms.txt-tests/feature_tests.rs-
llms.txt-tests/feature_tests.rs-/// Test basic JSON compliance - standard JSON parsing capabilities
llms.txt-tests/feature_tests.rs-#[test]
--
llms.txt-tests/feature_tests.rs-        total,
llms.txt-tests/feature_tests.rs-        (supported as f64 / total as f64) * 100.0
llms.txt-tests/feature_tests.rs-    );
llms.txt:tests/feature_tests.rs:    println!("✓ vexy_json demonstrates comprehensive JSON parsing capabilities");
llms.txt-tests/feature_tests.rs-
llms.txt-tests/feature_tests.rs-    // Verify we have reasonable feature coverage
llms.txt-tests/feature_tests.rs-    let coverage_percentage = (supported as f64 / total as f64) * 100.0;
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
llms.txt-scripts/cross-platform/build-macos-installer.sh-VERSION="${VERSION:-$(grep '^version' "$PROJECT_ROOT/Cargo.toml" | head -1 | cut -d'"' -f2)}"
llms.txt-scripts/cross-platform/build-macos-installer.sh-BUILD_DIR="$PROJECT_ROOT/target/macos-installer"
llms.txt:scripts/cross-platform/build-macos-installer.sh:APP_NAME="vexy_json"
llms.txt:scripts/cross-platform/build-macos-installer.sh:BUNDLE_ID="com.twardoch.vexy_json"
llms.txt:scripts/cross-platform/build-macos-installer.sh:DMG_NAME="vexy_json-$VERSION-macos.dmg"
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-# Utility functions
llms.txt-scripts/cross-platform/build-macos-installer.sh-log() {
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Build for Intel
llms.txt-scripts/cross-platform/build-macos-installer.sh-    log "Building for Intel (x86_64)..."
llms.txt:scripts/cross-platform/build-macos-installer.sh:    cargo build --release --bin vexy_json --target x86_64-apple-darwin
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Build for Apple Silicon
llms.txt-scripts/cross-platform/build-macos-installer.sh-    log "Building for Apple Silicon (aarch64)..."
llms.txt:scripts/cross-platform/build-macos-installer.sh:    cargo build --release --bin vexy_json --target aarch64-apple-darwin
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Create universal binary
llms.txt-scripts/cross-platform/build-macos-installer.sh-    log "Creating universal binary..."
llms.txt-scripts/cross-platform/build-macos-installer.sh-    mkdir -p "$PROJECT_ROOT/target/release"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    lipo -create -output "$PROJECT_ROOT/target/release/vexy_json" \
llms.txt:scripts/cross-platform/build-macos-installer.sh:        "$PROJECT_ROOT/target/x86_64-apple-darwin/release/vexy_json" \
llms.txt:scripts/cross-platform/build-macos-installer.sh:        "$PROJECT_ROOT/target/aarch64-apple-darwin/release/vexy_json"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Verify the universal binary
llms.txt:scripts/cross-platform/build-macos-installer.sh:    if lipo -info "$PROJECT_ROOT/target/release/vexy_json" | grep -q "x86_64 arm64"; then
llms.txt-scripts/cross-platform/build-macos-installer.sh-        success "Universal binary created successfully"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    else
llms.txt-scripts/cross-platform/build-macos-installer.sh-        error "Failed to create universal binary"
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-    mkdir -p "$pkg_root/usr/local/bin"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Copy the universal binary
llms.txt:scripts/cross-platform/build-macos-installer.sh:    cp "$PROJECT_ROOT/target/release/vexy_json" "$pkg_root/usr/local/bin/"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    chmod +x "$pkg_root/usr/local/bin/vexy_json"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Create scripts directory for pre/post install scripts
llms.txt-scripts/cross-platform/build-macos-installer.sh-    mkdir -p "$BUILD_DIR/scripts"
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-done
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-# Verify installation
llms.txt:scripts/cross-platform/build-macos-installer.sh:if command -v vexy_json &> /dev/null; then
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo "Vexy JSON installed successfully!"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    echo "Version: $(vexy_json --version 2>/dev/null || echo 'Unknown')"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    echo "You may need to restart your terminal or run 'source ~/.bashrc' (or similar) to use vexy_json."
llms.txt-scripts/cross-platform/build-macos-installer.sh-else
llms.txt:scripts/cross-platform/build-macos-installer.sh:    echo "Installation completed, but vexy_json may not be in your PATH."
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo "Try restarting your terminal or adding /usr/local/bin to your PATH."
llms.txt-scripts/cross-platform/build-macos-installer.sh-fi
llms.txt-scripts/cross-platform/build-macos-installer.sh-
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-    cat > "$dmg_temp_dir/README.txt" << EOF
llms.txt-scripts/cross-platform/build-macos-installer.sh-VEXY_JSON v$VERSION - High-Performance JSON Parser
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt:scripts/cross-platform/build-macos-installer.sh:This installer will install the vexy_json command-line tool to /usr/local/bin.
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-Installation Instructions:
llms.txt:scripts/cross-platform/build-macos-installer.sh:1. Double-click on vexy_json.pkg to run the installer
llms.txt-scripts/cross-platform/build-macos-installer.sh-2. Follow the installation prompts
llms.txt-scripts/cross-platform/build-macos-installer.sh-3. Restart your terminal or run 'source ~/.bashrc' to update your PATH
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt:scripts/cross-platform/build-macos-installer.sh:After installation, you can use vexy_json from the command line:
llms.txt:scripts/cross-platform/build-macos-installer.sh:  echo '{"key": "value"}' | vexy_json
llms.txt:scripts/cross-platform/build-macos-installer.sh:  vexy_json --help
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-Features:
llms.txt-scripts/cross-platform/build-macos-installer.sh-• SIMD-accelerated parsing (2-3x faster)
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-• Enhanced error recovery with suggestions
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-For more information:
llms.txt:scripts/cross-platform/build-macos-installer.sh:  Website: https://github.com/twardoch/vexy_json
llms.txt:scripts/cross-platform/build-macos-installer.sh:  Documentation: https://twardoch.github.io/vexy_json/
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-License: MIT OR Apache-2.0
llms.txt-scripts/cross-platform/build-macos-installer.sh-EOF
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-        log "DMG size: $dmg_size"
llms.txt-scripts/cross-platform/build-macos-installer.sh-        
llms.txt-scripts/cross-platform/build-macos-installer.sh-        # Verify DMG can be mounted
llms.txt:scripts/cross-platform/build-macos-installer.sh:        if hdiutil attach "$final_dmg" -readonly -nobrowse -mountpoint "/tmp/vexy_json-verify-$$"; then
llms.txt-scripts/cross-platform/build-macos-installer.sh-            log "DMG verification: mountable ✓"
llms.txt:scripts/cross-platform/build-macos-installer.sh:            hdiutil detach "/tmp/vexy_json-verify-$$" || true
llms.txt-scripts/cross-platform/build-macos-installer.sh-        else
llms.txt-scripts/cross-platform/build-macos-installer.sh-            warning "DMG verification failed - may not be mountable"
llms.txt-scripts/cross-platform/build-macos-installer.sh-        fi
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-    log "Creating ZIP alternative..."
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    local zip_dir="$BUILD_DIR/zip-package"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    local zip_file="$PROJECT_ROOT/vexy_json-$VERSION-macos.zip"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    mkdir -p "$zip_dir"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Copy binary
llms.txt:scripts/cross-platform/build-macos-installer.sh:    cp "$PROJECT_ROOT/target/release/vexy_json" "$zip_dir/"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Create installation script
llms.txt-scripts/cross-platform/build-macos-installer.sh-    cat > "$zip_dir/install.sh" << 'EOF'
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-# Check if we have write permissions
llms.txt-scripts/cross-platform/build-macos-installer.sh-if [[ ! -w "/usr/local/bin" ]]; then
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo "Note: You may be prompted for your password to install to /usr/local/bin"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    sudo cp vexy_json /usr/local/bin/
llms.txt:scripts/cross-platform/build-macos-installer.sh:    sudo chmod +x /usr/local/bin/vexy_json
llms.txt-scripts/cross-platform/build-macos-installer.sh-else
llms.txt:scripts/cross-platform/build-macos-installer.sh:    cp vexy_json /usr/local/bin/
llms.txt:scripts/cross-platform/build-macos-installer.sh:    chmod +x /usr/local/bin/vexy_json
llms.txt-scripts/cross-platform/build-macos-installer.sh-fi
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-echo "Vexy JSON installed successfully!"
llms.txt:scripts/cross-platform/build-macos-installer.sh:echo "Try: vexy_json --help"
llms.txt-scripts/cross-platform/build-macos-installer.sh-EOF
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    chmod +x "$zip_dir/install.sh"
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-    cat > "$zip_dir/README.txt" << EOF
llms.txt-scripts/cross-platform/build-macos-installer.sh-VEXY_JSON v$VERSION - Simple ZIP Installation
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt:scripts/cross-platform/build-macos-installer.sh:This is a simple ZIP package containing the vexy_json binary.
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-Installation:
llms.txt-scripts/cross-platform/build-macos-installer.sh-1. Run: ./install.sh
llms.txt-scripts/cross-platform/build-macos-installer.sh-   OR
llms.txt:scripts/cross-platform/build-macos-installer.sh:2. Manually copy 'vexy_json' to a directory in your PATH
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-Usage:
llms.txt:scripts/cross-platform/build-macos-installer.sh:  echo '{"key": "value"}' | vexy_json
llms.txt:scripts/cross-platform/build-macos-installer.sh:  vexy_json --help
llms.txt-scripts/cross-platform/build-macos-installer.sh-
llms.txt-scripts/cross-platform/build-macos-installer.sh-For the full installer experience, download the .dmg file instead.
llms.txt-scripts/cross-platform/build-macos-installer.sh-EOF
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-    log "Verifying installation components..."
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Check if binary works
llms.txt:scripts/cross-platform/build-macos-installer.sh:    if "$PROJECT_ROOT/target/release/vexy_json" --version &> /dev/null; then
llms.txt-scripts/cross-platform/build-macos-installer.sh-        success "Binary verification: working ✓"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    else
llms.txt-scripts/cross-platform/build-macos-installer.sh-        error "Binary verification failed"
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-    fi
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    # Check package contents
llms.txt:scripts/cross-platform/build-macos-installer.sh:    if pkgutil --payload-files "$BUILD_DIR/$APP_NAME.pkg" | grep -q "usr/local/bin/vexy_json"; then
llms.txt-scripts/cross-platform/build-macos-installer.sh-        success "Package verification: contains binary ✓"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    else
llms.txt-scripts/cross-platform/build-macos-installer.sh-        error "Package verification failed"
--
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo -e "${BLUE}Generated files:${NC}"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo "  📦 DMG Installer: $DMG_NAME"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    if [[ -f "$PROJECT_ROOT/vexy_json-$VERSION-macos.zip" ]]; then
llms.txt:scripts/cross-platform/build-macos-installer.sh:        echo "  📁 ZIP Package: vexy_json-$VERSION-macos.zip"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    fi
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo "  🔧 PKG Installer: $BUILD_DIR/$APP_NAME.pkg"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    echo "  🔨 Universal Binary: $PROJECT_ROOT/target/release/vexy_json"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo -e "${BLUE}Installation instructions for users:${NC}"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo "  1. Download and open $DMG_NAME"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    echo "  2. Double-click vexy_json.pkg to install"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo "  3. Follow the installer prompts"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo "  4. Restart terminal or run 'source ~/.bashrc'"
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo -e "${BLUE}Binary details:${NC}"
llms.txt:scripts/cross-platform/build-macos-installer.sh:    lipo -info "$PROJECT_ROOT/target/release/vexy_json" | sed 's/^/  /'
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo
llms.txt-scripts/cross-platform/build-macos-installer.sh-    
llms.txt-scripts/cross-platform/build-macos-installer.sh-    echo -e "${BLUE}Next steps:${NC}"
--
llms.txt-tests/property_tests.rs-// this_file: tests/property_tests.rs
llms.txt-tests/property_tests.rs-
llms.txt-tests/property_tests.rs-use proptest::prelude::*;
llms.txt:tests/property_tests.rs:use vexy_json::{parse, Number, Value};
llms.txt-tests/property_tests.rs-use quickcheck::{Arbitrary, Gen, QuickCheck, TestResult};
llms.txt-tests/property_tests.rs-use quickcheck_macros::quickcheck;
llms.txt:tests/property_tests.rs:use vexy_json_core::{parse_with_options, ParserOptions};
llms.txt-tests/property_tests.rs-use rustc_hash::FxHashMap;
llms.txt:tests/property_tests.rs:// use vexy_json_core::streaming::{JsonEventHandler, parse_streaming, StreamingEvent};
llms.txt-tests/property_tests.rs-
llms.txt-tests/property_tests.rs-// A strategy for generating simple JSON strings
llms.txt-tests/property_tests.rs-fn simple_string_strategy() -> impl Strategy<Value = String> {
--
llms.txt-tests/property_tests.rs-// }
llms.txt-tests/property_tests.rs-// 
llms.txt-tests/property_tests.rs-// impl JsonEventHandler for EventCollector {
llms.txt:tests/property_tests.rs://     fn on_object_start(&mut self) -> Result<(), vexy_json_core::error::Error> {
llms.txt-tests/property_tests.rs-//         self.events.push("object_start".to_string());
llms.txt-tests/property_tests.rs-//         Ok(())
llms.txt-tests/property_tests.rs-//     }
llms.txt-tests/property_tests.rs-//     
llms.txt:tests/property_tests.rs://     fn on_object_end(&mut self) -> Result<(), vexy_json_core::error::Error> {
llms.txt-tests/property_tests.rs-//         self.events.push("object_end".to_string());
llms.txt-tests/property_tests.rs-//         Ok(())
llms.txt-tests/property_tests.rs-//     }
llms.txt-tests/property_tests.rs-//     
llms.txt:tests/property_tests.rs://     fn on_array_start(&mut self) -> Result<(), vexy_json_core::error::Error> {
llms.txt-tests/property_tests.rs-//         self.events.push("array_start".to_string());
llms.txt-tests/property_tests.rs-//         Ok(())
llms.txt-tests/property_tests.rs-//     }
llms.txt-tests/property_tests.rs-//     
llms.txt:tests/property_tests.rs://     fn on_array_end(&mut self) -> Result<(), vexy_json_core::error::Error> {
llms.txt-tests/property_tests.rs-//         self.events.push("array_end".to_string());
llms.txt-tests/property_tests.rs-//         Ok(())
llms.txt-tests/property_tests.rs-//     }
llms.txt-tests/property_tests.rs-//     
llms.txt:tests/property_tests.rs://     fn on_key(&mut self, key: &str) -> Result<(), vexy_json_core::error::Error> {
llms.txt-tests/property_tests.rs-//         self.events.push(format!("key:{}", key));
llms.txt-tests/property_tests.rs-//         Ok(())
llms.txt-tests/property_tests.rs-//     }
llms.txt-tests/property_tests.rs-//     
llms.txt:tests/property_tests.rs://     fn on_value(&mut self, value: &Value) -> Result<(), vexy_json_core::error::Error> {
llms.txt-tests/property_tests.rs-//         self.events.push(format!("value:{:?}", value));
llms.txt-tests/property_tests.rs-//         Ok(())
llms.txt-tests/property_tests.rs-//     }
--
llms.txt-fuzz/fuzz_targets/json_structure.rs-#![no_main]
llms.txt-fuzz/fuzz_targets/json_structure.rs-
llms.txt-fuzz/fuzz_targets/json_structure.rs-use libfuzzer_sys::fuzz_target;
llms.txt:fuzz/fuzz_targets/json_structure.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-fuzz/fuzz_targets/json_structure.rs-
llms.txt-fuzz/fuzz_targets/json_structure.rs-fuzz_target!(|data: &[u8]| {
llms.txt-fuzz/fuzz_targets/json_structure.rs-    if let Ok(s) = std::str::from_utf8(data) {
--
llms.txt-scripts/cross-browser-test.js-// this_file: scripts/cross-browser-test.js
llms.txt-scripts/cross-browser-test.js-
llms.txt-scripts/cross-browser-test.js-/**
llms.txt:scripts/cross-browser-test.js: * Cross-Browser Testing Script for vexy_json Web Tool
llms.txt-scripts/cross-browser-test.js- * 
llms.txt:scripts/cross-browser-test.js: * This script provides automated cross-browser testing capabilities for the vexy_json web tool.
llms.txt-scripts/cross-browser-test.js- * It systematically tests functionality across different browsers and generates comprehensive reports.
llms.txt-scripts/cross-browser-test.js- * 
llms.txt-scripts/cross-browser-test.js- * Usage:
--
llms.txt-scripts/cross-browser-test.js-        }
llms.txt-scripts/cross-browser-test.js-    });
llms.txt-scripts/cross-browser-test.js-
llms.txt:scripts/cross-browser-test.js:    console.log('🚀 Starting Cross-Browser Testing for vexy_json Web Tool');
llms.txt-scripts/cross-browser-test.js-    console.log(`🎯 Target URL: ${TEST_CONFIG.url}`);
llms.txt-scripts/cross-browser-test.js-
llms.txt-scripts/cross-browser-test.js-    const allResults = [];
llms.txt---
llms.txt:examples/test_implicit_array.rs:use vexy_json::parse;
llms.txt-examples/test_implicit_array.rs-
llms.txt-examples/test_implicit_array.rs-fn main() {
llms.txt-examples/test_implicit_array.rs-    let test_cases = vec![
--
llms.txt-scripts/release-github.sh-    log_info "GitHub Actions release workflow triggered!"
llms.txt-scripts/release-github.sh-    echo
llms.txt-scripts/release-github.sh-    echo "You can monitor the release progress at:"
llms.txt:scripts/release-github.sh:    echo "https://github.com/twardoch/vexy_json/actions"
llms.txt-scripts/release-github.sh-    echo
llms.txt-scripts/release-github.sh-    echo "Or watch it here:"
llms.txt-scripts/release-github.sh-    
--
llms.txt-scripts/release-github.sh-    RUN_ID=$(gh run list --workflow=release.yml --limit 1 --json databaseId --jq '.[0].databaseId')
llms.txt-scripts/release-github.sh-    
llms.txt-scripts/release-github.sh-    if [ -n "$RUN_ID" ]; then
llms.txt:scripts/release-github.sh:        echo "Workflow run: https://github.com/twardoch/vexy_json/actions/runs/$RUN_ID"
llms.txt-scripts/release-github.sh-        echo
llms.txt-scripts/release-github.sh-        echo "Watching workflow progress..."
llms.txt-scripts/release-github.sh-        gh run watch "$RUN_ID"
llms.txt---
llms.txt:Formula/vexy_json.rb-class VexyJson < Formula
llms.txt:Formula/vexy_json.rb-  desc "Forgiving JSON parser for Rust - a port of the JavaScript library jsonic"
llms.txt:Formula/vexy_json.rb:  homepage "https://github.com/twardoch/vexy_json"
llms.txt:Formula/vexy_json.rb:  url "https://github.com/twardoch/vexy_json/archive/refs/tags/v2.0.0.tar.gz"
llms.txt:Formula/vexy_json.rb-  sha256 "ce66e4af1e0aeb4f35456eb44aa82d5052e1a26c33adbaa1969284a5aa8c24ab"
llms.txt:Formula/vexy_json.rb-  license any_of: ["MIT", "Apache-2.0"]
llms.txt:Formula/vexy_json.rb:  head "https://github.com/twardoch/vexy_json.git", branch: "main"
llms.txt:Formula/vexy_json.rb-
llms.txt:Formula/vexy_json.rb-  depends_on "rust" => :build
llms.txt:Formula/vexy_json.rb-
llms.txt---
llms.txt:Formula/vexy_json.rb-
llms.txt:Formula/vexy_json.rb-  test do
llms.txt:Formula/vexy_json.rb-    # Test basic JSON parsing
llms.txt:Formula/vexy_json.rb:    assert_equal '{"key":"value"}', pipe_output("#{bin}/vexy_json", '{"key": "value"}').chomp
llms.txt:Formula/vexy_json.rb-
llms.txt:Formula/vexy_json.rb-    # Test forgiving JSON features
llms.txt:Formula/vexy_json.rb-    forgiving_json = '{ unquoted: true, trailing: "comma", }'
llms.txt:Formula/vexy_json.rb:    output = pipe_output("#{bin}/vexy_json", forgiving_json)
llms.txt:Formula/vexy_json.rb-    assert_match /"unquoted":true/, output
llms.txt:Formula/vexy_json.rb-    assert_match /"trailing":"comma"/, output
llms.txt:Formula/vexy_json.rb-
llms.txt:Formula/vexy_json.rb-    # Test error repair
llms.txt:Formula/vexy_json.rb-    broken_json = '{ "broken": '
llms.txt:Formula/vexy_json.rb:    output = pipe_output("#{bin}/vexy_json --repair", broken_json)
llms.txt:Formula/vexy_json.rb-    assert_match /"broken":null/, output
llms.txt:Formula/vexy_json.rb-
llms.txt:Formula/vexy_json.rb-    # Test version
llms.txt:Formula/vexy_json.rb:    assert_match version.to_s, shell_output("#{bin}/vexy_json --version")
llms.txt:Formula/vexy_json.rb-  end
llms.txt:Formula/vexy_json.rb-end
llms.txt---
llms.txt-scripts/package.json-{
llms.txt:scripts/package.json:    "name": "vexy_json-testing-scripts",
llms.txt-scripts/package.json-    "version": "1.0.0",
llms.txt:scripts/package.json:    "description": "Testing and monitoring scripts for vexy_json project",
llms.txt-scripts/package.json-    "main": "cross-browser-test.js",
llms.txt-scripts/package.json-    "scripts": {
llms.txt-scripts/package.json-        "test:browser": "node cross-browser-test.js",
--
llms.txt-scripts/package.json-        "testing",
llms.txt-scripts/package.json-        "cross-browser",
llms.txt-scripts/package.json-        "performance",
llms.txt:scripts/package.json:        "vexy_json"
llms.txt-scripts/package.json-    ],
llms.txt:scripts/package.json:    "author": "vexy_json team",
llms.txt-scripts/package.json-    "license": "MIT"
llms.txt-scripts/package.json-}
llms.txt---
llms.txt:examples/debug_implicit_array.rs:use vexy_json::parse;
llms.txt-examples/debug_implicit_array.rs-
llms.txt-examples/debug_implicit_array.rs-fn main() {
llms.txt-examples/debug_implicit_array.rs-    let input = "'a', 'b', 'c'";
llms.txt---
llms.txt:build-warnings.txt:   Compiling vexy_json-core v2.2.3 (/Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/core)
llms.txt-build-warnings.txt-warning: methods `analyze_custom_error`, `analyze_context_error`, and `analyze_invalid_utf8` are never used
llms.txt-build-warnings.txt-   --> crates/core/src/error/recovery/mod.rs:542:8
llms.txt-build-warnings.txt-    |
--
llms.txt-build-warnings.txt-96 |     max_repairs: usize,
llms.txt-build-warnings.txt-   |     ^^^^^^^^^^^
llms.txt-build-warnings.txt-
llms.txt:build-warnings.txt:warning: `vexy_json-core` (lib) generated 27 warnings
llms.txt:build-warnings.txt:   Compiling vexy_json-cli v2.2.3 (/Users/adam/Developer/vcs/github.vexyart/vexy-json/crates/cli)
llms.txt-build-warnings.txt-    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.92s
llms.txt---
llms.txt:examples/test_unquoted.rs:use vexy_json::{Lexer, Token};
llms.txt:examples/test_unquoted.rs:use vexy_json_core::lexer::JsonLexer;
llms.txt-examples/test_unquoted.rs-
llms.txt-examples/test_unquoted.rs-fn main() {
llms.txt-examples/test_unquoted.rs-    let mut lexer = Lexer::new("{a: 1}");
llms.txt---
llms.txt:Formula/README.md:# Homebrew Formula for vexy_json
llms.txt-Formula/README.md-
llms.txt:Formula/README.md:This directory contains the Homebrew formula for installing vexy_json on macOS.
llms.txt-Formula/README.md-
llms.txt-Formula/README.md-## Installation
llms.txt-Formula/README.md-
llms.txt:Formula/README.md:To install vexy_json using this formula:
llms.txt-Formula/README.md-
llms.txt-Formula/README.md-```bash
llms.txt-Formula/README.md-# Add this tap (once the formula is in a tap repository)
llms.txt:Formula/README.md:brew tap twardoch/vexy_json
llms.txt-Formula/README.md-
llms.txt:Formula/README.md:# Install vexy_json
llms.txt:Formula/README.md:brew install vexy_json
llms.txt-Formula/README.md-```
llms.txt-Formula/README.md-
llms.txt-Formula/README.md-Or install directly from the formula file:
llms.txt-Formula/README.md-
llms.txt-Formula/README.md-```bash
llms.txt:Formula/README.md:brew install ./Formula/vexy_json.rb
llms.txt-Formula/README.md-```
llms.txt-Formula/README.md-
llms.txt-Formula/README.md-## Testing the Formula
--
llms.txt-Formula/README.md-To test the formula locally:
llms.txt-Formula/README.md-
llms.txt-Formula/README.md-```bash
llms.txt:Formula/README.md:brew install --build-from-source ./Formula/vexy_json.rb
llms.txt:Formula/README.md:brew test vexy_json
llms.txt:Formula/README.md:brew audit --strict vexy_json
llms.txt-Formula/README.md-```
llms.txt-Formula/README.md-
llms.txt-Formula/README.md-## Updating the Formula
--
llms.txt-Formula/README.md-1. Update the `url` to point to the new release tag
llms.txt-Formula/README.md-2. Update the SHA256 checksum:
llms.txt-Formula/README.md-   ```bash
llms.txt:Formula/README.md:   curl -sL https://github.com/twardoch/vexy_json/archive/refs/tags/vX.Y.Z.tar.gz | shasum -a 256
llms.txt-Formula/README.md-   ```
llms.txt-Formula/README.md-3. Test the formula thoroughly
llms.txt-Formula/README.md-4. Submit to Homebrew or update your tap
--
llms.txt-fuzz/fuzz_targets/streaming.rs-#![no_main]
llms.txt-fuzz/fuzz_targets/streaming.rs-
llms.txt-fuzz/fuzz_targets/streaming.rs-use libfuzzer_sys::fuzz_target;
llms.txt:fuzz/fuzz_targets/streaming.rs:use vexy_json_core::streaming::{parse_streaming, BufferedStreamingConfig};
llms.txt-fuzz/fuzz_targets/streaming.rs-use std::io::Cursor;
llms.txt-fuzz/fuzz_targets/streaming.rs-
llms.txt-fuzz/fuzz_targets/streaming.rs-fuzz_target!(|data: &[u8]| {
llms.txt---
llms.txt-tests/string_handling.rs-// this_file: tests/string_handling.rs
llms.txt-tests/string_handling.rs-
llms.txt:tests/string_handling.rs:use vexy_json::{parse, Value};
llms.txt-tests/string_handling.rs-
llms.txt:tests/string_handling.rs:/// String handling tests adapted for vexy_json's actual capabilities
llms.txt:tests/string_handling.rs:/// NOTE: vexy_json supports single and double quoted strings but NOT backtick strings
llms.txt-tests/string_handling.rs-/// Reference: ref/jsonic/test/feature.test.js lines 421-592
llms.txt-tests/string_handling.rs-
llms.txt-tests/string_handling.rs-#[test]
llms.txt-tests/string_handling.rs-fn test_basic_string_types() {
llms.txt:tests/string_handling.rs:    // Test single and double quoted strings (vexy_json's supported types)
llms.txt-tests/string_handling.rs-    assert_eq!(parse("''").unwrap(), Value::String("".to_string()));
llms.txt-tests/string_handling.rs-    assert_eq!(parse(r#""""#).unwrap(), Value::String("".to_string()));
llms.txt-tests/string_handling.rs-
--
llms.txt-tests/string_handling.rs-
llms.txt-tests/string_handling.rs-#[test]
llms.txt-tests/string_handling.rs-fn test_string_escape_sequences() {
llms.txt:tests/string_handling.rs:    // Standard JSON escape sequences that vexy_json supports
llms.txt-tests/string_handling.rs-    assert_eq!(parse(r#""\n""#).unwrap(), Value::String("\n".to_string()));
llms.txt-tests/string_handling.rs-    assert_eq!(parse(r#""\t""#).unwrap(), Value::String("\t".to_string()));
llms.txt-tests/string_handling.rs-    assert_eq!(parse(r#""\r""#).unwrap(), Value::String("\r".to_string()));
--
llms.txt-tests/string_handling.rs-
llms.txt-tests/string_handling.rs-#[test]
llms.txt-tests/string_handling.rs-fn test_unicode_escapes() {
llms.txt:tests/string_handling.rs:    // Test unicode escape sequences (if supported by vexy_json)
llms.txt-tests/string_handling.rs-    let unicode_test = parse(r#""\u0061""#);
llms.txt-tests/string_handling.rs-    if unicode_test.is_ok() {
llms.txt-tests/string_handling.rs-        assert_eq!(unicode_test.unwrap(), Value::String("a".to_string()));
llms.txt-tests/string_handling.rs-    } else {
llms.txt:tests/string_handling.rs:        println!("vexy_json doesn't support unicode escapes - that's OK");
llms.txt-tests/string_handling.rs-    }
llms.txt-tests/string_handling.rs-}
llms.txt-tests/string_handling.rs-
--
llms.txt-tests/string_handling.rs-
llms.txt-tests/string_handling.rs-#[test]
llms.txt-tests/string_handling.rs-fn test_newline_handling() {
llms.txt:tests/string_handling.rs:    // Test how vexy_json handles newlines in strings
llms.txt-tests/string_handling.rs-    let unescaped_newline_result = parse("\"\n\"");
llms.txt-tests/string_handling.rs-    if unescaped_newline_result.is_ok() {
llms.txt:tests/string_handling.rs:        println!("vexy_json allows unescaped newlines in double quotes");
llms.txt-tests/string_handling.rs-    } else {
llms.txt:tests/string_handling.rs:        println!("vexy_json errors on unescaped newlines - following JSON standard");
llms.txt-tests/string_handling.rs-        assert!(unescaped_newline_result.is_err());
llms.txt-tests/string_handling.rs-    }
llms.txt-tests/string_handling.rs-
--
llms.txt-tests/string_handling.rs-    let unknown_escape_result = parse(r#""\w""#);
llms.txt-tests/string_handling.rs-    if unknown_escape_result.is_ok() {
llms.txt-tests/string_handling.rs-        if let Ok(Value::String(s)) = unknown_escape_result {
llms.txt:tests/string_handling.rs:            // Document whatever behavior vexy_json has
llms.txt:tests/string_handling.rs:            println!("vexy_json handles \\w as: {:?}", s);
llms.txt-tests/string_handling.rs-            assert!(
llms.txt-tests/string_handling.rs-                s == "w" || s == "\\w" || s == "\\\\w",
llms.txt-tests/string_handling.rs-                "Unknown escape behavior should be consistent"
llms.txt-tests/string_handling.rs-            );
llms.txt-tests/string_handling.rs-        }
llms.txt-tests/string_handling.rs-    } else {
llms.txt:tests/string_handling.rs:        println!("vexy_json errors on unknown escape sequences - that's valid behavior");
llms.txt-tests/string_handling.rs-    }
llms.txt-tests/string_handling.rs-}
llms.txt-tests/string_handling.rs-
--
llms.txt-tests/string_handling.rs-
llms.txt-tests/string_handling.rs-#[test]
llms.txt-tests/string_handling.rs-fn test_backslash_behavior() {
llms.txt:tests/string_handling.rs:    // Test how vexy_json handles backslashes in unknown escape sequences
llms.txt:tests/string_handling.rs:    // This is adaptive testing - we test what vexy_json actually does
llms.txt-tests/string_handling.rs-    let test_cases = vec![(r#""\q""#, "backslash + q"), (r#""\z""#, "backslash + z")];
llms.txt-tests/string_handling.rs-
llms.txt-tests/string_handling.rs-    for (input, description) in test_cases {
llms.txt-tests/string_handling.rs-        match parse(input) {
llms.txt-tests/string_handling.rs-            Ok(Value::String(s)) => {
llms.txt:tests/string_handling.rs:                println!("vexy_json handles {} as: {:?}", description, s);
llms.txt-tests/string_handling.rs-                // Just verify it's consistent behavior, whatever it is
llms.txt-tests/string_handling.rs-                assert!(!s.is_empty(), "String should not be empty");
llms.txt-tests/string_handling.rs-            }
--
llms.txt-tests/string_handling.rs-                );
llms.txt-tests/string_handling.rs-            }
llms.txt-tests/string_handling.rs-            Err(_) => {
llms.txt:tests/string_handling.rs:                println!("vexy_json errors on {} - that's valid behavior", description);
llms.txt-tests/string_handling.rs-            }
llms.txt-tests/string_handling.rs-        }
llms.txt-tests/string_handling.rs-    }
llms.txt---
llms.txt:examples/debug_comment_tokens.rs:use vexy_json::{Lexer, Token};
llms.txt:examples/debug_comment_tokens.rs:use vexy_json_core::lexer::JsonLexer;
llms.txt-examples/debug_comment_tokens.rs-
llms.txt-examples/debug_comment_tokens.rs-fn main() {
llms.txt-examples/debug_comment_tokens.rs-    let input = "// comment\n42";
llms.txt---
llms.txt:debug_double_decimal.rs:use vexy_json::parse;
llms.txt-debug_double_decimal.rs-
llms.txt-debug_double_decimal.rs-fn main() {
llms.txt-debug_double_decimal.rs-    println!("Testing double decimal parsing...");
--
llms.txt-scripts/build.sh-# Exit immediately if a command exits with a non-zero status.
llms.txt-scripts/build.sh-set -e
llms.txt-scripts/build.sh-cd "$(dirname "$0")/.."
llms.txt:scripts/build.sh:echo "Starting build process for vexy_json..."
llms.txt-scripts/build.sh-
llms.txt-scripts/build.sh-{
llms.txt:scripts/build.sh:    echo "Building the vexy_json project..."
llms.txt-scripts/build.sh-    # Build the project in release mode for optimized binaries
llms.txt-scripts/build.sh-    /Users/adam/.cargo/bin/cargo build --release
llms.txt-scripts/build.sh-
--
llms.txt-scripts/build.sh-
llms.txt-scripts/build.sh-    echo "Build and verification complete."
llms.txt-scripts/build.sh-    echo ""
llms.txt:scripts/build.sh:    echo "Library built at: ./target/release/libvexy_json.rlib"
llms.txt:scripts/build.sh:    echo "Documentation at: ./target/doc/vexy_json/index.html"
llms.txt-scripts/build.sh-    echo ""
llms.txt:scripts/build.sh:    echo "To use vexy_json in your project, add to Cargo.toml:"
llms.txt:scripts/build.sh:    echo '  vexy_json = { path = "'$(pwd)'" }'
llms.txt-scripts/build.sh-    echo ""
llms.txt-scripts/build.sh-    echo "Example usage:"
llms.txt:scripts/build.sh:    echo "  use vexy_json::parse;"
llms.txt-scripts/build.sh-    echo "  let value = parse(\"'hello', 'world'\").unwrap();"
llms.txt-scripts/build.sh-
llms.txt-scripts/build.sh-} >build.log.txt 2>&1
llms.txt---
llms.txt-tests/newline_as_comma.rs-use rustc_hash::FxHashMap;
llms.txt:tests/newline_as_comma.rs:use vexy_json::{parse, parse_with_options, ParserOptions, Value};
llms.txt-tests/newline_as_comma.rs-
llms.txt-tests/newline_as_comma.rs-fn n(num: i64) -> Value {
llms.txt:tests/newline_as_comma.rs:    Value::Number(vexy_json::Number::Integer(num))
llms.txt-tests/newline_as_comma.rs-}
llms.txt-tests/newline_as_comma.rs-
llms.txt-tests/newline_as_comma.rs-#[test]
llms.txt---
llms.txt-scripts/package-macos.sh-#!/bin/bash
llms.txt-scripts/package-macos.sh-# this_file: scripts/package-macos.sh
llms.txt:scripts/package-macos.sh:# Package vexy_json for macOS as a .pkg inside a .dmg
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-set -e
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-# Configuration
llms.txt:scripts/package-macos.sh:BINARY_NAME="vexy_json"
llms.txt-scripts/package-macos.sh-VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
llms.txt:scripts/package-macos.sh:BUNDLE_ID="com.twardoch.vexy_json"
llms.txt-scripts/package-macos.sh-INSTALL_LOCATION="/usr/local/bin"
llms.txt-scripts/package-macos.sh-BUILD_DIR="target/macos-package"
llms.txt-scripts/package-macos.sh-PKG_NAME="${BINARY_NAME}-${VERSION}.pkg"
llms.txt-scripts/package-macos.sh-DMG_NAME="${BINARY_NAME}-${VERSION}-macos.dmg"
llms.txt-scripts/package-macos.sh-
llms.txt:scripts/package-macos.sh:echo "Building vexy_json v${VERSION} for macOS..."
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-# Clean and create build directory
llms.txt-scripts/package-macos.sh-rm -rf "${BUILD_DIR}"
--
llms.txt-scripts/package-macos.sh-# Create postinstall script to set permissions
llms.txt-scripts/package-macos.sh-cat > "${BUILD_DIR}/scripts/postinstall" << 'EOF'
llms.txt-scripts/package-macos.sh-#!/bin/bash
llms.txt:scripts/package-macos.sh:chmod 755 /usr/local/bin/vexy_json
llms.txt-scripts/package-macos.sh-exit 0
llms.txt-scripts/package-macos.sh-EOF
llms.txt-scripts/package-macos.sh-chmod +x "${BUILD_DIR}/scripts/postinstall"
--
llms.txt-scripts/package-macos.sh-cat > "${BUILD_DIR}/distribution.xml" << EOF
llms.txt-scripts/package-macos.sh-<?xml version="1.0" encoding="UTF-8"?>
llms.txt-scripts/package-macos.sh-<installer-gui-script minSpecVersion="1">
llms.txt:scripts/package-macos.sh:    <title>vexy_json ${VERSION}</title>
llms.txt-scripts/package-macos.sh-    <organization>com.twardoch</organization>
llms.txt-scripts/package-macos.sh-    <domains enable_anywhere="true"/>
llms.txt-scripts/package-macos.sh-    <installation-check script="pm_install_check();"/>
--
llms.txt-scripts/package-macos.sh-    function pm_install_check() {
llms.txt-scripts/package-macos.sh-        if(system.compareVersions(system.version.ProductVersion,'10.10') &lt; 0) {
llms.txt-scripts/package-macos.sh-            my.result.title = 'Failure';
llms.txt:scripts/package-macos.sh:            my.result.message = 'You need at least macOS 10.10 to install vexy_json.';
llms.txt-scripts/package-macos.sh-            my.result.type = 'Fatal';
llms.txt-scripts/package-macos.sh-            return false;
llms.txt-scripts/package-macos.sh-        }
--
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-# Create README for DMG
llms.txt-scripts/package-macos.sh-cat > "${BUILD_DIR}/dmg/README.txt" << EOF
llms.txt:scripts/package-macos.sh:vexy_json ${VERSION} for macOS
llms.txt-scripts/package-macos.sh-========================
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-A forgiving JSON parser - Rust port of jsonic
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-Installation:
llms.txt-scripts/package-macos.sh-1. Double-click on ${PKG_NAME} to install
llms.txt:scripts/package-macos.sh:2. The 'vexy_json' command will be installed to /usr/local/bin
llms.txt-scripts/package-macos.sh-3. You may need to restart your terminal after installation
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-Usage:
llms.txt:scripts/package-macos.sh:  echo '{"foo": "bar",}' | vexy_json
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-For more information, visit:
llms.txt:scripts/package-macos.sh:https://github.com/twardoch/vexy_json
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-EOF
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-# Create the DMG
llms.txt-scripts/package-macos.sh-echo "Creating DMG..."
llms.txt:scripts/package-macos.sh:hdiutil create -volname "vexy_json ${VERSION}" \
llms.txt-scripts/package-macos.sh-    -srcfolder "${BUILD_DIR}/dmg" \
llms.txt-scripts/package-macos.sh-    -ov -format UDZO \
llms.txt-scripts/package-macos.sh-    "${DMG_NAME}"
--
llms.txt-scripts/package-macos.sh-
llms.txt-scripts/package-macos.sh-echo "✅ Successfully created ${DMG_NAME}"
llms.txt-scripts/package-macos.sh-echo "   Package contains ${PKG_NAME} installer"
llms.txt:scripts/package-macos.sh:echo "   Will install vexy_json to ${INSTALL_LOCATION}"
llms.txt---
llms.txt-scripts/performance-monitor.js-// this_file: scripts/performance-monitor.js
llms.txt-scripts/performance-monitor.js-
llms.txt-scripts/performance-monitor.js-/**
llms.txt:scripts/performance-monitor.js: * Performance Monitoring Script for vexy_json WebAssembly Tool
llms.txt-scripts/performance-monitor.js- * 
llms.txt-scripts/performance-monitor.js- * This script sets up comprehensive performance monitoring for the deployed
llms.txt:scripts/performance-monitor.js: * vexy_json web tool, tracking key metrics like parsing performance, bundle loading,
llms.txt-scripts/performance-monitor.js- * user interactions, and system health.
llms.txt-scripts/performance-monitor.js- * 
llms.txt-scripts/performance-monitor.js- * Features:
--
llms.txt-scripts/performance-monitor.js-     * Monitor bundle size and loading performance
llms.txt-scripts/performance-monitor.js-     */
llms.txt-scripts/performance-monitor.js-    async monitorBundleMetrics() {
llms.txt:scripts/performance-monitor.js:        const baseUrl = 'https://twardoch.github.io/vexy_json';
llms.txt-scripts/performance-monitor.js-        const files = [
llms.txt:scripts/performance-monitor.js:            '/pkg/vexy_json.js',
llms.txt:scripts/performance-monitor.js:            '/pkg/vexy_json_bg.wasm',
llms.txt-scripts/performance-monitor.js-            '/tool.html',
llms.txt-scripts/performance-monitor.js-            '/assets/js/tool.js',
llms.txt-scripts/performance-monitor.js-            '/assets/css/tool.css'
--
llms.txt-scripts/performance-monitor.js-            {
llms.txt-scripts/performance-monitor.js-                name: 'forgiving', input: `{
llms.txt-scripts/performance-monitor.js-                // Comments test
llms.txt:scripts/performance-monitor.js:                name: 'vexy_json',  // single quotes
llms.txt-scripts/performance-monitor.js-                features: [
llms.txt-scripts/performance-monitor.js-                    'comments',
llms.txt-scripts/performance-monitor.js-                    'trailing commas', // trailing comma
--
llms.txt-scripts/performance-monitor.js-     * Run complete performance monitoring
llms.txt-scripts/performance-monitor.js-     */
llms.txt-scripts/performance-monitor.js-    async run() {
llms.txt:scripts/performance-monitor.js:        console.log('🚀 Starting vexy_json performance monitoring...\n');
llms.txt-scripts/performance-monitor.js-
llms.txt-scripts/performance-monitor.js-        try {
llms.txt-scripts/performance-monitor.js-            await this.monitorBundleMetrics();
llms.txt---
llms.txt:examples/test_implicit_objects.rs:use vexy_json::parse;
llms.txt-examples/test_implicit_objects.rs-
llms.txt-examples/test_implicit_objects.rs-fn main() {
llms.txt-examples/test_implicit_objects.rs-    let test_cases = vec![
llms.txt---
llms.txt:examples/test_single_brace.rs:use vexy_json::{parse, Value};
llms.txt-examples/test_single_brace.rs-
llms.txt-examples/test_single_brace.rs-fn main() {
llms.txt-examples/test_single_brace.rs-    println!("Testing single opening brace '{{'");
--
llms.txt-scripts/update-versions.sh-
llms.txt-scripts/update-versions.sh-# Update workspace dependencies
llms.txt-scripts/update-versions.sh-echo "Updating workspace dependencies..."
llms.txt:scripts/update-versions.sh:update_file "Cargo.toml" 'vexy_json-core = { version = ".*"' "s/vexy_json-core = { version = \".*\"/vexy_json-core = { version = \"$VERSION\"/"
llms.txt:scripts/update-versions.sh:update_file "Cargo.toml" 'vexy_json = { version = ".*"' "s/vexy_json = { version = \".*\"/vexy_json = { version = \"$VERSION\"/"
llms.txt-scripts/update-versions.sh-
llms.txt-scripts/update-versions.sh-# Update Python bindings
llms.txt-scripts/update-versions.sh-echo "Updating Python bindings..."
--
llms.txt-scripts/update-versions.sh-
llms.txt-scripts/update-versions.sh-# Update Homebrew formula (only the version, not the URL)
llms.txt-scripts/update-versions.sh-echo "Updating Homebrew formula..."
llms.txt:scripts/update-versions.sh:if [ -f "Formula/vexy_json.rb" ]; then
llms.txt-scripts/update-versions.sh-    # Only update if this looks like a release version (not -dev)
llms.txt-scripts/update-versions.sh-    if [[ ! "$VERSION" =~ -dev$ ]]; then
llms.txt:scripts/update-versions.sh:        update_file "Formula/vexy_json.rb" 'version ".*"' "s/version \".*\"/version \"$VERSION\"/"
llms.txt-scripts/update-versions.sh-        # Note: The URL in the formula should be updated during release
llms.txt-scripts/update-versions.sh-    else
llms.txt-scripts/update-versions.sh-        echo -e "${YELLOW}⚠${NC} Skipping Homebrew formula update for dev version"
--
llms.txt-fuzz/fuzz_targets/comments.rs-#![no_main]
llms.txt-fuzz/fuzz_targets/comments.rs-
llms.txt-fuzz/fuzz_targets/comments.rs-use libfuzzer_sys::fuzz_target;
llms.txt:fuzz/fuzz_targets/comments.rs:use vexy_json::{parse, ParserOptions};
llms.txt-fuzz/fuzz_targets/comments.rs-
llms.txt-fuzz/fuzz_targets/comments.rs-fuzz_target!(|data: &[u8]| {
llms.txt-fuzz/fuzz_targets/comments.rs-    if let Ok(s) = std::str::from_utf8(data) {
--
llms.txt-fuzz/fuzz_targets/comments.rs-                allow_comments: true,
llms.txt-fuzz/fuzz_targets/comments.rs-                ..Default::default()
llms.txt-fuzz/fuzz_targets/comments.rs-            };
llms.txt:fuzz/fuzz_targets/comments.rs:            let _ = vexy_json::parse_with_options(&comment_input, comment_options);
llms.txt-fuzz/fuzz_targets/comments.rs-            
llms.txt-fuzz/fuzz_targets/comments.rs-            // Test with comments disabled (should fail for most)
llms.txt-fuzz/fuzz_targets/comments.rs-            let no_comment_options = ParserOptions {
llms.txt-fuzz/fuzz_targets/comments.rs-                allow_comments: false,
llms.txt-fuzz/fuzz_targets/comments.rs-                ..Default::default()
llms.txt-fuzz/fuzz_targets/comments.rs-            };
llms.txt:fuzz/fuzz_targets/comments.rs:            let _ = vexy_json::parse_with_options(&comment_input, no_comment_options);
llms.txt-fuzz/fuzz_targets/comments.rs-        }
llms.txt-fuzz/fuzz_targets/comments.rs-        
llms.txt-fuzz/fuzz_targets/comments.rs-        // Test nested comment edge cases
llms.txt---
llms.txt:examples/test_inline_comment.rs:use vexy_json::parse;
llms.txt-examples/test_inline_comment.rs-
llms.txt-examples/test_inline_comment.rs-fn main() {
llms.txt-examples/test_inline_comment.rs-    let test_cases = vec![
--
llms.txt-examples/streaming_example.rs-
llms.txt-examples/streaming_example.rs-//! Example demonstrating the streaming parser capabilities.
llms.txt-examples/streaming_example.rs-
llms.txt:examples/streaming_example.rs:use vexy_json::{NdJsonParser, StreamingEvent, StreamingParser};
llms.txt-examples/streaming_example.rs-
llms.txt-examples/streaming_example.rs-fn main() -> Result<(), Box<dyn std::error::Error>> {
llms.txt-examples/streaming_example.rs-    println!("=== Streaming Parser Example ===\n");
llms.txt---
llms.txt:examples/trace_comment_parse.rs:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-examples/trace_comment_parse.rs-
llms.txt-examples/trace_comment_parse.rs-fn main() {
llms.txt-examples/trace_comment_parse.rs-    let input = "// comment\n42";
--
llms.txt-scripts/cross-platform/build-all.sh-    local output_dir="$PROJECT_ROOT/target/$target/release"
llms.txt-scripts/cross-platform/build-all.sh-    mkdir -p "$output_dir"
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt:scripts/cross-platform/build-all.sh:    if $build_cmd build --release --bin vexy_json --target "$target"; then
llms.txt-scripts/cross-platform/build-all.sh-        # Copy binary to build directory
llms.txt:scripts/cross-platform/build-all.sh:        local binary_name="vexy_json"
llms.txt-scripts/cross-platform/build-all.sh-        if [[ "$target" == *"windows"* ]]; then
llms.txt:scripts/cross-platform/build-all.sh:            binary_name="vexy_json.exe"
llms.txt-scripts/cross-platform/build-all.sh-        fi
llms.txt-scripts/cross-platform/build-all.sh-        
llms.txt:scripts/cross-platform/build-all.sh:        local output_name="vexy_json-$VERSION-$target"
llms.txt-scripts/cross-platform/build-all.sh-        if [[ "$target" == *"windows"* ]]; then
llms.txt-scripts/cross-platform/build-all.sh-            output_name="$output_name.exe"
llms.txt-scripts/cross-platform/build-all.sh-        fi
--
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt-scripts/cross-platform/build-all.sh-    # Create archives
llms.txt-scripts/cross-platform/build-all.sh-    cd "$BUILD_DIR"
llms.txt:scripts/cross-platform/build-all.sh:    tar -czf "vexy_json-$VERSION-wasm-web.tar.gz" wasm-web/
llms.txt:scripts/cross-platform/build-all.sh:    tar -czf "vexy_json-$VERSION-wasm-nodejs.tar.gz" wasm-nodejs/
llms.txt-scripts/cross-platform/build-all.sh-    cd "$PROJECT_ROOT"
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt-scripts/cross-platform/build-all.sh-    return 0
--
llms.txt-scripts/cross-platform/build-all.sh-create_universal_macos() {
llms.txt-scripts/cross-platform/build-all.sh-    log "Creating universal macOS binary..."
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt:scripts/cross-platform/build-all.sh:    local intel_binary="$BUILD_DIR/vexy_json-$VERSION-x86_64-apple-darwin"
llms.txt:scripts/cross-platform/build-all.sh:    local arm_binary="$BUILD_DIR/vexy_json-$VERSION-aarch64-apple-darwin"
llms.txt:scripts/cross-platform/build-all.sh:    local universal_binary="$BUILD_DIR/vexy_json-$VERSION-universal-apple-darwin"
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt-scripts/cross-platform/build-all.sh-    if [[ -f "$intel_binary" && -f "$arm_binary" ]]; then
llms.txt-scripts/cross-platform/build-all.sh-        if command -v lipo &> /dev/null; then
--
llms.txt-scripts/cross-platform/build-all.sh-    cd "$BUILD_DIR"
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt-scripts/cross-platform/build-all.sh-    # Create individual archives for each binary
llms.txt:scripts/cross-platform/build-all.sh:    for file in vexy_json-$VERSION-*; do
llms.txt-scripts/cross-platform/build-all.sh-        if [[ -f "$file" && "$file" != *.tar.gz && "$file" != *.zip ]]; then
llms.txt-scripts/cross-platform/build-all.sh-            local archive_name="${file}.tar.gz"
llms.txt-scripts/cross-platform/build-all.sh-            tar -czf "$archive_name" "$file"
--
llms.txt-scripts/cross-platform/build-all.sh-    done
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt-scripts/cross-platform/build-all.sh-    # Create a comprehensive archive with all binaries
llms.txt:scripts/cross-platform/build-all.sh:    tar -czf "vexy_json-$VERSION-all-platforms.tar.gz" vexy_json-$VERSION-*
llms.txt:scripts/cross-platform/build-all.sh:    success "Created comprehensive archive: vexy_json-$VERSION-all-platforms.tar.gz"
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt-scripts/cross-platform/build-all.sh-    cd "$PROJECT_ROOT"
llms.txt-scripts/cross-platform/build-all.sh-}
--
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt-scripts/cross-platform/build-all.sh-    # Generate SHA256 checksums
llms.txt-scripts/cross-platform/build-all.sh-    if command -v sha256sum &> /dev/null; then
llms.txt:scripts/cross-platform/build-all.sh:        sha256sum vexy_json-$VERSION-* > checksums.sha256
llms.txt-scripts/cross-platform/build-all.sh-    elif command -v shasum &> /dev/null; then
llms.txt:scripts/cross-platform/build-all.sh:        shasum -a 256 vexy_json-$VERSION-* > checksums.sha256
llms.txt-scripts/cross-platform/build-all.sh-    else
llms.txt-scripts/cross-platform/build-all.sh-        warning "No SHA256 utility found, skipping checksum generation"
llms.txt-scripts/cross-platform/build-all.sh-        cd "$PROJECT_ROOT"
--
llms.txt-scripts/cross-platform/build-all.sh-    
llms.txt-scripts/cross-platform/build-all.sh-    if [[ -d "$BUILD_DIR" ]]; then
llms.txt-scripts/cross-platform/build-all.sh-        echo -e "${BLUE}Generated files:${NC}"
llms.txt:scripts/cross-platform/build-all.sh:        ls -la "$BUILD_DIR" | grep -E "(vexy_json-|checksums)" | while read -r line; do
llms.txt-scripts/cross-platform/build-all.sh-            echo "  $line"
llms.txt-scripts/cross-platform/build-all.sh-        done
llms.txt-scripts/cross-platform/build-all.sh-    fi
--
llms.txt-fuzz/fuzz_targets/strings.rs-#![no_main]
llms.txt-fuzz/fuzz_targets/strings.rs-
llms.txt-fuzz/fuzz_targets/strings.rs-use libfuzzer_sys::fuzz_target;
llms.txt:fuzz/fuzz_targets/strings.rs:use vexy_json::{parse, ParserOptions};
llms.txt-fuzz/fuzz_targets/strings.rs-
llms.txt-fuzz/fuzz_targets/strings.rs-fuzz_target!(|data: &[u8]| {
llms.txt-fuzz/fuzz_targets/strings.rs-    if let Ok(s) = std::str::from_utf8(data) {
--
llms.txt-fuzz/fuzz_targets/strings.rs-                allow_unquoted_keys: true,
llms.txt-fuzz/fuzz_targets/strings.rs-                ..Default::default()
llms.txt-fuzz/fuzz_targets/strings.rs-            };
llms.txt:fuzz/fuzz_targets/strings.rs:            let _ = vexy_json::parse_with_options(&string_input, single_quote_options);
llms.txt-fuzz/fuzz_targets/strings.rs-        }
llms.txt-fuzz/fuzz_targets/strings.rs-        
llms.txt-fuzz/fuzz_targets/strings.rs-        // Test raw string parsing (edge case)
--
llms.txt-fuzz/fuzz_targets/unquoted_keys.rs-#![no_main]
llms.txt-fuzz/fuzz_targets/unquoted_keys.rs-
llms.txt-fuzz/fuzz_targets/unquoted_keys.rs-use libfuzzer_sys::fuzz_target;
llms.txt:fuzz/fuzz_targets/unquoted_keys.rs:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-fuzz/fuzz_targets/unquoted_keys.rs-
llms.txt-fuzz/fuzz_targets/unquoted_keys.rs-fuzz_target!(|data: &[u8]| {
llms.txt-fuzz/fuzz_targets/unquoted_keys.rs-    if let Ok(s) = std::str::from_utf8(data) {
--
llms.txt-fuzz/fuzz_targets/numbers.rs-#![no_main]
llms.txt-fuzz/fuzz_targets/numbers.rs-
llms.txt-fuzz/fuzz_targets/numbers.rs-use libfuzzer_sys::fuzz_target;
llms.txt:fuzz/fuzz_targets/numbers.rs:use vexy_json::{parse, ParserOptions};
llms.txt-fuzz/fuzz_targets/numbers.rs-
llms.txt-fuzz/fuzz_targets/numbers.rs-fuzz_target!(|data: &[u8]| {
llms.txt-fuzz/fuzz_targets/numbers.rs-    if let Ok(s) = std::str::from_utf8(data) {
--
llms.txt-fuzz/fuzz_targets/numbers.rs-                fast_repair: false,
llms.txt-fuzz/fuzz_targets/numbers.rs-                report_repairs: false,
llms.txt-fuzz/fuzz_targets/numbers.rs-            };
llms.txt:fuzz/fuzz_targets/numbers.rs:            let _ = vexy_json::parse_with_options(&number_input, strict_options);
llms.txt-fuzz/fuzz_targets/numbers.rs-        }
llms.txt-fuzz/fuzz_targets/numbers.rs-        
llms.txt-fuzz/fuzz_targets/numbers.rs-        // Test edge cases
--
llms.txt-fuzz/fuzz_targets/unicode.rs-#![no_main]
llms.txt-fuzz/fuzz_targets/unicode.rs-
llms.txt-fuzz/fuzz_targets/unicode.rs-use libfuzzer_sys::fuzz_target;
llms.txt:fuzz/fuzz_targets/unicode.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt-fuzz/fuzz_targets/unicode.rs-
llms.txt-fuzz/fuzz_targets/unicode.rs-fuzz_target!(|data: &[u8]| {
llms.txt-fuzz/fuzz_targets/unicode.rs-    // Test with raw bytes (may include invalid UTF-8)
llms.txt---
llms.txt:examples/test_number_types.rs:use vexy_json::{parse, Value};
llms.txt-examples/test_number_types.rs-
llms.txt-examples/test_number_types.rs-fn main() {
llms.txt-examples/test_number_types.rs-    let test_cases = vec![
--
llms.txt-examples/test_number_types.rs-    for (input, expected_type) in test_cases {
llms.txt-examples/test_number_types.rs-        print!("Testing {:?} (expecting {}): ", input, expected_type);
llms.txt-examples/test_number_types.rs-        match parse(input) {
llms.txt:examples/test_number_types.rs:            Ok(Value::Number(vexy_json::Number::Integer(i))) => {
llms.txt-examples/test_number_types.rs-                println!("Integer({})", i);
llms.txt-examples/test_number_types.rs-            }
llms.txt:examples/test_number_types.rs:            Ok(Value::Number(vexy_json::Number::Float(f))) => {
llms.txt-examples/test_number_types.rs-                println!("Float({})", f);
llms.txt-examples/test_number_types.rs-            }
llms.txt-examples/test_number_types.rs-            Ok(other) => {
--
llms.txt-fuzz/fuzz_targets/repair.rs-#![no_main]
llms.txt-fuzz/fuzz_targets/repair.rs-
llms.txt-fuzz/fuzz_targets/repair.rs-use libfuzzer_sys::fuzz_target;
llms.txt:fuzz/fuzz_targets/repair.rs:use vexy_json::{parse_with_options, ParserOptions};
llms.txt-fuzz/fuzz_targets/repair.rs-
llms.txt-fuzz/fuzz_targets/repair.rs-fuzz_target!(|data: &[u8]| {
llms.txt-fuzz/fuzz_targets/repair.rs-    if let Ok(s) = std::str::from_utf8(data) {
llms.txt---
llms.txt:examples/debug_comma_one_tokens.rs:use vexy_json::{Lexer, Token};
llms.txt:examples/debug_comma_one_tokens.rs:use vexy_json_core::lexer::JsonLexer;
llms.txt-examples/debug_comma_one_tokens.rs-
llms.txt-examples/debug_comma_one_tokens.rs-fn main() {
llms.txt-examples/debug_comma_one_tokens.rs-    let input = ",1";
llms.txt---
llms.txt:examples/debug_trailing_comma.rs:use vexy_json::{parse, Lexer, Token};
llms.txt:examples/debug_trailing_comma.rs:use vexy_json_core::lexer::JsonLexer;
llms.txt-examples/debug_trailing_comma.rs-
llms.txt-examples/debug_trailing_comma.rs-fn main() {
llms.txt-examples/debug_trailing_comma.rs-    let input = "[1, 2, 3,]";
llms.txt---
llms.txt-fuzz/Cargo.toml-[package]
llms.txt:fuzz/Cargo.toml:name = "vexy_json-core-fuzz"
llms.txt-fuzz/Cargo.toml-version = "0.0.0"
llms.txt-fuzz/Cargo.toml-publish = false
llms.txt-fuzz/Cargo.toml-edition = "2021"
--
llms.txt-fuzz/Cargo.toml-libfuzzer-sys = "0.4"
llms.txt-fuzz/Cargo.toml-
llms.txt-fuzz/Cargo.toml-
llms.txt:fuzz/Cargo.toml:[dependencies.vexy_json-core]
llms.txt-fuzz/Cargo.toml-path = "../crates/core"
llms.txt-fuzz/Cargo.toml-
llms.txt-fuzz/Cargo.toml-
llms.txt:fuzz/Cargo.toml:[dependencies.vexy_json]
llms.txt-fuzz/Cargo.toml-path = ".."
llms.txt-fuzz/Cargo.toml-
llms.txt-fuzz/Cargo.toml-
llms.txt---
llms.txt:examples/test_comment.rs:use vexy_json::{parse, parse_with_options, Error, Lexer, ParserOptions, Token};
llms.txt:examples/test_comment.rs:use vexy_json_core::lexer::JsonLexer;
llms.txt-examples/test_comment.rs-
llms.txt-examples/test_comment.rs-fn main() {
llms.txt-examples/test_comment.rs-    let input = "a#b";
--
llms.txt-examples/recursive_parser.rs-
llms.txt-examples/recursive_parser.rs-//! Example demonstrating the recursive descent parser
llms.txt-examples/recursive_parser.rs-
llms.txt:examples/recursive_parser.rs:use vexy_json_core::parser::recursive::parse_recursive;
llms.txt:examples/recursive_parser.rs:use vexy_json_core::parser::ParserOptions;
llms.txt:examples/recursive_parser.rs:use vexy_json_core::ast::{Value, Number};
llms.txt-examples/recursive_parser.rs-
llms.txt-examples/recursive_parser.rs-fn main() -> Result<(), Box<dyn std::error::Error>> {
llms.txt-examples/recursive_parser.rs-    println!("🧮 Recursive Descent Parser Demo");
llms.txt---
llms.txt:examples/simple.rs:use vexy_json::{parse, parse_with_options, Lexer, ParserOptions, Token};
llms.txt-examples/simple.rs-
llms.txt-examples/simple.rs-fn debug_string_positions(input: &str) {
llms.txt-examples/simple.rs-    println!("\nString positions in: {:?}", input);
--
llms.txt-examples/plugin_examples.rs-//! This example shows how to use the built-in plugins to extend
llms.txt-examples/plugin_examples.rs-//! Vexy JSON's parsing capabilities.
llms.txt-examples/plugin_examples.rs-
llms.txt:examples/plugin_examples.rs:use vexy_json::{parse, parse_with_options, ParserOptions};
llms.txt:examples/plugin_examples.rs:use vexy_json_core::plugin::plugins::{
llms.txt-examples/plugin_examples.rs-    SchemaValidationPlugin,
llms.txt-examples/plugin_examples.rs-    DateTimePlugin,
llms.txt-examples/plugin_examples.rs-    CustomNumberFormatPlugin,
llms.txt-examples/plugin_examples.rs-    CommentPreservationPlugin,
llms.txt-examples/plugin_examples.rs-};
llms.txt:examples/plugin_examples.rs:use vexy_json_core::plugin::ParserPlugin;
llms.txt-examples/plugin_examples.rs-
llms.txt-examples/plugin_examples.rs-fn main() -> Result<(), Box<dyn std::error::Error>> {
llms.txt-examples/plugin_examples.rs-    println!("🔌 Vexy JSON Plugin Examples");
llms.txt---
llms.txt-examples/profile_parser.rs-// this_file: examples/profile_parser.rs
llms.txt-examples/profile_parser.rs-
llms.txt:examples/profile_parser.rs:use vexy_json::parse;
llms.txt-examples/profile_parser.rs-
llms.txt-examples/profile_parser.rs-fn main() {
llms.txt-examples/profile_parser.rs-    // Heavy workload for profiling
llms.txt---
llms.txt:examples/test_comment_with_value.rs:use vexy_json::parse;
llms.txt-examples/test_comment_with_value.rs-
llms.txt-examples/test_comment_with_value.rs-fn main() {
llms.txt-examples/test_comment_with_value.rs-    let test_cases = vec![
llms.txt---
llms.txt:examples/test_single_quote.rs:use vexy_json::Lexer;
llms.txt:examples/test_single_quote.rs:use vexy_json_core::lexer::JsonLexer;
llms.txt-examples/test_single_quote.rs-
llms.txt-examples/test_single_quote.rs-fn main() {
llms.txt-examples/test_single_quote.rs-    let mut lexer = Lexer::new("'hello'");
--
llms.txt-examples/parser_comparison.rs-
llms.txt-examples/parser_comparison.rs-//! Example comparing different parser implementations
llms.txt-examples/parser_comparison.rs-
llms.txt:examples/parser_comparison.rs:use vexy_json_core::{
llms.txt-examples/parser_comparison.rs-    parse_with_options,
llms.txt-examples/parser_comparison.rs-    parse_optimized_with_options,
llms.txt-examples/parser_comparison.rs-    parse_optimized_v2_with_options,
--
llms.txt-examples/parser_comparison.rs-    parse_iterative,
llms.txt-examples/parser_comparison.rs-    ParserOptions,
llms.txt-examples/parser_comparison.rs-};
llms.txt:examples/parser_comparison.rs:use vexy_json_core::ast::{Value, Number};
llms.txt-examples/parser_comparison.rs-use std::time::Instant;
llms.txt-examples/parser_comparison.rs-
llms.txt-examples/parser_comparison.rs-fn main() -> Result<(), Box<dyn std::error::Error>> {
--
llms.txt-examples/parser_comparison.rs-        println!("JSON: {}", json);
llms.txt-examples/parser_comparison.rs-        
llms.txt-examples/parser_comparison.rs-        // Test all parsers
llms.txt:examples/parser_comparison.rs:        let parsers: Vec<(&str, fn(&str, ParserOptions) -> Result<Value, vexy_json_core::Error>)> = vec![
llms.txt-examples/parser_comparison.rs-            ("Original", parse_with_options),
llms.txt-examples/parser_comparison.rs-            ("Optimized", parse_optimized_with_options),
llms.txt-examples/parser_comparison.rs-            ("Optimized V2", parse_optimized_v2_with_options),
--
llms.txt-examples/parser_comparison.rs-        println!("JSON: {}", invalid_json);
llms.txt-examples/parser_comparison.rs-        
llms.txt-examples/parser_comparison.rs-        // Test error handling across parsers
llms.txt:examples/parser_comparison.rs:        let parsers: Vec<(&str, fn(&str, ParserOptions) -> Result<Value, vexy_json_core::Error>)> = vec![
llms.txt-examples/parser_comparison.rs-            ("Recursive", parse_recursive),
llms.txt-examples/parser_comparison.rs-            ("Iterative", parse_iterative),
llms.txt-examples/parser_comparison.rs-        ];
--
llms.txt-examples/parser_comparison.rs-    println!("Testing large JSON with 1000 key-value pairs");
llms.txt-examples/parser_comparison.rs-    println!("JSON size: {} bytes", large_json.len());
llms.txt-examples/parser_comparison.rs-    
llms.txt:examples/parser_comparison.rs:    let parsers: Vec<(&str, fn(&str, ParserOptions) -> Result<Value, vexy_json_core::Error>)> = vec![
llms.txt-examples/parser_comparison.rs-        ("Recursive", parse_recursive),
llms.txt-examples/parser_comparison.rs-        ("Iterative", parse_iterative),
llms.txt-examples/parser_comparison.rs-    ];
llms.txt---
llms.txt:examples/debug_lookahead.rs:use vexy_json::{Lexer, Token};
llms.txt:examples/debug_lookahead.rs:use vexy_json_core::lexer::JsonLexer;
llms.txt-examples/debug_lookahead.rs-
llms.txt-examples/debug_lookahead.rs-fn main() {
llms.txt-examples/debug_lookahead.rs-    let input = "/*a:1*/\nb:2";
llms.txt---
llms.txt-scripts/package-lock.json-{
llms.txt:scripts/package-lock.json:    "name": "vexy_json-testing-scripts",
llms.txt-scripts/package-lock.json-    "version": "1.0.0",
llms.txt-scripts/package-lock.json-    "lockfileVersion": 3,
llms.txt-scripts/package-lock.json-    "requires": true,
llms.txt-scripts/package-lock.json-    "packages": {
llms.txt-scripts/package-lock.json-        "": {
llms.txt:scripts/package-lock.json:            "name": "vexy_json-testing-scripts",
llms.txt-scripts/package-lock.json-            "version": "1.0.0",
llms.txt-scripts/package-lock.json-            "license": "MIT",
llms.txt-scripts/package-lock.json-            "dependencies": {
llms.txt---
llms.txt:examples/debug_test.rs:use vexy_json::parse;
llms.txt-examples/debug_test.rs-
llms.txt-examples/debug_test.rs-fn main() {
llms.txt-examples/debug_test.rs-    println!("Testing: /*a:1*/\nb:2");
--
llms.txt-
llms.txt-## http://127.0.0.1:8081/debug-pages/test-wasm.html
llms.txt-
llms.txt:vexy_json WebAssembly Test Page
llms.txt:Testing the vexy_json WASM module functionality...
llms.txt-
llms.txt-WASM Module Initialization
llms.txt-✅ Module loaded successfully
llms.txt-Version Info
llms.txt:vexy_json vundefined
llms.txt-undefined
llms.txt-Basic JSON Parsing
llms.txt-Input: {"key": "value"}
--
llms.txt-In @docs we have @docs/tool.html
llms.txt-
llms.txt-1. We want that page to share navigation with the remaining Jekyll site, somehow. 
llms.txt:2. More importantly, we want a "sister web page" with the identical design which will allow the end-user to use the `jsonic` library (analogous to our `vexy_json` in @docs/tool.html)
llms.txt-
llms.txt-Into @PLAN.md develop a very detailed and specific plan for the above. 
llms.txt-
--
llms.txt-<document index="122">
llms.txt-<source>issues/104.txt</source>
llms.txt-<document_content>
llms.txt:Analyze the entire codebase. Then in ./IDEAS.md write an extensive spec that will describe in minute detail step-by-step how to extend the vexy_json parser with the functionality of INTELLIGENT completion of opening or closing braces. Right now our tolerant and forgiving JSON-esque parser can fix various things but it cannot overcome the situation of a braces mismatch. The original reference jsonic parser written in JS, of which vexy_json is a Rust port, does not have that functionality. But I want it.
llms.txt-
llms.txt-
llms.txt-</document_content>
--
llms.txt-<document_content>
llms.txt-Analyze the entire `./llms.txt` codebase snapshot. 
llms.txt-
llms.txt:Our code, `vexy_json` is a Rust port of the `jsonic` parser written in JS. Neither of the tolerant and forgiving JSON-esque parsers (our `vexy_json` or the original `jsonic`) can overcome the problem of mismatching brackets or braces. 
llms.txt-
llms.txt-It would be very useful if this were possible. 
llms.txt-
--
llms.txt-3. The parse continues after the object. The AST now has the `"bar"` key mapped to an array node that is marked incomplete/error, but the `"foo":123` entry remains intact, and the overall AST is a top-level object node (rather than nothing).
llms.txt-4. The IDE can highlight the error at the position of `}` and possibly at end-of-file (saying one brace was inserted implicitly). But crucially, it can still allow navigation of the AST (e.g. the user can fold the object, see both keys, etc.).
llms.txt-
llms.txt:To implement similar features in a **Rust-based tolerant JSON parser** (like extending `vexy_json` or `jsonic` with mismatch recovery), one can combine these approaches:
llms.txt-
llms.txt-* **Insert error nodes** on-the-fly in the parser: e.g. if expecting `]` but got `}`, push an error and treat it as the end of the array. If end-of-file reached but stack isn’t empty, auto-insert the needed `]` or `}` tokens (recording errors for each).
llms.txt-* **Use a recovery combinator or manual check** after a failed parse: e.g. if a value parser fails inside an array, skip forward until a `]` or `}` is found, or until a comma that indicates the next element, then continue. This could be done by a loop scanning the char stream or by a higher-level library feature.
--
llms.txt-
llms.txt-Error-tolerant parsing is an active area of language tooling research and development. Techniques range from simple heuristics (skip to next `}`) to sophisticated grammar transformations that guarantee a parse for any input. **State-of-the-art academic work** (like PEG labeled failures or minimal edit algorithms) has started to find its way into practical tools, meaning library authors no longer have to choose between strict compliance and usability. Open-source libraries such as **Chumsky** (Rust) and **LPegLabel** (Lua) demonstrate that we can recover from errors while still using high-level parser definitions. And specialized JSON fixers like **`json_repair`**, **JSON5/JSONC parsers**, and **tolerantjson** for Python show concrete strategies to handle unbalanced delimiters, missing commas, and more in real JSON inputs.
llms.txt-
llms.txt:For implementing a tolerant parser in Rust (as with `vexy_json` or similar), a combined approach is recommended:
llms.txt-
llms.txt-* Use a **stack-based mechanism** or parser combinator to detect and auto-correct bracket mismatches in one pass.
llms.txt-* Represent the parse result in a way that **retains malformed parts** (e.g. an `Enum Value { Valid(...), Error(...) }`), so that no information is lost.
--
llms.txt-
llms.txt-Into `./issues/106.txt` write an extensive spec that will describe in minute detail step-by-step how to incorporate https://docs.rs/json-repair/ into our project. 
llms.txt-
llms.txt:The general idea is that it should be an option, and we should have a parser that parses using the fastest method first, then falls back to our core `vexy_json` slower one, and only if that fails falls back to `json-repair`. 
llms.txt-
llms.txt-
llms.txt-</document_content>
--
llms.txt-<document index="124">
llms.txt-<source>issues/106.txt</source>
llms.txt-<document_content>
llms.txt:# JSON Repair Integration Specification for vexy_json
llms.txt-
llms.txt-## Executive Summary
llms.txt-
llms.txt:This document provides a detailed specification for integrating the `json-repair` crate into the vexy_json project to handle mismatched brackets and braces - a limitation that neither our `vexy_json` nor the original `jsonic` parser can currently overcome. The integration will implement a three-tier parsing approach with performance-optimized fallback chains.
llms.txt-
llms.txt-## 1. Problem Statement
llms.txt-
llms.txt-### Current Limitations
llms.txt:- Both `vexy_json` and `jsonic` fail on mismatched brackets/braces (e.g., `{key: "value"]`, `[1, 2, 3}`)
llms.txt-- No error recovery mechanism for structural delimiter mismatches
llms.txt-- Complete parsing failure rather than partial recovery with error reporting
llms.txt-- Missing brackets at end-of-input cause total failure
--
llms.txt-
llms.txt-```
llms.txt-Input JSON → Tier 1: Fast Path → Tier 2: Forgiving Path → Tier 3: Repair Path → Output
llms.txt:             (serde_json)      (vexy_json core)         (json-repair)
llms.txt-```
llms.txt-
llms.txt-**Tier 1: Fast Path (serde_json)**
--
llms.txt-- Zero-copy optimization where possible
llms.txt-- Immediate failure on any syntax error
llms.txt-
llms.txt:**Tier 2: Forgiving Path (vexy_json core)**
llms.txt:- Current vexy_json parser with all forgiving features
llms.txt-- Handles comments, trailing commas, unquoted keys, etc.
llms.txt-- Fails on bracket mismatches
llms.txt-
--
llms.txt-
llms.txt-### Version Compatibility
llms.txt-- `json-repair` 0.2.x: Stable API, bracket balancing, minimal dependencies
llms.txt:- Compatible with current `vexy_json` dependency stack
llms.txt-- No conflicting dependencies identified
llms.txt-
llms.txt-## 4. Core Implementation
--
llms.txt-#[derive(Debug, Clone)]
llms.txt-pub enum ParsingTier {
llms.txt-    Fast,      // serde_json succeeded
llms.txt:    Forgiving, // vexy_json succeeded
llms.txt-    Repair,    // json-repair succeeded
llms.txt-}
llms.txt-
--
llms.txt-        };
llms.txt-    }
llms.txt-
llms.txt:    // Tier 2: Forgiving Path - vexy_json core
llms.txt-    match parse_with_options(input, options) {
llms.txt-        Ok(value) => {
llms.txt-            return ParseResult {
--
llms.txt-            // Track what repairs were made
llms.txt-            repairs.extend(detect_repairs(input, &repaired_json));
llms.txt-
llms.txt:            // Parse the repaired JSON with vexy_json
llms.txt-            match parse_with_options(&repaired_json, options) {
llms.txt-                Ok(value) => ParseResult {
llms.txt-                    value,
--
llms.txt-```rust
llms.txt-// In crates/cli/src/main.rs
llms.txt-#[derive(Parser)]
llms.txt:#[command(name = "vexy_json")]
llms.txt-struct Cli {
llms.txt-    // ... existing options ...
llms.txt-    
--
llms.txt-// In tests/repair_integration.rs
llms.txt-#[cfg(test)]
llms.txt-mod integration_tests {
llms.txt:    use vexy_json::{parse_with_fallback, ParserOptions, ParsingTier};
llms.txt-    
llms.txt-    #[test]
llms.txt-    fn test_complex_bracket_mismatch() {
--
llms.txt-```rust
llms.txt-// In benches/repair_benchmark.rs
llms.txt-use criterion::{black_box, criterion_group, criterion_main, Criterion};
llms.txt:use vexy_json::{parse_with_fallback, ParserOptions};
llms.txt-
llms.txt-fn bench_parsing_tiers(c: &mut Criterion) {
llms.txt-    let mut group = c.benchmark_group("parsing_tiers");
--
llms.txt-```markdown
llms.txt-## Enhanced Error Recovery
llms.txt-
llms.txt:vexy_json now features advanced error recovery capabilities that can handle mismatched brackets and braces:
llms.txt-
llms.txt-```rust
llms.txt:use vexy_json::{parse_with_fallback, ParserOptions};
llms.txt-
llms.txt-// This will now succeed with automatic repair
llms.txt-let broken_json = r#"{"key": "value"]"#;
--
llms.txt-### Three-Tier Parsing
llms.txt-
llms.txt-1. **Fast Tier**: Uses `serde_json` for maximum performance on valid JSON
llms.txt:2. **Forgiving Tier**: Uses vexy_json's forgiving features for relaxed JSON syntax
llms.txt-3. **Repair Tier**: Uses `json-repair` for automatic bracket balancing and error correction
llms.txt-```
llms.txt-
--
llms.txt-///
llms.txt-/// This function implements a three-tier parsing strategy:
llms.txt-/// 1. Fast path using `serde_json` for valid JSON
llms.txt:/// 2. Forgiving path using vexy_json's tolerant parsing
llms.txt-/// 3. Repair path using `json-repair` for bracket mismatches
llms.txt-///
llms.txt-/// # Examples
llms.txt-///
llms.txt-/// ```rust
llms.txt:/// use vexy_json::{parse_with_fallback, ParserOptions};
llms.txt-///
llms.txt-/// // Valid JSON - uses fast path
llms.txt-/// let valid = r#"{"key": "value"}"#;
--
llms.txt-
llms.txt-```rust
llms.txt-// This still works exactly as before
llms.txt:let value = vexy_json::parse(r#"{"key": "value"}"#)?;
llms.txt-```
llms.txt-
llms.txt-### 11.2 New Features Adoption
llms.txt-
llms.txt-```rust
llms.txt-// Opt into new features gradually
llms.txt:use vexy_json::{parse_with_fallback, ParserOptions};
llms.txt-
llms.txt-// Enable repair with configuration
llms.txt-let options = ParserOptions {
--
llms.txt-
llms.txt-## 15. Conclusion
llms.txt-
llms.txt:This specification provides a comprehensive roadmap for integrating `json-repair` into vexy_json while maintaining backward compatibility and performance. The three-tier parsing approach ensures optimal performance for valid JSON while providing robust error recovery for malformed input.
llms.txt-
llms.txt:The implementation will significantly expand vexy_json's capabilities while maintaining its core design principles of being fast, forgiving, and user-friendly.
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt-<document index="125">
llms.txt-<source>issues/107.txt</source>
llms.txt-<document_content>
llms.txt:$ ./target/release/vexy_json --help
llms.txt-A forgiving JSON parser - Rust port of jsonic
llms.txt-
llms.txt:Usage: vexy_json
llms.txt-
llms.txt-Options:
llms.txt-  -h, --help     Print help
llms.txt-  -V, --version  Print version
llms.txt:(.venv) ~/Developer/vcs/github.twardoch/pub/vexy_json
llms.txt:[14:53:12] $ ./target/release/vexy_json-cli --help
llms.txt:Usage: vexy_json-cli
llms.txt-
llms.txt-Options:
llms.txt-  -h, --help     Print help
llms.txt-  -V, --version  Print version
llms.txt-
llms.txt-
llms.txt:——— why two executables? (vexy_json and vexy_json-cli) 
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-<document index="129">
llms.txt-<source>issues/602.txt</source>
llms.txt-<document_content>
llms.txt:Read the @llms.txt code snapshot and into `vexify.txt` record all occurrences of all case variants of `vexy_json` found in the codebase. 
llms.txt-
llms.txt:Write a `vexify.py` tool that will generally replace both in the current codebase and in the entire git history the name `vexy_json` with `vexy json` but in a smart way: 
llms.txt-
llms.txt:- In filenames, it should replace `vexy_json` with `vexy_json`
llms.txt:- In code, it should replace `vexy_json` with `vexy_json` when it is used as a variable or function name, not in comments or strings.
llms.txt-- In documentation, comments and UI strings (like in HTML) it should replace the all-uppercase `Vexy JSON` with `Vexy JSON`.
llms.txt-- Cases like `VexyJSONConfig`, `VexyJSONWrapper` or so should become `VexyJSONConfig`, `VexyJSONWrapper`
llms.txt:- It should report all changes made, including filenames, code changes, and documentation updates, and then report the places where `vexy_json` still occurs.
llms.txt-
llms.txt-Make it Fire CLI. If `--deep` is given, it should also rewrite the git history. Without `--deep`, it should only modify the current state of the codebase.
llms.txt-</document_content>
--
llms.txt-<document index="130">
llms.txt-<source>issues/610.txt</source>
llms.txt-<document_content>
llms.txt:Read the @llms.txt codebase snapshot. Note: recently we have renamed the project from `ZZSON` to `Vexy JSON`. We have search-replaced many strings like `zzson` to `vexy_json`, but mistakes may have been made. Please review all files, check if the changes have been performed consistently. . Run build scripts. Then into @PLAN.md write a detailed plan to improve and fix the code, and then into @TODO.md write a linearized version of that. Then /work on it. 
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt-<document index="131">
llms.txt-<source>issues/611.txt</source>
llms.txt-<document_content>
llms.txt:Read @grep.txt (the result of running `rg -C 3 "vexy" > grep.txt`) to see a list of occurrences of the phrase `vexy`. Our project is called "Vexy JSON". Review where we should use `Vexy JSON` and were `VEXYJSON` and where `vexy_json` and where `vexy-json` etc. Then into @TODO.md write a VERY DETAILED plan that will discuss in which occurrences we should keep the current spelling, and in which occurrences we need to change it and how. 
llms.txt-
llms.txt-</document_content>
llms.txt-</document>
--
llms.txt-    && rm -rf /var/lib/apt/lists/*
llms.txt-
llms.txt-# Copy the project source
llms.txt:COPY . $SRC/vexy_json
llms.txt-
llms.txt-# Set the working directory
llms.txt:WORKDIR $SRC/vexy_json
llms.txt-
llms.txt-# Copy the build script
llms.txt-COPY oss-fuzz/build.sh $SRC/build.sh
--
llms.txt-To set up OSS-Fuzz integration:
llms.txt-
llms.txt-1. Fork the [OSS-Fuzz repository](https://github.com/google/oss-fuzz)
llms.txt:2. Create a new directory under `projects/vexy_json/`
llms.txt:3. Copy the files from this directory to `projects/vexy_json/`
llms.txt-4. Submit a pull request to the OSS-Fuzz repository
llms.txt-
llms.txt-## Testing Locally
--
llms.txt-cd oss-fuzz
llms.txt-
llms.txt-# Copy project files
llms.txt:cp -r /path/to/vexy_json/oss-fuzz projects/vexy_json/
llms.txt-
llms.txt-# Build the project
llms.txt:python infra/helper.py build_image vexy_json
llms.txt:python infra/helper.py build_fuzzers vexy_json
llms.txt-
llms.txt-# Run fuzzers
llms.txt:python infra/helper.py run_fuzzer vexy_json json_structure
llms.txt-```
llms.txt-
llms.txt-## Fuzzing Targets
--
llms.txt-## Coverage
llms.txt-
llms.txt-Coverage reports are automatically generated and can be viewed at:
llms.txt:https://storage.googleapis.com/oss-fuzz-coverage/vexy_json/latest/index.html
llms.txt-
llms.txt-## Bug Reports
llms.txt-
--
llms.txt-source $HOME/.cargo/env
llms.txt-
llms.txt-# Navigate to the project directory
llms.txt:cd $SRC/vexy_json
llms.txt-
llms.txt-# Build the project
llms.txt-cargo build --release
--
llms.txt-<document_content>
llms.txt-# this_file: oss-fuzz/project.yaml
llms.txt-
llms.txt:homepage: "https://github.com/twardoch/pub/vexy_json"
llms.txt-language: rust
llms.txt-primary_contact: "adam@twardoch.com"
llms.txt-auto_ccs:
--
llms.txt-coverage_extra_args: "--target-dir=/tmp/coverage"
llms.txt-
llms.txt-# Additional configuration
llms.txt:main_repo: "https://github.com/twardoch/pub/vexy_json"
llms.txt-file_github_issue: true
llms.txt-</document_content>
llms.txt-</document>
--
llms.txt-#!/bin/bash
llms.txt-# this_file: build-wasm.sh
llms.txt-
llms.txt:# WebAssembly Build Script for vexy_json
llms.txt-# Automated build script using wasm-pack with configurable dev/release modes
llms.txt-# Outputs to docs/pkg/ directory for web integration
llms.txt-
--
llms.txt-BLUE='\033[0;34m'
llms.txt-NC='\033[0m' # No Color
llms.txt-
llms.txt:echo -e "${BLUE}🔧 vexy_json WebAssembly Build Script${NC}"
llms.txt-echo "=================================================="
llms.txt-echo -e "Build mode: ${YELLOW}$BUILD_MODE${NC}"
llms.txt-echo -e "Output directory: ${YELLOW}$OUTPUT_DIR${NC}"
--
llms.txt-fi
llms.txt-
llms.txt-# Additional optimization with wasm-opt if available
llms.txt:if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" ] && command -v wasm-opt &>/dev/null; then
llms.txt-    echo -e "${BLUE}🔧 Optimizing WASM bundle with wasm-opt...${NC}"
llms.txt:    ORIGINAL_SIZE=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt:    wasm-opt -Oz "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" -o "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt"
llms.txt:    if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt" ]; then
llms.txt:        mv "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt" "$OUTPUT_DIR/vexy_json_wasm_bg.wasm"
llms.txt:        OPTIMIZED_SIZE=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt-        REDUCTION=$((ORIGINAL_SIZE - OPTIMIZED_SIZE))
llms.txt-        echo -e "${GREEN}✅ Additional optimization saved ${YELLOW}$REDUCTION bytes${NC}"
llms.txt-    fi
llms.txt-fi
llms.txt-
llms.txt-# Report bundle size
llms.txt:if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" ]; then
llms.txt:    WASM_SIZE=$(du -h "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" | cut -f1)
llms.txt-    echo -e "${GREEN}📦 Final WASM bundle size: ${YELLOW}$WASM_SIZE${NC}"
llms.txt-
llms.txt-    # Size warnings
llms.txt:    WASM_SIZE_BYTES=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt-    if [ "$WASM_SIZE_BYTES" -gt 1048576 ]; then # 1MB
llms.txt-        echo -e "${YELLOW}⚠️  Warning: WASM bundle is larger than 1MB${NC}"
llms.txt-        echo "   Consider optimizing for web deployment"
--
llms.txt-echo
llms.txt-echo -e "${BLUE}Example usage in HTML:${NC}"
llms.txt-echo "  <script type=\"module\">"
llms.txt:echo "    import init, { parse_json } from './pkg/vexy_json.js';"
llms.txt-echo "    await init();"
llms.txt-echo "    const result = parse_json('{\"test\": true}');"
llms.txt-echo "  </script>"
--
llms.txt-# Exit immediately if a command exits with a non-zero status.
llms.txt-set -e
llms.txt-cd "$(dirname "$0")/.."
llms.txt:echo "Starting build process for vexy_json..."
llms.txt-
llms.txt-{
llms.txt:    echo "Building the vexy_json project..."
llms.txt-    # Build the project in release mode for optimized binaries
llms.txt-    /Users/adam/.cargo/bin/cargo build --release
llms.txt-
--
llms.txt-
llms.txt-    echo "Build and verification complete."
llms.txt-    echo ""
llms.txt:    echo "Library built at: ./target/release/libvexy_json.rlib"
llms.txt:    echo "Documentation at: ./target/doc/vexy_json/index.html"
llms.txt-    echo ""
llms.txt:    echo "To use vexy_json in your project, add to Cargo.toml:"
llms.txt:    echo '  vexy_json = { path = "'$(pwd)'" }'
llms.txt-    echo ""
llms.txt-    echo "Example usage:"
llms.txt:    echo "  use vexy_json::parse;"
llms.txt-    echo "  let value = parse(\"'hello', 'world'\").unwrap();"
llms.txt-
llms.txt-} >build.log.txt 2>&1
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/scripts/cross-browser-test.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-async function runBrowserTests((browserConfig, deviceConfig = null))
--
llms.txt-    local output_dir="$PROJECT_ROOT/target/$target/release"
llms.txt-    mkdir -p "$output_dir"
llms.txt-    
llms.txt:    if $build_cmd build --release --bin vexy_json --target "$target"; then
llms.txt-        # Copy binary to build directory
llms.txt:        local binary_name="vexy_json"
llms.txt-        if [[ "$target" == *"windows"* ]]; then
llms.txt:            binary_name="vexy_json.exe"
llms.txt-        fi
llms.txt-        
llms.txt:        local output_name="vexy_json-$VERSION-$target"
llms.txt-        if [[ "$target" == *"windows"* ]]; then
llms.txt-            output_name="$output_name.exe"
llms.txt-        fi
--
llms.txt-    
llms.txt-    # Create archives
llms.txt-    cd "$BUILD_DIR"
llms.txt:    tar -czf "vexy_json-$VERSION-wasm-web.tar.gz" wasm-web/
llms.txt:    tar -czf "vexy_json-$VERSION-wasm-nodejs.tar.gz" wasm-nodejs/
llms.txt-    cd "$PROJECT_ROOT"
llms.txt-    
llms.txt-    return 0
--
llms.txt-create_universal_macos() {
llms.txt-    log "Creating universal macOS binary..."
llms.txt-    
llms.txt:    local intel_binary="$BUILD_DIR/vexy_json-$VERSION-x86_64-apple-darwin"
llms.txt:    local arm_binary="$BUILD_DIR/vexy_json-$VERSION-aarch64-apple-darwin"
llms.txt:    local universal_binary="$BUILD_DIR/vexy_json-$VERSION-universal-apple-darwin"
llms.txt-    
llms.txt-    if [[ -f "$intel_binary" && -f "$arm_binary" ]]; then
llms.txt-        if command -v lipo &> /dev/null; then
--
llms.txt-    cd "$BUILD_DIR"
llms.txt-    
llms.txt-    # Create individual archives for each binary
llms.txt:    for file in vexy_json-$VERSION-*; do
llms.txt-        if [[ -f "$file" && "$file" != *.tar.gz && "$file" != *.zip ]]; then
llms.txt-            local archive_name="${file}.tar.gz"
llms.txt-            tar -czf "$archive_name" "$file"
--
llms.txt-    done
llms.txt-    
llms.txt-    # Create a comprehensive archive with all binaries
llms.txt:    tar -czf "vexy_json-$VERSION-all-platforms.tar.gz" vexy_json-$VERSION-*
llms.txt:    success "Created comprehensive archive: vexy_json-$VERSION-all-platforms.tar.gz"
llms.txt-    
llms.txt-    cd "$PROJECT_ROOT"
llms.txt-}
--
llms.txt-    
llms.txt-    # Generate SHA256 checksums
llms.txt-    if command -v sha256sum &> /dev/null; then
llms.txt:        sha256sum vexy_json-$VERSION-* > checksums.sha256
llms.txt-    elif command -v shasum &> /dev/null; then
llms.txt:        shasum -a 256 vexy_json-$VERSION-* > checksums.sha256
llms.txt-    else
llms.txt-        warning "No SHA256 utility found, skipping checksum generation"
llms.txt-        cd "$PROJECT_ROOT"
--
llms.txt-    
llms.txt-    if [[ -d "$BUILD_DIR" ]]; then
llms.txt-        echo -e "${BLUE}Generated files:${NC}"
llms.txt:        ls -la "$BUILD_DIR" | grep -E "(vexy_json-|checksums)" | while read -r line; do
llms.txt-            echo "  $line"
llms.txt-        done
llms.txt-    fi
--
llms.txt-PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
llms.txt-VERSION="${VERSION:-$(grep '^version' "$PROJECT_ROOT/Cargo.toml" | head -1 | cut -d'"' -f2)}"
llms.txt-BUILD_DIR="$PROJECT_ROOT/target/macos-installer"
llms.txt:APP_NAME="vexy_json"
llms.txt:BUNDLE_ID="com.twardoch.vexy_json"
llms.txt:DMG_NAME="vexy_json-$VERSION-macos.dmg"
llms.txt-
llms.txt-# Utility functions
llms.txt-log() {
--
llms.txt-    
llms.txt-    # Build for Intel
llms.txt-    log "Building for Intel (x86_64)..."
llms.txt:    cargo build --release --bin vexy_json --target x86_64-apple-darwin
llms.txt-    
llms.txt-    # Build for Apple Silicon
llms.txt-    log "Building for Apple Silicon (aarch64)..."
llms.txt:    cargo build --release --bin vexy_json --target aarch64-apple-darwin
llms.txt-    
llms.txt-    # Create universal binary
llms.txt-    log "Creating universal binary..."
llms.txt-    mkdir -p "$PROJECT_ROOT/target/release"
llms.txt:    lipo -create -output "$PROJECT_ROOT/target/release/vexy_json" \
llms.txt:        "$PROJECT_ROOT/target/x86_64-apple-darwin/release/vexy_json" \
llms.txt:        "$PROJECT_ROOT/target/aarch64-apple-darwin/release/vexy_json"
llms.txt-    
llms.txt-    # Verify the universal binary
llms.txt:    if lipo -info "$PROJECT_ROOT/target/release/vexy_json" | grep -q "x86_64 arm64"; then
llms.txt-        success "Universal binary created successfully"
llms.txt-    else
llms.txt-        error "Failed to create universal binary"
--
llms.txt-    mkdir -p "$pkg_root/usr/local/bin"
llms.txt-    
llms.txt-    # Copy the universal binary
llms.txt:    cp "$PROJECT_ROOT/target/release/vexy_json" "$pkg_root/usr/local/bin/"
llms.txt:    chmod +x "$pkg_root/usr/local/bin/vexy_json"
llms.txt-    
llms.txt-    # Create scripts directory for pre/post install scripts
llms.txt-    mkdir -p "$BUILD_DIR/scripts"
--
llms.txt-done
llms.txt-
llms.txt-# Verify installation
llms.txt:if command -v vexy_json &> /dev/null; then
llms.txt-    echo "Vexy JSON installed successfully!"
llms.txt:    echo "Version: $(vexy_json --version 2>/dev/null || echo 'Unknown')"
llms.txt:    echo "You may need to restart your terminal or run 'source ~/.bashrc' (or similar) to use vexy_json."
llms.txt-else
llms.txt:    echo "Installation completed, but vexy_json may not be in your PATH."
llms.txt-    echo "Try restarting your terminal or adding /usr/local/bin to your PATH."
llms.txt-fi
llms.txt-
--
llms.txt-    cat > "$dmg_temp_dir/README.txt" << EOF
llms.txt-VEXY_JSON v$VERSION - High-Performance JSON Parser
llms.txt-
llms.txt:This installer will install the vexy_json command-line tool to /usr/local/bin.
llms.txt-
llms.txt-Installation Instructions:
llms.txt:1. Double-click on vexy_json.pkg to run the installer
llms.txt-2. Follow the installation prompts
llms.txt-3. Restart your terminal or run 'source ~/.bashrc' to update your PATH
llms.txt-
llms.txt:After installation, you can use vexy_json from the command line:
llms.txt:  echo '{"key": "value"}' | vexy_json
llms.txt:  vexy_json --help
llms.txt-
llms.txt-Features:
llms.txt-• SIMD-accelerated parsing (2-3x faster)
--
llms.txt-• Enhanced error recovery with suggestions
llms.txt-
llms.txt-For more information:
llms.txt:  Website: https://github.com/twardoch/vexy_json
llms.txt:  Documentation: https://twardoch.github.io/vexy_json/
llms.txt-
llms.txt-License: MIT OR Apache-2.0
llms.txt-EOF
--
llms.txt-        log "DMG size: $dmg_size"
llms.txt-        
llms.txt-        # Verify DMG can be mounted
llms.txt:        if hdiutil attach "$final_dmg" -readonly -nobrowse -mountpoint "/tmp/vexy_json-verify-$$"; then
llms.txt-            log "DMG verification: mountable ✓"
llms.txt:            hdiutil detach "/tmp/vexy_json-verify-$$" || true
llms.txt-        else
llms.txt-            warning "DMG verification failed - may not be mountable"
llms.txt-        fi
--
llms.txt-    log "Creating ZIP alternative..."
llms.txt-    
llms.txt-    local zip_dir="$BUILD_DIR/zip-package"
llms.txt:    local zip_file="$PROJECT_ROOT/vexy_json-$VERSION-macos.zip"
llms.txt-    
llms.txt-    mkdir -p "$zip_dir"
llms.txt-    
llms.txt-    # Copy binary
llms.txt:    cp "$PROJECT_ROOT/target/release/vexy_json" "$zip_dir/"
llms.txt-    
llms.txt-    # Create installation script
llms.txt-    cat > "$zip_dir/install.sh" << 'EOF'
--
llms.txt-# Check if we have write permissions
llms.txt-if [[ ! -w "/usr/local/bin" ]]; then
llms.txt-    echo "Note: You may be prompted for your password to install to /usr/local/bin"
llms.txt:    sudo cp vexy_json /usr/local/bin/
llms.txt:    sudo chmod +x /usr/local/bin/vexy_json
llms.txt-else
llms.txt:    cp vexy_json /usr/local/bin/
llms.txt:    chmod +x /usr/local/bin/vexy_json
llms.txt-fi
llms.txt-
llms.txt-echo "Vexy JSON installed successfully!"
llms.txt:echo "Try: vexy_json --help"
llms.txt-EOF
llms.txt-    
llms.txt-    chmod +x "$zip_dir/install.sh"
--
llms.txt-    cat > "$zip_dir/README.txt" << EOF
llms.txt-VEXY_JSON v$VERSION - Simple ZIP Installation
llms.txt-
llms.txt:This is a simple ZIP package containing the vexy_json binary.
llms.txt-
llms.txt-Installation:
llms.txt-1. Run: ./install.sh
llms.txt-   OR
llms.txt:2. Manually copy 'vexy_json' to a directory in your PATH
llms.txt-
llms.txt-Usage:
llms.txt:  echo '{"key": "value"}' | vexy_json
llms.txt:  vexy_json --help
llms.txt-
llms.txt-For the full installer experience, download the .dmg file instead.
llms.txt-EOF
--
llms.txt-    log "Verifying installation components..."
llms.txt-    
llms.txt-    # Check if binary works
llms.txt:    if "$PROJECT_ROOT/target/release/vexy_json" --version &> /dev/null; then
llms.txt-        success "Binary verification: working ✓"
llms.txt-    else
llms.txt-        error "Binary verification failed"
--
llms.txt-    fi
llms.txt-    
llms.txt-    # Check package contents
llms.txt:    if pkgutil --payload-files "$BUILD_DIR/$APP_NAME.pkg" | grep -q "usr/local/bin/vexy_json"; then
llms.txt-        success "Package verification: contains binary ✓"
llms.txt-    else
llms.txt-        error "Package verification failed"
--
llms.txt-    echo
llms.txt-    echo -e "${BLUE}Generated files:${NC}"
llms.txt-    echo "  📦 DMG Installer: $DMG_NAME"
llms.txt:    if [[ -f "$PROJECT_ROOT/vexy_json-$VERSION-macos.zip" ]]; then
llms.txt:        echo "  📁 ZIP Package: vexy_json-$VERSION-macos.zip"
llms.txt-    fi
llms.txt-    echo "  🔧 PKG Installer: $BUILD_DIR/$APP_NAME.pkg"
llms.txt:    echo "  🔨 Universal Binary: $PROJECT_ROOT/target/release/vexy_json"
llms.txt-    echo
llms.txt-    
llms.txt-    echo -e "${BLUE}Installation instructions for users:${NC}"
llms.txt-    echo "  1. Download and open $DMG_NAME"
llms.txt:    echo "  2. Double-click vexy_json.pkg to install"
llms.txt-    echo "  3. Follow the installer prompts"
llms.txt-    echo "  4. Restart terminal or run 'source ~/.bashrc'"
llms.txt-    echo
llms.txt-    
llms.txt-    echo -e "${BLUE}Binary details:${NC}"
llms.txt:    lipo -info "$PROJECT_ROOT/target/release/vexy_json" | sed 's/^/  /'
llms.txt-    echo
llms.txt-    
llms.txt-    echo -e "${BLUE}Next steps:${NC}"
--
llms.txt-<document_content>
llms.txt-#!/bin/bash
llms.txt-# this_file: scripts/package-macos.sh
llms.txt:# Package vexy_json for macOS as a .pkg inside a .dmg
llms.txt-
llms.txt-set -e
llms.txt-
llms.txt-# Configuration
llms.txt:BINARY_NAME="vexy_json"
llms.txt-VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
llms.txt:BUNDLE_ID="com.twardoch.vexy_json"
llms.txt-INSTALL_LOCATION="/usr/local/bin"
llms.txt-BUILD_DIR="target/macos-package"
llms.txt-PKG_NAME="${BINARY_NAME}-${VERSION}.pkg"
llms.txt-DMG_NAME="${BINARY_NAME}-${VERSION}-macos.dmg"
llms.txt-
llms.txt:echo "Building vexy_json v${VERSION} for macOS..."
llms.txt-
llms.txt-# Clean and create build directory
llms.txt-rm -rf "${BUILD_DIR}"
--
llms.txt-# Create postinstall script to set permissions
llms.txt-cat > "${BUILD_DIR}/scripts/postinstall" << 'EOF'
llms.txt-#!/bin/bash
llms.txt:chmod 755 /usr/local/bin/vexy_json
llms.txt-exit 0
llms.txt-EOF
llms.txt-chmod +x "${BUILD_DIR}/scripts/postinstall"
--
llms.txt-cat > "${BUILD_DIR}/distribution.xml" << EOF
llms.txt-<?xml version="1.0" encoding="UTF-8"?>
llms.txt-<installer-gui-script minSpecVersion="1">
llms.txt:    <title>vexy_json ${VERSION}</title>
llms.txt-    <organization>com.twardoch</organization>
llms.txt-    <domains enable_anywhere="true"/>
llms.txt-    <installation-check script="pm_install_check();"/>
--
llms.txt-    function pm_install_check() {
llms.txt-        if(system.compareVersions(system.version.ProductVersion,'10.10') &lt; 0) {
llms.txt-            my.result.title = 'Failure';
llms.txt:            my.result.message = 'You need at least macOS 10.10 to install vexy_json.';
llms.txt-            my.result.type = 'Fatal';
llms.txt-            return false;
llms.txt-        }
--
llms.txt-
llms.txt-# Create README for DMG
llms.txt-cat > "${BUILD_DIR}/dmg/README.txt" << EOF
llms.txt:vexy_json ${VERSION} for macOS
llms.txt-========================
llms.txt-
llms.txt-A forgiving JSON parser - Rust port of jsonic
llms.txt-
llms.txt-Installation:
llms.txt-1. Double-click on ${PKG_NAME} to install
llms.txt:2. The 'vexy_json' command will be installed to /usr/local/bin
llms.txt-3. You may need to restart your terminal after installation
llms.txt-
llms.txt-Usage:
llms.txt:  echo '{"foo": "bar",}' | vexy_json
llms.txt-
llms.txt-For more information, visit:
llms.txt:https://github.com/twardoch/vexy_json
llms.txt-
llms.txt-EOF
llms.txt-
llms.txt-# Create the DMG
llms.txt-echo "Creating DMG..."
llms.txt:hdiutil create -volname "vexy_json ${VERSION}" \
llms.txt-    -srcfolder "${BUILD_DIR}/dmg" \
llms.txt-    -ov -format UDZO \
llms.txt-    "${DMG_NAME}"
--
llms.txt-
llms.txt-echo "✅ Successfully created ${DMG_NAME}"
llms.txt-echo "   Package contains ${PKG_NAME} installer"
llms.txt:echo "   Will install vexy_json to ${INSTALL_LOCATION}"
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/scripts/performance-monitor.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-class VexyJsonPerformanceMonitor {
--
llms.txt-    log_info "GitHub Actions release workflow triggered!"
llms.txt-    echo
llms.txt-    echo "You can monitor the release progress at:"
llms.txt:    echo "https://github.com/twardoch/vexy_json/actions"
llms.txt-    echo
llms.txt-    echo "Or watch it here:"
llms.txt-    
--
llms.txt-    RUN_ID=$(gh run list --workflow=release.yml --limit 1 --json databaseId --jq '.[0].databaseId')
llms.txt-    
llms.txt-    if [ -n "$RUN_ID" ]; then
llms.txt:        echo "Workflow run: https://github.com/twardoch/vexy_json/actions/runs/$RUN_ID"
llms.txt-        echo
llms.txt-        echo "Watching workflow progress..."
llms.txt-        gh run watch "$RUN_ID"
--
llms.txt-    run_cmd "mkdir -p '$BUILD_DIR'" "Create build directory"
llms.txt-    
llms.txt-    # Build release binary
llms.txt:    run_cmd "cargo build --release --bin vexy_json" "Build release CLI binary"
llms.txt-    
llms.txt-    # Build library
llms.txt-    run_cmd "cargo build --release --lib" "Build release library"
--
llms.txt-    
llms.txt-    # Copy artifacts
llms.txt-    if [ "$DRY_RUN" = false ]; then
llms.txt:        if [[ -f "target/release/vexy_json" ]]; then
llms.txt:            cp "target/release/vexy_json" "$BUILD_DIR/vexy_json-$VERSION-$(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]')"
llms.txt-        else
llms.txt:            warning "Release binary not found at target/release/vexy_json"
llms.txt-        fi
llms.txt-    fi
llms.txt-    
--
llms.txt-    
llms.txt-    log "Building macOS installer..."
llms.txt-    
llms.txt:    local app_name="vexy_json"
llms.txt-    local installer_dir="$BUILD_DIR/macos-installer"
llms.txt:    local dmg_name="vexy_json-$VERSION-macos.dmg"
llms.txt-    
llms.txt-    run_cmd "mkdir -p '$installer_dir/pkg-root/usr/local/bin'" "Create installer structure"
llms.txt-    
llms.txt-    # Copy binary
llms.txt-    if [ "$DRY_RUN" = false ]; then
llms.txt:        cp "target/release/vexy_json" "$installer_dir/pkg-root/usr/local/bin/"
llms.txt-    fi
llms.txt-    
llms.txt-    # Create package
llms.txt:    run_cmd "pkgbuild --root '$installer_dir/pkg-root' --identifier 'com.twardoch.vexy_json' --version '$VERSION' --install-location '/' '$installer_dir/$app_name.pkg'" "Create pkg installer"
llms.txt-    
llms.txt-    # Create DMG
llms.txt-    local dmg_temp_dir="$installer_dir/dmg-temp"
--
llms.txt-        cat > "$dmg_temp_dir/README.txt" << EOF
llms.txt-VEXY_JSON v$VERSION
llms.txt-
llms.txt:This package will install the vexy_json command-line tool to /usr/local/bin.
llms.txt-
llms.txt:After installation, you can use vexy_json from the command line:
llms.txt:  echo '{"key": "value"}' | vexy_json
llms.txt-
llms.txt:For more information, visit: https://github.com/twardoch/vexy_json
llms.txt-EOF
llms.txt-    fi
llms.txt-    
--
llms.txt-    
llms.txt-    # Build static binary for Linux
llms.txt-    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
llms.txt:        run_cmd "cargo build --release --target x86_64-unknown-linux-musl --bin vexy_json" "Build static Linux binary"
llms.txt-        
llms.txt-        if [ "$DRY_RUN" = false ]; then
llms.txt:            cp "target/x86_64-unknown-linux-musl/release/vexy_json" "$BUILD_DIR/vexy_json-$VERSION-x86_64-linux-musl"
llms.txt-        fi
llms.txt-    else
llms.txt-        warning "Skipping Linux builds (not on Linux)"
--
llms.txt-create_release_archive() {
llms.txt-    log "Creating release archives..."
llms.txt-    
llms.txt:    local archive_dir="$BUILD_DIR/vexy_json-$VERSION"
llms.txt-    run_cmd "mkdir -p '$archive_dir'" "Create archive directory"
llms.txt-    
llms.txt-    if [ "$DRY_RUN" = false ]; then
--
llms.txt-        done
llms.txt-        
llms.txt-        # Copy built artifacts
llms.txt:        if [[ -f "target/release/vexy_json" ]]; then
llms.txt:            cp "target/release/vexy_json" "$archive_dir/" || warning "Failed to copy binary"
llms.txt-        else
llms.txt-            warning "No release binary found to include in archive"
llms.txt-        fi
llms.txt-        
llms.txt-        # Create source archive
llms.txt:        git archive --format=tar.gz --prefix="vexy_json-$VERSION-src/" HEAD > "$BUILD_DIR/vexy_json-$VERSION-src.tar.gz" || {
llms.txt-            warning "Failed to create source archive"
llms.txt-        }
llms.txt-        
llms.txt-        # Create binary archive if we have files
llms.txt-        if [[ -d "$archive_dir" ]] && [[ -n $(ls -A "$archive_dir") ]]; then
llms.txt-            cd "$BUILD_DIR"
llms.txt:            tar -czf "vexy_json-$VERSION-$(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]').tar.gz" "vexy_json-$VERSION" || {
llms.txt-                warning "Failed to create binary archive"
llms.txt-            }
llms.txt-            cd "$PROJECT_ROOT"
--
llms.txt-    
llms.txt-    if ! command -v gh &> /dev/null; then
llms.txt-        warning "GitHub CLI not found, skipping automated release creation"
llms.txt:        info "Manually create release at: https://github.com/twardoch/vexy_json/releases/new?tag=v$VERSION"
llms.txt-        return 0
llms.txt-    fi
llms.txt-    
--
llms.txt-## 📦 Installation
llms.txt-
llms.txt-```bash
llms.txt:cargo install vexy_json --version 2.0.0
llms.txt-```
llms.txt-
llms.txt-Or download pre-built binaries from the assets below.
llms.txt-
llms.txt----
llms.txt-
llms.txt:**Full Changelog**: https://github.com/twardoch/vexy_json/compare/v1.5.27...v2.0.0
llms.txt-EOF
llms.txt-    fi
llms.txt-    
llms.txt-    # Collect assets
llms.txt-    local assets=()
llms.txt:    if [[ -f "$BUILD_DIR/vexy_json-$VERSION-macos.dmg" ]]; then
llms.txt:        assets+=("$BUILD_DIR/vexy_json-$VERSION-macos.dmg")
llms.txt-    fi
llms.txt-    
llms.txt-    # Find all tar.gz files
--
llms.txt-    
llms.txt-    warning "Crates.io publishing requires manual intervention"
llms.txt-    info "Run the following commands to publish:"
llms.txt:    info "  cargo publish -p vexy_json-test-utils"
llms.txt:    info "  cargo publish -p vexy_json-core"
llms.txt:    info "  cargo publish -p vexy_json-serde"
llms.txt:    info "  cargo publish -p vexy_json-cli"
llms.txt:    info "  cargo publish -p vexy_json-wasm"
llms.txt:    info "  cargo publish -p vexy_json-c-api"
llms.txt:    info "  cargo publish -p vexy_json"
llms.txt-    
llms.txt-    if [ "$DRY_RUN" = false ]; then
llms.txt-        read -p "Publish to crates.io now? (y/N): " -n 1 -r
llms.txt-        echo
llms.txt-        if [[ $REPLY =~ ^[Yy]$ ]]; then
llms.txt-            # Publish in dependency order
llms.txt:            run_cmd "cargo publish -p vexy_json-test-utils" "Publish vexy_json-test-utils"
llms.txt-            sleep 10  # Wait for crates.io to process
llms.txt:            run_cmd "cargo publish -p vexy_json-core" "Publish vexy_json-core"
llms.txt-            sleep 10
llms.txt:            run_cmd "cargo publish -p vexy_json-serde" "Publish vexy_json-serde"
llms.txt-            sleep 10
llms.txt:            run_cmd "cargo publish -p vexy_json-cli" "Publish vexy_json-cli"
llms.txt-            sleep 10
llms.txt:            run_cmd "cargo publish -p vexy_json-wasm" "Publish vexy_json-wasm"
llms.txt-            sleep 10
llms.txt:            run_cmd "cargo publish -p vexy_json-c-api" "Publish vexy_json-c-api"
llms.txt-            sleep 10
llms.txt:            run_cmd "cargo publish -p vexy_json" "Publish main vexy_json crate"
llms.txt-            
llms.txt-            success "All crates published to crates.io"
llms.txt-        fi
--
llms.txt-    echo -e "${BLUE}Release artifacts created in: $BUILD_DIR${NC}"
llms.txt-    echo -e "${BLUE}Git tag created and pushed: v$VERSION${NC}"
llms.txt-    echo -e "${BLUE}Next steps:${NC}"
llms.txt:    echo "  1. Verify GitHub release: https://github.com/twardoch/vexy_json/releases"
llms.txt-    echo "  2. Update documentation websites"
llms.txt-    echo "  3. Announce the release"
llms.txt-    echo
--
llms.txt-
llms.txt-# Update workspace dependencies
llms.txt-echo "Updating workspace dependencies..."
llms.txt:update_file "Cargo.toml" 'vexy_json-core = { version = ".*"' "s/vexy_json-core = { version = \".*\"/vexy_json-core = { version = \"$VERSION\"/"
llms.txt:update_file "Cargo.toml" 'vexy_json = { version = ".*"' "s/vexy_json = { version = \".*\"/vexy_json = { version = \"$VERSION\"/"
llms.txt-
llms.txt-# Update Python bindings
llms.txt-echo "Updating Python bindings..."
--
llms.txt-
llms.txt-# Update Homebrew formula (only the version, not the URL)
llms.txt-echo "Updating Homebrew formula..."
llms.txt:if [ -f "Formula/vexy_json.rb" ]; then
llms.txt-    # Only update if this looks like a release version (not -dev)
llms.txt-    if [[ ! "$VERSION" =~ -dev$ ]]; then
llms.txt:        update_file "Formula/vexy_json.rb" 'version ".*"' "s/version \".*\"/version \"$VERSION\"/"
llms.txt-        # Note: The URL in the formula should be updated during release
llms.txt-    else
llms.txt-        echo -e "${YELLOW}⚠${NC} Skipping Homebrew formula update for dev version"
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/scripts/verify_features.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-function runTest((testCase))
--
llms.txt-async function runAllTests(())
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/debug_comment_line_endings.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/debug_number.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_dot_numbers.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_full_parse.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_implicit.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_parse.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_point_zero.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_positive_numbers.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_rust_parse.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_strict_comment.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_trailing_decimal.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/trace_parse.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/lib.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/advanced_features.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod complex_structures;
--
llms.txt-mod unicode_tests;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/basic_tests.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comma_handling.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comment_handling.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/compat_tests.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comprehensive_tests.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod basic_parsing;
--
llms.txt-mod error_handling;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/error_handling.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/feature_tests.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/forgiving_features.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/lexer_tests.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/lib_integration.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/newline_as_comma.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/number_formats.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/property_tests.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct ArbitraryJsonValue {
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/real_world_scenarios.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod configuration_files;
--
llms.txt-mod performance_scenarios;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/string_handling.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/supported_features.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-    && rm -rf /var/lib/apt/lists/*
llms.txt-
llms.txt-# Copy the project source
llms.txt:COPY . $SRC/vexy_json
llms.txt-
llms.txt-# Set the working directory
llms.txt:WORKDIR $SRC/vexy_json
llms.txt-
llms.txt-# Copy the build script
llms.txt-COPY oss-fuzz/build.sh $SRC/build.sh
--
llms.txt-To set up OSS-Fuzz integration:
llms.txt-
llms.txt-1. Fork the [OSS-Fuzz repository](https://github.com/google/oss-fuzz)
llms.txt:2. Create a new directory under `projects/vexy_json/`
llms.txt:3. Copy the files from this directory to `projects/vexy_json/`
llms.txt-4. Submit a pull request to the OSS-Fuzz repository
llms.txt-
llms.txt-## Testing Locally
--
llms.txt-cd oss-fuzz
llms.txt-
llms.txt-# Copy project files
llms.txt:cp -r /path/to/vexy_json/oss-fuzz projects/vexy_json/
llms.txt-
llms.txt-# Build the project
llms.txt:python infra/helper.py build_image vexy_json
llms.txt:python infra/helper.py build_fuzzers vexy_json
llms.txt-
llms.txt-# Run fuzzers
llms.txt:python infra/helper.py run_fuzzer vexy_json json_structure
llms.txt-```
llms.txt-
llms.txt-## Fuzzing Targets
--
llms.txt-## Coverage
llms.txt-
llms.txt-Coverage reports are automatically generated and can be viewed at:
llms.txt:https://storage.googleapis.com/oss-fuzz-coverage/vexy_json/latest/index.html
llms.txt-
llms.txt-## Bug Reports
llms.txt-
--
llms.txt-source $HOME/.cargo/env
llms.txt-
llms.txt-# Navigate to the project directory
llms.txt:cd $SRC/vexy_json
llms.txt-
llms.txt-# Build the project
llms.txt-cargo build --release
--
llms.txt-<document_content>
llms.txt-# this_file: oss-fuzz/project.yaml
llms.txt-
llms.txt:homepage: "https://github.com/twardoch/pub/vexy_json"
llms.txt-language: rust
llms.txt-primary_contact: "adam@twardoch.com"
llms.txt-auto_ccs:
--
llms.txt-coverage_extra_args: "--target-dir=/tmp/coverage"
llms.txt-
llms.txt-# Additional configuration
llms.txt:main_repo: "https://github.com/twardoch/pub/vexy_json"
llms.txt-file_github_issue: true
llms.txt-</document_content>
llms.txt-</document>
--
llms.txt-#!/bin/bash
llms.txt-# this_file: build-wasm.sh
llms.txt-
llms.txt:# WebAssembly Build Script for vexy_json
llms.txt-# Automated build script using wasm-pack with configurable dev/release modes
llms.txt-# Outputs to docs/pkg/ directory for web integration
llms.txt-
--
llms.txt-BLUE='\033[0;34m'
llms.txt-NC='\033[0m' # No Color
llms.txt-
llms.txt:echo -e "${BLUE}🔧 vexy_json WebAssembly Build Script${NC}"
llms.txt-echo "=================================================="
llms.txt-echo -e "Build mode: ${YELLOW}$BUILD_MODE${NC}"
llms.txt-echo -e "Output directory: ${YELLOW}$OUTPUT_DIR${NC}"
--
llms.txt-fi
llms.txt-
llms.txt-# Additional optimization with wasm-opt if available
llms.txt:if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" ] && command -v wasm-opt &>/dev/null; then
llms.txt-    echo -e "${BLUE}🔧 Optimizing WASM bundle with wasm-opt...${NC}"
llms.txt:    ORIGINAL_SIZE=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt:    wasm-opt -Oz "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" -o "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt"
llms.txt:    if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt" ]; then
llms.txt:        mv "$OUTPUT_DIR/vexy_json_wasm_bg.wasm.opt" "$OUTPUT_DIR/vexy_json_wasm_bg.wasm"
llms.txt:        OPTIMIZED_SIZE=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt-        REDUCTION=$((ORIGINAL_SIZE - OPTIMIZED_SIZE))
llms.txt-        echo -e "${GREEN}✅ Additional optimization saved ${YELLOW}$REDUCTION bytes${NC}"
llms.txt-    fi
llms.txt-fi
llms.txt-
llms.txt-# Report bundle size
llms.txt:if [ -f "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" ]; then
llms.txt:    WASM_SIZE=$(du -h "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" | cut -f1)
llms.txt-    echo -e "${GREEN}📦 Final WASM bundle size: ${YELLOW}$WASM_SIZE${NC}"
llms.txt-
llms.txt-    # Size warnings
llms.txt:    WASM_SIZE_BYTES=$(stat -f%z "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null || stat -c%s "$OUTPUT_DIR/vexy_json_wasm_bg.wasm" 2>/dev/null)
llms.txt-    if [ "$WASM_SIZE_BYTES" -gt 1048576 ]; then # 1MB
llms.txt-        echo -e "${YELLOW}⚠️  Warning: WASM bundle is larger than 1MB${NC}"
llms.txt-        echo "   Consider optimizing for web deployment"
--
llms.txt-echo
llms.txt-echo -e "${BLUE}Example usage in HTML:${NC}"
llms.txt-echo "  <script type=\"module\">"
llms.txt:echo "    import init, { parse_json } from './pkg/vexy_json.js';"
llms.txt-echo "    await init();"
llms.txt-echo "    const result = parse_json('{\"test\": true}');"
llms.txt-echo "  </script>"
--
llms.txt-# Exit immediately if a command exits with a non-zero status.
llms.txt-set -e
llms.txt-cd "$(dirname "$0")/.."
llms.txt:echo "Starting build process for vexy_json..."
llms.txt-
llms.txt-{
llms.txt:    echo "Building the vexy_json project..."
llms.txt-    # Build the project in release mode for optimized binaries
llms.txt-    /Users/adam/.cargo/bin/cargo build --release
llms.txt-
--
llms.txt-
llms.txt-    echo "Build and verification complete."
llms.txt-    echo ""
llms.txt:    echo "Library built at: ./target/release/libvexy_json.rlib"
llms.txt:    echo "Documentation at: ./target/doc/vexy_json/index.html"
llms.txt-    echo ""
llms.txt:    echo "To use vexy_json in your project, add to Cargo.toml:"
llms.txt:    echo '  vexy_json = { path = "'$(pwd)'" }'
llms.txt-    echo ""
llms.txt-    echo "Example usage:"
llms.txt:    echo "  use vexy_json::parse;"
llms.txt-    echo "  let value = parse(\"'hello', 'world'\").unwrap();"
llms.txt-
llms.txt-} >build.log.txt 2>&1
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/scripts/cross-browser-test.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-async function runBrowserTests((browserConfig, deviceConfig = null))
--
llms.txt-    local output_dir="$PROJECT_ROOT/target/$target/release"
llms.txt-    mkdir -p "$output_dir"
llms.txt-    
llms.txt:    if $build_cmd build --release --bin vexy_json --target "$target"; then
llms.txt-        # Copy binary to build directory
llms.txt:        local binary_name="vexy_json"
llms.txt-        if [[ "$target" == *"windows"* ]]; then
llms.txt:            binary_name="vexy_json.exe"
llms.txt-        fi
llms.txt-        
llms.txt:        local output_name="vexy_json-$VERSION-$target"
llms.txt-        if [[ "$target" == *"windows"* ]]; then
llms.txt-            output_name="$output_name.exe"
llms.txt-        fi
--
llms.txt-    
llms.txt-    # Create archives
llms.txt-    cd "$BUILD_DIR"
llms.txt:    tar -czf "vexy_json-$VERSION-wasm-web.tar.gz" wasm-web/
llms.txt:    tar -czf "vexy_json-$VERSION-wasm-nodejs.tar.gz" wasm-nodejs/
llms.txt-    cd "$PROJECT_ROOT"
llms.txt-    
llms.txt-    return 0
--
llms.txt-create_universal_macos() {
llms.txt-    log "Creating universal macOS binary..."
llms.txt-    
llms.txt:    local intel_binary="$BUILD_DIR/vexy_json-$VERSION-x86_64-apple-darwin"
llms.txt:    local arm_binary="$BUILD_DIR/vexy_json-$VERSION-aarch64-apple-darwin"
llms.txt:    local universal_binary="$BUILD_DIR/vexy_json-$VERSION-universal-apple-darwin"
llms.txt-    
llms.txt-    if [[ -f "$intel_binary" && -f "$arm_binary" ]]; then
llms.txt-        if command -v lipo &> /dev/null; then
--
llms.txt-    cd "$BUILD_DIR"
llms.txt-    
llms.txt-    # Create individual archives for each binary
llms.txt:    for file in vexy_json-$VERSION-*; do
llms.txt-        if [[ -f "$file" && "$file" != *.tar.gz && "$file" != *.zip ]]; then
llms.txt-            local archive_name="${file}.tar.gz"
llms.txt-            tar -czf "$archive_name" "$file"
--
llms.txt-    done
llms.txt-    
llms.txt-    # Create a comprehensive archive with all binaries
llms.txt:    tar -czf "vexy_json-$VERSION-all-platforms.tar.gz" vexy_json-$VERSION-*
llms.txt:    success "Created comprehensive archive: vexy_json-$VERSION-all-platforms.tar.gz"
llms.txt-    
llms.txt-    cd "$PROJECT_ROOT"
llms.txt-}
--
llms.txt-    
llms.txt-    # Generate SHA256 checksums
llms.txt-    if command -v sha256sum &> /dev/null; then
llms.txt:        sha256sum vexy_json-$VERSION-* > checksums.sha256
llms.txt-    elif command -v shasum &> /dev/null; then
llms.txt:        shasum -a 256 vexy_json-$VERSION-* > checksums.sha256
llms.txt-    else
llms.txt-        warning "No SHA256 utility found, skipping checksum generation"
llms.txt-        cd "$PROJECT_ROOT"
--
llms.txt-    
llms.txt-    if [[ -d "$BUILD_DIR" ]]; then
llms.txt-        echo -e "${BLUE}Generated files:${NC}"
llms.txt:        ls -la "$BUILD_DIR" | grep -E "(vexy_json-|checksums)" | while read -r line; do
llms.txt-            echo "  $line"
llms.txt-        done
llms.txt-    fi
--
llms.txt-PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
llms.txt-VERSION="${VERSION:-$(grep '^version' "$PROJECT_ROOT/Cargo.toml" | head -1 | cut -d'"' -f2)}"
llms.txt-BUILD_DIR="$PROJECT_ROOT/target/macos-installer"
llms.txt:APP_NAME="vexy_json"
llms.txt:BUNDLE_ID="com.twardoch.vexy_json"
llms.txt:DMG_NAME="vexy_json-$VERSION-macos.dmg"
llms.txt-
llms.txt-# Utility functions
llms.txt-log() {
--
llms.txt-    
llms.txt-    # Build for Intel
llms.txt-    log "Building for Intel (x86_64)..."
llms.txt:    cargo build --release --bin vexy_json --target x86_64-apple-darwin
llms.txt-    
llms.txt-    # Build for Apple Silicon
llms.txt-    log "Building for Apple Silicon (aarch64)..."
llms.txt:    cargo build --release --bin vexy_json --target aarch64-apple-darwin
llms.txt-    
llms.txt-    # Create universal binary
llms.txt-    log "Creating universal binary..."
llms.txt-    mkdir -p "$PROJECT_ROOT/target/release"
llms.txt:    lipo -create -output "$PROJECT_ROOT/target/release/vexy_json" \
llms.txt:        "$PROJECT_ROOT/target/x86_64-apple-darwin/release/vexy_json" \
llms.txt:        "$PROJECT_ROOT/target/aarch64-apple-darwin/release/vexy_json"
llms.txt-    
llms.txt-    # Verify the universal binary
llms.txt:    if lipo -info "$PROJECT_ROOT/target/release/vexy_json" | grep -q "x86_64 arm64"; then
llms.txt-        success "Universal binary created successfully"
llms.txt-    else
llms.txt-        error "Failed to create universal binary"
--
llms.txt-    mkdir -p "$pkg_root/usr/local/bin"
llms.txt-    
llms.txt-    # Copy the universal binary
llms.txt:    cp "$PROJECT_ROOT/target/release/vexy_json" "$pkg_root/usr/local/bin/"
llms.txt:    chmod +x "$pkg_root/usr/local/bin/vexy_json"
llms.txt-    
llms.txt-    # Create scripts directory for pre/post install scripts
llms.txt-    mkdir -p "$BUILD_DIR/scripts"
--
llms.txt-done
llms.txt-
llms.txt-# Verify installation
llms.txt:if command -v vexy_json &> /dev/null; then
llms.txt-    echo "Vexy JSON installed successfully!"
llms.txt:    echo "Version: $(vexy_json --version 2>/dev/null || echo 'Unknown')"
llms.txt:    echo "You may need to restart your terminal or run 'source ~/.bashrc' (or similar) to use vexy_json."
llms.txt-else
llms.txt:    echo "Installation completed, but vexy_json may not be in your PATH."
llms.txt-    echo "Try restarting your terminal or adding /usr/local/bin to your PATH."
llms.txt-fi
llms.txt-
--
llms.txt-    cat > "$dmg_temp_dir/README.txt" << EOF
llms.txt-VEXY_JSON v$VERSION - High-Performance JSON Parser
llms.txt-
llms.txt:This installer will install the vexy_json command-line tool to /usr/local/bin.
llms.txt-
llms.txt-Installation Instructions:
llms.txt:1. Double-click on vexy_json.pkg to run the installer
llms.txt-2. Follow the installation prompts
llms.txt-3. Restart your terminal or run 'source ~/.bashrc' to update your PATH
llms.txt-
llms.txt:After installation, you can use vexy_json from the command line:
llms.txt:  echo '{"key": "value"}' | vexy_json
llms.txt:  vexy_json --help
llms.txt-
llms.txt-Features:
llms.txt-• SIMD-accelerated parsing (2-3x faster)
--
llms.txt-• Enhanced error recovery with suggestions
llms.txt-
llms.txt-For more information:
llms.txt:  Website: https://github.com/twardoch/vexy_json
llms.txt:  Documentation: https://twardoch.github.io/vexy_json/
llms.txt-
llms.txt-License: MIT OR Apache-2.0
llms.txt-EOF
--
llms.txt-        log "DMG size: $dmg_size"
llms.txt-        
llms.txt-        # Verify DMG can be mounted
llms.txt:        if hdiutil attach "$final_dmg" -readonly -nobrowse -mountpoint "/tmp/vexy_json-verify-$$"; then
llms.txt-            log "DMG verification: mountable ✓"
llms.txt:            hdiutil detach "/tmp/vexy_json-verify-$$" || true
llms.txt-        else
llms.txt-            warning "DMG verification failed - may not be mountable"
llms.txt-        fi
--
llms.txt-    log "Creating ZIP alternative..."
llms.txt-    
llms.txt-    local zip_dir="$BUILD_DIR/zip-package"
llms.txt:    local zip_file="$PROJECT_ROOT/vexy_json-$VERSION-macos.zip"
llms.txt-    
llms.txt-    mkdir -p "$zip_dir"
llms.txt-    
llms.txt-    # Copy binary
llms.txt:    cp "$PROJECT_ROOT/target/release/vexy_json" "$zip_dir/"
llms.txt-    
llms.txt-    # Create installation script
llms.txt-    cat > "$zip_dir/install.sh" << 'EOF'
--
llms.txt-# Check if we have write permissions
llms.txt-if [[ ! -w "/usr/local/bin" ]]; then
llms.txt-    echo "Note: You may be prompted for your password to install to /usr/local/bin"
llms.txt:    sudo cp vexy_json /usr/local/bin/
llms.txt:    sudo chmod +x /usr/local/bin/vexy_json
llms.txt-else
llms.txt:    cp vexy_json /usr/local/bin/
llms.txt:    chmod +x /usr/local/bin/vexy_json
llms.txt-fi
llms.txt-
llms.txt-echo "Vexy JSON installed successfully!"
llms.txt:echo "Try: vexy_json --help"
llms.txt-EOF
llms.txt-    
llms.txt-    chmod +x "$zip_dir/install.sh"
--
llms.txt-    cat > "$zip_dir/README.txt" << EOF
llms.txt-VEXY_JSON v$VERSION - Simple ZIP Installation
llms.txt-
llms.txt:This is a simple ZIP package containing the vexy_json binary.
llms.txt-
llms.txt-Installation:
llms.txt-1. Run: ./install.sh
llms.txt-   OR
llms.txt:2. Manually copy 'vexy_json' to a directory in your PATH
llms.txt-
llms.txt-Usage:
llms.txt:  echo '{"key": "value"}' | vexy_json
llms.txt:  vexy_json --help
llms.txt-
llms.txt-For the full installer experience, download the .dmg file instead.
llms.txt-EOF
--
llms.txt-    log "Verifying installation components..."
llms.txt-    
llms.txt-    # Check if binary works
llms.txt:    if "$PROJECT_ROOT/target/release/vexy_json" --version &> /dev/null; then
llms.txt-        success "Binary verification: working ✓"
llms.txt-    else
llms.txt-        error "Binary verification failed"
--
llms.txt-    fi
llms.txt-    
llms.txt-    # Check package contents
llms.txt:    if pkgutil --payload-files "$BUILD_DIR/$APP_NAME.pkg" | grep -q "usr/local/bin/vexy_json"; then
llms.txt-        success "Package verification: contains binary ✓"
llms.txt-    else
llms.txt-        error "Package verification failed"
--
llms.txt-    echo
llms.txt-    echo -e "${BLUE}Generated files:${NC}"
llms.txt-    echo "  📦 DMG Installer: $DMG_NAME"
llms.txt:    if [[ -f "$PROJECT_ROOT/vexy_json-$VERSION-macos.zip" ]]; then
llms.txt:        echo "  📁 ZIP Package: vexy_json-$VERSION-macos.zip"
llms.txt-    fi
llms.txt-    echo "  🔧 PKG Installer: $BUILD_DIR/$APP_NAME.pkg"
llms.txt:    echo "  🔨 Universal Binary: $PROJECT_ROOT/target/release/vexy_json"
llms.txt-    echo
llms.txt-    
llms.txt-    echo -e "${BLUE}Installation instructions for users:${NC}"
llms.txt-    echo "  1. Download and open $DMG_NAME"
llms.txt:    echo "  2. Double-click vexy_json.pkg to install"
llms.txt-    echo "  3. Follow the installer prompts"
llms.txt-    echo "  4. Restart terminal or run 'source ~/.bashrc'"
llms.txt-    echo
llms.txt-    
llms.txt-    echo -e "${BLUE}Binary details:${NC}"
llms.txt:    lipo -info "$PROJECT_ROOT/target/release/vexy_json" | sed 's/^/  /'
llms.txt-    echo
llms.txt-    
llms.txt-    echo -e "${BLUE}Next steps:${NC}"
--
llms.txt-<source>scripts/package-lock.json</source>
llms.txt-<document_content>
llms.txt-{
llms.txt:    "name": "vexy_json-testing-scripts",
llms.txt-    "version": "1.0.0",
llms.txt-    "lockfileVersion": 3,
llms.txt-    "requires": true,
--
llms.txt-<document_content>
llms.txt-#!/bin/bash
llms.txt-# this_file: scripts/package-macos.sh
llms.txt:# Package vexy_json for macOS as a .pkg inside a .dmg
llms.txt-
llms.txt-set -e
llms.txt-
llms.txt-# Configuration
llms.txt:BINARY_NAME="vexy_json"
llms.txt-VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
llms.txt:BUNDLE_ID="com.twardoch.vexy_json"
llms.txt-INSTALL_LOCATION="/usr/local/bin"
llms.txt-BUILD_DIR="target/macos-package"
llms.txt-PKG_NAME="${BINARY_NAME}-${VERSION}.pkg"
llms.txt-DMG_NAME="${BINARY_NAME}-${VERSION}-macos.dmg"
llms.txt-
llms.txt:echo "Building vexy_json v${VERSION} for macOS..."
llms.txt-
llms.txt-# Clean and create build directory
llms.txt-rm -rf "${BUILD_DIR}"
--
llms.txt-# Create postinstall script to set permissions
llms.txt-cat > "${BUILD_DIR}/scripts/postinstall" << 'EOF'
llms.txt-#!/bin/bash
llms.txt:chmod 755 /usr/local/bin/vexy_json
llms.txt-exit 0
llms.txt-EOF
llms.txt-chmod +x "${BUILD_DIR}/scripts/postinstall"
--
llms.txt-cat > "${BUILD_DIR}/distribution.xml" << EOF
llms.txt-<?xml version="1.0" encoding="UTF-8"?>
llms.txt-<installer-gui-script minSpecVersion="1">
llms.txt:    <title>vexy_json ${VERSION}</title>
llms.txt-    <organization>com.twardoch</organization>
llms.txt-    <domains enable_anywhere="true"/>
llms.txt-    <installation-check script="pm_install_check();"/>
--
llms.txt-    function pm_install_check() {
llms.txt-        if(system.compareVersions(system.version.ProductVersion,'10.10') &lt; 0) {
llms.txt-            my.result.title = 'Failure';
llms.txt:            my.result.message = 'You need at least macOS 10.10 to install vexy_json.';
llms.txt-            my.result.type = 'Fatal';
llms.txt-            return false;
llms.txt-        }
--
llms.txt-
llms.txt-# Create README for DMG
llms.txt-cat > "${BUILD_DIR}/dmg/README.txt" << EOF
llms.txt:vexy_json ${VERSION} for macOS
llms.txt-========================
llms.txt-
llms.txt-A forgiving JSON parser - Rust port of jsonic
llms.txt-
llms.txt-Installation:
llms.txt-1. Double-click on ${PKG_NAME} to install
llms.txt:2. The 'vexy_json' command will be installed to /usr/local/bin
llms.txt-3. You may need to restart your terminal after installation
llms.txt-
llms.txt-Usage:
llms.txt:  echo '{"foo": "bar",}' | vexy_json
llms.txt-
llms.txt-For more information, visit:
llms.txt:https://github.com/twardoch/vexy_json
llms.txt-
llms.txt-EOF
llms.txt-
llms.txt-# Create the DMG
llms.txt-echo "Creating DMG..."
llms.txt:hdiutil create -volname "vexy_json ${VERSION}" \
llms.txt-    -srcfolder "${BUILD_DIR}/dmg" \
llms.txt-    -ov -format UDZO \
llms.txt-    "${DMG_NAME}"
--
llms.txt-
llms.txt-echo "✅ Successfully created ${DMG_NAME}"
llms.txt-echo "   Package contains ${PKG_NAME} installer"
llms.txt:echo "   Will install vexy_json to ${INSTALL_LOCATION}"
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
--
llms.txt-<source>scripts/package.json</source>
llms.txt-<document_content>
llms.txt-{
llms.txt:    "name": "vexy_json-testing-scripts",
llms.txt-    "version": "1.0.0",
llms.txt:    "description": "Testing and monitoring scripts for vexy_json project",
llms.txt-    "main": "cross-browser-test.js",
llms.txt-... (file content truncated to first 5 lines)
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/scripts/performance-monitor.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-class VexyJsonPerformanceMonitor {
--
llms.txt-    log_info "GitHub Actions release workflow triggered!"
llms.txt-    echo
llms.txt-    echo "You can monitor the release progress at:"
llms.txt:    echo "https://github.com/twardoch/vexy_json/actions"
llms.txt-    echo
llms.txt-    echo "Or watch it here:"
llms.txt-    
--
llms.txt-    RUN_ID=$(gh run list --workflow=release.yml --limit 1 --json databaseId --jq '.[0].databaseId')
llms.txt-    
llms.txt-    if [ -n "$RUN_ID" ]; then
llms.txt:        echo "Workflow run: https://github.com/twardoch/vexy_json/actions/runs/$RUN_ID"
llms.txt-        echo
llms.txt-        echo "Watching workflow progress..."
llms.txt-        gh run watch "$RUN_ID"
--
llms.txt-    run_cmd "mkdir -p '$BUILD_DIR'" "Create build directory"
llms.txt-    
llms.txt-    # Build release binary
llms.txt:    run_cmd "cargo build --release --bin vexy_json" "Build release CLI binary"
llms.txt-    
llms.txt-    # Build library
llms.txt-    run_cmd "cargo build --release --lib" "Build release library"
--
llms.txt-    
llms.txt-    # Copy artifacts
llms.txt-    if [ "$DRY_RUN" = false ]; then
llms.txt:        if [[ -f "target/release/vexy_json" ]]; then
llms.txt:            cp "target/release/vexy_json" "$BUILD_DIR/vexy_json-$VERSION-$(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]')"
llms.txt-        else
llms.txt:            warning "Release binary not found at target/release/vexy_json"
llms.txt-        fi
llms.txt-    fi
llms.txt-    
--
llms.txt-    
llms.txt-    log "Building macOS installer..."
llms.txt-    
llms.txt:    local app_name="vexy_json"
llms.txt-    local installer_dir="$BUILD_DIR/macos-installer"
llms.txt:    local dmg_name="vexy_json-$VERSION-macos.dmg"
llms.txt-    
llms.txt-    run_cmd "mkdir -p '$installer_dir/pkg-root/usr/local/bin'" "Create installer structure"
llms.txt-    
llms.txt-    # Copy binary
llms.txt-    if [ "$DRY_RUN" = false ]; then
llms.txt:        cp "target/release/vexy_json" "$installer_dir/pkg-root/usr/local/bin/"
llms.txt-    fi
llms.txt-    
llms.txt-    # Create package
llms.txt:    run_cmd "pkgbuild --root '$installer_dir/pkg-root' --identifier 'com.twardoch.vexy_json' --version '$VERSION' --install-location '/' '$installer_dir/$app_name.pkg'" "Create pkg installer"
llms.txt-    
llms.txt-    # Create DMG
llms.txt-    local dmg_temp_dir="$installer_dir/dmg-temp"
--
llms.txt-        cat > "$dmg_temp_dir/README.txt" << EOF
llms.txt-VEXY_JSON v$VERSION
llms.txt-
llms.txt:This package will install the vexy_json command-line tool to /usr/local/bin.
llms.txt-
llms.txt:After installation, you can use vexy_json from the command line:
llms.txt:  echo '{"key": "value"}' | vexy_json
llms.txt-
llms.txt:For more information, visit: https://github.com/twardoch/vexy_json
llms.txt-EOF
llms.txt-    fi
llms.txt-    
--
llms.txt-    
llms.txt-    # Build static binary for Linux
llms.txt-    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
llms.txt:        run_cmd "cargo build --release --target x86_64-unknown-linux-musl --bin vexy_json" "Build static Linux binary"
llms.txt-        
llms.txt-        if [ "$DRY_RUN" = false ]; then
llms.txt:            cp "target/x86_64-unknown-linux-musl/release/vexy_json" "$BUILD_DIR/vexy_json-$VERSION-x86_64-linux-musl"
llms.txt-        fi
llms.txt-    else
llms.txt-        warning "Skipping Linux builds (not on Linux)"
--
llms.txt-create_release_archive() {
llms.txt-    log "Creating release archives..."
llms.txt-    
llms.txt:    local archive_dir="$BUILD_DIR/vexy_json-$VERSION"
llms.txt-    run_cmd "mkdir -p '$archive_dir'" "Create archive directory"
llms.txt-    
llms.txt-    if [ "$DRY_RUN" = false ]; then
--
llms.txt-        done
llms.txt-        
llms.txt-        # Copy built artifacts
llms.txt:        if [[ -f "target/release/vexy_json" ]]; then
llms.txt:            cp "target/release/vexy_json" "$archive_dir/" || warning "Failed to copy binary"
llms.txt-        else
llms.txt-            warning "No release binary found to include in archive"
llms.txt-        fi
llms.txt-        
llms.txt-        # Create source archive
llms.txt:        git archive --format=tar.gz --prefix="vexy_json-$VERSION-src/" HEAD > "$BUILD_DIR/vexy_json-$VERSION-src.tar.gz" || {
llms.txt-            warning "Failed to create source archive"
llms.txt-        }
llms.txt-        
llms.txt-        # Create binary archive if we have files
llms.txt-        if [[ -d "$archive_dir" ]] && [[ -n $(ls -A "$archive_dir") ]]; then
llms.txt-            cd "$BUILD_DIR"
llms.txt:            tar -czf "vexy_json-$VERSION-$(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]').tar.gz" "vexy_json-$VERSION" || {
llms.txt-                warning "Failed to create binary archive"
llms.txt-            }
llms.txt-            cd "$PROJECT_ROOT"
--
llms.txt-    
llms.txt-    if ! command -v gh &> /dev/null; then
llms.txt-        warning "GitHub CLI not found, skipping automated release creation"
llms.txt:        info "Manually create release at: https://github.com/twardoch/vexy_json/releases/new?tag=v$VERSION"
llms.txt-        return 0
llms.txt-    fi
llms.txt-    
--
llms.txt-## 📦 Installation
llms.txt-
llms.txt-```bash
llms.txt:cargo install vexy_json --version 2.0.0
llms.txt-```
llms.txt-
llms.txt-Or download pre-built binaries from the assets below.
llms.txt-
llms.txt----
llms.txt-
llms.txt:**Full Changelog**: https://github.com/twardoch/vexy_json/compare/v1.5.27...v2.0.0
llms.txt-EOF
llms.txt-    fi
llms.txt-    
llms.txt-    # Collect assets
llms.txt-    local assets=()
llms.txt:    if [[ -f "$BUILD_DIR/vexy_json-$VERSION-macos.dmg" ]]; then
llms.txt:        assets+=("$BUILD_DIR/vexy_json-$VERSION-macos.dmg")
llms.txt-    fi
llms.txt-    
llms.txt-    # Find all tar.gz files
--
llms.txt-    
llms.txt-    warning "Crates.io publishing requires manual intervention"
llms.txt-    info "Run the following commands to publish:"
llms.txt:    info "  cargo publish -p vexy_json-test-utils"
llms.txt:    info "  cargo publish -p vexy_json-core"
llms.txt:    info "  cargo publish -p vexy_json-serde"
llms.txt:    info "  cargo publish -p vexy_json-cli"
llms.txt:    info "  cargo publish -p vexy_json-wasm"
llms.txt:    info "  cargo publish -p vexy_json-c-api"
llms.txt:    info "  cargo publish -p vexy_json"
llms.txt-    
llms.txt-    if [ "$DRY_RUN" = false ]; then
llms.txt-        read -p "Publish to crates.io now? (y/N): " -n 1 -r
llms.txt-        echo
llms.txt-        if [[ $REPLY =~ ^[Yy]$ ]]; then
llms.txt-            # Publish in dependency order
llms.txt:            run_cmd "cargo publish -p vexy_json-test-utils" "Publish vexy_json-test-utils"
llms.txt-            sleep 10  # Wait for crates.io to process
llms.txt:            run_cmd "cargo publish -p vexy_json-core" "Publish vexy_json-core"
llms.txt-            sleep 10
llms.txt:            run_cmd "cargo publish -p vexy_json-serde" "Publish vexy_json-serde"
llms.txt-            sleep 10
llms.txt:            run_cmd "cargo publish -p vexy_json-cli" "Publish vexy_json-cli"
llms.txt-            sleep 10
llms.txt:            run_cmd "cargo publish -p vexy_json-wasm" "Publish vexy_json-wasm"
llms.txt-            sleep 10
llms.txt:            run_cmd "cargo publish -p vexy_json-c-api" "Publish vexy_json-c-api"
llms.txt-            sleep 10
llms.txt:            run_cmd "cargo publish -p vexy_json" "Publish main vexy_json crate"
llms.txt-            
llms.txt-            success "All crates published to crates.io"
llms.txt-        fi
--
llms.txt-    echo -e "${BLUE}Release artifacts created in: $BUILD_DIR${NC}"
llms.txt-    echo -e "${BLUE}Git tag created and pushed: v$VERSION${NC}"
llms.txt-    echo -e "${BLUE}Next steps:${NC}"
llms.txt:    echo "  1. Verify GitHub release: https://github.com/twardoch/vexy_json/releases"
llms.txt-    echo "  2. Update documentation websites"
llms.txt-    echo "  3. Announce the release"
llms.txt-    echo
--
llms.txt-
llms.txt-# Update workspace dependencies
llms.txt-echo "Updating workspace dependencies..."
llms.txt:update_file "Cargo.toml" 'vexy_json-core = { version = ".*"' "s/vexy_json-core = { version = \".*\"/vexy_json-core = { version = \"$VERSION\"/"
llms.txt:update_file "Cargo.toml" 'vexy_json = { version = ".*"' "s/vexy_json = { version = \".*\"/vexy_json = { version = \"$VERSION\"/"
llms.txt-
llms.txt-# Update Python bindings
llms.txt-echo "Updating Python bindings..."
--
llms.txt-
llms.txt-# Update Homebrew formula (only the version, not the URL)
llms.txt-echo "Updating Homebrew formula..."
llms.txt:if [ -f "Formula/vexy_json.rb" ]; then
llms.txt-    # Only update if this looks like a release version (not -dev)
llms.txt-    if [[ ! "$VERSION" =~ -dev$ ]]; then
llms.txt:        update_file "Formula/vexy_json.rb" 'version ".*"' "s/version \".*\"/version \"$VERSION\"/"
llms.txt-        # Note: The URL in the formula should be updated during release
llms.txt-    else
llms.txt-        echo -e "${YELLOW}⚠${NC} Skipping Homebrew formula update for dev version"
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/scripts/verify_features.js
llms.txt-# Language: javascript
llms.txt-
llms.txt-function runTest((testCase))
--
llms.txt-async function runAllTests(())
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/debug_comment_line_endings.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/debug_number.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_dot_numbers.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_full_parse.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_implicit.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_parse.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_point_zero.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_positive_numbers.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_rust_parse.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_strict_comment.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/test_trailing_decimal.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/bin/trace_parse.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/src/lib.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/advanced_features.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod complex_structures;
--
llms.txt-mod unicode_tests;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/basic_tests.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comma_handling.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comment_handling.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/compat_tests.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/comprehensive_tests.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod basic_parsing;
--
llms.txt-mod error_handling;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/error_handling.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/feature_tests.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/forgiving_features.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/lexer_tests.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/lib_integration.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/newline_as_comma.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/number_formats.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
llms.txt-</document_content>
llms.txt-</document>
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/property_tests.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-struct ArbitraryJsonValue {
llms.txt-}
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/real_world_scenarios.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-mod configuration_files;
--
llms.txt-mod performance_scenarios;
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/string_handling.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
llms.txt-
llms.txt:# File: /Users/adam/Developer/vcs/github.vexyart/vexy-json/tests/supported_features.rs
llms.txt-# Language: rust
llms.txt-
llms.txt-
--
docs/tool.html-  <head>
docs/tool.html-    <meta charset="UTF-8" />
docs/tool.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
docs/tool.html:    <title>vexy_json - Forgiving JSON Parser</title>
docs/tool.html-    <meta
docs/tool.html-      name="description"
docs/tool.html:      content="Interactive web tool for parsing forgiving JSON with vexy_json - supports comments, unquoted keys, trailing commas, and more."
docs/tool.html-    />
docs/tool.html-
docs/tool.html-    <!-- Favicon -->
--
docs/tool.html-    <div class="navbar bg-base-100 shadow-lg">
docs/tool.html-      <div class="container mx-auto">
docs/tool.html-        <div class="flex-1">
docs/tool.html:          <a href="index.html" class="btn btn-ghost text-xl">vexy_json</a>
docs/tool.html-        </div>
docs/tool.html-        <div class="flex-none">
docs/tool.html-          <ul class="menu menu-horizontal px-1">
docs/tool.html-            <li><a href="index.html">Docs</a></li>
docs/tool.html-            <li>
docs/tool.html:              <a href="https://github.com/twardoch/vexy_json" target="_blank"
docs/tool.html-                >GitHub</a
docs/tool.html-              >
docs/tool.html-            </li>
--
docs/tool.html-    <main class="container mx-auto px-4 py-8">
docs/tool.html-      <!-- Header -->
docs/tool.html-      <div class="text-center mb-8">
docs/tool.html:        <h1 class="text-4xl font-bold mb-4">vexy_json Parser</h1>
docs/tool.html-        <p class="text-lg text-base-content/70">
docs/tool.html-          A forgiving JSON parser that supports comments, unquoted keys,
docs/tool.html-          trailing commas, and more.
--
docs/tool.html-              >
docs/tool.html-{
docs/tool.html-  // You can use comments!
docs/tool.html:  name: "vexy_json",
docs/tool.html-  features: [
docs/tool.html-    'comments',
docs/tool.html-    'unquoted keys',
--
docs/tool.html-                class="tab-content bg-base-100 border-base-300 rounded-box p-6"
docs/tool.html-              >
docs/tool.html-                <pre class="text-sm"><code>{
docs/tool.html:  "name": "vexy_json",
docs/tool.html-  "version": "1.1.0",
docs/tool.html-  "features": ["forgiving", "fast", "rust"]
docs/tool.html-}</code></pre>
--
docs/tool.html-      <div class="grid grid-flow-col gap-4">
docs/tool.html-        <a href="index.html" class="link link-hover">Documentation</a>
docs/tool.html-        <a href="api.html" class="link link-hover">API Reference</a>
docs/tool.html:        <a href="https://github.com/twardoch/vexy_json" class="link link-hover"
docs/tool.html-          >Source Code</a
docs/tool.html-        >
docs/tool.html:        <a href="https://crates.io/crates/vexy_json" class="link link-hover"
docs/tool.html-          >crates.io</a
docs/tool.html-        >
docs/tool.html-      </div>
docs/tool.html-      <div>
docs/tool.html:        <p>vexy_json - A forgiving JSON parser. Built with Rust and WebAssembly.</p>
docs/tool.html-      </div>
docs/tool.html-    </footer>
docs/tool.html-
--
docs/internal/test-results/feature-verification-report.json-      "success": true,
docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\",\"number\":42}",
docs/internal/test-results/feature-verification-report.json-      "error": null,
docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.20s\n     Running `target/debug/vexy_json`\n"
docs/internal/test-results/feature-verification-report.json-    },
docs/internal/test-results/feature-verification-report.json-    {
docs/internal/test-results/feature-verification-report.json-      "name": "Comments - Single Line",
--
docs/internal/test-results/feature-verification-report.json-      "success": true,
docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\"}",
docs/internal/test-results/feature-verification-report.json-      "error": null,
docs/internal/test-results/feature-verification-report.json:      "stderr": "    Blocking waiting for file lock on package cache\n    Blocking waiting for file lock on package cache\n    Blocking waiting for file lock on package cache\n    Blocking waiting for file lock on package cache\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.72s\n     Running `target/debug/vexy_json`\n"
docs/internal/test-results/feature-verification-report.json-    },
docs/internal/test-results/feature-verification-report.json-    {
docs/internal/test-results/feature-verification-report.json-      "name": "Comments - Multi Line",
--
docs/internal/test-results/feature-verification-report.json-      "success": true,
docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\"}",
docs/internal/test-results/feature-verification-report.json-      "error": null,
docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.22s\n     Running `target/debug/vexy_json`\n"
docs/internal/test-results/feature-verification-report.json-    },
docs/internal/test-results/feature-verification-report.json-    {
docs/internal/test-results/feature-verification-report.json-      "name": "Comments - Hash Style",
--
docs/internal/test-results/feature-verification-report.json-      "success": true,
docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\"}",
docs/internal/test-results/feature-verification-report.json-      "error": null,
docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.27s\n     Running `target/debug/vexy_json`\n"
docs/internal/test-results/feature-verification-report.json-    },
docs/internal/test-results/feature-verification-report.json-    {
docs/internal/test-results/feature-verification-report.json-      "name": "Unquoted Keys",
--
docs/internal/test-results/feature-verification-report.json-      "success": true,
docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\",\"another\":123}",
docs/internal/test-results/feature-verification-report.json-      "error": null,
docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.23s\n     Running `target/debug/vexy_json`\n"
docs/internal/test-results/feature-verification-report.json-    },
docs/internal/test-results/feature-verification-report.json-    {
docs/internal/test-results/feature-verification-report.json-      "name": "Single Quotes",
--
docs/internal/test-results/feature-verification-report.json-      "success": true,
docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\",\"mixed\":\"quotes\"}",
docs/internal/test-results/feature-verification-report.json-      "error": null,
docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.22s\n     Running `target/debug/vexy_json`\n"
docs/internal/test-results/feature-verification-report.json-    },
docs/internal/test-results/feature-verification-report.json-    {
docs/internal/test-results/feature-verification-report.json-      "name": "Trailing Commas - Object",
--
docs/internal/test-results/feature-verification-report.json-      "success": true,
docs/internal/test-results/feature-verification-report.json-      "output": "{\"key\":\"value\",\"another\":123}",
docs/internal/test-results/feature-verification-report.json-      "error": null,
docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.24s\n     Running `target/debug/vexy_json`\n"
docs/internal/test-results/feature-verification-report.json-    },
docs/internal/test-results/feature-verification-report.json-    {
docs/internal/test-results/feature-verification-report.json-      "name": "Trailing Commas - Array",
--
docs/internal/test-results/feature-verification-report.json-      "success": true,
docs/internal/test-results/feature-verification-report.json-      "output": "[\"a\",\"b\",\"c\"]",
docs/internal/test-results/feature-verification-report.json-      "error": null,
docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.21s\n     Running `target/debug/vexy_json`\n"
docs/internal/test-results/feature-verification-report.json-    },
docs/internal/test-results/feature-verification-report.json-    {
docs/internal/test-results/feature-verification-report.json-      "name": "Implicit Array",
--
docs/internal/test-results/feature-verification-report.json-      "success": true,
docs/internal/test-results/feature-verification-report.json-      "output": "[\"apple\",\"banana\",\"cherry\"]",
docs/internal/test-results/feature-verification-report.json-      "error": null,
docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.24s\n     Running `target/debug/vexy_json`\n"
docs/internal/test-results/feature-verification-report.json-    },
docs/internal/test-results/feature-verification-report.json-    {
docs/internal/test-results/feature-verification-report.json-      "name": "Implicit Object",
--
docs/internal/test-results/feature-verification-report.json-      "success": true,
docs/internal/test-results/feature-verification-report.json-      "output": "{\"number\":42,\"key\":\"value\"}",
docs/internal/test-results/feature-verification-report.json-      "error": null,
docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.21s\n     Running `target/debug/vexy_json`\n"
docs/internal/test-results/feature-verification-report.json-    },
docs/internal/test-results/feature-verification-report.json-    {
docs/internal/test-results/feature-verification-report.json-      "name": "Complex Mixed Features",
docs/internal/test-results/feature-verification-report.json-      "description": "Complex JSON with multiple forgiving features",
docs/internal/test-results/feature-verification-report.json:      "input": "{\n  // Configuration with comments\n  name: 'vexy_json',           // Unquoted key, single quotes\n  version: \"1.1.0\",        /* Version string */\n  features: [\n    \"comments\",\n    'unquoted-keys',       // Mixed quotes\n    \"trailing-commas\",     // Trailing comma next\n  ],                       // Trailing comma in array\n  debug: true,             # Hash comment\n}",
docs/internal/test-results/feature-verification-report.json-      "success": true,
docs/internal/test-results/feature-verification-report.json:      "output": "{\"version\":\"1.1.0\",\"debug\":true,\"name\":\"vexy_json\",\"features\":[\"comments\",\"unquoted-keys\",\"trailing-commas\"]}",
docs/internal/test-results/feature-verification-report.json-      "error": null,
docs/internal/test-results/feature-verification-report.json:      "stderr": "    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.19s\n     Running `target/debug/vexy_json`\n"
docs/internal/test-results/feature-verification-report.json-    }
docs/internal/test-results/feature-verification-report.json-  ]
docs/internal/test-results/feature-verification-report.json-}
--
docs/internal/PLAN.md-1. **Old Naming References**: Only 2 files contain "zzson" - both in documentation (PLAN.md and issue 610.txt)
docs/internal/PLAN.md-2. **Python Bindings**: Test file previously used `VexyJSONParser` but was fixed to `VexyJsonParser`
docs/internal/PLAN.md-3. **Naming Conventions**: Generally consistent across languages:
docs/internal/PLAN.md:   - Rust: `vexy_json-*` (crate names), `VexyJson*` (types)
docs/internal/PLAN.md-   - C/C++: `VexyJson*` (types)
docs/internal/PLAN.md:   - Python: `vexy_json` (package), `VexyJson*` (classes)
docs/internal/PLAN.md-   - JavaScript: `VexyJson*` (classes)
docs/internal/PLAN.md-   - Documentation: "Vexy JSON" (with space)
docs/internal/PLAN.md-
--
docs/internal/PLAN.md-## Implementation Plan
docs/internal/PLAN.md-
docs/internal/PLAN.md-### Phase 1: jsonic References Removal (Immediate - 2-3 hours)
docs/internal/PLAN.md:1. **Rename test files**: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
docs/internal/PLAN.md-2. **Update documentation**: Remove "jsonic" from HTML, markdown, and tool descriptions
docs/internal/PLAN.md:3. **Clean code references**: Replace "jsonic" with "vexy_json" in comments and variable names
docs/internal/PLAN.md-4. **Update configurations**: Clean pyproject.toml and Cargo.toml references
docs/internal/PLAN.md-5. **Verify completeness**: Re-run grep to ensure no "jsonic" references remain
docs/internal/PLAN.md-
--
docs/debug-pages/deep-debug.html-      import init, {
docs/debug-pages/deep-debug.html-        parse_json,
docs/debug-pages/deep-debug.html-        parse_json_with_options,
docs/debug-pages/deep-debug.html:      } from '../pkg/vexy_json_wasm.js';
docs/debug-pages/deep-debug.html-
docs/debug-pages/deep-debug.html-      let log = '';
docs/debug-pages/deep-debug.html-      function appendLog(message) {
--
docs/drafts/publication-ready.md:# 🚀 vexy_json v1.1.0 - Ready for Publication
docs/drafts/publication-ready.md-
docs/drafts/publication-ready.md-## ✅ Status: READY FOR PUBLICATION
docs/drafts/publication-ready.md-
--
docs/drafts/publication-ready.md-## 📦 Package Details
docs/drafts/publication-ready.md-
docs/drafts/publication-ready.md-- **Version**: 1.1.0
docs/drafts/publication-ready.md:- **Name**: vexy_json
docs/drafts/publication-ready.md-- **Description**: A forgiving JSON parser - Rust port of jsonic
docs/drafts/publication-ready.md:- **Repository**: https://github.com/twardoch/vexy_json
docs/drafts/publication-ready.md-- **License**: MIT OR Apache-2.0
docs/drafts/publication-ready.md-- **Keywords**: json, parser, forgiving, jsonic
docs/drafts/publication-ready.md-- **Categories**: parser-implementations, encoding
--
docs/drafts/publication-ready.md-## 📊 What's Included
docs/drafts/publication-ready.md-
docs/drafts/publication-ready.md-- Core library with all forgiving JSON features
docs/drafts/publication-ready.md:- CLI tool (`vexy_json` binary)
docs/drafts/publication-ready.md-- WebAssembly bindings (optional feature)
docs/drafts/publication-ready.md-- Comprehensive test suite (73 tests)
docs/drafts/publication-ready.md-- Performance benchmarks
--
crates/core/src/parser/recursive.rs-/// # Examples
crates/core/src/parser/recursive.rs-///
crates/core/src/parser/recursive.rs-/// ```
crates/core/src/parser/recursive.rs:/// use vexy_json_core::parser::recursive::parse_recursive;
crates/core/src/parser/recursive.rs:/// use vexy_json_core::parser::ParserOptions;
crates/core/src/parser/recursive.rs-///
crates/core/src/parser/recursive.rs-/// let json = r#"{"key": "value", "number": 42}"#;
crates/core/src/parser/recursive.rs-/// let options = ParserOptions::default();
--
docs/internal/TODO.md-1. **Old Naming References**: Only 2 files contain "zzson" - both in documentation (PLAN.md and issue 610.txt)
docs/internal/TODO.md-2. **Python Bindings**: Test file previously used `VexyJSONParser` but was fixed to `VexyJsonParser`
docs/internal/TODO.md-3. **Naming Conventions**: Generally consistent across languages:
docs/internal/TODO.md:   - Rust: `vexy_json-*` (crate names), `VexyJson*` (types)
docs/internal/TODO.md-   - C/C++: `VexyJson*` (types)
docs/internal/TODO.md:   - Python: `vexy_json` (package), `VexyJson*` (classes)
docs/internal/TODO.md-   - JavaScript: `VexyJson*` (classes)
docs/internal/TODO.md-   - Documentation: "Vexy JSON" (with space)
docs/internal/TODO.md-
--
docs/internal/TODO.md-## Implementation Plan
docs/internal/TODO.md-
docs/internal/TODO.md-### Phase 1: jsonic References Removal (Immediate - 2-3 hours)
docs/internal/TODO.md:1. **Rename test files**: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
docs/internal/TODO.md-2. **Update documentation**: Remove "jsonic" from HTML, markdown, and tool descriptions
docs/internal/TODO.md:3. **Clean code references**: Replace "jsonic" with "vexy_json" in comments and variable names
docs/internal/TODO.md-4. **Update configurations**: Clean pyproject.toml and Cargo.toml references
docs/internal/TODO.md-5. **Verify completeness**: Re-run grep to ensure no "jsonic" references remain
docs/internal/TODO.md-
--
docs/internal/TODO.md-1. **Old Naming References**: Only 2 files contain "zzson" - both in documentation (PLAN.md and issue 610.txt)
docs/internal/TODO.md-2. **Python Bindings**: Test file previously used `VexyJSONParser` but was fixed to `VexyJsonParser`
docs/internal/TODO.md-3. **Naming Conventions**: Generally consistent across languages:
docs/internal/TODO.md:   - Rust: `vexy_json-*` (crate names), `VexyJson*` (types)
docs/internal/TODO.md-   - C/C++: `VexyJson*` (types)
docs/internal/TODO.md:   - Python: `vexy_json` (package), `VexyJson*` (classes)
docs/internal/TODO.md-   - JavaScript: `VexyJson*` (classes)
docs/internal/TODO.md-   - Documentation: "Vexy JSON" (with space)
docs/internal/TODO.md-
--
docs/internal/TODO.md-## Implementation Plan
docs/internal/TODO.md-
docs/internal/TODO.md-### Phase 1: jsonic References Removal (Immediate - 2-3 hours)
docs/internal/TODO.md:1. **Rename test files**: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
docs/internal/TODO.md-2. **Update documentation**: Remove "jsonic" from HTML, markdown, and tool descriptions
docs/internal/TODO.md:3. **Clean code references**: Replace "jsonic" with "vexy_json" in comments and variable names
docs/internal/TODO.md-4. **Update configurations**: Clean pyproject.toml and Cargo.toml references
docs/internal/TODO.md-5. **Verify completeness**: Re-run grep to ensure no "jsonic" references remain
docs/internal/TODO.md-
--
docs/internal/TODO.md-1. **Old Naming References**: Only 2 files contain "zzson" - both in documentation (PLAN.md and issue 610.txt)
docs/internal/TODO.md-2. **Python Bindings**: Test file previously used `VexyJSONParser` but was fixed to `VexyJsonParser`
docs/internal/TODO.md-3. **Naming Conventions**: Generally consistent across languages:
docs/internal/TODO.md:   - Rust: `vexy_json-*` (crate names), `VexyJson*` (types)
docs/internal/TODO.md-   - C/C++: `VexyJson*` (types)
docs/internal/TODO.md:   - Python: `vexy_json` (package), `VexyJson*` (classes)
docs/internal/TODO.md-   - JavaScript: `VexyJson*` (classes)
docs/internal/TODO.md-   - Documentation: "Vexy JSON" (with space)
docs/internal/TODO.md-
--
docs/internal/TODO.md-## Implementation Plan
docs/internal/TODO.md-
docs/internal/TODO.md-### Phase 1: jsonic References Removal (Immediate - 2-3 hours)
docs/internal/TODO.md:1. **Rename test files**: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
docs/internal/TODO.md-2. **Update documentation**: Remove "jsonic" from HTML, markdown, and tool descriptions
docs/internal/TODO.md:3. **Clean code references**: Replace "jsonic" with "vexy_json" in comments and variable names
docs/internal/TODO.md-4. **Update configurations**: Clean pyproject.toml and Cargo.toml references
docs/internal/TODO.md-5. **Verify completeness**: Re-run grep to ensure no "jsonic" references remain
docs/internal/TODO.md-
--
docs/internal/TODO.md-
docs/internal/TODO.md-## Phase 1: jsonic References Removal (IMMEDIATE)
docs/internal/TODO.md-
docs/internal/TODO.md:- [ ] Rename test files: `jsonic_*.rs` → `vexy_json_*.rs` or `compat_*.rs`
docs/internal/TODO.md-- [ ] Update documentation: Remove "jsonic" from HTML, markdown files
docs/internal/TODO.md:- [ ] Clean code references: Replace "jsonic" with "vexy_json" in comments/variables
docs/internal/TODO.md-- [ ] Update configurations: Clean pyproject.toml and Cargo.toml references
docs/internal/TODO.md-- [ ] Verify completeness: Re-run grep to ensure no "jsonic" references remain
docs/internal/TODO.md-
--
crates/core/src/parser/number.rs-            // - Is finite
crates/core/src/parser/number.rs-            // - In i64 range  
crates/core/src/parser/number.rs-            // - Not negative zero (already handled above)
crates/core/src/parser/number.rs:            // - Either no decimal point OR trailing decimal point (vexy_json compatibility)
crates/core/src/parser/number.rs-            // - If has exponent, allow it only if no decimal point
crates/core/src/parser/number.rs-            if has_no_fract && is_finite && in_range && !is_neg_zero && (!has_decimal_point || has_trailing_decimal) {
crates/core/src/parser/number.rs-                Number::Integer(f as i64)
--
docs/debug-pages/console-debug.html-        parse_json,
docs/debug-pages/console-debug.html-        parse_json_with_options,
docs/debug-pages/console-debug.html-        get_parser_options,
docs/debug-pages/console-debug.html:      } from '../pkg/vexy_json_wasm.js?v=' + Date.now();
docs/debug-pages/console-debug.html-
docs/debug-pages/console-debug.html-      let log = '';
docs/debug-pages/console-debug.html-      function appendLog(message) {
--
docs/debug-pages/test-basic-wasm.html-  <head>
docs/debug-pages/test-basic-wasm.html-    <meta charset="UTF-8" />
docs/debug-pages/test-basic-wasm.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
docs/debug-pages/test-basic-wasm.html:    <title>Basic vexy_json WASM Test</title>
docs/debug-pages/test-basic-wasm.html-    <style>
docs/debug-pages/test-basic-wasm.html-      body {
docs/debug-pages/test-basic-wasm.html-        font-family: monospace;
--
docs/debug-pages/test-basic-wasm.html-    </style>
docs/debug-pages/test-basic-wasm.html-  </head>
docs/debug-pages/test-basic-wasm.html-  <body>
docs/debug-pages/test-basic-wasm.html:    <h1>Basic vexy_json WASM Test</h1>
docs/debug-pages/test-basic-wasm.html-    <div id="results"></div>
docs/debug-pages/test-basic-wasm.html-
docs/debug-pages/test-basic-wasm.html-    <script type="module">
--
docs/debug-pages/test-basic-wasm.html-          }
docs/debug-pages/test-basic-wasm.html-          addResult('✅ WebAssembly supported', 'success');
docs/debug-pages/test-basic-wasm.html-
docs/debug-pages/test-basic-wasm.html:          addResult('Loading vexy_json module...');
docs/debug-pages/test-basic-wasm.html:          const vexy_json = await import('../pkg/vexy_json_wasm.js');
docs/debug-pages/test-basic-wasm.html:          await vexy_json.default();
docs/debug-pages/test-basic-wasm.html:          addResult('✅ vexy_json module loaded', 'success');
docs/debug-pages/test-basic-wasm.html-
docs/debug-pages/test-basic-wasm.html-          // Test basic parsing
docs/debug-pages/test-basic-wasm.html-          addResult('Testing basic JSON parsing...');
docs/debug-pages/test-basic-wasm.html:          const result1 = vexy_json.parse_json('{"test": true}');
docs/debug-pages/test-basic-wasm.html-          addResult(`✅ Basic parsing: ${JSON.stringify(result1)}`, 'success');
docs/debug-pages/test-basic-wasm.html-
docs/debug-pages/test-basic-wasm.html-          // Test forgiving features
docs/debug-pages/test-basic-wasm.html-          addResult('Testing forgiving features...');
docs/debug-pages/test-basic-wasm.html:          const result2 = vexy_json.parse_json(
docs/debug-pages/test-basic-wasm.html-            '{key: "value", /* comment */ trailing: "comma",}'
docs/debug-pages/test-basic-wasm.html-          );
docs/debug-pages/test-basic-wasm.html-          addResult(
--
docs/debug-pages/test-basic-wasm.html-
docs/debug-pages/test-basic-wasm.html-          // Test validation
docs/debug-pages/test-basic-wasm.html-          addResult('Testing validation...');
docs/debug-pages/test-basic-wasm.html:          const valid = vexy_json.validate_json('{"valid": true}');
docs/debug-pages/test-basic-wasm.html:          const invalid = vexy_json.validate_json('{invalid}');
docs/debug-pages/test-basic-wasm.html-          addResult(
docs/debug-pages/test-basic-wasm.html-            `✅ Validation: valid=${valid}, invalid=${invalid}`,
docs/debug-pages/test-basic-wasm.html-            'success'
--
docs/debug-pages/test-basic-wasm.html-          // Test error handling
docs/debug-pages/test-basic-wasm.html-          addResult('Testing error handling...');
docs/debug-pages/test-basic-wasm.html-          try {
docs/debug-pages/test-basic-wasm.html:            vexy_json.parse_json('{unclosed');
docs/debug-pages/test-basic-wasm.html-            addResult('❌ Should have thrown error', 'error');
docs/debug-pages/test-basic-wasm.html-          } catch (error) {
docs/debug-pages/test-basic-wasm.html-            addResult(`✅ Error handling: ${error.message}`, 'success');
--
docs/debug-pages/options-test.html-      import init, {
docs/debug-pages/options-test.html-        parse_json_with_options,
docs/debug-pages/options-test.html-        get_parser_options,
docs/debug-pages/options-test.html:      } from '../pkg/vexy_json_wasm.js';
docs/debug-pages/options-test.html-
docs/debug-pages/options-test.html-      let log = '';
docs/debug-pages/options-test.html-      function appendLog(message) {
--
docs/debug-pages/direct-debug.html-    <pre id="log"></pre>
docs/debug-pages/direct-debug.html-
docs/debug-pages/direct-debug.html-    <script type="module">
docs/debug-pages/direct-debug.html:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
docs/debug-pages/direct-debug.html-
docs/debug-pages/direct-debug.html-      let log = '';
docs/debug-pages/direct-debug.html-      function appendLog(message) {
--
docs/debug-pages/simple-test.html-    <pre id="output"></pre>
docs/debug-pages/simple-test.html-
docs/debug-pages/simple-test.html-    <script type="module">
docs/debug-pages/simple-test.html:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
docs/debug-pages/simple-test.html-
docs/debug-pages/simple-test.html-      let initialized = false;
docs/debug-pages/simple-test.html-
--
docs/debug-pages/error-debug.html-      import init, {
docs/debug-pages/error-debug.html-        parse_json,
docs/debug-pages/error-debug.html-        parse_json_with_options,
docs/debug-pages/error-debug.html:      } from '../pkg/vexy_json_wasm.js';
docs/debug-pages/error-debug.html-
docs/debug-pages/error-debug.html-      let log = '';
docs/debug-pages/error-debug.html-      function appendLog(message) {
--
docs/debug-pages/browser-test.html-  <head>
docs/debug-pages/browser-test.html-    <meta charset="UTF-8" />
docs/debug-pages/browser-test.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
docs/debug-pages/browser-test.html:    <title>vexy_json Browser Compatibility Test</title>
docs/debug-pages/browser-test.html-    <style>
docs/debug-pages/browser-test.html-      body {
docs/debug-pages/browser-test.html-        font-family: Arial, sans-serif;
--
docs/debug-pages/browser-test.html-    </style>
docs/debug-pages/browser-test.html-  </head>
docs/debug-pages/browser-test.html-  <body>
docs/debug-pages/browser-test.html:    <h1>vexy_json Browser Compatibility Test</h1>
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html-    <div class="test-section">
docs/debug-pages/browser-test.html-      <h2>Browser Information</h2>
--
docs/debug-pages/browser-test.html-      <h2>WASM Module Loading</h2>
docs/debug-pages/browser-test.html-      <div id="module-loading">
docs/debug-pages/browser-test.html-        <div class="loading"></div>
docs/debug-pages/browser-test.html:        <span>Loading vexy_json WebAssembly module...</span>
docs/debug-pages/browser-test.html-      </div>
docs/debug-pages/browser-test.html-      <div id="module-tests"></div>
docs/debug-pages/browser-test.html-    </div>
--
docs/debug-pages/browser-test.html-    </div>
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html-    <script type="module">
docs/debug-pages/browser-test.html:      let vexy_json = null;
docs/debug-pages/browser-test.html-      let wasmModule = null;
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html-      // Test results storage
--
docs/debug-pages/browser-test.html-        }
docs/debug-pages/browser-test.html-      }
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html:      // Load vexy_json module
docs/debug-pages/browser-test.html-      async function loadVexyJsonModule() {
docs/debug-pages/browser-test.html-        try {
docs/debug-pages/browser-test.html-          document.getElementById('module-loading').innerHTML =
docs/debug-pages/browser-test.html:            '<div class="loading"></div>Loading vexy_json module...';
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html-          // Import the module
docs/debug-pages/browser-test.html:          const module = await import('../pkg/vexy_json_wasm.js');
docs/debug-pages/browser-test.html-          await module.default(); // Initialize WASM
docs/debug-pages/browser-test.html:          vexy_json = module;
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html-          document.getElementById('module-loading').innerHTML =
docs/debug-pages/browser-test.html:            '<div class="test-result success">✓ vexy_json module loaded successfully</div>';
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html-          // Test module functions
docs/debug-pages/browser-test.html-          testModuleFunctions();
docs/debug-pages/browser-test.html-        } catch (error) {
docs/debug-pages/browser-test.html-          document.getElementById(
docs/debug-pages/browser-test.html-            'module-loading'
docs/debug-pages/browser-test.html:          ).innerHTML = `<div class="test-result error">✗ Failed to load vexy_json module: ${error.message}</div>`;
docs/debug-pages/browser-test.html-          addResult(
docs/debug-pages/browser-test.html-            'module',
docs/debug-pages/browser-test.html-            'Module Loading',
--
docs/debug-pages/browser-test.html-      }
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html-      function testModuleFunctions() {
docs/debug-pages/browser-test.html:        if (!vexy_json) return;
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html-        try {
docs/debug-pages/browser-test.html-          // Test version info
docs/debug-pages/browser-test.html:          const version = vexy_json.get_version_info();
docs/debug-pages/browser-test.html-          addResult(
docs/debug-pages/browser-test.html-            'module',
docs/debug-pages/browser-test.html-            'get_version_info()',
--
docs/debug-pages/browser-test.html-          );
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html-          // Test parser options
docs/debug-pages/browser-test.html:          const options = vexy_json.get_parser_options();
docs/debug-pages/browser-test.html-          addResult(
docs/debug-pages/browser-test.html-            'module',
docs/debug-pages/browser-test.html-            'get_parser_options()',
--
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html-          // Test basic parsing
docs/debug-pages/browser-test.html-          const simpleJson = '{"test": true}';
docs/debug-pages/browser-test.html:          const result = vexy_json.parse_json(simpleJson);
docs/debug-pages/browser-test.html-          addResult(
docs/debug-pages/browser-test.html-            'module',
docs/debug-pages/browser-test.html-            'parse_json() basic',
--
docs/debug-pages/browser-test.html-            allow_unquoted_keys: true,
docs/debug-pages/browser-test.html-            allow_trailing_commas: true,
docs/debug-pages/browser-test.html-          };
docs/debug-pages/browser-test.html:          const resultWithOptions = vexy_json.parse_json_with_options(
docs/debug-pages/browser-test.html-            forgivingJson,
docs/debug-pages/browser-test.html-            optionsTest.allow_comments,
docs/debug-pages/browser-test.html-            optionsTest.allow_trailing_commas,
--
docs/debug-pages/browser-test.html-          );
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html-          // Test validation
docs/debug-pages/browser-test.html:          const isValid = vexy_json.validate_json('{"valid": true}');
docs/debug-pages/browser-test.html-          addResult(
docs/debug-pages/browser-test.html-            'module',
docs/debug-pages/browser-test.html-            'validate_json()',
--
docs/debug-pages/browser-test.html-      }
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html-      function runParsingTests() {
docs/debug-pages/browser-test.html:        if (!vexy_json) {
docs/debug-pages/browser-test.html-          addResult(
docs/debug-pages/browser-test.html-            'parsing',
docs/debug-pages/browser-test.html-            'Module Required',
docs/debug-pages/browser-test.html-            false,
docs/debug-pages/browser-test.html:            'vexy_json module not loaded'
docs/debug-pages/browser-test.html-          );
docs/debug-pages/browser-test.html-          return;
docs/debug-pages/browser-test.html-        }
--
docs/debug-pages/browser-test.html-              allow_single_quotes: true,
docs/debug-pages/browser-test.html-            };
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html:            const result = vexy_json.parse_json_with_options(
docs/debug-pages/browser-test.html-              test.input,
docs/debug-pages/browser-test.html-              options.allow_comments,
docs/debug-pages/browser-test.html-              options.allow_trailing_commas,
--
docs/debug-pages/browser-test.html-      }
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html-      function runPerformanceTests() {
docs/debug-pages/browser-test.html:        if (!vexy_json) {
docs/debug-pages/browser-test.html-          addResult(
docs/debug-pages/browser-test.html-            'performance',
docs/debug-pages/browser-test.html-            'Module Required',
docs/debug-pages/browser-test.html-            false,
docs/debug-pages/browser-test.html:            'vexy_json module not loaded'
docs/debug-pages/browser-test.html-          );
docs/debug-pages/browser-test.html-          return;
docs/debug-pages/browser-test.html-        }
--
docs/debug-pages/browser-test.html-        Object.entries(testData).forEach(([size, data]) => {
docs/debug-pages/browser-test.html-          try {
docs/debug-pages/browser-test.html-            const startTime = performance.now();
docs/debug-pages/browser-test.html:            const result = vexy_json.parse_json(data);
docs/debug-pages/browser-test.html-            const endTime = performance.now();
docs/debug-pages/browser-test.html-            const duration = endTime - startTime;
docs/debug-pages/browser-test.html-
--
docs/debug-pages/browser-test.html-        const input = document.getElementById('test-input').value;
docs/debug-pages/browser-test.html-        const resultDiv = document.getElementById('interactive-result');
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html:        if (!vexy_json) {
docs/debug-pages/browser-test.html-          resultDiv.innerHTML =
docs/debug-pages/browser-test.html:            '<div class="test-result error">vexy_json module not loaded</div>';
docs/debug-pages/browser-test.html-          return;
docs/debug-pages/browser-test.html-        }
docs/debug-pages/browser-test.html-
--
docs/debug-pages/browser-test.html-            newline_as_comma: true,
docs/debug-pages/browser-test.html-          };
docs/debug-pages/browser-test.html-
docs/debug-pages/browser-test.html:          const result = vexy_json.parse_json_with_options(
docs/debug-pages/browser-test.html-            input,
docs/debug-pages/browser-test.html-            options.allow_comments,
docs/debug-pages/browser-test.html-            options.allow_trailing_commas,
--
docs/debug-pages/browser-test.html-        downloadDiv.innerHTML = `
docs/debug-pages/browser-test.html-                <h2>Test Report</h2>
docs/debug-pages/browser-test.html-                <div class="test-result info">
docs/debug-pages/browser-test.html:                    All tests completed. <a href="${url}" download="vexy_json-browser-test-${
docs/debug-pages/browser-test.html-          results.browser.browser
docs/debug-pages/browser-test.html-        }-${Date.now()}.json">Download detailed report</a>
docs/debug-pages/browser-test.html-                </div>
--
docs/debug-pages/debug-test.html-    <p id="result">Loading...</p>
docs/debug-pages/debug-test.html-
docs/debug-pages/debug-test.html-    <script type="module">
docs/debug-pages/debug-test.html:      import init, { parse_json_with_options } from '../pkg/vexy_json_wasm.js';
docs/debug-pages/debug-test.html-
docs/debug-pages/debug-test.html-      async function test() {
docs/debug-pages/debug-test.html-        try {
--
docs/debug-pages/token-debug.html-        parse_json,
docs/debug-pages/token-debug.html-        parse_json_with_options,
docs/debug-pages/token-debug.html-        get_parser_options,
docs/debug-pages/token-debug.html:      } from '../pkg/vexy_json_wasm.js';
docs/debug-pages/token-debug.html-
docs/debug-pages/token-debug.html-      let log = '';
docs/debug-pages/token-debug.html-      function appendLog(message) {
--
docs/debug-pages/test-wasm.html-  <head>
docs/debug-pages/test-wasm.html-    <meta charset="UTF-8" />
docs/debug-pages/test-wasm.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
docs/debug-pages/test-wasm.html:    <title>vexy_json WASM Test</title>
docs/debug-pages/test-wasm.html-    <style>
docs/debug-pages/test-wasm.html-      body {
docs/debug-pages/test-wasm.html-        font-family: Arial, sans-serif;
--
docs/debug-pages/test-wasm.html-    </style>
docs/debug-pages/test-wasm.html-  </head>
docs/debug-pages/test-wasm.html-  <body>
docs/debug-pages/test-wasm.html:    <h1>vexy_json WebAssembly Test Page</h1>
docs/debug-pages/test-wasm.html:    <p>Testing the vexy_json WASM module functionality...</p>
docs/debug-pages/test-wasm.html-
docs/debug-pages/test-wasm.html-    <div id="results"></div>
docs/debug-pages/test-wasm.html-
--
docs/debug-pages/test-wasm.html-        get_parser_options,
docs/debug-pages/test-wasm.html-        stringify_value,
docs/debug-pages/test-wasm.html-        get_version_info,
docs/debug-pages/test-wasm.html:      } from '../pkg/vexy_json_wasm.js';
docs/debug-pages/test-wasm.html-
docs/debug-pages/test-wasm.html-      const resultsDiv = document.getElementById('results');
docs/debug-pages/test-wasm.html-
--
docs/debug-pages/test-wasm.html-            addResult(
docs/debug-pages/test-wasm.html-              'Version Info',
docs/debug-pages/test-wasm.html-              true,
docs/debug-pages/test-wasm.html:              `vexy_json v${versionInfo.version}\n${versionInfo.description}`
docs/debug-pages/test-wasm.html-            );
docs/debug-pages/test-wasm.html-          } catch (e) {
docs/debug-pages/test-wasm.html-            addResult('Version Info', false, `Error: ${e.message}`);
--
docs/debug-pages/test-browsers.html-    <!-- this_file: docs/test-browsers.html -->
docs/debug-pages/test-browsers.html-    <meta charset="UTF-8" />
docs/debug-pages/test-browsers.html-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
docs/debug-pages/test-browsers.html:    <title>vexy_json Cross-Browser Test Suite</title>
docs/debug-pages/test-browsers.html-    <link
docs/debug-pages/test-browsers.html-      href="https://cdn.jsdelivr.net/npm/daisyui@4.4.19/dist/full.min.css"
docs/debug-pages/test-browsers.html-      rel="stylesheet"
--
docs/debug-pages/test-browsers.html-        <div class="hero-content text-center">
docs/debug-pages/test-browsers.html-          <div class="max-w-md">
docs/debug-pages/test-browsers.html-            <h1 class="text-3xl font-bold">
docs/debug-pages/test-browsers.html:              vexy_json Cross-Browser Test Suite
docs/debug-pages/test-browsers.html-            </h1>
docs/debug-pages/test-browsers.html-            <p class="py-6">
docs/debug-pages/test-browsers.html-              Comprehensive testing for WASM compatibility across browsers
--
docs/debug-pages/test-browsers.html-          name: 'WASM Module Loading',
docs/debug-pages/test-browsers.html-          test: async () => {
docs/debug-pages/test-browsers.html-            try {
docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
docs/debug-pages/test-browsers.html-              return {
docs/debug-pages/test-browsers.html-                success: true,
docs/debug-pages/test-browsers.html-                message: 'WASM module loaded successfully',
--
docs/debug-pages/test-browsers.html-          name: 'Basic JSON Parsing',
docs/debug-pages/test-browsers.html-          test: async () => {
docs/debug-pages/test-browsers.html-            try {
docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
docs/debug-pages/test-browsers.html-              const result = wasmModule.parse_json('{"test": "value"}');
docs/debug-pages/test-browsers.html-              const parsed = JSON.parse(result);
docs/debug-pages/test-browsers.html-              if (parsed.test === 'value') {
--
docs/debug-pages/test-browsers.html-          name: 'Comment Support',
docs/debug-pages/test-browsers.html-          test: async () => {
docs/debug-pages/test-browsers.html-            try {
docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
docs/debug-pages/test-browsers.html-              const input = '{"test": "value" /* comment */}';
docs/debug-pages/test-browsers.html-              const result = wasmModule.parse_json(input);
docs/debug-pages/test-browsers.html-              const parsed = JSON.parse(result);
--
docs/debug-pages/test-browsers.html-          name: 'Unquoted Keys',
docs/debug-pages/test-browsers.html-          test: async () => {
docs/debug-pages/test-browsers.html-            try {
docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
docs/debug-pages/test-browsers.html-              const input = '{test: "value"}';
docs/debug-pages/test-browsers.html-              const result = wasmModule.parse_json(input);
docs/debug-pages/test-browsers.html-              const parsed = JSON.parse(result);
--
docs/debug-pages/test-browsers.html-          name: 'Trailing Commas',
docs/debug-pages/test-browsers.html-          test: async () => {
docs/debug-pages/test-browsers.html-            try {
docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
docs/debug-pages/test-browsers.html-              const input = '{"test": "value",}';
docs/debug-pages/test-browsers.html-              const result = wasmModule.parse_json(input);
docs/debug-pages/test-browsers.html-              const parsed = JSON.parse(result);
--
docs/debug-pages/test-browsers.html-          name: 'Error Handling',
docs/debug-pages/test-browsers.html-          test: async () => {
docs/debug-pages/test-browsers.html-            try {
docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
docs/debug-pages/test-browsers.html-              try {
docs/debug-pages/test-browsers.html-                wasmModule.parse_json('invalid json {{{');
docs/debug-pages/test-browsers.html-                return {
--
docs/debug-pages/test-browsers.html-          name: 'Performance Test',
docs/debug-pages/test-browsers.html-          test: async () => {
docs/debug-pages/test-browsers.html-            try {
docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
docs/debug-pages/test-browsers.html-              const largeJson = JSON.stringify({
docs/debug-pages/test-browsers.html-                array: Array(1000)
docs/debug-pages/test-browsers.html-                  .fill()
--
docs/debug-pages/test-browsers.html-          name: 'Memory Management',
docs/debug-pages/test-browsers.html-          test: async () => {
docs/debug-pages/test-browsers.html-            try {
docs/debug-pages/test-browsers.html:              const wasmModule = await import('../pkg/vexy_json_wasm.js');
docs/debug-pages/test-browsers.html-
docs/debug-pages/test-browsers.html-              // Run multiple parse operations to test memory management
docs/debug-pages/test-browsers.html-              for (let i = 0; i < 100; i++) {
--
docs/debug-pages/test-browsers.html-        resultsEl.innerHTML += `<span class="test-fail">Failed: ${failCount}</span>\n`;
docs/debug-pages/test-browsers.html-
docs/debug-pages/test-browsers.html-        if (failCount === 0) {
docs/debug-pages/test-browsers.html:          resultsEl.innerHTML += `\n🎉 All tests passed! vexy_json WASM is compatible with this browser.`;
docs/debug-pages/test-browsers.html-        } else {
docs/debug-pages/test-browsers.html-          resultsEl.innerHTML += `\n⚠️ Some tests failed. Check the results above for details.`;
docs/debug-pages/test-browsers.html-        }
