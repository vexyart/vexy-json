<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="1195"><g><title>0x110953383 (1 samples, 0.08%)</title><rect x="0.0000%" y="341" width="0.0837%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>0x110953712 (1 samples, 0.08%)</title><rect x="0.0000%" y="325" width="0.0837%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>0x1109874d4 (1 samples, 0.08%)</title><rect x="0.0000%" y="309" width="0.0837%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>0x1109a4433 (1 samples, 0.08%)</title><rect x="0.0000%" y="293" width="0.0837%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>0x1109a4c89 (1 samples, 0.08%)</title><rect x="0.0000%" y="277" width="0.0837%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>0x11097a980 (1 samples, 0.08%)</title><rect x="0.0000%" y="261" width="0.0837%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>dyld4::ProcessConfig::ProcessConfig(dyld4::KernelArgs const*, dyld4::SyscallDelegate&amp;, lsl::Allocator&amp;) (1 samples, 0.08%)</title><rect x="0.0837%" y="309" width="0.0837%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.3337%" y="319.50"></text></g><g><title>dyld4::ProcessConfig::DyldCache::DyldCache(dyld4::ProcessConfig::Process&amp;, dyld4::ProcessConfig::Security const&amp;, dyld4::ProcessConfig::Logging const&amp;, dyld4::SyscallDelegate&amp;, lsl::Allocator&amp;, dyld4::ProcessConfig const&amp;) (1 samples, 0.08%)</title><rect x="0.0837%" y="293" width="0.0837%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.3337%" y="303.50"></text></g><g><title>dyld4::CacheFinder::CacheFinder(dyld4::ProcessConfig::Process const&amp;, dyld4::ProcessConfig::Logging const&amp;, dyld4::SyscallDelegate&amp;) (1 samples, 0.08%)</title><rect x="0.0837%" y="277" width="0.0837%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.3337%" y="287.50"></text></g><g><title>ignite (1 samples, 0.08%)</title><rect x="0.0837%" y="261" width="0.0837%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.3337%" y="271.50"></text></g><g><title>boot_boot (1 samples, 0.08%)</title><rect x="0.0837%" y="245" width="0.0837%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.3337%" y="255.50"></text></g><g><title>stage_fire (1 samples, 0.08%)</title><rect x="0.0837%" y="229" width="0.0837%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.3337%" y="239.50"></text></g><g><title>_graft_fetch_fire (1 samples, 0.08%)</title><rect x="0.0837%" y="213" width="0.0837%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.3337%" y="223.50"></text></g><g><title>__openat (1 samples, 0.08%)</title><rect x="0.0837%" y="197" width="0.0837%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.3337%" y="207.50"></text></g><g><title>dyld4::ExternallyViewableState::setLibSystemInitialized() (1 samples, 0.08%)</title><rect x="0.1674%" y="277" width="0.0837%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="0.4174%" y="287.50"></text></g><g><title>dyld4::ExternallyViewableState::setDyldState(unsigned char) (1 samples, 0.08%)</title><rect x="0.1674%" y="261" width="0.0837%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.4174%" y="271.50"></text></g><g><title>lsl::Allocator::~Allocator() (1 samples, 0.08%)</title><rect x="0.1674%" y="245" width="0.0837%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.4174%" y="255.50"></text></g><g><title>mach_vm_deallocate (1 samples, 0.08%)</title><rect x="0.1674%" y="229" width="0.0837%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.4174%" y="239.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.08%)</title><rect x="0.1674%" y="213" width="0.0837%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.4174%" y="223.50"></text></g><g><title>__libkernel_init (1 samples, 0.08%)</title><rect x="0.2510%" y="133" width="0.0837%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="0.5010%" y="143.50"></text></g><g><title>mach_init_doit (1 samples, 0.08%)</title><rect x="0.2510%" y="117" width="0.0837%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="0.5010%" y="127.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (3 samples, 0.25%)</title><rect x="0.1674%" y="293" width="0.2510%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="3"/><text x="0.4174%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (2 samples, 0.17%)</title><rect x="0.2510%" y="277" width="0.1674%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="2"/><text x="0.5010%" y="287.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (2 samples, 0.17%)</title><rect x="0.2510%" y="261" width="0.1674%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="2"/><text x="0.5010%" y="271.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (2 samples, 0.17%)</title><rect x="0.2510%" y="245" width="0.1674%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="2"/><text x="0.5010%" y="255.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (2 samples, 0.17%)</title><rect x="0.2510%" y="229" width="0.1674%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="2"/><text x="0.5010%" y="239.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (2 samples, 0.17%)</title><rect x="0.2510%" y="213" width="0.1674%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="2"/><text x="0.5010%" y="223.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (2 samples, 0.17%)</title><rect x="0.2510%" y="197" width="0.1674%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="2"/><text x="0.5010%" y="207.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (2 samples, 0.17%)</title><rect x="0.2510%" y="181" width="0.1674%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="2"/><text x="0.5010%" y="191.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (2 samples, 0.17%)</title><rect x="0.2510%" y="165" width="0.1674%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="2"/><text x="0.5010%" y="175.50"></text></g><g><title>libSystem_initializer (2 samples, 0.17%)</title><rect x="0.2510%" y="149" width="0.1674%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="2"/><text x="0.5010%" y="159.50"></text></g><g><title>libdispatch_init (1 samples, 0.08%)</title><rect x="0.3347%" y="133" width="0.0837%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="1"/><text x="0.5847%" y="143.50"></text></g><g><title>_os_object_init (1 samples, 0.08%)</title><rect x="0.3347%" y="117" width="0.0837%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="1"/><text x="0.5847%" y="127.50"></text></g><g><title>DYLD-STUB$$std::set_terminate(void (*)()) (1 samples, 0.08%)</title><rect x="0.3347%" y="101" width="0.0837%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="1"/><text x="0.5847%" y="111.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (1 samples, 0.08%)</title><rect x="0.4184%" y="293" width="0.0837%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="0.6684%" y="303.50"></text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="277" width="0.0837%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="1"/><text x="0.6684%" y="287.50"></text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="261" width="0.0837%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="1"/><text x="0.6684%" y="271.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="245" width="0.0837%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="1"/><text x="0.6684%" y="255.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="229" width="0.0837%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="1"/><text x="0.6684%" y="239.50"></text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="213" width="0.0837%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="1"/><text x="0.6684%" y="223.50"></text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="197" width="0.0837%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="1"/><text x="0.6684%" y="207.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="181" width="0.0837%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="1"/><text x="0.6684%" y="191.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.08%)</title><rect x="0.4184%" y="165" width="0.0837%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1"/><text x="0.6684%" y="175.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 0.08%)</title><rect x="0.4184%" y="149" width="0.0837%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1"/><text x="0.6684%" y="159.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.08%)</title><rect x="0.4184%" y="133" width="0.0837%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1"/><text x="0.6684%" y="143.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.08%)</title><rect x="0.4184%" y="117" width="0.0837%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1"/><text x="0.6684%" y="127.50"></text></g><g><title>dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&amp;, unsigned int, mach_o::LinkedDylibAttributes*) const (1 samples, 0.08%)</title><rect x="0.4184%" y="101" width="0.0837%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="1"/><text x="0.6684%" y="111.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (6 samples, 0.50%)</title><rect x="0.0837%" y="325" width="0.5021%" height="15" fill="rgb(250,191,14)" fg:x="1" fg:w="6"/><text x="0.3337%" y="335.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (5 samples, 0.42%)</title><rect x="0.1674%" y="309" width="0.4184%" height="15" fill="rgb(239,60,40)" fg:x="2" fg:w="5"/><text x="0.4174%" y="319.50"></text></g><g><title>dyld4::RuntimeState::partitionDelayLoads(std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt;, std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt;, lsl::Vector&lt;dyld4::Loader const*&gt;*) (1 samples, 0.08%)</title><rect x="0.5021%" y="293" width="0.0837%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="1"/><text x="0.7521%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::isDelayInit(dyld4::RuntimeState&amp;) const (1 samples, 0.08%)</title><rect x="0.5021%" y="277" width="0.0837%" height="15" fill="rgb(225,35,8)" fg:x="6" fg:w="1"/><text x="0.7521%" y="287.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="0.5858%" y="245" width="0.0837%" height="15" fill="rgb(250,213,24)" fg:x="7" fg:w="1"/><text x="0.8358%" y="255.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.08%)</title><rect x="0.6695%" y="229" width="0.0837%" height="15" fill="rgb(247,123,22)" fg:x="8" fg:w="1"/><text x="0.9195%" y="239.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="0.7531%" y="229" width="0.0837%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="1"/><text x="1.0031%" y="239.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="1.5063%" y="197" width="0.0837%" height="15" fill="rgb(231,145,46)" fg:x="18" fg:w="1"/><text x="1.7563%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 1.00%)</title><rect x="0.6695%" y="245" width="1.0042%" height="15" fill="rgb(251,118,11)" fg:x="8" fg:w="12"/><text x="0.9195%" y="255.50"></text></g><g><title>free_tiny (10 samples, 0.84%)</title><rect x="0.8368%" y="229" width="0.8368%" height="15" fill="rgb(217,147,25)" fg:x="10" fg:w="10"/><text x="1.0868%" y="239.50"></text></g><g><title>tiny_free_no_lock (7 samples, 0.59%)</title><rect x="1.0879%" y="213" width="0.5858%" height="15" fill="rgb(247,81,37)" fg:x="13" fg:w="7"/><text x="1.3379%" y="223.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="1.5900%" y="197" width="0.0837%" height="15" fill="rgb(209,12,38)" fg:x="19" fg:w="1"/><text x="1.8400%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.08%)</title><rect x="1.6736%" y="245" width="0.0837%" height="15" fill="rgb(227,1,9)" fg:x="20" fg:w="1"/><text x="1.9236%" y="255.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.08%)</title><rect x="1.7573%" y="229" width="0.0837%" height="15" fill="rgb(248,47,43)" fg:x="21" fg:w="1"/><text x="2.0073%" y="239.50"></text></g><g><title>_free (1 samples, 0.08%)</title><rect x="1.8410%" y="229" width="0.0837%" height="15" fill="rgb(221,10,30)" fg:x="22" fg:w="1"/><text x="2.0910%" y="239.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="1.9247%" y="229" width="0.1674%" height="15" fill="rgb(210,229,1)" fg:x="23" fg:w="2"/><text x="2.1747%" y="239.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="2.0921%" y="213" width="0.1674%" height="15" fill="rgb(222,148,37)" fg:x="25" fg:w="2"/><text x="2.3421%" y="223.50"></text></g><g><title>tiny_free_list_add_ptr (3 samples, 0.25%)</title><rect x="3.1799%" y="181" width="0.2510%" height="15" fill="rgb(234,67,33)" fg:x="38" fg:w="3"/><text x="3.4299%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 1.51%)</title><rect x="2.0921%" y="229" width="1.5063%" height="15" fill="rgb(247,98,35)" fg:x="25" fg:w="18"/><text x="2.3421%" y="239.50"></text></g><g><title>free_tiny (16 samples, 1.34%)</title><rect x="2.2594%" y="213" width="1.3389%" height="15" fill="rgb(247,138,52)" fg:x="27" fg:w="16"/><text x="2.5094%" y="223.50"></text></g><g><title>tiny_free_no_lock (11 samples, 0.92%)</title><rect x="2.6778%" y="197" width="0.9205%" height="15" fill="rgb(213,79,30)" fg:x="32" fg:w="11"/><text x="2.9278%" y="207.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="3.4310%" y="181" width="0.1674%" height="15" fill="rgb(246,177,23)" fg:x="41" fg:w="2"/><text x="3.6810%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (2 samples, 0.17%)</title><rect x="3.5983%" y="229" width="0.1674%" height="15" fill="rgb(230,62,27)" fg:x="43" fg:w="2"/><text x="3.8483%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.08%)</title><rect x="3.7657%" y="229" width="0.0837%" height="15" fill="rgb(216,154,8)" fg:x="45" fg:w="1"/><text x="4.0157%" y="239.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::checked_add (1 samples, 0.08%)</title><rect x="3.8494%" y="229" width="0.0837%" height="15" fill="rgb(244,35,45)" fg:x="46" fg:w="1"/><text x="4.0994%" y="239.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.08%)</title><rect x="3.9331%" y="213" width="0.0837%" height="15" fill="rgb(251,115,12)" fg:x="47" fg:w="1"/><text x="4.1831%" y="223.50"></text></g><g><title>__rustc::__rdl_dealloc (2 samples, 0.17%)</title><rect x="4.0167%" y="213" width="0.1674%" height="15" fill="rgb(240,54,50)" fg:x="48" fg:w="2"/><text x="4.2667%" y="223.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="4.1841%" y="213" width="0.0837%" height="15" fill="rgb(233,84,52)" fg:x="50" fg:w="1"/><text x="4.4341%" y="223.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="4.2678%" y="197" width="0.0837%" height="15" fill="rgb(207,117,47)" fg:x="51" fg:w="1"/><text x="4.5178%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="5.1046%" y="181" width="0.0837%" height="15" fill="rgb(249,43,39)" fg:x="61" fg:w="1"/><text x="5.3546%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="5.4393%" y="165" width="0.1674%" height="15" fill="rgb(209,38,44)" fg:x="65" fg:w="2"/><text x="5.6893%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 1.42%)</title><rect x="4.2678%" y="213" width="1.4226%" height="15" fill="rgb(236,212,23)" fg:x="51" fg:w="17"/><text x="4.5178%" y="223.50"></text></g><g><title>free_tiny (16 samples, 1.34%)</title><rect x="4.3515%" y="197" width="1.3389%" height="15" fill="rgb(242,79,21)" fg:x="52" fg:w="16"/><text x="4.6015%" y="207.50"></text></g><g><title>tiny_free_no_lock (6 samples, 0.50%)</title><rect x="5.1883%" y="181" width="0.5021%" height="15" fill="rgb(211,96,35)" fg:x="62" fg:w="6"/><text x="5.4383%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="5.6067%" y="165" width="0.0837%" height="15" fill="rgb(253,215,40)" fg:x="67" fg:w="1"/><text x="5.8567%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.08%)</title><rect x="5.6904%" y="213" width="0.0837%" height="15" fill="rgb(211,81,21)" fg:x="68" fg:w="1"/><text x="5.9404%" y="223.50"></text></g><g><title>_free (1 samples, 0.08%)</title><rect x="5.7741%" y="197" width="0.0837%" height="15" fill="rgb(208,190,38)" fg:x="69" fg:w="1"/><text x="6.0241%" y="207.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="5.8577%" y="197" width="0.0837%" height="15" fill="rgb(235,213,38)" fg:x="70" fg:w="1"/><text x="6.1077%" y="207.50"></text></g><g><title>free_tiny (6 samples, 0.50%)</title><rect x="5.9414%" y="181" width="0.5021%" height="15" fill="rgb(237,122,38)" fg:x="71" fg:w="6"/><text x="6.1914%" y="191.50"></text></g><g><title>tiny_free_no_lock (3 samples, 0.25%)</title><rect x="6.1925%" y="165" width="0.2510%" height="15" fill="rgb(244,218,35)" fg:x="74" fg:w="3"/><text x="6.4425%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="6.3598%" y="149" width="0.0837%" height="15" fill="rgb(240,68,47)" fg:x="76" fg:w="1"/><text x="6.6098%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.59%)</title><rect x="5.9414%" y="197" width="0.5858%" height="15" fill="rgb(210,16,53)" fg:x="71" fg:w="7"/><text x="6.1914%" y="207.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="6.4435%" y="181" width="0.0837%" height="15" fill="rgb(235,124,12)" fg:x="77" fg:w="1"/><text x="6.6935%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.08%)</title><rect x="6.5272%" y="197" width="0.0837%" height="15" fill="rgb(224,169,11)" fg:x="78" fg:w="1"/><text x="6.7772%" y="207.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="6.6946%" y="181" width="0.0837%" height="15" fill="rgb(250,166,2)" fg:x="80" fg:w="1"/><text x="6.9446%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.7782%" y="181" width="0.0837%" height="15" fill="rgb(242,216,29)" fg:x="81" fg:w="1"/><text x="7.0282%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (15 samples, 1.26%)</title><rect x="6.6109%" y="197" width="1.2552%" height="15" fill="rgb(230,116,27)" fg:x="79" fg:w="15"/><text x="6.8609%" y="207.50"></text></g><g><title>free_tiny (12 samples, 1.00%)</title><rect x="6.8619%" y="181" width="1.0042%" height="15" fill="rgb(228,99,48)" fg:x="82" fg:w="12"/><text x="7.1119%" y="191.50"></text></g><g><title>tiny_free_no_lock (5 samples, 0.42%)</title><rect x="7.4477%" y="165" width="0.4184%" height="15" fill="rgb(253,11,6)" fg:x="89" fg:w="5"/><text x="7.6977%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="7.6987%" y="149" width="0.1674%" height="15" fill="rgb(247,143,39)" fg:x="92" fg:w="2"/><text x="7.9487%" y="159.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="8.5356%" y="181" width="0.1674%" height="15" fill="rgb(236,97,10)" fg:x="102" fg:w="2"/><text x="8.7856%" y="191.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="8.7029%" y="181" width="0.0837%" height="15" fill="rgb(233,208,19)" fg:x="104" fg:w="1"/><text x="8.9529%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (3 samples, 0.25%)</title><rect x="9.0377%" y="165" width="0.2510%" height="15" fill="rgb(216,164,2)" fg:x="108" fg:w="3"/><text x="9.2877%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (43 samples, 3.60%)</title><rect x="5.7741%" y="213" width="3.5983%" height="15" fill="rgb(220,129,5)" fg:x="69" fg:w="43"/><text x="6.0241%" y="223.50">core..</text></g><g><title>free_tiny (18 samples, 1.51%)</title><rect x="7.8661%" y="197" width="1.5063%" height="15" fill="rgb(242,17,10)" fg:x="94" fg:w="18"/><text x="8.1161%" y="207.50"></text></g><g><title>tiny_free_no_lock (7 samples, 0.59%)</title><rect x="8.7866%" y="181" width="0.5858%" height="15" fill="rgb(242,107,0)" fg:x="105" fg:w="7"/><text x="9.0366%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="9.2887%" y="165" width="0.0837%" height="15" fill="rgb(251,28,31)" fg:x="111" fg:w="1"/><text x="9.5387%" y="175.50"></text></g><g><title>_free (2 samples, 0.17%)</title><rect x="9.3724%" y="197" width="0.1674%" height="15" fill="rgb(233,223,10)" fg:x="112" fg:w="2"/><text x="9.6224%" y="207.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.08%)</title><rect x="9.5397%" y="181" width="0.0837%" height="15" fill="rgb(215,21,27)" fg:x="114" fg:w="1"/><text x="9.7897%" y="191.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="9.6234%" y="181" width="0.1674%" height="15" fill="rgb(232,23,21)" fg:x="115" fg:w="2"/><text x="9.8734%" y="191.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="10.3766%" y="165" width="0.0837%" height="15" fill="rgb(244,5,23)" fg:x="124" fg:w="1"/><text x="10.6266%" y="175.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="10.4603%" y="165" width="0.0837%" height="15" fill="rgb(226,81,46)" fg:x="125" fg:w="1"/><text x="10.7103%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.33%)</title><rect x="11.8828%" y="149" width="0.3347%" height="15" fill="rgb(247,70,30)" fg:x="142" fg:w="4"/><text x="12.1328%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (37 samples, 3.10%)</title><rect x="9.5397%" y="197" width="3.0962%" height="15" fill="rgb(212,68,19)" fg:x="114" fg:w="37"/><text x="9.7897%" y="207.50">all..</text></g><g><title>free_tiny (34 samples, 2.85%)</title><rect x="9.7908%" y="181" width="2.8452%" height="15" fill="rgb(240,187,13)" fg:x="117" fg:w="34"/><text x="10.0408%" y="191.50">fr..</text></g><g><title>tiny_free_no_lock (25 samples, 2.09%)</title><rect x="10.5439%" y="165" width="2.0921%" height="15" fill="rgb(223,113,26)" fg:x="126" fg:w="25"/><text x="10.7939%" y="175.50">t..</text></g><g><title>tiny_free_list_remove_ptr (5 samples, 0.42%)</title><rect x="12.2176%" y="149" width="0.4184%" height="15" fill="rgb(206,192,2)" fg:x="146" fg:w="5"/><text x="12.4676%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (3 samples, 0.25%)</title><rect x="12.6360%" y="197" width="0.2510%" height="15" fill="rgb(241,108,4)" fg:x="151" fg:w="3"/><text x="12.8860%" y="207.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::overflowing_mul (1 samples, 0.08%)</title><rect x="12.8870%" y="197" width="0.0837%" height="15" fill="rgb(247,173,49)" fg:x="154" fg:w="1"/><text x="13.1370%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (3 samples, 0.25%)</title><rect x="12.9707%" y="181" width="0.2510%" height="15" fill="rgb(224,114,35)" fg:x="155" fg:w="3"/><text x="13.2207%" y="191.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="13.7238%" y="165" width="0.0837%" height="15" fill="rgb(245,159,27)" fg:x="164" fg:w="1"/><text x="13.9738%" y="175.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="13.8075%" y="165" width="0.0837%" height="15" fill="rgb(245,172,44)" fg:x="165" fg:w="1"/><text x="14.0575%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="13.8912%" y="165" width="0.0837%" height="15" fill="rgb(236,23,11)" fg:x="166" fg:w="1"/><text x="14.1412%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="14.3096%" y="149" width="0.1674%" height="15" fill="rgb(205,117,38)" fg:x="171" fg:w="2"/><text x="14.5596%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (20 samples, 1.67%)</title><rect x="12.9707%" y="197" width="1.6736%" height="15" fill="rgb(237,72,25)" fg:x="155" fg:w="20"/><text x="13.2207%" y="207.50"></text></g><g><title>free_tiny (17 samples, 1.42%)</title><rect x="13.2218%" y="181" width="1.4226%" height="15" fill="rgb(244,70,9)" fg:x="158" fg:w="17"/><text x="13.4718%" y="191.50"></text></g><g><title>tiny_free_no_lock (8 samples, 0.67%)</title><rect x="13.9749%" y="165" width="0.6695%" height="15" fill="rgb(217,125,39)" fg:x="167" fg:w="8"/><text x="14.2249%" y="175.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="14.4770%" y="149" width="0.1674%" height="15" fill="rgb(235,36,10)" fg:x="173" fg:w="2"/><text x="14.7270%" y="159.50"></text></g><g><title>free (1 samples, 0.08%)</title><rect x="14.6444%" y="197" width="0.0837%" height="15" fill="rgb(251,123,47)" fg:x="175" fg:w="1"/><text x="14.8944%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="15.0628%" y="181" width="0.0837%" height="15" fill="rgb(221,13,13)" fg:x="180" fg:w="1"/><text x="15.3128%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.33%)</title><rect x="15.7322%" y="165" width="0.3347%" height="15" fill="rgb(238,131,9)" fg:x="188" fg:w="4"/><text x="15.9822%" y="175.50"></text></g><g><title>free_tiny (19 samples, 1.59%)</title><rect x="14.7280%" y="197" width="1.5900%" height="15" fill="rgb(211,50,8)" fg:x="176" fg:w="19"/><text x="14.9780%" y="207.50"></text></g><g><title>tiny_free_no_lock (14 samples, 1.17%)</title><rect x="15.1464%" y="181" width="1.1715%" height="15" fill="rgb(245,182,24)" fg:x="181" fg:w="14"/><text x="15.3964%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.25%)</title><rect x="16.0669%" y="165" width="0.2510%" height="15" fill="rgb(242,14,37)" fg:x="192" fg:w="3"/><text x="16.3169%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (84 samples, 7.03%)</title><rect x="9.3724%" y="213" width="7.0293%" height="15" fill="rgb(246,228,12)" fg:x="112" fg:w="84"/><text x="9.6224%" y="223.50">core::ptr..</text></g><g><title>szone_try_free_default (1 samples, 0.08%)</title><rect x="16.3180%" y="197" width="0.0837%" height="15" fill="rgb(213,55,15)" fg:x="195" fg:w="1"/><text x="16.5680%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (158 samples, 13.22%)</title><rect x="3.9331%" y="229" width="13.2218%" height="15" fill="rgb(209,9,3)" fg:x="47" fg:w="158"/><text x="4.1831%" y="239.50">core::ptr::drop_in_p..</text></g><g><title>free_tiny (9 samples, 0.75%)</title><rect x="16.4017%" y="213" width="0.7531%" height="15" fill="rgb(230,59,30)" fg:x="196" fg:w="9"/><text x="16.6517%" y="223.50"></text></g><g><title>tiny_free_no_lock (6 samples, 0.50%)</title><rect x="16.6527%" y="197" width="0.5021%" height="15" fill="rgb(209,121,21)" fg:x="199" fg:w="6"/><text x="16.9027%" y="207.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="16.9874%" y="181" width="0.1674%" height="15" fill="rgb(220,109,13)" fg:x="203" fg:w="2"/><text x="17.2374%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (3 samples, 0.25%)</title><rect x="17.1548%" y="229" width="0.2510%" height="15" fill="rgb(232,18,1)" fg:x="205" fg:w="3"/><text x="17.4048%" y="239.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="17.2385%" y="213" width="0.1674%" height="15" fill="rgb(215,41,42)" fg:x="206" fg:w="2"/><text x="17.4885%" y="223.50"></text></g><g><title>tiny_free_no_lock (2 samples, 0.17%)</title><rect x="17.2385%" y="197" width="0.1674%" height="15" fill="rgb(224,123,36)" fg:x="206" fg:w="2"/><text x="17.4885%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="17.5732%" y="213" width="0.1674%" height="15" fill="rgb(240,125,3)" fg:x="210" fg:w="2"/><text x="17.8232%" y="223.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="17.7406%" y="213" width="0.0837%" height="15" fill="rgb(205,98,50)" fg:x="212" fg:w="1"/><text x="17.9906%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (197 samples, 16.49%)</title><rect x="1.7573%" y="245" width="16.4854%" height="15" fill="rgb(205,185,37)" fg:x="21" fg:w="197"/><text x="2.0073%" y="255.50">core::ptr::drop_in_place&lt;..</text></g><g><title>free_tiny (10 samples, 0.84%)</title><rect x="17.4059%" y="229" width="0.8368%" height="15" fill="rgb(238,207,15)" fg:x="208" fg:w="10"/><text x="17.6559%" y="239.50"></text></g><g><title>tiny_free_no_lock (5 samples, 0.42%)</title><rect x="17.8243%" y="213" width="0.4184%" height="15" fill="rgb(213,199,42)" fg:x="213" fg:w="5"/><text x="18.0743%" y="223.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="18.1590%" y="197" width="0.0837%" height="15" fill="rgb(235,201,11)" fg:x="217" fg:w="1"/><text x="18.4090%" y="207.50"></text></g><g><title>_free (1 samples, 0.08%)</title><rect x="18.2427%" y="229" width="0.0837%" height="15" fill="rgb(207,46,11)" fg:x="218" fg:w="1"/><text x="18.4927%" y="239.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="18.3264%" y="213" width="0.0837%" height="15" fill="rgb(241,35,35)" fg:x="219" fg:w="1"/><text x="18.5764%" y="223.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="18.9958%" y="197" width="0.0837%" height="15" fill="rgb(243,32,47)" fg:x="227" fg:w="1"/><text x="19.2458%" y="207.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="19.0795%" y="197" width="0.0837%" height="15" fill="rgb(247,202,23)" fg:x="228" fg:w="1"/><text x="19.3295%" y="207.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="19.7490%" y="181" width="0.1674%" height="15" fill="rgb(219,102,11)" fg:x="236" fg:w="2"/><text x="19.9990%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 1.76%)</title><rect x="18.3264%" y="229" width="1.7573%" height="15" fill="rgb(243,110,44)" fg:x="219" fg:w="21"/><text x="18.5764%" y="239.50"></text></g><g><title>free_tiny (20 samples, 1.67%)</title><rect x="18.4100%" y="213" width="1.6736%" height="15" fill="rgb(222,74,54)" fg:x="220" fg:w="20"/><text x="18.6600%" y="223.50"></text></g><g><title>tiny_free_no_lock (11 samples, 0.92%)</title><rect x="19.1632%" y="197" width="0.9205%" height="15" fill="rgb(216,99,12)" fg:x="229" fg:w="11"/><text x="19.4132%" y="207.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="19.9163%" y="181" width="0.1674%" height="15" fill="rgb(226,22,26)" fg:x="238" fg:w="2"/><text x="20.1663%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.08%)</title><rect x="20.0837%" y="229" width="0.0837%" height="15" fill="rgb(217,163,10)" fg:x="240" fg:w="1"/><text x="20.3337%" y="239.50"></text></g><g><title>_free (2 samples, 0.17%)</title><rect x="20.1674%" y="213" width="0.1674%" height="15" fill="rgb(213,25,53)" fg:x="241" fg:w="2"/><text x="20.4174%" y="223.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="20.3347%" y="213" width="0.0837%" height="15" fill="rgb(252,105,26)" fg:x="243" fg:w="1"/><text x="20.5847%" y="223.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="20.8368%" y="181" width="0.0837%" height="15" fill="rgb(220,39,43)" fg:x="249" fg:w="1"/><text x="21.0868%" y="191.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="20.9205%" y="181" width="0.0837%" height="15" fill="rgb(229,68,48)" fg:x="250" fg:w="1"/><text x="21.1705%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="21.6736%" y="165" width="0.0837%" height="15" fill="rgb(252,8,32)" fg:x="259" fg:w="1"/><text x="21.9236%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 1.67%)</title><rect x="20.4184%" y="213" width="1.6736%" height="15" fill="rgb(223,20,43)" fg:x="244" fg:w="20"/><text x="20.6684%" y="223.50"></text></g><g><title>free_tiny (20 samples, 1.67%)</title><rect x="20.4184%" y="197" width="1.6736%" height="15" fill="rgb(229,81,49)" fg:x="244" fg:w="20"/><text x="20.6684%" y="207.50"></text></g><g><title>tiny_free_no_lock (13 samples, 1.09%)</title><rect x="21.0042%" y="181" width="1.0879%" height="15" fill="rgb(236,28,36)" fg:x="251" fg:w="13"/><text x="21.2542%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (4 samples, 0.33%)</title><rect x="21.7573%" y="165" width="0.3347%" height="15" fill="rgb(249,185,26)" fg:x="260" fg:w="4"/><text x="22.0073%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.08%)</title><rect x="22.0921%" y="213" width="0.0837%" height="15" fill="rgb(249,174,33)" fg:x="264" fg:w="1"/><text x="22.3421%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.08%)</title><rect x="22.1757%" y="213" width="0.0837%" height="15" fill="rgb(233,201,37)" fg:x="265" fg:w="1"/><text x="22.4257%" y="223.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="22.2594%" y="197" width="0.1674%" height="15" fill="rgb(221,78,26)" fg:x="266" fg:w="2"/><text x="22.5094%" y="207.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.08%)</title><rect x="22.4268%" y="181" width="0.0837%" height="15" fill="rgb(250,127,30)" fg:x="268" fg:w="1"/><text x="22.6768%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (2 samples, 0.17%)</title><rect x="23.1799%" y="149" width="0.1674%" height="15" fill="rgb(230,49,44)" fg:x="277" fg:w="2"/><text x="23.4299%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (12 samples, 1.00%)</title><rect x="22.4268%" y="197" width="1.0042%" height="15" fill="rgb(229,67,23)" fg:x="268" fg:w="12"/><text x="22.6768%" y="207.50"></text></g><g><title>free_tiny (11 samples, 0.92%)</title><rect x="22.5105%" y="181" width="0.9205%" height="15" fill="rgb(249,83,47)" fg:x="269" fg:w="11"/><text x="22.7605%" y="191.50"></text></g><g><title>tiny_free_no_lock (8 samples, 0.67%)</title><rect x="22.7615%" y="165" width="0.6695%" height="15" fill="rgb(215,43,3)" fg:x="272" fg:w="8"/><text x="23.0115%" y="175.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="23.3473%" y="149" width="0.0837%" height="15" fill="rgb(238,154,13)" fg:x="279" fg:w="1"/><text x="23.5973%" y="159.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (3 samples, 0.25%)</title><rect x="23.7657%" y="181" width="0.2510%" height="15" fill="rgb(219,56,2)" fg:x="284" fg:w="3"/><text x="24.0157%" y="191.50"></text></g><g><title>tiny_free_list_add_ptr (3 samples, 0.25%)</title><rect x="24.5188%" y="165" width="0.2510%" height="15" fill="rgb(233,0,4)" fg:x="293" fg:w="3"/><text x="24.7688%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (32 samples, 2.68%)</title><rect x="22.2594%" y="213" width="2.6778%" height="15" fill="rgb(235,30,7)" fg:x="266" fg:w="32"/><text x="22.5094%" y="223.50">co..</text></g><g><title>free_tiny (18 samples, 1.51%)</title><rect x="23.4310%" y="197" width="1.5063%" height="15" fill="rgb(250,79,13)" fg:x="280" fg:w="18"/><text x="23.6810%" y="207.50"></text></g><g><title>tiny_free_no_lock (11 samples, 0.92%)</title><rect x="24.0167%" y="181" width="0.9205%" height="15" fill="rgb(211,146,34)" fg:x="287" fg:w="11"/><text x="24.2667%" y="191.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.17%)</title><rect x="24.7699%" y="165" width="0.1674%" height="15" fill="rgb(228,22,38)" fg:x="296" fg:w="2"/><text x="25.0199%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;vexy_json_core::ast::value::Value&gt; (1 samples, 0.08%)</title><rect x="24.9372%" y="213" width="0.0837%" height="15" fill="rgb(235,168,5)" fg:x="298" fg:w="1"/><text x="25.1872%" y="223.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="25.6067%" y="197" width="0.0837%" height="15" fill="rgb(221,155,16)" fg:x="306" fg:w="1"/><text x="25.8567%" y="207.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.08%)</title><rect x="25.6904%" y="197" width="0.0837%" height="15" fill="rgb(215,215,53)" fg:x="307" fg:w="1"/><text x="25.9404%" y="207.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="25.7741%" y="197" width="0.0837%" height="15" fill="rgb(223,4,10)" fg:x="308" fg:w="1"/><text x="26.0241%" y="207.50"></text></g><g><title>free_tiny (20 samples, 1.67%)</title><rect x="25.0209%" y="213" width="1.6736%" height="15" fill="rgb(234,103,6)" fg:x="299" fg:w="20"/><text x="25.2709%" y="223.50"></text></g><g><title>tiny_free_no_lock (10 samples, 0.84%)</title><rect x="25.8577%" y="197" width="0.8368%" height="15" fill="rgb(227,97,0)" fg:x="309" fg:w="10"/><text x="26.1077%" y="207.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.33%)</title><rect x="26.3598%" y="181" width="0.3347%" height="15" fill="rgb(234,150,53)" fg:x="315" fg:w="4"/><text x="26.6098%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,vexy_json_core::ast::value::Value)&gt; (79 samples, 6.61%)</title><rect x="20.1674%" y="229" width="6.6109%" height="15" fill="rgb(228,201,54)" fg:x="241" fg:w="79"/><text x="20.4174%" y="239.50">core::ptr..</text></g><g><title>szone_try_free_default (1 samples, 0.08%)</title><rect x="26.6946%" y="213" width="0.0837%" height="15" fill="rgb(222,22,37)" fg:x="319" fg:w="1"/><text x="26.9446%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;[vexy_json_core::ast::value::Value]&gt; (108 samples, 9.04%)</title><rect x="18.2427%" y="245" width="9.0377%" height="15" fill="rgb(237,53,32)" fg:x="218" fg:w="108"/><text x="18.4927%" y="255.50">core::ptr::dr..</text></g><g><title>free_tiny (6 samples, 0.50%)</title><rect x="26.7782%" y="229" width="0.5021%" height="15" fill="rgb(233,25,53)" fg:x="320" fg:w="6"/><text x="27.0282%" y="239.50"></text></g><g><title>tiny_free_no_lock (3 samples, 0.25%)</title><rect x="27.0293%" y="213" width="0.2510%" height="15" fill="rgb(210,40,34)" fg:x="323" fg:w="3"/><text x="27.2793%" y="223.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="27.1967%" y="197" width="0.0837%" height="15" fill="rgb(241,220,44)" fg:x="325" fg:w="1"/><text x="27.4467%" y="207.50"></text></g><g><title>free_small (2 samples, 0.17%)</title><rect x="27.2803%" y="245" width="0.1674%" height="15" fill="rgb(235,28,35)" fg:x="326" fg:w="2"/><text x="27.5303%" y="255.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (1 samples, 0.08%)</title><rect x="27.3640%" y="229" width="0.0837%" height="15" fill="rgb(210,56,17)" fg:x="327" fg:w="1"/><text x="27.6140%" y="239.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="27.4477%" y="245" width="0.1674%" height="15" fill="rgb(224,130,29)" fg:x="328" fg:w="2"/><text x="27.6977%" y="255.50"></text></g><g><title>tiny_free_no_lock (2 samples, 0.17%)</title><rect x="27.4477%" y="229" width="0.1674%" height="15" fill="rgb(235,212,8)" fg:x="328" fg:w="2"/><text x="27.6977%" y="239.50"></text></g><g><title>_tlv_get_addr (1 samples, 0.08%)</title><rect x="27.6151%" y="213" width="0.0837%" height="15" fill="rgb(223,33,50)" fg:x="330" fg:w="1"/><text x="27.8651%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.17%)</title><rect x="27.8661%" y="197" width="0.1674%" height="15" fill="rgb(219,149,13)" fg:x="333" fg:w="2"/><text x="28.1161%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.17%)</title><rect x="27.8661%" y="181" width="0.1674%" height="15" fill="rgb(250,156,29)" fg:x="333" fg:w="2"/><text x="28.1161%" y="191.50"></text></g><g><title>_realloc (2 samples, 0.17%)</title><rect x="27.8661%" y="165" width="0.1674%" height="15" fill="rgb(216,193,19)" fg:x="333" fg:w="2"/><text x="28.1161%" y="175.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.17%)</title><rect x="27.8661%" y="149" width="0.1674%" height="15" fill="rgb(216,135,14)" fg:x="333" fg:w="2"/><text x="28.1161%" y="159.50"></text></g><g><title>szone_realloc (2 samples, 0.17%)</title><rect x="27.8661%" y="133" width="0.1674%" height="15" fill="rgb(241,47,5)" fg:x="333" fg:w="2"/><text x="28.1161%" y="143.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="27.8661%" y="117" width="0.1674%" height="15" fill="rgb(233,42,35)" fg:x="333" fg:w="2"/><text x="28.1161%" y="127.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="27.9498%" y="101" width="0.0837%" height="15" fill="rgb(231,13,6)" fg:x="334" fg:w="1"/><text x="28.1998%" y="111.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="27.9498%" y="85" width="0.0837%" height="15" fill="rgb(207,181,40)" fg:x="334" fg:w="1"/><text x="28.1998%" y="95.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="28.0335%" y="197" width="0.2510%" height="15" fill="rgb(254,173,49)" fg:x="335" fg:w="3"/><text x="28.2835%" y="207.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.17%)</title><rect x="28.1172%" y="181" width="0.1674%" height="15" fill="rgb(221,1,38)" fg:x="336" fg:w="2"/><text x="28.3672%" y="191.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="28.6192%" y="181" width="0.0837%" height="15" fill="rgb(206,124,46)" fg:x="342" fg:w="1"/><text x="28.8692%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.08%)</title><rect x="28.6192%" y="165" width="0.0837%" height="15" fill="rgb(249,21,11)" fg:x="342" fg:w="1"/><text x="28.8692%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.33%)</title><rect x="29.4561%" y="165" width="0.3347%" height="15" fill="rgb(222,201,40)" fg:x="352" fg:w="4"/><text x="29.7061%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.17%)</title><rect x="29.6234%" y="149" width="0.1674%" height="15" fill="rgb(235,61,29)" fg:x="354" fg:w="2"/><text x="29.8734%" y="159.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="30.2092%" y="149" width="0.0837%" height="15" fill="rgb(219,207,3)" fg:x="361" fg:w="1"/><text x="30.4592%" y="159.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="30.2929%" y="149" width="0.0837%" height="15" fill="rgb(222,56,46)" fg:x="362" fg:w="1"/><text x="30.5429%" y="159.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="30.3766%" y="149" width="0.0837%" height="15" fill="rgb(239,76,54)" fg:x="363" fg:w="1"/><text x="30.6266%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.42%)</title><rect x="30.4603%" y="149" width="0.4184%" height="15" fill="rgb(231,124,27)" fg:x="364" fg:w="5"/><text x="30.7103%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.17%)</title><rect x="30.7113%" y="133" width="0.1674%" height="15" fill="rgb(249,195,6)" fg:x="367" fg:w="2"/><text x="30.9613%" y="143.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="30.8787%" y="149" width="0.1674%" height="15" fill="rgb(237,174,47)" fg:x="369" fg:w="2"/><text x="31.1287%" y="159.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="30.9623%" y="133" width="0.0837%" height="15" fill="rgb(206,201,31)" fg:x="370" fg:w="1"/><text x="31.2123%" y="143.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="30.9623%" y="117" width="0.0837%" height="15" fill="rgb(231,57,52)" fg:x="370" fg:w="1"/><text x="31.2123%" y="127.50"></text></g><g><title>set_tiny_meta_header_in_use (2 samples, 0.17%)</title><rect x="31.2971%" y="117" width="0.1674%" height="15" fill="rgb(248,177,22)" fg:x="374" fg:w="2"/><text x="31.5471%" y="127.50"></text></g><g><title>szone_malloc_should_clear (7 samples, 0.59%)</title><rect x="31.0460%" y="149" width="0.5858%" height="15" fill="rgb(215,211,37)" fg:x="371" fg:w="7"/><text x="31.2960%" y="159.50"></text></g><g><title>tiny_malloc_should_clear (7 samples, 0.59%)</title><rect x="31.0460%" y="133" width="0.5858%" height="15" fill="rgb(241,128,51)" fg:x="371" fg:w="7"/><text x="31.2960%" y="143.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="31.4644%" y="117" width="0.1674%" height="15" fill="rgb(227,165,31)" fg:x="376" fg:w="2"/><text x="31.7144%" y="127.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="31.5481%" y="101" width="0.0837%" height="15" fill="rgb(228,167,24)" fg:x="377" fg:w="1"/><text x="31.7981%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (36 samples, 3.01%)</title><rect x="28.7029%" y="181" width="3.0126%" height="15" fill="rgb(228,143,12)" fg:x="343" fg:w="36"/><text x="28.9529%" y="191.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 1.92%)</title><rect x="29.7908%" y="165" width="1.9247%" height="15" fill="rgb(249,149,8)" fg:x="356" fg:w="23"/><text x="30.0408%" y="175.50">h..</text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="31.6318%" y="149" width="0.0837%" height="15" fill="rgb(243,35,44)" fg:x="378" fg:w="1"/><text x="31.8818%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (4 samples, 0.33%)</title><rect x="32.2176%" y="165" width="0.3347%" height="15" fill="rgb(246,89,9)" fg:x="385" fg:w="4"/><text x="32.4676%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.08%)</title><rect x="32.5523%" y="165" width="0.0837%" height="15" fill="rgb(233,213,13)" fg:x="389" fg:w="1"/><text x="32.8023%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (39 samples, 3.26%)</title><rect x="31.7155%" y="181" width="3.2636%" height="15" fill="rgb(233,141,41)" fg:x="379" fg:w="39"/><text x="31.9655%" y="191.50">zzs..</text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (28 samples, 2.34%)</title><rect x="32.6360%" y="165" width="2.3431%" height="15" fill="rgb(239,167,4)" fg:x="390" fg:w="28"/><text x="32.8860%" y="175.50">&lt;..</text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.08%)</title><rect x="35.7322%" y="165" width="0.0837%" height="15" fill="rgb(209,217,16)" fg:x="427" fg:w="1"/><text x="35.9822%" y="175.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="35.8159%" y="165" width="0.0837%" height="15" fill="rgb(219,88,35)" fg:x="428" fg:w="1"/><text x="36.0659%" y="175.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="36.0669%" y="149" width="0.0837%" height="15" fill="rgb(220,193,23)" fg:x="431" fg:w="1"/><text x="36.3169%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.17%)</title><rect x="36.1506%" y="149" width="0.1674%" height="15" fill="rgb(230,90,52)" fg:x="432" fg:w="2"/><text x="36.4006%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="36.2343%" y="133" width="0.0837%" height="15" fill="rgb(252,106,19)" fg:x="433" fg:w="1"/><text x="36.4843%" y="143.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="36.4854%" y="133" width="0.0837%" height="15" fill="rgb(206,74,20)" fg:x="436" fg:w="1"/><text x="36.7354%" y="143.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="36.5690%" y="133" width="0.1674%" height="15" fill="rgb(230,138,44)" fg:x="437" fg:w="2"/><text x="36.8190%" y="143.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="36.7364%" y="133" width="0.0837%" height="15" fill="rgb(235,182,43)" fg:x="439" fg:w="1"/><text x="36.9864%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.25%)</title><rect x="36.8201%" y="133" width="0.2510%" height="15" fill="rgb(242,16,51)" fg:x="440" fg:w="3"/><text x="37.0701%" y="143.50"></text></g><g><title>free_tiny (4 samples, 0.33%)</title><rect x="37.0711%" y="133" width="0.3347%" height="15" fill="rgb(248,9,4)" fg:x="443" fg:w="4"/><text x="37.3211%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 2.01%)</title><rect x="35.8996%" y="165" width="2.0084%" height="15" fill="rgb(210,31,22)" fg:x="429" fg:w="24"/><text x="36.1496%" y="175.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (19 samples, 1.59%)</title><rect x="36.3180%" y="149" width="1.5900%" height="15" fill="rgb(239,54,39)" fg:x="434" fg:w="19"/><text x="36.5680%" y="159.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.50%)</title><rect x="37.4059%" y="133" width="0.5021%" height="15" fill="rgb(230,99,41)" fg:x="447" fg:w="6"/><text x="37.6559%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.50%)</title><rect x="37.4059%" y="117" width="0.5021%" height="15" fill="rgb(253,106,12)" fg:x="447" fg:w="6"/><text x="37.6559%" y="127.50"></text></g><g><title>set_tiny_meta_header_in_use (2 samples, 0.17%)</title><rect x="37.7406%" y="101" width="0.1674%" height="15" fill="rgb(213,46,41)" fg:x="451" fg:w="2"/><text x="37.9906%" y="111.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (3 samples, 0.25%)</title><rect x="38.3264%" y="149" width="0.2510%" height="15" fill="rgb(215,133,35)" fg:x="458" fg:w="3"/><text x="38.5764%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="38.5774%" y="149" width="0.2510%" height="15" fill="rgb(213,28,5)" fg:x="461" fg:w="3"/><text x="38.8274%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (14 samples, 1.17%)</title><rect x="37.9079%" y="165" width="1.1715%" height="15" fill="rgb(215,77,49)" fg:x="453" fg:w="14"/><text x="38.1579%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (3 samples, 0.25%)</title><rect x="38.8285%" y="149" width="0.2510%" height="15" fill="rgb(248,100,22)" fg:x="464" fg:w="3"/><text x="39.0785%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.25%)</title><rect x="39.4142%" y="149" width="0.2510%" height="15" fill="rgb(208,67,9)" fg:x="471" fg:w="3"/><text x="39.6642%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.17%)</title><rect x="39.4979%" y="133" width="0.1674%" height="15" fill="rgb(219,133,21)" fg:x="472" fg:w="2"/><text x="39.7479%" y="143.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="39.4979%" y="117" width="0.1674%" height="15" fill="rgb(246,46,29)" fg:x="472" fg:w="2"/><text x="39.7479%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="39.4979%" y="101" width="0.1674%" height="15" fill="rgb(246,185,52)" fg:x="472" fg:w="2"/><text x="39.7479%" y="111.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.08%)</title><rect x="39.5816%" y="85" width="0.0837%" height="15" fill="rgb(252,136,11)" fg:x="473" fg:w="1"/><text x="39.8316%" y="95.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.33%)</title><rect x="39.6653%" y="149" width="0.3347%" height="15" fill="rgb(219,138,53)" fg:x="474" fg:w="4"/><text x="39.9153%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (2 samples, 0.17%)</title><rect x="39.8326%" y="133" width="0.1674%" height="15" fill="rgb(211,51,23)" fg:x="476" fg:w="2"/><text x="40.0826%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.08%)</title><rect x="40.2510%" y="133" width="0.0837%" height="15" fill="rgb(247,221,28)" fg:x="481" fg:w="1"/><text x="40.5010%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="40.2510%" y="117" width="0.0837%" height="15" fill="rgb(251,222,45)" fg:x="481" fg:w="1"/><text x="40.5010%" y="127.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.17%)</title><rect x="40.5858%" y="101" width="0.1674%" height="15" fill="rgb(217,162,53)" fg:x="485" fg:w="2"/><text x="40.8358%" y="111.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.25%)</title><rect x="40.9205%" y="69" width="0.2510%" height="15" fill="rgb(229,93,14)" fg:x="489" fg:w="3"/><text x="41.1705%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.84%)</title><rect x="40.7531%" y="101" width="0.8368%" height="15" fill="rgb(209,67,49)" fg:x="487" fg:w="10"/><text x="41.0031%" y="111.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.84%)</title><rect x="40.7531%" y="85" width="0.8368%" height="15" fill="rgb(213,87,29)" fg:x="487" fg:w="10"/><text x="41.0031%" y="95.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.42%)</title><rect x="41.1715%" y="69" width="0.4184%" height="15" fill="rgb(205,151,52)" fg:x="492" fg:w="5"/><text x="41.4215%" y="79.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.42%)</title><rect x="41.1715%" y="53" width="0.4184%" height="15" fill="rgb(253,215,39)" fg:x="492" fg:w="5"/><text x="41.4215%" y="63.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (31 samples, 2.59%)</title><rect x="39.0795%" y="165" width="2.5941%" height="15" fill="rgb(221,220,41)" fg:x="467" fg:w="31"/><text x="39.3295%" y="175.50">zz..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (20 samples, 1.67%)</title><rect x="40.0000%" y="149" width="1.6736%" height="15" fill="rgb(218,133,21)" fg:x="478" fg:w="20"/><text x="40.2500%" y="159.50"></text></g><g><title>vexy_json_core::parser::unescape_string (16 samples, 1.34%)</title><rect x="40.3347%" y="133" width="1.3389%" height="15" fill="rgb(221,193,43)" fg:x="482" fg:w="16"/><text x="40.5847%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 1.09%)</title><rect x="40.5858%" y="117" width="1.0879%" height="15" fill="rgb(240,128,52)" fg:x="485" fg:w="13"/><text x="40.8358%" y="127.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="41.5900%" y="101" width="0.0837%" height="15" fill="rgb(253,114,12)" fg:x="497" fg:w="1"/><text x="41.8400%" y="111.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="41.7573%" y="149" width="0.2510%" height="15" fill="rgb(215,223,47)" fg:x="499" fg:w="3"/><text x="42.0073%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="41.9247%" y="133" width="0.0837%" height="15" fill="rgb(248,225,23)" fg:x="501" fg:w="1"/><text x="42.1747%" y="143.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.08%)</title><rect x="42.4268%" y="117" width="0.0837%" height="15" fill="rgb(250,108,0)" fg:x="507" fg:w="1"/><text x="42.6768%" y="127.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="42.5105%" y="117" width="0.0837%" height="15" fill="rgb(228,208,7)" fg:x="508" fg:w="1"/><text x="42.7605%" y="127.50"></text></g><g><title>szone_size (1 samples, 0.08%)</title><rect x="42.9289%" y="53" width="0.0837%" height="15" fill="rgb(244,45,10)" fg:x="513" fg:w="1"/><text x="43.1789%" y="63.50"></text></g><g><title>tiny_size (1 samples, 0.08%)</title><rect x="42.9289%" y="37" width="0.0837%" height="15" fill="rgb(207,125,25)" fg:x="513" fg:w="1"/><text x="43.1789%" y="47.50"></text></g><g><title>_malloc_zone_realloc (5 samples, 0.42%)</title><rect x="42.8452%" y="85" width="0.4184%" height="15" fill="rgb(210,195,18)" fg:x="512" fg:w="5"/><text x="43.0952%" y="95.50"></text></g><g><title>szone_realloc (4 samples, 0.33%)</title><rect x="42.9289%" y="69" width="0.3347%" height="15" fill="rgb(249,80,12)" fg:x="513" fg:w="4"/><text x="43.1789%" y="79.50"></text></g><g><title>tiny_try_realloc_in_place (3 samples, 0.25%)</title><rect x="43.0126%" y="53" width="0.2510%" height="15" fill="rgb(221,65,9)" fg:x="514" fg:w="3"/><text x="43.2626%" y="63.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="43.1799%" y="37" width="0.0837%" height="15" fill="rgb(235,49,36)" fg:x="516" fg:w="1"/><text x="43.4299%" y="47.50"></text></g><g><title>szone_realloc (1 samples, 0.08%)</title><rect x="43.2636%" y="85" width="0.0837%" height="15" fill="rgb(225,32,20)" fg:x="517" fg:w="1"/><text x="43.5136%" y="95.50"></text></g><g><title>_realloc (8 samples, 0.67%)</title><rect x="42.7615%" y="101" width="0.6695%" height="15" fill="rgb(215,141,46)" fg:x="511" fg:w="8"/><text x="43.0115%" y="111.50"></text></g><g><title>tiny_size (1 samples, 0.08%)</title><rect x="43.3473%" y="85" width="0.0837%" height="15" fill="rgb(250,160,47)" fg:x="518" fg:w="1"/><text x="43.5973%" y="95.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="43.4310%" y="85" width="0.0837%" height="15" fill="rgb(216,222,40)" fg:x="519" fg:w="1"/><text x="43.6810%" y="95.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.84%)</title><rect x="43.4310%" y="101" width="0.8368%" height="15" fill="rgb(234,217,39)" fg:x="519" fg:w="10"/><text x="43.6810%" y="111.50"></text></g><g><title>tiny_malloc_should_clear (9 samples, 0.75%)</title><rect x="43.5146%" y="85" width="0.7531%" height="15" fill="rgb(207,178,40)" fg:x="520" fg:w="9"/><text x="43.7646%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.42%)</title><rect x="43.8494%" y="69" width="0.4184%" height="15" fill="rgb(221,136,13)" fg:x="524" fg:w="5"/><text x="44.0994%" y="79.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="44.1841%" y="53" width="0.0837%" height="15" fill="rgb(249,199,10)" fg:x="528" fg:w="1"/><text x="44.4341%" y="63.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (32 samples, 2.68%)</title><rect x="41.6736%" y="165" width="2.6778%" height="15" fill="rgb(249,222,13)" fg:x="498" fg:w="32"/><text x="41.9236%" y="175.50">zz..</text></g><g><title>vexy_json_core::parser::unescape_string (28 samples, 2.34%)</title><rect x="42.0084%" y="149" width="2.3431%" height="15" fill="rgb(244,185,38)" fg:x="502" fg:w="28"/><text x="42.2584%" y="159.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (25 samples, 2.09%)</title><rect x="42.2594%" y="133" width="2.0921%" height="15" fill="rgb(236,202,9)" fg:x="505" fg:w="25"/><text x="42.5094%" y="143.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (21 samples, 1.76%)</title><rect x="42.5941%" y="117" width="1.7573%" height="15" fill="rgb(250,229,37)" fg:x="509" fg:w="21"/><text x="42.8441%" y="127.50"></text></g><g><title>szone_size (1 samples, 0.08%)</title><rect x="44.2678%" y="101" width="0.0837%" height="15" fill="rgb(206,174,23)" fg:x="529" fg:w="1"/><text x="44.5178%" y="111.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.17%)</title><rect x="44.4351%" y="133" width="0.1674%" height="15" fill="rgb(211,33,43)" fg:x="531" fg:w="2"/><text x="44.6851%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (1 samples, 0.08%)</title><rect x="44.6025%" y="133" width="0.0837%" height="15" fill="rgb(245,58,50)" fg:x="533" fg:w="1"/><text x="44.8525%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (5 samples, 0.42%)</title><rect x="44.3515%" y="165" width="0.4184%" height="15" fill="rgb(244,68,36)" fg:x="530" fg:w="5"/><text x="44.6015%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (5 samples, 0.42%)</title><rect x="44.3515%" y="149" width="0.4184%" height="15" fill="rgb(232,229,15)" fg:x="530" fg:w="5"/><text x="44.6015%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.08%)</title><rect x="44.6862%" y="133" width="0.0837%" height="15" fill="rgb(254,30,23)" fg:x="534" fg:w="1"/><text x="44.9362%" y="143.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.08%)</title><rect x="50.2929%" y="133" width="0.0837%" height="15" fill="rgb(235,160,14)" fg:x="601" fg:w="1"/><text x="50.5429%" y="143.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="50.3766%" y="133" width="0.0837%" height="15" fill="rgb(212,155,44)" fg:x="602" fg:w="1"/><text x="50.6266%" y="143.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="52.1339%" y="69" width="0.1674%" height="15" fill="rgb(226,2,50)" fg:x="623" fg:w="2"/><text x="52.3839%" y="79.50"></text></g><g><title>set_tiny_meta_header_in_use (2 samples, 0.17%)</title><rect x="52.3013%" y="69" width="0.1674%" height="15" fill="rgb(234,177,6)" fg:x="625" fg:w="2"/><text x="52.5513%" y="79.50"></text></g><g><title>szone_size (4 samples, 0.33%)</title><rect x="52.4686%" y="69" width="0.3347%" height="15" fill="rgb(217,24,9)" fg:x="627" fg:w="4"/><text x="52.7186%" y="79.50"></text></g><g><title>tiny_size (4 samples, 0.33%)</title><rect x="52.4686%" y="53" width="0.3347%" height="15" fill="rgb(220,13,46)" fg:x="627" fg:w="4"/><text x="52.7186%" y="63.50"></text></g><g><title>tiny_size (1 samples, 0.08%)</title><rect x="52.8033%" y="69" width="0.0837%" height="15" fill="rgb(239,221,27)" fg:x="631" fg:w="1"/><text x="53.0533%" y="79.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.25%)</title><rect x="55.1464%" y="53" width="0.2510%" height="15" fill="rgb(222,198,25)" fg:x="659" fg:w="3"/><text x="55.3964%" y="63.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.33%)</title><rect x="55.3975%" y="53" width="0.3347%" height="15" fill="rgb(211,99,13)" fg:x="662" fg:w="4"/><text x="55.6475%" y="63.50"></text></g><g><title>szone_realloc (56 samples, 4.69%)</title><rect x="51.4644%" y="85" width="4.6862%" height="15" fill="rgb(232,111,31)" fg:x="615" fg:w="56"/><text x="51.7144%" y="95.50">szone..</text></g><g><title>tiny_try_realloc_in_place (39 samples, 3.26%)</title><rect x="52.8870%" y="69" width="3.2636%" height="15" fill="rgb(245,82,37)" fg:x="632" fg:w="39"/><text x="53.1370%" y="79.50">tin..</text></g><g><title>tiny_free_list_remove_ptr (5 samples, 0.42%)</title><rect x="55.7322%" y="53" width="0.4184%" height="15" fill="rgb(227,149,46)" fg:x="666" fg:w="5"/><text x="55.9822%" y="63.50"></text></g><g><title>_malloc_zone_realloc (60 samples, 5.02%)</title><rect x="51.2134%" y="101" width="5.0209%" height="15" fill="rgb(218,36,50)" fg:x="612" fg:w="60"/><text x="51.4634%" y="111.50">_mallo..</text></g><g><title>tiny_try_realloc_in_place (1 samples, 0.08%)</title><rect x="56.1506%" y="85" width="0.0837%" height="15" fill="rgb(226,80,48)" fg:x="671" fg:w="1"/><text x="56.4006%" y="95.50"></text></g><g><title>_realloc (75 samples, 6.28%)</title><rect x="50.7950%" y="117" width="6.2762%" height="15" fill="rgb(238,224,15)" fg:x="607" fg:w="75"/><text x="51.0450%" y="127.50">_realloc</text></g><g><title>szone_size (10 samples, 0.84%)</title><rect x="56.2343%" y="101" width="0.8368%" height="15" fill="rgb(241,136,10)" fg:x="672" fg:w="10"/><text x="56.4843%" y="111.50"></text></g><g><title>tiny_size (9 samples, 0.75%)</title><rect x="56.3180%" y="85" width="0.7531%" height="15" fill="rgb(208,32,45)" fg:x="673" fg:w="9"/><text x="56.5680%" y="95.50"></text></g><g><title>rack_get_thread_index (2 samples, 0.17%)</title><rect x="57.0711%" y="101" width="0.1674%" height="15" fill="rgb(207,135,9)" fg:x="682" fg:w="2"/><text x="57.3211%" y="111.50"></text></g><g><title>szone_malloc_should_clear (19 samples, 1.59%)</title><rect x="57.0711%" y="117" width="1.5900%" height="15" fill="rgb(206,86,44)" fg:x="682" fg:w="19"/><text x="57.3211%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (17 samples, 1.42%)</title><rect x="57.2385%" y="101" width="1.4226%" height="15" fill="rgb(245,177,15)" fg:x="684" fg:w="17"/><text x="57.4885%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (7 samples, 0.59%)</title><rect x="58.0753%" y="85" width="0.5858%" height="15" fill="rgb(206,64,50)" fg:x="694" fg:w="7"/><text x="58.3253%" y="95.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="58.5774%" y="69" width="0.0837%" height="15" fill="rgb(234,36,40)" fg:x="700" fg:w="1"/><text x="58.8274%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (100 samples, 8.37%)</title><rect x="50.4603%" y="133" width="8.3682%" height="15" fill="rgb(213,64,8)" fg:x="603" fg:w="100"/><text x="50.7103%" y="143.50">alloc::raw_v..</text></g><g><title>szone_size (2 samples, 0.17%)</title><rect x="58.6611%" y="117" width="0.1674%" height="15" fill="rgb(210,75,36)" fg:x="701" fg:w="2"/><text x="58.9111%" y="127.50"></text></g><g><title>realloc (2 samples, 0.17%)</title><rect x="58.8285%" y="133" width="0.1674%" height="15" fill="rgb(229,88,21)" fg:x="703" fg:w="2"/><text x="59.0785%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (289 samples, 24.18%)</title><rect x="34.9791%" y="181" width="24.1841%" height="15" fill="rgb(252,204,47)" fg:x="418" fg:w="289"/><text x="35.2291%" y="191.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (172 samples, 14.39%)</title><rect x="44.7699%" y="165" width="14.3933%" height="15" fill="rgb(208,77,27)" fg:x="535" fg:w="172"/><text x="45.0199%" y="175.50">vexy_json_core::parser::un..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (110 samples, 9.21%)</title><rect x="49.9582%" y="149" width="9.2050%" height="15" fill="rgb(221,76,26)" fg:x="597" fg:w="110"/><text x="50.2082%" y="159.50">alloc::raw_ve..</text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="58.9958%" y="133" width="0.1674%" height="15" fill="rgb(225,139,18)" fg:x="705" fg:w="2"/><text x="59.2458%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="59.6653%" y="149" width="0.0837%" height="15" fill="rgb(230,137,11)" fg:x="713" fg:w="1"/><text x="59.9153%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="59.7490%" y="149" width="0.2510%" height="15" fill="rgb(212,28,1)" fg:x="714" fg:w="3"/><text x="59.9990%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (13 samples, 1.09%)</title><rect x="59.1632%" y="181" width="1.0879%" height="15" fill="rgb(248,164,17)" fg:x="707" fg:w="13"/><text x="59.4132%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (10 samples, 0.84%)</title><rect x="59.4142%" y="165" width="0.8368%" height="15" fill="rgb(222,171,42)" fg:x="710" fg:w="10"/><text x="59.6642%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (3 samples, 0.25%)</title><rect x="60.0000%" y="149" width="0.2510%" height="15" fill="rgb(243,84,45)" fg:x="717" fg:w="3"/><text x="60.2500%" y="159.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="60.5021%" y="149" width="0.0837%" height="15" fill="rgb(252,49,23)" fg:x="723" fg:w="1"/><text x="60.7521%" y="159.50"></text></g><g><title>szone_good_size (1 samples, 0.08%)</title><rect x="60.5858%" y="101" width="0.0837%" height="15" fill="rgb(215,19,7)" fg:x="724" fg:w="1"/><text x="60.8358%" y="111.50"></text></g><g><title>_realloc (2 samples, 0.17%)</title><rect x="60.5858%" y="133" width="0.1674%" height="15" fill="rgb(238,81,41)" fg:x="724" fg:w="2"/><text x="60.8358%" y="143.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.17%)</title><rect x="60.5858%" y="117" width="0.1674%" height="15" fill="rgb(210,199,37)" fg:x="724" fg:w="2"/><text x="60.8358%" y="127.50"></text></g><g><title>szone_realloc (1 samples, 0.08%)</title><rect x="60.6695%" y="101" width="0.0837%" height="15" fill="rgb(244,192,49)" fg:x="725" fg:w="1"/><text x="60.9195%" y="111.50"></text></g><g><title>szone_size (1 samples, 0.08%)</title><rect x="60.6695%" y="85" width="0.0837%" height="15" fill="rgb(226,211,11)" fg:x="725" fg:w="1"/><text x="60.9195%" y="95.50"></text></g><g><title>tiny_size (1 samples, 0.08%)</title><rect x="60.6695%" y="69" width="0.0837%" height="15" fill="rgb(236,162,54)" fg:x="725" fg:w="1"/><text x="60.9195%" y="79.50"></text></g><g><title>rack_get_thread_index (4 samples, 0.33%)</title><rect x="60.7531%" y="117" width="0.3347%" height="15" fill="rgb(220,229,9)" fg:x="726" fg:w="4"/><text x="61.0031%" y="127.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="61.8410%" y="85" width="0.0837%" height="15" fill="rgb(250,87,22)" fg:x="739" fg:w="1"/><text x="62.0910%" y="95.50"></text></g><g><title>szone_malloc_should_clear (15 samples, 1.26%)</title><rect x="60.7531%" y="133" width="1.2552%" height="15" fill="rgb(239,43,17)" fg:x="726" fg:w="15"/><text x="61.0031%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (11 samples, 0.92%)</title><rect x="61.0879%" y="117" width="0.9205%" height="15" fill="rgb(231,177,25)" fg:x="730" fg:w="11"/><text x="61.3379%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (8 samples, 0.67%)</title><rect x="61.3389%" y="101" width="0.6695%" height="15" fill="rgb(219,179,1)" fg:x="733" fg:w="8"/><text x="61.5889%" y="111.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="61.9247%" y="85" width="0.0837%" height="15" fill="rgb(238,219,53)" fg:x="740" fg:w="1"/><text x="62.1747%" y="95.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (411 samples, 34.39%)</title><rect x="27.6987%" y="213" width="34.3933%" height="15" fill="rgb(232,167,36)" fg:x="331" fg:w="411"/><text x="27.9487%" y="223.50">vexy_json_core::parser::Parser::parse_array</text></g><g><title>vexy_json_core::parser::Parser::parse_value (404 samples, 33.81%)</title><rect x="28.2845%" y="197" width="33.8075%" height="15" fill="rgb(244,19,51)" fg:x="338" fg:w="404"/><text x="28.5345%" y="207.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (22 samples, 1.84%)</title><rect x="60.2510%" y="181" width="1.8410%" height="15" fill="rgb(224,6,22)" fg:x="720" fg:w="22"/><text x="60.5010%" y="191.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 1.67%)</title><rect x="60.4184%" y="165" width="1.6736%" height="15" fill="rgb(224,145,5)" fg:x="722" fg:w="20"/><text x="60.6684%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 1.51%)</title><rect x="60.5858%" y="149" width="1.5063%" height="15" fill="rgb(234,130,49)" fg:x="724" fg:w="18"/><text x="60.8358%" y="159.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="62.0084%" y="133" width="0.0837%" height="15" fill="rgb(254,6,2)" fg:x="741" fg:w="1"/><text x="62.2584%" y="143.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2 samples, 0.17%)</title><rect x="62.4268%" y="197" width="0.1674%" height="15" fill="rgb(208,96,46)" fg:x="746" fg:w="2"/><text x="62.6768%" y="207.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="62.4268%" y="181" width="0.1674%" height="15" fill="rgb(239,3,39)" fg:x="746" fg:w="2"/><text x="62.6768%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="62.4268%" y="165" width="0.1674%" height="15" fill="rgb(233,210,1)" fg:x="746" fg:w="2"/><text x="62.6768%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="62.5105%" y="149" width="0.0837%" height="15" fill="rgb(244,137,37)" fg:x="747" fg:w="1"/><text x="62.7605%" y="159.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="62.5105%" y="133" width="0.0837%" height="15" fill="rgb(240,136,2)" fg:x="747" fg:w="1"/><text x="62.7605%" y="143.50"></text></g><g><title>core::str::validations::next_code_point (3 samples, 0.25%)</title><rect x="62.5941%" y="197" width="0.2510%" height="15" fill="rgb(239,18,37)" fg:x="748" fg:w="3"/><text x="62.8441%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.50%)</title><rect x="63.1799%" y="181" width="0.5021%" height="15" fill="rgb(218,185,22)" fg:x="755" fg:w="6"/><text x="63.4299%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.25%)</title><rect x="63.4310%" y="165" width="0.2510%" height="15" fill="rgb(225,218,4)" fg:x="758" fg:w="3"/><text x="63.6810%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.17%)</title><rect x="64.0167%" y="165" width="0.1674%" height="15" fill="rgb(230,182,32)" fg:x="765" fg:w="2"/><text x="64.2667%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.17%)</title><rect x="64.0167%" y="149" width="0.1674%" height="15" fill="rgb(242,56,43)" fg:x="765" fg:w="2"/><text x="64.2667%" y="159.50"></text></g><g><title>free_small (1 samples, 0.08%)</title><rect x="64.1841%" y="165" width="0.0837%" height="15" fill="rgb(233,99,24)" fg:x="767" fg:w="1"/><text x="64.4341%" y="175.50"></text></g><g><title>free_tiny (2 samples, 0.17%)</title><rect x="64.2678%" y="165" width="0.1674%" height="15" fill="rgb(234,209,42)" fg:x="768" fg:w="2"/><text x="64.5178%" y="175.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="64.3515%" y="149" width="0.0837%" height="15" fill="rgb(227,7,12)" fg:x="769" fg:w="1"/><text x="64.6015%" y="159.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="64.3515%" y="133" width="0.0837%" height="15" fill="rgb(245,203,43)" fg:x="769" fg:w="1"/><text x="64.6015%" y="143.50"></text></g><g><title>small_malloc_should_clear (2 samples, 0.17%)</title><rect x="64.4351%" y="149" width="0.1674%" height="15" fill="rgb(238,205,33)" fg:x="770" fg:w="2"/><text x="64.6851%" y="159.50"></text></g><g><title>small_malloc_from_free_list (2 samples, 0.17%)</title><rect x="64.4351%" y="133" width="0.1674%" height="15" fill="rgb(231,56,7)" fg:x="770" fg:w="2"/><text x="64.6851%" y="143.50"></text></g><g><title>small_free_list_add_ptr (2 samples, 0.17%)</title><rect x="64.4351%" y="117" width="0.1674%" height="15" fill="rgb(244,186,29)" fg:x="770" fg:w="2"/><text x="64.6851%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23 samples, 1.92%)</title><rect x="62.8452%" y="197" width="1.9247%" height="15" fill="rgb(234,111,31)" fg:x="751" fg:w="23"/><text x="63.0952%" y="207.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 1.09%)</title><rect x="63.6820%" y="181" width="1.0879%" height="15" fill="rgb(241,149,10)" fg:x="761" fg:w="13"/><text x="63.9320%" y="191.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.33%)</title><rect x="64.4351%" y="165" width="0.3347%" height="15" fill="rgb(249,206,44)" fg:x="770" fg:w="4"/><text x="64.6851%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="64.6025%" y="149" width="0.1674%" height="15" fill="rgb(251,153,30)" fg:x="772" fg:w="2"/><text x="64.8525%" y="159.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.08%)</title><rect x="64.6862%" y="133" width="0.0837%" height="15" fill="rgb(239,152,38)" fg:x="773" fg:w="1"/><text x="64.9362%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (6 samples, 0.50%)</title><rect x="64.7699%" y="181" width="0.5021%" height="15" fill="rgb(249,139,47)" fg:x="774" fg:w="6"/><text x="65.0199%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (7 samples, 0.59%)</title><rect x="64.7699%" y="197" width="0.5858%" height="15" fill="rgb(244,64,35)" fg:x="774" fg:w="7"/><text x="65.0199%" y="207.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.08%)</title><rect x="65.2720%" y="181" width="0.0837%" height="15" fill="rgb(216,46,15)" fg:x="780" fg:w="1"/><text x="65.5220%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.08%)</title><rect x="65.3556%" y="181" width="0.0837%" height="15" fill="rgb(250,74,19)" fg:x="781" fg:w="1"/><text x="65.6056%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="65.3556%" y="165" width="0.0837%" height="15" fill="rgb(249,42,33)" fg:x="781" fg:w="1"/><text x="65.6056%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (2 samples, 0.17%)</title><rect x="65.3556%" y="197" width="0.1674%" height="15" fill="rgb(242,149,17)" fg:x="781" fg:w="2"/><text x="65.6056%" y="207.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (1 samples, 0.08%)</title><rect x="65.4393%" y="181" width="0.0837%" height="15" fill="rgb(244,29,21)" fg:x="782" fg:w="1"/><text x="65.6893%" y="191.50"></text></g><g><title>vexy_json_core::parser::unescape_string (1 samples, 0.08%)</title><rect x="65.4393%" y="165" width="0.0837%" height="15" fill="rgb(220,130,37)" fg:x="782" fg:w="1"/><text x="65.6893%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.08%)</title><rect x="65.4393%" y="149" width="0.0837%" height="15" fill="rgb(211,67,2)" fg:x="782" fg:w="1"/><text x="65.6893%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.4393%" y="133" width="0.0837%" height="15" fill="rgb(235,68,52)" fg:x="782" fg:w="1"/><text x="65.6893%" y="143.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="65.4393%" y="117" width="0.0837%" height="15" fill="rgb(246,142,3)" fg:x="782" fg:w="1"/><text x="65.6893%" y="127.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="66.4435%" y="181" width="0.0837%" height="15" fill="rgb(241,25,7)" fg:x="794" fg:w="1"/><text x="66.6935%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.08%)</title><rect x="66.4435%" y="165" width="0.0837%" height="15" fill="rgb(242,119,39)" fg:x="794" fg:w="1"/><text x="66.6935%" y="175.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="66.6109%" y="133" width="0.0837%" height="15" fill="rgb(241,98,45)" fg:x="796" fg:w="1"/><text x="66.8609%" y="143.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3 samples, 0.25%)</title><rect x="66.5272%" y="181" width="0.2510%" height="15" fill="rgb(254,28,30)" fg:x="795" fg:w="3"/><text x="66.7772%" y="191.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="66.5272%" y="165" width="0.2510%" height="15" fill="rgb(241,142,54)" fg:x="795" fg:w="3"/><text x="66.7772%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.25%)</title><rect x="66.5272%" y="149" width="0.2510%" height="15" fill="rgb(222,85,15)" fg:x="795" fg:w="3"/><text x="66.7772%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="66.6946%" y="133" width="0.0837%" height="15" fill="rgb(210,85,47)" fg:x="797" fg:w="1"/><text x="66.9446%" y="143.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="66.6946%" y="117" width="0.0837%" height="15" fill="rgb(224,206,25)" fg:x="797" fg:w="1"/><text x="66.9446%" y="127.50"></text></g><g><title>_free (2 samples, 0.17%)</title><rect x="66.7782%" y="181" width="0.1674%" height="15" fill="rgb(243,201,19)" fg:x="798" fg:w="2"/><text x="67.0282%" y="191.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="66.9456%" y="181" width="0.0837%" height="15" fill="rgb(236,59,4)" fg:x="800" fg:w="1"/><text x="67.1956%" y="191.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="67.0293%" y="181" width="0.0837%" height="15" fill="rgb(254,179,45)" fg:x="801" fg:w="1"/><text x="67.2793%" y="191.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="67.1130%" y="181" width="0.0837%" height="15" fill="rgb(226,14,10)" fg:x="802" fg:w="1"/><text x="67.3630%" y="191.50"></text></g><g><title>_free (1 samples, 0.08%)</title><rect x="67.5314%" y="165" width="0.0837%" height="15" fill="rgb(244,27,41)" fg:x="807" fg:w="1"/><text x="67.7814%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.33%)</title><rect x="67.6151%" y="165" width="0.3347%" height="15" fill="rgb(235,35,32)" fg:x="808" fg:w="4"/><text x="67.8651%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.25%)</title><rect x="67.6987%" y="149" width="0.2510%" height="15" fill="rgb(218,68,31)" fg:x="809" fg:w="3"/><text x="67.9487%" y="159.50"></text></g><g><title>free_tiny (1 samples, 0.08%)</title><rect x="68.1172%" y="149" width="0.0837%" height="15" fill="rgb(207,120,37)" fg:x="814" fg:w="1"/><text x="68.3672%" y="159.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.08%)</title><rect x="68.1172%" y="133" width="0.0837%" height="15" fill="rgb(227,98,0)" fg:x="814" fg:w="1"/><text x="68.3672%" y="143.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="68.2008%" y="133" width="0.0837%" height="15" fill="rgb(207,7,3)" fg:x="815" fg:w="1"/><text x="68.4508%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.50%)</title><rect x="67.9498%" y="165" width="0.5021%" height="15" fill="rgb(206,98,19)" fg:x="812" fg:w="6"/><text x="68.1998%" y="175.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="68.2008%" y="149" width="0.2510%" height="15" fill="rgb(217,5,26)" fg:x="815" fg:w="3"/><text x="68.4508%" y="159.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="68.2845%" y="133" width="0.1674%" height="15" fill="rgb(235,190,38)" fg:x="816" fg:w="2"/><text x="68.5345%" y="143.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="68.2845%" y="117" width="0.1674%" height="15" fill="rgb(247,86,24)" fg:x="816" fg:w="2"/><text x="68.5345%" y="127.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="68.3682%" y="101" width="0.0837%" height="15" fill="rgb(205,101,16)" fg:x="817" fg:w="1"/><text x="68.6182%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 1.34%)</title><rect x="67.1967%" y="181" width="1.3389%" height="15" fill="rgb(246,168,33)" fg:x="803" fg:w="16"/><text x="67.4467%" y="191.50"></text></g><g><title>malloc (1 samples, 0.08%)</title><rect x="68.4519%" y="165" width="0.0837%" height="15" fill="rgb(231,114,1)" fg:x="818" fg:w="1"/><text x="68.7019%" y="175.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="68.5356%" y="181" width="0.0837%" height="15" fill="rgb(207,184,53)" fg:x="819" fg:w="1"/><text x="68.7856%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="68.5356%" y="165" width="0.0837%" height="15" fill="rgb(224,95,51)" fg:x="819" fg:w="1"/><text x="68.7856%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="68.5356%" y="149" width="0.0837%" height="15" fill="rgb(212,188,45)" fg:x="819" fg:w="1"/><text x="68.7856%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (9 samples, 0.75%)</title><rect x="68.8703%" y="165" width="0.7531%" height="15" fill="rgb(223,154,38)" fg:x="823" fg:w="9"/><text x="69.1203%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="69.6234%" y="165" width="0.2510%" height="15" fill="rgb(251,22,52)" fg:x="832" fg:w="3"/><text x="69.8734%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (16 samples, 1.34%)</title><rect x="68.6192%" y="181" width="1.3389%" height="15" fill="rgb(229,209,22)" fg:x="820" fg:w="16"/><text x="68.8692%" y="191.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto367_ctx366_x (1 samples, 0.08%)</title><rect x="69.8745%" y="165" width="0.0837%" height="15" fill="rgb(234,138,34)" fg:x="835" fg:w="1"/><text x="70.1245%" y="175.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.08%)</title><rect x="70.2092%" y="101" width="0.0837%" height="15" fill="rgb(212,95,11)" fg:x="839" fg:w="1"/><text x="70.4592%" y="111.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.08%)</title><rect x="70.2929%" y="101" width="0.0837%" height="15" fill="rgb(240,179,47)" fg:x="840" fg:w="1"/><text x="70.5429%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.50%)</title><rect x="70.0418%" y="165" width="0.5021%" height="15" fill="rgb(240,163,11)" fg:x="837" fg:w="6"/><text x="70.2918%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.50%)</title><rect x="70.0418%" y="149" width="0.5021%" height="15" fill="rgb(236,37,12)" fg:x="837" fg:w="6"/><text x="70.2918%" y="159.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.50%)</title><rect x="70.0418%" y="133" width="0.5021%" height="15" fill="rgb(232,164,16)" fg:x="837" fg:w="6"/><text x="70.2918%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.42%)</title><rect x="70.1255%" y="117" width="0.4184%" height="15" fill="rgb(244,205,15)" fg:x="838" fg:w="5"/><text x="70.3755%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="70.3766%" y="101" width="0.1674%" height="15" fill="rgb(223,117,47)" fg:x="841" fg:w="2"/><text x="70.6266%" y="111.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.17%)</title><rect x="70.7950%" y="149" width="0.1674%" height="15" fill="rgb(244,107,35)" fg:x="846" fg:w="2"/><text x="71.0450%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (8 samples, 0.67%)</title><rect x="70.5439%" y="165" width="0.6695%" height="15" fill="rgb(205,140,8)" fg:x="843" fg:w="8"/><text x="70.7939%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="70.9623%" y="149" width="0.2510%" height="15" fill="rgb(228,84,46)" fg:x="848" fg:w="3"/><text x="71.2123%" y="159.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="71.8828%" y="149" width="0.0837%" height="15" fill="rgb(254,188,9)" fg:x="859" fg:w="1"/><text x="72.1328%" y="159.50"></text></g><g><title>vexy_json_core::parser::unescape_string (1 samples, 0.08%)</title><rect x="71.8828%" y="133" width="0.0837%" height="15" fill="rgb(206,112,54)" fg:x="859" fg:w="1"/><text x="72.1328%" y="143.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="71.9665%" y="149" width="0.0837%" height="15" fill="rgb(216,84,49)" fg:x="860" fg:w="1"/><text x="72.2165%" y="159.50"></text></g><g><title>_szone_free (1 samples, 0.08%)</title><rect x="72.0502%" y="149" width="0.0837%" height="15" fill="rgb(214,194,35)" fg:x="861" fg:w="1"/><text x="72.3002%" y="159.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.08%)</title><rect x="72.1339%" y="149" width="0.0837%" height="15" fill="rgb(249,28,3)" fg:x="862" fg:w="1"/><text x="72.3839%" y="159.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="72.9707%" y="133" width="0.0837%" height="15" fill="rgb(222,56,52)" fg:x="872" fg:w="1"/><text x="73.2207%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.84%)</title><rect x="73.0544%" y="133" width="0.8368%" height="15" fill="rgb(245,217,50)" fg:x="873" fg:w="10"/><text x="73.3044%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.33%)</title><rect x="73.5565%" y="117" width="0.3347%" height="15" fill="rgb(213,201,24)" fg:x="879" fg:w="4"/><text x="73.8065%" y="127.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="73.8912%" y="117" width="0.1674%" height="15" fill="rgb(248,116,28)" fg:x="883" fg:w="2"/><text x="74.1412%" y="127.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="74.0586%" y="117" width="0.1674%" height="15" fill="rgb(219,72,43)" fg:x="885" fg:w="2"/><text x="74.3086%" y="127.50"></text></g><g><title>rack_get_thread_index (2 samples, 0.17%)</title><rect x="74.2259%" y="101" width="0.1674%" height="15" fill="rgb(209,138,14)" fg:x="887" fg:w="2"/><text x="74.4759%" y="111.50"></text></g><g><title>tiny_check_zero_or_clear (1 samples, 0.08%)</title><rect x="74.3933%" y="101" width="0.0837%" height="15" fill="rgb(222,18,33)" fg:x="889" fg:w="1"/><text x="74.6433%" y="111.50"></text></g><g><title>set_tiny_meta_header_in_use (3 samples, 0.25%)</title><rect x="74.8954%" y="85" width="0.2510%" height="15" fill="rgb(213,199,7)" fg:x="895" fg:w="3"/><text x="75.1454%" y="95.50"></text></g><g><title>szone_malloc_should_clear (13 samples, 1.09%)</title><rect x="74.2259%" y="117" width="1.0879%" height="15" fill="rgb(250,110,10)" fg:x="887" fg:w="13"/><text x="74.4759%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (10 samples, 0.84%)</title><rect x="74.4770%" y="101" width="0.8368%" height="15" fill="rgb(248,123,6)" fg:x="890" fg:w="10"/><text x="74.7270%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="75.1464%" y="85" width="0.1674%" height="15" fill="rgb(206,91,31)" fg:x="898" fg:w="2"/><text x="75.3964%" y="95.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (38 samples, 3.18%)</title><rect x="72.2176%" y="149" width="3.1799%" height="15" fill="rgb(211,154,13)" fg:x="863" fg:w="38"/><text x="72.4676%" y="159.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 1.51%)</title><rect x="73.8912%" y="133" width="1.5063%" height="15" fill="rgb(225,148,7)" fg:x="883" fg:w="18"/><text x="74.1412%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="75.3138%" y="117" width="0.0837%" height="15" fill="rgb(220,160,43)" fg:x="900" fg:w="1"/><text x="75.5638%" y="127.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (9 samples, 0.75%)</title><rect x="75.4812%" y="133" width="0.7531%" height="15" fill="rgb(213,52,39)" fg:x="902" fg:w="9"/><text x="75.7312%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="76.2343%" y="133" width="0.2510%" height="15" fill="rgb(243,137,7)" fg:x="911" fg:w="3"/><text x="76.4843%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (2 samples, 0.17%)</title><rect x="76.4854%" y="133" width="0.1674%" height="15" fill="rgb(230,79,13)" fg:x="914" fg:w="2"/><text x="76.7354%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (16 samples, 1.34%)</title><rect x="75.3975%" y="149" width="1.3389%" height="15" fill="rgb(247,105,23)" fg:x="901" fg:w="16"/><text x="75.6475%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto367_ctx366_x (1 samples, 0.08%)</title><rect x="76.6527%" y="133" width="0.0837%" height="15" fill="rgb(223,179,41)" fg:x="916" fg:w="1"/><text x="76.9027%" y="143.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="76.8201%" y="133" width="0.0837%" height="15" fill="rgb(218,9,34)" fg:x="918" fg:w="1"/><text x="77.0701%" y="143.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2 samples, 0.17%)</title><rect x="76.9038%" y="133" width="0.1674%" height="15" fill="rgb(222,106,8)" fg:x="919" fg:w="2"/><text x="77.1538%" y="143.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.08%)</title><rect x="76.9874%" y="117" width="0.0837%" height="15" fill="rgb(211,220,0)" fg:x="920" fg:w="1"/><text x="77.2374%" y="127.50"></text></g><g><title>free_tiny (7 samples, 0.59%)</title><rect x="77.0711%" y="133" width="0.5858%" height="15" fill="rgb(229,52,16)" fg:x="921" fg:w="7"/><text x="77.3211%" y="143.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="77.5732%" y="117" width="0.0837%" height="15" fill="rgb(212,155,18)" fg:x="927" fg:w="1"/><text x="77.8232%" y="127.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.84%)</title><rect x="77.6569%" y="133" width="0.8368%" height="15" fill="rgb(242,21,14)" fg:x="928" fg:w="10"/><text x="77.9069%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (9 samples, 0.75%)</title><rect x="77.7406%" y="117" width="0.7531%" height="15" fill="rgb(222,19,48)" fg:x="929" fg:w="9"/><text x="77.9906%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.25%)</title><rect x="78.2427%" y="101" width="0.2510%" height="15" fill="rgb(232,45,27)" fg:x="935" fg:w="3"/><text x="78.4927%" y="111.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="78.4937%" y="133" width="0.2510%" height="15" fill="rgb(249,103,42)" fg:x="938" fg:w="3"/><text x="78.7437%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (2 samples, 0.17%)</title><rect x="78.5774%" y="117" width="0.1674%" height="15" fill="rgb(246,81,33)" fg:x="939" fg:w="2"/><text x="78.8274%" y="127.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.08%)</title><rect x="78.9958%" y="101" width="0.0837%" height="15" fill="rgb(252,33,42)" fg:x="944" fg:w="1"/><text x="79.2458%" y="111.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.17%)</title><rect x="79.0795%" y="101" width="0.1674%" height="15" fill="rgb(209,212,41)" fg:x="945" fg:w="2"/><text x="79.3295%" y="111.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="79.3305%" y="69" width="0.0837%" height="15" fill="rgb(207,154,6)" fg:x="948" fg:w="1"/><text x="79.5805%" y="79.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (39 samples, 3.26%)</title><rect x="76.7364%" y="149" width="3.2636%" height="15" fill="rgb(223,64,47)" fg:x="917" fg:w="39"/><text x="76.9864%" y="159.50">zzs..</text></g><g><title>vexy_json_core::parser::unescape_string (15 samples, 1.26%)</title><rect x="78.7448%" y="133" width="1.2552%" height="15" fill="rgb(211,161,38)" fg:x="941" fg:w="15"/><text x="78.9948%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 1.00%)</title><rect x="78.9958%" y="117" width="1.0042%" height="15" fill="rgb(219,138,40)" fg:x="944" fg:w="12"/><text x="79.2458%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.75%)</title><rect x="79.2469%" y="101" width="0.7531%" height="15" fill="rgb(241,228,46)" fg:x="947" fg:w="9"/><text x="79.4969%" y="111.50"></text></g><g><title>szone_malloc_should_clear (8 samples, 0.67%)</title><rect x="79.3305%" y="85" width="0.6695%" height="15" fill="rgb(223,209,38)" fg:x="948" fg:w="8"/><text x="79.5805%" y="95.50"></text></g><g><title>tiny_malloc_should_clear (7 samples, 0.59%)</title><rect x="79.4142%" y="69" width="0.5858%" height="15" fill="rgb(236,164,45)" fg:x="949" fg:w="7"/><text x="79.6642%" y="79.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.25%)</title><rect x="79.7490%" y="53" width="0.2510%" height="15" fill="rgb(231,15,5)" fg:x="953" fg:w="3"/><text x="79.9990%" y="63.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.08%)</title><rect x="80.0000%" y="149" width="0.0837%" height="15" fill="rgb(252,35,15)" fg:x="956" fg:w="1"/><text x="80.2500%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (2 samples, 0.17%)</title><rect x="80.0837%" y="149" width="0.1674%" height="15" fill="rgb(248,181,18)" fg:x="957" fg:w="2"/><text x="80.3337%" y="159.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="80.5021%" y="133" width="0.0837%" height="15" fill="rgb(233,39,42)" fg:x="962" fg:w="1"/><text x="80.7521%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.5021%" y="117" width="0.0837%" height="15" fill="rgb(238,110,33)" fg:x="962" fg:w="1"/><text x="80.7521%" y="127.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="80.6695%" y="117" width="0.0837%" height="15" fill="rgb(233,195,10)" fg:x="964" fg:w="1"/><text x="80.9195%" y="127.50"></text></g><g><title>rack_get_thread_index (4 samples, 0.33%)</title><rect x="80.7531%" y="85" width="0.3347%" height="15" fill="rgb(254,105,3)" fg:x="965" fg:w="4"/><text x="81.0031%" y="95.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="82.3431%" y="69" width="0.0837%" height="15" fill="rgb(221,225,9)" fg:x="984" fg:w="1"/><text x="82.5931%" y="79.50"></text></g><g><title>szone_malloc_should_clear (23 samples, 1.92%)</title><rect x="80.7531%" y="101" width="1.9247%" height="15" fill="rgb(224,227,45)" fg:x="965" fg:w="23"/><text x="81.0031%" y="111.50">s..</text></g><g><title>tiny_malloc_should_clear (19 samples, 1.59%)</title><rect x="81.0879%" y="85" width="1.5900%" height="15" fill="rgb(229,198,43)" fg:x="969" fg:w="19"/><text x="81.3379%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.25%)</title><rect x="82.4268%" y="69" width="0.2510%" height="15" fill="rgb(206,209,35)" fg:x="985" fg:w="3"/><text x="82.6768%" y="79.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (153 samples, 12.80%)</title><rect x="69.9582%" y="181" width="12.8033%" height="15" fill="rgb(245,195,53)" fg:x="836" fg:w="153"/><text x="70.2082%" y="191.50">vexy_json_core::parser:..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (138 samples, 11.55%)</title><rect x="71.2134%" y="165" width="11.5481%" height="15" fill="rgb(240,92,26)" fg:x="851" fg:w="138"/><text x="71.4634%" y="175.50">vexy_json_core::parse..</text></g><g><title>vexy_json_core::parser::unescape_string (30 samples, 2.51%)</title><rect x="80.2510%" y="149" width="2.5105%" height="15" fill="rgb(207,40,23)" fg:x="959" fg:w="30"/><text x="80.5010%" y="159.50">zz..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (26 samples, 2.18%)</title><rect x="80.5858%" y="133" width="2.1757%" height="15" fill="rgb(223,111,35)" fg:x="963" fg:w="26"/><text x="80.8358%" y="143.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 2.01%)</title><rect x="80.7531%" y="117" width="2.0084%" height="15" fill="rgb(229,147,28)" fg:x="965" fg:w="24"/><text x="81.0031%" y="127.50">a..</text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="82.6778%" y="101" width="0.0837%" height="15" fill="rgb(211,29,28)" fg:x="988" fg:w="1"/><text x="82.9278%" y="111.50"></text></g><g><title>_szone_free (2 samples, 0.17%)</title><rect x="83.5983%" y="165" width="0.1674%" height="15" fill="rgb(228,72,33)" fg:x="999" fg:w="2"/><text x="83.8483%" y="175.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.08%)</title><rect x="83.7657%" y="165" width="0.0837%" height="15" fill="rgb(205,214,31)" fg:x="1001" fg:w="1"/><text x="84.0157%" y="175.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.08%)</title><rect x="83.7657%" y="149" width="0.0837%" height="15" fill="rgb(224,111,15)" fg:x="1001" fg:w="1"/><text x="84.0157%" y="159.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.08%)</title><rect x="83.8494%" y="165" width="0.0837%" height="15" fill="rgb(253,21,26)" fg:x="1002" fg:w="1"/><text x="84.0994%" y="175.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="83.9331%" y="165" width="0.0837%" height="15" fill="rgb(245,139,43)" fg:x="1003" fg:w="1"/><text x="84.1831%" y="175.50"></text></g><g><title>free_tiny (1 samples, 0.08%)</title><rect x="84.0167%" y="165" width="0.0837%" height="15" fill="rgb(252,170,7)" fg:x="1004" fg:w="1"/><text x="84.2667%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.33%)</title><rect x="84.6862%" y="149" width="0.3347%" height="15" fill="rgb(231,118,14)" fg:x="1012" fg:w="4"/><text x="84.9362%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="84.9372%" y="133" width="0.0837%" height="15" fill="rgb(238,83,0)" fg:x="1015" fg:w="1"/><text x="85.1872%" y="143.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="85.1046%" y="117" width="0.0837%" height="15" fill="rgb(221,39,39)" fg:x="1017" fg:w="1"/><text x="85.3546%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.33%)</title><rect x="85.0209%" y="149" width="0.3347%" height="15" fill="rgb(222,119,46)" fg:x="1016" fg:w="4"/><text x="85.2709%" y="159.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="85.1046%" y="133" width="0.2510%" height="15" fill="rgb(222,165,49)" fg:x="1017" fg:w="3"/><text x="85.3546%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="85.1883%" y="117" width="0.1674%" height="15" fill="rgb(219,113,52)" fg:x="1018" fg:w="2"/><text x="85.4383%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 1.34%)</title><rect x="84.1004%" y="165" width="1.3389%" height="15" fill="rgb(214,7,15)" fg:x="1005" fg:w="16"/><text x="84.3504%" y="175.50"></text></g><g><title>malloc (1 samples, 0.08%)</title><rect x="85.3556%" y="149" width="0.0837%" height="15" fill="rgb(235,32,4)" fg:x="1020" fg:w="1"/><text x="85.6056%" y="159.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.33%)</title><rect x="85.4393%" y="165" width="0.3347%" height="15" fill="rgb(238,90,54)" fg:x="1021" fg:w="4"/><text x="85.6893%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (4 samples, 0.33%)</title><rect x="85.4393%" y="149" width="0.3347%" height="15" fill="rgb(213,208,19)" fg:x="1021" fg:w="4"/><text x="85.6893%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="85.6904%" y="133" width="0.0837%" height="15" fill="rgb(233,156,4)" fg:x="1024" fg:w="1"/><text x="85.9404%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (5 samples, 0.42%)</title><rect x="85.8577%" y="149" width="0.4184%" height="15" fill="rgb(207,194,5)" fg:x="1026" fg:w="5"/><text x="86.1077%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.17%)</title><rect x="86.2762%" y="149" width="0.1674%" height="15" fill="rgb(206,111,30)" fg:x="1031" fg:w="2"/><text x="86.5262%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (9 samples, 0.75%)</title><rect x="85.7741%" y="165" width="0.7531%" height="15" fill="rgb(243,70,54)" fg:x="1025" fg:w="9"/><text x="86.0241%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.08%)</title><rect x="86.4435%" y="149" width="0.0837%" height="15" fill="rgb(242,28,8)" fg:x="1033" fg:w="1"/><text x="86.6935%" y="159.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="86.9456%" y="133" width="0.0837%" height="15" fill="rgb(219,106,18)" fg:x="1039" fg:w="1"/><text x="87.1956%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.25%)</title><rect x="86.9456%" y="149" width="0.2510%" height="15" fill="rgb(244,222,10)" fg:x="1039" fg:w="3"/><text x="87.1956%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.17%)</title><rect x="87.0293%" y="133" width="0.1674%" height="15" fill="rgb(236,179,52)" fg:x="1040" fg:w="2"/><text x="87.2793%" y="143.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="87.0293%" y="117" width="0.1674%" height="15" fill="rgb(213,23,39)" fg:x="1040" fg:w="2"/><text x="87.2793%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="87.0293%" y="101" width="0.1674%" height="15" fill="rgb(238,48,10)" fg:x="1040" fg:w="2"/><text x="87.2793%" y="111.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="87.3640%" y="133" width="0.0837%" height="15" fill="rgb(251,196,23)" fg:x="1044" fg:w="1"/><text x="87.6140%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (5 samples, 0.42%)</title><rect x="87.1967%" y="149" width="0.4184%" height="15" fill="rgb(250,152,24)" fg:x="1042" fg:w="5"/><text x="87.4467%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (2 samples, 0.17%)</title><rect x="87.4477%" y="133" width="0.1674%" height="15" fill="rgb(209,150,17)" fg:x="1045" fg:w="2"/><text x="87.6977%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (1 samples, 0.08%)</title><rect x="87.8661%" y="133" width="0.0837%" height="15" fill="rgb(234,202,34)" fg:x="1050" fg:w="1"/><text x="88.1161%" y="143.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="87.9498%" y="101" width="0.0837%" height="15" fill="rgb(253,148,53)" fg:x="1051" fg:w="1"/><text x="88.1998%" y="111.50"></text></g><g><title>rack_get_thread_index (4 samples, 0.33%)</title><rect x="88.2008%" y="69" width="0.3347%" height="15" fill="rgb(218,129,16)" fg:x="1054" fg:w="4"/><text x="88.4508%" y="79.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_array (30 samples, 2.51%)</title><rect x="86.5272%" y="165" width="2.5105%" height="15" fill="rgb(216,85,19)" fg:x="1034" fg:w="30"/><text x="86.7772%" y="175.50">zz..</text></g><g><title>vexy_json_core::parser::Parser::parse_value (17 samples, 1.42%)</title><rect x="87.6151%" y="149" width="1.4226%" height="15" fill="rgb(235,228,7)" fg:x="1047" fg:w="17"/><text x="87.8651%" y="159.50"></text></g><g><title>vexy_json_core::parser::unescape_string (13 samples, 1.09%)</title><rect x="87.9498%" y="133" width="1.0879%" height="15" fill="rgb(245,175,0)" fg:x="1051" fg:w="13"/><text x="88.1998%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 1.09%)</title><rect x="87.9498%" y="117" width="1.0879%" height="15" fill="rgb(208,168,36)" fg:x="1051" fg:w="13"/><text x="88.1998%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 1.00%)</title><rect x="88.0335%" y="101" width="1.0042%" height="15" fill="rgb(246,171,24)" fg:x="1052" fg:w="12"/><text x="88.2835%" y="111.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.84%)</title><rect x="88.2008%" y="85" width="0.8368%" height="15" fill="rgb(215,142,24)" fg:x="1054" fg:w="10"/><text x="88.4508%" y="95.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.50%)</title><rect x="88.5356%" y="69" width="0.5021%" height="15" fill="rgb(250,187,7)" fg:x="1058" fg:w="6"/><text x="88.7856%" y="79.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="88.8703%" y="53" width="0.1674%" height="15" fill="rgb(228,66,33)" fg:x="1062" fg:w="2"/><text x="89.1203%" y="63.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="89.1213%" y="149" width="0.0837%" height="15" fill="rgb(234,215,21)" fg:x="1065" fg:w="1"/><text x="89.3713%" y="159.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.17%)</title><rect x="89.2050%" y="149" width="0.1674%" height="15" fill="rgb(222,191,20)" fg:x="1066" fg:w="2"/><text x="89.4550%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.25%)</title><rect x="89.4561%" y="133" width="0.2510%" height="15" fill="rgb(245,79,54)" fg:x="1069" fg:w="3"/><text x="89.7061%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="89.6234%" y="117" width="0.0837%" height="15" fill="rgb(240,10,37)" fg:x="1071" fg:w="1"/><text x="89.8734%" y="127.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="89.7071%" y="101" width="0.0837%" height="15" fill="rgb(214,192,32)" fg:x="1072" fg:w="1"/><text x="89.9571%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.50%)</title><rect x="89.3724%" y="149" width="0.5021%" height="15" fill="rgb(209,36,54)" fg:x="1068" fg:w="6"/><text x="89.6224%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.17%)</title><rect x="89.7071%" y="133" width="0.1674%" height="15" fill="rgb(220,10,11)" fg:x="1072" fg:w="2"/><text x="89.9571%" y="143.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="89.7071%" y="117" width="0.1674%" height="15" fill="rgb(221,106,17)" fg:x="1072" fg:w="2"/><text x="89.9571%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="89.7908%" y="101" width="0.0837%" height="15" fill="rgb(251,142,44)" fg:x="1073" fg:w="1"/><text x="90.0408%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="89.7908%" y="85" width="0.0837%" height="15" fill="rgb(238,13,15)" fg:x="1073" fg:w="1"/><text x="90.0408%" y="95.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (3 samples, 0.25%)</title><rect x="90.1255%" y="133" width="0.2510%" height="15" fill="rgb(208,107,27)" fg:x="1077" fg:w="3"/><text x="90.3755%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="90.3766%" y="133" width="0.2510%" height="15" fill="rgb(205,136,37)" fg:x="1080" fg:w="3"/><text x="90.6266%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (10 samples, 0.84%)</title><rect x="89.8745%" y="149" width="0.8368%" height="15" fill="rgb(250,205,27)" fg:x="1074" fg:w="10"/><text x="90.1245%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto559_ctx537_x (1 samples, 0.08%)</title><rect x="90.6276%" y="133" width="0.0837%" height="15" fill="rgb(210,80,43)" fg:x="1083" fg:w="1"/><text x="90.8776%" y="143.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="90.7113%" y="133" width="0.0837%" height="15" fill="rgb(247,160,36)" fg:x="1084" fg:w="1"/><text x="90.9613%" y="143.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.08%)</title><rect x="90.7950%" y="133" width="0.0837%" height="15" fill="rgb(234,13,49)" fg:x="1085" fg:w="1"/><text x="91.0450%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (6 samples, 0.50%)</title><rect x="90.7113%" y="149" width="0.5021%" height="15" fill="rgb(234,122,0)" fg:x="1084" fg:w="6"/><text x="90.9613%" y="159.50"></text></g><g><title>free_tiny (4 samples, 0.33%)</title><rect x="90.8787%" y="133" width="0.3347%" height="15" fill="rgb(207,146,38)" fg:x="1086" fg:w="4"/><text x="91.1287%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.08%)</title><rect x="91.2134%" y="149" width="0.0837%" height="15" fill="rgb(207,177,25)" fg:x="1090" fg:w="1"/><text x="91.4634%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="91.3808%" y="117" width="0.0837%" height="15" fill="rgb(211,178,42)" fg:x="1092" fg:w="1"/><text x="91.6308%" y="127.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (3 samples, 0.25%)</title><rect x="91.2971%" y="149" width="0.2510%" height="15" fill="rgb(230,69,54)" fg:x="1091" fg:w="3"/><text x="91.5471%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="91.2971%" y="133" width="0.2510%" height="15" fill="rgb(214,135,41)" fg:x="1091" fg:w="3"/><text x="91.5471%" y="143.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto16_ctx15_x (1 samples, 0.08%)</title><rect x="91.4644%" y="117" width="0.0837%" height="15" fill="rgb(237,67,25)" fg:x="1093" fg:w="1"/><text x="91.7144%" y="127.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.08%)</title><rect x="91.8828%" y="101" width="0.0837%" height="15" fill="rgb(222,189,50)" fg:x="1098" fg:w="1"/><text x="92.1328%" y="111.50"></text></g><g><title>_malloc_zone_realloc (5 samples, 0.42%)</title><rect x="92.0502%" y="85" width="0.4184%" height="15" fill="rgb(245,148,34)" fg:x="1100" fg:w="5"/><text x="92.3002%" y="95.50"></text></g><g><title>szone_realloc (3 samples, 0.25%)</title><rect x="92.2176%" y="69" width="0.2510%" height="15" fill="rgb(222,29,6)" fg:x="1102" fg:w="3"/><text x="92.4676%" y="79.50"></text></g><g><title>szone_size (2 samples, 0.17%)</title><rect x="92.3013%" y="53" width="0.1674%" height="15" fill="rgb(221,189,43)" fg:x="1103" fg:w="2"/><text x="92.5513%" y="63.50"></text></g><g><title>tiny_size (2 samples, 0.17%)</title><rect x="92.3013%" y="37" width="0.1674%" height="15" fill="rgb(207,36,27)" fg:x="1103" fg:w="2"/><text x="92.5513%" y="47.50"></text></g><g><title>_realloc (9 samples, 0.75%)</title><rect x="91.9665%" y="101" width="0.7531%" height="15" fill="rgb(217,90,24)" fg:x="1099" fg:w="9"/><text x="92.2165%" y="111.50"></text></g><g><title>szone_size (3 samples, 0.25%)</title><rect x="92.4686%" y="85" width="0.2510%" height="15" fill="rgb(224,66,35)" fg:x="1105" fg:w="3"/><text x="92.7186%" y="95.50"></text></g><g><title>tiny_size (3 samples, 0.25%)</title><rect x="92.4686%" y="69" width="0.2510%" height="15" fill="rgb(221,13,50)" fg:x="1105" fg:w="3"/><text x="92.7186%" y="79.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="92.8870%" y="85" width="0.0837%" height="15" fill="rgb(236,68,49)" fg:x="1110" fg:w="1"/><text x="93.1370%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (22 samples, 1.84%)</title><rect x="91.8828%" y="117" width="1.8410%" height="15" fill="rgb(229,146,28)" fg:x="1098" fg:w="22"/><text x="92.1328%" y="127.50">a..</text></g><g><title>szone_malloc_should_clear (12 samples, 1.00%)</title><rect x="92.7197%" y="101" width="1.0042%" height="15" fill="rgb(225,31,38)" fg:x="1108" fg:w="12"/><text x="92.9697%" y="111.50"></text></g><g><title>tiny_malloc_should_clear (9 samples, 0.75%)</title><rect x="92.9707%" y="85" width="0.7531%" height="15" fill="rgb(250,208,3)" fg:x="1111" fg:w="9"/><text x="93.2207%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.42%)</title><rect x="93.3054%" y="69" width="0.4184%" height="15" fill="rgb(246,54,23)" fg:x="1115" fg:w="5"/><text x="93.5554%" y="79.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.25%)</title><rect x="93.4728%" y="53" width="0.2510%" height="15" fill="rgb(243,76,11)" fg:x="1117" fg:w="3"/><text x="93.7228%" y="63.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (57 samples, 4.77%)</title><rect x="89.0377%" y="165" width="4.7699%" height="15" fill="rgb(245,21,50)" fg:x="1064" fg:w="57"/><text x="89.2877%" y="175.50">vexy_json_..</text></g><g><title>vexy_json_core::parser::unescape_string (27 samples, 2.26%)</title><rect x="91.5481%" y="149" width="2.2594%" height="15" fill="rgb(228,9,43)" fg:x="1094" fg:w="27"/><text x="91.7981%" y="159.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (25 samples, 2.09%)</title><rect x="91.7155%" y="133" width="2.0921%" height="15" fill="rgb(208,100,47)" fg:x="1096" fg:w="25"/><text x="91.9655%" y="143.50">a..</text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.7238%" y="117" width="0.0837%" height="15" fill="rgb(232,26,8)" fg:x="1120" fg:w="1"/><text x="93.9738%" y="127.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (1 samples, 0.08%)</title><rect x="93.8075%" y="165" width="0.0837%" height="15" fill="rgb(216,166,38)" fg:x="1121" fg:w="1"/><text x="94.0575%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="94.0586%" y="133" width="0.0837%" height="15" fill="rgb(251,202,51)" fg:x="1124" fg:w="1"/><text x="94.3086%" y="143.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (5 samples, 0.42%)</title><rect x="93.8912%" y="165" width="0.4184%" height="15" fill="rgb(254,216,34)" fg:x="1122" fg:w="5"/><text x="94.1412%" y="175.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (4 samples, 0.33%)</title><rect x="93.9749%" y="149" width="0.3347%" height="15" fill="rgb(251,32,27)" fg:x="1123" fg:w="4"/><text x="94.2249%" y="159.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (2 samples, 0.17%)</title><rect x="94.1423%" y="133" width="0.1674%" height="15" fill="rgb(208,127,28)" fg:x="1125" fg:w="2"/><text x="94.3923%" y="143.50"></text></g><g><title>_malloc_zone_malloc (3 samples, 0.25%)</title><rect x="94.6444%" y="133" width="0.2510%" height="15" fill="rgb(224,137,22)" fg:x="1131" fg:w="3"/><text x="94.8944%" y="143.50"></text></g><g><title>szone_good_size (1 samples, 0.08%)</title><rect x="95.1464%" y="85" width="0.0837%" height="15" fill="rgb(254,70,32)" fg:x="1137" fg:w="1"/><text x="95.3964%" y="95.50"></text></g><g><title>_realloc (3 samples, 0.25%)</title><rect x="95.0628%" y="117" width="0.2510%" height="15" fill="rgb(229,75,37)" fg:x="1136" fg:w="3"/><text x="95.3128%" y="127.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.17%)</title><rect x="95.1464%" y="101" width="0.1674%" height="15" fill="rgb(252,64,23)" fg:x="1137" fg:w="2"/><text x="95.3964%" y="111.50"></text></g><g><title>szone_realloc (1 samples, 0.08%)</title><rect x="95.2301%" y="85" width="0.0837%" height="15" fill="rgb(232,162,48)" fg:x="1138" fg:w="1"/><text x="95.4801%" y="95.50"></text></g><g><title>tiny_try_realloc_in_place (1 samples, 0.08%)</title><rect x="95.2301%" y="69" width="0.0837%" height="15" fill="rgb(246,160,12)" fg:x="1138" fg:w="1"/><text x="95.4801%" y="79.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.25%)</title><rect x="95.3138%" y="101" width="0.2510%" height="15" fill="rgb(247,166,0)" fg:x="1139" fg:w="3"/><text x="95.5638%" y="111.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (165 samples, 13.81%)</title><rect x="82.7615%" y="181" width="13.8075%" height="15" fill="rgb(249,219,21)" fg:x="989" fg:w="165"/><text x="83.0115%" y="191.50">vexy_json_core::parser::P..</text></g><g><title>vexy_json_core::parser::unescape_string (27 samples, 2.26%)</title><rect x="94.3096%" y="165" width="2.2594%" height="15" fill="rgb(205,209,3)" fg:x="1127" fg:w="27"/><text x="94.5596%" y="175.50">z..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (23 samples, 1.92%)</title><rect x="94.6444%" y="149" width="1.9247%" height="15" fill="rgb(243,44,1)" fg:x="1131" fg:w="23"/><text x="94.8944%" y="159.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 1.67%)</title><rect x="94.8954%" y="133" width="1.6736%" height="15" fill="rgb(206,159,16)" fg:x="1134" fg:w="20"/><text x="95.1454%" y="143.50"></text></g><g><title>szone_malloc_should_clear (15 samples, 1.26%)</title><rect x="95.3138%" y="117" width="1.2552%" height="15" fill="rgb(244,77,30)" fg:x="1139" fg:w="15"/><text x="95.5638%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (12 samples, 1.00%)</title><rect x="95.5649%" y="101" width="1.0042%" height="15" fill="rgb(218,69,12)" fg:x="1142" fg:w="12"/><text x="95.8149%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="96.4017%" y="85" width="0.1674%" height="15" fill="rgb(212,87,7)" fg:x="1152" fg:w="2"/><text x="96.6517%" y="95.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="96.4854%" y="69" width="0.0837%" height="15" fill="rgb(245,114,25)" fg:x="1153" fg:w="1"/><text x="96.7354%" y="79.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments (2 samples, 0.17%)</title><rect x="96.5690%" y="181" width="0.1674%" height="15" fill="rgb(210,61,42)" fg:x="1154" fg:w="2"/><text x="96.8190%" y="191.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.08%)</title><rect x="96.8201%" y="165" width="0.0837%" height="15" fill="rgb(211,52,33)" fg:x="1157" fg:w="1"/><text x="97.0701%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex (1 samples, 0.08%)</title><rect x="96.8201%" y="149" width="0.0837%" height="15" fill="rgb(234,58,33)" fg:x="1157" fg:w="1"/><text x="97.0701%" y="159.50"></text></g><g><title>vexy_json_core::parser::Parser::skip_comments_and_newlines (5 samples, 0.42%)</title><rect x="96.7364%" y="181" width="0.4184%" height="15" fill="rgb(220,115,36)" fg:x="1156" fg:w="5"/><text x="96.9864%" y="191.50"></text></g><g><title>vexy_json_core::parser::Parser::advance (3 samples, 0.25%)</title><rect x="96.9038%" y="165" width="0.2510%" height="15" fill="rgb(243,153,54)" fg:x="1158" fg:w="3"/><text x="97.1538%" y="175.50"></text></g><g><title>&lt;vexy_json_core::ast::token::Token as logos::Logos&gt;::lex::goto12_ctx11_x (3 samples, 0.25%)</title><rect x="96.9038%" y="149" width="0.2510%" height="15" fill="rgb(251,47,18)" fg:x="1158" fg:w="3"/><text x="97.1538%" y="159.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.17%)</title><rect x="97.6569%" y="149" width="0.1674%" height="15" fill="rgb(242,102,42)" fg:x="1167" fg:w="2"/><text x="97.9069%" y="159.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.25%)</title><rect x="97.9916%" y="117" width="0.2510%" height="15" fill="rgb(234,31,38)" fg:x="1171" fg:w="3"/><text x="98.2416%" y="127.50"></text></g><g><title>vexy_json_core::parser::Parser::parse_value (399 samples, 33.39%)</title><rect x="65.5230%" y="197" width="33.3891%" height="15" fill="rgb(221,117,51)" fg:x="783" fg:w="399"/><text x="65.7730%" y="207.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (21 samples, 1.76%)</title><rect x="97.1548%" y="181" width="1.7573%" height="15" fill="rgb(212,20,18)" fg:x="1161" fg:w="21"/><text x="97.4048%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (15 samples, 1.26%)</title><rect x="97.6569%" y="165" width="1.2552%" height="15" fill="rgb(245,133,36)" fg:x="1167" fg:w="15"/><text x="97.9069%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 1.09%)</title><rect x="97.8243%" y="149" width="1.0879%" height="15" fill="rgb(212,6,19)" fg:x="1169" fg:w="13"/><text x="98.0743%" y="159.50"></text></g><g><title>szone_malloc_should_clear (11 samples, 0.92%)</title><rect x="97.9916%" y="133" width="0.9205%" height="15" fill="rgb(218,1,36)" fg:x="1171" fg:w="11"/><text x="98.2416%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (8 samples, 0.67%)</title><rect x="98.2427%" y="117" width="0.6695%" height="15" fill="rgb(246,84,54)" fg:x="1174" fg:w="8"/><text x="98.4927%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.33%)</title><rect x="98.5774%" y="101" width="0.3347%" height="15" fill="rgb(242,110,6)" fg:x="1178" fg:w="4"/><text x="98.8274%" y="111.50"></text></g><g><title>__rustc::__rdl_alloc (2 samples, 0.17%)</title><rect x="99.1632%" y="165" width="0.1674%" height="15" fill="rgb(214,47,5)" fg:x="1185" fg:w="2"/><text x="99.4132%" y="175.50"></text></g><g><title>_malloc_zone_realloc (3 samples, 0.25%)</title><rect x="99.4142%" y="133" width="0.2510%" height="15" fill="rgb(218,159,25)" fg:x="1188" fg:w="3"/><text x="99.6642%" y="143.50"></text></g><g><title>szone_realloc (3 samples, 0.25%)</title><rect x="99.4142%" y="117" width="0.2510%" height="15" fill="rgb(215,211,28)" fg:x="1188" fg:w="3"/><text x="99.6642%" y="127.50"></text></g><g><title>szone_size (2 samples, 0.17%)</title><rect x="99.4979%" y="101" width="0.1674%" height="15" fill="rgb(238,59,32)" fg:x="1189" fg:w="2"/><text x="99.7479%" y="111.50"></text></g><g><title>tiny_size (2 samples, 0.17%)</title><rect x="99.4979%" y="85" width="0.1674%" height="15" fill="rgb(226,82,3)" fg:x="1189" fg:w="2"/><text x="99.7479%" y="95.50"></text></g><g><title>_realloc (5 samples, 0.42%)</title><rect x="99.3305%" y="149" width="0.4184%" height="15" fill="rgb(240,164,32)" fg:x="1187" fg:w="5"/><text x="99.5805%" y="159.50"></text></g><g><title>szone_size (1 samples, 0.08%)</title><rect x="99.6653%" y="133" width="0.0837%" height="15" fill="rgb(232,46,7)" fg:x="1191" fg:w="1"/><text x="99.9153%" y="143.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.08%)</title><rect x="99.7490%" y="133" width="0.0837%" height="15" fill="rgb(229,129,53)" fg:x="1192" fg:w="1"/><text x="99.9990%" y="143.50"></text></g><g><title>all (1,195 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(234,188,29)" fg:x="0" fg:w="1195"/><text x="0.2500%" y="367.50"></text></g><g><title>start (1,194 samples, 99.92%)</title><rect x="0.0837%" y="341" width="99.9163%" height="15" fill="rgb(246,141,4)" fg:x="1" fg:w="1194"/><text x="0.3337%" y="351.50">start</text></g><g><title>main (1,188 samples, 99.41%)</title><rect x="0.5858%" y="325" width="99.4142%" height="15" fill="rgb(229,23,39)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="335.50">main</text></g><g><title>std::rt::lang_start_internal (1,188 samples, 99.41%)</title><rect x="0.5858%" y="309" width="99.4142%" height="15" fill="rgb(206,12,3)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="319.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (1,188 samples, 99.41%)</title><rect x="0.5858%" y="293" width="99.4142%" height="15" fill="rgb(252,226,20)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="303.50">std::rt::lang_start::_{{closure}}</text></g><g><title>core::ops::function::FnOnce::call_once (1,188 samples, 99.41%)</title><rect x="0.5858%" y="277" width="99.4142%" height="15" fill="rgb(216,123,35)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="287.50">core::ops::function::FnOnce::call_once</text></g><g><title>profile_parser::main (1,188 samples, 99.41%)</title><rect x="0.5858%" y="261" width="99.4142%" height="15" fill="rgb(212,68,40)" fg:x="7" fg:w="1188"/><text x="0.8358%" y="271.50">profile_parser::main</text></g><g><title>vexy_json_core::parser::parse (865 samples, 72.38%)</title><rect x="27.6151%" y="245" width="72.3849%" height="15" fill="rgb(254,125,32)" fg:x="330" fg:w="865"/><text x="27.8651%" y="255.50">vexy_json_core::parser::parse</text></g><g><title>vexy_json_core::parser::Parser::parse (865 samples, 72.38%)</title><rect x="27.6151%" y="229" width="72.3849%" height="15" fill="rgb(253,97,22)" fg:x="330" fg:w="865"/><text x="27.8651%" y="239.50">vexy_json_core::parser::Parser::parse</text></g><g><title>vexy_json_core::parser::Parser::parse_value (453 samples, 37.91%)</title><rect x="62.0921%" y="213" width="37.9079%" height="15" fill="rgb(241,101,14)" fg:x="742" fg:w="453"/><text x="62.3421%" y="223.50">vexy_json_core::parser::Parser::parse_value</text></g><g><title>vexy_json_core::parser::unescape_string (13 samples, 1.09%)</title><rect x="98.9121%" y="197" width="1.0879%" height="15" fill="rgb(238,103,29)" fg:x="1182" fg:w="13"/><text x="99.1621%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (11 samples, 0.92%)</title><rect x="99.0795%" y="181" width="0.9205%" height="15" fill="rgb(233,195,47)" fg:x="1184" fg:w="11"/><text x="99.3295%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.67%)</title><rect x="99.3305%" y="165" width="0.6695%" height="15" fill="rgb(246,218,30)" fg:x="1187" fg:w="8"/><text x="99.5805%" y="175.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="99.7490%" y="149" width="0.2510%" height="15" fill="rgb(219,145,47)" fg:x="1192" fg:w="3"/><text x="99.9990%" y="159.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 0.17%)</title><rect x="99.8326%" y="133" width="0.1674%" height="15" fill="rgb(243,12,26)" fg:x="1193" fg:w="2"/><text x="100.0826%" y="143.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="99.9163%" y="117" width="0.0837%" height="15" fill="rgb(214,87,16)" fg:x="1194" fg:w="1"/><text x="100.1663%" y="127.50"></text></g></svg></svg>